
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  08012eb0  08012eb0  00022eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e18  08013e18  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013e18  08013e18  00023e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e20  08013e20  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e20  08013e20  00023e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e24  08013e24  00023e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  08013e28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005224  240001f0  08014014  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24005414  08014014  00035414  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd61  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a21  00000000  00000000  0005ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  000659a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002090  00000000  00000000  00067c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042dee  00000000  00000000  00069d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fbb0  00000000  00000000  000acb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3b68  00000000  00000000  000dc6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028022e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5f0  00000000  00000000  00280280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e94 	.word	0x08012e94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	08012e94 	.word	0x08012e94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f006 f809 	bl	8006834 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 f800 	bl	8006834 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400021c 	.word	0x2400021c
 8000840:	24000220 	.word	0x24000220

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f005 ffe9 	bl	8006834 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 ffe0 	bl	8006834 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400021c 	.word	0x2400021c
 8000880:	24000222 	.word	0x24000222

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f008 fc8e 	bl	80091c8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f008 fe78 	bl	80095ac <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000224 	.word	0x24000224

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f008 fc63 	bl	80091c8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f008 fe4e 	bl	80095ac <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000224 	.word	0x24000224

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f008 fc39 	bl	80091c8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000224 	.word	0x24000224

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f008 fc19 	bl	80091c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f008 fc12 	bl	80091c8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000224 	.word	0x24000224

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f008 fbe9 	bl	80091c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f008 fdd4 	bl	80095ac <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000224 	.word	0x24000224

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00e fbc7 	bl	800f206 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f004 fe90 	bl	80057bc <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000224 	.word	0x24000224
 8000c08:	2400021c 	.word	0x2400021c
 8000c0c:	24000220 	.word	0x24000220
 8000c10:	24000222 	.word	0x24000222

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000210 	.word	0x24000210

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000210 	.word	0x24000210
 8000d40:	08013658 	.word	0x08013658
 8000d44:	08013660 	.word	0x08013660
 8000d48:	24000218 	.word	0x24000218

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000218 	.word	0x24000218

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000218 	.word	0x24000218

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000219 	.word	0x24000219

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000219 	.word	0x24000219

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400021a 	.word	0x2400021a

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f008 f884 	bl	80091c8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000224 	.word	0x24000224

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00e fe87 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f009 ffe8 	bl	800b0d0 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00e fe62 	bl	800fdf4 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00e fe5b 	bl	800fdf4 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00e fe54 	bl	800fdf4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f009 ffb5 	bl	800b0d0 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00e fdfb 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f009 ff5c 	bl	800b0d0 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00e fda2 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f009 ff03 	bl	800b0d0 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00e fd80 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f009 fee1 	bl	800b0d0 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00e fd63 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f009 fec4 	bl	800b0d0 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00e fd44 	bl	800fdf4 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00e fd3d 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f009 fe9e 	bl	800b0d0 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00e fd1b 	bl	800fdf4 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00e fd10 	bl	800fdf4 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00e fd05 	bl	800fdf4 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	08012eb0 	.word	0x08012eb0
 80013f0:	240002ac 	.word	0x240002ac
 80013f4:	08012ee4 	.word	0x08012ee4
 80013f8:	08012f00 	.word	0x08012f00
 80013fc:	08012f1c 	.word	0x08012f1c
 8001400:	08012f30 	.word	0x08012f30
 8001404:	08012f74 	.word	0x08012f74
 8001408:	08012fc0 	.word	0x08012fc0
 800140c:	08012fdc 	.word	0x08012fdc
 8001410:	08012ff0 	.word	0x08012ff0
 8001414:	08013008 	.word	0x08013008
 8001418:	08013020 	.word	0x08013020
 800141c:	08013034 	.word	0x08013034
 8001420:	08013048 	.word	0x08013048
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00e fcde 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f009 fe3f 	bl	800b0d0 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00e fcba 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f009 fe1b 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00e fc96 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f009 fdf7 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00e fc7b 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f009 fddc 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00e fc60 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f009 fdc1 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00e fc45 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f009 fda6 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00e fc2a 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f009 fd8b 	bl	800b0d0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00e fc06 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f009 fd67 	bl	800b0d0 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00e fbe9 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f009 fd4a 	bl	800b0d0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00e fbcc 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f009 fd2d 	bl	800b0d0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00e fbaf 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f009 fd10 	bl	800b0d0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00e fb92 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f009 fcf3 	bl	800b0d0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00e fb75 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f009 fcd6 	bl	800b0d0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00e fb58 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f009 fcb9 	bl	800b0d0 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0801305c 	.word	0x0801305c
 8001794:	240002ac 	.word	0x240002ac
 8001798:	08013070 	.word	0x08013070
 800179c:	080130a0 	.word	0x080130a0
 80017a0:	080130d0 	.word	0x080130d0
 80017a4:	080130f8 	.word	0x080130f8
 80017a8:	08013120 	.word	0x08013120
 80017ac:	08013148 	.word	0x08013148
 80017b0:	08013170 	.word	0x08013170
 80017b4:	0801319c 	.word	0x0801319c
 80017b8:	080131b8 	.word	0x080131b8
 80017bc:	080131d4 	.word	0x080131d4
 80017c0:	080131f0 	.word	0x080131f0
 80017c4:	0801320c 	.word	0x0801320c
 80017c8:	08013228 	.word	0x08013228
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00e fae0 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f009 fc41 	bl	800b0d0 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00e fac1 	bl	800fdf4 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00e faba 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f009 fc1b 	bl	800b0d0 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00e faa1 	bl	800fdf4 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00e fa9a 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f009 fbfb 	bl	800b0d0 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00e fa87 	bl	800fdf4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f009 fbe8 	bl	800b0d0 <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	08013244 	.word	0x08013244
 800190c:	240002ac 	.word	0x240002ac
 8001910:	08013290 	.word	0x08013290
 8001914:	080132a8 	.word	0x080132a8
 8001918:	080132c0 	.word	0x080132c0
 800191c:	080132dc 	.word	0x080132dc
 8001920:	08012eb0 	.word	0x08012eb0

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f00d fc62 	bl	800f206 <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	240002ac 	.word	0x240002ac

08001954 <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 8001954:	b082      	sub	sp, #8
 8001956:	b5b0      	push	{r4, r5, r7, lr}
 8001958:	b0a4      	sub	sp, #144	; 0x90
 800195a:	af22      	add	r7, sp, #136	; 0x88
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001968:	883d      	ldrh	r5, [r7, #0]
 800196a:	887c      	ldrh	r4, [r7, #2]
 800196c:	4668      	mov	r0, sp
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2284      	movs	r2, #132	; 0x84
 8001974:	4619      	mov	r1, r3
 8001976:	f00d fc46 	bl	800f206 <memcpy>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	462a      	mov	r2, r5
 800197e:	4621      	mov	r1, r4
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f867 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 8001986:	4668      	mov	r0, sp
 8001988:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	4619      	mov	r1, r3
 8001990:	f00d fc39 	bl	800f206 <memcpy>
 8001994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199a:	f7ff ffc3 	bl	8001924 <nrf24_DebugUART_Init>
	//NRF24_setAutoAck(true);
	NRF24_setAutoAck(false);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fa7a 	bl	8000e98 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 80019a4:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9ea 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f7ff f9fc 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 80019b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff f979 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 80019be:	f7ff fa21 	bl	8000e04 <NRF24_enableDynamicPayloads>
	//NRF24_enableAckPayload();
	NRF24_setDataRate(speed);
 80019c2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fab4 	bl	8000f34 <NRF24_setDataRate>
	printRadioSettings();
 80019cc:	f7ff fb82 	bl	80010d4 <printRadioSettings>
	NRF24_startListening();
 80019d0:	f7ff f920 	bl	8000c14 <NRF24_startListening>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr

080019e2 <myReadData>:

//Read Data
void myReadData(uint8_t* myRxData){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  if(NRF24_available()){
 80019ea:	f7ff f939 	bl	8000c60 <NRF24_available>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <myReadData+0x2a>
			NRF24_read(myRxData, 32);
 80019f4:	2120      	movs	r1, #32
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff f93a 	bl	8000c70 <NRF24_read>
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3320      	adds	r3, #32
 8001a00:	220d      	movs	r2, #13
 8001a02:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3321      	adds	r3, #33	; 0x21
 8001a08:	220a      	movs	r2, #10
 8001a0a:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0000      	movs	r0, r0
	...

08001a18 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	bf28      	it	cs
 8001a2c:	461a      	movcs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	bf28      	it	cs
 8001a3e:	461a      	movcs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	bf28      	it	cs
 8001a50:	461a      	movcs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	1ad2      	subs	r2, r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a6c:	fb03 f202 	mul.w	r2, r3, r2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4413      	add	r3, r2
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001a8a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001af0 <setPwmS+0xd8>
 8001a8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001aa4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001af0 <setPwmS+0xd8>
 8001aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aac:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ac2:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001ac6:	ed97 6b04 	vldr	d6, [r7, #16]
 8001aca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ace:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ada:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ade:	ee17 2a90 	vmov	r2, s15
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	00000000 	.word	0x00000000
 8001af4:	412e8480 	.word	0x412e8480

08001af8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <MX_FDCAN1_Init+0xd4>)
 8001b00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b22:	2202      	movs	r2, #2
 8001b24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b28:	2208      	movs	r2, #8
 8001b2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b2e:	223f      	movs	r2, #63	; 0x3f
 8001b30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b34:	2210      	movs	r2, #16
 8001b36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001ba6:	f003 ff1d 	bl	80059e4 <HAL_FDCAN_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001bb0:	f001 fca2 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001bb6:	f004 f8f3 	bl	8005da0 <HAL_FDCAN_Start>
	}
	/* Start Error */

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <MX_FDCAN1_Init+0xd0>)
 8001bc0:	f004 fa88 	bl	80060d4 <HAL_FDCAN_ActivateNotification>
	}
	/* Notification Error */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2400033c 	.word	0x2400033c
 8001bcc:	4000a000 	.word	0x4000a000

08001bd0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0b8      	sub	sp, #224	; 0xe0
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	22bc      	movs	r2, #188	; 0xbc
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00d fb16 	bl	800f222 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <HAL_FDCAN_MspInit+0xc0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d142      	bne.n	8001c86 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fe6b 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c1c:	f001 fc6c 	bl	80034f8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_FDCAN_MspInit+0xc4>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c74:	2309      	movs	r3, #9
 8001c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_FDCAN_MspInit+0xc8>)
 8001c82:	f004 fc27 	bl	80064d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	37e0      	adds	r7, #224	; 0xe0
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	4000a000 	.word	0x4000a000
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58020c00 	.word	0x58020c00

08001c9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <MX_FREERTOS_Init+0x64>)
 8001ca2:	f00a fbf6 	bl	800c492 <osMutexNew>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <MX_FREERTOS_Init+0x68>)
 8001caa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <MX_FREERTOS_Init+0x6c>)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4816      	ldr	r0, [pc, #88]	; (8001d0c <MX_FREERTOS_Init+0x70>)
 8001cb2:	f00a fb41 	bl	800c338 <osThreadNew>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_FREERTOS_Init+0x74>)
 8001cba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
//  blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);

  servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
 8001cbc:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_FREERTOS_Init+0x78>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <MX_FREERTOS_Init+0x7c>)
 8001cc2:	f00a fb39 	bl	800c338 <osThreadNew>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MX_FREERTOS_Init+0x80>)
 8001cca:	6013      	str	r3, [r2, #0]
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <MX_FREERTOS_Init+0x84>)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <MX_FREERTOS_Init+0x88>)
 8001cd2:	f00a fb31 	bl	800c338 <osThreadNew>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <MX_FREERTOS_Init+0x8c>)
 8001cda:	6013      	str	r3, [r2, #0]
  radioTaskHandle = osThreadNew(radioTask, NULL, &radioTaskHandle_attributes);
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <MX_FREERTOS_Init+0x90>)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4813      	ldr	r0, [pc, #76]	; (8001d30 <MX_FREERTOS_Init+0x94>)
 8001ce2:	f00a fb29 	bl	800c338 <osThreadNew>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_FREERTOS_Init+0x98>)
 8001cea:	6013      	str	r3, [r2, #0]
  wpTaskHandle = osThreadNew(wpTask, NULL, &wpTaskHandle_attributes);
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_FREERTOS_Init+0x9c>)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4812      	ldr	r0, [pc, #72]	; (8001d3c <MX_FREERTOS_Init+0xa0>)
 8001cf2:	f00a fb21 	bl	800c338 <osThreadNew>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <MX_FREERTOS_Init+0xa4>)
 8001cfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	080137ac 	.word	0x080137ac
 8001d04:	24000728 	.word	0x24000728
 8001d08:	08013788 	.word	0x08013788
 8001d0c:	08001d45 	.word	0x08001d45
 8001d10:	24000724 	.word	0x24000724
 8001d14:	080136b0 	.word	0x080136b0
 8001d18:	08002305 	.word	0x08002305
 8001d1c:	2400070c 	.word	0x2400070c
 8001d20:	0801368c 	.word	0x0801368c
 8001d24:	08002149 	.word	0x08002149
 8001d28:	24000708 	.word	0x24000708
 8001d2c:	08013740 	.word	0x08013740
 8001d30:	08001d59 	.word	0x08001d59
 8001d34:	2400071c 	.word	0x2400071c
 8001d38:	08013764 	.word	0x08013764
 8001d3c:	08001ed1 	.word	0x08001ed1
 8001d40:	24000720 	.word	0x24000720

08001d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001d4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d50:	f00a fb84 	bl	800c45c <osDelay>
 8001d54:	e7fa      	b.n	8001d4c <StartDefaultTask+0x8>
	...

08001d58 <radioTask>:
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
		osDelay(500);
	}
}

void radioTask(void *argument) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	ed2d 8b02 	vpush	{d8}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  float dt = 0.1;
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <radioTask+0x158>)
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  float real_x = 0.0;
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
  float real_y = 0.0;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  float init_x = real_x;
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  float init_y = real_y;
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	623b      	str	r3, [r7, #32]
  float vx = 0.1;
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <radioTask+0x158>)
 8001d7e:	61fb      	str	r3, [r7, #28]
  float vy = 0.1;
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <radioTask+0x158>)
 8001d82:	61bb      	str	r3, [r7, #24]
  float meas_variance = 0.1 * 0.1;
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <radioTask+0x15c>)
 8001d86:	617b      	str	r3, [r7, #20]
  float accel_var_x = 0.1;
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <radioTask+0x158>)
 8001d8a:	613b      	str	r3, [r7, #16]
  float accel_var_y = 0.1;
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <radioTask+0x158>)
 8001d8e:	60fb      	str	r3, [r7, #12]
  initKalman(&kf, init_x, init_y, vx, vy, accel_var_x, accel_var_y);
 8001d90:	edd7 2a03 	vldr	s5, [r7, #12]
 8001d94:	ed97 2a04 	vldr	s4, [r7, #16]
 8001d98:	edd7 1a06 	vldr	s3, [r7, #24]
 8001d9c:	ed97 1a07 	vldr	s2, [r7, #28]
 8001da0:	edd7 0a08 	vldr	s1, [r7, #32]
 8001da4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001da8:	4843      	ldr	r0, [pc, #268]	; (8001eb8 <radioTask+0x160>)
 8001daa:	f000 fe81 	bl	8002ab0 <initKalman>
  int counter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(;;)
	{
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <radioTask+0x164>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <radioTask+0x168>)
 8001dbe:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dc6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001ea8 <radioTask+0x150>
 8001dca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dce:	eeb0 0b47 	vmov.f64	d0, d7
 8001dd2:	f010 f85d 	bl	8011e90 <cos>
 8001dd6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dda:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001dde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001de2:	edc7 7a07 	vstr	s15, [r7, #28]
		vy = speed * sin(M_PI / 180 * mpu.pose[2]);
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <radioTask+0x164>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <radioTask+0x168>)
 8001df2:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001df6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dfa:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ea8 <radioTask+0x150>
 8001dfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e02:	eeb0 0b47 	vmov.f64	d0, d7
 8001e06:	f010 f88f 	bl	8011f28 <sin>
 8001e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e16:	edc7 7a06 	vstr	s15, [r7, #24]
	    real_x += dt * vx;
 8001e1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    real_y +=  dt * vy;
 8001e32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		predict(&kf, dt);
 8001e4a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <radioTask+0x160>)
 8001e50:	f000 fe94 	bl	8002b7c <predict>

		if(counter % 30 == 0)
 8001e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <radioTask+0x16c>)
 8001e58:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	1119      	asrs	r1, r3, #4
 8001e60:	17d3      	asrs	r3, r2, #31
 8001e62:	1ac9      	subs	r1, r1, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a5b      	subs	r3, r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	1ad1      	subs	r1, r2, r3
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	d108      	bne.n	8001e84 <radioTask+0x12c>
		  update(&kf, real_x, real_y, meas_variance);
 8001e72:	ed97 1a05 	vldr	s2, [r7, #20]
 8001e76:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8001e7a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <radioTask+0x160>)
 8001e80:	f000 ff48 	bl	8002d14 <update>
//	      update(&kf, dataCam.px, dataCam.py, meas_variance);
		counter++;
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	3301      	adds	r3, #1
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c

		// printf("Real: %3.3f, %3.3f || Estimated: %3.3f, %3.3f || V: %3.3f, %3.3f || Psi: %3.3f \r\n",
		// real_x, real_y, kf.x[0], kf.y[0], vx, vy, mpu.pose[2]);
		osDelay(dt * 1000);
 8001e8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ec8 <radioTask+0x170>
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f00a fadd 	bl	800c45c <osDelay>
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001ea2:	e786      	b.n	8001db2 <radioTask+0x5a>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	a2529d39 	.word	0xa2529d39
 8001eac:	3f91df46 	.word	0x3f91df46
 8001eb0:	3dcccccd 	.word	0x3dcccccd
 8001eb4:	3c23d70a 	.word	0x3c23d70a
 8001eb8:	240004fc 	.word	0x240004fc
 8001ebc:	240004f8 	.word	0x240004f8
 8001ec0:	240003dc 	.word	0x240003dc
 8001ec4:	88888889 	.word	0x88888889
 8001ec8:	447a0000 	.word	0x447a0000
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <wpTask>:
	}
}

void wpTask(void *argument) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	6078      	str	r0, [r7, #4]
  init_waypoint_buffer(&wp_buf);
 8001ed8:	4837      	ldr	r0, [pc, #220]	; (8001fb8 <wpTask+0xe8>)
 8001eda:	f003 fb37 	bl	800554c <init_waypoint_buffer>
//	  tok += 0.1;
//	  wx = tok * 2;
//	  wy = sin(tok * 5);
//	  add_wp(&wp_buf, wx, wy);
//  }
  add_wp(&wp_buf, 0, 0);
 8001ede:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001fbc <wpTask+0xec>
 8001ee2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001fbc <wpTask+0xec>
 8001ee6:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <wpTask+0xe8>)
 8001ee8:	f003 fb46 	bl	8005578 <add_wp>
  add_wp(&wp_buf, 10, 0);
 8001eec:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001fbc <wpTask+0xec>
 8001ef0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001ef4:	4830      	ldr	r0, [pc, #192]	; (8001fb8 <wpTask+0xe8>)
 8001ef6:	f003 fb3f 	bl	8005578 <add_wp>
  add_wp(&wp_buf, 10, 10);
 8001efa:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001efe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001f02:	482d      	ldr	r0, [pc, #180]	; (8001fb8 <wpTask+0xe8>)
 8001f04:	f003 fb38 	bl	8005578 <add_wp>
//  add_wp(&wp_buf, 0, 10);
//  add_wp(&wp_buf, 0, 0);

  printf("Waypoints: \r\n");
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <wpTask+0xf0>)
 8001f0a:	f00d fef1 	bl	800fcf0 <puts>
  for(int i = 0 ; i < wp_buf.size ; i++){
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e01c      	b.n	8001f4e <wpTask+0x7e>
	  printf("%d: {%3.3f, %3.3f}\r\n", i, wp_buf.wp_buf[i].x, wp_buf.wp_buf[i].y);
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <wpTask+0xe8>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f26:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <wpTask+0xe8>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3308      	adds	r3, #8
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f38:	ed8d 7b00 	vstr	d7, [sp]
 8001f3c:	ec53 2b16 	vmov	r2, r3, d6
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	4820      	ldr	r0, [pc, #128]	; (8001fc4 <wpTask+0xf4>)
 8001f44:	f00d fe4e 	bl	800fbe4 <iprintf>
  for(int i = 0 ; i < wp_buf.size ; i++){
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <wpTask+0xe8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbdd      	blt.n	8001f14 <wpTask+0x44>
  }

  float dt = 0.1;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <wpTask+0xf8>)
 8001f5a:	60bb      	str	r3, [r7, #8]
  clean(&wp_buf);
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <wpTask+0xe8>)
 8001f5e:	f003 fb5f 	bl	8005620 <clean>
	for(;;)
	{
    if(stanley.e_a < 0.2 && stanley.e_a != 0){
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <wpTask+0xfc>)
 8001f64:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f6c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001fb0 <wpTask+0xe0>
 8001f70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	d50d      	bpl.n	8001f96 <wpTask+0xc6>
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <wpTask+0xfc>)
 8001f7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d005      	beq.n	8001f96 <wpTask+0xc6>
      to_next(&wp_buf);
 8001f8a:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <wpTask+0xe8>)
 8001f8c:	f003 fb28 	bl	80055e0 <to_next>
      printf("huh\r\n");
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <wpTask+0x100>)
 8001f92:	f00d fead 	bl	800fcf0 <puts>

    }
	osDelay(dt * 1000);
 8001f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001fd4 <wpTask+0x104>
 8001f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa6:	ee17 0a90 	vmov	r0, s15
 8001faa:	f00a fa57 	bl	800c45c <osDelay>
    if(stanley.e_a < 0.2 && stanley.e_a != 0){
 8001fae:	e7d8      	b.n	8001f62 <wpTask+0x92>
 8001fb0:	9999999a 	.word	0x9999999a
 8001fb4:	3fc99999 	.word	0x3fc99999
 8001fb8:	2400055c 	.word	0x2400055c
 8001fbc:	00000000 	.word	0x00000000
 8001fc0:	08013470 	.word	0x08013470
 8001fc4:	08013480 	.word	0x08013480
 8001fc8:	3dcccccd 	.word	0x3dcccccd
 8001fcc:	2400049c 	.word	0x2400049c
 8001fd0:	08013498 	.word	0x08013498
 8001fd4:	447a0000 	.word	0x447a0000

08001fd8 <imuTask>:
	}
}

void imuTask(void *argument)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b090      	sub	sp, #64	; 0x40
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 8001fe0:	4a49      	ldr	r2, [pc, #292]	; (8002108 <imuTask+0x130>)
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	8019      	strh	r1, [r3, #0]
 8001fec:	3302      	adds	r3, #2
 8001fee:	0c12      	lsrs	r2, r2, #16
 8001ff0:	701a      	strb	r2, [r3, #0]
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <imuTask+0x134>)
 8001ff4:	f00d fe7c 	bl	800fcf0 <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4844      	ldr	r0, [pc, #272]	; (8002110 <imuTask+0x138>)
 8002000:	f001 fa7f 	bl	8003502 <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 8002004:	4843      	ldr	r0, [pc, #268]	; (8002114 <imuTask+0x13c>)
 8002006:	f00d fe73 	bl	800fcf0 <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 800200a:	f107 0220 	add.w	r2, r7, #32
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f001 fb41 	bl	800369c <calibrateMPU9250>
	  printf("AccBias {");
 800201a:	483f      	ldr	r0, [pc, #252]	; (8002118 <imuTask+0x140>)
 800201c:	f00d fde2 	bl	800fbe4 <iprintf>
	  for(int i=0; i<3; i++){
 8002020:	2300      	movs	r3, #0
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	e016      	b.n	8002054 <imuTask+0x7c>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 8002026:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	443b      	add	r3, r7
 800203a:	3b2c      	subs	r3, #44	; 0x2c
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002044:	ec53 2b17 	vmov	r2, r3, d7
 8002048:	4834      	ldr	r0, [pc, #208]	; (800211c <imuTask+0x144>)
 800204a:	f00d fdcb 	bl	800fbe4 <iprintf>
	  for(int i=0; i<3; i++){
 800204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002050:	3301      	adds	r3, #1
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002056:	2b02      	cmp	r3, #2
 8002058:	dde5      	ble.n	8002026 <imuTask+0x4e>
	  }
	  printf("} GyroBias{");
 800205a:	4831      	ldr	r0, [pc, #196]	; (8002120 <imuTask+0x148>)
 800205c:	f00d fdc2 	bl	800fbe4 <iprintf>
	  for(int i=0; i<3; i++){
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
 8002064:	e016      	b.n	8002094 <imuTask+0xbc>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 8002066:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3340      	adds	r3, #64	; 0x40
 8002078:	443b      	add	r3, r7
 800207a:	3b20      	subs	r3, #32
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002084:	ec53 2b17 	vmov	r2, r3, d7
 8002088:	4824      	ldr	r0, [pc, #144]	; (800211c <imuTask+0x144>)
 800208a:	f00d fdab 	bl	800fbe4 <iprintf>
	  for(int i=0; i<3; i++){
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	3301      	adds	r3, #1
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	2b02      	cmp	r3, #2
 8002098:	dde5      	ble.n	8002066 <imuTask+0x8e>
	  }
	  printf("}\r\n");
 800209a:	4822      	ldr	r0, [pc, #136]	; (8002124 <imuTask+0x14c>)
 800209c:	f00d fe28 	bl	800fcf0 <puts>

	  printf("Starting IMU...\r\n");
 80020a0:	4821      	ldr	r0, [pc, #132]	; (8002128 <imuTask+0x150>)
 80020a2:	f00d fe25 	bl	800fcf0 <puts>
	  float pose[] = {0,0,0};
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
	  setPose(&mpu, initPose);
 80020b8:	491c      	ldr	r1, [pc, #112]	; (800212c <imuTask+0x154>)
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <imuTask+0x138>)
 80020bc:	f002 f846 	bl	800414c <setPose>
	  int counter = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34

	wirelessTaskHandle = osThreadNew(wirelessTask, NULL, &wirelessTaskHandle_attributes);
 80020c4:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <imuTask+0x158>)
 80020c6:	2100      	movs	r1, #0
 80020c8:	481a      	ldr	r0, [pc, #104]	; (8002134 <imuTask+0x15c>)
 80020ca:	f00a f935 	bl	800c338 <osThreadNew>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <imuTask+0x160>)
 80020d2:	6013      	str	r3, [r2, #0]

    float dt = 0.1;
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <imuTask+0x164>)
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
	for(;;)
	{
		updateData(&mpu, dt, speed); //Printing with func from header file
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <imuTask+0x168>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eef0 0a67 	vmov.f32	s1, s15
 80020e2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80020e6:	480a      	ldr	r0, [pc, #40]	; (8002110 <imuTask+0x138>)
 80020e8:	f001 fe4a 	bl	8003d80 <updateData>
		// for(int i = 0; i<3;i++){
		//    printf("{%05.1f}",mpu.pose[i]);
		// }
		// printf("\r\n");
    // osMutexRelease(myMutex01Handle);
		osDelay(dt * 1000);
 80020ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002144 <imuTask+0x16c>
 80020f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fc:	ee17 0a90 	vmov	r0, s15
 8002100:	f00a f9ac 	bl	800c45c <osDelay>
		updateData(&mpu, dt, speed); //Printing with func from header file
 8002104:	e7e8      	b.n	80020d8 <imuTask+0x100>
 8002106:	bf00      	nop
 8002108:	08013504 	.word	0x08013504
 800210c:	080134a0 	.word	0x080134a0
 8002110:	240003dc 	.word	0x240003dc
 8002114:	080134b4 	.word	0x080134b4
 8002118:	080134c8 	.word	0x080134c8
 800211c:	080134d4 	.word	0x080134d4
 8002120:	080134e0 	.word	0x080134e0
 8002124:	080134ec 	.word	0x080134ec
 8002128:	080134f0 	.word	0x080134f0
 800212c:	240006f8 	.word	0x240006f8
 8002130:	080136f8 	.word	0x080136f8
 8002134:	08002679 	.word	0x08002679
 8002138:	24000714 	.word	0x24000714
 800213c:	3dcccccd 	.word	0x3dcccccd
 8002140:	240004f8 	.word	0x240004f8
 8002144:	447a0000 	.word	0x447a0000

08002148 <escTask>:
	}
}

void escTask(void *argument){
 8002148:	b580      	push	{r7, lr}
 800214a:	b0a4      	sub	sp, #144	; 0x90
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Staring Timer 3
 8002150:	2100      	movs	r1, #0
 8002152:	485f      	ldr	r0, [pc, #380]	; (80022d0 <escTask+0x188>)
 8002154:	f007 ff90 	bl	800a078 <HAL_TIM_PWM_Start>
	int minPulseWidthEsc = 1000; //Range for right and left Esc
 8002158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int maxPulseWidthEsc = 1500;
 8002160:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	unsigned int pwmPeriod = 20000;
 8002168:	f644 6320 	movw	r3, #20000	; 0x4e20
 800216c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int resolution = 100;
 8002170:	2364      	movs	r3, #100	; 0x64
 8002172:	67fb      	str	r3, [r7, #124]	; 0x7c
	struct escValues escValues = {htim2, minPulseWidthEsc, //Struct Containing all
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	2268      	movs	r2, #104	; 0x68
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00d f850 	bl	800f222 <memset>
 8002182:	4a53      	ldr	r2, [pc, #332]	; (80022d0 <escTask+0x188>)
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	4611      	mov	r1, r2
 800218a:	224c      	movs	r2, #76	; 0x4c
 800218c:	4618      	mov	r0, r3
 800218e:	f00d f83a 	bl	800f206 <memcpy>
 8002192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002196:	657b      	str	r3, [r7, #84]	; 0x54
 8002198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
 800219e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a6:	663b      	str	r3, [r7, #96]	; 0x60
	maxPulseWidthEsc, pwmPeriod, resolution};	  	 //PWM Variables for Esc

  // Calibration
  int i = 100;
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int dt = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	67bb      	str	r3, [r7, #120]	; 0x78
  do{
	  setPwmS(&escValues);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc2e 	bl	8001a18 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 80021bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c0:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_Delay(10);
 80021c2:	200a      	movs	r0, #10
 80021c4:	f003 fafa 	bl	80057bc <HAL_Delay>
	  i=i-dt;
 80021c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  }while(i > 50);
 80021d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021d8:	2b32      	cmp	r3, #50	; 0x32
 80021da:	dcea      	bgt.n	80021b2 <escTask+0x6a>

  float dtTask = 0.1;
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <escTask+0x18c>)
 80021de:	677b      	str	r3, [r7, #116]	; 0x74

  initPI(&pi, dtTask, 190.0, 80.0, 10.0, 100, 10);
 80021e0:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 80021e4:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 80022d8 <escTask+0x190>
 80021e8:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80021ec:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80022dc <escTask+0x194>
 80021f0:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80022e0 <escTask+0x198>
 80021f4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80021f8:	483a      	ldr	r0, [pc, #232]	; (80022e4 <escTask+0x19c>)
 80021fa:	f002 f809 	bl	8004210 <initPI>

  minPulseWidthEsc = 1500;
 80021fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  maxPulseWidthEsc = 2000;
 8002206:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  escValues.maxPulseWidth = maxPulseWidthEsc;
 800220e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002212:	65bb      	str	r3, [r7, #88]	; 0x58
  escValues.minPulseWidth = minPulseWidthEsc;
 8002214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002218:	657b      	str	r3, [r7, #84]	; 0x54

  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 800221a:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <escTask+0x1a0>)
 800221c:	2100      	movs	r1, #0
 800221e:	4833      	ldr	r0, [pc, #204]	; (80022ec <escTask+0x1a4>)
 8002220:	f00a f88a 	bl	800c338 <osThreadNew>
 8002224:	4603      	mov	r3, r0
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <escTask+0x1a8>)
 8002228:	6013      	str	r3, [r2, #0]

//  escValues.percentage = 0;
//  setPwmS(&escValues);

  updateReferences(&pi, 0.5);
 800222a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800222e:	482d      	ldr	r0, [pc, #180]	; (80022e4 <escTask+0x19c>)
 8002230:	f002 f826 	bl	8004280 <updateReferences>
  saturateManipulation(&pi, speed);
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <escTask+0x1ac>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	4829      	ldr	r0, [pc, #164]	; (80022e4 <escTask+0x19c>)
 8002240:	f002 f89d 	bl	800437e <saturateManipulation>
//  escValues.percentage = (unsigned int)pi.u;
  escValues.percentage = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	667b      	str	r3, [r7, #100]	; 0x64
  setPwmS(&escValues);
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fbe3 	bl	8001a18 <setPwmS>

	for(;;){

    if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <escTask+0x1b0>)
 8002254:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <escTask+0x1b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	429a      	cmp	r2, r3
 8002260:	d117      	bne.n	8002292 <escTask+0x14a>
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <escTask+0x1b4>)
 8002264:	edd3 7a06 	vldr	s15, [r3, #24]
 8002268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80022c0 <escTask+0x178>
 8002270:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d414      	bmi.n	80022a4 <escTask+0x15c>
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <escTask+0x1b4>)
 800227c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002284:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80022c8 <escTask+0x180>
 8002288:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dc08      	bgt.n	80022a4 <escTask+0x15c>
//      escValues.percentage = 0;
//      setPwmS(&escValues);
    } else {
      saturateManipulation(&pi, speed);
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <escTask+0x1ac>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	4811      	ldr	r0, [pc, #68]	; (80022e4 <escTask+0x19c>)
 800229e:	f002 f86e 	bl	800437e <saturateManipulation>
 80022a2:	e000      	b.n	80022a6 <escTask+0x15e>
    if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 80022a4:	bf00      	nop
//      escValues.percentage = (unsigned int)pi.u;
//      setPwmS(&escValues);
    }
    osDelay(1000 * dtTask);
 80022a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022aa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002300 <escTask+0x1b8>
 80022ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b6:	ee17 0a90 	vmov	r0, s15
 80022ba:	f00a f8cf 	bl	800c45c <osDelay>
    if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 80022be:	e7c8      	b.n	8002252 <escTask+0x10a>
 80022c0:	9999999a 	.word	0x9999999a
 80022c4:	3fb99999 	.word	0x3fb99999
 80022c8:	9999999a 	.word	0x9999999a
 80022cc:	bfb99999 	.word	0xbfb99999
 80022d0:	240008c8 	.word	0x240008c8
 80022d4:	3dcccccd 	.word	0x3dcccccd
 80022d8:	42c80000 	.word	0x42c80000
 80022dc:	42a00000 	.word	0x42a00000
 80022e0:	433e0000 	.word	0x433e0000
 80022e4:	24000534 	.word	0x24000534
 80022e8:	08013668 	.word	0x08013668
 80022ec:	08001fd9 	.word	0x08001fd9
 80022f0:	24000704 	.word	0x24000704
 80022f4:	240004f8 	.word	0x240004f8
 80022f8:	2400055c 	.word	0x2400055c
 80022fc:	2400049c 	.word	0x2400049c
 8002300:	447a0000 	.word	0x447a0000

08002304 <servoTask>:
	}
}

void servoTask(void *argument){
 8002304:	b580      	push	{r7, lr}
 8002306:	b0a6      	sub	sp, #152	; 0x98
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 800230c:	2100      	movs	r1, #0
 800230e:	4840      	ldr	r0, [pc, #256]	; (8002410 <servoTask+0x10c>)
 8002310:	f007 feb2 	bl	800a078 <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 8002314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int maxPulseWidthServo = 2000;
 800231c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  unsigned int pwmPeriod = 20000;
 8002324:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int resolution = 100;
 800232c:	2364      	movs	r3, #100	; 0x64
 800232e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	2268      	movs	r2, #104	; 0x68
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f00c ff71 	bl	800f222 <memset>
 8002340:	4a33      	ldr	r2, [pc, #204]	; (8002410 <servoTask+0x10c>)
 8002342:	f107 0318 	add.w	r3, r7, #24
 8002346:	4611      	mov	r1, r2
 8002348:	224c      	movs	r2, #76	; 0x4c
 800234a:	4618      	mov	r0, r3
 800234c:	f00c ff5b 	bl	800f206 <memcpy>
 8002350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002354:	667b      	str	r3, [r7, #100]	; 0x64
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235a:	66bb      	str	r3, [r7, #104]	; 0x68
 800235c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002366:	673b      	str	r3, [r7, #112]	; 0x70
  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo
  
  float in[2] = {st_saturation_limits[1], st_saturation_limits[0]}; // min, max delta values
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <servoTask+0x110>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <servoTask+0x110>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]
  float out[2] = {90, 10}; // min, max percentage values
 8002374:	4a28      	ldr	r2, [pc, #160]	; (8002418 <servoTask+0x114>)
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237e:	e883 0003 	stmia.w	r3, {r0, r1}
  float slope = (float)((out[1] - out[0]) / (in[1] - in[0]));
 8002382:	ed97 7a03 	vldr	s14, [r7, #12]
 8002386:	edd7 7a02 	vldr	s15, [r7, #8]
 800238a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800238e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002392:	edd7 7a04 	vldr	s15, [r7, #16]
 8002396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  uint8_t last_steer = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  servoValues.percentage = 50;
 80023a8:	2332      	movs	r3, #50	; 0x32
 80023aa:	677b      	str	r3, [r7, #116]	; 0x74
  setPwmS(&servoValues);
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fb31 	bl	8001a18 <setPwmS>

  canTaskHandle = osThreadNew(canTask, NULL, &canTaskHandle_attributes);
 80023b6:	4a19      	ldr	r2, [pc, #100]	; (800241c <servoTask+0x118>)
 80023b8:	2100      	movs	r1, #0
 80023ba:	4819      	ldr	r0, [pc, #100]	; (8002420 <servoTask+0x11c>)
 80023bc:	f009 ffbc 	bl	800c338 <osThreadNew>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <servoTask+0x120>)
 80023c4:	6013      	str	r3, [r2, #0]

	for(;;){
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 80023c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <servoTask+0x124>)
 80023cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80023d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023d8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80023dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e8:	ee17 3a90 	vmov	r3, s15
 80023ec:	677b      	str	r3, [r7, #116]	; 0x74
     if(servoValues.percentage != last_steer){
 80023ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d004      	beq.n	8002402 <servoTask+0xfe>
    	 setPwmS(&servoValues);
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb0b 	bl	8001a18 <setPwmS>

     }
     last_steer = servoValues.percentage;
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    osDelay(100);
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	f00a f827 	bl	800c45c <osDelay>
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 800240e:	e7da      	b.n	80023c6 <servoTask+0xc2>
 8002410:	24000914 	.word	0x24000914
 8002414:	24000008 	.word	0x24000008
 8002418:	08013508 	.word	0x08013508
 800241c:	0801371c 	.word	0x0801371c
 8002420:	08002871 	.word	0x08002871
 8002424:	24000718 	.word	0x24000718
 8002428:	2400049c 	.word	0x2400049c
 800242c:	00000000 	.word	0x00000000

08002430 <stanleyTask>:
	}
}

void stanleyTask(void *argument){
 8002430:	b580      	push	{r7, lr}
 8002432:	ed2d 8b0c 	vpush	{d8-d13}
 8002436:	b0a8      	sub	sp, #160	; 0xa0
 8002438:	af1a      	add	r7, sp, #104	; 0x68
 800243a:	6078      	str	r0, [r7, #4]
  float st_k = 10; // Gain
 800243c:	4b82      	ldr	r3, [pc, #520]	; (8002648 <stanleyTask+0x218>)
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  float st_k_soft = 0.01; // Soft gain
 8002440:	4b82      	ldr	r3, [pc, #520]	; (800264c <stanleyTask+0x21c>)
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t precision = 10; // Result's float resolution
 8002444:	230a      	movs	r3, #10
 8002446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Control signals
  float vel = 0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28

  // Vehicle pose
  struct Point vehicle_pos = {0, 0};
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  float psi = 0;
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24

  // Path
  struct Point p1;
  struct Point p2;

  p1.x = 0;
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  p1.y = 0;
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  p2.x = 10;
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <stanleyTask+0x218>)
 8002470:	60fb      	str	r3, [r7, #12]
  p2.y = 0;
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  initStanley(&stanley,st_saturation_limits, st_k, st_k_soft);
 8002478:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 800247c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002480:	4973      	ldr	r1, [pc, #460]	; (8002650 <stanleyTask+0x220>)
 8002482:	4874      	ldr	r0, [pc, #464]	; (8002654 <stanleyTask+0x224>)
 8002484:	f002 fa28 	bl	80048d8 <initStanley>
  
	for(;;){
    vehicle_pos.x = kf.x[0];
 8002488:	4b73      	ldr	r3, [pc, #460]	; (8002658 <stanleyTask+0x228>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61fb      	str	r3, [r7, #28]
    vehicle_pos.y = kf.y[0];
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <stanleyTask+0x228>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	623b      	str	r3, [r7, #32]

    if(wp_buf.size > 2){
 8002494:	4b71      	ldr	r3, [pc, #452]	; (800265c <stanleyTask+0x22c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	dd23      	ble.n	80024e4 <stanleyTask+0xb4>
      p1.x = wp_buf.wp_buf[wp_buf.from].x;
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <stanleyTask+0x22c>)
 800249e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <stanleyTask+0x22c>)
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	617b      	str	r3, [r7, #20]
      p1.y = wp_buf.wp_buf[wp_buf.from].y;
 80024ae:	4b6b      	ldr	r3, [pc, #428]	; (800265c <stanleyTask+0x22c>)
 80024b0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80024b4:	4a69      	ldr	r2, [pc, #420]	; (800265c <stanleyTask+0x22c>)
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	3308      	adds	r3, #8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
      p2.x = wp_buf.wp_buf[wp_buf.to].x;
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <stanleyTask+0x22c>)
 80024c2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <stanleyTask+0x22c>)
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
      p2.y = wp_buf.wp_buf[wp_buf.to].y;
 80024d2:	4b62      	ldr	r3, [pc, #392]	; (800265c <stanleyTask+0x22c>)
 80024d4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <stanleyTask+0x22c>)
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	3308      	adds	r3, #8
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
    }
    psi = mpu.pose[2] * M_PI / 180;
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <stanleyTask+0x230>)
 80024e6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80024ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ee:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002638 <stanleyTask+0x208>
 80024f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024f6:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8002640 <stanleyTask+0x210>
 80024fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002502:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    vel = speed;
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <stanleyTask+0x234>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    calculateCrosstrackError(&stanley, &vehicle_pos, &p1, &p2);
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	f107 0214 	add.w	r2, r7, #20
 8002514:	f107 011c 	add.w	r1, r7, #28
 8002518:	484e      	ldr	r0, [pc, #312]	; (8002654 <stanleyTask+0x224>)
 800251a:	f002 f9ff 	bl	800491c <calculateCrosstrackError>
    setYawAngle(&stanley, psi);
 800251e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002522:	484c      	ldr	r0, [pc, #304]	; (8002654 <stanleyTask+0x224>)
 8002524:	f002 fbb0 	bl	8004c88 <setYawAngle>
    calculateSteering(&stanley, vel, precision);
 8002528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800252c:	4619      	mov	r1, r3
 800252e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002532:	4848      	ldr	r0, [pc, #288]	; (8002654 <stanleyTask+0x224>)
 8002534:	f002 fbb8 	bl	8004ca8 <calculateSteering>

    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
    		"E{%3.1f}, S{%1.2f}, PI{sp:%3.3f,u:%3.3f} Cam{%3.3f,%3.3f,%3.3f\r\n",
      kf.x[0], kf.y[0], mpu.pose[2], mpu.gyro[2],
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <stanleyTask+0x228>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 800253e:	eeb7 dae7 	vcvt.f64.f32	d13, s15
      kf.x[0], kf.y[0], mpu.pose[2], mpu.gyro[2],
 8002542:	4b45      	ldr	r3, [pc, #276]	; (8002658 <stanleyTask+0x228>)
 8002544:	edd3 7a02 	vldr	s15, [r3, #8]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
      kf.x[0], kf.y[0], mpu.pose[2], mpu.gyro[2],
 800254c:	4b44      	ldr	r3, [pc, #272]	; (8002660 <stanleyTask+0x230>)
 800254e:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002552:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
      kf.x[0], kf.y[0], mpu.pose[2], mpu.gyro[2],
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <stanleyTask+0x230>)
 8002558:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 800255c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y,
 8002560:	4b3e      	ldr	r3, [pc, #248]	; (800265c <stanleyTask+0x22c>)
 8002562:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <stanleyTask+0x22c>)
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	3304      	adds	r3, #4
 800256e:	edd3 4a00 	vldr	s9, [r3]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002572:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y,
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <stanleyTask+0x22c>)
 8002578:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800257c:	4a37      	ldr	r2, [pc, #220]	; (800265c <stanleyTask+0x22c>)
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	3308      	adds	r3, #8
 8002584:	edd3 3a00 	vldr	s7, [r3]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002588:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <stanleyTask+0x224>)
 800258e:	edd3 2a02 	vldr	s5, [r3, #8]
 8002592:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8002668 <stanleyTask+0x238>
 8002596:	ee62 2a82 	vmul.f32	s5, s5, s4
 800259a:	eeb7 1ae2 	vcvt.f64.f32	d1, s5
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 800259e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002638 <stanleyTask+0x208>
 80025a2:	ee81 2b00 	vdiv.f64	d2, d1, d0
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <stanleyTask+0x224>)
 80025a8:	edd3 1a06 	vldr	s3, [r3, #24]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025ac:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <stanleyTask+0x234>)
 80025b2:	edd3 0a00 	vldr	s1, [r3]
 80025b6:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <stanleyTask+0x23c>)
 80025bc:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025c0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <stanleyTask+0x23c>)
 80025c6:	ed93 9a08 	vldr	s18, [r3, #32]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025ca:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
	  dataCam.px,dataCam.py,dataCam.psi);
 80025ce:	4b28      	ldr	r3, [pc, #160]	; (8002670 <stanleyTask+0x240>)
 80025d0:	ed93 aa02 	vldr	s20, [r3, #8]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025d4:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	  dataCam.px,dataCam.py,dataCam.psi);
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <stanleyTask+0x240>)
 80025da:	ed93 ba03 	vldr	s22, [r3, #12]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025de:	eeb7 bacb 	vcvt.f64.f32	d11, s22
	  dataCam.px,dataCam.py,dataCam.psi);
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <stanleyTask+0x240>)
 80025e4:	ed93 ca04 	vldr	s24, [r3, #16]
    printf("Pose{%3.2f,%3.2f,%3.2f} g{%3.2f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025e8:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 80025ec:	ed8d cb18 	vstr	d12, [sp, #96]	; 0x60
 80025f0:	ed8d bb16 	vstr	d11, [sp, #88]	; 0x58
 80025f4:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 80025f8:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 80025fc:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8002600:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8002604:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8002608:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800260c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002610:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002614:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002618:	ed8d 6b02 	vstr	d6, [sp, #8]
 800261c:	ed8d 7b00 	vstr	d7, [sp]
 8002620:	ec53 2b1d 	vmov	r2, r3, d13
 8002624:	4813      	ldr	r0, [pc, #76]	; (8002674 <stanleyTask+0x244>)
 8002626:	f00d fadd 	bl	800fbe4 <iprintf>
    osDelay(100);
 800262a:	2064      	movs	r0, #100	; 0x64
 800262c:	f009 ff16 	bl	800c45c <osDelay>
    vehicle_pos.x = kf.x[0];
 8002630:	e72a      	b.n	8002488 <stanleyTask+0x58>
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	54442d18 	.word	0x54442d18
 800263c:	400921fb 	.word	0x400921fb
 8002640:	00000000 	.word	0x00000000
 8002644:	40668000 	.word	0x40668000
 8002648:	41200000 	.word	0x41200000
 800264c:	3c23d70a 	.word	0x3c23d70a
 8002650:	24000008 	.word	0x24000008
 8002654:	2400049c 	.word	0x2400049c
 8002658:	240004fc 	.word	0x240004fc
 800265c:	2400055c 	.word	0x2400055c
 8002660:	240003dc 	.word	0x240003dc
 8002664:	240004f8 	.word	0x240004f8
 8002668:	43340000 	.word	0x43340000
 800266c:	24000534 	.word	0x24000534
 8002670:	240004e4 	.word	0x240004e4
 8002674:	08013510 	.word	0x08013510

08002678 <wirelessTask>:
	}
}

void wirelessTask(void *argument){
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b0d5      	sub	sp, #340	; 0x154
 800267c:	af4a      	add	r7, sp, #296	; 0x128
 800267e:	6078      	str	r0, [r7, #4]
	uint64_t RxpipeAddrs = 0x11223344AA; //Address of sender
 8002680:	a379      	add	r3, pc, #484	; (adr r3, 8002868 <wirelessTask+0x1f0>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
	mySetupNRF24(nrf_CSN_PORT3_2, nrf_CSN_PIN3_2, nrf_CE_PIN3_2,
 800268a:	4c6d      	ldr	r4, [pc, #436]	; (8002840 <wirelessTask+0x1c8>)
 800268c:	2301      	movs	r3, #1
 800268e:	9348      	str	r3, [sp, #288]	; 0x120
 8002690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002694:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 8002698:	2334      	movs	r3, #52	; 0x34
 800269a:	9345      	str	r3, [sp, #276]	; 0x114
 800269c:	4a69      	ldr	r2, [pc, #420]	; (8002844 <wirelessTask+0x1cc>)
 800269e:	ab21      	add	r3, sp, #132	; 0x84
 80026a0:	4611      	mov	r1, r2
 80026a2:	2290      	movs	r2, #144	; 0x90
 80026a4:	4618      	mov	r0, r3
 80026a6:	f00c fdae 	bl	800f206 <memcpy>
 80026aa:	4668      	mov	r0, sp
 80026ac:	1d23      	adds	r3, r4, #4
 80026ae:	2284      	movs	r2, #132	; 0x84
 80026b0:	4619      	mov	r1, r3
 80026b2:	f00c fda8 	bl	800f206 <memcpy>
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	4862      	ldr	r0, [pc, #392]	; (8002848 <wirelessTask+0x1d0>)
 80026be:	f7ff f949 	bl	8001954 <mySetupNRF24>
			  hspi3,huart3,52, RxpipeAddrs, 1);
	//osMutexRelease(myMutex01Handle);

	int maxX = 306; //Max and min values
 80026c2:	f44f 7399 	mov.w	r3, #306	; 0x132
 80026c6:	61fb      	str	r3, [r7, #28]
	int minX = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
	int maxY = 170;
 80026cc:	23aa      	movs	r3, #170	; 0xaa
 80026ce:	617b      	str	r3, [r7, #20]
	int minY = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
	int maxA = 360;
 80026d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80026d8:	60fb      	str	r3, [r7, #12]
	int minA = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]

	stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <wirelessTask+0x1d4>)
 80026e0:	2100      	movs	r1, #0
 80026e2:	485b      	ldr	r0, [pc, #364]	; (8002850 <wirelessTask+0x1d8>)
 80026e4:	f009 fe28 	bl	800c338 <osThreadNew>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a5a      	ldr	r2, [pc, #360]	; (8002854 <wirelessTask+0x1dc>)
 80026ec:	6013      	str	r3, [r2, #0]

	for(;;){
		myReadData(myRxData);
 80026ee:	485a      	ldr	r0, [pc, #360]	; (8002858 <wirelessTask+0x1e0>)
 80026f0:	f7ff f977 	bl	80019e2 <myReadData>
		dataCam.x = (uint16_t)myRxData[0] << 8 | myRxData[1];
 80026f4:	4b58      	ldr	r3, [pc, #352]	; (8002858 <wirelessTask+0x1e0>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	4b56      	ldr	r3, [pc, #344]	; (8002858 <wirelessTask+0x1e0>)
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	b21b      	sxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b21b      	sxth	r3, r3
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b54      	ldr	r3, [pc, #336]	; (800285c <wirelessTask+0x1e4>)
 800270a:	801a      	strh	r2, [r3, #0]
		dataCam.y = (uint16_t)myRxData[2] << 8 | myRxData[3];
 800270c:	4b52      	ldr	r3, [pc, #328]	; (8002858 <wirelessTask+0x1e0>)
 800270e:	789b      	ldrb	r3, [r3, #2]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	b21a      	sxth	r2, r3
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <wirelessTask+0x1e0>)
 8002716:	78db      	ldrb	r3, [r3, #3]
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b4e      	ldr	r3, [pc, #312]	; (800285c <wirelessTask+0x1e4>)
 8002722:	805a      	strh	r2, [r3, #2]
		dataCam.theta = (uint16_t)myRxData[4] << 8 | myRxData[5];
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <wirelessTask+0x1e0>)
 8002726:	791b      	ldrb	r3, [r3, #4]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	b21a      	sxth	r2, r3
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <wirelessTask+0x1e0>)
 800272e:	795b      	ldrb	r3, [r3, #5]
 8002730:	b21b      	sxth	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b21b      	sxth	r3, r3
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b48      	ldr	r3, [pc, #288]	; (800285c <wirelessTask+0x1e4>)
 800273a:	809a      	strh	r2, [r3, #4]

		dataCam.x = dataCam.x < minX ? minX : dataCam.x;
 800273c:	4b47      	ldr	r3, [pc, #284]	; (800285c <wirelessTask+0x1e4>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4293      	cmp	r3, r2
 8002746:	bfb8      	it	lt
 8002748:	4613      	movlt	r3, r2
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <wirelessTask+0x1e4>)
 800274e:	801a      	strh	r2, [r3, #0]
		dataCam.x = dataCam.x > maxX ? maxX : dataCam.x;
 8002750:	4b42      	ldr	r3, [pc, #264]	; (800285c <wirelessTask+0x1e4>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4293      	cmp	r3, r2
 800275a:	bfa8      	it	ge
 800275c:	4613      	movge	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b3e      	ldr	r3, [pc, #248]	; (800285c <wirelessTask+0x1e4>)
 8002762:	801a      	strh	r2, [r3, #0]
		dataCam.y = dataCam.y < minY ? minY : dataCam.y;
 8002764:	4b3d      	ldr	r3, [pc, #244]	; (800285c <wirelessTask+0x1e4>)
 8002766:	885b      	ldrh	r3, [r3, #2]
 8002768:	461a      	mov	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4293      	cmp	r3, r2
 800276e:	bfb8      	it	lt
 8002770:	4613      	movlt	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <wirelessTask+0x1e4>)
 8002776:	805a      	strh	r2, [r3, #2]
		dataCam.y = dataCam.y > maxY ? maxY : dataCam.y;
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <wirelessTask+0x1e4>)
 800277a:	885b      	ldrh	r3, [r3, #2]
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4293      	cmp	r3, r2
 8002782:	bfa8      	it	ge
 8002784:	4613      	movge	r3, r2
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <wirelessTask+0x1e4>)
 800278a:	805a      	strh	r2, [r3, #2]
		dataCam.theta = dataCam.theta < minA ? minA : dataCam.theta;
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <wirelessTask+0x1e4>)
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4293      	cmp	r3, r2
 8002796:	bfb8      	it	lt
 8002798:	4613      	movlt	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <wirelessTask+0x1e4>)
 800279e:	809a      	strh	r2, [r3, #4]
		dataCam.theta = dataCam.theta > maxA ? maxA : dataCam.theta;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <wirelessTask+0x1e4>)
 80027a2:	889b      	ldrh	r3, [r3, #4]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bfa8      	it	ge
 80027ac:	4613      	movge	r3, r2
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b2a      	ldr	r3, [pc, #168]	; (800285c <wirelessTask+0x1e4>)
 80027b2:	809a      	strh	r2, [r3, #4]

		dataCam.px = dataCam.x / 100.0;
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <wirelessTask+0x1e4>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80027c0:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8002838 <wirelessTask+0x1c0>
 80027c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <wirelessTask+0x1e4>)
 80027ce:	edc3 7a02 	vstr	s15, [r3, #8]
		dataCam.py = dataCam.y / 100.0;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <wirelessTask+0x1e4>)
 80027d4:	885b      	ldrh	r3, [r3, #2]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80027de:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002838 <wirelessTask+0x1c0>
 80027e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <wirelessTask+0x1e4>)
 80027ec:	edc3 7a03 	vstr	s15, [r3, #12]
		dataCam.psi = dataCam.theta;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <wirelessTask+0x1e4>)
 80027f2:	889b      	ldrh	r3, [r3, #4]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <wirelessTask+0x1e4>)
 80027fe:	edc3 7a04 	vstr	s15, [r3, #16]
		if(dataCam.psi > 180)
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <wirelessTask+0x1e4>)
 8002804:	edd3 7a04 	vldr	s15, [r3, #16]
 8002808:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002860 <wirelessTask+0x1e8>
 800280c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002814:	dd09      	ble.n	800282a <wirelessTask+0x1b2>
			dataCam.psi -= 360;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <wirelessTask+0x1e4>)
 8002818:	edd3 7a04 	vldr	s15, [r3, #16]
 800281c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002864 <wirelessTask+0x1ec>
 8002820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <wirelessTask+0x1e4>)
 8002826:	edc3 7a04 	vstr	s15, [r3, #16]
//		}
//		printf("%x%x %x%x %x%x",myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5]);
//		printf("\r\n");
//		printf("X:%d Y:%d Angle:%d\r\n",dataCam.px,dataCam.py,dataCam.psi);
//		printf("\r\n");
		osDelay(100);
 800282a:	2064      	movs	r0, #100	; 0x64
 800282c:	f009 fe16 	bl	800c45c <osDelay>
		myReadData(myRxData);
 8002830:	e75d      	b.n	80026ee <wirelessTask+0x76>
 8002832:	bf00      	nop
 8002834:	f3af 8000 	nop.w
 8002838:	00000000 	.word	0x00000000
 800283c:	40590000 	.word	0x40590000
 8002840:	2400083c 	.word	0x2400083c
 8002844:	24000960 	.word	0x24000960
 8002848:	58020c00 	.word	0x58020c00
 800284c:	080136d4 	.word	0x080136d4
 8002850:	08002431 	.word	0x08002431
 8002854:	24000710 	.word	0x24000710
 8002858:	240004c4 	.word	0x240004c4
 800285c:	240004e4 	.word	0x240004e4
 8002860:	43340000 	.word	0x43340000
 8002864:	43b40000 	.word	0x43b40000
 8002868:	223344aa 	.word	0x223344aa
 800286c:	00000011 	.word	0x00000011

08002870 <canTask>:
	}
}

void canTask(void *argument){
 8002870:	b580      	push	{r7, lr}
 8002872:	b094      	sub	sp, #80	; 0x50
 8002874:	af02      	add	r7, sp, #8
 8002876:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
//	float speed=1.3;
	uint8_t m;
	float loc_speed;

	printf("Starting CAN...\r\n");
 8002878:	4817      	ldr	r0, [pc, #92]	; (80028d8 <canTask+0x68>)
 800287a:	f00d fa39 	bl	800fcf0 <puts>
	for(;;){
		// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 800287e:	f107 0214 	add.w	r2, r7, #20
 8002882:	f107 0120 	add.w	r1, r7, #32
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	f107 0313 	add.w	r3, r7, #19
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	4811      	ldr	r0, [pc, #68]	; (80028dc <canTask+0x6c>)
 8002898:	f001 fc7a 	bl	8004190 <readSpeed>
		speed = loc_speed / 10;
 800289c:	ed97 7a03 	vldr	s14, [r7, #12]
 80028a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <canTask+0x70>)
 80028aa:	edc3 7a00 	vstr	s15, [r3]
		if(speed < 0)
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <canTask+0x70>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d507      	bpl.n	80028ce <canTask+0x5e>
			speed*=-1;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <canTask+0x70>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	eef1 7a67 	vneg.f32	s15, s15
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <canTask+0x70>)
 80028ca:	edc3 7a00 	vstr	s15, [r3]
//		for(int i=0;i<8;i++){
//			printf("%x",RxData[i]);
//		}
////		speed = (float)loc_sp;
//		printf("} %3.3f, CAN: %3.3f \r\n",speed, speed);
		osDelay(100);
 80028ce:	2064      	movs	r0, #100	; 0x64
 80028d0:	f009 fdc4 	bl	800c45c <osDelay>
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 80028d4:	e7d3      	b.n	800287e <canTask+0xe>
 80028d6:	bf00      	nop
 80028d8:	08013594 	.word	0x08013594
 80028dc:	2400033c 	.word	0x2400033c
 80028e0:	240004f8 	.word	0x240004f8

080028e4 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002928:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800292a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002978:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <MX_GPIO_Init+0x1b4>)
 80029a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2110      	movs	r1, #16
 80029b2:	483a      	ldr	r0, [pc, #232]	; (8002a9c <MX_GPIO_Init+0x1b8>)
 80029b4:	f003 ff3e 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2101      	movs	r1, #1
 80029bc:	4838      	ldr	r0, [pc, #224]	; (8002aa0 <MX_GPIO_Init+0x1bc>)
 80029be:	f003 ff39 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|CSN3_2__Pin|CSN3_2_D7_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
 80029c8:	4836      	ldr	r0, [pc, #216]	; (8002aa4 <MX_GPIO_Init+0x1c0>)
 80029ca:	f003 ff33 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d4:	4834      	ldr	r0, [pc, #208]	; (8002aa8 <MX_GPIO_Init+0x1c4>)
 80029d6:	f003 ff2d 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	2102      	movs	r1, #2
 80029de:	4833      	ldr	r0, [pc, #204]	; (8002aac <MX_GPIO_Init+0x1c8>)
 80029e0:	f003 ff28 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80029e4:	2310      	movs	r3, #16
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4828      	ldr	r0, [pc, #160]	; (8002a9c <MX_GPIO_Init+0x1b8>)
 80029fc:	f003 fd6a 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8002a00:	2301      	movs	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	4619      	mov	r1, r3
 8002a16:	4822      	ldr	r0, [pc, #136]	; (8002aa0 <MX_GPIO_Init+0x1bc>)
 8002a18:	f003 fd5c 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|CSN3_2__Pin|CSN3_2_D7_Pin;
 8002a1c:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8002a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <MX_GPIO_Init+0x1c0>)
 8002a36:	f003 fd4d 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8002a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	4815      	ldr	r0, [pc, #84]	; (8002aa8 <MX_GPIO_Init+0x1c4>)
 8002a54:	f003 fd3e 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8002a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <MX_GPIO_Init+0x1c4>)
 8002a6e:	f003 fd31 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	4808      	ldr	r0, [pc, #32]	; (8002aac <MX_GPIO_Init+0x1c8>)
 8002a8a:	f003 fd23 	bl	80064d4 <HAL_GPIO_Init>

}
 8002a8e:	bf00      	nop
 8002a90:	3730      	adds	r7, #48	; 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58020000 	.word	0x58020000
 8002aa0:	58020400 	.word	0x58020400
 8002aa4:	58020c00 	.word	0x58020c00
 8002aa8:	58020800 	.word	0x58020800
 8002aac:	58021000 	.word	0x58021000

08002ab0 <initKalman>:
#include "myprintf.h"

void initKalman(struct KF * kf, 
    float initial_x, float initial_y,
    float initial_vx, float initial_vy,
    float accel_var_x, float accel_var_y) {
 8002ab0:	b490      	push	{r4, r7}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	61f8      	str	r0, [r7, #28]
 8002ab8:	ed87 0a06 	vstr	s0, [r7, #24]
 8002abc:	edc7 0a05 	vstr	s1, [r7, #20]
 8002ac0:	ed87 1a04 	vstr	s2, [r7, #16]
 8002ac4:	edc7 1a03 	vstr	s3, [r7, #12]
 8002ac8:	ed87 2a02 	vstr	s4, [r7, #8]
 8002acc:	edc7 2a01 	vstr	s5, [r7, #4]
    float I[2][2] = {{1.0,0.0},{0.0,1.0}};
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <initKalman+0xc8>)
 8002ad2:	f107 0420 	add.w	r4, r7, #32
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    kf->x[0] = initial_x;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	601a      	str	r2, [r3, #0]
    kf->x[1] = initial_vx;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	605a      	str	r2, [r3, #4]
    kf->y[0] = initial_y;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	609a      	str	r2, [r3, #8]
    kf->y[1] = initial_vy;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]
    kf->accel_variance_x = accel_var_x;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	611a      	str	r2, [r3, #16]
    kf->accel_variance_y = accel_var_y;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	615a      	str	r2, [r3, #20]

    for(int i = 0 ; i < 2 ; i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
 8002b04:	e02f      	b.n	8002b66 <initKalman+0xb6>
        for(int j = 0 ; j < 2 ; j++){
 8002b06:	2300      	movs	r3, #0
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0a:	e026      	b.n	8002b5a <initKalman+0xaa>
            kf->Px[i][j] = I[i][j];
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	005a      	lsls	r2, r3, #1
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	443b      	add	r3, r7
 8002b1a:	3b18      	subs	r3, #24
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	69f9      	ldr	r1, [r7, #28]
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	0058      	lsls	r0, r3, #1
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	4403      	add	r3, r0
 8002b28:	3306      	adds	r3, #6
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	601a      	str	r2, [r3, #0]
            kf->Py[i][j] = I[i][j];
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	005a      	lsls	r2, r3, #1
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	443b      	add	r3, r7
 8002b3e:	3b18      	subs	r3, #24
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	69f9      	ldr	r1, [r7, #28]
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	0058      	lsls	r0, r3, #1
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	4403      	add	r3, r0
 8002b4c:	330a      	adds	r3, #10
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	3301      	adds	r3, #1
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	ddd5      	ble.n	8002b0c <initKalman+0x5c>
    for(int i = 0 ; i < 2 ; i++){
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	3301      	adds	r3, #1
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	ddcc      	ble.n	8002b06 <initKalman+0x56>
        }
    }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3738      	adds	r7, #56	; 0x38
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc90      	pop	{r4, r7}
 8002b76:	4770      	bx	lr
 8002b78:	080135a8 	.word	0x080135a8

08002b7c <predict>:

void predict(struct KF * kf, float dt) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0aa      	sub	sp, #168	; 0xa8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	ed87 0a00 	vstr	s0, [r7]
    float F[2][2] = {{1, dt}, {0, 1}};
 8002b88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float G[2] = {0.5 * dt * dt, dt};
 8002ba6:	edd7 7a00 	vldr	s15, [r7]
 8002baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002bb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bb6:	edd7 7a00 	vldr	s15, [r7]
 8002bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bc6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // x = F * x
    float x_new[2];
    float y_new[2];
    dotV(kf->x, F, x_new);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002bd6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fa4a 	bl	8003074 <dotV>
    dotV(kf->y, F, y_new);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3308      	adds	r3, #8
 8002be4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002be8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fa41 	bl	8003074 <dotV>
    copy(x_new, kf->x);
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 faa6 	bl	800314c <copy>
    copy(y_new, kf->y);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 0208 	add.w	r2, r3, #8
 8002c06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fa9d 	bl	800314c <copy>
    float temp2_y[2][2];
    float FPx[2][2];
    float FPy[2][2];

    // FP = F * P
    dot(F, kf->Px, FPx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f103 0118 	add.w	r1, r3, #24
 8002c18:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002c1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f9cd 	bl	8002fc0 <dot>
    dot(F, kf->Py, FPy);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c2c:	f107 021c 	add.w	r2, r7, #28
 8002c30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f9c3 	bl	8002fc0 <dot>

    // P = FP * Ft
    float Ft[2][2];
    trans(F, Ft);
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fae5 	bl	8003214 <trans>
    dot(FPx, Ft, kf->Px);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f103 0218 	add.w	r2, r3, #24
 8002c50:	f107 010c 	add.w	r1, r7, #12
 8002c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f9b1 	bl	8002fc0 <dot>
    dot(FPy, Ft, kf->Py);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002c64:	f107 010c 	add.w	r1, r7, #12
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f9a7 	bl	8002fc0 <dot>

    // G * Gt
    float GGt = G[0] * G[0] + G[1] * G[1];
 8002c72:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002c76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002c82:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

    // P = P + GGt * accel_variance
    kf->Px[0][0] += GGt * kf->accel_variance_x;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002c9e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	edc3 7a06 	vstr	s15, [r3, #24]
    kf->Px[1][1] += GGt * kf->accel_variance_x;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	edd3 6a04 	vldr	s13, [r3, #16]
 8002cbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    kf->Py[0][0] += GGt * kf->accel_variance_y;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cda:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    kf->Py[1][1] += GGt * kf->accel_variance_y;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8002d0a:	bf00      	nop
 8002d0c:	37a8      	adds	r7, #168	; 0xa8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <update>:

void update(struct KF * kf, float meas_value_x, float meas_value_y, float meas_variance) {
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b0ad      	sub	sp, #180	; 0xb4
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d20:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d24:	ed87 1a00 	vstr	s2, [r7]
    float H[2] = {1, 0};
 8002d28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Y = z - H * x
    float Yx = meas_value_x - H[0] * kf->x[0] - H[1] * kf->x[1];
 8002d38:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d4e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d60:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float Yy = meas_value_y - H[0] * kf->y[0] - H[1] * kf->y[1];
 8002d64:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d7a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

    // S = H * P * Ht + R
    float Hpx[2];
    float Hpy[2];
    dotV(H, kf->Px, Hpx);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f103 0118 	add.w	r1, r3, #24
 8002d96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f968 	bl	8003074 <dotV>
    dotV(H, kf->Py, Hpy);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002daa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002dae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f95e 	bl	8003074 <dotV>
    
    float Sx = Hpx[0]*H[0] + Hpx[1]*H[1] + meas_variance;
 8002db8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002dbc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002dc8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd4:	ed97 7a00 	vldr	s14, [r7]
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float Sy = Hpy[0]*H[0] + Hpy[1]*H[1] + meas_variance;
 8002de0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002de4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002df0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfc:	ed97 7a00 	vldr	s14, [r7]
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    // K = P * Ht * S^-1
    float Kx[2];
    float Ky[2];
    float PHtx[2];
    float PHty[2];
    dotV(H, kf->Px, PHtx);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f103 0118 	add.w	r1, r3, #24
 8002e0e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f92c 	bl	8003074 <dotV>
    dotV(H, kf->Py, PHty);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f922 	bl	8003074 <dotV>
    dotS(1/Sx, PHtx, Kx);
 8002e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e34:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002e40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	eeb0 0a47 	vmov.f32	s0, s14
 8002e4c:	f000 f957 	bl	80030fe <dotS>
    dotS(1/Sy, PHty, Ky);
 8002e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e54:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002e60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	eeb0 0a47 	vmov.f32	s0, s14
 8002e6c:	f000 f947 	bl	80030fe <dotS>

    // x = x + K * y
    kf->x[0] = kf->x[0] + Kx[0] * Yx;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	ed93 7a00 	vldr	s14, [r3]
 8002e76:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002e7a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	edc3 7a00 	vstr	s15, [r3]
    kf->x[1] = kf->x[1] + Kx[1] * Yx;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e92:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002e96:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	edc3 7a01 	vstr	s15, [r3, #4]
    kf->y[0] = kf->y[0] + Ky[0] * Yy;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eae:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002eb2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->y[1] = kf->y[1] + Ky[1] * Yy;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eca:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002ece:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edc3 7a03 	vstr	s15, [r3, #12]

    // P = (I - K * H) * P
    float I[2][2] = {{1 , 0} , {0 , 1}};
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <update+0x2a8>)
 8002ee2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float KHx = Kx[0] * H[0] + Kx[1] * H[1];
 8002eec:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002ef0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002efc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float KHy = Ky[0] * H[0] + Ky[1] * H[1];
 8002f0c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f10:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f18:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002f1c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

    float IKHx[2][2];
    float IKHy[2][2];
    sumS(KHx, I, IKHx);
 8002f2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 8002f3c:	f000 f934 	bl	80031a8 <sumS>
    sumS(KHy, I, IKHy);
 8002f40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8002f50:	f000 f92a 	bl	80031a8 <sumS>

    float Px_t[2][2];
    float Py_t[2][2];

    dot(IKHx, kf->Px, Px_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f103 0118 	add.w	r1, r3, #24
 8002f5a:	f107 0220 	add.w	r2, r7, #32
 8002f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f82c 	bl	8002fc0 <dot>
    dot(IKHy, kf->Py, Py_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002f6e:	f107 0210 	add.w	r2, r7, #16
 8002f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f822 	bl	8002fc0 <dot>
    copy(Px_t, kf->Px);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f103 0218 	add.w	r2, r3, #24
 8002f82:	f107 0320 	add.w	r3, r7, #32
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8df 	bl	800314c <copy>
    copy(Py_t, kf->Py);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f8d6 	bl	800314c <copy>
    sat(kf->Px);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f963 	bl	8003270 <sat>
    sat(kf->Py);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3328      	adds	r3, #40	; 0x28
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f95e 	bl	8003270 <sat>
}
 8002fb4:	bf00      	nop
 8002fb6:	37b4      	adds	r7, #180	; 0xb4
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd90      	pop	{r4, r7, pc}
 8002fbc:	080135a8 	.word	0x080135a8

08002fc0 <dot>:

void dot(float a[2][2], float b[2][2], float r[2][2]){
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e046      	b.n	8003060 <dot+0xa0>
        for (int j = 0; j < 2; ++j) {
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e03d      	b.n	8003054 <dot+0x94>
            r[i][j] = 0.0;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	441a      	add	r2, r3
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 2; ++k) {
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e02a      	b.n	8003048 <dot+0x88>
                r[i][j] += a[i][k] * b[k][j];
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	441a      	add	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	edd3 6a00 	vldr	s13, [r3]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	441a      	add	r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	441a      	add	r2, r3
 8003034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 2; ++k) {
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	ddd1      	ble.n	8002ff2 <dot+0x32>
        for (int j = 0; j < 2; ++j) {
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3301      	adds	r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	ddbe      	ble.n	8002fd8 <dot+0x18>
    for (int i = 0; i < 2; ++i) {
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3301      	adds	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	ddb5      	ble.n	8002fd2 <dot+0x12>
            }
        }
    }
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	3724      	adds	r7, #36	; 0x24
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <dotV>:

void dotV(float a[2], float b[2][2], float r[2]){
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e031      	b.n	80030ea <dotV+0x76>
        r[i] = 0;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 2; ++j) {
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e021      	b.n	80030de <dotV+0x6a>
            r[i] += b[i][j] * a[j];
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	441a      	add	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	edd3 6a00 	vldr	s13, [r3]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 2; ++j) {
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3301      	adds	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	ddda      	ble.n	800309a <dotV+0x26>
    for (int i = 0; i < 2; ++i) {
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	ddca      	ble.n	8003086 <dotV+0x12>
        }
    }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <dotS>:

void dotS(float a, float b[2], float r[2]){
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	ed87 0a03 	vstr	s0, [r7, #12]
 8003108:	60b8      	str	r0, [r7, #8]
 800310a:	6079      	str	r1, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e012      	b.n	8003138 <dotS+0x3a>
        r[i] = b[i]*a;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4413      	add	r3, r2
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	edd7 7a03 	vldr	s15, [r7, #12]
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 2; ++i) {
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b01      	cmp	r3, #1
 800313c:	dde9      	ble.n	8003112 <dotS+0x14>
    }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <copy>:

void copy(float a[2][2], float r[2][2]){
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e01b      	b.n	8003194 <copy+0x48>
        for(int j = 0 ; j < 2 ; j++){
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	e012      	b.n	8003188 <copy+0x3c>
            r[i][j] = a[i][j];
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	4419      	add	r1, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b01      	cmp	r3, #1
 800318c:	dde9      	ble.n	8003162 <copy+0x16>
    for(int i = 0 ; i < 2 ; i++){
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	dde0      	ble.n	800315c <copy+0x10>
        }
    }
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <sumS>:

void sumS(float a, float b[2][2],  float r[2][2]){
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80031b2:	60b8      	str	r0, [r7, #8]
 80031b4:	6079      	str	r1, [r7, #4]
    for(int i = 0 ; i < 2 ; i++){
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e021      	b.n	8003200 <sumS+0x58>
        for(int j = 0 ; j < 2 ; j++){
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e018      	b.n	80031f4 <sumS+0x4c>
            r[i][j] = b[i][j] + a;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	441a      	add	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	441a      	add	r2, r3
 80031dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0 ; j < 2 ; j++){
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3301      	adds	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	dde3      	ble.n	80031c2 <sumS+0x1a>
    for(int i = 0 ; i < 2 ; i++){
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	ddda      	ble.n	80031bc <sumS+0x14>
        }
    }
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <trans>:

void trans(float a[2][2], float r[2][2]){
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e01b      	b.n	800325c <trans+0x48>
        for(int j = 0 ; j < 2 ; j++){
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	e012      	b.n	8003250 <trans+0x3c>
            r[i][j] = a[j][i];
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	4419      	add	r1, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	dde9      	ble.n	800322a <trans+0x16>
    for(int i = 0 ; i < 2 ; i++){
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	dde0      	ble.n	8003224 <trans+0x10>
        }
    }
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <sat>:

void sat(float r[2][2]){
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
    float sat[2] = {10000.0, -10000.0};
 8003278:	4a31      	ldr	r2, [pc, #196]	; (8003340 <sat+0xd0>)
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003282:	e883 0003 	stmia.w	r3, {r0, r1}
    for(int i = 0 ; i < 2 ; i++){
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e04f      	b.n	800332c <sat+0xbc>
        for(int j = 0 ; j < 2 ; j++){
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e046      	b.n	8003320 <sat+0xb0>
            r[i][j] = r[i][j] < sat[1] ? sat[1] : r[i][j];
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	441a      	add	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	ed93 7a00 	vldr	s14, [r3]
 80032a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	d501      	bpl.n	80032b6 <sat+0x46>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	e007      	b.n	80032c6 <sat+0x56>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	441a      	add	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	00d2      	lsls	r2, r2, #3
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4411      	add	r1, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	440a      	add	r2, r1
 80032d4:	6013      	str	r3, [r2, #0]
            r[i][j] = r[i][j] > sat[0] ? sat[0] : r[i][j];
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	441a      	add	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	dd01      	ble.n	80032fa <sat+0x8a>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	e007      	b.n	800330a <sat+0x9a>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	441a      	add	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	00d2      	lsls	r2, r2, #3
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4411      	add	r1, r2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	440a      	add	r2, r1
 8003318:	6013      	str	r3, [r2, #0]
        for(int j = 0 ; j < 2 ; j++){
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b01      	cmp	r3, #1
 8003324:	ddb5      	ble.n	8003292 <sat+0x22>
    for(int i = 0 ; i < 2 ; i++){
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b01      	cmp	r3, #1
 8003330:	ddac      	ble.n	800328c <sat+0x1c>
        }
    }
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	080135b8 	.word	0x080135b8

08003344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800334a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003350:	bf00      	nop
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <main+0xb8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <main+0x24>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	dcf4      	bgt.n	8003352 <main+0xe>
  if ( timeout < 0 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	da01      	bge.n	8003372 <main+0x2e>
  {
  Error_Handler();
 800336e:	f000 f8c3 	bl	80034f8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003372:	f002 f991 	bl	8005698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003376:	f000 f843 	bl	8003400 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <main+0xb8>)
 800337c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <main+0xb8>)
 8003382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <main+0xb8>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8003398:	2000      	movs	r0, #0
 800339a:	f003 fa65 	bl	8006868 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800339e:	2100      	movs	r1, #0
 80033a0:	2000      	movs	r0, #0
 80033a2:	f003 fa7b 	bl	800689c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80033a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033aa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80033ac:	bf00      	nop
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <main+0xb8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <main+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dcf4      	bgt.n	80033ae <main+0x6a>
if ( timeout < 0 )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da01      	bge.n	80033ce <main+0x8a>
{
Error_Handler();
 80033ca:	f000 f895 	bl	80034f8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ce:	f7ff fa89 	bl	80028e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80033d2:	f001 f82d 	bl	8004430 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80033d6:	f002 f807 	bl	80053e8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80033da:	f001 f881 	bl	80044e0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80033de:	f001 fe7d 	bl	80050dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80033e2:	f001 fef1 	bl	80051c8 <MX_TIM3_Init>
  MX_SPI3_Init();
 80033e6:	f001 f8d1 	bl	800458c <MX_SPI3_Init>
  MX_FDCAN1_Init();
 80033ea:	f7fe fb85 	bl	8001af8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80033ee:	f008 ff59 	bl	800c2a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80033f2:	f7fe fc53 	bl	8001c9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80033f6:	f008 ff79 	bl	800c2ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80033fa:	e7fe      	b.n	80033fa <main+0xb6>
 80033fc:	58024400 	.word	0x58024400

08003400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b09c      	sub	sp, #112	; 0x70
 8003404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340a:	224c      	movs	r2, #76	; 0x4c
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f00b ff07 	bl	800f222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2220      	movs	r2, #32
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f00b ff01 	bl	800f222 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003420:	2004      	movs	r0, #4
 8003422:	f003 fa4f 	bl	80068c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003426:	2300      	movs	r3, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <SystemClock_Config+0xf0>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <SystemClock_Config+0xf0>)
 8003430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003434:	6193      	str	r3, [r2, #24]
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <SystemClock_Config+0xf0>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <SystemClock_Config+0xf4>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <SystemClock_Config+0xf4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <SystemClock_Config+0xf4>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003458:	bf00      	nop
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <SystemClock_Config+0xf0>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	d1f8      	bne.n	800345a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003468:	2302      	movs	r3, #2
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800346c:	2301      	movs	r3, #1
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003474:	2302      	movs	r3, #2
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003478:	2300      	movs	r3, #0
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800347c:	2304      	movs	r3, #4
 800347e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003480:	233c      	movs	r3, #60	; 0x3c
 8003482:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003484:	2302      	movs	r3, #2
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8003488:	2318      	movs	r3, #24
 800348a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800348c:	2302      	movs	r3, #2
 800348e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003490:	230c      	movs	r3, #12
 8003492:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003494:	2300      	movs	r3, #0
 8003496:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 fa69 	bl	8006978 <HAL_RCC_OscConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80034ac:	f000 f824 	bl	80034f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b0:	233f      	movs	r3, #63	; 0x3f
 80034b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b4:	2303      	movs	r3, #3
 80034b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80034bc:	2308      	movs	r3, #8
 80034be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80034c0:	2340      	movs	r3, #64	; 0x40
 80034c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80034c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80034ce:	2340      	movs	r3, #64	; 0x40
 80034d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	2104      	movs	r1, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fe7c 	bl	80071d4 <HAL_RCC_ClockConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80034e2:	f000 f809 	bl	80034f8 <Error_Handler>
  }
}
 80034e6:	bf00      	nop
 80034e8:	3770      	adds	r7, #112	; 0x70
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	58024800 	.word	0x58024800
 80034f4:	58000400 	.word	0x58000400

080034f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034fc:	b672      	cpsid	i
}
 80034fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003500:	e7fe      	b.n	8003500 <Error_Handler+0x8>

08003502 <initMPU9250>:
#include "spi.h"
#include "stm32h7xx_hal.h"
#include "myprintf.h"

void initMPU9250(struct mpu9250 * mpu9250, uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	461a      	mov	r2, r3
 8003510:	4603      	mov	r3, r0
 8003512:	70fb      	strb	r3, [r7, #3]
 8003514:	460b      	mov	r3, r1
 8003516:	70bb      	strb	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e040      	b.n	80035a4 <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e01d      	b.n	8003564 <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	330e      	adds	r3, #14
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	331c      	adds	r3, #28
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3304      	adds	r3, #4
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3301      	adds	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b04      	cmp	r3, #4
 8003568:	ddde      	ble.n	8003528 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3306      	adds	r3, #6
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	330a      	adds	r3, #10
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	332c      	adds	r3, #44	; 0x2c
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	3304      	adds	r3, #4
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	ddbb      	ble.n	8003522 <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	uint8_t c;
 // wake up device
  mpu9250_write_reg(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80035b2:	2100      	movs	r1, #0
 80035b4:	206b      	movs	r0, #107	; 0x6b
 80035b6:	f001 f93b 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 80035ba:	2064      	movs	r0, #100	; 0x64
 80035bc:	f002 f8fe 	bl	80057bc <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 80035c0:	2101      	movs	r1, #1
 80035c2:	206b      	movs	r0, #107	; 0x6b
 80035c4:	f001 f934 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(200);
 80035c8:	20c8      	movs	r0, #200	; 0xc8
 80035ca:	f002 f8f7 	bl	80057bc <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum HAL_HAL_Delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  mpu9250_write_reg(CONFIG, 0x03);
 80035ce:	2103      	movs	r1, #3
 80035d0:	201a      	movs	r0, #26
 80035d2:	f001 f92d 	bl	8004830 <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80035d6:	787b      	ldrb	r3, [r7, #1]
 80035d8:	4619      	mov	r1, r3
 80035da:	2019      	movs	r0, #25
 80035dc:	f001 f928 	bl	8004830 <mpu9250_write_reg>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  mpu9250_read_reg(GYRO_CONFIG, &c,sizeof(c)); // get current GYRO_CONFIG register value
 80035e0:	f107 030f 	add.w	r3, r7, #15
 80035e4:	2201      	movs	r2, #1
 80035e6:	4619      	mov	r1, r3
 80035e8:	201b      	movs	r0, #27
 80035ea:	f001 f947 	bl	800487c <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	f023 0318 	bic.w	r3, r3, #24
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 8003602:	78bb      	ldrb	r3, [r7, #2]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	b25a      	sxtb	r2, r3
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	b25b      	sxtb	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b25b      	sxtb	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	4619      	mov	r1, r3
 8003618:	201b      	movs	r0, #27
 800361a:	f001 f909 	bl	8004830 <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 800361e:	f107 030f 	add.w	r3, r7, #15
 8003622:	2201      	movs	r2, #1
 8003624:	4619      	mov	r1, r3
 8003626:	201c      	movs	r0, #28
 8003628:	f001 f928 	bl	800487c <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	f023 0318 	bic.w	r3, r3, #24
 8003632:	b2db      	uxtb	r3, r3
 8003634:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	b25a      	sxtb	r2, r3
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	b25b      	sxtb	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b25b      	sxtb	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	4619      	mov	r1, r3
 800364c:	201c      	movs	r0, #28
 800364e:	f001 f8ef 	bl	8004830 <mpu9250_write_reg>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  mpu9250_read_reg(ACCEL_CONFIG2, &c, sizeof(c)); // get current ACCEL_CONFIG2 register value
 8003652:	f107 030f 	add.w	r3, r7, #15
 8003656:	2201      	movs	r2, #1
 8003658:	4619      	mov	r1, r3
 800365a:	201d      	movs	r0, #29
 800365c:	f001 f90e 	bl	800487c <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	f023 030f 	bic.w	r3, r3, #15
 8003666:	b2db      	uxtb	r3, r3
 8003668:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	f043 0303 	orr.w	r3, r3, #3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	4619      	mov	r1, r3
 8003678:	201d      	movs	r0, #29
 800367a:	f001 f8d9 	bl	8004830 <mpu9250_write_reg>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
//   mpu9250_write_reg(INT_PIN_CFG, 0x22);
   mpu9250_write_reg(INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
 800367e:	2112      	movs	r1, #18
 8003680:	2037      	movs	r0, #55	; 0x37
 8003682:	f001 f8d5 	bl	8004830 <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8003686:	2101      	movs	r1, #1
 8003688:	2038      	movs	r0, #56	; 0x38
 800368a:	f001 f8d1 	bl	8004830 <mpu9250_write_reg>
   HAL_Delay(100);
 800368e:	2064      	movs	r0, #100	; 0x64
 8003690:	f002 f894 	bl	80057bc <HAL_Delay>
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b098      	sub	sp, #96	; 0x60
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80036a6:	2300      	movs	r3, #0
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036aa:	2300      	movs	r3, #0
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	2300      	movs	r3, #0
 80036b0:	643b      	str	r3, [r7, #64]	; 0x40
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b6:	2300      	movs	r3, #0
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	206b      	movs	r0, #107	; 0x6b
 80036c2:	f001 f8b5 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(100);
 80036c6:	2064      	movs	r0, #100	; 0x64
 80036c8:	f002 f878 	bl	80057bc <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  mpu9250_write_reg(PWR_MGMT_1, 0x01);
 80036cc:	2101      	movs	r1, #1
 80036ce:	206b      	movs	r0, #107	; 0x6b
 80036d0:	f001 f8ae 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 80036d4:	2100      	movs	r1, #0
 80036d6:	206c      	movs	r0, #108	; 0x6c
 80036d8:	f001 f8aa 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(200);
 80036dc:	20c8      	movs	r0, #200	; 0xc8
 80036de:	f002 f86d 	bl	80057bc <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 80036e2:	2100      	movs	r1, #0
 80036e4:	2038      	movs	r0, #56	; 0x38
 80036e6:	f001 f8a3 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 80036ea:	2100      	movs	r1, #0
 80036ec:	2023      	movs	r0, #35	; 0x23
 80036ee:	f001 f89f 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80036f2:	2100      	movs	r1, #0
 80036f4:	206b      	movs	r0, #107	; 0x6b
 80036f6:	f001 f89b 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 80036fa:	2100      	movs	r1, #0
 80036fc:	2024      	movs	r0, #36	; 0x24
 80036fe:	f001 f897 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003702:	2100      	movs	r1, #0
 8003704:	206a      	movs	r0, #106	; 0x6a
 8003706:	f001 f893 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800370a:	210c      	movs	r1, #12
 800370c:	206a      	movs	r0, #106	; 0x6a
 800370e:	f001 f88f 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(15);
 8003712:	200f      	movs	r0, #15
 8003714:	f002 f852 	bl	80057bc <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003718:	2101      	movs	r1, #1
 800371a:	201a      	movs	r0, #26
 800371c:	f001 f888 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003720:	2100      	movs	r1, #0
 8003722:	2019      	movs	r0, #25
 8003724:	f001 f884 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003728:	2100      	movs	r1, #0
 800372a:	201b      	movs	r0, #27
 800372c:	f001 f880 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8003730:	2100      	movs	r1, #0
 8003732:	201c      	movs	r0, #28
 8003734:	f001 f87c 	bl	8004830 <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003738:	2383      	movs	r3, #131	; 0x83
 800373a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800373e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003742:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	206a      	movs	r0, #106	; 0x6a
 800374a:	f001 f871 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 800374e:	2178      	movs	r1, #120	; 0x78
 8003750:	2023      	movs	r0, #35	; 0x23
 8003752:	f001 f86d 	bl	8004830 <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8003756:	2028      	movs	r0, #40	; 0x28
 8003758:	f002 f830 	bl	80057bc <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800375c:	2100      	movs	r1, #0
 800375e:	2023      	movs	r0, #35	; 0x23
 8003760:	f001 f866 	bl	8004830 <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 8003764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003768:	2202      	movs	r2, #2
 800376a:	4619      	mov	r1, r3
 800376c:	2072      	movs	r0, #114	; 0x72
 800376e:	f001 f885 	bl	800487c <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8003772:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	b21a      	sxth	r2, r3
 800377a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800377e:	b21b      	sxth	r3, r3
 8003780:	4313      	orrs	r3, r2
 8003782:	b21b      	sxth	r3, r3
 8003784:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003788:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800378c:	4ac0      	ldr	r2, [pc, #768]	; (8003a90 <calibrateMPU9250+0x3f4>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8003798:	2300      	movs	r3, #0
 800379a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800379e:	e071      	b.n	8003884 <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80037a0:	2300      	movs	r3, #0
 80037a2:	82bb      	strh	r3, [r7, #20]
 80037a4:	2300      	movs	r3, #0
 80037a6:	82fb      	strh	r3, [r7, #22]
 80037a8:	2300      	movs	r3, #0
 80037aa:	833b      	strh	r3, [r7, #24]
 80037ac:	2300      	movs	r3, #0
 80037ae:	81bb      	strh	r3, [r7, #12]
 80037b0:	2300      	movs	r3, #0
 80037b2:	81fb      	strh	r3, [r7, #14]
 80037b4:	2300      	movs	r3, #0
 80037b6:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 80037b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037bc:	220c      	movs	r2, #12
 80037be:	4619      	mov	r1, r3
 80037c0:	2074      	movs	r0, #116	; 0x74
 80037c2:	f001 f85b 	bl	800487c <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80037c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80037da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037e6:	b21b      	sxth	r3, r3
 80037e8:	4313      	orrs	r3, r2
 80037ea:	b21b      	sxth	r3, r3
 80037ec:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80037ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b21b      	sxth	r3, r3
 8003800:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8003802:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	b21a      	sxth	r2, r3
 800380a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800380e:	b21b      	sxth	r3, r3
 8003810:	4313      	orrs	r3, r2
 8003812:	b21b      	sxth	r3, r3
 8003814:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8003816:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	b21a      	sxth	r2, r3
 800381e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003822:	b21b      	sxth	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b21b      	sxth	r3, r3
 8003828:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800382a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b21a      	sxth	r2, r3
 8003832:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003836:	b21b      	sxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	b21b      	sxth	r3, r3
 800383c:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003844:	4413      	add	r3, r2
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800384e:	4413      	add	r3, r2
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800386c:	4413      	add	r3, r2
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003872:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 800387a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800387e:	3301      	adds	r3, #1
 8003880:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003884:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003888:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800388c:	429a      	cmp	r2, r3
 800388e:	d387      	bcc.n	80037a0 <calibrateMPU9250+0x104>

  }

    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8003890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003896:	fb92 f3f3 	sdiv	r3, r2, r3
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 800389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80038a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80038b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80038c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 80038cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	2b00      	cmp	r3, #0
 80038dc:	dd05      	ble.n	80038ea <calibrateMPU9250+0x24e>
 80038de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
 80038e8:	e004      	b.n	80038f4 <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80038ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038f0:	4413      	add	r3, r2
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	425b      	negs	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	da00      	bge.n	80038fe <calibrateMPU9250+0x262>
 80038fc:	3303      	adds	r3, #3
 80038fe:	109b      	asrs	r3, r3, #2
 8003900:	121b      	asrs	r3, r3, #8
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	425b      	negs	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	da00      	bge.n	8003912 <calibrateMPU9250+0x276>
 8003910:	3303      	adds	r3, #3
 8003912:	109b      	asrs	r3, r3, #2
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	425b      	negs	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	da00      	bge.n	8003924 <calibrateMPU9250+0x288>
 8003922:	3303      	adds	r3, #3
 8003924:	109b      	asrs	r3, r3, #2
 8003926:	121b      	asrs	r3, r3, #8
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	425b      	negs	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	da00      	bge.n	8003938 <calibrateMPU9250+0x29c>
 8003936:	3303      	adds	r3, #3
 8003938:	109b      	asrs	r3, r3, #2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	425b      	negs	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	da00      	bge.n	800394a <calibrateMPU9250+0x2ae>
 8003948:	3303      	adds	r3, #3
 800394a:	109b      	asrs	r3, r3, #2
 800394c:	121b      	asrs	r3, r3, #8
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	425b      	negs	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	da00      	bge.n	800395e <calibrateMPU9250+0x2c2>
 800395c:	3303      	adds	r3, #3
 800395e:	109b      	asrs	r3, r3, #2
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 8003966:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800396a:	4619      	mov	r1, r3
 800396c:	2013      	movs	r0, #19
 800396e:	f000 ff5f 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 8003972:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003976:	4619      	mov	r1, r3
 8003978:	2014      	movs	r0, #20
 800397a:	f000 ff59 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 800397e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003982:	4619      	mov	r1, r3
 8003984:	2015      	movs	r0, #21
 8003986:	f000 ff53 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 800398a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800398e:	4619      	mov	r1, r3
 8003990:	2016      	movs	r0, #22
 8003992:	f000 ff4d 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 8003996:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800399a:	4619      	mov	r1, r3
 800399c:	2017      	movs	r0, #23
 800399e:	f000 ff47 	bl	8004830 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 80039a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80039a6:	4619      	mov	r1, r3
 80039a8:	2018      	movs	r0, #24
 80039aa:	f000 ff41 	bl	8004830 <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ec:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 8003a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a22:	2202      	movs	r2, #2
 8003a24:	4619      	mov	r1, r3
 8003a26:	2077      	movs	r0, #119	; 0x77
 8003a28:	f000 ff28 	bl	800487c <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003a2c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a36:	4313      	orrs	r3, r2
 8003a38:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 8003a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a3e:	2202      	movs	r2, #2
 8003a40:	4619      	mov	r1, r3
 8003a42:	207a      	movs	r0, #122	; 0x7a
 8003a44:	f000 ff1a 	bl	800487c <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003a48:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a52:	4313      	orrs	r3, r2
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 8003a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	207d      	movs	r0, #125	; 0x7d
 8003a60:	f000 ff0c 	bl	800487c <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003a64:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8003a72:	2301      	movs	r3, #1
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8003a76:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <calibrateMPU9250+0x3f8>)
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	8019      	strh	r1, [r3, #0]
 8003a82:	3302      	adds	r3, #2
 8003a84:	0c12      	lsrs	r2, r2, #16
 8003a86:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a8e:	e01b      	b.n	8003ac8 <calibrateMPU9250+0x42c>
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	080135c0 	.word	0x080135c0
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8003a98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3360      	adds	r3, #96	; 0x60
 8003aa0:	443b      	add	r3, r7
 8003aa2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d006      	beq.n	8003abe <calibrateMPU9250+0x422>
 8003ab0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ab4:	3360      	adds	r3, #96	; 0x60
 8003ab6:	443b      	add	r3, r7
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 8003abe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003ac8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d9e3      	bls.n	8003a98 <calibrateMPU9250+0x3fc>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da00      	bge.n	8003ada <calibrateMPU9250+0x43e>
 8003ad8:	3307      	adds	r3, #7
 8003ada:	10db      	asrs	r3, r3, #3
 8003adc:	425b      	negs	r3, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da00      	bge.n	8003aec <calibrateMPU9250+0x450>
 8003aea:	3307      	adds	r3, #7
 8003aec:	10db      	asrs	r3, r3, #3
 8003aee:	425b      	negs	r3, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8003af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da00      	bge.n	8003afe <calibrateMPU9250+0x462>
 8003afc:	3307      	adds	r3, #7
 8003afe:	10db      	asrs	r3, r3, #3
 8003b00:	425b      	negs	r3, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	121b      	asrs	r3, r3, #8
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003b18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003b1c:	7f3b      	ldrb	r3, [r7, #28]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	121b      	asrs	r3, r3, #8
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003b38:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b3c:	7f7b      	ldrb	r3, [r7, #29]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	121b      	asrs	r3, r3, #8
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003b58:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003b5c:	7fbb      	ldrb	r3, [r7, #30]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
//  mpu9250_write_reg(YA_OFFSET_L, data[3]);
//  mpu9250_write_reg(ZA_OFFSET_H, data[4]);
//  mpu9250_write_reg(ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b70:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba4:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bb2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc6:	edc3 7a00 	vstr	s15, [r3]
}
 8003bca:	bf00      	nop
 8003bcc:	3760      	adds	r7, #96	; 0x60
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	220e      	movs	r2, #14
 8003be2:	4619      	mov	r1, r3
 8003be4:	203b      	movs	r0, #59	; 0x3b
 8003be6:	f000 fe49 	bl	800487c <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 8003bea:	7a3b      	ldrb	r3, [r7, #8]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	7a7b      	ldrb	r3, [r7, #9]
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 8003bfc:	7abb      	ldrb	r3, [r7, #10]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b219      	sxth	r1, r3
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	b212      	sxth	r2, r2
 8003c0e:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 8003c10:	7b3b      	ldrb	r3, [r7, #12]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	b219      	sxth	r1, r3
 8003c16:	7b7b      	ldrb	r3, [r7, #13]
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	b212      	sxth	r2, r2
 8003c22:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b219      	sxth	r1, r3
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3306      	adds	r3, #6
 8003c32:	430a      	orrs	r2, r1
 8003c34:	b212      	sxth	r2, r2
 8003c36:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 8003c38:	7c3b      	ldrb	r3, [r7, #16]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b219      	sxth	r1, r3
 8003c3e:	7c7b      	ldrb	r3, [r7, #17]
 8003c40:	b21a      	sxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3308      	adds	r3, #8
 8003c46:	430a      	orrs	r2, r1
 8003c48:	b212      	sxth	r2, r2
 8003c4a:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 8003c4c:	7cbb      	ldrb	r3, [r7, #18]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b219      	sxth	r1, r3
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	330a      	adds	r3, #10
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	b212      	sxth	r2, r2
 8003c5e:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 8003c60:	7d3b      	ldrb	r3, [r7, #20]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	b219      	sxth	r1, r3
 8003c66:	7d7b      	ldrb	r3, [r7, #21]
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	b212      	sxth	r2, r2
 8003c72:	801a      	strh	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d823      	bhi.n	8003cd8 <getGres+0x5c>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <getGres+0x1c>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cb5 	.word	0x08003cb5
 8003ca0:	08003cc1 	.word	0x08003cc1
 8003ca4:	08003ccd 	.word	0x08003ccd
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
    case GFS_250DPS:
    		mpu9250->_gRes = 250.0/32768.0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <getGres+0x74>)
 8003cac:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	e013      	b.n	8003cdc <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <getGres+0x78>)
 8003cb8:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	e00d      	b.n	8003cdc <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <getGres+0x7c>)
 8003cc4:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	e007      	b.n	8003cdc <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <getGres+0x80>)
 8003cd0:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	e001      	b.n	8003cdc <getGres+0x60>
         break;
  }
  return 0.0;
 8003cd8:	f04f 0300 	mov.w	r3, #0
}
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	3bfa0000 	.word	0x3bfa0000
 8003cf4:	3c7a0000 	.word	0x3c7a0000
 8003cf8:	3cfa0000 	.word	0x3cfa0000
 8003cfc:	3d7a0000 	.word	0x3d7a0000

08003d00 <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d827      	bhi.n	8003d64 <getAres+0x64>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <getAres+0x1c>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d3b 	.word	0x08003d3b
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d57 	.word	0x08003d57
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
		 mpu9250->_aRes = 2.0f/32768.0f;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003d32:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	e016      	b.n	8003d68 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003d40:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	e00f      	b.n	8003d68 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003d4e:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	e008      	b.n	8003d68 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003d5c:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	e001      	b.n	8003d68 <getAres+0x68>
         break;
  }
  return 0.0;
 8003d64:	f04f 0300 	mov.w	r3, #0
}
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	0000      	movs	r0, r0
	...

08003d80 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 8003d80:	b580      	push	{r7, lr}
 8003d82:	ed2d 8b02 	vpush	{d8}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d90:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	330c      	adds	r3, #12
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff1b 	bl	8003bd4 <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	e023      	b.n	8003dec <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	3304      	adds	r3, #4
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ffa0 	bl	8003d00 <getAres>
 8003dc0:	eef0 7a40 	vmov.f32	s15, s0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dca:	4618      	mov	r0, r3
 8003dcc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	4403      	add	r3, r0
 8003ddc:	330e      	adds	r3, #14
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3301      	adds	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	ddd8      	ble.n	8003da4 <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 8003df2:	2304      	movs	r3, #4
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	e025      	b.n	8003e44 <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff34 	bl	8003c7c <getGres>
 8003e14:	eef0 7a40 	vmov.f32	s15, s0
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	1f1a      	subs	r2, r3, #4
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e22:	4618      	mov	r0, r3
 8003e24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	4403      	add	r3, r0
 8003e32:	331c      	adds	r3, #28
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3304      	adds	r3, #4
 8003e3a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	3301      	adds	r3, #1
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	ddd6      	ble.n	8003df8 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	4bb9      	ldr	r3, [pc, #740]	; (8004138 <updateData+0x3b8>)
 8003e54:	fb83 1302 	smull	r1, r3, r3, r2
 8003e58:	1059      	asrs	r1, r3, #1
 8003e5a:	17d3      	asrs	r3, r2, #31
 8003e5c:	1ac9      	subs	r1, r1, r3
 8003e5e:	460b      	mov	r3, r1
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	1ad1      	subs	r1, r2, r3
 8003e66:	b2ca      	uxtb	r2, r1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e07d      	b.n	8003f7a <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3306      	adds	r3, #6
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	330a      	adds	r3, #10
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e03d      	b.n	8003f22 <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3306      	adds	r3, #6
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	ed93 7a00 	vldr	s14, [r3]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	330e      	adds	r3, #14
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3306      	adds	r3, #6
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	330a      	adds	r3, #10
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	ed93 7a00 	vldr	s14, [r3]
 8003ef0:	68f9      	ldr	r1, [r7, #12]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	331c      	adds	r3, #28
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3304      	adds	r3, #4
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	330a      	adds	r3, #10
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	ddbe      	ble.n	8003ea6 <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3306      	adds	r3, #6
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	3304      	adds	r3, #4
 8003f34:	ed93 7a00 	vldr	s14, [r3]
 8003f38:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3306      	adds	r3, #6
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	330a      	adds	r3, #10
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	ed93 7a00 	vldr	s14, [r3]
 8003f5e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	330a      	adds	r3, #10
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f77f af7e 	ble.w	8003e7e <updateData+0xfe>
	}
	float tolerance = 0.9;
 8003f82:	4b6e      	ldr	r3, [pc, #440]	; (800413c <updateData+0x3bc>)
 8003f84:	613b      	str	r3, [r7, #16]
	for(int i = 0 ; i < 3 ; i++){
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e028      	b.n	8003fde <updateData+0x25e>
		if(mpu9250->gyro[i] < tolerance && mpu9250->gyro[i] > -tolerance)
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	330a      	adds	r3, #10
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa6:	dd17      	ble.n	8003fd8 <updateData+0x258>
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	330a      	adds	r3, #10
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fba:	eef1 7a67 	vneg.f32	s15, s15
 8003fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc6:	dd07      	ble.n	8003fd8 <updateData+0x258>
			mpu9250->gyro[i] = 0;
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	330a      	adds	r3, #10
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	ddd3      	ble.n	8003f8c <updateData+0x20c>
	}

  // Update orientation
	// 1.1 = gyroscope's error

	mpu9250->pose[2] += .98 * dt * (mpu9250->gyro[2] + mpu9250->lastAngVel) / 2;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003fea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ff6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8004128 <updateData+0x3a8>
 8003ffa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004012:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004016:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800401a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800401e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004032:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004140 <updateData+0x3c0>
 8004036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d50a      	bpl.n	8004056 <updateData+0x2d6>
		mpu9250->pose[2] += 360;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004046:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004144 <updateData+0x3c4>
 800404a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8004054:	e013      	b.n	800407e <updateData+0x2fe>
	else if(mpu9250->pose[2] > 180)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800405c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004148 <updateData+0x3c8>
 8004060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004068:	dd09      	ble.n	800407e <updateData+0x2fe>
		mpu9250->pose[2] -= 360;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004070:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004144 <updateData+0x3c4>
 8004074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004084:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800408e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004092:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8004130 <updateData+0x3b0>
 8004096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800409a:	eeb0 0b47 	vmov.f64	d0, d7
 800409e:	f00d fef7 	bl	8011e90 <cos>
 80040a2:	eeb0 6b40 	vmov.f64	d6, d0
 80040a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80040b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80040b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80040be:	ee38 7b07 	vadd.f64	d7, d8, d7
 80040c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80040d2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80040dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040e0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8004130 <updateData+0x3b0>
 80040e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040e8:	eeb0 0b47 	vmov.f64	d0, d7
 80040ec:	f00d ff1c 	bl	8011f28 <sin>
 80040f0:	eeb0 6b40 	vmov.f64	d6, d0
 80040f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004100:	edd7 7a01 	vldr	s15, [r7, #4]
 8004104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004108:	ee26 7b07 	vmul.f64	d7, d6, d7
 800410c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004110:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 800411a:	bf00      	nop
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	ecbd 8b02 	vpop	{d8}
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	f5c28f5c 	.word	0xf5c28f5c
 800412c:	3fef5c28 	.word	0x3fef5c28
 8004130:	a2529d39 	.word	0xa2529d39
 8004134:	3f91df46 	.word	0x3f91df46
 8004138:	66666667 	.word	0x66666667
 800413c:	3f666666 	.word	0x3f666666
 8004140:	c3340000 	.word	0xc3340000
 8004144:	43b40000 	.word	0x43b40000
 8004148:	43340000 	.word	0x43340000

0800414c <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e00e      	b.n	800417a <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4413      	add	r3, r2
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	332c      	adds	r3, #44	; 0x2c
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3304      	adds	r3, #4
 8004172:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b02      	cmp	r3, #2
 800417e:	dded      	ble.n	800415c <setPose+0x10>
	}
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <readSpeed>:
 */

#include "myCAN.h"

void readSpeed(FDCAN_HandleTypeDef *hfdcan, FDCAN_RxHeaderTypeDef *pRxHeader,
		union BytesFloat bf, uint8_t *pRxData, uint8_t *m, float *sp){
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
	uint8_t m2;
	m2 = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, pRxHeader, pRxData);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	4810      	ldr	r0, [pc, #64]	; (80041e8 <readSpeed+0x58>)
 80041a6:	f001 fe27 	bl	8005df8 <HAL_FDCAN_GetRxMessage>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]
	*m = m2;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	7cfa      	ldrb	r2, [r7, #19]
 80041b2:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e00c      	b.n	80041d4 <readSpeed+0x44>
		uint8_t receivedByte = pRxData[i];
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	74bb      	strb	r3, [r7, #18]
		bf.byteValue[i] = receivedByte;
 80041c4:	1d3a      	adds	r2, r7, #4
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	7cba      	ldrb	r2, [r7, #18]
 80041cc:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d9ef      	bls.n	80041ba <readSpeed+0x2a>
	}

	*sp = bf.floatValue;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	601a      	str	r2, [r3, #0]

	// return m;
}
 80041e0:	bf00      	nop
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2400033c 	.word	0x2400033c

080041ec <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80041f4:	1d39      	adds	r1, r7, #4
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	2201      	movs	r2, #1
 80041fc:	4803      	ldr	r0, [pc, #12]	; (800420c <__io_putchar+0x20>)
 80041fe:	f006 ff67 	bl	800b0d0 <HAL_UART_Transmit>
  return ch;
 8004202:	687b      	ldr	r3, [r7, #4]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	24000960 	.word	0x24000960

08004210 <initPI>:
 * */

#include "pi.h"
#include "myprintf.h"

void initPI(struct PI * pi, float sample_time, float k_p, float k_i, float k_d, float u_max, float u_min){
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	61f8      	str	r0, [r7, #28]
 8004218:	ed87 0a06 	vstr	s0, [r7, #24]
 800421c:	edc7 0a05 	vstr	s1, [r7, #20]
 8004220:	ed87 1a04 	vstr	s2, [r7, #16]
 8004224:	edc7 1a03 	vstr	s3, [r7, #12]
 8004228:	ed87 2a02 	vstr	s4, [r7, #8]
 800422c:	edc7 2a01 	vstr	s5, [r7, #4]
  pi->sample_time = sample_time;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	601a      	str	r2, [r3, #0]
  pi->k_p = k_p;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	60da      	str	r2, [r3, #12]
  pi->k_i = k_i;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	611a      	str	r2, [r3, #16]
  pi->k_d = k_d;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	615a      	str	r2, [r3, #20]

  pi->error = 0;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
  pi->prev_error = 0;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  pi->chi1_d = 0;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	625a      	str	r2, [r3, #36]	; 0x24
  pi->u = 0;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	621a      	str	r2, [r3, #32]

  pi->U_MAX = u_max;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	61da      	str	r2, [r3, #28]
  pi->U_MIN = u_min;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	3724      	adds	r7, #36	; 0x24
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <updateReferences>:

void updateReferences(struct PI * pi, float chi1_d){
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	ed87 0a00 	vstr	s0, [r7]
    pi->chi1_d = chi1_d;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <calculateManipulation>:

void calculateManipulation(struct PI * pi, float chi1){
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	ed87 0a00 	vstr	s0, [r7]
  float error_d;
  float error_i;
  float u;

  pi->prev_error   = pi->error;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
  pi->error        = pi->chi1_d- chi1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80042b8:	edd7 7a00 	vldr	s15, [r7]
 80042bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	edc3 7a01 	vstr	s15, [r3, #4]

  error_d = (pi->error- pi->prev_error) / pi->sample_time;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80042d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e0:	edc7 7a05 	vstr	s15, [r7, #20]
  error_i = ((pi->error+ pi->prev_error) / 2 * pi->sample_time) + pi->error;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80042f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	edd3 7a01 	vldr	s15, [r3, #4]
 800430c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004310:	edc7 7a04 	vstr	s15, [r7, #16]

  u  = pi->k_p* pi->error+ pi->k_i* error_i + pi->k_d* error_d;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	ed93 7a03 	vldr	s14, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	edd3 6a04 	vldr	s13, [r3, #16]
 800432a:	edd7 7a04 	vldr	s15, [r7, #16]
 800432e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	edd3 6a05 	vldr	s13, [r3, #20]
 800433c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004348:	edc7 7a03 	vstr	s15, [r7, #12]
  // printf("U: %3.3f, K{%3.3f, %3.3f, %3.3f}\r\n",u, pi->error, error_i, error_d);
                                                              
  if(!isnan(u) || u != 0.0)
 800434c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004350:	edd7 7a03 	vldr	s15, [r7, #12]
 8004354:	eeb4 7a67 	vcmp.f32	s14, s15
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d706      	bvc.n	800436c <calculateManipulation+0xce>
 800435e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	d002      	beq.n	8004372 <calculateManipulation+0xd4>
      pi->u= u;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <saturateManipulation>:

void saturateManipulation(struct PI * pi, float chi1){
 800437e:	b580      	push	{r7, lr}
 8004380:	ed2d 8b02 	vpush	{d8}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	ed87 0a00 	vstr	s0, [r7]
  calculateManipulation(pi, chi1);
 800438e:	ed97 0a00 	vldr	s0, [r7]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ff83 	bl	800429e <calculateManipulation>
  pi->u = abs(pi->u) > pi->U_MAX ? pi->u / abs(pi->u) * pi->U_MAX : pi->u;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	edd3 7a08 	vldr	s15, [r3, #32]
 800439e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043a2:	eeb0 0b47 	vmov.f64	d0, d7
 80043a6:	f00a fe07 	bl	800efb8 <abs>
 80043aa:	ee07 0a90 	vmov	s15, r0
 80043ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80043b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	dd17      	ble.n	80043f2 <saturateManipulation+0x74>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	ed93 8a08 	vldr	s16, [r3, #32]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80043ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043d2:	eeb0 0b47 	vmov.f64	d0, d7
 80043d6:	f00a fdef 	bl	800efb8 <abs>
 80043da:	ee07 0a90 	vmov	s15, r0
 80043de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80043ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f0:	e002      	b.n	80043f8 <saturateManipulation+0x7a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	edc3 7a08 	vstr	s15, [r3, #32]
  pi->u = pi->u < pi->U_MIN ? pi->U_MIN : pi->u;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	ed93 7a08 	vldr	s14, [r3, #32]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	edd3 7a06 	vldr	s15, [r3, #24]
 800440a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d502      	bpl.n	800441a <saturateManipulation+0x9c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	e001      	b.n	800441e <saturateManipulation+0xa0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6213      	str	r3, [r2, #32]
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	ecbd 8b02 	vpop	{d8}
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004434:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004436:	4a29      	ldr	r2, [pc, #164]	; (80044dc <MX_SPI1_Init+0xac>)
 8004438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <MX_SPI1_Init+0xa8>)
 800443c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004442:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <MX_SPI1_Init+0xa8>)
 800444a:	2207      	movs	r2, #7
 800444c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800445c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004460:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004466:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004468:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800446c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004474:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004476:	2200      	movs	r2, #0
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447a:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <MX_SPI1_Init+0xa8>)
 800447c:	2200      	movs	r2, #0
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004480:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004482:	2200      	movs	r2, #0
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004490:	2200      	movs	r2, #0
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <MX_SPI1_Init+0xa8>)
 8004496:	2200      	movs	r2, #0
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <MX_SPI1_Init+0xa8>)
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044c4:	4804      	ldr	r0, [pc, #16]	; (80044d8 <MX_SPI1_Init+0xa8>)
 80044c6:	f004 fd79 	bl	8008fbc <HAL_SPI_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80044d0:	f7ff f812 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044d4:	bf00      	nop
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	2400072c 	.word	0x2400072c
 80044dc:	40013000 	.word	0x40013000

080044e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <MX_SPI2_Init+0xa4>)
 80044e6:	4a28      	ldr	r2, [pc, #160]	; (8004588 <MX_SPI2_Init+0xa8>)
 80044e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <MX_SPI2_Init+0xa4>)
 80044ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <MX_SPI2_Init+0xa4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <MX_SPI2_Init+0xa4>)
 80044fa:	2207      	movs	r2, #7
 80044fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004500:	2200      	movs	r2, #0
 8004502:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004506:	2200      	movs	r2, #0
 8004508:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <MX_SPI2_Init+0xa4>)
 800450c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004510:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004514:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004518:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <MX_SPI2_Init+0xa4>)
 800451c:	2200      	movs	r2, #0
 800451e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004520:	4b18      	ldr	r3, [pc, #96]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004522:	2200      	movs	r2, #0
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004528:	2200      	movs	r2, #0
 800452a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <MX_SPI2_Init+0xa4>)
 800452e:	2200      	movs	r2, #0
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004538:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <MX_SPI2_Init+0xa4>)
 800453c:	2200      	movs	r2, #0
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004542:	2200      	movs	r2, #0
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <MX_SPI2_Init+0xa4>)
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004554:	2200      	movs	r2, #0
 8004556:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <MX_SPI2_Init+0xa4>)
 800455a:	2200      	movs	r2, #0
 800455c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004560:	2200      	movs	r2, #0
 8004562:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004566:	2200      	movs	r2, #0
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <MX_SPI2_Init+0xa4>)
 800456c:	2200      	movs	r2, #0
 800456e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <MX_SPI2_Init+0xa4>)
 8004572:	f004 fd23 	bl	8008fbc <HAL_SPI_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800457c:	f7fe ffbc 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004580:	bf00      	nop
 8004582:	bd80      	pop	{r7, pc}
 8004584:	240007b4 	.word	0x240007b4
 8004588:	40003800 	.word	0x40003800

0800458c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004592:	4a28      	ldr	r2, [pc, #160]	; (8004634 <MX_SPI3_Init+0xa8>)
 8004594:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004598:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800459c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045a6:	2207      	movs	r2, #7
 80045a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045b0:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80045b6:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045c0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80045c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045da:	2200      	movs	r2, #0
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <MX_SPI3_Init+0xa4>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004600:	2200      	movs	r2, #0
 8004602:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004606:	2200      	movs	r2, #0
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <MX_SPI3_Init+0xa4>)
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004612:	2200      	movs	r2, #0
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <MX_SPI3_Init+0xa4>)
 8004618:	2200      	movs	r2, #0
 800461a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800461c:	4804      	ldr	r0, [pc, #16]	; (8004630 <MX_SPI3_Init+0xa4>)
 800461e:	f004 fccd 	bl	8008fbc <HAL_SPI_Init>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8004628:	f7fe ff66 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	2400083c 	.word	0x2400083c
 8004634:	40003c00 	.word	0x40003c00

08004638 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0bc      	sub	sp, #240	; 0xf0
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004650:	f107 0320 	add.w	r3, r7, #32
 8004654:	22bc      	movs	r2, #188	; 0xbc
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f00a fde2 	bl	800f222 <memset>
  if(spiHandle->Instance==SPI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_SPI_MspInit+0x1e0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d142      	bne.n	80046ee <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800466e:	2300      	movs	r3, #0
 8004670:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004672:	f107 0320 	add.w	r3, r7, #32
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f938 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004682:	f7fe ff39 	bl	80034f8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004686:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800468c:	4a63      	ldr	r2, [pc, #396]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 800468e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004692:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004696:	4b61      	ldr	r3, [pc, #388]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800469c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a4:	4b5d      	ldr	r3, [pc, #372]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80046a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046aa:	4a5c      	ldr	r2, [pc, #368]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046b4:	4b59      	ldr	r3, [pc, #356]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80046b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80046c2:	2338      	movs	r3, #56	; 0x38
 80046c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046da:	2305      	movs	r3, #5
 80046dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046e4:	4619      	mov	r1, r3
 80046e6:	484e      	ldr	r0, [pc, #312]	; (8004820 <HAL_SPI_MspInit+0x1e8>)
 80046e8:	f001 fef4 	bl	80064d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80046ec:	e090      	b.n	8004810 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <HAL_SPI_MspInit+0x1ec>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d143      	bne.n	8004780 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80046f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80046fe:	2300      	movs	r3, #0
 8004700:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004702:	f107 0320 	add.w	r3, r7, #32
 8004706:	4618      	mov	r0, r3
 8004708:	f003 f8f0 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8004712:	f7fe fef1 	bl	80034f8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004716:	4b41      	ldr	r3, [pc, #260]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800471c:	4a3f      	ldr	r2, [pc, #252]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 800471e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004722:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004726:	4b3d      	ldr	r3, [pc, #244]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800472c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800473a:	4a38      	ldr	r2, [pc, #224]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004744:	4b35      	ldr	r3, [pc, #212]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 8004746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004752:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800476c:	2305      	movs	r3, #5
 800476e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004776:	4619      	mov	r1, r3
 8004778:	4829      	ldr	r0, [pc, #164]	; (8004820 <HAL_SPI_MspInit+0x1e8>)
 800477a:	f001 feab 	bl	80064d4 <HAL_GPIO_Init>
}
 800477e:	e047      	b.n	8004810 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_SPI_MspInit+0x1f0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d142      	bne.n	8004810 <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800478a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004790:	2300      	movs	r3, #0
 8004792:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004794:	f107 0320 	add.w	r3, r7, #32
 8004798:	4618      	mov	r0, r3
 800479a:	f003 f8a7 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_SPI_MspInit+0x170>
      Error_Handler();
 80047a4:	f7fe fea8 	bl	80034f8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_SPI_MspInit+0x1e4>)
 80047d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80047e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047fe:	2306      	movs	r3, #6
 8004800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004804:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004808:	4619      	mov	r1, r3
 800480a:	4808      	ldr	r0, [pc, #32]	; (800482c <HAL_SPI_MspInit+0x1f4>)
 800480c:	f001 fe62 	bl	80064d4 <HAL_GPIO_Init>
}
 8004810:	bf00      	nop
 8004812:	37f0      	adds	r7, #240	; 0xf0
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40013000 	.word	0x40013000
 800481c:	58024400 	.word	0x58024400
 8004820:	58020400 	.word	0x58020400
 8004824:	40003800 	.word	0x40003800
 8004828:	40003c00 	.word	0x40003c00
 800482c:	58020800 	.word	0x58020800

08004830 <mpu9250_write_reg>:
  }
}

/* USER CODE BEGIN 1 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	460a      	mov	r2, r1
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	4613      	mov	r3, r2
 800483e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8004840:	2200      	movs	r2, #0
 8004842:	2110      	movs	r1, #16
 8004844:	480b      	ldr	r0, [pc, #44]	; (8004874 <mpu9250_write_reg+0x44>)
 8004846:	f001 fff5 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 800484a:	1df9      	adds	r1, r7, #7
 800484c:	2364      	movs	r3, #100	; 0x64
 800484e:	2201      	movs	r2, #1
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <mpu9250_write_reg+0x48>)
 8004852:	f004 fcb9 	bl	80091c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8004856:	1db9      	adds	r1, r7, #6
 8004858:	2364      	movs	r3, #100	; 0x64
 800485a:	2201      	movs	r2, #1
 800485c:	4806      	ldr	r0, [pc, #24]	; (8004878 <mpu9250_write_reg+0x48>)
 800485e:	f004 fcb3 	bl	80091c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8004862:	2201      	movs	r2, #1
 8004864:	2110      	movs	r1, #16
 8004866:	4803      	ldr	r0, [pc, #12]	; (8004874 <mpu9250_write_reg+0x44>)
 8004868:	f001 ffe4 	bl	8006834 <HAL_GPIO_WritePin>
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58020000 	.word	0x58020000
 8004878:	2400072c 	.word	0x2400072c

0800487c <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	71fb      	strb	r3, [r7, #7]
 8004888:	4613      	mov	r3, r2
 800488a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004892:	b2db      	uxtb	r3, r3
 8004894:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8004896:	2200      	movs	r2, #0
 8004898:	2110      	movs	r1, #16
 800489a:	480d      	ldr	r0, [pc, #52]	; (80048d0 <mpu9250_read_reg+0x54>)
 800489c:	f001 ffca 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80048a0:	f107 010f 	add.w	r1, r7, #15
 80048a4:	2364      	movs	r3, #100	; 0x64
 80048a6:	2201      	movs	r2, #1
 80048a8:	480a      	ldr	r0, [pc, #40]	; (80048d4 <mpu9250_read_reg+0x58>)
 80048aa:	f004 fc8d 	bl	80091c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	2364      	movs	r3, #100	; 0x64
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	4807      	ldr	r0, [pc, #28]	; (80048d4 <mpu9250_read_reg+0x58>)
 80048b8:	f004 fe78 	bl	80095ac <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80048bc:	2201      	movs	r2, #1
 80048be:	2110      	movs	r1, #16
 80048c0:	4803      	ldr	r0, [pc, #12]	; (80048d0 <mpu9250_read_reg+0x54>)
 80048c2:	f001 ffb7 	bl	8006834 <HAL_GPIO_WritePin>
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58020000 	.word	0x58020000
 80048d4:	2400072c 	.word	0x2400072c

080048d8 <initStanley>:
 * */

#include "stanley_controller.h"

void initStanley(struct Stanley * stanley, float *delta_sat, float k, float k_soft)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80048e6:	edc7 0a00 	vstr	s1, [r7]
    stanley->sat[0] = delta_sat[0];
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
    stanley->sat[1] = delta_sat[1];
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	605a      	str	r2, [r3, #4]
    stanley->psi = 0;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
    stanley->k = k;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	611a      	str	r2, [r3, #16]
    stanley->k_soft = k_soft;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <calculateCrosstrackError>:

void calculateCrosstrackError(struct Stanley * stanley, struct Point * vehicle_pos, struct Point * p1, struct Point * p2){
 800491c:	b580      	push	{r7, lr}
 800491e:	ed2d 8b04 	vpush	{d8-d9}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
    float b;
    float c;
    float xp;
    float yp;

    float ex = p2->x - p1->x;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	ed93 7a00 	vldr	s14, [r3]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800493e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ey = p2->y - p1->y;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	ed93 7a01 	vldr	s14, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	edd3 7a01 	vldr	s15, [r3, #4]
 800494e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004952:	edc7 7a08 	vstr	s15, [r7, #32]

    // Angle of path frame
    stanley->ak = atan2(ey,ex);
 8004956:	edd7 7a08 	vldr	s15, [r7, #32]
 800495a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800495e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004962:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004966:	eeb0 1b46 	vmov.f64	d1, d6
 800496a:	eeb0 0b47 	vmov.f64	d0, d7
 800496e:	f00d fb27 	bl	8011fc0 <atan2>
 8004972:	eeb0 7b40 	vmov.f64	d7, d0
 8004976:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if(isnormal(ex) && isnormal(ey)){
 8004980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004984:	eef0 7ae7 	vabs.f32	s15, s15
 8004988:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8004c80 <calculateCrosstrackError+0x364>
 800498c:	eef4 7a47 	vcmp.f32	s15, s14
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	bf8c      	ite	hi
 8004996:	2301      	movhi	r3, #1
 8004998:	2300      	movls	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f083 0301 	eor.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049ac:	eef0 7ae7 	vabs.f32	s15, s15
 80049b0:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004c84 <calculateCrosstrackError+0x368>
 80049b4:	eef4 7a47 	vcmp.f32	s15, s14
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	bfb4      	ite	lt
 80049be:	2301      	movlt	r3, #1
 80049c0:	2300      	movge	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f083 0301 	eor.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4013      	ands	r3, r2
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d074      	beq.n	8004ac2 <calculateCrosstrackError+0x1a6>
 80049d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80049dc:	eef0 7ae7 	vabs.f32	s15, s15
 80049e0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004c80 <calculateCrosstrackError+0x364>
 80049e4:	eef4 7a47 	vcmp.f32	s15, s14
 80049e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ec:	bf8c      	ite	hi
 80049ee:	2301      	movhi	r3, #1
 80049f0:	2300      	movls	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f083 0301 	eor.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a04:	eef0 7ae7 	vabs.f32	s15, s15
 8004a08:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004c84 <calculateCrosstrackError+0x368>
 8004a0c:	eef4 7a47 	vcmp.f32	s15, s14
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	bfb4      	ite	lt
 8004a16:	2301      	movlt	r3, #1
 8004a18:	2300      	movge	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d048      	beq.n	8004ac2 <calculateCrosstrackError+0x1a6>
        // Slope of path
        m1 = ex/ey;
 8004a30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a34:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	edc7 7a07 	vstr	s15, [r7, #28]
        b = p2->x - m1*p2->y;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	ed93 7a00 	vldr	s14, [r3]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a58:	edc7 7a06 	vstr	s15, [r7, #24]

        // Slope of normal line to the path
        m2 = -1/m1;
 8004a5c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8004a60:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a68:	edc7 7a05 	vstr	s15, [r7, #20]
        c = vehicle_pos->x - m2*vehicle_pos->y;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	ed93 7a00 	vldr	s14, [r3]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a84:	edc7 7a04 	vstr	s15, [r7, #16]

        // Obtain intersection point
        yp = (c - b)/(m1 - m2);
 8004a88:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a90:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        xp = m1*yp + b;
 8004aa8:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab4:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004abc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8004ac0:	e06f      	b.n	8004ba2 <calculateCrosstrackError+0x286>

    } else {
        if(!isnormal(ex)){
 8004ac2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8004aca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c80 <calculateCrosstrackError+0x364>
 8004ace:	eef4 7a47 	vcmp.f32	s15, s14
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	bf8c      	ite	hi
 8004ad8:	2301      	movhi	r3, #1
 8004ada:	2300      	movls	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f083 0301 	eor.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004af4:	eef0 7ae7 	vabs.f32	s15, s15
 8004af8:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004c84 <calculateCrosstrackError+0x368>
 8004afc:	eef4 7a47 	vcmp.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	bfb4      	ite	lt
 8004b06:	2301      	movlt	r3, #1
 8004b08:	2300      	movge	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f083 0301 	eor.w	r3, r3, #1
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <calculateCrosstrackError+0x216>
            yp = vehicle_pos->y;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = p2->x; // or x1
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if(!isnormal(ey)){
 8004b32:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b36:	eef0 7ae7 	vabs.f32	s15, s15
 8004b3a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004c80 <calculateCrosstrackError+0x364>
 8004b3e:	eef4 7a47 	vcmp.f32	s15, s14
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	bf8c      	ite	hi
 8004b48:	2301      	movhi	r3, #1
 8004b4a:	2300      	movls	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f083 0301 	eor.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b64:	eef0 7ae7 	vabs.f32	s15, s15
 8004b68:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004c84 <calculateCrosstrackError+0x368>
 8004b6c:	eef4 7a47 	vcmp.f32	s15, s14
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	bfb4      	ite	lt
 8004b76:	2301      	movlt	r3, #1
 8004b78:	2300      	movge	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f083 0301 	eor.w	r3, r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f083 0301 	eor.w	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <calculateCrosstrackError+0x286>
            yp = p2->y; // or y1
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = vehicle_pos->x;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    // Along-track and crosstrack errors in path frame
    stanley->e_a = (p2->x - xp) * cos(stanley->ak) + (p2->y - yp) * sin(stanley->ak); // along-track error
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	ed93 7a00 	vldr	s14, [r3]
 8004ba8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bbe:	eeb0 0b47 	vmov.f64	d0, d7
 8004bc2:	f00d f965 	bl	8011e90 <cos>
 8004bc6:	eeb0 7b40 	vmov.f64	d7, d0
 8004bca:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bdc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bea:	eeb0 0b47 	vmov.f64	d0, d7
 8004bee:	f00d f99b 	bl	8011f28 <sin>
 8004bf2:	eeb0 7b40 	vmov.f64	d7, d0
 8004bf6:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004bfa:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	edc3 7a06 	vstr	s15, [r3, #24]
    stanley->e_c = -(vehicle_pos->x - xp) * sin(stanley->ak) + (vehicle_pos->y - yp) * cos(stanley->ak); // crosstrack error
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	ed93 7a00 	vldr	s14, [r3]
 8004c0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c16:	eef1 7a67 	vneg.f32	s15, s15
 8004c1a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c28:	eeb0 0b47 	vmov.f64	d0, d7
 8004c2c:	f00d f97c 	bl	8011f28 <sin>
 8004c30:	eeb0 7b40 	vmov.f64	d7, d0
 8004c34:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c46:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c54:	eeb0 0b47 	vmov.f64	d0, d7
 8004c58:	f00d f91a 	bl	8011e90 <cos>
 8004c5c:	eeb0 7b40 	vmov.f64	d7, d0
 8004c60:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004c64:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004c68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8004c72:	bf00      	nop
 8004c74:	3730      	adds	r7, #48	; 0x30
 8004c76:	46bd      	mov	sp, r7
 8004c78:	ecbd 8b04 	vpop	{d8-d9}
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	7f7fffff 	.word	0x7f7fffff
 8004c84:	00800000 	.word	0x00800000

08004c88 <setYawAngle>:

void setYawAngle(struct Stanley * stanley, float psi){
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	ed87 0a00 	vstr	s0, [r7]
    stanley->psi = psi;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	60da      	str	r2, [r3, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <calculateSteering>:

void calculateSteering(struct Stanley * stanley, float vel, uint8_t precision){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	ed2d 8b02 	vpush	{d8}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	71fb      	strb	r3, [r7, #7]
    stanley->vel = vel;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	621a      	str	r2, [r3, #32]

    // PI error fixed due to rounding in ak_ angle when the path is vertical that makes it greater than M_PI
    double PI = M_PI + 1e-3;
 8004cc2:	a381      	add	r3, pc, #516	; (adr r3, 8004ec8 <calculateSteering+0x220>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(stanley->ak >= PI/2 && stanley->ak <=  PI && stanley->psi <= -PI/2 && stanley->psi >= - PI){
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004cd2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004cd6:	ed97 5b06 	vldr	d5, [r7, #24]
 8004cda:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004cde:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004ce2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cea:	db3c      	blt.n	8004d66 <calculateSteering+0xbe>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cf6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004cfa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	db30      	blt.n	8004d66 <calculateSteering+0xbe>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d12:	eeb1 5b47 	vneg.f64	d5, d7
 8004d16:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d1a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004d1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	d81e      	bhi.n	8004d66 <calculateSteering+0xbe>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d2e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d32:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d36:	eeb1 7b47 	vneg.f64	d7, d7
 8004d3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	db10      	blt.n	8004d66 <calculateSteering+0xbe>
        stanley->psi = stanley->psi + PI*2;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d4a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	edc3 7a03 	vstr	s15, [r3, #12]
 8004d64:	e04b      	b.n	8004dfe <calculateSteering+0x156>
    } else if (stanley->ak < -PI/2 && stanley->ak > - PI && stanley->psi > PI/2 && stanley->psi <  PI){
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d6c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d70:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d74:	eeb1 5b47 	vneg.f64	d5, d7
 8004d78:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d7c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004d80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	d539      	bpl.n	8004dfe <calculateSteering+0x156>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d94:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d98:	eeb1 7b47 	vneg.f64	d7, d7
 8004d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da4:	dd2b      	ble.n	8004dfe <calculateSteering+0x156>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004db0:	ed97 5b06 	vldr	d5, [r7, #24]
 8004db4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004db8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004dbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	dd1b      	ble.n	8004dfe <calculateSteering+0x156>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dd0:	ed97 6b06 	vldr	d6, [r7, #24]
 8004dd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ddc:	dd0f      	ble.n	8004dfe <calculateSteering+0x156>
        stanley->psi = stanley->psi - PI*2;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004de4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004de8:	ed97 7b06 	vldr	d7, [r7, #24]
 8004dec:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004df4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    float phi = stanley->psi - stanley->ak;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0e:	edc7 7a05 	vstr	s15, [r7, #20]
    stanley->delta = phi + atan2(stanley->k*stanley->e_c,stanley->k_soft + stanley->vel);
 8004e12:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e16:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	ed93 6a05 	vldr	s12, [r3, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e3a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004e3e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004e42:	eeb0 1b46 	vmov.f64	d1, d6
 8004e46:	eeb0 0b47 	vmov.f64	d0, d7
 8004e4a:	f00d f8b9 	bl	8011fc0 <atan2>
 8004e4e:	eeb0 7b40 	vmov.f64	d7, d0
 8004e52:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004e56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	edc3 7a02 	vstr	s15, [r3, #8]

    // You want to reduce psi by delta so ...
    stanley->delta = -stanley->delta;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e66:	eef1 7a67 	vneg.f32	s15, s15
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	edc3 7a02 	vstr	s15, [r3, #8]

    stanley->delta = stanley->delta < stanley->sat[1] ? stanley->sat[1] : stanley->delta;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	d502      	bpl.n	8004e8c <calculateSteering+0x1e4>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	e001      	b.n	8004e90 <calculateSteering+0x1e8>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6093      	str	r3, [r2, #8]
    stanley->delta = stanley->delta > stanley->sat[0] ? stanley->sat[0] : stanley->delta;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	edd3 7a00 	vldr	s15, [r3]
 8004ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	dd02      	ble.n	8004eb0 <calculateSteering+0x208>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	e001      	b.n	8004eb4 <calculateSteering+0x20c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	6093      	str	r3, [r2, #8]
 8004eb8:	bf00      	nop
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	ecbd 8b02 	vpop	{d8}
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	9dfe8b4d 	.word	0x9dfe8b4d
 8004ecc:	40092407 	.word	0x40092407

08004ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_MspInit+0x38>)
 8004ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004edc:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <HAL_MspInit+0x38>)
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_MspInit+0x38>)
 8004ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	f06f 0001 	mvn.w	r0, #1
 8004efc:	f000 fd4b 	bl	8005996 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	58024400 	.word	0x58024400

08004f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f10:	e7fe      	b.n	8004f10 <NMI_Handler+0x4>

08004f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f12:	b480      	push	{r7}
 8004f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f16:	e7fe      	b.n	8004f16 <HardFault_Handler+0x4>

08004f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f1c:	e7fe      	b.n	8004f1c <MemManage_Handler+0x4>

08004f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f22:	e7fe      	b.n	8004f22 <BusFault_Handler+0x4>

08004f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f28:	e7fe      	b.n	8004f28 <UsageFault_Handler+0x4>

08004f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f3c:	f000 fc1e 	bl	800577c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f40:	f009 fc0c 	bl	800e75c <xTaskGetSchedulerState>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f4a:	f007 ffbd 	bl	800cec8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
	return 1;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_kill>:

int _kill(int pid, int sig)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f6c:	f00a f828 	bl	800efc0 <__errno>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2216      	movs	r2, #22
 8004f74:	601a      	str	r2, [r3, #0]
	return -1;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_exit>:

void _exit (int status)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ffe7 	bl	8004f62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f94:	e7fe      	b.n	8004f94 <_exit+0x12>

08004f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e00a      	b.n	8004fbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fa8:	f3af 8000 	nop.w
 8004fac:	4601      	mov	r1, r0
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	60ba      	str	r2, [r7, #8]
 8004fb4:	b2ca      	uxtb	r2, r1
 8004fb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	dbf0      	blt.n	8004fa8 <_read+0x12>
	}

return len;
 8004fc6:	687b      	ldr	r3, [r7, #4]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e009      	b.n	8004ff6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	60ba      	str	r2, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff f8fe 	bl	80041ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	dbf1      	blt.n	8004fe2 <_write+0x12>
	}
	return len;
 8004ffe:	687b      	ldr	r3, [r7, #4]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <_close>:

int _close(int file)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	return -1;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005030:	605a      	str	r2, [r3, #4]
	return 0;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <_isatty>:

int _isatty(int file)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	return 1;
 8005048:	2301      	movs	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
	return 0;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <_sbrk+0x5c>)
 800507a:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <_sbrk+0x60>)
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <_sbrk+0x64>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <_sbrk+0x64>)
 800508e:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <_sbrk+0x68>)
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <_sbrk+0x64>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	429a      	cmp	r2, r3
 800509e:	d207      	bcs.n	80050b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050a0:	f009 ff8e 	bl	800efc0 <__errno>
 80050a4:	4603      	mov	r3, r0
 80050a6:	220c      	movs	r2, #12
 80050a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	e009      	b.n	80050c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050b0:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <_sbrk+0x64>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <_sbrk+0x64>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <_sbrk+0x64>)
 80050c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050c2:	68fb      	ldr	r3, [r7, #12]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	24080000 	.word	0x24080000
 80050d0:	00000400 	.word	0x00000400
 80050d4:	240008c4 	.word	0x240008c4
 80050d8:	24005418 	.word	0x24005418

080050dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	; 0x38
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f0:	f107 031c 	add.w	r3, r7, #28
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050fc:	463b      	mov	r3, r7
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	60da      	str	r2, [r3, #12]
 8005108:	611a      	str	r2, [r3, #16]
 800510a:	615a      	str	r2, [r3, #20]
 800510c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005114:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8005116:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005118:	2248      	movs	r2, #72	; 0x48
 800511a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800511c:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <MX_TIM2_Init+0xe8>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005128:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800512a:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <MX_TIM2_Init+0xe8>)
 800512c:	2200      	movs	r2, #0
 800512e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005136:	4823      	ldr	r0, [pc, #140]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005138:	f004 fee5 	bl	8009f06 <HAL_TIM_Base_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005142:	f7fe f9d9 	bl	80034f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800514c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005150:	4619      	mov	r1, r3
 8005152:	481c      	ldr	r0, [pc, #112]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005154:	f005 f9b2 	bl	800a4bc <HAL_TIM_ConfigClockSource>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800515e:	f7fe f9cb 	bl	80034f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005162:	4818      	ldr	r0, [pc, #96]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005164:	f004 ff26 	bl	8009fb4 <HAL_TIM_PWM_Init>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800516e:	f7fe f9c3 	bl	80034f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800517a:	f107 031c 	add.w	r3, r7, #28
 800517e:	4619      	mov	r1, r3
 8005180:	4810      	ldr	r0, [pc, #64]	; (80051c4 <MX_TIM2_Init+0xe8>)
 8005182:	f005 fec7 	bl	800af14 <HAL_TIMEx_MasterConfigSynchronization>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800518c:	f7fe f9b4 	bl	80034f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005190:	2360      	movs	r3, #96	; 0x60
 8005192:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051a0:	463b      	mov	r3, r7
 80051a2:	2200      	movs	r2, #0
 80051a4:	4619      	mov	r1, r3
 80051a6:	4807      	ldr	r0, [pc, #28]	; (80051c4 <MX_TIM2_Init+0xe8>)
 80051a8:	f005 f874 	bl	800a294 <HAL_TIM_PWM_ConfigChannel>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80051b2:	f7fe f9a1 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80051b6:	4803      	ldr	r0, [pc, #12]	; (80051c4 <MX_TIM2_Init+0xe8>)
 80051b8:	f000 f8b6 	bl	8005328 <HAL_TIM_MspPostInit>

}
 80051bc:	bf00      	nop
 80051be:	3738      	adds	r7, #56	; 0x38
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	240008c8 	.word	0x240008c8

080051c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051e8:	463b      	mov	r3, r7
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	615a      	str	r2, [r3, #20]
 80051f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051fa:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <MX_TIM3_Init+0xe8>)
 80051fc:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <MX_TIM3_Init+0xec>)
 80051fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <MX_TIM3_Init+0xe8>)
 8005202:	2248      	movs	r2, #72	; 0x48
 8005204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <MX_TIM3_Init+0xe8>)
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800520c:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <MX_TIM3_Init+0xe8>)
 800520e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005214:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <MX_TIM3_Init+0xe8>)
 8005216:	2200      	movs	r2, #0
 8005218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <MX_TIM3_Init+0xe8>)
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005220:	4823      	ldr	r0, [pc, #140]	; (80052b0 <MX_TIM3_Init+0xe8>)
 8005222:	f004 fe70 	bl	8009f06 <HAL_TIM_Base_Init>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800522c:	f7fe f964 	bl	80034f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800523a:	4619      	mov	r1, r3
 800523c:	481c      	ldr	r0, [pc, #112]	; (80052b0 <MX_TIM3_Init+0xe8>)
 800523e:	f005 f93d 	bl	800a4bc <HAL_TIM_ConfigClockSource>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005248:	f7fe f956 	bl	80034f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800524c:	4818      	ldr	r0, [pc, #96]	; (80052b0 <MX_TIM3_Init+0xe8>)
 800524e:	f004 feb1 	bl	8009fb4 <HAL_TIM_PWM_Init>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005258:	f7fe f94e 	bl	80034f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	4619      	mov	r1, r3
 800526a:	4811      	ldr	r0, [pc, #68]	; (80052b0 <MX_TIM3_Init+0xe8>)
 800526c:	f005 fe52 	bl	800af14 <HAL_TIMEx_MasterConfigSynchronization>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005276:	f7fe f93f 	bl	80034f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800527a:	2360      	movs	r3, #96	; 0x60
 800527c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800528a:	463b      	mov	r3, r7
 800528c:	2200      	movs	r2, #0
 800528e:	4619      	mov	r1, r3
 8005290:	4807      	ldr	r0, [pc, #28]	; (80052b0 <MX_TIM3_Init+0xe8>)
 8005292:	f004 ffff 	bl	800a294 <HAL_TIM_PWM_ConfigChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800529c:	f7fe f92c 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80052a0:	4803      	ldr	r0, [pc, #12]	; (80052b0 <MX_TIM3_Init+0xe8>)
 80052a2:	f000 f841 	bl	8005328 <HAL_TIM_MspPostInit>

}
 80052a6:	bf00      	nop
 80052a8:	3738      	adds	r7, #56	; 0x38
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	24000914 	.word	0x24000914
 80052b4:	40000400 	.word	0x40000400

080052b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d10f      	bne.n	80052ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 80052cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 80052dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80052e8:	e013      	b.n	8005312 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <HAL_TIM_Base_MspInit+0x6c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 80052f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_TIM_Base_MspInit+0x68>)
 8005306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400
 8005324:	40000400 	.word	0x40000400

08005328 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005330:	f107 0314 	add.w	r3, r7, #20
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d120      	bne.n	800538c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 800534c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 800535c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536e:	2302      	movs	r3, #2
 8005370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800537a:	2301      	movs	r3, #1
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800537e:	f107 0314 	add.w	r3, r7, #20
 8005382:	4619      	mov	r1, r3
 8005384:	4816      	ldr	r0, [pc, #88]	; (80053e0 <HAL_TIM_MspPostInit+0xb8>)
 8005386:	f001 f8a5 	bl	80064d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800538a:	e023      	b.n	80053d4 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_TIM_MspPostInit+0xbc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d11e      	bne.n	80053d4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 8005398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800539c:	4a0f      	ldr	r2, [pc, #60]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <HAL_TIM_MspPostInit+0xb4>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b8:	2302      	movs	r3, #2
 80053ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c0:	2300      	movs	r3, #0
 80053c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053c4:	2302      	movs	r3, #2
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c8:	f107 0314 	add.w	r3, r7, #20
 80053cc:	4619      	mov	r1, r3
 80053ce:	4804      	ldr	r0, [pc, #16]	; (80053e0 <HAL_TIM_MspPostInit+0xb8>)
 80053d0:	f001 f880 	bl	80064d4 <HAL_GPIO_Init>
}
 80053d4:	bf00      	nop
 80053d6:	3728      	adds	r7, #40	; 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58024400 	.word	0x58024400
 80053e0:	58020000 	.word	0x58020000
 80053e4:	40000400 	.word	0x40000400

080053e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <MX_USART3_UART_Init+0x90>)
 80053ee:	4a23      	ldr	r2, [pc, #140]	; (800547c <MX_USART3_UART_Init+0x94>)
 80053f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <MX_USART3_UART_Init+0x90>)
 80053f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80053fa:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <MX_USART3_UART_Init+0x90>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005400:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005406:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <MX_USART3_UART_Init+0x90>)
 800540e:	220c      	movs	r2, #12
 8005410:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <MX_USART3_UART_Init+0x90>)
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005420:	2200      	movs	r2, #0
 8005422:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005426:	2200      	movs	r2, #0
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <MX_USART3_UART_Init+0x90>)
 800542c:	2200      	movs	r2, #0
 800542e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005430:	4811      	ldr	r0, [pc, #68]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005432:	f005 fdfd 	bl	800b030 <HAL_UART_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800543c:	f7fe f85c 	bl	80034f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005440:	2100      	movs	r1, #0
 8005442:	480d      	ldr	r0, [pc, #52]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005444:	f006 fe30 	bl	800c0a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800544e:	f7fe f853 	bl	80034f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005452:	2100      	movs	r1, #0
 8005454:	4808      	ldr	r0, [pc, #32]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005456:	f006 fe65 	bl	800c124 <HAL_UARTEx_SetRxFifoThreshold>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005460:	f7fe f84a 	bl	80034f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005464:	4804      	ldr	r0, [pc, #16]	; (8005478 <MX_USART3_UART_Init+0x90>)
 8005466:	f006 fde6 	bl	800c036 <HAL_UARTEx_DisableFifoMode>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005470:	f7fe f842 	bl	80034f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}
 8005478:	24000960 	.word	0x24000960
 800547c:	40004800 	.word	0x40004800

08005480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0b8      	sub	sp, #224	; 0xe0
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005498:	f107 0310 	add.w	r3, r7, #16
 800549c:	22bc      	movs	r2, #188	; 0xbc
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f009 febe 	bl	800f222 <memset>
  if(uartHandle->Instance==USART3)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a25      	ldr	r2, [pc, #148]	; (8005540 <HAL_UART_MspInit+0xc0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d142      	bne.n	8005536 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054b0:	2302      	movs	r3, #2
 80054b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	4618      	mov	r0, r3
 80054c0:	f002 fa14 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80054ca:	f7fe f815 	bl	80034f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054d4:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054f2:	4a14      	ldr	r2, [pc, #80]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <HAL_UART_MspInit+0xc4>)
 80054fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800550a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800550e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005524:	2307      	movs	r3, #7
 8005526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800552a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800552e:	4619      	mov	r1, r3
 8005530:	4805      	ldr	r0, [pc, #20]	; (8005548 <HAL_UART_MspInit+0xc8>)
 8005532:	f000 ffcf 	bl	80064d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005536:	bf00      	nop
 8005538:	37e0      	adds	r7, #224	; 0xe0
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40004800 	.word	0x40004800
 8005544:	58024400 	.word	0x58024400
 8005548:	58020c00 	.word	0x58020c00

0800554c <init_waypoint_buffer>:
#include "waypoints.h"
#include <stdio.h>

void init_waypoint_buffer(struct waypoint_buffer * wp_buf) {
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    wp_buf->size = 0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
    wp_buf->from = 0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    wp_buf->to = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <add_wp>:

void add_wp(struct waypoint_buffer * wp_buf, float x, float y) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	ed87 0a02 	vstr	s0, [r7, #8]
 8005584:	edc7 0a01 	vstr	s1, [r7, #4]
    if (wp_buf->size < MAX_WP) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b31      	cmp	r3, #49	; 0x31
 800558e:	dc1d      	bgt.n	80055cc <add_wp+0x54>
        struct waypoint wp = {x, y};
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	617b      	str	r3, [r7, #20]
        wp_buf->wp_buf[wp_buf->size] = wp;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	3304      	adds	r3, #4
 80055a4:	f107 0210 	add.w	r2, r7, #16
 80055a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055ac:	e883 0003 	stmia.w	r3, {r0, r1}
        wp_buf->size++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
        if(wp_buf->size == 2)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d107      	bne.n	80055d2 <add_wp+0x5a>
            wp_buf->to = 1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    } else {
        printf("Error: Waypoint buffer is full.\n");
    }
}
 80055ca:	e002      	b.n	80055d2 <add_wp+0x5a>
        printf("Error: Waypoint buffer is full.\n");
 80055cc:	4803      	ldr	r0, [pc, #12]	; (80055dc <add_wp+0x64>)
 80055ce:	f00a fb8f 	bl	800fcf0 <puts>
}
 80055d2:	bf00      	nop
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	080135c4 	.word	0x080135c4

080055e0 <to_next>:

void to_next(struct waypoint_buffer * wp_buf) {
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
    if (wp_buf->to < wp_buf->size - 1) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	429a      	cmp	r2, r3
 80055f6:	da0d      	bge.n	8005614 <to_next+0x34>
        wp_buf->from++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        wp_buf->to++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <clean>:

void clean(struct waypoint_buffer * wp_buf){
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
    wp_buf->from = 0;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    wp_buf->to = 1;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800567c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005648:	f7fb f824 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800564c:	480c      	ldr	r0, [pc, #48]	; (8005680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800564e:	490d      	ldr	r1, [pc, #52]	; (8005684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005654:	e002      	b.n	800565c <LoopCopyDataInit>

08005656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800565a:	3304      	adds	r3, #4

0800565c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800565c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800565e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005660:	d3f9      	bcc.n	8005656 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005664:	4c0a      	ldr	r4, [pc, #40]	; (8005690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005668:	e001      	b.n	800566e <LoopFillZerobss>

0800566a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800566a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800566c:	3204      	adds	r2, #4

0800566e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800566e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005670:	d3fb      	bcc.n	800566a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005672:	f009 fda1 	bl	800f1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005676:	f7fd fe65 	bl	8003344 <main>
  bx  lr
 800567a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800567c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005680:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005684:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8005688:	08013e28 	.word	0x08013e28
  ldr r2, =_sbss
 800568c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8005690:	24005414 	.word	0x24005414

08005694 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005694:	e7fe      	b.n	8005694 <ADC3_IRQHandler>
	...

08005698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800569e:	2003      	movs	r0, #3
 80056a0:	f000 f96e 	bl	8005980 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056a4:	f001 ff4c 	bl	8007540 <HAL_RCC_GetSysClockFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <HAL_Init+0x68>)
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	4913      	ldr	r1, [pc, #76]	; (8005704 <HAL_Init+0x6c>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <HAL_Init+0x68>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	4a0e      	ldr	r2, [pc, #56]	; (8005704 <HAL_Init+0x6c>)
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	4a0b      	ldr	r2, [pc, #44]	; (8005708 <HAL_Init+0x70>)
 80056da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <HAL_Init+0x74>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056e2:	200f      	movs	r0, #15
 80056e4:	f000 f814 	bl	8005710 <HAL_InitTick>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e002      	b.n	80056f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80056f2:	f7ff fbed 	bl	8004ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	58024400 	.word	0x58024400
 8005704:	08013648 	.word	0x08013648
 8005708:	24000004 	.word	0x24000004
 800570c:	24000000 	.word	0x24000000

08005710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_InitTick+0x60>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e021      	b.n	8005768 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <HAL_InitTick+0x64>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_InitTick+0x60>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	4619      	mov	r1, r3
 800572e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005732:	fbb3 f3f1 	udiv	r3, r3, r1
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f945 	bl	80059ca <HAL_SYSTICK_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e00e      	b.n	8005768 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b0f      	cmp	r3, #15
 800574e:	d80a      	bhi.n	8005766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005750:	2200      	movs	r2, #0
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	f000 f91d 	bl	8005996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800575c:	4a06      	ldr	r2, [pc, #24]	; (8005778 <HAL_InitTick+0x68>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e000      	b.n	8005768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	24000014 	.word	0x24000014
 8005774:	24000000 	.word	0x24000000
 8005778:	24000010 	.word	0x24000010

0800577c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_IncTick+0x20>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_IncTick+0x24>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4413      	add	r3, r2
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <HAL_IncTick+0x24>)
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	24000014 	.word	0x24000014
 80057a0:	240009f0 	.word	0x240009f0

080057a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return uwTick;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_GetTick+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	240009f0 	.word	0x240009f0

080057bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057c4:	f7ff ffee 	bl	80057a4 <HAL_GetTick>
 80057c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d005      	beq.n	80057e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <HAL_Delay+0x44>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057e2:	bf00      	nop
 80057e4:	f7ff ffde 	bl	80057a4 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d8f7      	bhi.n	80057e4 <HAL_Delay+0x28>
  {
  }
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	24000014 	.word	0x24000014

08005804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <HAL_GetREVID+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	0c1b      	lsrs	r3, r3, #16
}
 800580e:	4618      	mov	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	5c001000 	.word	0x5c001000

0800581c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005838:	4013      	ands	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	4313      	orrs	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00
 8005860:	05fa0000 	.word	0x05fa0000

08005864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <__NVIC_GetPriorityGrouping+0x18>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0307 	and.w	r3, r3, #7
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	; (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	; (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf28      	it	cs
 80058f2:	2304      	movcs	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d902      	bls.n	8005904 <NVIC_EncodePriority+0x30>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3b03      	subs	r3, #3
 8005902:	e000      	b.n	8005906 <NVIC_EncodePriority+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	401a      	ands	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800591c:	f04f 31ff 	mov.w	r1, #4294967295
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43d9      	mvns	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	4313      	orrs	r3, r2
         );
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800594c:	d301      	bcc.n	8005952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800594e:	2301      	movs	r3, #1
 8005950:	e00f      	b.n	8005972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005952:	4a0a      	ldr	r2, [pc, #40]	; (800597c <SysTick_Config+0x40>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595a:	210f      	movs	r1, #15
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	f7ff ff8e 	bl	8005880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <SysTick_Config+0x40>)
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596a:	4b04      	ldr	r3, [pc, #16]	; (800597c <SysTick_Config+0x40>)
 800596c:	2207      	movs	r2, #7
 800596e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000e010 	.word	0xe000e010

08005980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff47 	bl	800581c <__NVIC_SetPriorityGrouping>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059a4:	f7ff ff5e 	bl	8005864 <__NVIC_GetPriorityGrouping>
 80059a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff ff90 	bl	80058d4 <NVIC_EncodePriority>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff5f 	bl	8005880 <__NVIC_SetPriority>
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff ffb2 	bl	800593c <SysTick_Config>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b098      	sub	sp, #96	; 0x60
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80059ec:	4a84      	ldr	r2, [pc, #528]	; (8005c00 <HAL_FDCAN_Init+0x21c>)
 80059ee:	f107 030c 	add.w	r3, r7, #12
 80059f2:	4611      	mov	r1, r2
 80059f4:	224c      	movs	r2, #76	; 0x4c
 80059f6:	4618      	mov	r0, r3
 80059f8:	f009 fc05 	bl	800f206 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e1c6      	b.n	8005d94 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a7e      	ldr	r2, [pc, #504]	; (8005c04 <HAL_FDCAN_Init+0x220>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d106      	bne.n	8005a1e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc f8cc 	bl	8001bd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0210 	bic.w	r2, r2, #16
 8005a46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a48:	f7ff feac 	bl	80057a4 <HAL_GetTick>
 8005a4c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a4e:	e014      	b.n	8005a7a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a50:	f7ff fea8 	bl	80057a4 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b0a      	cmp	r3, #10
 8005a5c:	d90d      	bls.n	8005a7a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a64:	f043 0201 	orr.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2203      	movs	r2, #3
 8005a72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e18c      	b.n	8005d94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d0e3      	beq.n	8005a50 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a98:	f7ff fe84 	bl	80057a4 <HAL_GetTick>
 8005a9c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a9e:	e014      	b.n	8005aca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005aa0:	f7ff fe80 	bl	80057a4 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b0a      	cmp	r3, #10
 8005aac:	d90d      	bls.n	8005aca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab4:	f043 0201 	orr.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e164      	b.n	8005d94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0e3      	beq.n	8005aa0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0202 	orr.w	r2, r2, #2
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	7c1b      	ldrb	r3, [r3, #16]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d108      	bne.n	8005b02 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	619a      	str	r2, [r3, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b10:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7c5b      	ldrb	r3, [r3, #17]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d108      	bne.n	8005b2c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	e007      	b.n	8005b3c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	7c9b      	ldrb	r3, [r3, #18]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d108      	bne.n	8005b56 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	e007      	b.n	8005b66 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b64:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0210 	bic.w	r2, r2, #16
 8005b9a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d108      	bne.n	8005bb6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0204 	orr.w	r2, r2, #4
 8005bb2:	619a      	str	r2, [r3, #24]
 8005bb4:	e030      	b.n	8005c18 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02c      	beq.n	8005c18 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d020      	beq.n	8005c08 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bd4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0210 	orr.w	r2, r2, #16
 8005be4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d114      	bne.n	8005c18 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0220 	orr.w	r2, r2, #32
 8005bfc:	619a      	str	r2, [r3, #24]
 8005bfe:	e00b      	b.n	8005c18 <HAL_FDCAN_Init+0x234>
 8005c00:	080135e4 	.word	0x080135e4
 8005c04:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0220 	orr.w	r2, r2, #32
 8005c16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c30:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c4c:	d115      	bne.n	8005c7a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c5c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	3b01      	subs	r3, #1
 8005c64:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c76:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c78:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca0:	4413      	add	r3, r2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005cae:	f023 0107 	bic.w	r1, r3, #7
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	3360      	adds	r3, #96	; 0x60
 8005cba:	443b      	add	r3, r7
 8005cbc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cda:	f023 0107 	bic.w	r1, r3, #7
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3360      	adds	r3, #96	; 0x60
 8005ce6:	443b      	add	r3, r7
 8005ce8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d06:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	3360      	adds	r3, #96	; 0x60
 8005d12:	443b      	add	r3, r7
 8005d14:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d34:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	3360      	adds	r3, #96	; 0x60
 8005d40:	443b      	add	r3, r7
 8005d42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d46:	021a      	lsls	r2, r3, #8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a11      	ldr	r2, [pc, #68]	; (8005d9c <HAL_FDCAN_Init+0x3b8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d107      	bne.n	8005d6c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f022 0203 	bic.w	r2, r2, #3
 8005d6a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa1f 	bl	80061c8 <FDCAN_CalcultateRamBlockAddresses>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005d90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3760      	adds	r7, #96	; 0x60
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	4000a000 	.word	0x4000a000

08005da0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d111      	bne.n	8005dd8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e008      	b.n	8005dea <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dde:	f043 0204 	orr.w	r2, r3, #4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b08b      	sub	sp, #44	; 0x2c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e10:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005e12:	7efb      	ldrb	r3, [r7, #27]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	f040 814b 	bne.w	80060b0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d14d      	bne.n	8005ebc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e13e      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e12c      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e70:	0e1b      	lsrs	r3, r3, #24
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d10b      	bne.n	8005e92 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e82:	0fdb      	lsrs	r3, r3, #31
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e8c:	d101      	bne.n	8005e92 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eba:	e069      	b.n	8005f90 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b41      	cmp	r3, #65	; 0x41
 8005ec0:	d14d      	bne.n	8005f5e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0ed      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0db      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f12:	0e1b      	lsrs	r3, r3, #24
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d10b      	bne.n	8005f34 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f24:	0fdb      	lsrs	r3, r3, #31
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f2e:	d101      	bne.n	8005f34 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	e018      	b.n	8005f90 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d309      	bcc.n	8005f7c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0a2      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	0c9b      	lsrs	r3, r3, #18
 8005faa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e005      	b.n	8005fc0 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3304      	adds	r3, #4
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	0e1b      	lsrs	r3, r3, #24
 8006012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	0fda      	lsrs	r2, r3, #31
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	3304      	adds	r3, #4
 8006028:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	e00a      	b.n	800604a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	441a      	add	r2, r3
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	440b      	add	r3, r1
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	3301      	adds	r3, #1
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	461a      	mov	r2, r3
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	d3eb      	bcc.n	8006034 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d105      	bne.n	800606e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800606c:	e01e      	b.n	80060ac <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b41      	cmp	r3, #65	; 0x41
 8006072:	d105      	bne.n	8006080 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800607e:	e015      	b.n	80060ac <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b1f      	cmp	r3, #31
 8006084:	d808      	bhi.n	8006098 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2101      	movs	r1, #1
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	fa01 f202 	lsl.w	r2, r1, r2
 8006092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006096:	e009      	b.n	80060ac <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 021f 	and.w	r2, r3, #31
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2101      	movs	r1, #1
 80060a4:	fa01 f202 	lsl.w	r2, r1, r2
 80060a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e008      	b.n	80060c2 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b6:	f043 0208 	orr.w	r2, r3, #8
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	372c      	adds	r7, #44	; 0x2c
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	080137bc 	.word	0x080137bc

080060d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060e6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d002      	beq.n	80060f4 <HAL_FDCAN_ActivateNotification+0x20>
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d155      	bne.n	80061a0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	65da      	str	r2, [r3, #92]	; 0x5c
 8006112:	e014      	b.n	800613e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	429a      	cmp	r2, r3
 8006122:	d108      	bne.n	8006136 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0202 	orr.w	r2, r2, #2
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c
 8006134:	e003      	b.n	800613e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2203      	movs	r2, #3
 800613c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	430a      	orrs	r2, r1
 8006158:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	430a      	orrs	r2, r1
 8006176:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <HAL_FDCAN_ActivateNotification+0xec>)
 8006184:	4013      	ands	r3, r2
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	430b      	orrs	r3, r1
 800618c:	6553      	str	r3, [r2, #84]	; 0x54
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	0f9b      	lsrs	r3, r3, #30
 8006196:	490b      	ldr	r1, [pc, #44]	; (80061c4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006198:	4313      	orrs	r3, r2
 800619a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e008      	b.n	80061b2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061a6:	f043 0202 	orr.w	r2, r3, #2
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
  }
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	3fcfffff 	.word	0x3fcfffff
 80061c4:	4000a800 	.word	0x4000a800

080061c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80061de:	4ba7      	ldr	r3, [pc, #668]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	0091      	lsls	r1, r2, #2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	430b      	orrs	r3, r1
 80061ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	041a      	lsls	r2, r3, #16
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	4413      	add	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800621e:	4b97      	ldr	r3, [pc, #604]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006220:	4013      	ands	r3, r2
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0091      	lsls	r1, r2, #2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	430b      	orrs	r3, r1
 800622c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	041a      	lsls	r2, r3, #16
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006260:	4b86      	ldr	r3, [pc, #536]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006262:	4013      	ands	r3, r2
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0091      	lsls	r1, r2, #2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	430b      	orrs	r3, r1
 800626e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800627a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	041a      	lsls	r2, r3, #16
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062a8:	4b74      	ldr	r3, [pc, #464]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	0091      	lsls	r1, r2, #2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	430b      	orrs	r3, r1
 80062b6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ca:	041a      	lsls	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062f0:	4b62      	ldr	r3, [pc, #392]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	0091      	lsls	r1, r2, #2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800631c:	4b57      	ldr	r3, [pc, #348]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800631e:	4013      	ands	r3, r2
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	0091      	lsls	r1, r2, #2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	430b      	orrs	r3, r1
 800632a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006336:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	041a      	lsls	r2, r3, #16
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	4413      	add	r3, r2
 8006354:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	0091      	lsls	r1, r2, #2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	430b      	orrs	r3, r1
 800636c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006378:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006380:	041a      	lsls	r2, r3, #16
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006394:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	061a      	lsls	r2, r3, #24
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	4b34      	ldr	r3, [pc, #208]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80063ae:	4413      	add	r3, r2
 80063b0:	009a      	lsls	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	441a      	add	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006472:	4a04      	ldr	r2, [pc, #16]	; (8006484 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d915      	bls.n	80064a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006478:	e006      	b.n	8006488 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800647a:	bf00      	nop
 800647c:	ffff0003 	.word	0xffff0003
 8006480:	10002b00 	.word	0x10002b00
 8006484:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2203      	movs	r2, #3
 800649c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e010      	b.n	80064c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e005      	b.n	80064b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3304      	adds	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3f3      	bcc.n	80064ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop

080064d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064e2:	4b89      	ldr	r3, [pc, #548]	; (8006708 <HAL_GPIO_Init+0x234>)
 80064e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064e6:	e194      	b.n	8006812 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8186 	beq.w	800680c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d005      	beq.n	8006518 <HAL_GPIO_Init+0x44>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d130      	bne.n	800657a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	2203      	movs	r2, #3
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	4013      	ands	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4313      	orrs	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800654e:	2201      	movs	r2, #1
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0201 	and.w	r2, r3, #1
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4313      	orrs	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	2b03      	cmp	r3, #3
 8006584:	d017      	beq.n	80065b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d123      	bne.n	800660a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	08da      	lsrs	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3208      	adds	r2, #8
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	220f      	movs	r2, #15
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	08da      	lsrs	r2, r3, #3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3208      	adds	r2, #8
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2203      	movs	r2, #3
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0203 	and.w	r2, r3, #3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4313      	orrs	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80e0 	beq.w	800680c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800664c:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_GPIO_Init+0x238>)
 800664e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006652:	4a2e      	ldr	r2, [pc, #184]	; (800670c <HAL_GPIO_Init+0x238>)
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800665c:	4b2b      	ldr	r3, [pc, #172]	; (800670c <HAL_GPIO_Init+0x238>)
 800665e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800666a:	4a29      	ldr	r2, [pc, #164]	; (8006710 <HAL_GPIO_Init+0x23c>)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	089b      	lsrs	r3, r3, #2
 8006670:	3302      	adds	r3, #2
 8006672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	220f      	movs	r2, #15
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <HAL_GPIO_Init+0x240>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d052      	beq.n	800673c <HAL_GPIO_Init+0x268>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <HAL_GPIO_Init+0x244>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d031      	beq.n	8006702 <HAL_GPIO_Init+0x22e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1e      	ldr	r2, [pc, #120]	; (800671c <HAL_GPIO_Init+0x248>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d02b      	beq.n	80066fe <HAL_GPIO_Init+0x22a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <HAL_GPIO_Init+0x24c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d025      	beq.n	80066fa <HAL_GPIO_Init+0x226>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <HAL_GPIO_Init+0x250>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01f      	beq.n	80066f6 <HAL_GPIO_Init+0x222>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_GPIO_Init+0x254>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d019      	beq.n	80066f2 <HAL_GPIO_Init+0x21e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1a      	ldr	r2, [pc, #104]	; (800672c <HAL_GPIO_Init+0x258>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_GPIO_Init+0x21a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a19      	ldr	r2, [pc, #100]	; (8006730 <HAL_GPIO_Init+0x25c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00d      	beq.n	80066ea <HAL_GPIO_Init+0x216>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_GPIO_Init+0x260>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <HAL_GPIO_Init+0x212>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <HAL_GPIO_Init+0x264>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d101      	bne.n	80066e2 <HAL_GPIO_Init+0x20e>
 80066de:	2309      	movs	r3, #9
 80066e0:	e02d      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066e2:	230a      	movs	r3, #10
 80066e4:	e02b      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066e6:	2308      	movs	r3, #8
 80066e8:	e029      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066ea:	2307      	movs	r3, #7
 80066ec:	e027      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066ee:	2306      	movs	r3, #6
 80066f0:	e025      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066f2:	2305      	movs	r3, #5
 80066f4:	e023      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066f6:	2304      	movs	r3, #4
 80066f8:	e021      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066fa:	2303      	movs	r3, #3
 80066fc:	e01f      	b.n	800673e <HAL_GPIO_Init+0x26a>
 80066fe:	2302      	movs	r3, #2
 8006700:	e01d      	b.n	800673e <HAL_GPIO_Init+0x26a>
 8006702:	2301      	movs	r3, #1
 8006704:	e01b      	b.n	800673e <HAL_GPIO_Init+0x26a>
 8006706:	bf00      	nop
 8006708:	58000080 	.word	0x58000080
 800670c:	58024400 	.word	0x58024400
 8006710:	58000400 	.word	0x58000400
 8006714:	58020000 	.word	0x58020000
 8006718:	58020400 	.word	0x58020400
 800671c:	58020800 	.word	0x58020800
 8006720:	58020c00 	.word	0x58020c00
 8006724:	58021000 	.word	0x58021000
 8006728:	58021400 	.word	0x58021400
 800672c:	58021800 	.word	0x58021800
 8006730:	58021c00 	.word	0x58021c00
 8006734:	58022000 	.word	0x58022000
 8006738:	58022400 	.word	0x58022400
 800673c:	2300      	movs	r3, #0
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	f002 0203 	and.w	r2, r2, #3
 8006744:	0092      	lsls	r2, r2, #2
 8006746:	4093      	lsls	r3, r2
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4313      	orrs	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800674e:	4938      	ldr	r1, [pc, #224]	; (8006830 <HAL_GPIO_Init+0x35c>)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	089b      	lsrs	r3, r3, #2
 8006754:	3302      	adds	r3, #2
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	43db      	mvns	r3, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4013      	ands	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	43db      	mvns	r3, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4013      	ands	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	3301      	adds	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f ae63 	bne.w	80064e8 <HAL_GPIO_Init+0x14>
  }
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	3724      	adds	r7, #36	; 0x24
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	58000400 	.word	0x58000400

08006834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
 8006840:	4613      	mov	r3, r2
 8006842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006844:	787b      	ldrb	r3, [r7, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800684a:	887a      	ldrh	r2, [r7, #2]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006850:	e003      	b.n	800685a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006852:	887b      	ldrh	r3, [r7, #2]
 8006854:	041a      	lsls	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	619a      	str	r2, [r3, #24]
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006870:	4a08      	ldr	r2, [pc, #32]	; (8006894 <HAL_HSEM_FastTake+0x2c>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3320      	adds	r3, #32
 8006876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687a:	4a07      	ldr	r2, [pc, #28]	; (8006898 <HAL_HSEM_FastTake+0x30>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	58026400 	.word	0x58026400
 8006898:	80000300 	.word	0x80000300

0800689c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80068a6:	4906      	ldr	r1, [pc, #24]	; (80068c0 <HAL_HSEM_Release+0x24>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	58026400 	.word	0x58026400

080068c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80068cc:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d00a      	beq.n	80068ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d001      	beq.n	80068ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e040      	b.n	800696c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e03e      	b.n	800696c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80068f6:	491f      	ldr	r1, [pc, #124]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068fe:	f7fe ff51 	bl	80057a4 <HAL_GetTick>
 8006902:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006904:	e009      	b.n	800691a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006906:	f7fe ff4d 	bl	80057a4 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006914:	d901      	bls.n	800691a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e028      	b.n	800696c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800691a:	4b16      	ldr	r3, [pc, #88]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006926:	d1ee      	bne.n	8006906 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b1e      	cmp	r3, #30
 800692c:	d008      	beq.n	8006940 <HAL_PWREx_ConfigSupply+0x7c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b2e      	cmp	r3, #46	; 0x2e
 8006932:	d005      	beq.n	8006940 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b1d      	cmp	r3, #29
 8006938:	d002      	beq.n	8006940 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b2d      	cmp	r3, #45	; 0x2d
 800693e:	d114      	bne.n	800696a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006940:	f7fe ff30 	bl	80057a4 <HAL_GetTick>
 8006944:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006946:	e009      	b.n	800695c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006948:	f7fe ff2c 	bl	80057a4 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006956:	d901      	bls.n	800695c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_PWREx_ConfigSupply+0xb0>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006968:	d1ee      	bne.n	8006948 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	58024800 	.word	0x58024800

08006978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08c      	sub	sp, #48	; 0x30
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f000 bc1d 	b.w	80071c6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8087 	beq.w	8006aa8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800699a:	4b99      	ldr	r3, [pc, #612]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a4:	4b96      	ldr	r3, [pc, #600]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d007      	beq.n	80069c0 <HAL_RCC_OscConfig+0x48>
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2b18      	cmp	r3, #24
 80069b4:	d110      	bne.n	80069d8 <HAL_RCC_OscConfig+0x60>
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d10b      	bne.n	80069d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c0:	4b8f      	ldr	r3, [pc, #572]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06c      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x12e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d168      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e3f6      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e0:	d106      	bne.n	80069f0 <HAL_RCC_OscConfig+0x78>
 80069e2:	4b87      	ldr	r3, [pc, #540]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a86      	ldr	r2, [pc, #536]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e02e      	b.n	8006a4e <HAL_RCC_OscConfig+0xd6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10c      	bne.n	8006a12 <HAL_RCC_OscConfig+0x9a>
 80069f8:	4b81      	ldr	r3, [pc, #516]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a80      	ldr	r2, [pc, #512]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 80069fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	4b7e      	ldr	r3, [pc, #504]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7d      	ldr	r2, [pc, #500]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e01d      	b.n	8006a4e <HAL_RCC_OscConfig+0xd6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1a:	d10c      	bne.n	8006a36 <HAL_RCC_OscConfig+0xbe>
 8006a1c:	4b78      	ldr	r3, [pc, #480]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a77      	ldr	r2, [pc, #476]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b75      	ldr	r3, [pc, #468]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a74      	ldr	r2, [pc, #464]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e00b      	b.n	8006a4e <HAL_RCC_OscConfig+0xd6>
 8006a36:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a71      	ldr	r2, [pc, #452]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	4b6f      	ldr	r3, [pc, #444]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6e      	ldr	r2, [pc, #440]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d013      	beq.n	8006a7e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fe fea5 	bl	80057a4 <HAL_GetTick>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a5e:	f7fe fea1 	bl	80057a4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b64      	cmp	r3, #100	; 0x64
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e3aa      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a70:	4b63      	ldr	r3, [pc, #396]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0xe6>
 8006a7c:	e014      	b.n	8006aa8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fe fe91 	bl	80057a4 <HAL_GetTick>
 8006a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a86:	f7fe fe8d 	bl	80057a4 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b64      	cmp	r3, #100	; 0x64
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e396      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a98:	4b59      	ldr	r3, [pc, #356]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1f0      	bne.n	8006a86 <HAL_RCC_OscConfig+0x10e>
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80cb 	beq.w	8006c4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab6:	4b52      	ldr	r3, [pc, #328]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006abe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ac0:	4b4f      	ldr	r3, [pc, #316]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_RCC_OscConfig+0x164>
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b18      	cmp	r3, #24
 8006ad0:	d156      	bne.n	8006b80 <HAL_RCC_OscConfig+0x208>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d151      	bne.n	8006b80 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006adc:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_OscConfig+0x17c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e368      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006af4:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 0219 	bic.w	r2, r3, #25
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	493f      	ldr	r1, [pc, #252]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b06:	f7fe fe4d 	bl	80057a4 <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b0e:	f7fe fe49 	bl	80057a4 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e352      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b20:	4b37      	ldr	r3, [pc, #220]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2c:	f7fe fe6a 	bl	8005804 <HAL_GetREVID>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d817      	bhi.n	8006b6a <HAL_RCC_OscConfig+0x1f2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d108      	bne.n	8006b54 <HAL_RCC_OscConfig+0x1dc>
 8006b42:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b4a:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b52:	e07b      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b54:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	031b      	lsls	r3, r3, #12
 8006b62:	4927      	ldr	r1, [pc, #156]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b68:	e070      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6a:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	061b      	lsls	r3, r3, #24
 8006b78:	4921      	ldr	r1, [pc, #132]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b7e:	e065      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d048      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b88:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 0219 	bic.w	r2, r3, #25
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	491a      	ldr	r1, [pc, #104]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9a:	f7fe fe03 	bl	80057a4 <HAL_GetTick>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ba2:	f7fe fdff 	bl	80057a4 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e308      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc0:	f7fe fe20 	bl	8005804 <HAL_GetREVID>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d81a      	bhi.n	8006c04 <HAL_RCC_OscConfig+0x28c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d108      	bne.n	8006be8 <HAL_RCC_OscConfig+0x270>
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bde:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be4:	6053      	str	r3, [r2, #4]
 8006be6:	e031      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	4902      	ldr	r1, [pc, #8]	; (8006c00 <HAL_RCC_OscConfig+0x288>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]
 8006bfc:	e026      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
 8006bfe:	bf00      	nop
 8006c00:	58024400 	.word	0x58024400
 8006c04:	4b9a      	ldr	r3, [pc, #616]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	4997      	ldr	r1, [pc, #604]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
 8006c18:	e018      	b.n	8006c4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c1a:	4b95      	ldr	r3, [pc, #596]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a94      	ldr	r2, [pc, #592]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fe fdbd 	bl	80057a4 <HAL_GetTick>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c2e:	f7fe fdb9 	bl	80057a4 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e2c2      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c40:	4b8b      	ldr	r3, [pc, #556]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f0      	bne.n	8006c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a9 	beq.w	8006dac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c5a:	4b85      	ldr	r3, [pc, #532]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c64:	4b82      	ldr	r3, [pc, #520]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d007      	beq.n	8006c80 <HAL_RCC_OscConfig+0x308>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b18      	cmp	r3, #24
 8006c74:	d13a      	bne.n	8006cec <HAL_RCC_OscConfig+0x374>
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d135      	bne.n	8006cec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c80:	4b7b      	ldr	r3, [pc, #492]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_RCC_OscConfig+0x320>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e296      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c98:	f7fe fdb4 	bl	8005804 <HAL_GetREVID>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d817      	bhi.n	8006cd6 <HAL_RCC_OscConfig+0x35e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d108      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x348>
 8006cae:	4b70      	ldr	r3, [pc, #448]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cb6:	4a6e      	ldr	r2, [pc, #440]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cbe:	e075      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cc0:	4b6b      	ldr	r3, [pc, #428]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	069b      	lsls	r3, r3, #26
 8006cce:	4968      	ldr	r1, [pc, #416]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cd4:	e06a      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cd6:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	4962      	ldr	r1, [pc, #392]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cea:	e05f      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d042      	beq.n	8006d7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cf4:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5d      	ldr	r2, [pc, #372]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fe fd50 	bl	80057a4 <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d08:	f7fe fd4c 	bl	80057a4 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e255      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d1a:	4b55      	ldr	r3, [pc, #340]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d26:	f7fe fd6d 	bl	8005804 <HAL_GetREVID>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d817      	bhi.n	8006d64 <HAL_RCC_OscConfig+0x3ec>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d108      	bne.n	8006d4e <HAL_RCC_OscConfig+0x3d6>
 8006d3c:	4b4c      	ldr	r3, [pc, #304]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d44:	4a4a      	ldr	r2, [pc, #296]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4a:	6053      	str	r3, [r2, #4]
 8006d4c:	e02e      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
 8006d4e:	4b48      	ldr	r3, [pc, #288]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	069b      	lsls	r3, r3, #26
 8006d5c:	4944      	ldr	r1, [pc, #272]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	604b      	str	r3, [r1, #4]
 8006d62:	e023      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
 8006d64:	4b42      	ldr	r3, [pc, #264]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	493f      	ldr	r1, [pc, #252]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60cb      	str	r3, [r1, #12]
 8006d78:	e018      	b.n	8006dac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d7a:	4b3d      	ldr	r3, [pc, #244]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d86:	f7fe fd0d 	bl	80057a4 <HAL_GetTick>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d8e:	f7fe fd09 	bl	80057a4 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e212      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006da0:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d036      	beq.n	8006e26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d019      	beq.n	8006df4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dcc:	f7fe fcea 	bl	80057a4 <HAL_GetTick>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd4:	f7fe fce6 	bl	80057a4 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e1ef      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x45c>
 8006df2:	e018      	b.n	8006e26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df4:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df8:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e00:	f7fe fcd0 	bl	80057a4 <HAL_GetTick>
 8006e04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e08:	f7fe fccc 	bl	80057a4 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e1d5      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d039      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d01c      	beq.n	8006e74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e46:	f7fe fcad 	bl	80057a4 <HAL_GetTick>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e4e:	f7fe fca9 	bl	80057a4 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e1b2      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e60:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <HAL_RCC_OscConfig+0x4f8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x4d6>
 8006e6c:	e01b      	b.n	8006ea6 <HAL_RCC_OscConfig+0x52e>
 8006e6e:	bf00      	nop
 8006e70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e74:	4b9b      	ldr	r3, [pc, #620]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a9a      	ldr	r2, [pc, #616]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e80:	f7fe fc90 	bl	80057a4 <HAL_GetTick>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e88:	f7fe fc8c 	bl	80057a4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e195      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e9a:	4b92      	ldr	r3, [pc, #584]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8081 	beq.w	8006fb6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006eb4:	4b8c      	ldr	r3, [pc, #560]	; (80070e8 <HAL_RCC_OscConfig+0x770>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a8b      	ldr	r2, [pc, #556]	; (80070e8 <HAL_RCC_OscConfig+0x770>)
 8006eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec0:	f7fe fc70 	bl	80057a4 <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ec8:	f7fe fc6c 	bl	80057a4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b64      	cmp	r3, #100	; 0x64
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e175      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eda:	4b83      	ldr	r3, [pc, #524]	; (80070e8 <HAL_RCC_OscConfig+0x770>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x584>
 8006eee:	4b7d      	ldr	r3, [pc, #500]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a7c      	ldr	r2, [pc, #496]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8006efa:	e02d      	b.n	8006f58 <HAL_RCC_OscConfig+0x5e0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_OscConfig+0x5a6>
 8006f04:	4b77      	ldr	r3, [pc, #476]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a76      	ldr	r2, [pc, #472]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f10:	4b74      	ldr	r3, [pc, #464]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a73      	ldr	r2, [pc, #460]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f16:	f023 0304 	bic.w	r3, r3, #4
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1c:	e01c      	b.n	8006f58 <HAL_RCC_OscConfig+0x5e0>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x5c8>
 8006f26:	4b6f      	ldr	r3, [pc, #444]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a6e      	ldr	r2, [pc, #440]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70
 8006f32:	4b6c      	ldr	r3, [pc, #432]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4a6b      	ldr	r2, [pc, #428]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3e:	e00b      	b.n	8006f58 <HAL_RCC_OscConfig+0x5e0>
 8006f40:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	4a67      	ldr	r2, [pc, #412]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4c:	4b65      	ldr	r3, [pc, #404]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	4a64      	ldr	r2, [pc, #400]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f52:	f023 0304 	bic.w	r3, r3, #4
 8006f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fe fc20 	bl	80057a4 <HAL_GetTick>
 8006f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f68:	f7fe fc1c 	bl	80057a4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e123      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f7e:	4b59      	ldr	r3, [pc, #356]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0ee      	beq.n	8006f68 <HAL_RCC_OscConfig+0x5f0>
 8006f8a:	e014      	b.n	8006fb6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fe fc0a 	bl	80057a4 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f94:	f7fe fc06 	bl	80057a4 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e10d      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006faa:	4b4e      	ldr	r3, [pc, #312]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ee      	bne.n	8006f94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8102 	beq.w	80071c4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fc0:	4b48      	ldr	r3, [pc, #288]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc8:	2b18      	cmp	r3, #24
 8006fca:	f000 80bd 	beq.w	8007148 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f040 809e 	bne.w	8007114 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd8:	4b42      	ldr	r3, [pc, #264]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a41      	ldr	r2, [pc, #260]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8006fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fe fbde 	bl	80057a4 <HAL_GetTick>
 8006fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fe fbda 	bl	80057a4 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e0e3      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ffe:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800700a:	4b36      	ldr	r3, [pc, #216]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 800700c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800700e:	4b37      	ldr	r3, [pc, #220]	; (80070ec <HAL_RCC_OscConfig+0x774>)
 8007010:	4013      	ands	r3, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800701a:	0112      	lsls	r2, r2, #4
 800701c:	430a      	orrs	r2, r1
 800701e:	4931      	ldr	r1, [pc, #196]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	628b      	str	r3, [r1, #40]	; 0x28
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	3b01      	subs	r3, #1
 800702a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	3b01      	subs	r3, #1
 8007034:	025b      	lsls	r3, r3, #9
 8007036:	b29b      	uxth	r3, r3
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	3b01      	subs	r3, #1
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	3b01      	subs	r3, #1
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007054:	4923      	ldr	r1, [pc, #140]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007066:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706a:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <HAL_RCC_OscConfig+0x778>)
 800706c:	4013      	ands	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007072:	00d2      	lsls	r2, r2, #3
 8007074:	491b      	ldr	r1, [pc, #108]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f023 020c 	bic.w	r2, r3, #12
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	4917      	ldr	r1, [pc, #92]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 8007088:	4313      	orrs	r3, r2
 800708a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f023 0202 	bic.w	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	4912      	ldr	r1, [pc, #72]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800709e:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	4a0d      	ldr	r2, [pc, #52]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4a07      	ldr	r2, [pc, #28]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <HAL_RCC_OscConfig+0x76c>)
 80070d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070da:	f7fe fb63 	bl	80057a4 <HAL_GetTick>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070e0:	e011      	b.n	8007106 <HAL_RCC_OscConfig+0x78e>
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	58024800 	.word	0x58024800
 80070ec:	fffffc0c 	.word	0xfffffc0c
 80070f0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fe fb56 	bl	80057a4 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e05f      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007106:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f0      	beq.n	80070f4 <HAL_RCC_OscConfig+0x77c>
 8007112:	e057      	b.n	80071c4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007114:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2d      	ldr	r2, [pc, #180]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 800711a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fe fb40 	bl	80057a4 <HAL_GetTick>
 8007124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007128:	f7fe fb3c 	bl	80057a4 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e045      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800713a:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x7b0>
 8007146:	e03d      	b.n	80071c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800714e:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <HAL_RCC_OscConfig+0x858>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b01      	cmp	r3, #1
 800715a:	d031      	beq.n	80071c0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f003 0203 	and.w	r2, r3, #3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007166:	429a      	cmp	r2, r3
 8007168:	d12a      	bne.n	80071c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	091b      	lsrs	r3, r3, #4
 800716e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007176:	429a      	cmp	r2, r3
 8007178:	d122      	bne.n	80071c0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007186:	429a      	cmp	r2, r3
 8007188:	d11a      	bne.n	80071c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007198:	429a      	cmp	r2, r3
 800719a:	d111      	bne.n	80071c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d108      	bne.n	80071c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	0e1b      	lsrs	r3, r3, #24
 80071b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	; 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	58024400 	.word	0x58024400

080071d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e19c      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071e8:	4b8a      	ldr	r3, [pc, #552]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d910      	bls.n	8007218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f6:	4b87      	ldr	r3, [pc, #540]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 020f 	bic.w	r2, r3, #15
 80071fe:	4985      	ldr	r1, [pc, #532]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	4313      	orrs	r3, r2
 8007204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007206:	4b83      	ldr	r3, [pc, #524]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e184      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	4b7b      	ldr	r3, [pc, #492]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007230:	429a      	cmp	r2, r3
 8007232:	d908      	bls.n	8007246 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007234:	4b78      	ldr	r3, [pc, #480]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	4975      	ldr	r1, [pc, #468]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007242:	4313      	orrs	r3, r2
 8007244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d010      	beq.n	8007274 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	4b70      	ldr	r3, [pc, #448]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800725e:	429a      	cmp	r2, r3
 8007260:	d908      	bls.n	8007274 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007262:	4b6d      	ldr	r3, [pc, #436]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	496a      	ldr	r1, [pc, #424]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007270:	4313      	orrs	r3, r2
 8007272:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	d010      	beq.n	80072a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	4b64      	ldr	r3, [pc, #400]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800728c:	429a      	cmp	r2, r3
 800728e:	d908      	bls.n	80072a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007290:	4b61      	ldr	r3, [pc, #388]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	495e      	ldr	r1, [pc, #376]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d010      	beq.n	80072d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69da      	ldr	r2, [r3, #28]
 80072b2:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d908      	bls.n	80072d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072be:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4953      	ldr	r1, [pc, #332]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d010      	beq.n	80072fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	4b4d      	ldr	r3, [pc, #308]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d908      	bls.n	80072fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ec:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f023 020f 	bic.w	r2, r3, #15
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	4947      	ldr	r1, [pc, #284]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d055      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800730a:	4b43      	ldr	r3, [pc, #268]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	4940      	ldr	r1, [pc, #256]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007318:	4313      	orrs	r3, r2
 800731a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d107      	bne.n	8007334 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007324:	4b3c      	ldr	r3, [pc, #240]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d121      	bne.n	8007374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0f6      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d107      	bne.n	800734c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800733c:	4b36      	ldr	r3, [pc, #216]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d115      	bne.n	8007374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0ea      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d107      	bne.n	8007364 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e0de      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007364:	4b2c      	ldr	r3, [pc, #176]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0d6      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007374:	4b28      	ldr	r3, [pc, #160]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f023 0207 	bic.w	r2, r3, #7
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4925      	ldr	r1, [pc, #148]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 8007382:	4313      	orrs	r3, r2
 8007384:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007386:	f7fe fa0d 	bl	80057a4 <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800738e:	f7fe fa09 	bl	80057a4 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	; 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0be      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d1eb      	bne.n	800738e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d208      	bcs.n	80073e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f023 020f 	bic.w	r2, r3, #15
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	490e      	ldr	r1, [pc, #56]	; (8007418 <HAL_RCC_ClockConfig+0x244>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d214      	bcs.n	800741c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 020f 	bic.w	r2, r3, #15
 80073fa:	4906      	ldr	r1, [pc, #24]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	4313      	orrs	r3, r2
 8007400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <HAL_RCC_ClockConfig+0x240>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d005      	beq.n	800741c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e086      	b.n	8007522 <HAL_RCC_ClockConfig+0x34e>
 8007414:	52002000 	.word	0x52002000
 8007418:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	4b3f      	ldr	r3, [pc, #252]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007434:	429a      	cmp	r2, r3
 8007436:	d208      	bcs.n	800744a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007438:	4b3c      	ldr	r3, [pc, #240]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	4939      	ldr	r1, [pc, #228]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 8007446:	4313      	orrs	r3, r2
 8007448:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d010      	beq.n	8007478 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	4b34      	ldr	r3, [pc, #208]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007462:	429a      	cmp	r2, r3
 8007464:	d208      	bcs.n	8007478 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007466:	4b31      	ldr	r3, [pc, #196]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	492e      	ldr	r1, [pc, #184]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 8007474:	4313      	orrs	r3, r2
 8007476:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	4b28      	ldr	r3, [pc, #160]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007490:	429a      	cmp	r2, r3
 8007492:	d208      	bcs.n	80074a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007494:	4b25      	ldr	r3, [pc, #148]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	4922      	ldr	r1, [pc, #136]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d010      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69da      	ldr	r2, [r3, #28]
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074be:	429a      	cmp	r2, r3
 80074c0:	d208      	bcs.n	80074d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074c2:	4b1a      	ldr	r3, [pc, #104]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	4917      	ldr	r1, [pc, #92]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074d4:	f000 f834 	bl	8007540 <HAL_RCC_GetSysClockFreq>
 80074d8:	4602      	mov	r2, r0
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	4912      	ldr	r1, [pc, #72]	; (8007530 <HAL_RCC_ClockConfig+0x35c>)
 80074e6:	5ccb      	ldrb	r3, [r1, r3]
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <HAL_RCC_ClockConfig+0x358>)
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <HAL_RCC_ClockConfig+0x35c>)
 80074fc:	5cd3      	ldrb	r3, [r2, r3]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	4a0a      	ldr	r2, [pc, #40]	; (8007534 <HAL_RCC_ClockConfig+0x360>)
 800750a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800750c:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <HAL_RCC_ClockConfig+0x364>)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <HAL_RCC_ClockConfig+0x368>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe f8fa 	bl	8005710 <HAL_InitTick>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	08013648 	.word	0x08013648
 8007534:	24000004 	.word	0x24000004
 8007538:	24000000 	.word	0x24000000
 800753c:	24000010 	.word	0x24000010

08007540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007546:	4bb3      	ldr	r3, [pc, #716]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800754e:	2b18      	cmp	r3, #24
 8007550:	f200 8155 	bhi.w	80077fe <HAL_RCC_GetSysClockFreq+0x2be>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	080075c1 	.word	0x080075c1
 8007560:	080077ff 	.word	0x080077ff
 8007564:	080077ff 	.word	0x080077ff
 8007568:	080077ff 	.word	0x080077ff
 800756c:	080077ff 	.word	0x080077ff
 8007570:	080077ff 	.word	0x080077ff
 8007574:	080077ff 	.word	0x080077ff
 8007578:	080077ff 	.word	0x080077ff
 800757c:	080075e7 	.word	0x080075e7
 8007580:	080077ff 	.word	0x080077ff
 8007584:	080077ff 	.word	0x080077ff
 8007588:	080077ff 	.word	0x080077ff
 800758c:	080077ff 	.word	0x080077ff
 8007590:	080077ff 	.word	0x080077ff
 8007594:	080077ff 	.word	0x080077ff
 8007598:	080077ff 	.word	0x080077ff
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080077ff 	.word	0x080077ff
 80075a4:	080077ff 	.word	0x080077ff
 80075a8:	080077ff 	.word	0x080077ff
 80075ac:	080077ff 	.word	0x080077ff
 80075b0:	080077ff 	.word	0x080077ff
 80075b4:	080077ff 	.word	0x080077ff
 80075b8:	080077ff 	.word	0x080077ff
 80075bc:	080075f3 	.word	0x080075f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c0:	4b94      	ldr	r3, [pc, #592]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075cc:	4b91      	ldr	r3, [pc, #580]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	08db      	lsrs	r3, r3, #3
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	4a90      	ldr	r2, [pc, #576]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
 80075dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80075de:	e111      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075e0:	4b8d      	ldr	r3, [pc, #564]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075e2:	61bb      	str	r3, [r7, #24]
    break;
 80075e4:	e10e      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80075e6:	4b8d      	ldr	r3, [pc, #564]	; (800781c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075e8:	61bb      	str	r3, [r7, #24]
    break;
 80075ea:	e10b      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80075ec:	4b8c      	ldr	r3, [pc, #560]	; (8007820 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075ee:	61bb      	str	r3, [r7, #24]
    break;
 80075f0:	e108      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075f2:	4b88      	ldr	r3, [pc, #544]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80075fc:	4b85      	ldr	r3, [pc, #532]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	091b      	lsrs	r3, r3, #4
 8007602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007606:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007608:	4b82      	ldr	r3, [pc, #520]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007612:	4b80      	ldr	r3, [pc, #512]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007616:	08db      	lsrs	r3, r3, #3
 8007618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 80e1 	beq.w	80077f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b02      	cmp	r3, #2
 800763a:	f000 8083 	beq.w	8007744 <HAL_RCC_GetSysClockFreq+0x204>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b02      	cmp	r3, #2
 8007642:	f200 80a1 	bhi.w	8007788 <HAL_RCC_GetSysClockFreq+0x248>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x114>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d056      	beq.n	8007700 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007652:	e099      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007654:	4b6f      	ldr	r3, [pc, #444]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d02d      	beq.n	80076bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007660:	4b6c      	ldr	r3, [pc, #432]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	08db      	lsrs	r3, r3, #3
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	4a6b      	ldr	r2, [pc, #428]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b62      	ldr	r3, [pc, #392]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a02 	vldr	s12, [r7, #8]
 800769e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80076ba:	e087      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e8>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b51      	ldr	r3, [pc, #324]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	e065      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800782c <HAL_RCC_GetSysClockFreq+0x2ec>
 800770e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007712:	4b40      	ldr	r3, [pc, #256]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a02 	vldr	s12, [r7, #8]
 8007726:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007742:	e043      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007830 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007756:	4b2f      	ldr	r3, [pc, #188]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007766:	ed97 6a02 	vldr	s12, [r7, #8]
 800776a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800776e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007786:	e021      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007792:	eddf 6a26 	vldr	s13, [pc, #152]	; 800782c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779a:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	0a5b      	lsrs	r3, r3, #9
 80077d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d6:	3301      	adds	r3, #1
 80077d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f0:	ee17 3a90 	vmov	r3, s15
 80077f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80077f6:	e005      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]
    break;
 80077fc:	e002      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007800:	61bb      	str	r3, [r7, #24]
    break;
 8007802:	bf00      	nop
  }

  return sysclockfreq;
 8007804:	69bb      	ldr	r3, [r7, #24]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3724      	adds	r7, #36	; 0x24
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
 8007818:	03d09000 	.word	0x03d09000
 800781c:	003d0900 	.word	0x003d0900
 8007820:	007a1200 	.word	0x007a1200
 8007824:	46000000 	.word	0x46000000
 8007828:	4c742400 	.word	0x4c742400
 800782c:	4a742400 	.word	0x4a742400
 8007830:	4af42400 	.word	0x4af42400

08007834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800783a:	f7ff fe81 	bl	8007540 <HAL_RCC_GetSysClockFreq>
 800783e:	4602      	mov	r2, r0
 8007840:	4b10      	ldr	r3, [pc, #64]	; (8007884 <HAL_RCC_GetHCLKFreq+0x50>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	490f      	ldr	r1, [pc, #60]	; (8007888 <HAL_RCC_GetHCLKFreq+0x54>)
 800784c:	5ccb      	ldrb	r3, [r1, r3]
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_RCC_GetHCLKFreq+0x50>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	4a09      	ldr	r2, [pc, #36]	; (8007888 <HAL_RCC_GetHCLKFreq+0x54>)
 8007862:	5cd3      	ldrb	r3, [r2, r3]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	fa22 f303 	lsr.w	r3, r2, r3
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <HAL_RCC_GetHCLKFreq+0x58>)
 8007870:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <HAL_RCC_GetHCLKFreq+0x58>)
 800787a:	681b      	ldr	r3, [r3, #0]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	58024400 	.word	0x58024400
 8007888:	08013648 	.word	0x08013648
 800788c:	24000004 	.word	0x24000004
 8007890:	24000000 	.word	0x24000000

08007894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007898:	f7ff ffcc 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 800789c:	4602      	mov	r2, r0
 800789e:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	4904      	ldr	r1, [pc, #16]	; (80078bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80078aa:	5ccb      	ldrb	r3, [r1, r3]
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	58024400 	.word	0x58024400
 80078bc:	08013648 	.word	0x08013648

080078c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078c4:	f7ff ffb6 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 80078c8:	4602      	mov	r2, r0
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078d6:	5ccb      	ldrb	r3, [r1, r3]
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	58024400 	.word	0x58024400
 80078e8:	08013648 	.word	0x08013648

080078ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078f8:	2300      	movs	r3, #0
 80078fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d03f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800790c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007910:	d02a      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007916:	d824      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800791c:	d018      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800791e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007922:	d81e      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792c:	d007      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800792e:	e018      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007930:	4ba3      	ldr	r3, [pc, #652]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4aa2      	ldr	r2, [pc, #648]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800793c:	e015      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	2102      	movs	r1, #2
 8007944:	4618      	mov	r0, r3
 8007946:	f001 f9d5 	bl	8008cf4 <RCCEx_PLL2_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800794e:	e00c      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fa7e 	bl	8008e58 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007960:	e003      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
      break;
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007970:	4b93      	ldr	r3, [pc, #588]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797c:	4990      	ldr	r1, [pc, #576]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800797e:	4313      	orrs	r3, r2
 8007980:	650b      	str	r3, [r1, #80]	; 0x50
 8007982:	e001      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d03d      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	2b04      	cmp	r3, #4
 800799a:	d826      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079c7 	.word	0x080079c7
 80079ac:	080079d9 	.word	0x080079d9
 80079b0:	080079f1 	.word	0x080079f1
 80079b4:	080079f1 	.word	0x080079f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b8:	4b81      	ldr	r3, [pc, #516]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	4a80      	ldr	r2, [pc, #512]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c4:	e015      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 f991 	bl	8008cf4 <RCCEx_PLL2_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079d6:	e00c      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3324      	adds	r3, #36	; 0x24
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 fa3a 	bl	8008e58 <RCCEx_PLL3_Config>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079e8:	e003      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
      break;
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80079f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079f8:	4b71      	ldr	r3, [pc, #452]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fc:	f023 0207 	bic.w	r2, r3, #7
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a04:	496e      	ldr	r1, [pc, #440]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	650b      	str	r3, [r1, #80]	; 0x50
 8007a0a:	e001      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d042      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a24:	d02b      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d825      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2e:	d028      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a30:	2bc0      	cmp	r3, #192	; 0xc0
 8007a32:	d821      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d016      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d81d      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d007      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007a44:	e018      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a46:	4b5e      	ldr	r3, [pc, #376]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a5d      	ldr	r2, [pc, #372]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a52:	e017      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 f94a 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a64:	e00e      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f001 f9f3 	bl	8008e58 <RCCEx_PLL3_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a76:	e005      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7c:	e002      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a8a:	4b4d      	ldr	r3, [pc, #308]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a96:	494a      	ldr	r1, [pc, #296]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	650b      	str	r3, [r1, #80]	; 0x50
 8007a9c:	e001      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d049      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab8:	d030      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007abe:	d82a      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac4:	d02c      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ac6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007aca:	d824      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad0:	d018      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad6:	d81e      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae0:	d007      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007ae2:	e018      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a35      	ldr	r2, [pc, #212]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007af0:	e017      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f8fb 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b02:	e00e      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f9a4 	bl	8008e58 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b14:	e005      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b28:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b36:	4922      	ldr	r1, [pc, #136]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8007b3c:	e001      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d04b      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b58:	d030      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5e:	d82a      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b64:	d02e      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007b66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b6a:	d824      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b70:	d018      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b76:	d81e      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b80:	d007      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b82:	e018      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a0d      	ldr	r2, [pc, #52]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b90:	e019      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3304      	adds	r3, #4
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f8ab 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ba2:	e010      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3324      	adds	r3, #36	; 0x24
 8007ba8:	2100      	movs	r1, #0
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f954 	bl	8008e58 <RCCEx_PLL3_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb4:	e007      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bba:	e004      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007bc0:	58024400 	.word	0x58024400
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bcc:	4b99      	ldr	r3, [pc, #612]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bda:	4996      	ldr	r1, [pc, #600]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	658b      	str	r3, [r1, #88]	; 0x58
 8007be0:	e001      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d032      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf6:	2b30      	cmp	r3, #48	; 0x30
 8007bf8:	d01c      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007bfa:	2b30      	cmp	r3, #48	; 0x30
 8007bfc:	d817      	bhi.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	d00c      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d813      	bhi.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d10f      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0e:	4b89      	ldr	r3, [pc, #548]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a88      	ldr	r2, [pc, #544]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c1a:	e00e      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	2102      	movs	r1, #2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 f866 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c2c:	e005      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	75fb      	strb	r3, [r7, #23]
      break;
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c40:	4b7c      	ldr	r3, [pc, #496]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4c:	4979      	ldr	r1, [pc, #484]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c52:	e001      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d047      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c6c:	d030      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c72:	d82a      	bhi.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c78:	d02c      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c7e:	d824      	bhi.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c84:	d018      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8a:	d81e      	bhi.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c94:	d007      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007c96:	e018      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4b66      	ldr	r3, [pc, #408]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4a65      	ldr	r2, [pc, #404]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ca4:	e017      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 f821 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cb6:	e00e      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3324      	adds	r3, #36	; 0x24
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f8ca 	bl	8008e58 <RCCEx_PLL3_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cc8:	e005      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cce:	e002      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cdc:	4b55      	ldr	r3, [pc, #340]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce8:	4952      	ldr	r1, [pc, #328]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	650b      	str	r3, [r1, #80]	; 0x50
 8007cee:	e001      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d049      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d08:	d02e      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d0e:	d828      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d14:	d02a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007d16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d1a:	d822      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d20:	d026      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d26:	d81c      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2c:	d010      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d32:	d816      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01d      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d3c:	d111      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 ffd5 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d4e:	e012      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3324      	adds	r3, #36	; 0x24
 8007d54:	2101      	movs	r1, #1
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f87e 	bl	8008e58 <RCCEx_PLL3_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d60:	e009      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]
      break;
 8007d66:	e006      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e004      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d88:	492a      	ldr	r1, [pc, #168]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d8e:	e001      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d04d      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007daa:	d02e      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db0:	d828      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db6:	d02a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d822      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dc2:	d026      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007dc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dc8:	d81c      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dce:	d010      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd4:	d816      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01d      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dde:	d111      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	2101      	movs	r1, #1
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 ff84 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007df0:	e012      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3324      	adds	r3, #36	; 0x24
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 f82d 	bl	8008e58 <RCCEx_PLL3_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e02:	e009      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
      break;
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e004      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e2c:	4901      	ldr	r1, [pc, #4]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	658b      	str	r3, [r1, #88]	; 0x58
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d02f      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e50:	d00e      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e56:	d814      	bhi.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d015      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e60:	d10f      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e62:	4baf      	ldr	r3, [pc, #700]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4aae      	ldr	r2, [pc, #696]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e6e:	e00c      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 ff3c 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
      break;
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e90:	4ba3      	ldr	r3, [pc, #652]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9c:	49a0      	ldr	r1, [pc, #640]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8007ea2:	e001      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d032      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d81b      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007efb 	.word	0x08007efb
 8007ec8:	08007ed5 	.word	0x08007ed5
 8007ecc:	08007ee3 	.word	0x08007ee3
 8007ed0:	08007efb 	.word	0x08007efb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4b92      	ldr	r3, [pc, #584]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a91      	ldr	r2, [pc, #580]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ee0:	e00c      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 ff03 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	e000      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f02:	4b87      	ldr	r3, [pc, #540]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	f023 0203 	bic.w	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	4984      	ldr	r1, [pc, #528]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f14:	e001      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8086 	beq.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f28:	4b7e      	ldr	r3, [pc, #504]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a7d      	ldr	r2, [pc, #500]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f34:	f7fd fc36 	bl	80057a4 <HAL_GetTick>
 8007f38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f3a:	e009      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f3c:	f7fd fc32 	bl	80057a4 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b64      	cmp	r3, #100	; 0x64
 8007f48:	d902      	bls.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	75fb      	strb	r3, [r7, #23]
        break;
 8007f4e:	e005      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f50:	4b74      	ldr	r3, [pc, #464]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ef      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d166      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f62:	4b6f      	ldr	r3, [pc, #444]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f6c:	4053      	eors	r3, r2
 8007f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d013      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f76:	4b6a      	ldr	r3, [pc, #424]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f80:	4b67      	ldr	r3, [pc, #412]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	4a66      	ldr	r2, [pc, #408]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f8c:	4b64      	ldr	r3, [pc, #400]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	4a63      	ldr	r2, [pc, #396]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f98:	4a61      	ldr	r2, [pc, #388]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d115      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007faa:	f7fd fbfb 	bl	80057a4 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fb0:	e00b      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb2:	f7fd fbf7 	bl	80057a4 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d902      	bls.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8007fc8:	e005      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fca:	4b55      	ldr	r3, [pc, #340]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ed      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d126      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fea:	d10d      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007fec:	4b4c      	ldr	r3, [pc, #304]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ffa:	0919      	lsrs	r1, r3, #4
 8007ffc:	4b4a      	ldr	r3, [pc, #296]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007ffe:	400b      	ands	r3, r1
 8008000:	4947      	ldr	r1, [pc, #284]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008002:	4313      	orrs	r3, r2
 8008004:	610b      	str	r3, [r1, #16]
 8008006:	e005      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008008:	4b45      	ldr	r3, [pc, #276]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4a44      	ldr	r2, [pc, #272]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800800e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008012:	6113      	str	r3, [r2, #16]
 8008014:	4b42      	ldr	r3, [pc, #264]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800801e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008022:	493f      	ldr	r1, [pc, #252]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008024:	4313      	orrs	r3, r2
 8008026:	670b      	str	r3, [r1, #112]	; 0x70
 8008028:	e004      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	75bb      	strb	r3, [r7, #22]
 800802e:	e001      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8085 	beq.w	800814c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008046:	2b28      	cmp	r3, #40	; 0x28
 8008048:	d866      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	0800812d 	.word	0x0800812d
 8008054:	08008119 	.word	0x08008119
 8008058:	08008119 	.word	0x08008119
 800805c:	08008119 	.word	0x08008119
 8008060:	08008119 	.word	0x08008119
 8008064:	08008119 	.word	0x08008119
 8008068:	08008119 	.word	0x08008119
 800806c:	08008119 	.word	0x08008119
 8008070:	080080f5 	.word	0x080080f5
 8008074:	08008119 	.word	0x08008119
 8008078:	08008119 	.word	0x08008119
 800807c:	08008119 	.word	0x08008119
 8008080:	08008119 	.word	0x08008119
 8008084:	08008119 	.word	0x08008119
 8008088:	08008119 	.word	0x08008119
 800808c:	08008119 	.word	0x08008119
 8008090:	08008107 	.word	0x08008107
 8008094:	08008119 	.word	0x08008119
 8008098:	08008119 	.word	0x08008119
 800809c:	08008119 	.word	0x08008119
 80080a0:	08008119 	.word	0x08008119
 80080a4:	08008119 	.word	0x08008119
 80080a8:	08008119 	.word	0x08008119
 80080ac:	08008119 	.word	0x08008119
 80080b0:	0800812d 	.word	0x0800812d
 80080b4:	08008119 	.word	0x08008119
 80080b8:	08008119 	.word	0x08008119
 80080bc:	08008119 	.word	0x08008119
 80080c0:	08008119 	.word	0x08008119
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008119 	.word	0x08008119
 80080cc:	08008119 	.word	0x08008119
 80080d0:	0800812d 	.word	0x0800812d
 80080d4:	08008119 	.word	0x08008119
 80080d8:	08008119 	.word	0x08008119
 80080dc:	08008119 	.word	0x08008119
 80080e0:	08008119 	.word	0x08008119
 80080e4:	08008119 	.word	0x08008119
 80080e8:	08008119 	.word	0x08008119
 80080ec:	08008119 	.word	0x08008119
 80080f0:	0800812d 	.word	0x0800812d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	2101      	movs	r1, #1
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fdfa 	bl	8008cf4 <RCCEx_PLL2_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008104:	e013      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3324      	adds	r3, #36	; 0x24
 800810a:	2101      	movs	r1, #1
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fea3 	bl	8008e58 <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008116:	e00a      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
      break;
 800811c:	e007      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800811e:	bf00      	nop
 8008120:	58024400 	.word	0x58024400
 8008124:	58024800 	.word	0x58024800
 8008128:	00ffffcf 	.word	0x00ffffcf
      break;
 800812c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d109      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008134:	4b96      	ldr	r3, [pc, #600]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008138:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008140:	4993      	ldr	r1, [pc, #588]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008142:	4313      	orrs	r3, r2
 8008144:	654b      	str	r3, [r1, #84]	; 0x54
 8008146:	e001      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d038      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815c:	2b05      	cmp	r3, #5
 800815e:	d821      	bhi.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	080081ab 	.word	0x080081ab
 800816c:	08008181 	.word	0x08008181
 8008170:	08008193 	.word	0x08008193
 8008174:	080081ab 	.word	0x080081ab
 8008178:	080081ab 	.word	0x080081ab
 800817c:	080081ab 	.word	0x080081ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	2101      	movs	r1, #1
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fdb4 	bl	8008cf4 <RCCEx_PLL2_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008190:	e00c      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3324      	adds	r3, #36	; 0x24
 8008196:	2101      	movs	r1, #1
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fe5d 	bl	8008e58 <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081a2:	e003      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80081aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081b2:	4b77      	ldr	r3, [pc, #476]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b6:	f023 0207 	bic.w	r2, r3, #7
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081be:	4974      	ldr	r1, [pc, #464]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	654b      	str	r3, [r1, #84]	; 0x54
 80081c4:	e001      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d03a      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081dc:	2b05      	cmp	r3, #5
 80081de:	d821      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	0800822b 	.word	0x0800822b
 80081ec:	08008201 	.word	0x08008201
 80081f0:	08008213 	.word	0x08008213
 80081f4:	0800822b 	.word	0x0800822b
 80081f8:	0800822b 	.word	0x0800822b
 80081fc:	0800822b 	.word	0x0800822b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	2101      	movs	r1, #1
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fd74 	bl	8008cf4 <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008210:	e00c      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3324      	adds	r3, #36	; 0x24
 8008216:	2101      	movs	r1, #1
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fe1d 	bl	8008e58 <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008222:	e003      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800822a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008232:	4b57      	ldr	r3, [pc, #348]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	f023 0207 	bic.w	r2, r3, #7
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008240:	4953      	ldr	r1, [pc, #332]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008242:	4313      	orrs	r3, r2
 8008244:	658b      	str	r3, [r1, #88]	; 0x58
 8008246:	e001      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d04b      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008262:	d02e      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008268:	d828      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800826a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826e:	d02a      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008274:	d822      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800827a:	d026      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800827c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008280:	d81c      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008286:	d010      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828c:	d816      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01d      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008296:	d111      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fd28 	bl	8008cf4 <RCCEx_PLL2_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082a8:	e012      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3324      	adds	r3, #36	; 0x24
 80082ae:	2102      	movs	r1, #2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fdd1 	bl	8008e58 <RCCEx_PLL3_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082ba:	e009      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]
      break;
 80082c0:	e006      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082c2:	bf00      	nop
 80082c4:	e004      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10a      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082d6:	4b2e      	ldr	r3, [pc, #184]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e4:	492a      	ldr	r1, [pc, #168]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	654b      	str	r3, [r1, #84]	; 0x54
 80082ea:	e001      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d04d      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008302:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008306:	d02e      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008308:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800830c:	d828      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	d02a      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008318:	d822      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800831a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800831e:	d026      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008324:	d81c      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d010      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800832c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008330:	d816      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01d      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d111      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3304      	adds	r3, #4
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fcd6 	bl	8008cf4 <RCCEx_PLL2_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800834c:	e012      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3324      	adds	r3, #36	; 0x24
 8008352:	2102      	movs	r1, #2
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fd7f 	bl	8008e58 <RCCEx_PLL3_Config>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800835e:	e009      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]
      break;
 8008364:	e006      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008366:	bf00      	nop
 8008368:	e004      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10c      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008388:	4901      	ldr	r1, [pc, #4]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800838a:	4313      	orrs	r3, r2
 800838c:	658b      	str	r3, [r1, #88]	; 0x58
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d04b      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083ae:	d02e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80083b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083b4:	d828      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ba:	d02a      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80083bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c0:	d822      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083c6:	d026      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80083c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083cc:	d81c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d2:	d010      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80083d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d8:	d816      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01d      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80083de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e2:	d111      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fc82 	bl	8008cf4 <RCCEx_PLL2_Config>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80083f4:	e012      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3324      	adds	r3, #36	; 0x24
 80083fa:	2102      	movs	r1, #2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fd2b 	bl	8008e58 <RCCEx_PLL3_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008406:	e009      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	75fb      	strb	r3, [r7, #23]
      break;
 800840c:	e006      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800840e:	bf00      	nop
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800841a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10a      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008422:	4b9d      	ldr	r3, [pc, #628]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008430:	4999      	ldr	r1, [pc, #612]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008432:	4313      	orrs	r3, r2
 8008434:	658b      	str	r3, [r1, #88]	; 0x58
 8008436:	e001      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01a      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008452:	d10a      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	2102      	movs	r1, #2
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fcfc 	bl	8008e58 <RCCEx_PLL3_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800846a:	4b8b      	ldr	r3, [pc, #556]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008478:	4987      	ldr	r1, [pc, #540]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800847a:	4313      	orrs	r3, r2
 800847c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0310 	and.w	r3, r3, #16
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008494:	d10a      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3324      	adds	r3, #36	; 0x24
 800849a:	2102      	movs	r1, #2
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fcdb 	bl	8008e58 <RCCEx_PLL3_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084ac:	4b7a      	ldr	r3, [pc, #488]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ba:	4977      	ldr	r1, [pc, #476]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d034      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d6:	d01d      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80084d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084dc:	d817      	bhi.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80084e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e6:	d009      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80084e8:	e011      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fbff 	bl	8008cf4 <RCCEx_PLL2_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80084fa:	e00c      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3324      	adds	r3, #36	; 0x24
 8008500:	2102      	movs	r1, #2
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fca8 	bl	8008e58 <RCCEx_PLL3_Config>
 8008508:	4603      	mov	r3, r0
 800850a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	75fb      	strb	r3, [r7, #23]
      break;
 8008512:	e000      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800851c:	4b5e      	ldr	r3, [pc, #376]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800852a:	495b      	ldr	r1, [pc, #364]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800852c:	4313      	orrs	r3, r2
 800852e:	658b      	str	r3, [r1, #88]	; 0x58
 8008530:	e001      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d033      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800854c:	d01c      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800854e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008552:	d816      	bhi.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008558:	d003      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800855a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800855e:	d007      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008560:	e00f      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008562:	4b4d      	ldr	r3, [pc, #308]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	4a4c      	ldr	r2, [pc, #304]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800856e:	e00c      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3324      	adds	r3, #36	; 0x24
 8008574:	2101      	movs	r1, #1
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fc6e 	bl	8008e58 <RCCEx_PLL3_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008580:	e003      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
      break;
 8008586:	e000      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008590:	4b41      	ldr	r3, [pc, #260]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859e:	493e      	ldr	r1, [pc, #248]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	654b      	str	r3, [r1, #84]	; 0x54
 80085a4:	e001      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d029      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80085be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c2:	d007      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80085c4:	e00f      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c6:	4b34      	ldr	r3, [pc, #208]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	4a33      	ldr	r2, [pc, #204]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085d2:	e00b      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	2102      	movs	r1, #2
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fb8a 	bl	8008cf4 <RCCEx_PLL2_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085e4:	e002      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085f2:	4b29      	ldr	r3, [pc, #164]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	4926      	ldr	r1, [pc, #152]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008600:	4313      	orrs	r3, r2
 8008602:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008604:	e001      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3324      	adds	r3, #36	; 0x24
 800861a:	2102      	movs	r1, #2
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fc1b 	bl	8008e58 <RCCEx_PLL3_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d033      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008640:	d017      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008646:	d811      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800864c:	d013      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800864e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008652:	d80b      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865c:	d106      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800865e:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800866a:	e007      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
      break;
 8008670:	e004      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008672:	bf00      	nop
 8008674:	e002      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008676:	bf00      	nop
 8008678:	e000      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800867a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10c      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800868e:	4902      	ldr	r1, [pc, #8]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008690:	4313      	orrs	r3, r2
 8008692:	654b      	str	r3, [r1, #84]	; 0x54
 8008694:	e004      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008696:	bf00      	nop
 8008698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80086ac:	4b31      	ldr	r3, [pc, #196]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	492e      	ldr	r1, [pc, #184]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086d8:	4926      	ldr	r1, [pc, #152]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086ea:	4b22      	ldr	r3, [pc, #136]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086f6:	491f      	ldr	r1, [pc, #124]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00d      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008708:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	4a19      	ldr	r2, [pc, #100]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800870e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008712:	6113      	str	r3, [r2, #16]
 8008714:	4b17      	ldr	r3, [pc, #92]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800871e:	4915      	ldr	r1, [pc, #84]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008720:	4313      	orrs	r3, r2
 8008722:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	da08      	bge.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800872c:	4b11      	ldr	r3, [pc, #68]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	490e      	ldr	r1, [pc, #56]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800873a:	4313      	orrs	r3, r2
 800873c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800874c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008758:	4906      	ldr	r1, [pc, #24]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800875a:	4313      	orrs	r3, r2
 800875c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	e000      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	58024400 	.word	0x58024400

08008778 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800877c:	f7ff f85a 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 8008780:	4602      	mov	r2, r0
 8008782:	4b06      	ldr	r3, [pc, #24]	; (800879c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800878e:	5ccb      	ldrb	r3, [r1, r3]
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008798:	4618      	mov	r0, r3
 800879a:	bd80      	pop	{r7, pc}
 800879c:	58024400 	.word	0x58024400
 80087a0:	08013648 	.word	0x08013648

080087a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b089      	sub	sp, #36	; 0x24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087ac:	4ba1      	ldr	r3, [pc, #644]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087b6:	4b9f      	ldr	r3, [pc, #636]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	0b1b      	lsrs	r3, r3, #12
 80087bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087c2:	4b9c      	ldr	r3, [pc, #624]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80087ce:	4b99      	ldr	r3, [pc, #612]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	08db      	lsrs	r3, r3, #3
 80087d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 8111 	beq.w	8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	f000 8083 	beq.w	8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	f200 80a1 	bhi.w	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d056      	beq.n	80088bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800880e:	e099      	b.n	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008810:	4b88      	ldr	r3, [pc, #544]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d02d      	beq.n	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800881c:	4b85      	ldr	r3, [pc, #532]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	08db      	lsrs	r3, r3, #3
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	4a84      	ldr	r2, [pc, #528]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
 800882c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008846:	4b7b      	ldr	r3, [pc, #492]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008856:	ed97 6a03 	vldr	s12, [r7, #12]
 800885a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800885e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008872:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008876:	e087      	b.n	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008882:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888a:	4b6a      	ldr	r3, [pc, #424]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889a:	ed97 6a03 	vldr	s12, [r7, #12]
 800889e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ba:	e065      	b.n	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ce:	4b59      	ldr	r3, [pc, #356]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088de:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088fe:	e043      	b.n	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800890e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008912:	4b48      	ldr	r3, [pc, #288]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008922:	ed97 6a03 	vldr	s12, [r7, #12]
 8008926:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800892a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008942:	e021      	b.n	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008956:	4b37      	ldr	r3, [pc, #220]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008966:	ed97 6a03 	vldr	s12, [r7, #12]
 800896a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800896e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008986:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008988:	4b2a      	ldr	r3, [pc, #168]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	0a5b      	lsrs	r3, r3, #9
 800898e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800899e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ae:	ee17 2a90 	vmov	r2, s15
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80089b6:	4b1f      	ldr	r3, [pc, #124]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	0c1b      	lsrs	r3, r3, #16
 80089bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089dc:	ee17 2a90 	vmov	r2, s15
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80089e4:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	0e1b      	lsrs	r3, r3, #24
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a0a:	ee17 2a90 	vmov	r2, s15
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a12:	e008      	b.n	8008a26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	609a      	str	r2, [r3, #8]
}
 8008a26:	bf00      	nop
 8008a28:	3724      	adds	r7, #36	; 0x24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	58024400 	.word	0x58024400
 8008a38:	03d09000 	.word	0x03d09000
 8008a3c:	46000000 	.word	0x46000000
 8008a40:	4c742400 	.word	0x4c742400
 8008a44:	4a742400 	.word	0x4a742400
 8008a48:	4af42400 	.word	0x4af42400

08008a4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b089      	sub	sp, #36	; 0x24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a54:	4ba1      	ldr	r3, [pc, #644]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008a5e:	4b9f      	ldr	r3, [pc, #636]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a6a:	4b9c      	ldr	r3, [pc, #624]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008a76:	4b99      	ldr	r3, [pc, #612]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	08db      	lsrs	r3, r3, #3
 8008a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	fb02 f303 	mul.w	r3, r2, r3
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8111 	beq.w	8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	f000 8083 	beq.w	8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f200 80a1 	bhi.w	8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d056      	beq.n	8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ab6:	e099      	b.n	8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab8:	4b88      	ldr	r3, [pc, #544]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d02d      	beq.n	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ac4:	4b85      	ldr	r3, [pc, #532]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	4a84      	ldr	r2, [pc, #528]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	ee07 3a90 	vmov	s15, r3
 8008adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b7b      	ldr	r3, [pc, #492]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b1e:	e087      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	4b6a      	ldr	r3, [pc, #424]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b62:	e065      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b76:	4b59      	ldr	r3, [pc, #356]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ba6:	e043      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bba:	4b48      	ldr	r3, [pc, #288]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bea:	e021      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfe:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c30:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	0a5b      	lsrs	r3, r3, #9
 8008c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c56:	ee17 2a90 	vmov	r2, s15
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	0c1b      	lsrs	r3, r3, #16
 8008c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c84:	ee17 2a90 	vmov	r2, s15
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008c8c:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	0e1b      	lsrs	r3, r3, #24
 8008c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb2:	ee17 2a90 	vmov	r2, s15
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cba:	e008      	b.n	8008cce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	609a      	str	r2, [r3, #8]
}
 8008cce:	bf00      	nop
 8008cd0:	3724      	adds	r7, #36	; 0x24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	46000000 	.word	0x46000000
 8008ce8:	4c742400 	.word	0x4c742400
 8008cec:	4a742400 	.word	0x4a742400
 8008cf0:	4af42400 	.word	0x4af42400

08008cf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d02:	4b53      	ldr	r3, [pc, #332]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d101      	bne.n	8008d12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e099      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d12:	4b4f      	ldr	r3, [pc, #316]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a4e      	ldr	r2, [pc, #312]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7fc fd41 	bl	80057a4 <HAL_GetTick>
 8008d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d24:	e008      	b.n	8008d38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d26:	f7fc fd3d 	bl	80057a4 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e086      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d38:	4b45      	ldr	r3, [pc, #276]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d44:	4b42      	ldr	r3, [pc, #264]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	031b      	lsls	r3, r3, #12
 8008d52:	493f      	ldr	r1, [pc, #252]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	628b      	str	r3, [r1, #40]	; 0x28
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	025b      	lsls	r3, r3, #9
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	061b      	lsls	r3, r3, #24
 8008d84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d88:	4931      	ldr	r1, [pc, #196]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d8e:	4b30      	ldr	r3, [pc, #192]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	492d      	ldr	r1, [pc, #180]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008da0:	4b2b      	ldr	r3, [pc, #172]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	f023 0220 	bic.w	r2, r3, #32
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	4928      	ldr	r1, [pc, #160]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008db2:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	4a26      	ldr	r2, [pc, #152]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	f023 0310 	bic.w	r3, r3, #16
 8008dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <RCCEx_PLL2_Config+0x160>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	69d2      	ldr	r2, [r2, #28]
 8008dca:	00d2      	lsls	r2, r2, #3
 8008dcc:	4920      	ldr	r1, [pc, #128]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dd2:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	f043 0310 	orr.w	r3, r3, #16
 8008ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008df0:	e00f      	b.n	8008e12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d106      	bne.n	8008e06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	4a14      	ldr	r2, [pc, #80]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e04:	e005      	b.n	8008e12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	4a11      	ldr	r2, [pc, #68]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1e:	f7fc fcc1 	bl	80057a4 <HAL_GetTick>
 8008e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e24:	e008      	b.n	8008e38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e26:	f7fc fcbd 	bl	80057a4 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e006      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f0      	beq.n	8008e26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	58024400 	.word	0x58024400
 8008e54:	ffff0007 	.word	0xffff0007

08008e58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e66:	4b53      	ldr	r3, [pc, #332]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d101      	bne.n	8008e76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e099      	b.n	8008faa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e76:	4b4f      	ldr	r3, [pc, #316]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a4e      	ldr	r2, [pc, #312]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e82:	f7fc fc8f 	bl	80057a4 <HAL_GetTick>
 8008e86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e88:	e008      	b.n	8008e9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e8a:	f7fc fc8b 	bl	80057a4 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e086      	b.n	8008faa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e9c:	4b45      	ldr	r3, [pc, #276]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1f0      	bne.n	8008e8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	051b      	lsls	r3, r3, #20
 8008eb6:	493f      	ldr	r1, [pc, #252]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	628b      	str	r3, [r1, #40]	; 0x28
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	025b      	lsls	r3, r3, #9
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	061b      	lsls	r3, r3, #24
 8008ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008eec:	4931      	ldr	r1, [pc, #196]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ef2:	4b30      	ldr	r3, [pc, #192]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	492d      	ldr	r1, [pc, #180]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f04:	4b2b      	ldr	r3, [pc, #172]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	4928      	ldr	r1, [pc, #160]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f16:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	4a26      	ldr	r2, [pc, #152]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <RCCEx_PLL3_Config+0x160>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	69d2      	ldr	r2, [r2, #28]
 8008f2e:	00d2      	lsls	r2, r2, #3
 8008f30:	4920      	ldr	r1, [pc, #128]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f36:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f54:	e00f      	b.n	8008f76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d106      	bne.n	8008f6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f5c:	4b15      	ldr	r3, [pc, #84]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4a14      	ldr	r2, [pc, #80]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f68:	e005      	b.n	8008f76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f6a:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	4a11      	ldr	r2, [pc, #68]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a0e      	ldr	r2, [pc, #56]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f82:	f7fc fc0f 	bl	80057a4 <HAL_GetTick>
 8008f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f88:	e008      	b.n	8008f9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f8a:	f7fc fc0b 	bl	80057a4 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e006      	b.n	8008faa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	ffff0007 	.word	0xffff0007

08008fbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e0f1      	b.n	80091b2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a78      	ldr	r2, [pc, #480]	; (80091bc <HAL_SPI_Init+0x200>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00f      	beq.n	8008ffe <HAL_SPI_Init+0x42>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a77      	ldr	r2, [pc, #476]	; (80091c0 <HAL_SPI_Init+0x204>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00a      	beq.n	8008ffe <HAL_SPI_Init+0x42>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a75      	ldr	r2, [pc, #468]	; (80091c4 <HAL_SPI_Init+0x208>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d005      	beq.n	8008ffe <HAL_SPI_Init+0x42>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b0f      	cmp	r3, #15
 8008ff8:	d901      	bls.n	8008ffe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e0d9      	b.n	80091b2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 ff66 	bl	8009ed0 <SPI_GetPacketSize>
 8009004:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a6c      	ldr	r2, [pc, #432]	; (80091bc <HAL_SPI_Init+0x200>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00c      	beq.n	800902a <HAL_SPI_Init+0x6e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a6a      	ldr	r2, [pc, #424]	; (80091c0 <HAL_SPI_Init+0x204>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d007      	beq.n	800902a <HAL_SPI_Init+0x6e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a69      	ldr	r2, [pc, #420]	; (80091c4 <HAL_SPI_Init+0x208>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d002      	beq.n	800902a <HAL_SPI_Init+0x6e>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b08      	cmp	r3, #8
 8009028:	d811      	bhi.n	800904e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800902e:	4a63      	ldr	r2, [pc, #396]	; (80091bc <HAL_SPI_Init+0x200>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d009      	beq.n	8009048 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a61      	ldr	r2, [pc, #388]	; (80091c0 <HAL_SPI_Init+0x204>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d004      	beq.n	8009048 <HAL_SPI_Init+0x8c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a60      	ldr	r2, [pc, #384]	; (80091c4 <HAL_SPI_Init+0x208>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d104      	bne.n	8009052 <HAL_SPI_Init+0x96>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b10      	cmp	r3, #16
 800904c:	d901      	bls.n	8009052 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e0af      	b.n	80091b2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fb fae6 	bl	8004638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800908e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009098:	d119      	bne.n	80090ce <HAL_SPI_Init+0x112>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a2:	d103      	bne.n	80090ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10c      	bne.n	80090ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80090b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090bc:	d107      	bne.n	80090ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	431a      	orrs	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e0:	ea42 0103 	orr.w	r1, r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	431a      	orrs	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	431a      	orrs	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	431a      	orrs	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	431a      	orrs	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912e:	ea42 0103 	orr.w	r1, r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d113      	bne.n	800916e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009158:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800916c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40013000 	.word	0x40013000
 80091c0:	40003800 	.word	0x40003800
 80091c4:	40003c00 	.word	0x40003c00

080091c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3320      	adds	r3, #32
 80091de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_SPI_Transmit+0x2a>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e1d7      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091fa:	f7fc fad3 	bl	80057a4 <HAL_GetTick>
 80091fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d007      	beq.n	800921c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800920c:	2302      	movs	r3, #2
 800920e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009218:	7efb      	ldrb	r3, [r7, #27]
 800921a:	e1c2      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <HAL_SPI_Transmit+0x60>
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d107      	bne.n	8009238 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009234:	7efb      	ldrb	r3, [r7, #27]
 8009236:	e1b4      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2203      	movs	r2, #3
 800923c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	88fa      	ldrh	r2, [r7, #6]
 8009252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	88fa      	ldrh	r2, [r7, #6]
 800925a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009288:	d107      	bne.n	800929a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009298:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	4b96      	ldr	r3, [pc, #600]	; (80094fc <HAL_SPI_Transmit+0x334>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	88f9      	ldrh	r1, [r7, #6]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	430b      	orrs	r3, r1
 80092ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0201 	orr.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c6:	d107      	bne.n	80092d8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	2b0f      	cmp	r3, #15
 80092de:	d947      	bls.n	8009370 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092e0:	e03f      	b.n	8009362 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d114      	bne.n	800931a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009318:	e023      	b.n	8009362 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800931a:	f7fc fa43 	bl	80057a4 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d803      	bhi.n	8009332 <HAL_SPI_Transmit+0x16a>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d102      	bne.n	8009338 <HAL_SPI_Transmit+0x170>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d114      	bne.n	8009362 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fcfb 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e11f      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1b9      	bne.n	80092e2 <HAL_SPI_Transmit+0x11a>
 800936e:	e0f2      	b.n	8009556 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b07      	cmp	r3, #7
 8009376:	f240 80e7 	bls.w	8009548 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800937a:	e05d      	b.n	8009438 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d132      	bne.n	80093f0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009390:	b29b      	uxth	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	d918      	bls.n	80093c8 <HAL_SPI_Transmit+0x200>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d014      	beq.n	80093c8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6812      	ldr	r2, [r2, #0]
 80093a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b02      	subs	r3, #2
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093c6:	e037      	b.n	8009438 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093cc:	881a      	ldrh	r2, [r3, #0]
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d6:	1c9a      	adds	r2, r3, #2
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093ee:	e023      	b.n	8009438 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093f0:	f7fc f9d8 	bl	80057a4 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d803      	bhi.n	8009408 <HAL_SPI_Transmit+0x240>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d102      	bne.n	800940e <HAL_SPI_Transmit+0x246>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d114      	bne.n	8009438 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fc90 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e0b4      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d19b      	bne.n	800937c <HAL_SPI_Transmit+0x1b4>
 8009444:	e087      	b.n	8009556 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d155      	bne.n	8009500 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800945a:	b29b      	uxth	r3, r3
 800945c:	2b03      	cmp	r3, #3
 800945e:	d918      	bls.n	8009492 <HAL_SPI_Transmit+0x2ca>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d914      	bls.n	8009492 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6812      	ldr	r2, [r2, #0]
 8009472:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b04      	subs	r3, #4
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009490:	e05a      	b.n	8009548 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b01      	cmp	r3, #1
 800949c:	d917      	bls.n	80094ce <HAL_SPI_Transmit+0x306>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d013      	beq.n	80094ce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094aa:	881a      	ldrh	r2, [r3, #0]
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b4:	1c9a      	adds	r2, r3, #2
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	3b02      	subs	r3, #2
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094cc:	e03c      	b.n	8009548 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3320      	adds	r3, #32
 80094d8:	7812      	ldrb	r2, [r2, #0]
 80094da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094f8:	e026      	b.n	8009548 <HAL_SPI_Transmit+0x380>
 80094fa:	bf00      	nop
 80094fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009500:	f7fc f950 	bl	80057a4 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d803      	bhi.n	8009518 <HAL_SPI_Transmit+0x350>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d102      	bne.n	800951e <HAL_SPI_Transmit+0x356>
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d114      	bne.n	8009548 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fc08 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e02c      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800954e:	b29b      	uxth	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	f47f af78 	bne.w	8009446 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2200      	movs	r2, #0
 800955e:	2108      	movs	r1, #8
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fc87 	bl	8009e74 <SPI_WaitOnFlagUntilTimeout>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009572:	f043 0220 	orr.w	r2, r3, #32
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 fbd9 	bl	8009d34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80095a0:	7efb      	ldrb	r3, [r7, #27]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop

080095ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	; 0x28
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3330      	adds	r3, #48	; 0x30
 80095c6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095d0:	d112      	bne.n	80095f8 <HAL_SPI_Receive+0x4c>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10e      	bne.n	80095f8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2204      	movs	r2, #4
 80095de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095e2:	88fa      	ldrh	r2, [r7, #6]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f978 	bl	80098e4 <HAL_SPI_TransmitReceive>
 80095f4:	4603      	mov	r3, r0
 80095f6:	e16f      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_SPI_Receive+0x5a>
 8009602:	2302      	movs	r3, #2
 8009604:	e168      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960e:	f7fc f8c9 	bl	80057a4 <HAL_GetTick>
 8009612:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	d007      	beq.n	8009630 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8009620:	2302      	movs	r3, #2
 8009622:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800962c:	7ffb      	ldrb	r3, [r7, #31]
 800962e:	e153      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <HAL_SPI_Receive+0x90>
 8009636:	88fb      	ldrh	r3, [r7, #6]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d107      	bne.n	800964c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009648:	7ffb      	ldrb	r3, [r7, #31]
 800964a:	e145      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2204      	movs	r2, #4
 8009650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	88fa      	ldrh	r2, [r7, #6]
 8009666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800969c:	d107      	bne.n	80096ae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	4b8a      	ldr	r3, [pc, #552]	; (80098e0 <HAL_SPI_Receive+0x334>)
 80096b6:	4013      	ands	r3, r2
 80096b8:	88f9      	ldrh	r1, [r7, #6]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	6812      	ldr	r2, [r2, #0]
 80096be:	430b      	orrs	r3, r1
 80096c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0201 	orr.w	r2, r2, #1
 80096d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096da:	d107      	bne.n	80096ec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	2b0f      	cmp	r3, #15
 80096f2:	d948      	bls.n	8009786 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80096f4:	e040      	b.n	8009778 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695a      	ldr	r2, [r3, #20]
 80096fc:	f248 0308 	movw	r3, #32776	; 0x8008
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d014      	beq.n	8009730 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800970e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009710:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29a      	uxth	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800972e:	e023      	b.n	8009778 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009730:	f7fc f838 	bl	80057a4 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d803      	bhi.n	8009748 <HAL_SPI_Receive+0x19c>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d102      	bne.n	800974e <HAL_SPI_Receive+0x1a2>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d114      	bne.n	8009778 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 faf0 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e0af      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1b8      	bne.n	80096f6 <HAL_SPI_Receive+0x14a>
 8009784:	e095      	b.n	80098b2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b07      	cmp	r3, #7
 800978c:	f240 808b 	bls.w	80098a6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009790:	e03f      	b.n	8009812 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b01      	cmp	r3, #1
 800979e:	d114      	bne.n	80097ca <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	8812      	ldrh	r2, [r2, #0]
 80097a8:	b292      	uxth	r2, r2
 80097aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b0:	1c9a      	adds	r2, r3, #2
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80097c8:	e023      	b.n	8009812 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097ca:	f7fb ffeb 	bl	80057a4 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d803      	bhi.n	80097e2 <HAL_SPI_Receive+0x236>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e0:	d102      	bne.n	80097e8 <HAL_SPI_Receive+0x23c>
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d114      	bne.n	8009812 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 faa3 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e062      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009818:	b29b      	uxth	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1b9      	bne.n	8009792 <HAL_SPI_Receive+0x1e6>
 800981e:	e048      	b.n	80098b2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b01      	cmp	r3, #1
 800982c:	d117      	bne.n	800985e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800985c:	e023      	b.n	80098a6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800985e:	f7fb ffa1 	bl	80057a4 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d803      	bhi.n	8009876 <HAL_SPI_Receive+0x2ca>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009874:	d102      	bne.n	800987c <HAL_SPI_Receive+0x2d0>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d114      	bne.n	80098a6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 fa59 	bl	8009d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e018      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1b6      	bne.n	8009820 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fa3e 	bl	8009d34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80098d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	ffff0000 	.word	0xffff0000

080098e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	; 0x38
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3320      	adds	r3, #32
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3330      	adds	r3, #48	; 0x30
 8009906:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_SPI_TransmitReceive+0x32>
 8009912:	2302      	movs	r3, #2
 8009914:	e209      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800991e:	f7fb ff41 	bl	80057a4 <HAL_GetTick>
 8009922:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009924:	887b      	ldrh	r3, [r7, #2]
 8009926:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009928:	887b      	ldrh	r3, [r7, #2]
 800992a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009932:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800993a:	7efb      	ldrb	r3, [r7, #27]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d014      	beq.n	800996a <HAL_SPI_TransmitReceive+0x86>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009946:	d106      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009950:	7efb      	ldrb	r3, [r7, #27]
 8009952:	2b04      	cmp	r3, #4
 8009954:	d009      	beq.n	800996a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8009956:	2302      	movs	r3, #2
 8009958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009964:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009968:	e1df      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_SPI_TransmitReceive+0x98>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <HAL_SPI_TransmitReceive+0x98>
 8009976:	887b      	ldrh	r3, [r7, #2]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800998a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800998e:	e1cc      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b04      	cmp	r3, #4
 800999a:	d003      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2205      	movs	r2, #5
 80099a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	887a      	ldrh	r2, [r7, #2]
 80099b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	887a      	ldrh	r2, [r7, #2]
 80099be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	887a      	ldrh	r2, [r7, #2]
 80099cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	887a      	ldrh	r2, [r7, #2]
 80099d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	4b82      	ldr	r3, [pc, #520]	; (8009bf4 <HAL_SPI_TransmitReceive+0x310>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	8879      	ldrh	r1, [r7, #2]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	6812      	ldr	r2, [r2, #0]
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a10:	d107      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d970      	bls.n	8009b0c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009a2a:	e068      	b.n	8009afe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d11a      	bne.n	8009a70 <HAL_SPI_TransmitReceive+0x18c>
 8009a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d017      	beq.n	8009a70 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a50:	1d1a      	adds	r2, r3, #4
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695a      	ldr	r2, [r3, #20]
 8009a76:	f248 0308 	movw	r3, #32776	; 0x8008
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01a      	beq.n	8009ab6 <HAL_SPI_TransmitReceive+0x1d2>
 8009a80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d017      	beq.n	8009ab6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a96:	1d1a      	adds	r2, r3, #4
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ab4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ab6:	f7fb fe75 	bl	80057a4 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d803      	bhi.n	8009ace <HAL_SPI_TransmitReceive+0x1ea>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d102      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x1f0>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d114      	bne.n	8009afe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f92d 	bl	8009d34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e115      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d193      	bne.n	8009a2c <HAL_SPI_TransmitReceive+0x148>
 8009b04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d190      	bne.n	8009a2c <HAL_SPI_TransmitReceive+0x148>
 8009b0a:	e0e7      	b.n	8009cdc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b07      	cmp	r3, #7
 8009b12:	f240 80dd 	bls.w	8009cd0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009b16:	e066      	b.n	8009be6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d119      	bne.n	8009b5a <HAL_SPI_TransmitReceive+0x276>
 8009b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d016      	beq.n	8009b5a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b30:	881a      	ldrh	r2, [r3, #0]
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3a:	1c9a      	adds	r2, r3, #2
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b58:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d11a      	bne.n	8009b9e <HAL_SPI_TransmitReceive+0x2ba>
 8009b68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d017      	beq.n	8009b9e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b72:	6a3a      	ldr	r2, [r7, #32]
 8009b74:	8812      	ldrh	r2, [r2, #0]
 8009b76:	b292      	uxth	r2, r2
 8009b78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7e:	1c9a      	adds	r2, r3, #2
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b9e:	f7fb fe01 	bl	80057a4 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d803      	bhi.n	8009bb6 <HAL_SPI_TransmitReceive+0x2d2>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d102      	bne.n	8009bbc <HAL_SPI_TransmitReceive+0x2d8>
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d114      	bne.n	8009be6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f8b9 	bl	8009d34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e0a1      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d195      	bne.n	8009b18 <HAL_SPI_TransmitReceive+0x234>
 8009bec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d192      	bne.n	8009b18 <HAL_SPI_TransmitReceive+0x234>
 8009bf2:	e073      	b.n	8009cdc <HAL_SPI_TransmitReceive+0x3f8>
 8009bf4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d11b      	bne.n	8009c3e <HAL_SPI_TransmitReceive+0x35a>
 8009c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d018      	beq.n	8009c3e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3320      	adds	r3, #32
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d11d      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x3a4>
 8009c4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d01a      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c86:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c88:	f7fb fd8c 	bl	80057a4 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d803      	bhi.n	8009ca0 <HAL_SPI_TransmitReceive+0x3bc>
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9e:	d102      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x3c2>
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d114      	bne.n	8009cd0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f844 	bl	8009d34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e02c      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009cd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d190      	bne.n	8009bf8 <HAL_SPI_TransmitReceive+0x314>
 8009cd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d18d      	bne.n	8009bf8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2108      	movs	r1, #8
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f8c4 	bl	8009e74 <SPI_WaitOnFlagUntilTimeout>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d007      	beq.n	8009d02 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf8:	f043 0220 	orr.w	r2, r3, #32
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 f816 	bl	8009d34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e001      	b.n	8009d2a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8009d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3730      	adds	r7, #48	; 0x30
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop

08009d34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	699a      	ldr	r2, [r3, #24]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0208 	orr.w	r2, r2, #8
 8009d52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0210 	orr.w	r2, r2, #16
 8009d62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0201 	bic.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6919      	ldr	r1, [r3, #16]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	4b3c      	ldr	r3, [pc, #240]	; (8009e70 <SPI_CloseTransfer+0x13c>)
 8009d80:	400b      	ands	r3, r1
 8009d82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d014      	beq.n	8009dca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00f      	beq.n	8009dca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699a      	ldr	r2, [r3, #24]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0220 	orr.w	r2, r2, #32
 8009dc8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d014      	beq.n	8009e00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00f      	beq.n	8009e00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009de6:	f043 0204 	orr.w	r2, r3, #4
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dfe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00f      	beq.n	8009e2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e10:	f043 0201 	orr.w	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00f      	beq.n	8009e54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e3a:	f043 0208 	orr.w	r2, r3, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009e64:	bf00      	nop
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	fffffc90 	.word	0xfffffc90

08009e74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	4613      	mov	r3, r2
 8009e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e84:	e010      	b.n	8009ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e86:	f7fb fc8d 	bl	80057a4 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d803      	bhi.n	8009e9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d102      	bne.n	8009ea4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e00f      	b.n	8009ec8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695a      	ldr	r2, [r3, #20]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	bf0c      	ite	eq
 8009eb8:	2301      	moveq	r3, #1
 8009eba:	2300      	movne	r3, #0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d0df      	beq.n	8009e86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	3301      	adds	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	3307      	adds	r3, #7
 8009eee:	08db      	lsrs	r3, r3, #3
 8009ef0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e049      	b.n	8009fac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7fb f9c3 	bl	80052b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3304      	adds	r3, #4
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f000 fbb1 	bl	800a6ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e049      	b.n	800a05a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f841 	bl	800a062 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f000 fb5a 	bl	800a6ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <HAL_TIM_PWM_Start+0x24>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b01      	cmp	r3, #1
 800a092:	bf14      	ite	ne
 800a094:	2301      	movne	r3, #1
 800a096:	2300      	moveq	r3, #0
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	e03c      	b.n	800a116 <HAL_TIM_PWM_Start+0x9e>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d109      	bne.n	800a0b6 <HAL_TIM_PWM_Start+0x3e>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	bf14      	ite	ne
 800a0ae:	2301      	movne	r3, #1
 800a0b0:	2300      	moveq	r3, #0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	e02f      	b.n	800a116 <HAL_TIM_PWM_Start+0x9e>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d109      	bne.n	800a0d0 <HAL_TIM_PWM_Start+0x58>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	bf14      	ite	ne
 800a0c8:	2301      	movne	r3, #1
 800a0ca:	2300      	moveq	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	e022      	b.n	800a116 <HAL_TIM_PWM_Start+0x9e>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b0c      	cmp	r3, #12
 800a0d4:	d109      	bne.n	800a0ea <HAL_TIM_PWM_Start+0x72>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	bf14      	ite	ne
 800a0e2:	2301      	movne	r3, #1
 800a0e4:	2300      	moveq	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	e015      	b.n	800a116 <HAL_TIM_PWM_Start+0x9e>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b10      	cmp	r3, #16
 800a0ee:	d109      	bne.n	800a104 <HAL_TIM_PWM_Start+0x8c>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	bf14      	ite	ne
 800a0fc:	2301      	movne	r3, #1
 800a0fe:	2300      	moveq	r3, #0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	e008      	b.n	800a116 <HAL_TIM_PWM_Start+0x9e>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e0a1      	b.n	800a262 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d104      	bne.n	800a12e <HAL_TIM_PWM_Start+0xb6>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a12c:	e023      	b.n	800a176 <HAL_TIM_PWM_Start+0xfe>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d104      	bne.n	800a13e <HAL_TIM_PWM_Start+0xc6>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a13c:	e01b      	b.n	800a176 <HAL_TIM_PWM_Start+0xfe>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b08      	cmp	r3, #8
 800a142:	d104      	bne.n	800a14e <HAL_TIM_PWM_Start+0xd6>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a14c:	e013      	b.n	800a176 <HAL_TIM_PWM_Start+0xfe>
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b0c      	cmp	r3, #12
 800a152:	d104      	bne.n	800a15e <HAL_TIM_PWM_Start+0xe6>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a15c:	e00b      	b.n	800a176 <HAL_TIM_PWM_Start+0xfe>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b10      	cmp	r3, #16
 800a162:	d104      	bne.n	800a16e <HAL_TIM_PWM_Start+0xf6>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a16c:	e003      	b.n	800a176 <HAL_TIM_PWM_Start+0xfe>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2202      	movs	r2, #2
 800a172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2201      	movs	r2, #1
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fea2 	bl	800aec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a38      	ldr	r2, [pc, #224]	; (800a26c <HAL_TIM_PWM_Start+0x1f4>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d013      	beq.n	800a1b6 <HAL_TIM_PWM_Start+0x13e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a37      	ldr	r2, [pc, #220]	; (800a270 <HAL_TIM_PWM_Start+0x1f8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d00e      	beq.n	800a1b6 <HAL_TIM_PWM_Start+0x13e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_TIM_PWM_Start+0x1fc>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d009      	beq.n	800a1b6 <HAL_TIM_PWM_Start+0x13e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a34      	ldr	r2, [pc, #208]	; (800a278 <HAL_TIM_PWM_Start+0x200>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d004      	beq.n	800a1b6 <HAL_TIM_PWM_Start+0x13e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a32      	ldr	r2, [pc, #200]	; (800a27c <HAL_TIM_PWM_Start+0x204>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d101      	bne.n	800a1ba <HAL_TIM_PWM_Start+0x142>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <HAL_TIM_PWM_Start+0x144>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d007      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a25      	ldr	r2, [pc, #148]	; (800a26c <HAL_TIM_PWM_Start+0x1f4>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d022      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e2:	d01d      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a25      	ldr	r2, [pc, #148]	; (800a280 <HAL_TIM_PWM_Start+0x208>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d018      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a24      	ldr	r2, [pc, #144]	; (800a284 <HAL_TIM_PWM_Start+0x20c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d013      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_TIM_PWM_Start+0x210>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00e      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a1a      	ldr	r2, [pc, #104]	; (800a270 <HAL_TIM_PWM_Start+0x1f8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d009      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <HAL_TIM_PWM_Start+0x214>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d004      	beq.n	800a220 <HAL_TIM_PWM_Start+0x1a8>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a16      	ldr	r2, [pc, #88]	; (800a274 <HAL_TIM_PWM_Start+0x1fc>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d115      	bne.n	800a24c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <HAL_TIM_PWM_Start+0x218>)
 800a228:	4013      	ands	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b06      	cmp	r3, #6
 800a230:	d015      	beq.n	800a25e <HAL_TIM_PWM_Start+0x1e6>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a238:	d011      	beq.n	800a25e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 0201 	orr.w	r2, r2, #1
 800a248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24a:	e008      	b.n	800a25e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0201 	orr.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	e000      	b.n	800a260 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a25e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40010000 	.word	0x40010000
 800a270:	40010400 	.word	0x40010400
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800
 800a280:	40000400 	.word	0x40000400
 800a284:	40000800 	.word	0x40000800
 800a288:	40000c00 	.word	0x40000c00
 800a28c:	40001800 	.word	0x40001800
 800a290:	00010007 	.word	0x00010007

0800a294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e0ff      	b.n	800a4b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b14      	cmp	r3, #20
 800a2be:	f200 80f0 	bhi.w	800a4a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a4a3 	.word	0x0800a4a3
 800a2d0:	0800a4a3 	.word	0x0800a4a3
 800a2d4:	0800a4a3 	.word	0x0800a4a3
 800a2d8:	0800a35d 	.word	0x0800a35d
 800a2dc:	0800a4a3 	.word	0x0800a4a3
 800a2e0:	0800a4a3 	.word	0x0800a4a3
 800a2e4:	0800a4a3 	.word	0x0800a4a3
 800a2e8:	0800a39f 	.word	0x0800a39f
 800a2ec:	0800a4a3 	.word	0x0800a4a3
 800a2f0:	0800a4a3 	.word	0x0800a4a3
 800a2f4:	0800a4a3 	.word	0x0800a4a3
 800a2f8:	0800a3df 	.word	0x0800a3df
 800a2fc:	0800a4a3 	.word	0x0800a4a3
 800a300:	0800a4a3 	.word	0x0800a4a3
 800a304:	0800a4a3 	.word	0x0800a4a3
 800a308:	0800a421 	.word	0x0800a421
 800a30c:	0800a4a3 	.word	0x0800a4a3
 800a310:	0800a4a3 	.word	0x0800a4a3
 800a314:	0800a4a3 	.word	0x0800a4a3
 800a318:	0800a461 	.word	0x0800a461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fa5c 	bl	800a7e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f042 0208 	orr.w	r2, r2, #8
 800a336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699a      	ldr	r2, [r3, #24]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0204 	bic.w	r2, r2, #4
 800a346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6999      	ldr	r1, [r3, #24]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	619a      	str	r2, [r3, #24]
      break;
 800a35a:	e0a5      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68b9      	ldr	r1, [r7, #8]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 facc 	bl	800a900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699a      	ldr	r2, [r3, #24]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6999      	ldr	r1, [r3, #24]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	021a      	lsls	r2, r3, #8
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	619a      	str	r2, [r3, #24]
      break;
 800a39c:	e084      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fb35 	bl	800aa14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69da      	ldr	r2, [r3, #28]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0208 	orr.w	r2, r2, #8
 800a3b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69da      	ldr	r2, [r3, #28]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f022 0204 	bic.w	r2, r2, #4
 800a3c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69d9      	ldr	r1, [r3, #28]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	61da      	str	r2, [r3, #28]
      break;
 800a3dc:	e064      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fb9d 	bl	800ab24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69d9      	ldr	r1, [r3, #28]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	021a      	lsls	r2, r3, #8
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	61da      	str	r2, [r3, #28]
      break;
 800a41e:	e043      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fbe6 	bl	800abf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0208 	orr.w	r2, r2, #8
 800a43a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0204 	bic.w	r2, r2, #4
 800a44a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a45e:	e023      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fc2a 	bl	800acc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a48a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	021a      	lsls	r2, r3, #8
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4a0:	e002      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop

0800a4bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d101      	bne.n	800a4d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e0dc      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x1d6>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	4b6a      	ldr	r3, [pc, #424]	; (800a69c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a64      	ldr	r2, [pc, #400]	; (800a6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	f000 80a9 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a514:	4a62      	ldr	r2, [pc, #392]	; (800a6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	f200 80ae 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a51c:	4a61      	ldr	r2, [pc, #388]	; (800a6a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	f000 80a1 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a524:	4a5f      	ldr	r2, [pc, #380]	; (800a6a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	f200 80a6 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a52c:	4a5e      	ldr	r2, [pc, #376]	; (800a6a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	f000 8099 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a534:	4a5c      	ldr	r2, [pc, #368]	; (800a6a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a536:	4293      	cmp	r3, r2
 800a538:	f200 809e 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a53c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a540:	f000 8091 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a544:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a548:	f200 8096 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a54c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a550:	f000 8089 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a558:	f200 808e 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a55c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a560:	d03e      	beq.n	800a5e0 <HAL_TIM_ConfigClockSource+0x124>
 800a562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a566:	f200 8087 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56e:	f000 8086 	beq.w	800a67e <HAL_TIM_ConfigClockSource+0x1c2>
 800a572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a576:	d87f      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a578:	2b70      	cmp	r3, #112	; 0x70
 800a57a:	d01a      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0xf6>
 800a57c:	2b70      	cmp	r3, #112	; 0x70
 800a57e:	d87b      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a580:	2b60      	cmp	r3, #96	; 0x60
 800a582:	d050      	beq.n	800a626 <HAL_TIM_ConfigClockSource+0x16a>
 800a584:	2b60      	cmp	r3, #96	; 0x60
 800a586:	d877      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a588:	2b50      	cmp	r3, #80	; 0x50
 800a58a:	d03c      	beq.n	800a606 <HAL_TIM_ConfigClockSource+0x14a>
 800a58c:	2b50      	cmp	r3, #80	; 0x50
 800a58e:	d873      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a590:	2b40      	cmp	r3, #64	; 0x40
 800a592:	d058      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x18a>
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d86f      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a598:	2b30      	cmp	r3, #48	; 0x30
 800a59a:	d064      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a59c:	2b30      	cmp	r3, #48	; 0x30
 800a59e:	d86b      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d060      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d867      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d05c      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d05a      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b0:	e062      	b.n	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6899      	ldr	r1, [r3, #8]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f000 fc61 	bl	800ae88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	609a      	str	r2, [r3, #8]
      break;
 800a5de:	e04f      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	6899      	ldr	r1, [r3, #8]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f000 fc4a 	bl	800ae88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a602:	609a      	str	r2, [r3, #8]
      break;
 800a604:	e03c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6859      	ldr	r1, [r3, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	461a      	mov	r2, r3
 800a614:	f000 fbba 	bl	800ad8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2150      	movs	r1, #80	; 0x50
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fc14 	bl	800ae4c <TIM_ITRx_SetConfig>
      break;
 800a624:	e02c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6859      	ldr	r1, [r3, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	461a      	mov	r2, r3
 800a634:	f000 fbd9 	bl	800adea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2160      	movs	r1, #96	; 0x60
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 fc04 	bl	800ae4c <TIM_ITRx_SetConfig>
      break;
 800a644:	e01c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6859      	ldr	r1, [r3, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	461a      	mov	r2, r3
 800a654:	f000 fb9a 	bl	800ad8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2140      	movs	r1, #64	; 0x40
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fbf4 	bl	800ae4c <TIM_ITRx_SetConfig>
      break;
 800a664:	e00c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f000 fbeb 	bl	800ae4c <TIM_ITRx_SetConfig>
      break;
 800a676:	e003      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
      break;
 800a67c:	e000      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a67e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	ffceff88 	.word	0xffceff88
 800a6a0:	00100040 	.word	0x00100040
 800a6a4:	00100030 	.word	0x00100030
 800a6a8:	00100020 	.word	0x00100020

0800a6ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a40      	ldr	r2, [pc, #256]	; (800a7c0 <TIM_Base_SetConfig+0x114>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d013      	beq.n	800a6ec <TIM_Base_SetConfig+0x40>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ca:	d00f      	beq.n	800a6ec <TIM_Base_SetConfig+0x40>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a3d      	ldr	r2, [pc, #244]	; (800a7c4 <TIM_Base_SetConfig+0x118>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d00b      	beq.n	800a6ec <TIM_Base_SetConfig+0x40>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a3c      	ldr	r2, [pc, #240]	; (800a7c8 <TIM_Base_SetConfig+0x11c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d007      	beq.n	800a6ec <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a3b      	ldr	r2, [pc, #236]	; (800a7cc <TIM_Base_SetConfig+0x120>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d003      	beq.n	800a6ec <TIM_Base_SetConfig+0x40>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a3a      	ldr	r2, [pc, #232]	; (800a7d0 <TIM_Base_SetConfig+0x124>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d108      	bne.n	800a6fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a2f      	ldr	r2, [pc, #188]	; (800a7c0 <TIM_Base_SetConfig+0x114>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d01f      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a70c:	d01b      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a2c      	ldr	r2, [pc, #176]	; (800a7c4 <TIM_Base_SetConfig+0x118>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d017      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a2b      	ldr	r2, [pc, #172]	; (800a7c8 <TIM_Base_SetConfig+0x11c>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d013      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a2a      	ldr	r2, [pc, #168]	; (800a7cc <TIM_Base_SetConfig+0x120>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00f      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a29      	ldr	r2, [pc, #164]	; (800a7d0 <TIM_Base_SetConfig+0x124>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d00b      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a28      	ldr	r2, [pc, #160]	; (800a7d4 <TIM_Base_SetConfig+0x128>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d007      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a27      	ldr	r2, [pc, #156]	; (800a7d8 <TIM_Base_SetConfig+0x12c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d003      	beq.n	800a746 <TIM_Base_SetConfig+0x9a>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a26      	ldr	r2, [pc, #152]	; (800a7dc <TIM_Base_SetConfig+0x130>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d108      	bne.n	800a758 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a74c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a10      	ldr	r2, [pc, #64]	; (800a7c0 <TIM_Base_SetConfig+0x114>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00f      	beq.n	800a7a4 <TIM_Base_SetConfig+0xf8>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a12      	ldr	r2, [pc, #72]	; (800a7d0 <TIM_Base_SetConfig+0x124>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d00b      	beq.n	800a7a4 <TIM_Base_SetConfig+0xf8>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a11      	ldr	r2, [pc, #68]	; (800a7d4 <TIM_Base_SetConfig+0x128>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d007      	beq.n	800a7a4 <TIM_Base_SetConfig+0xf8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a10      	ldr	r2, [pc, #64]	; (800a7d8 <TIM_Base_SetConfig+0x12c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d003      	beq.n	800a7a4 <TIM_Base_SetConfig+0xf8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a0f      	ldr	r2, [pc, #60]	; (800a7dc <TIM_Base_SetConfig+0x130>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d103      	bne.n	800a7ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	615a      	str	r2, [r3, #20]
}
 800a7b2:	bf00      	nop
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	40010000 	.word	0x40010000
 800a7c4:	40000400 	.word	0x40000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	40000c00 	.word	0x40000c00
 800a7d0:	40010400 	.word	0x40010400
 800a7d4:	40014000 	.word	0x40014000
 800a7d8:	40014400 	.word	0x40014400
 800a7dc:	40014800 	.word	0x40014800

0800a7e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 0201 	bic.w	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4b37      	ldr	r3, [pc, #220]	; (800a8e8 <TIM_OC1_SetConfig+0x108>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f023 0302 	bic.w	r3, r3, #2
 800a828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	4313      	orrs	r3, r2
 800a832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a2d      	ldr	r2, [pc, #180]	; (800a8ec <TIM_OC1_SetConfig+0x10c>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00f      	beq.n	800a85c <TIM_OC1_SetConfig+0x7c>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a2c      	ldr	r2, [pc, #176]	; (800a8f0 <TIM_OC1_SetConfig+0x110>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00b      	beq.n	800a85c <TIM_OC1_SetConfig+0x7c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a2b      	ldr	r2, [pc, #172]	; (800a8f4 <TIM_OC1_SetConfig+0x114>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d007      	beq.n	800a85c <TIM_OC1_SetConfig+0x7c>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <TIM_OC1_SetConfig+0x118>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d003      	beq.n	800a85c <TIM_OC1_SetConfig+0x7c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <TIM_OC1_SetConfig+0x11c>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d10c      	bne.n	800a876 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f023 0308 	bic.w	r3, r3, #8
 800a862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f023 0304 	bic.w	r3, r3, #4
 800a874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a1c      	ldr	r2, [pc, #112]	; (800a8ec <TIM_OC1_SetConfig+0x10c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00f      	beq.n	800a89e <TIM_OC1_SetConfig+0xbe>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a1b      	ldr	r2, [pc, #108]	; (800a8f0 <TIM_OC1_SetConfig+0x110>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00b      	beq.n	800a89e <TIM_OC1_SetConfig+0xbe>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a1a      	ldr	r2, [pc, #104]	; (800a8f4 <TIM_OC1_SetConfig+0x114>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d007      	beq.n	800a89e <TIM_OC1_SetConfig+0xbe>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a19      	ldr	r2, [pc, #100]	; (800a8f8 <TIM_OC1_SetConfig+0x118>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_OC1_SetConfig+0xbe>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a18      	ldr	r2, [pc, #96]	; (800a8fc <TIM_OC1_SetConfig+0x11c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d111      	bne.n	800a8c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	621a      	str	r2, [r3, #32]
}
 800a8dc:	bf00      	nop
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	fffeff8f 	.word	0xfffeff8f
 800a8ec:	40010000 	.word	0x40010000
 800a8f0:	40010400 	.word	0x40010400
 800a8f4:	40014000 	.word	0x40014000
 800a8f8:	40014400 	.word	0x40014400
 800a8fc:	40014800 	.word	0x40014800

0800a900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	f023 0210 	bic.w	r2, r3, #16
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4b34      	ldr	r3, [pc, #208]	; (800a9fc <TIM_OC2_SetConfig+0xfc>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	021b      	lsls	r3, r3, #8
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	4313      	orrs	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f023 0320 	bic.w	r3, r3, #32
 800a94a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	4313      	orrs	r3, r2
 800a956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a29      	ldr	r2, [pc, #164]	; (800aa00 <TIM_OC2_SetConfig+0x100>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_OC2_SetConfig+0x68>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a28      	ldr	r2, [pc, #160]	; (800aa04 <TIM_OC2_SetConfig+0x104>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d10d      	bne.n	800a984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1e      	ldr	r2, [pc, #120]	; (800aa00 <TIM_OC2_SetConfig+0x100>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00f      	beq.n	800a9ac <TIM_OC2_SetConfig+0xac>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <TIM_OC2_SetConfig+0x104>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00b      	beq.n	800a9ac <TIM_OC2_SetConfig+0xac>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a1c      	ldr	r2, [pc, #112]	; (800aa08 <TIM_OC2_SetConfig+0x108>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d007      	beq.n	800a9ac <TIM_OC2_SetConfig+0xac>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <TIM_OC2_SetConfig+0x10c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_OC2_SetConfig+0xac>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a1a      	ldr	r2, [pc, #104]	; (800aa10 <TIM_OC2_SetConfig+0x110>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d113      	bne.n	800a9d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	621a      	str	r2, [r3, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	feff8fff 	.word	0xfeff8fff
 800aa00:	40010000 	.word	0x40010000
 800aa04:	40010400 	.word	0x40010400
 800aa08:	40014000 	.word	0x40014000
 800aa0c:	40014400 	.word	0x40014400
 800aa10:	40014800 	.word	0x40014800

0800aa14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4b33      	ldr	r3, [pc, #204]	; (800ab0c <TIM_OC3_SetConfig+0xf8>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a28      	ldr	r2, [pc, #160]	; (800ab10 <TIM_OC3_SetConfig+0xfc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d003      	beq.n	800aa7a <TIM_OC3_SetConfig+0x66>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a27      	ldr	r2, [pc, #156]	; (800ab14 <TIM_OC3_SetConfig+0x100>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d10d      	bne.n	800aa96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <TIM_OC3_SetConfig+0xfc>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d00f      	beq.n	800aabe <TIM_OC3_SetConfig+0xaa>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a1c      	ldr	r2, [pc, #112]	; (800ab14 <TIM_OC3_SetConfig+0x100>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00b      	beq.n	800aabe <TIM_OC3_SetConfig+0xaa>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a1b      	ldr	r2, [pc, #108]	; (800ab18 <TIM_OC3_SetConfig+0x104>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d007      	beq.n	800aabe <TIM_OC3_SetConfig+0xaa>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a1a      	ldr	r2, [pc, #104]	; (800ab1c <TIM_OC3_SetConfig+0x108>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d003      	beq.n	800aabe <TIM_OC3_SetConfig+0xaa>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a19      	ldr	r2, [pc, #100]	; (800ab20 <TIM_OC3_SetConfig+0x10c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d113      	bne.n	800aae6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aacc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	621a      	str	r2, [r3, #32]
}
 800ab00:	bf00      	nop
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	fffeff8f 	.word	0xfffeff8f
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40010400 	.word	0x40010400
 800ab18:	40014000 	.word	0x40014000
 800ab1c:	40014400 	.word	0x40014400
 800ab20:	40014800 	.word	0x40014800

0800ab24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <TIM_OC4_SetConfig+0xbc>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	031b      	lsls	r3, r3, #12
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a19      	ldr	r2, [pc, #100]	; (800abe4 <TIM_OC4_SetConfig+0xc0>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d00f      	beq.n	800aba4 <TIM_OC4_SetConfig+0x80>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <TIM_OC4_SetConfig+0xc4>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <TIM_OC4_SetConfig+0x80>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a17      	ldr	r2, [pc, #92]	; (800abec <TIM_OC4_SetConfig+0xc8>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d007      	beq.n	800aba4 <TIM_OC4_SetConfig+0x80>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a16      	ldr	r2, [pc, #88]	; (800abf0 <TIM_OC4_SetConfig+0xcc>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d003      	beq.n	800aba4 <TIM_OC4_SetConfig+0x80>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <TIM_OC4_SetConfig+0xd0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d109      	bne.n	800abb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	019b      	lsls	r3, r3, #6
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	feff8fff 	.word	0xfeff8fff
 800abe4:	40010000 	.word	0x40010000
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800

0800abf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4b21      	ldr	r3, [pc, #132]	; (800aca8 <TIM_OC5_SetConfig+0xb0>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a18      	ldr	r2, [pc, #96]	; (800acac <TIM_OC5_SetConfig+0xb4>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00f      	beq.n	800ac6e <TIM_OC5_SetConfig+0x76>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a17      	ldr	r2, [pc, #92]	; (800acb0 <TIM_OC5_SetConfig+0xb8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00b      	beq.n	800ac6e <TIM_OC5_SetConfig+0x76>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a16      	ldr	r2, [pc, #88]	; (800acb4 <TIM_OC5_SetConfig+0xbc>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d007      	beq.n	800ac6e <TIM_OC5_SetConfig+0x76>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <TIM_OC5_SetConfig+0xc0>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d003      	beq.n	800ac6e <TIM_OC5_SetConfig+0x76>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a14      	ldr	r2, [pc, #80]	; (800acbc <TIM_OC5_SetConfig+0xc4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d109      	bne.n	800ac82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	021b      	lsls	r3, r3, #8
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	621a      	str	r2, [r3, #32]
}
 800ac9c:	bf00      	nop
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	fffeff8f 	.word	0xfffeff8f
 800acac:	40010000 	.word	0x40010000
 800acb0:	40010400 	.word	0x40010400
 800acb4:	40014000 	.word	0x40014000
 800acb8:	40014400 	.word	0x40014400
 800acbc:	40014800 	.word	0x40014800

0800acc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <TIM_OC6_SetConfig+0xb4>)
 800acec:	4013      	ands	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	051b      	lsls	r3, r3, #20
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a19      	ldr	r2, [pc, #100]	; (800ad78 <TIM_OC6_SetConfig+0xb8>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d00f      	beq.n	800ad38 <TIM_OC6_SetConfig+0x78>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <TIM_OC6_SetConfig+0xbc>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00b      	beq.n	800ad38 <TIM_OC6_SetConfig+0x78>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a17      	ldr	r2, [pc, #92]	; (800ad80 <TIM_OC6_SetConfig+0xc0>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d007      	beq.n	800ad38 <TIM_OC6_SetConfig+0x78>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a16      	ldr	r2, [pc, #88]	; (800ad84 <TIM_OC6_SetConfig+0xc4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_OC6_SetConfig+0x78>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a15      	ldr	r2, [pc, #84]	; (800ad88 <TIM_OC6_SetConfig+0xc8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d109      	bne.n	800ad4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	029b      	lsls	r3, r3, #10
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	feff8fff 	.word	0xfeff8fff
 800ad78:	40010000 	.word	0x40010000
 800ad7c:	40010400 	.word	0x40010400
 800ad80:	40014000 	.word	0x40014000
 800ad84:	40014400 	.word	0x40014400
 800ad88:	40014800 	.word	0x40014800

0800ad8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	f023 0201 	bic.w	r2, r3, #1
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f023 030a 	bic.w	r3, r3, #10
 800adc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	621a      	str	r2, [r3, #32]
}
 800adde:	bf00      	nop
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adea:	b480      	push	{r7}
 800adec:	b087      	sub	sp, #28
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	f023 0210 	bic.w	r2, r3, #16
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	031b      	lsls	r3, r3, #12
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <TIM_ITRx_SetConfig+0x38>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	f043 0307 	orr.w	r3, r3, #7
 800ae6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	609a      	str	r2, [r3, #8]
}
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	ffcfff8f 	.word	0xffcfff8f

0800ae88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	021a      	lsls	r2, r3, #8
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	609a      	str	r2, [r3, #8]
}
 800aebc:	bf00      	nop
 800aebe:	371c      	adds	r7, #28
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f003 031f 	and.w	r3, r3, #31
 800aeda:	2201      	movs	r2, #1
 800aedc:	fa02 f303 	lsl.w	r3, r2, r3
 800aee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a1a      	ldr	r2, [r3, #32]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	43db      	mvns	r3, r3
 800aeea:	401a      	ands	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a1a      	ldr	r2, [r3, #32]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f003 031f 	and.w	r3, r3, #31
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	fa01 f303 	lsl.w	r3, r1, r3
 800af00:	431a      	orrs	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
	...

0800af14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af28:	2302      	movs	r3, #2
 800af2a:	e06d      	b.n	800b008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2202      	movs	r2, #2
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a30      	ldr	r2, [pc, #192]	; (800b014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d004      	beq.n	800af60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a2f      	ldr	r2, [pc, #188]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d108      	bne.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a20      	ldr	r2, [pc, #128]	; (800b014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d022      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9e:	d01d      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a1d      	ldr	r2, [pc, #116]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d018      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a1c      	ldr	r2, [pc, #112]	; (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d013      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a1a      	ldr	r2, [pc, #104]	; (800b024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d00e      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a15      	ldr	r2, [pc, #84]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d009      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a16      	ldr	r2, [pc, #88]	; (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a15      	ldr	r2, [pc, #84]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d10c      	bne.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4313      	orrs	r3, r2
 800afec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	40010000 	.word	0x40010000
 800b018:	40010400 	.word	0x40010400
 800b01c:	40000400 	.word	0x40000400
 800b020:	40000800 	.word	0x40000800
 800b024:	40000c00 	.word	0x40000c00
 800b028:	40001800 	.word	0x40001800
 800b02c:	40014000 	.word	0x40014000

0800b030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e042      	b.n	800b0c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d106      	bne.n	800b05a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7fa fa13 	bl	8005480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2224      	movs	r2, #36	; 0x24
 800b05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0201 	bic.w	r2, r2, #1
 800b070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f8c2 	bl	800b1fc <UART_SetConfig>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e022      	b.n	800b0c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fe1e 	bl	800bccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b09e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689a      	ldr	r2, [r3, #8]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f042 0201 	orr.w	r2, r2, #1
 800b0be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fea5 	bl	800be10 <UART_CheckIdleState>
 800b0c6:	4603      	mov	r3, r0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	f040 8083 	bne.w	800b1f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_UART_Transmit+0x28>
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e07b      	b.n	800b1f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_UART_Transmit+0x3a>
 800b106:	2302      	movs	r3, #2
 800b108:	e074      	b.n	800b1f4 <HAL_UART_Transmit+0x124>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2221      	movs	r2, #33	; 0x21
 800b11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b122:	f7fa fb3f 	bl	80057a4 <HAL_GetTick>
 800b126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	88fa      	ldrh	r2, [r7, #6]
 800b12c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	88fa      	ldrh	r2, [r7, #6]
 800b134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b140:	d108      	bne.n	800b154 <HAL_UART_Transmit+0x84>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d104      	bne.n	800b154 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	e003      	b.n	800b15c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b158:	2300      	movs	r3, #0
 800b15a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b164:	e02c      	b.n	800b1c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2200      	movs	r2, #0
 800b16e:	2180      	movs	r1, #128	; 0x80
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 fe98 	bl	800bea6 <UART_WaitOnFlagUntilTimeout>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e039      	b.n	800b1f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10b      	bne.n	800b19e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b194:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	3302      	adds	r3, #2
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	e007      	b.n	800b1ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	781a      	ldrb	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1cc      	bne.n	800b166 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2140      	movs	r1, #64	; 0x40
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 fe65 	bl	800bea6 <UART_WaitOnFlagUntilTimeout>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e006      	b.n	800b1f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e000      	b.n	800b1f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b1f2:	2302      	movs	r3, #2
  }
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b200:	b092      	sub	sp, #72	; 0x48
 800b202:	af00      	add	r7, sp, #0
 800b204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	431a      	orrs	r2, r3
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	4313      	orrs	r3, r2
 800b222:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	4bbe      	ldr	r3, [pc, #760]	; (800b524 <UART_SetConfig+0x328>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	6812      	ldr	r2, [r2, #0]
 800b232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b234:	430b      	orrs	r3, r1
 800b236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	68da      	ldr	r2, [r3, #12]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4ab3      	ldr	r2, [pc, #716]	; (800b528 <UART_SetConfig+0x32c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d004      	beq.n	800b268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b264:	4313      	orrs	r3, r2
 800b266:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	4baf      	ldr	r3, [pc, #700]	; (800b52c <UART_SetConfig+0x330>)
 800b270:	4013      	ands	r3, r2
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	6812      	ldr	r2, [r2, #0]
 800b276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b278:	430b      	orrs	r3, r1
 800b27a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b282:	f023 010f 	bic.w	r1, r3, #15
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4aa6      	ldr	r2, [pc, #664]	; (800b530 <UART_SetConfig+0x334>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d177      	bne.n	800b38c <UART_SetConfig+0x190>
 800b29c:	4ba5      	ldr	r3, [pc, #660]	; (800b534 <UART_SetConfig+0x338>)
 800b29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2a4:	2b28      	cmp	r3, #40	; 0x28
 800b2a6:	d86d      	bhi.n	800b384 <UART_SetConfig+0x188>
 800b2a8:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <UART_SetConfig+0xb4>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b355 	.word	0x0800b355
 800b2b4:	0800b385 	.word	0x0800b385
 800b2b8:	0800b385 	.word	0x0800b385
 800b2bc:	0800b385 	.word	0x0800b385
 800b2c0:	0800b385 	.word	0x0800b385
 800b2c4:	0800b385 	.word	0x0800b385
 800b2c8:	0800b385 	.word	0x0800b385
 800b2cc:	0800b385 	.word	0x0800b385
 800b2d0:	0800b35d 	.word	0x0800b35d
 800b2d4:	0800b385 	.word	0x0800b385
 800b2d8:	0800b385 	.word	0x0800b385
 800b2dc:	0800b385 	.word	0x0800b385
 800b2e0:	0800b385 	.word	0x0800b385
 800b2e4:	0800b385 	.word	0x0800b385
 800b2e8:	0800b385 	.word	0x0800b385
 800b2ec:	0800b385 	.word	0x0800b385
 800b2f0:	0800b365 	.word	0x0800b365
 800b2f4:	0800b385 	.word	0x0800b385
 800b2f8:	0800b385 	.word	0x0800b385
 800b2fc:	0800b385 	.word	0x0800b385
 800b300:	0800b385 	.word	0x0800b385
 800b304:	0800b385 	.word	0x0800b385
 800b308:	0800b385 	.word	0x0800b385
 800b30c:	0800b385 	.word	0x0800b385
 800b310:	0800b36d 	.word	0x0800b36d
 800b314:	0800b385 	.word	0x0800b385
 800b318:	0800b385 	.word	0x0800b385
 800b31c:	0800b385 	.word	0x0800b385
 800b320:	0800b385 	.word	0x0800b385
 800b324:	0800b385 	.word	0x0800b385
 800b328:	0800b385 	.word	0x0800b385
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b375 	.word	0x0800b375
 800b334:	0800b385 	.word	0x0800b385
 800b338:	0800b385 	.word	0x0800b385
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b385 	.word	0x0800b385
 800b344:	0800b385 	.word	0x0800b385
 800b348:	0800b385 	.word	0x0800b385
 800b34c:	0800b385 	.word	0x0800b385
 800b350:	0800b37d 	.word	0x0800b37d
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e222      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b35c:	2304      	movs	r3, #4
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e21e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b364:	2308      	movs	r3, #8
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e21a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b36c:	2310      	movs	r3, #16
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b372:	e216      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b374:	2320      	movs	r3, #32
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37a:	e212      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b37c:	2340      	movs	r3, #64	; 0x40
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b382:	e20e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b384:	2380      	movs	r3, #128	; 0x80
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38a:	e20a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a69      	ldr	r2, [pc, #420]	; (800b538 <UART_SetConfig+0x33c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d130      	bne.n	800b3f8 <UART_SetConfig+0x1fc>
 800b396:	4b67      	ldr	r3, [pc, #412]	; (800b534 <UART_SetConfig+0x338>)
 800b398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d826      	bhi.n	800b3f0 <UART_SetConfig+0x1f4>
 800b3a2:	a201      	add	r2, pc, #4	; (adr r2, 800b3a8 <UART_SetConfig+0x1ac>)
 800b3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a8:	0800b3c1 	.word	0x0800b3c1
 800b3ac:	0800b3c9 	.word	0x0800b3c9
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b3d9 	.word	0x0800b3d9
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3e9 	.word	0x0800b3e9
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e1ec      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3c8:	2304      	movs	r3, #4
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e1e8      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3d0:	2308      	movs	r3, #8
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e1e4      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3d8:	2310      	movs	r3, #16
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3de:	e1e0      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3e0:	2320      	movs	r3, #32
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e6:	e1dc      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3e8:	2340      	movs	r3, #64	; 0x40
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e1d8      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3f0:	2380      	movs	r3, #128	; 0x80
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e1d4      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a4f      	ldr	r2, [pc, #316]	; (800b53c <UART_SetConfig+0x340>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d130      	bne.n	800b464 <UART_SetConfig+0x268>
 800b402:	4b4c      	ldr	r3, [pc, #304]	; (800b534 <UART_SetConfig+0x338>)
 800b404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	d826      	bhi.n	800b45c <UART_SetConfig+0x260>
 800b40e:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <UART_SetConfig+0x218>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b42d 	.word	0x0800b42d
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b43d 	.word	0x0800b43d
 800b420:	0800b445 	.word	0x0800b445
 800b424:	0800b44d 	.word	0x0800b44d
 800b428:	0800b455 	.word	0x0800b455
 800b42c:	2300      	movs	r3, #0
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e1b6      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b434:	2304      	movs	r3, #4
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e1b2      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b43c:	2308      	movs	r3, #8
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e1ae      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b444:	2310      	movs	r3, #16
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44a:	e1aa      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b44c:	2320      	movs	r3, #32
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b452:	e1a6      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b454:	2340      	movs	r3, #64	; 0x40
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e1a2      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b45c:	2380      	movs	r3, #128	; 0x80
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e19e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a35      	ldr	r2, [pc, #212]	; (800b540 <UART_SetConfig+0x344>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d130      	bne.n	800b4d0 <UART_SetConfig+0x2d4>
 800b46e:	4b31      	ldr	r3, [pc, #196]	; (800b534 <UART_SetConfig+0x338>)
 800b470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b05      	cmp	r3, #5
 800b478:	d826      	bhi.n	800b4c8 <UART_SetConfig+0x2cc>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <UART_SetConfig+0x284>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b4a1 	.word	0x0800b4a1
 800b488:	0800b4a9 	.word	0x0800b4a9
 800b48c:	0800b4b1 	.word	0x0800b4b1
 800b490:	0800b4b9 	.word	0x0800b4b9
 800b494:	0800b4c1 	.word	0x0800b4c1
 800b498:	2300      	movs	r3, #0
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49e:	e180      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a6:	e17c      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ae:	e178      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b6:	e174      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4be:	e170      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c6:	e16c      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4c8:	2380      	movs	r3, #128	; 0x80
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ce:	e168      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a1b      	ldr	r2, [pc, #108]	; (800b544 <UART_SetConfig+0x348>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d142      	bne.n	800b560 <UART_SetConfig+0x364>
 800b4da:	4b16      	ldr	r3, [pc, #88]	; (800b534 <UART_SetConfig+0x338>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d838      	bhi.n	800b558 <UART_SetConfig+0x35c>
 800b4e6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <UART_SetConfig+0x2f0>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b505 	.word	0x0800b505
 800b4f0:	0800b50d 	.word	0x0800b50d
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b51d 	.word	0x0800b51d
 800b4fc:	0800b549 	.word	0x0800b549
 800b500:	0800b551 	.word	0x0800b551
 800b504:	2300      	movs	r3, #0
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e14a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b512:	e146      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51a:	e142      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b522:	e13e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b524:	cfff69f3 	.word	0xcfff69f3
 800b528:	58000c00 	.word	0x58000c00
 800b52c:	11fff4ff 	.word	0x11fff4ff
 800b530:	40011000 	.word	0x40011000
 800b534:	58024400 	.word	0x58024400
 800b538:	40004400 	.word	0x40004400
 800b53c:	40004800 	.word	0x40004800
 800b540:	40004c00 	.word	0x40004c00
 800b544:	40005000 	.word	0x40005000
 800b548:	2320      	movs	r3, #32
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e128      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b550:	2340      	movs	r3, #64	; 0x40
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e124      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b558:	2380      	movs	r3, #128	; 0x80
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e120      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4acb      	ldr	r2, [pc, #812]	; (800b894 <UART_SetConfig+0x698>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d176      	bne.n	800b658 <UART_SetConfig+0x45c>
 800b56a:	4bcb      	ldr	r3, [pc, #812]	; (800b898 <UART_SetConfig+0x69c>)
 800b56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b572:	2b28      	cmp	r3, #40	; 0x28
 800b574:	d86c      	bhi.n	800b650 <UART_SetConfig+0x454>
 800b576:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <UART_SetConfig+0x380>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b621 	.word	0x0800b621
 800b580:	0800b651 	.word	0x0800b651
 800b584:	0800b651 	.word	0x0800b651
 800b588:	0800b651 	.word	0x0800b651
 800b58c:	0800b651 	.word	0x0800b651
 800b590:	0800b651 	.word	0x0800b651
 800b594:	0800b651 	.word	0x0800b651
 800b598:	0800b651 	.word	0x0800b651
 800b59c:	0800b629 	.word	0x0800b629
 800b5a0:	0800b651 	.word	0x0800b651
 800b5a4:	0800b651 	.word	0x0800b651
 800b5a8:	0800b651 	.word	0x0800b651
 800b5ac:	0800b651 	.word	0x0800b651
 800b5b0:	0800b651 	.word	0x0800b651
 800b5b4:	0800b651 	.word	0x0800b651
 800b5b8:	0800b651 	.word	0x0800b651
 800b5bc:	0800b631 	.word	0x0800b631
 800b5c0:	0800b651 	.word	0x0800b651
 800b5c4:	0800b651 	.word	0x0800b651
 800b5c8:	0800b651 	.word	0x0800b651
 800b5cc:	0800b651 	.word	0x0800b651
 800b5d0:	0800b651 	.word	0x0800b651
 800b5d4:	0800b651 	.word	0x0800b651
 800b5d8:	0800b651 	.word	0x0800b651
 800b5dc:	0800b639 	.word	0x0800b639
 800b5e0:	0800b651 	.word	0x0800b651
 800b5e4:	0800b651 	.word	0x0800b651
 800b5e8:	0800b651 	.word	0x0800b651
 800b5ec:	0800b651 	.word	0x0800b651
 800b5f0:	0800b651 	.word	0x0800b651
 800b5f4:	0800b651 	.word	0x0800b651
 800b5f8:	0800b651 	.word	0x0800b651
 800b5fc:	0800b641 	.word	0x0800b641
 800b600:	0800b651 	.word	0x0800b651
 800b604:	0800b651 	.word	0x0800b651
 800b608:	0800b651 	.word	0x0800b651
 800b60c:	0800b651 	.word	0x0800b651
 800b610:	0800b651 	.word	0x0800b651
 800b614:	0800b651 	.word	0x0800b651
 800b618:	0800b651 	.word	0x0800b651
 800b61c:	0800b649 	.word	0x0800b649
 800b620:	2301      	movs	r3, #1
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b626:	e0bc      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b628:	2304      	movs	r3, #4
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62e:	e0b8      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b630:	2308      	movs	r3, #8
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b636:	e0b4      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b638:	2310      	movs	r3, #16
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63e:	e0b0      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b640:	2320      	movs	r3, #32
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b646:	e0ac      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b648:	2340      	movs	r3, #64	; 0x40
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e0a8      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b650:	2380      	movs	r3, #128	; 0x80
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e0a4      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a8f      	ldr	r2, [pc, #572]	; (800b89c <UART_SetConfig+0x6a0>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d130      	bne.n	800b6c4 <UART_SetConfig+0x4c8>
 800b662:	4b8d      	ldr	r3, [pc, #564]	; (800b898 <UART_SetConfig+0x69c>)
 800b664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b05      	cmp	r3, #5
 800b66c:	d826      	bhi.n	800b6bc <UART_SetConfig+0x4c0>
 800b66e:	a201      	add	r2, pc, #4	; (adr r2, 800b674 <UART_SetConfig+0x478>)
 800b670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b674:	0800b68d 	.word	0x0800b68d
 800b678:	0800b695 	.word	0x0800b695
 800b67c:	0800b69d 	.word	0x0800b69d
 800b680:	0800b6a5 	.word	0x0800b6a5
 800b684:	0800b6ad 	.word	0x0800b6ad
 800b688:	0800b6b5 	.word	0x0800b6b5
 800b68c:	2300      	movs	r3, #0
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e086      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b694:	2304      	movs	r3, #4
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e082      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b69c:	2308      	movs	r3, #8
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a2:	e07e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6aa:	e07a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b6ac:	2320      	movs	r3, #32
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b2:	e076      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b6b4:	2340      	movs	r3, #64	; 0x40
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e072      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b6bc:	2380      	movs	r3, #128	; 0x80
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e06e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a75      	ldr	r2, [pc, #468]	; (800b8a0 <UART_SetConfig+0x6a4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d130      	bne.n	800b730 <UART_SetConfig+0x534>
 800b6ce:	4b72      	ldr	r3, [pc, #456]	; (800b898 <UART_SetConfig+0x69c>)
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d2:	f003 0307 	and.w	r3, r3, #7
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	d826      	bhi.n	800b728 <UART_SetConfig+0x52c>
 800b6da:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <UART_SetConfig+0x4e4>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b6f9 	.word	0x0800b6f9
 800b6e4:	0800b701 	.word	0x0800b701
 800b6e8:	0800b709 	.word	0x0800b709
 800b6ec:	0800b711 	.word	0x0800b711
 800b6f0:	0800b719 	.word	0x0800b719
 800b6f4:	0800b721 	.word	0x0800b721
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fe:	e050      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b700:	2304      	movs	r3, #4
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b706:	e04c      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b708:	2308      	movs	r3, #8
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70e:	e048      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b710:	2310      	movs	r3, #16
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b716:	e044      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b718:	2320      	movs	r3, #32
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71e:	e040      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b720:	2340      	movs	r3, #64	; 0x40
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b726:	e03c      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b728:	2380      	movs	r3, #128	; 0x80
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b72e:	e038      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a5b      	ldr	r2, [pc, #364]	; (800b8a4 <UART_SetConfig+0x6a8>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d130      	bne.n	800b79c <UART_SetConfig+0x5a0>
 800b73a:	4b57      	ldr	r3, [pc, #348]	; (800b898 <UART_SetConfig+0x69c>)
 800b73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b73e:	f003 0307 	and.w	r3, r3, #7
 800b742:	2b05      	cmp	r3, #5
 800b744:	d826      	bhi.n	800b794 <UART_SetConfig+0x598>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <UART_SetConfig+0x550>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b765 	.word	0x0800b765
 800b750:	0800b76d 	.word	0x0800b76d
 800b754:	0800b775 	.word	0x0800b775
 800b758:	0800b77d 	.word	0x0800b77d
 800b75c:	0800b785 	.word	0x0800b785
 800b760:	0800b78d 	.word	0x0800b78d
 800b764:	2302      	movs	r3, #2
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76a:	e01a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b76c:	2304      	movs	r3, #4
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b772:	e016      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b774:	2308      	movs	r3, #8
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77a:	e012      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b77c:	2310      	movs	r3, #16
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b782:	e00e      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b784:	2320      	movs	r3, #32
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78a:	e00a      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b78c:	2340      	movs	r3, #64	; 0x40
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b792:	e006      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79a:	e002      	b.n	800b7a2 <UART_SetConfig+0x5a6>
 800b79c:	2380      	movs	r3, #128	; 0x80
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a3f      	ldr	r2, [pc, #252]	; (800b8a4 <UART_SetConfig+0x6a8>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	f040 80f8 	bne.w	800b99e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	dc46      	bgt.n	800b844 <UART_SetConfig+0x648>
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	f2c0 8082 	blt.w	800b8c0 <UART_SetConfig+0x6c4>
 800b7bc:	3b02      	subs	r3, #2
 800b7be:	2b1e      	cmp	r3, #30
 800b7c0:	d87e      	bhi.n	800b8c0 <UART_SetConfig+0x6c4>
 800b7c2:	a201      	add	r2, pc, #4	; (adr r2, 800b7c8 <UART_SetConfig+0x5cc>)
 800b7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c8:	0800b84b 	.word	0x0800b84b
 800b7cc:	0800b8c1 	.word	0x0800b8c1
 800b7d0:	0800b853 	.word	0x0800b853
 800b7d4:	0800b8c1 	.word	0x0800b8c1
 800b7d8:	0800b8c1 	.word	0x0800b8c1
 800b7dc:	0800b8c1 	.word	0x0800b8c1
 800b7e0:	0800b863 	.word	0x0800b863
 800b7e4:	0800b8c1 	.word	0x0800b8c1
 800b7e8:	0800b8c1 	.word	0x0800b8c1
 800b7ec:	0800b8c1 	.word	0x0800b8c1
 800b7f0:	0800b8c1 	.word	0x0800b8c1
 800b7f4:	0800b8c1 	.word	0x0800b8c1
 800b7f8:	0800b8c1 	.word	0x0800b8c1
 800b7fc:	0800b8c1 	.word	0x0800b8c1
 800b800:	0800b873 	.word	0x0800b873
 800b804:	0800b8c1 	.word	0x0800b8c1
 800b808:	0800b8c1 	.word	0x0800b8c1
 800b80c:	0800b8c1 	.word	0x0800b8c1
 800b810:	0800b8c1 	.word	0x0800b8c1
 800b814:	0800b8c1 	.word	0x0800b8c1
 800b818:	0800b8c1 	.word	0x0800b8c1
 800b81c:	0800b8c1 	.word	0x0800b8c1
 800b820:	0800b8c1 	.word	0x0800b8c1
 800b824:	0800b8c1 	.word	0x0800b8c1
 800b828:	0800b8c1 	.word	0x0800b8c1
 800b82c:	0800b8c1 	.word	0x0800b8c1
 800b830:	0800b8c1 	.word	0x0800b8c1
 800b834:	0800b8c1 	.word	0x0800b8c1
 800b838:	0800b8c1 	.word	0x0800b8c1
 800b83c:	0800b8c1 	.word	0x0800b8c1
 800b840:	0800b8b3 	.word	0x0800b8b3
 800b844:	2b40      	cmp	r3, #64	; 0x40
 800b846:	d037      	beq.n	800b8b8 <UART_SetConfig+0x6bc>
 800b848:	e03a      	b.n	800b8c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b84a:	f7fc ff95 	bl	8008778 <HAL_RCCEx_GetD3PCLK1Freq>
 800b84e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b850:	e03c      	b.n	800b8cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b856:	4618      	mov	r0, r3
 800b858:	f7fc ffa4 	bl	80087a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b860:	e034      	b.n	800b8cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b862:	f107 0318 	add.w	r3, r7, #24
 800b866:	4618      	mov	r0, r3
 800b868:	f7fd f8f0 	bl	8008a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b870:	e02c      	b.n	800b8cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <UART_SetConfig+0x69c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0320 	and.w	r3, r3, #32
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d016      	beq.n	800b8ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b87e:	4b06      	ldr	r3, [pc, #24]	; (800b898 <UART_SetConfig+0x69c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	08db      	lsrs	r3, r3, #3
 800b884:	f003 0303 	and.w	r3, r3, #3
 800b888:	4a07      	ldr	r2, [pc, #28]	; (800b8a8 <UART_SetConfig+0x6ac>)
 800b88a:	fa22 f303 	lsr.w	r3, r2, r3
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b890:	e01c      	b.n	800b8cc <UART_SetConfig+0x6d0>
 800b892:	bf00      	nop
 800b894:	40011400 	.word	0x40011400
 800b898:	58024400 	.word	0x58024400
 800b89c:	40007800 	.word	0x40007800
 800b8a0:	40007c00 	.word	0x40007c00
 800b8a4:	58000c00 	.word	0x58000c00
 800b8a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8ac:	4b9d      	ldr	r3, [pc, #628]	; (800bb24 <UART_SetConfig+0x928>)
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b0:	e00c      	b.n	800b8cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8b2:	4b9d      	ldr	r3, [pc, #628]	; (800bb28 <UART_SetConfig+0x92c>)
 800b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b6:	e009      	b.n	800b8cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8be:	e005      	b.n	800b8cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 81de 	beq.w	800bc90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	4a94      	ldr	r2, [pc, #592]	; (800bb2c <UART_SetConfig+0x930>)
 800b8da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d305      	bcc.n	800b904 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b900:	429a      	cmp	r2, r3
 800b902:	d903      	bls.n	800b90c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b90a:	e1c1      	b.n	800bc90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90e:	2200      	movs	r2, #0
 800b910:	60bb      	str	r3, [r7, #8]
 800b912:	60fa      	str	r2, [r7, #12]
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	4a84      	ldr	r2, [pc, #528]	; (800bb2c <UART_SetConfig+0x930>)
 800b91a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	2200      	movs	r2, #0
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	607a      	str	r2, [r7, #4]
 800b926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b92a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b92e:	f7f4 fd2f 	bl	8000390 <__aeabi_uldivmod>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4610      	mov	r0, r2
 800b938:	4619      	mov	r1, r3
 800b93a:	f04f 0200 	mov.w	r2, #0
 800b93e:	f04f 0300 	mov.w	r3, #0
 800b942:	020b      	lsls	r3, r1, #8
 800b944:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b948:	0202      	lsls	r2, r0, #8
 800b94a:	6979      	ldr	r1, [r7, #20]
 800b94c:	6849      	ldr	r1, [r1, #4]
 800b94e:	0849      	lsrs	r1, r1, #1
 800b950:	2000      	movs	r0, #0
 800b952:	460c      	mov	r4, r1
 800b954:	4605      	mov	r5, r0
 800b956:	eb12 0804 	adds.w	r8, r2, r4
 800b95a:	eb43 0905 	adc.w	r9, r3, r5
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	469a      	mov	sl, r3
 800b966:	4693      	mov	fp, r2
 800b968:	4652      	mov	r2, sl
 800b96a:	465b      	mov	r3, fp
 800b96c:	4640      	mov	r0, r8
 800b96e:	4649      	mov	r1, r9
 800b970:	f7f4 fd0e 	bl	8000390 <__aeabi_uldivmod>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4613      	mov	r3, r2
 800b97a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b982:	d308      	bcc.n	800b996 <UART_SetConfig+0x79a>
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b98a:	d204      	bcs.n	800b996 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b992:	60da      	str	r2, [r3, #12]
 800b994:	e17c      	b.n	800bc90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b99c:	e178      	b.n	800bc90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9a6:	f040 80c5 	bne.w	800bb34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b9aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	dc48      	bgt.n	800ba44 <UART_SetConfig+0x848>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	db7b      	blt.n	800baae <UART_SetConfig+0x8b2>
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	d879      	bhi.n	800baae <UART_SetConfig+0x8b2>
 800b9ba:	a201      	add	r2, pc, #4	; (adr r2, 800b9c0 <UART_SetConfig+0x7c4>)
 800b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c0:	0800ba4b 	.word	0x0800ba4b
 800b9c4:	0800ba53 	.word	0x0800ba53
 800b9c8:	0800baaf 	.word	0x0800baaf
 800b9cc:	0800baaf 	.word	0x0800baaf
 800b9d0:	0800ba5b 	.word	0x0800ba5b
 800b9d4:	0800baaf 	.word	0x0800baaf
 800b9d8:	0800baaf 	.word	0x0800baaf
 800b9dc:	0800baaf 	.word	0x0800baaf
 800b9e0:	0800ba6b 	.word	0x0800ba6b
 800b9e4:	0800baaf 	.word	0x0800baaf
 800b9e8:	0800baaf 	.word	0x0800baaf
 800b9ec:	0800baaf 	.word	0x0800baaf
 800b9f0:	0800baaf 	.word	0x0800baaf
 800b9f4:	0800baaf 	.word	0x0800baaf
 800b9f8:	0800baaf 	.word	0x0800baaf
 800b9fc:	0800baaf 	.word	0x0800baaf
 800ba00:	0800ba7b 	.word	0x0800ba7b
 800ba04:	0800baaf 	.word	0x0800baaf
 800ba08:	0800baaf 	.word	0x0800baaf
 800ba0c:	0800baaf 	.word	0x0800baaf
 800ba10:	0800baaf 	.word	0x0800baaf
 800ba14:	0800baaf 	.word	0x0800baaf
 800ba18:	0800baaf 	.word	0x0800baaf
 800ba1c:	0800baaf 	.word	0x0800baaf
 800ba20:	0800baaf 	.word	0x0800baaf
 800ba24:	0800baaf 	.word	0x0800baaf
 800ba28:	0800baaf 	.word	0x0800baaf
 800ba2c:	0800baaf 	.word	0x0800baaf
 800ba30:	0800baaf 	.word	0x0800baaf
 800ba34:	0800baaf 	.word	0x0800baaf
 800ba38:	0800baaf 	.word	0x0800baaf
 800ba3c:	0800baaf 	.word	0x0800baaf
 800ba40:	0800baa1 	.word	0x0800baa1
 800ba44:	2b40      	cmp	r3, #64	; 0x40
 800ba46:	d02e      	beq.n	800baa6 <UART_SetConfig+0x8aa>
 800ba48:	e031      	b.n	800baae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba4a:	f7fb ff23 	bl	8007894 <HAL_RCC_GetPCLK1Freq>
 800ba4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba50:	e033      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba52:	f7fb ff35 	bl	80078c0 <HAL_RCC_GetPCLK2Freq>
 800ba56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba58:	e02f      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fc fea0 	bl	80087a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba68:	e027      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6a:	f107 0318 	add.w	r3, r7, #24
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fc ffec 	bl	8008a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba78:	e01f      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba7a:	4b2d      	ldr	r3, [pc, #180]	; (800bb30 <UART_SetConfig+0x934>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba86:	4b2a      	ldr	r3, [pc, #168]	; (800bb30 <UART_SetConfig+0x934>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	08db      	lsrs	r3, r3, #3
 800ba8c:	f003 0303 	and.w	r3, r3, #3
 800ba90:	4a24      	ldr	r2, [pc, #144]	; (800bb24 <UART_SetConfig+0x928>)
 800ba92:	fa22 f303 	lsr.w	r3, r2, r3
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba98:	e00f      	b.n	800baba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba9a:	4b22      	ldr	r3, [pc, #136]	; (800bb24 <UART_SetConfig+0x928>)
 800ba9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba9e:	e00c      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800baa0:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <UART_SetConfig+0x92c>)
 800baa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa4:	e009      	b.n	800baba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baac:	e005      	b.n	800baba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80e7 	beq.w	800bc90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	4a19      	ldr	r2, [pc, #100]	; (800bb2c <UART_SetConfig+0x930>)
 800bac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bacc:	461a      	mov	r2, r3
 800bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bad4:	005a      	lsls	r2, r3, #1
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	441a      	add	r2, r3
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	2b0f      	cmp	r3, #15
 800baec:	d916      	bls.n	800bb1c <UART_SetConfig+0x920>
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf4:	d212      	bcs.n	800bb1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f023 030f 	bic.w	r3, r3, #15
 800bafe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb18:	60da      	str	r2, [r3, #12]
 800bb1a:	e0b9      	b.n	800bc90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb22:	e0b5      	b.n	800bc90 <UART_SetConfig+0xa94>
 800bb24:	03d09000 	.word	0x03d09000
 800bb28:	003d0900 	.word	0x003d0900
 800bb2c:	080137cc 	.word	0x080137cc
 800bb30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb38:	2b20      	cmp	r3, #32
 800bb3a:	dc49      	bgt.n	800bbd0 <UART_SetConfig+0x9d4>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	db7c      	blt.n	800bc3a <UART_SetConfig+0xa3e>
 800bb40:	2b20      	cmp	r3, #32
 800bb42:	d87a      	bhi.n	800bc3a <UART_SetConfig+0xa3e>
 800bb44:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <UART_SetConfig+0x950>)
 800bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4a:	bf00      	nop
 800bb4c:	0800bbd7 	.word	0x0800bbd7
 800bb50:	0800bbdf 	.word	0x0800bbdf
 800bb54:	0800bc3b 	.word	0x0800bc3b
 800bb58:	0800bc3b 	.word	0x0800bc3b
 800bb5c:	0800bbe7 	.word	0x0800bbe7
 800bb60:	0800bc3b 	.word	0x0800bc3b
 800bb64:	0800bc3b 	.word	0x0800bc3b
 800bb68:	0800bc3b 	.word	0x0800bc3b
 800bb6c:	0800bbf7 	.word	0x0800bbf7
 800bb70:	0800bc3b 	.word	0x0800bc3b
 800bb74:	0800bc3b 	.word	0x0800bc3b
 800bb78:	0800bc3b 	.word	0x0800bc3b
 800bb7c:	0800bc3b 	.word	0x0800bc3b
 800bb80:	0800bc3b 	.word	0x0800bc3b
 800bb84:	0800bc3b 	.word	0x0800bc3b
 800bb88:	0800bc3b 	.word	0x0800bc3b
 800bb8c:	0800bc07 	.word	0x0800bc07
 800bb90:	0800bc3b 	.word	0x0800bc3b
 800bb94:	0800bc3b 	.word	0x0800bc3b
 800bb98:	0800bc3b 	.word	0x0800bc3b
 800bb9c:	0800bc3b 	.word	0x0800bc3b
 800bba0:	0800bc3b 	.word	0x0800bc3b
 800bba4:	0800bc3b 	.word	0x0800bc3b
 800bba8:	0800bc3b 	.word	0x0800bc3b
 800bbac:	0800bc3b 	.word	0x0800bc3b
 800bbb0:	0800bc3b 	.word	0x0800bc3b
 800bbb4:	0800bc3b 	.word	0x0800bc3b
 800bbb8:	0800bc3b 	.word	0x0800bc3b
 800bbbc:	0800bc3b 	.word	0x0800bc3b
 800bbc0:	0800bc3b 	.word	0x0800bc3b
 800bbc4:	0800bc3b 	.word	0x0800bc3b
 800bbc8:	0800bc3b 	.word	0x0800bc3b
 800bbcc:	0800bc2d 	.word	0x0800bc2d
 800bbd0:	2b40      	cmp	r3, #64	; 0x40
 800bbd2:	d02e      	beq.n	800bc32 <UART_SetConfig+0xa36>
 800bbd4:	e031      	b.n	800bc3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbd6:	f7fb fe5d 	bl	8007894 <HAL_RCC_GetPCLK1Freq>
 800bbda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbdc:	e033      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbde:	f7fb fe6f 	bl	80078c0 <HAL_RCC_GetPCLK2Freq>
 800bbe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbe4:	e02f      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fc fdda 	bl	80087a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf4:	e027      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbf6:	f107 0318 	add.w	r3, r7, #24
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fc ff26 	bl	8008a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc04:	e01f      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc06:	4b2d      	ldr	r3, [pc, #180]	; (800bcbc <UART_SetConfig+0xac0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d009      	beq.n	800bc26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc12:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <UART_SetConfig+0xac0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	08db      	lsrs	r3, r3, #3
 800bc18:	f003 0303 	and.w	r3, r3, #3
 800bc1c:	4a28      	ldr	r2, [pc, #160]	; (800bcc0 <UART_SetConfig+0xac4>)
 800bc1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc24:	e00f      	b.n	800bc46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc26:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <UART_SetConfig+0xac4>)
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc2a:	e00c      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc2c:	4b25      	ldr	r3, [pc, #148]	; (800bcc4 <UART_SetConfig+0xac8>)
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc30:	e009      	b.n	800bc46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc38:	e005      	b.n	800bc46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc44:	bf00      	nop
    }

    if (pclk != 0U)
 800bc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d021      	beq.n	800bc90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	4a1d      	ldr	r2, [pc, #116]	; (800bcc8 <UART_SetConfig+0xacc>)
 800bc52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	441a      	add	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	2b0f      	cmp	r3, #15
 800bc74:	d909      	bls.n	800bc8a <UART_SetConfig+0xa8e>
 800bc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc7c:	d205      	bcs.n	800bc8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60da      	str	r2, [r3, #12]
 800bc88:	e002      	b.n	800bc90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	2200      	movs	r2, #0
 800bca4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bcac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3748      	adds	r7, #72	; 0x48
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcba:	bf00      	nop
 800bcbc:	58024400 	.word	0x58024400
 800bcc0:	03d09000 	.word	0x03d09000
 800bcc4:	003d0900 	.word	0x003d0900
 800bcc8:	080137cc 	.word	0x080137cc

0800bccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	f003 0302 	and.w	r3, r3, #2
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3e:	f003 0308 	and.w	r3, r3, #8
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd60:	f003 0310 	and.w	r3, r3, #16
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00a      	beq.n	800bd7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01a      	beq.n	800bde2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdca:	d10a      	bne.n	800bde2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	605a      	str	r2, [r3, #4]
  }
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af02      	add	r7, sp, #8
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be20:	f7f9 fcc0 	bl	80057a4 <HAL_GetTick>
 800be24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	2b08      	cmp	r3, #8
 800be32:	d10e      	bne.n	800be52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f82f 	bl	800bea6 <UART_WaitOnFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be4e:	2303      	movs	r3, #3
 800be50:	e025      	b.n	800be9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	d10e      	bne.n	800be7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f819 	bl	800bea6 <UART_WaitOnFlagUntilTimeout>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e00f      	b.n	800be9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2220      	movs	r2, #32
 800be82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2220      	movs	r2, #32
 800be8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b09c      	sub	sp, #112	; 0x70
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	4613      	mov	r3, r2
 800beb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beb6:	e0a9      	b.n	800c00c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	f000 80a5 	beq.w	800c00c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bec2:	f7f9 fc6f 	bl	80057a4 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bece:	429a      	cmp	r2, r3
 800bed0:	d302      	bcc.n	800bed8 <UART_WaitOnFlagUntilTimeout+0x32>
 800bed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d140      	bne.n	800bf5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800beec:	667b      	str	r3, [r7, #100]	; 0x64
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bef8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800befc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e6      	bne.n	800bed8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	f023 0301 	bic.w	r3, r3, #1
 800bf20:	663b      	str	r3, [r7, #96]	; 0x60
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3308      	adds	r3, #8
 800bf28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e5      	bne.n	800bf0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2220      	movs	r2, #32
 800bf4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e069      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d051      	beq.n	800c00c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf76:	d149      	bne.n	800c00c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	e853 3f00 	ldrex	r3, [r3]
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1e6      	bne.n	800bf82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3308      	adds	r3, #8
 800bfba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	f023 0301 	bic.w	r3, r3, #1
 800bfca:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfd4:	623a      	str	r2, [r7, #32]
 800bfd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	69f9      	ldr	r1, [r7, #28]
 800bfda:	6a3a      	ldr	r2, [r7, #32]
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e5      	bne.n	800bfb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2220      	movs	r2, #32
 800bfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2220      	movs	r2, #32
 800bff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2220      	movs	r2, #32
 800bffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e010      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	69da      	ldr	r2, [r3, #28]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	4013      	ands	r3, r2
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	429a      	cmp	r2, r3
 800c01a:	bf0c      	ite	eq
 800c01c:	2301      	moveq	r3, #1
 800c01e:	2300      	movne	r3, #0
 800c020:	b2db      	uxtb	r3, r3
 800c022:	461a      	mov	r2, r3
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	429a      	cmp	r2, r3
 800c028:	f43f af46 	beq.w	800beb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3770      	adds	r7, #112	; 0x70
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c036:	b480      	push	{r7}
 800c038:	b085      	sub	sp, #20
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <HAL_UARTEx_DisableFifoMode+0x16>
 800c048:	2302      	movs	r3, #2
 800c04a:	e027      	b.n	800c09c <HAL_UARTEx_DisableFifoMode+0x66>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2224      	movs	r2, #36	; 0x24
 800c058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f022 0201 	bic.w	r2, r2, #1
 800c072:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c07a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d101      	bne.n	800c0c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e02d      	b.n	800c11c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2224      	movs	r2, #36	; 0x24
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0201 	bic.w	r2, r2, #1
 800c0e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	430a      	orrs	r2, r1
 800c0fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f84f 	bl	800c1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c138:	2302      	movs	r3, #2
 800c13a:	e02d      	b.n	800c198 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2224      	movs	r2, #36	; 0x24
 800c148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f022 0201 	bic.w	r2, r2, #1
 800c162:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f811 	bl	800c1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2220      	movs	r2, #32
 800c18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d108      	bne.n	800c1c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1c0:	e031      	b.n	800c226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1c2:	2310      	movs	r3, #16
 800c1c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1c6:	2310      	movs	r3, #16
 800c1c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	0e5b      	lsrs	r3, r3, #25
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	f003 0307 	and.w	r3, r3, #7
 800c1d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	0f5b      	lsrs	r3, r3, #29
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	7b3a      	ldrb	r2, [r7, #12]
 800c1ee:	4911      	ldr	r1, [pc, #68]	; (800c234 <UARTEx_SetNbDataToProcess+0x94>)
 800c1f0:	5c8a      	ldrb	r2, [r1, r2]
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1f6:	7b3a      	ldrb	r2, [r7, #12]
 800c1f8:	490f      	ldr	r1, [pc, #60]	; (800c238 <UARTEx_SetNbDataToProcess+0x98>)
 800c1fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	7b7a      	ldrb	r2, [r7, #13]
 800c20c:	4909      	ldr	r1, [pc, #36]	; (800c234 <UARTEx_SetNbDataToProcess+0x94>)
 800c20e:	5c8a      	ldrb	r2, [r1, r2]
 800c210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c214:	7b7a      	ldrb	r2, [r7, #13]
 800c216:	4908      	ldr	r1, [pc, #32]	; (800c238 <UARTEx_SetNbDataToProcess+0x98>)
 800c218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c21a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	080137e4 	.word	0x080137e4
 800c238:	080137ec 	.word	0x080137ec

0800c23c <__NVIC_SetPriority>:
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	6039      	str	r1, [r7, #0]
 800c246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	db0a      	blt.n	800c266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	b2da      	uxtb	r2, r3
 800c254:	490c      	ldr	r1, [pc, #48]	; (800c288 <__NVIC_SetPriority+0x4c>)
 800c256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c25a:	0112      	lsls	r2, r2, #4
 800c25c:	b2d2      	uxtb	r2, r2
 800c25e:	440b      	add	r3, r1
 800c260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c264:	e00a      	b.n	800c27c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	4908      	ldr	r1, [pc, #32]	; (800c28c <__NVIC_SetPriority+0x50>)
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	f003 030f 	and.w	r3, r3, #15
 800c272:	3b04      	subs	r3, #4
 800c274:	0112      	lsls	r2, r2, #4
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	440b      	add	r3, r1
 800c27a:	761a      	strb	r2, [r3, #24]
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	e000e100 	.word	0xe000e100
 800c28c:	e000ed00 	.word	0xe000ed00

0800c290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c294:	2100      	movs	r1, #0
 800c296:	f06f 0004 	mvn.w	r0, #4
 800c29a:	f7ff ffcf 	bl	800c23c <__NVIC_SetPriority>
#endif
}
 800c29e:	bf00      	nop
 800c2a0:	bd80      	pop	{r7, pc}
	...

0800c2a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2aa:	f3ef 8305 	mrs	r3, IPSR
 800c2ae:	603b      	str	r3, [r7, #0]
  return(result);
 800c2b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2b6:	f06f 0305 	mvn.w	r3, #5
 800c2ba:	607b      	str	r3, [r7, #4]
 800c2bc:	e00c      	b.n	800c2d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2be:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <osKernelInitialize+0x44>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d105      	bne.n	800c2d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2c6:	4b08      	ldr	r3, [pc, #32]	; (800c2e8 <osKernelInitialize+0x44>)
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	607b      	str	r3, [r7, #4]
 800c2d0:	e002      	b.n	800c2d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2d8:	687b      	ldr	r3, [r7, #4]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	240009f4 	.word	0x240009f4

0800c2ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2f2:	f3ef 8305 	mrs	r3, IPSR
 800c2f6:	603b      	str	r3, [r7, #0]
  return(result);
 800c2f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2fe:	f06f 0305 	mvn.w	r3, #5
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	e010      	b.n	800c328 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c306:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <osKernelStart+0x48>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d109      	bne.n	800c322 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c30e:	f7ff ffbf 	bl	800c290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c312:	4b08      	ldr	r3, [pc, #32]	; (800c334 <osKernelStart+0x48>)
 800c314:	2202      	movs	r2, #2
 800c316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c318:	f001 fdc4 	bl	800dea4 <vTaskStartScheduler>
      stat = osOK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	607b      	str	r3, [r7, #4]
 800c320:	e002      	b.n	800c328 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c322:	f04f 33ff 	mov.w	r3, #4294967295
 800c326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c328:	687b      	ldr	r3, [r7, #4]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	240009f4 	.word	0x240009f4

0800c338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08e      	sub	sp, #56	; 0x38
 800c33c:	af04      	add	r7, sp, #16
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c344:	2300      	movs	r3, #0
 800c346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c348:	f3ef 8305 	mrs	r3, IPSR
 800c34c:	617b      	str	r3, [r7, #20]
  return(result);
 800c34e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c350:	2b00      	cmp	r3, #0
 800c352:	d17e      	bne.n	800c452 <osThreadNew+0x11a>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d07b      	beq.n	800c452 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c35a:	2380      	movs	r3, #128	; 0x80
 800c35c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c35e:	2318      	movs	r3, #24
 800c360:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c366:	f04f 33ff 	mov.w	r3, #4294967295
 800c36a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d045      	beq.n	800c3fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <osThreadNew+0x48>
        name = attr->name;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d008      	beq.n	800c3a6 <osThreadNew+0x6e>
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b38      	cmp	r3, #56	; 0x38
 800c398:	d805      	bhi.n	800c3a6 <osThreadNew+0x6e>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <osThreadNew+0x72>
        return (NULL);
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e054      	b.n	800c454 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	089b      	lsrs	r3, r3, #2
 800c3b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00e      	beq.n	800c3e0 <osThreadNew+0xa8>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	2bbb      	cmp	r3, #187	; 0xbb
 800c3c8:	d90a      	bls.n	800c3e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d006      	beq.n	800c3e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	695b      	ldr	r3, [r3, #20]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <osThreadNew+0xa8>
        mem = 1;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	61bb      	str	r3, [r7, #24]
 800c3de:	e010      	b.n	800c402 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10c      	bne.n	800c402 <osThreadNew+0xca>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d108      	bne.n	800c402 <osThreadNew+0xca>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <osThreadNew+0xca>
          mem = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	61bb      	str	r3, [r7, #24]
 800c3fc:	e001      	b.n	800c402 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d110      	bne.n	800c42a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c410:	9202      	str	r2, [sp, #8]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	6a3a      	ldr	r2, [r7, #32]
 800c41c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f001 fb54 	bl	800dacc <xTaskCreateStatic>
 800c424:	4603      	mov	r3, r0
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	e013      	b.n	800c452 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d110      	bne.n	800c452 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	b29a      	uxth	r2, r3
 800c434:	f107 0310 	add.w	r3, r7, #16
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f001 fb9f 	bl	800db86 <xTaskCreate>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d001      	beq.n	800c452 <osThreadNew+0x11a>
            hTask = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c452:	693b      	ldr	r3, [r7, #16]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3728      	adds	r7, #40	; 0x28
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c464:	f3ef 8305 	mrs	r3, IPSR
 800c468:	60bb      	str	r3, [r7, #8]
  return(result);
 800c46a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d003      	beq.n	800c478 <osDelay+0x1c>
    stat = osErrorISR;
 800c470:	f06f 0305 	mvn.w	r3, #5
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	e007      	b.n	800c488 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 fcda 	bl	800de3c <vTaskDelay>
    }
  }

  return (stat);
 800c488:	68fb      	ldr	r3, [r7, #12]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c492:	b580      	push	{r7, lr}
 800c494:	b088      	sub	sp, #32
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4a4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d174      	bne.n	800c594 <osMutexNew+0x102>
    if (attr != NULL) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	61bb      	str	r3, [r7, #24]
 800c4b6:	e001      	b.n	800c4bc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <osMutexNew+0x3a>
      rmtx = 1U;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e001      	b.n	800c4d0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d15c      	bne.n	800c594 <osMutexNew+0x102>
      mem = -1;
 800c4da:	f04f 33ff 	mov.w	r3, #4294967295
 800c4de:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d015      	beq.n	800c512 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d006      	beq.n	800c4fc <osMutexNew+0x6a>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	2b4f      	cmp	r3, #79	; 0x4f
 800c4f4:	d902      	bls.n	800c4fc <osMutexNew+0x6a>
          mem = 1;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	e00c      	b.n	800c516 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d108      	bne.n	800c516 <osMutexNew+0x84>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <osMutexNew+0x84>
            mem = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	e001      	b.n	800c516 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d112      	bne.n	800c542 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d007      	beq.n	800c532 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	4619      	mov	r1, r3
 800c528:	2004      	movs	r0, #4
 800c52a:	f000 fecc 	bl	800d2c6 <xQueueCreateMutexStatic>
 800c52e:	61f8      	str	r0, [r7, #28]
 800c530:	e016      	b.n	800c560 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	4619      	mov	r1, r3
 800c538:	2001      	movs	r0, #1
 800c53a:	f000 fec4 	bl	800d2c6 <xQueueCreateMutexStatic>
 800c53e:	61f8      	str	r0, [r7, #28]
 800c540:	e00e      	b.n	800c560 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10b      	bne.n	800c560 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d004      	beq.n	800c558 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c54e:	2004      	movs	r0, #4
 800c550:	f000 fea1 	bl	800d296 <xQueueCreateMutex>
 800c554:	61f8      	str	r0, [r7, #28]
 800c556:	e003      	b.n	800c560 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c558:	2001      	movs	r0, #1
 800c55a:	f000 fe9c 	bl	800d296 <xQueueCreateMutex>
 800c55e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00c      	beq.n	800c580 <osMutexNew+0xee>
        if (attr != NULL) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <osMutexNew+0xe2>
          name = attr->name;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	e001      	b.n	800c578 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c578:	68f9      	ldr	r1, [r7, #12]
 800c57a:	69f8      	ldr	r0, [r7, #28]
 800c57c:	f001 fa48 	bl	800da10 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d006      	beq.n	800c594 <osMutexNew+0x102>
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	f043 0301 	orr.w	r3, r3, #1
 800c592:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c594:	69fb      	ldr	r3, [r7, #28]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3720      	adds	r7, #32
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4a07      	ldr	r2, [pc, #28]	; (800c5cc <vApplicationGetIdleTaskMemory+0x2c>)
 800c5b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <vApplicationGetIdleTaskMemory+0x30>)
 800c5b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2280      	movs	r2, #128	; 0x80
 800c5bc:	601a      	str	r2, [r3, #0]
}
 800c5be:	bf00      	nop
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	240009f8 	.word	0x240009f8
 800c5d0:	24000ab4 	.word	0x24000ab4

0800c5d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4a07      	ldr	r2, [pc, #28]	; (800c600 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	4a06      	ldr	r2, [pc, #24]	; (800c604 <vApplicationGetTimerTaskMemory+0x30>)
 800c5ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5f2:	601a      	str	r2, [r3, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	24000cb4 	.word	0x24000cb4
 800c604:	24000d70 	.word	0x24000d70

0800c608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08a      	sub	sp, #40	; 0x28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c614:	f001 fcb6 	bl	800df84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c618:	4b5b      	ldr	r3, [pc, #364]	; (800c788 <pvPortMalloc+0x180>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c620:	f000 f920 	bl	800c864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c624:	4b59      	ldr	r3, [pc, #356]	; (800c78c <pvPortMalloc+0x184>)
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4013      	ands	r3, r2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f040 8093 	bne.w	800c758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d01d      	beq.n	800c674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c638:	2208      	movs	r2, #8
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b00      	cmp	r3, #0
 800c648:	d014      	beq.n	800c674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f023 0307 	bic.w	r3, r3, #7
 800c650:	3308      	adds	r3, #8
 800c652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d06e      	beq.n	800c758 <pvPortMalloc+0x150>
 800c67a:	4b45      	ldr	r3, [pc, #276]	; (800c790 <pvPortMalloc+0x188>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d869      	bhi.n	800c758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c684:	4b43      	ldr	r3, [pc, #268]	; (800c794 <pvPortMalloc+0x18c>)
 800c686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c688:	4b42      	ldr	r3, [pc, #264]	; (800c794 <pvPortMalloc+0x18c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c68e:	e004      	b.n	800c69a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d903      	bls.n	800c6ac <pvPortMalloc+0xa4>
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1f1      	bne.n	800c690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6ac:	4b36      	ldr	r3, [pc, #216]	; (800c788 <pvPortMalloc+0x180>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d050      	beq.n	800c758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2208      	movs	r2, #8
 800c6bc:	4413      	add	r3, r2
 800c6be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d91f      	bls.n	800c718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <pvPortMalloc+0xf8>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	613b      	str	r3, [r7, #16]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	1ad2      	subs	r2, r2, r3
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c712:	69b8      	ldr	r0, [r7, #24]
 800c714:	f000 f908 	bl	800c928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c718:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <pvPortMalloc+0x188>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	4a1b      	ldr	r2, [pc, #108]	; (800c790 <pvPortMalloc+0x188>)
 800c724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c726:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <pvPortMalloc+0x188>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	4b1b      	ldr	r3, [pc, #108]	; (800c798 <pvPortMalloc+0x190>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d203      	bcs.n	800c73a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c732:	4b17      	ldr	r3, [pc, #92]	; (800c790 <pvPortMalloc+0x188>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a18      	ldr	r2, [pc, #96]	; (800c798 <pvPortMalloc+0x190>)
 800c738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	4b13      	ldr	r3, [pc, #76]	; (800c78c <pvPortMalloc+0x184>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	431a      	orrs	r2, r3
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <pvPortMalloc+0x194>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	4a11      	ldr	r2, [pc, #68]	; (800c79c <pvPortMalloc+0x194>)
 800c756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c758:	f001 fc22 	bl	800dfa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <pvPortMalloc+0x174>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	60fb      	str	r3, [r7, #12]
}
 800c778:	bf00      	nop
 800c77a:	e7fe      	b.n	800c77a <pvPortMalloc+0x172>
	return pvReturn;
 800c77c:	69fb      	ldr	r3, [r7, #28]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3728      	adds	r7, #40	; 0x28
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	24004d78 	.word	0x24004d78
 800c78c:	24004d8c 	.word	0x24004d8c
 800c790:	24004d7c 	.word	0x24004d7c
 800c794:	24004d70 	.word	0x24004d70
 800c798:	24004d80 	.word	0x24004d80
 800c79c:	24004d84 	.word	0x24004d84

0800c7a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d04d      	beq.n	800c84e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7b2:	2308      	movs	r3, #8
 800c7b4:	425b      	negs	r3, r3
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	4b24      	ldr	r3, [pc, #144]	; (800c858 <vPortFree+0xb8>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10a      	bne.n	800c7e4 <vPortFree+0x44>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	60fb      	str	r3, [r7, #12]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <vPortFree+0x62>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	60bb      	str	r3, [r7, #8]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	4b14      	ldr	r3, [pc, #80]	; (800c858 <vPortFree+0xb8>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4013      	ands	r3, r2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d01e      	beq.n	800c84e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d11a      	bne.n	800c84e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <vPortFree+0xb8>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	43db      	mvns	r3, r3
 800c822:	401a      	ands	r2, r3
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c828:	f001 fbac 	bl	800df84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <vPortFree+0xbc>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4413      	add	r3, r2
 800c836:	4a09      	ldr	r2, [pc, #36]	; (800c85c <vPortFree+0xbc>)
 800c838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c83a:	6938      	ldr	r0, [r7, #16]
 800c83c:	f000 f874 	bl	800c928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <vPortFree+0xc0>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3301      	adds	r3, #1
 800c846:	4a06      	ldr	r2, [pc, #24]	; (800c860 <vPortFree+0xc0>)
 800c848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c84a:	f001 fba9 	bl	800dfa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c84e:	bf00      	nop
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	24004d8c 	.word	0x24004d8c
 800c85c:	24004d7c 	.word	0x24004d7c
 800c860:	24004d88 	.word	0x24004d88

0800c864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c870:	4b27      	ldr	r3, [pc, #156]	; (800c910 <prvHeapInit+0xac>)
 800c872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00c      	beq.n	800c898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3307      	adds	r3, #7
 800c882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f023 0307 	bic.w	r3, r3, #7
 800c88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	4a1f      	ldr	r2, [pc, #124]	; (800c910 <prvHeapInit+0xac>)
 800c894:	4413      	add	r3, r2
 800c896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c89c:	4a1d      	ldr	r2, [pc, #116]	; (800c914 <prvHeapInit+0xb0>)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8a2:	4b1c      	ldr	r3, [pc, #112]	; (800c914 <prvHeapInit+0xb0>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	1a9b      	subs	r3, r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f023 0307 	bic.w	r3, r3, #7
 800c8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4a15      	ldr	r2, [pc, #84]	; (800c918 <prvHeapInit+0xb4>)
 800c8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8c6:	4b14      	ldr	r3, [pc, #80]	; (800c918 <prvHeapInit+0xb4>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ce:	4b12      	ldr	r3, [pc, #72]	; (800c918 <prvHeapInit+0xb4>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	1ad2      	subs	r2, r2, r3
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <prvHeapInit+0xb4>)
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	4a0a      	ldr	r2, [pc, #40]	; (800c91c <prvHeapInit+0xb8>)
 800c8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	4a09      	ldr	r2, [pc, #36]	; (800c920 <prvHeapInit+0xbc>)
 800c8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8fc:	4b09      	ldr	r3, [pc, #36]	; (800c924 <prvHeapInit+0xc0>)
 800c8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c902:	601a      	str	r2, [r3, #0]
}
 800c904:	bf00      	nop
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	24001170 	.word	0x24001170
 800c914:	24004d70 	.word	0x24004d70
 800c918:	24004d78 	.word	0x24004d78
 800c91c:	24004d80 	.word	0x24004d80
 800c920:	24004d7c 	.word	0x24004d7c
 800c924:	24004d8c 	.word	0x24004d8c

0800c928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c930:	4b28      	ldr	r3, [pc, #160]	; (800c9d4 <prvInsertBlockIntoFreeList+0xac>)
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	e002      	b.n	800c93c <prvInsertBlockIntoFreeList+0x14>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	429a      	cmp	r2, r3
 800c944:	d8f7      	bhi.n	800c936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	429a      	cmp	r2, r3
 800c956:	d108      	bne.n	800c96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	441a      	add	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	441a      	add	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d118      	bne.n	800c9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d00d      	beq.n	800c9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	441a      	add	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	e008      	b.n	800c9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9a6:	4b0c      	ldr	r3, [pc, #48]	; (800c9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	e003      	b.n	800c9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d002      	beq.n	800c9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c6:	bf00      	nop
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	24004d70 	.word	0x24004d70
 800c9d8:	24004d78 	.word	0x24004d78

0800c9dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f103 0208 	add.w	r2, r3, #8
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f103 0208 	add.w	r2, r3, #8
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f103 0208 	add.w	r2, r3, #8
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca2a:	bf00      	nop
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca36:	b480      	push	{r7}
 800ca38:	b085      	sub	sp, #20
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	601a      	str	r2, [r3, #0]
}
 800ca72:	bf00      	nop
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b085      	sub	sp, #20
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca94:	d103      	bne.n	800ca9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e00c      	b.n	800cab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3308      	adds	r3, #8
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e002      	b.n	800caac <vListInsert+0x2e>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d2f6      	bcs.n	800caa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	6892      	ldr	r2, [r2, #8]
 800cb06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	6852      	ldr	r2, [r2, #4]
 800cb10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d103      	bne.n	800cb24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	1e5a      	subs	r2, r3, #1
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3b04      	subs	r3, #4
 800cb54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3b04      	subs	r3, #4
 800cb62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f023 0201 	bic.w	r2, r3, #1
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3b04      	subs	r3, #4
 800cb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb74:	4a0c      	ldr	r2, [pc, #48]	; (800cba8 <pxPortInitialiseStack+0x64>)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3b14      	subs	r3, #20
 800cb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3b04      	subs	r3, #4
 800cb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f06f 0202 	mvn.w	r2, #2
 800cb92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3b20      	subs	r3, #32
 800cb98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	0800cbad 	.word	0x0800cbad

0800cbac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbb6:	4b12      	ldr	r3, [pc, #72]	; (800cc00 <prvTaskExitError+0x54>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbe:	d00a      	beq.n	800cbd6 <prvTaskExitError+0x2a>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	60fb      	str	r3, [r7, #12]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <prvTaskExitError+0x28>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60bb      	str	r3, [r7, #8]
}
 800cbe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbea:	bf00      	nop
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0fc      	beq.n	800cbec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	24000018 	.word	0x24000018
	...

0800cc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <pxCurrentTCBConst2>)
 800cc12:	6819      	ldr	r1, [r3, #0]
 800cc14:	6808      	ldr	r0, [r1, #0]
 800cc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1a:	f380 8809 	msr	PSP, r0
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f04f 0000 	mov.w	r0, #0
 800cc26:	f380 8811 	msr	BASEPRI, r0
 800cc2a:	4770      	bx	lr
 800cc2c:	f3af 8000 	nop.w

0800cc30 <pxCurrentTCBConst2>:
 800cc30:	24004dd8 	.word	0x24004dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc34:	bf00      	nop
 800cc36:	bf00      	nop

0800cc38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc38:	4808      	ldr	r0, [pc, #32]	; (800cc5c <prvPortStartFirstTask+0x24>)
 800cc3a:	6800      	ldr	r0, [r0, #0]
 800cc3c:	6800      	ldr	r0, [r0, #0]
 800cc3e:	f380 8808 	msr	MSP, r0
 800cc42:	f04f 0000 	mov.w	r0, #0
 800cc46:	f380 8814 	msr	CONTROL, r0
 800cc4a:	b662      	cpsie	i
 800cc4c:	b661      	cpsie	f
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	df00      	svc	0
 800cc58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc5a:	bf00      	nop
 800cc5c:	e000ed08 	.word	0xe000ed08

0800cc60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc66:	4b46      	ldr	r3, [pc, #280]	; (800cd80 <xPortStartScheduler+0x120>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a46      	ldr	r2, [pc, #280]	; (800cd84 <xPortStartScheduler+0x124>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d10a      	bne.n	800cc86 <xPortStartScheduler+0x26>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	613b      	str	r3, [r7, #16]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc86:	4b3e      	ldr	r3, [pc, #248]	; (800cd80 <xPortStartScheduler+0x120>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a3f      	ldr	r2, [pc, #252]	; (800cd88 <xPortStartScheduler+0x128>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d10a      	bne.n	800cca6 <xPortStartScheduler+0x46>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	60fb      	str	r3, [r7, #12]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cca6:	4b39      	ldr	r3, [pc, #228]	; (800cd8c <xPortStartScheduler+0x12c>)
 800cca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	22ff      	movs	r2, #255	; 0xff
 800ccb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccc0:	78fb      	ldrb	r3, [r7, #3]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	4b31      	ldr	r3, [pc, #196]	; (800cd90 <xPortStartScheduler+0x130>)
 800cccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccce:	4b31      	ldr	r3, [pc, #196]	; (800cd94 <xPortStartScheduler+0x134>)
 800ccd0:	2207      	movs	r2, #7
 800ccd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccd4:	e009      	b.n	800ccea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ccd6:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <xPortStartScheduler+0x134>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	4a2d      	ldr	r2, [pc, #180]	; (800cd94 <xPortStartScheduler+0x134>)
 800ccde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf2:	2b80      	cmp	r3, #128	; 0x80
 800ccf4:	d0ef      	beq.n	800ccd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccf6:	4b27      	ldr	r3, [pc, #156]	; (800cd94 <xPortStartScheduler+0x134>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f1c3 0307 	rsb	r3, r3, #7
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	d00a      	beq.n	800cd18 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	60bb      	str	r3, [r7, #8]
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd18:	4b1e      	ldr	r3, [pc, #120]	; (800cd94 <xPortStartScheduler+0x134>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	021b      	lsls	r3, r3, #8
 800cd1e:	4a1d      	ldr	r2, [pc, #116]	; (800cd94 <xPortStartScheduler+0x134>)
 800cd20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd22:	4b1c      	ldr	r3, [pc, #112]	; (800cd94 <xPortStartScheduler+0x134>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd2a:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <xPortStartScheduler+0x134>)
 800cd2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd36:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <xPortStartScheduler+0x138>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a17      	ldr	r2, [pc, #92]	; (800cd98 <xPortStartScheduler+0x138>)
 800cd3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd42:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <xPortStartScheduler+0x138>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a14      	ldr	r2, [pc, #80]	; (800cd98 <xPortStartScheduler+0x138>)
 800cd48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd4e:	f000 f8dd 	bl	800cf0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd52:	4b12      	ldr	r3, [pc, #72]	; (800cd9c <xPortStartScheduler+0x13c>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd58:	f000 f8fc 	bl	800cf54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd5c:	4b10      	ldr	r3, [pc, #64]	; (800cda0 <xPortStartScheduler+0x140>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a0f      	ldr	r2, [pc, #60]	; (800cda0 <xPortStartScheduler+0x140>)
 800cd62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd68:	f7ff ff66 	bl	800cc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd6c:	f001 fa80 	bl	800e270 <vTaskSwitchContext>
	prvTaskExitError();
 800cd70:	f7ff ff1c 	bl	800cbac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	e000ed00 	.word	0xe000ed00
 800cd84:	410fc271 	.word	0x410fc271
 800cd88:	410fc270 	.word	0x410fc270
 800cd8c:	e000e400 	.word	0xe000e400
 800cd90:	24004d90 	.word	0x24004d90
 800cd94:	24004d94 	.word	0x24004d94
 800cd98:	e000ed20 	.word	0xe000ed20
 800cd9c:	24000018 	.word	0x24000018
 800cda0:	e000ef34 	.word	0xe000ef34

0800cda4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	607b      	str	r3, [r7, #4]
}
 800cdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdbe:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	4a0d      	ldr	r2, [pc, #52]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d10f      	bne.n	800cdf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdd0:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <vPortEnterCritical+0x5c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	603b      	str	r3, [r7, #0]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <vPortEnterCritical+0x4a>
	}
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	24000018 	.word	0x24000018
 800ce00:	e000ed04 	.word	0xe000ed04

0800ce04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce0a:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <vPortExitCritical+0x50>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10a      	bne.n	800ce28 <vPortExitCritical+0x24>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	607b      	str	r3, [r7, #4]
}
 800ce24:	bf00      	nop
 800ce26:	e7fe      	b.n	800ce26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <vPortExitCritical+0x50>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4a09      	ldr	r2, [pc, #36]	; (800ce54 <vPortExitCritical+0x50>)
 800ce30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce32:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <vPortExitCritical+0x50>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <vPortExitCritical+0x42>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce46:	bf00      	nop
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	24000018 	.word	0x24000018
	...

0800ce60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce60:	f3ef 8009 	mrs	r0, PSP
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <pxCurrentTCBConst>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f01e 0f10 	tst.w	lr, #16
 800ce70:	bf08      	it	eq
 800ce72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7a:	6010      	str	r0, [r2, #0]
 800ce7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce84:	f380 8811 	msr	BASEPRI, r0
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f001 f9ee 	bl	800e270 <vTaskSwitchContext>
 800ce94:	f04f 0000 	mov.w	r0, #0
 800ce98:	f380 8811 	msr	BASEPRI, r0
 800ce9c:	bc09      	pop	{r0, r3}
 800ce9e:	6819      	ldr	r1, [r3, #0]
 800cea0:	6808      	ldr	r0, [r1, #0]
 800cea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea6:	f01e 0f10 	tst.w	lr, #16
 800ceaa:	bf08      	it	eq
 800ceac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ceb0:	f380 8809 	msr	PSP, r0
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	f3af 8000 	nop.w

0800cec0 <pxCurrentTCBConst>:
 800cec0:	24004dd8 	.word	0x24004dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop

0800cec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	607b      	str	r3, [r7, #4]
}
 800cee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cee2:	f001 f90b 	bl	800e0fc <xTaskIncrementTick>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <xPortSysTickHandler+0x40>)
 800ceee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	2300      	movs	r3, #0
 800cef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	f383 8811 	msr	BASEPRI, r3
}
 800cefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf10:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <vPortSetupTimerInterrupt+0x34>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf16:	4b0b      	ldr	r3, [pc, #44]	; (800cf44 <vPortSetupTimerInterrupt+0x38>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <vPortSetupTimerInterrupt+0x3c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a0a      	ldr	r2, [pc, #40]	; (800cf4c <vPortSetupTimerInterrupt+0x40>)
 800cf22:	fba2 2303 	umull	r2, r3, r2, r3
 800cf26:	099b      	lsrs	r3, r3, #6
 800cf28:	4a09      	ldr	r2, [pc, #36]	; (800cf50 <vPortSetupTimerInterrupt+0x44>)
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf2e:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <vPortSetupTimerInterrupt+0x34>)
 800cf30:	2207      	movs	r2, #7
 800cf32:	601a      	str	r2, [r3, #0]
}
 800cf34:	bf00      	nop
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	e000e010 	.word	0xe000e010
 800cf44:	e000e018 	.word	0xe000e018
 800cf48:	24000000 	.word	0x24000000
 800cf4c:	10624dd3 	.word	0x10624dd3
 800cf50:	e000e014 	.word	0xe000e014

0800cf54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf64 <vPortEnableVFP+0x10>
 800cf58:	6801      	ldr	r1, [r0, #0]
 800cf5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf5e:	6001      	str	r1, [r0, #0]
 800cf60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf62:	bf00      	nop
 800cf64:	e000ed88 	.word	0xe000ed88

0800cf68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf6e:	f3ef 8305 	mrs	r3, IPSR
 800cf72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b0f      	cmp	r3, #15
 800cf78:	d914      	bls.n	800cfa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf7a:	4a17      	ldr	r2, [pc, #92]	; (800cfd8 <vPortValidateInterruptPriority+0x70>)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf84:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <vPortValidateInterruptPriority+0x74>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	7afa      	ldrb	r2, [r7, #11]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d20a      	bcs.n	800cfa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	607b      	str	r3, [r7, #4]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfa4:	4b0e      	ldr	r3, [pc, #56]	; (800cfe0 <vPortValidateInterruptPriority+0x78>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <vPortValidateInterruptPriority+0x7c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d90a      	bls.n	800cfca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	603b      	str	r3, [r7, #0]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <vPortValidateInterruptPriority+0x60>
	}
 800cfca:	bf00      	nop
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	e000e3f0 	.word	0xe000e3f0
 800cfdc:	24004d90 	.word	0x24004d90
 800cfe0:	e000ed0c 	.word	0xe000ed0c
 800cfe4:	24004d94 	.word	0x24004d94

0800cfe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xQueueGenericReset+0x2a>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	60bb      	str	r3, [r7, #8]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d012:	f7ff fec7 	bl	800cda4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d022:	fb01 f303 	mul.w	r3, r1, r3
 800d026:	441a      	add	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d042:	3b01      	subs	r3, #1
 800d044:	68f9      	ldr	r1, [r7, #12]
 800d046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d048:	fb01 f303 	mul.w	r3, r1, r3
 800d04c:	441a      	add	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	22ff      	movs	r2, #255	; 0xff
 800d056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	22ff      	movs	r2, #255	; 0xff
 800d05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d114      	bne.n	800d092 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d01a      	beq.n	800d0a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3310      	adds	r3, #16
 800d074:	4618      	mov	r0, r3
 800d076:	f001 f9af 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d012      	beq.n	800d0a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d080:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <xQueueGenericReset+0xcc>)
 800d082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	e009      	b.n	800d0a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3310      	adds	r3, #16
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff fca0 	bl	800c9dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3324      	adds	r3, #36	; 0x24
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff fc9b 	bl	800c9dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0a6:	f7ff fead 	bl	800ce04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0aa:	2301      	movs	r3, #1
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	e000ed04 	.word	0xe000ed04

0800d0b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08e      	sub	sp, #56	; 0x38
 800d0bc:	af02      	add	r7, sp, #8
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10a      	bne.n	800d0e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0de:	bf00      	nop
 800d0e0:	e7fe      	b.n	800d0e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0fa:	bf00      	nop
 800d0fc:	e7fe      	b.n	800d0fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <xQueueGenericCreateStatic+0x52>
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <xQueueGenericCreateStatic+0x56>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <xQueueGenericCreateStatic+0x58>
 800d10e:	2300      	movs	r3, #0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10a      	bne.n	800d12a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	623b      	str	r3, [r7, #32]
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <xQueueGenericCreateStatic+0x7e>
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d101      	bne.n	800d13a <xQueueGenericCreateStatic+0x82>
 800d136:	2301      	movs	r3, #1
 800d138:	e000      	b.n	800d13c <xQueueGenericCreateStatic+0x84>
 800d13a:	2300      	movs	r3, #0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10a      	bne.n	800d156 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	61fb      	str	r3, [r7, #28]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d156:	2350      	movs	r3, #80	; 0x50
 800d158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b50      	cmp	r3, #80	; 0x50
 800d15e:	d00a      	beq.n	800d176 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	61bb      	str	r3, [r7, #24]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d176:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00d      	beq.n	800d19e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d18a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	4613      	mov	r3, r2
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	68b9      	ldr	r1, [r7, #8]
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 f83f 	bl	800d21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3730      	adds	r7, #48	; 0x30
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b08a      	sub	sp, #40	; 0x28
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	613b      	str	r3, [r7, #16]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	68ba      	ldr	r2, [r7, #8]
 800d1d6:	fb02 f303 	mul.w	r3, r2, r3
 800d1da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	3350      	adds	r3, #80	; 0x50
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff fa11 	bl	800c608 <pvPortMalloc>
 800d1e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d011      	beq.n	800d212 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	3350      	adds	r3, #80	; 0x50
 800d1f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d200:	79fa      	ldrb	r2, [r7, #7]
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	4613      	mov	r3, r2
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	68b9      	ldr	r1, [r7, #8]
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 f805 	bl	800d21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d212:	69bb      	ldr	r3, [r7, #24]
	}
 800d214:	4618      	mov	r0, r3
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d103      	bne.n	800d238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	e002      	b.n	800d23e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	68ba      	ldr	r2, [r7, #8]
 800d248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d24a:	2101      	movs	r1, #1
 800d24c:	69b8      	ldr	r0, [r7, #24]
 800d24e:	f7ff fecb 	bl	800cfe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	78fa      	ldrb	r2, [r7, #3]
 800d256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d25a:	bf00      	nop
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00e      	beq.n	800d28e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d282:	2300      	movs	r3, #0
 800d284:	2200      	movs	r2, #0
 800d286:	2100      	movs	r1, #0
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f837 	bl	800d2fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	4603      	mov	r3, r0
 800d29e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	617b      	str	r3, [r7, #20]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	6939      	ldr	r1, [r7, #16]
 800d2ae:	6978      	ldr	r0, [r7, #20]
 800d2b0:	f7ff ff7a 	bl	800d1a8 <xQueueGenericCreate>
 800d2b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff ffd3 	bl	800d262 <prvInitialiseMutex>

		return xNewQueue;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
	}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b088      	sub	sp, #32
 800d2ca:	af02      	add	r7, sp, #8
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	6039      	str	r1, [r7, #0]
 800d2d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	6939      	ldr	r1, [r7, #16]
 800d2e4:	6978      	ldr	r0, [r7, #20]
 800d2e6:	f7ff fee7 	bl	800d0b8 <xQueueGenericCreateStatic>
 800d2ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff ffb8 	bl	800d262 <prvInitialiseMutex>

		return xNewQueue;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08e      	sub	sp, #56	; 0x38
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d30a:	2300      	movs	r3, #0
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <xQueueGenericSend+0x32>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <xQueueGenericSend+0x40>
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d101      	bne.n	800d340 <xQueueGenericSend+0x44>
 800d33c:	2301      	movs	r3, #1
 800d33e:	e000      	b.n	800d342 <xQueueGenericSend+0x46>
 800d340:	2300      	movs	r3, #0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10a      	bne.n	800d35c <xQueueGenericSend+0x60>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d358:	bf00      	nop
 800d35a:	e7fe      	b.n	800d35a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d103      	bne.n	800d36a <xQueueGenericSend+0x6e>
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d366:	2b01      	cmp	r3, #1
 800d368:	d101      	bne.n	800d36e <xQueueGenericSend+0x72>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <xQueueGenericSend+0x74>
 800d36e:	2300      	movs	r3, #0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xQueueGenericSend+0x8e>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	623b      	str	r3, [r7, #32]
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d38a:	f001 f9e7 	bl	800e75c <xTaskGetSchedulerState>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <xQueueGenericSend+0x9e>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <xQueueGenericSend+0xa2>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e000      	b.n	800d3a0 <xQueueGenericSend+0xa4>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10a      	bne.n	800d3ba <xQueueGenericSend+0xbe>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	61fb      	str	r3, [r7, #28]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3ba:	f7ff fcf3 	bl	800cda4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <xQueueGenericSend+0xd4>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d129      	bne.n	800d424 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3d6:	f000 fa0b 	bl	800d7f0 <prvCopyDataToQueue>
 800d3da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d010      	beq.n	800d406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	3324      	adds	r3, #36	; 0x24
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fff5 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d013      	beq.n	800d41c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3f4:	4b3f      	ldr	r3, [pc, #252]	; (800d4f4 <xQueueGenericSend+0x1f8>)
 800d3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	e00a      	b.n	800d41c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d40c:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <xQueueGenericSend+0x1f8>)
 800d40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d41c:	f7ff fcf2 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800d420:	2301      	movs	r3, #1
 800d422:	e063      	b.n	800d4ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d103      	bne.n	800d432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d42a:	f7ff fceb 	bl	800ce04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	e05c      	b.n	800d4ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d434:	2b00      	cmp	r3, #0
 800d436:	d106      	bne.n	800d446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	4618      	mov	r0, r3
 800d43e:	f001 f82f 	bl	800e4a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d442:	2301      	movs	r3, #1
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d446:	f7ff fcdd 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d44a:	f000 fd9b 	bl	800df84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d44e:	f7ff fca9 	bl	800cda4 <vPortEnterCritical>
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d458:	b25b      	sxtb	r3, r3
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45e:	d103      	bne.n	800d468 <xQueueGenericSend+0x16c>
 800d460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d462:	2200      	movs	r2, #0
 800d464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d46e:	b25b      	sxtb	r3, r3
 800d470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d474:	d103      	bne.n	800d47e <xQueueGenericSend+0x182>
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d47e:	f7ff fcc1 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d482:	1d3a      	adds	r2, r7, #4
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f001 f81e 	bl	800e4cc <xTaskCheckForTimeOut>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d124      	bne.n	800d4e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d498:	f000 faa2 	bl	800d9e0 <prvIsQueueFull>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d018      	beq.n	800d4d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	3310      	adds	r3, #16
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 ff44 	bl	800e338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4b2:	f000 fa2d 	bl	800d910 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d4b6:	f000 fd73 	bl	800dfa0 <xTaskResumeAll>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f47f af7c 	bne.w	800d3ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d4c2:	4b0c      	ldr	r3, [pc, #48]	; (800d4f4 <xQueueGenericSend+0x1f8>)
 800d4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c8:	601a      	str	r2, [r3, #0]
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	e772      	b.n	800d3ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4d6:	f000 fa1b 	bl	800d910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4da:	f000 fd61 	bl	800dfa0 <xTaskResumeAll>
 800d4de:	e76c      	b.n	800d3ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4e2:	f000 fa15 	bl	800d910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4e6:	f000 fd5b 	bl	800dfa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3738      	adds	r7, #56	; 0x38
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	e000ed04 	.word	0xe000ed04

0800d4f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b090      	sub	sp, #64	; 0x40
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10a      	bne.n	800d526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <xQueueGenericSendFromISR+0x3c>
 800d52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <xQueueGenericSendFromISR+0x40>
 800d534:	2301      	movs	r3, #1
 800d536:	e000      	b.n	800d53a <xQueueGenericSendFromISR+0x42>
 800d538:	2300      	movs	r3, #0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10a      	bne.n	800d554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b02      	cmp	r3, #2
 800d558:	d103      	bne.n	800d562 <xQueueGenericSendFromISR+0x6a>
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d101      	bne.n	800d566 <xQueueGenericSendFromISR+0x6e>
 800d562:	2301      	movs	r3, #1
 800d564:	e000      	b.n	800d568 <xQueueGenericSendFromISR+0x70>
 800d566:	2300      	movs	r3, #0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	623b      	str	r3, [r7, #32]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d582:	f7ff fcf1 	bl	800cf68 <vPortValidateInterruptPriority>
	__asm volatile
 800d586:	f3ef 8211 	mrs	r2, BASEPRI
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	61fa      	str	r2, [r7, #28]
 800d59c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d59e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d302      	bcc.n	800d5b4 <xQueueGenericSendFromISR+0xbc>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d12f      	bne.n	800d614 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5ca:	f000 f911 	bl	800d7f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d6:	d112      	bne.n	800d5fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d016      	beq.n	800d60e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	3324      	adds	r3, #36	; 0x24
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 fef7 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00e      	beq.n	800d60e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00b      	beq.n	800d60e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	e007      	b.n	800d60e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d602:	3301      	adds	r3, #1
 800d604:	b2db      	uxtb	r3, r3
 800d606:	b25a      	sxtb	r2, r3
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d60e:	2301      	movs	r3, #1
 800d610:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d612:	e001      	b.n	800d618 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d614:	2300      	movs	r3, #0
 800d616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f383 8811 	msr	BASEPRI, r3
}
 800d622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d626:	4618      	mov	r0, r3
 800d628:	3740      	adds	r7, #64	; 0x40
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	; 0x30
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <xQueueReceive+0x30>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	623b      	str	r3, [r7, #32]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d103      	bne.n	800d66e <xQueueReceive+0x3e>
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <xQueueReceive+0x42>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <xQueueReceive+0x44>
 800d672:	2300      	movs	r3, #0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xQueueReceive+0x5e>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	61fb      	str	r3, [r7, #28]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d68e:	f001 f865 	bl	800e75c <xTaskGetSchedulerState>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <xQueueReceive+0x6e>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <xQueueReceive+0x72>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e000      	b.n	800d6a4 <xQueueReceive+0x74>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10a      	bne.n	800d6be <xQueueReceive+0x8e>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	61bb      	str	r3, [r7, #24]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6be:	f7ff fb71 	bl	800cda4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d01f      	beq.n	800d70e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d2:	f000 f8f7 	bl	800d8c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	1e5a      	subs	r2, r3, #1
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00f      	beq.n	800d706 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	3310      	adds	r3, #16
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fe74 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6f6:	4b3d      	ldr	r3, [pc, #244]	; (800d7ec <xQueueReceive+0x1bc>)
 800d6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d706:	f7ff fb7d 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e069      	b.n	800d7e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d714:	f7ff fb76 	bl	800ce04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d718:	2300      	movs	r3, #0
 800d71a:	e062      	b.n	800d7e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d722:	f107 0310 	add.w	r3, r7, #16
 800d726:	4618      	mov	r0, r3
 800d728:	f000 feba 	bl	800e4a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d730:	f7ff fb68 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d734:	f000 fc26 	bl	800df84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d738:	f7ff fb34 	bl	800cda4 <vPortEnterCritical>
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d742:	b25b      	sxtb	r3, r3
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d103      	bne.n	800d752 <xQueueReceive+0x122>
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d758:	b25b      	sxtb	r3, r3
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75e:	d103      	bne.n	800d768 <xQueueReceive+0x138>
 800d760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d768:	f7ff fb4c 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d76c:	1d3a      	adds	r2, r7, #4
 800d76e:	f107 0310 	add.w	r3, r7, #16
 800d772:	4611      	mov	r1, r2
 800d774:	4618      	mov	r0, r3
 800d776:	f000 fea9 	bl	800e4cc <xTaskCheckForTimeOut>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d123      	bne.n	800d7c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d782:	f000 f917 	bl	800d9b4 <prvIsQueueEmpty>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d017      	beq.n	800d7bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	3324      	adds	r3, #36	; 0x24
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f000 fdcf 	bl	800e338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d79c:	f000 f8b8 	bl	800d910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7a0:	f000 fbfe 	bl	800dfa0 <xTaskResumeAll>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d189      	bne.n	800d6be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d7aa:	4b10      	ldr	r3, [pc, #64]	; (800d7ec <xQueueReceive+0x1bc>)
 800d7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	e780      	b.n	800d6be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7be:	f000 f8a7 	bl	800d910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7c2:	f000 fbed 	bl	800dfa0 <xTaskResumeAll>
 800d7c6:	e77a      	b.n	800d6be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ca:	f000 f8a1 	bl	800d910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7ce:	f000 fbe7 	bl	800dfa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d4:	f000 f8ee 	bl	800d9b4 <prvIsQueueEmpty>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f43f af6f 	beq.w	800d6be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3730      	adds	r7, #48	; 0x30
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	e000ed04 	.word	0xe000ed04

0800d7f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10d      	bne.n	800d82a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d14d      	bne.n	800d8b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 ffbc 	bl	800e798 <xTaskPriorityDisinherit>
 800d820:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	609a      	str	r2, [r3, #8]
 800d828:	e043      	b.n	800d8b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d119      	bne.n	800d864 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6858      	ldr	r0, [r3, #4]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d838:	461a      	mov	r2, r3
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	f001 fce3 	bl	800f206 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d848:	441a      	add	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	429a      	cmp	r2, r3
 800d858:	d32b      	bcc.n	800d8b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	605a      	str	r2, [r3, #4]
 800d862:	e026      	b.n	800d8b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	68d8      	ldr	r0, [r3, #12]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86c:	461a      	mov	r2, r3
 800d86e:	68b9      	ldr	r1, [r7, #8]
 800d870:	f001 fcc9 	bl	800f206 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87c:	425b      	negs	r3, r3
 800d87e:	441a      	add	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	68da      	ldr	r2, [r3, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d207      	bcs.n	800d8a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689a      	ldr	r2, [r3, #8]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d898:	425b      	negs	r3, r3
 800d89a:	441a      	add	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d105      	bne.n	800d8b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8ba:	697b      	ldr	r3, [r7, #20]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3718      	adds	r7, #24
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d018      	beq.n	800d908 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68da      	ldr	r2, [r3, #12]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8de:	441a      	add	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d303      	bcc.n	800d8f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	68d9      	ldr	r1, [r3, #12]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d900:	461a      	mov	r2, r3
 800d902:	6838      	ldr	r0, [r7, #0]
 800d904:	f001 fc7f 	bl	800f206 <memcpy>
	}
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d918:	f7ff fa44 	bl	800cda4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d922:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d924:	e011      	b.n	800d94a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d012      	beq.n	800d954 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3324      	adds	r3, #36	; 0x24
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fd50 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d93e:	f000 fe27 	bl	800e590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
 800d944:	3b01      	subs	r3, #1
 800d946:	b2db      	uxtb	r3, r3
 800d948:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	dce9      	bgt.n	800d926 <prvUnlockQueue+0x16>
 800d952:	e000      	b.n	800d956 <prvUnlockQueue+0x46>
					break;
 800d954:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	22ff      	movs	r2, #255	; 0xff
 800d95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d95e:	f7ff fa51 	bl	800ce04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d962:	f7ff fa1f 	bl	800cda4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d96e:	e011      	b.n	800d994 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d012      	beq.n	800d99e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3310      	adds	r3, #16
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 fd2b 	bl	800e3d8 <xTaskRemoveFromEventList>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d988:	f000 fe02 	bl	800e590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
 800d98e:	3b01      	subs	r3, #1
 800d990:	b2db      	uxtb	r3, r3
 800d992:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dce9      	bgt.n	800d970 <prvUnlockQueue+0x60>
 800d99c:	e000      	b.n	800d9a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d99e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	22ff      	movs	r2, #255	; 0xff
 800d9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9a8:	f7ff fa2c 	bl	800ce04 <vPortExitCritical>
}
 800d9ac:	bf00      	nop
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9bc:	f7ff f9f2 	bl	800cda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	e001      	b.n	800d9d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9d2:	f7ff fa17 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9e8:	f7ff f9dc 	bl	800cda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d102      	bne.n	800d9fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	e001      	b.n	800da02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da02:	f7ff f9ff 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800da06:	68fb      	ldr	r3, [r7, #12]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]
 800da1e:	e014      	b.n	800da4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da20:	4a0f      	ldr	r2, [pc, #60]	; (800da60 <vQueueAddToRegistry+0x50>)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10b      	bne.n	800da44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da2c:	490c      	ldr	r1, [pc, #48]	; (800da60 <vQueueAddToRegistry+0x50>)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da36:	4a0a      	ldr	r2, [pc, #40]	; (800da60 <vQueueAddToRegistry+0x50>)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	4413      	add	r3, r2
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da42:	e006      	b.n	800da52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3301      	adds	r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b07      	cmp	r3, #7
 800da4e:	d9e7      	bls.n	800da20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	24004d98 	.word	0x24004d98

0800da64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da74:	f7ff f996 	bl	800cda4 <vPortEnterCritical>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da84:	d103      	bne.n	800da8e <vQueueWaitForMessageRestricted+0x2a>
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da94:	b25b      	sxtb	r3, r3
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9a:	d103      	bne.n	800daa4 <vQueueWaitForMessageRestricted+0x40>
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daa4:	f7ff f9ae 	bl	800ce04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daac:	2b00      	cmp	r3, #0
 800daae:	d106      	bne.n	800dabe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	3324      	adds	r3, #36	; 0x24
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	68b9      	ldr	r1, [r7, #8]
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 fc61 	bl	800e380 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dabe:	6978      	ldr	r0, [r7, #20]
 800dac0:	f7ff ff26 	bl	800d910 <prvUnlockQueue>
	}
 800dac4:	bf00      	nop
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	; 0x38
 800dad0:	af04      	add	r7, sp, #16
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10a      	bne.n	800daf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	623b      	str	r3, [r7, #32]
}
 800daf2:	bf00      	nop
 800daf4:	e7fe      	b.n	800daf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10a      	bne.n	800db12 <xTaskCreateStatic+0x46>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	61fb      	str	r3, [r7, #28]
}
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db12:	23bc      	movs	r3, #188	; 0xbc
 800db14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2bbc      	cmp	r3, #188	; 0xbc
 800db1a:	d00a      	beq.n	800db32 <xTaskCreateStatic+0x66>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	61bb      	str	r3, [r7, #24]
}
 800db2e:	bf00      	nop
 800db30:	e7fe      	b.n	800db30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	2b00      	cmp	r3, #0
 800db38:	d01e      	beq.n	800db78 <xTaskCreateStatic+0xac>
 800db3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01b      	beq.n	800db78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db52:	2300      	movs	r3, #0
 800db54:	9303      	str	r3, [sp, #12]
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	f107 0314 	add.w	r3, r7, #20
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 f850 	bl	800dc10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db72:	f000 f8f3 	bl	800dd5c <prvAddNewTaskToReadyList>
 800db76:	e001      	b.n	800db7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db7c:	697b      	ldr	r3, [r7, #20]
	}
 800db7e:	4618      	mov	r0, r3
 800db80:	3728      	adds	r7, #40	; 0x28
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db86:	b580      	push	{r7, lr}
 800db88:	b08c      	sub	sp, #48	; 0x30
 800db8a:	af04      	add	r7, sp, #16
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	60b9      	str	r1, [r7, #8]
 800db90:	603b      	str	r3, [r7, #0]
 800db92:	4613      	mov	r3, r2
 800db94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db96:	88fb      	ldrh	r3, [r7, #6]
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fe fd34 	bl	800c608 <pvPortMalloc>
 800dba0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00e      	beq.n	800dbc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dba8:	20bc      	movs	r0, #188	; 0xbc
 800dbaa:	f7fe fd2d 	bl	800c608 <pvPortMalloc>
 800dbae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	631a      	str	r2, [r3, #48]	; 0x30
 800dbbc:	e005      	b.n	800dbca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dbbe:	6978      	ldr	r0, [r7, #20]
 800dbc0:	f7fe fdee 	bl	800c7a0 <vPortFree>
 800dbc4:	e001      	b.n	800dbca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d017      	beq.n	800dc00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbd8:	88fa      	ldrh	r2, [r7, #6]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	9302      	str	r3, [sp, #8]
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68b9      	ldr	r1, [r7, #8]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 f80e 	bl	800dc10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbf4:	69f8      	ldr	r0, [r7, #28]
 800dbf6:	f000 f8b1 	bl	800dd5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	e002      	b.n	800dc06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc00:	f04f 33ff 	mov.w	r3, #4294967295
 800dc04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc06:	69bb      	ldr	r3, [r7, #24]
	}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3720      	adds	r7, #32
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	461a      	mov	r2, r3
 800dc28:	21a5      	movs	r1, #165	; 0xa5
 800dc2a:	f001 fafa 	bl	800f222 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc32:	6879      	ldr	r1, [r7, #4]
 800dc34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dc38:	440b      	add	r3, r1
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	f023 0307 	bic.w	r3, r3, #7
 800dc46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	f003 0307 	and.w	r3, r3, #7
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	617b      	str	r3, [r7, #20]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d01f      	beq.n	800dcae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc6e:	2300      	movs	r3, #0
 800dc70:	61fb      	str	r3, [r7, #28]
 800dc72:	e012      	b.n	800dc9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	4413      	add	r3, r2
 800dc7a:	7819      	ldrb	r1, [r3, #0]
 800dc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	4413      	add	r3, r2
 800dc82:	3334      	adds	r3, #52	; 0x34
 800dc84:	460a      	mov	r2, r1
 800dc86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d006      	beq.n	800dca2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61fb      	str	r3, [r7, #28]
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	2b0f      	cmp	r3, #15
 800dc9e:	d9e9      	bls.n	800dc74 <prvInitialiseNewTask+0x64>
 800dca0:	e000      	b.n	800dca4 <prvInitialiseNewTask+0x94>
			{
				break;
 800dca2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcac:	e003      	b.n	800dcb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	2b37      	cmp	r3, #55	; 0x37
 800dcba:	d901      	bls.n	800dcc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcbc:	2337      	movs	r3, #55	; 0x37
 800dcbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcce:	2200      	movs	r2, #0
 800dcd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fea0 	bl	800ca1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcde:	3318      	adds	r3, #24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fe9b 	bl	800ca1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	3354      	adds	r3, #84	; 0x54
 800dd10:	2260      	movs	r2, #96	; 0x60
 800dd12:	2100      	movs	r1, #0
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 fa84 	bl	800f222 <memset>
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	4a0c      	ldr	r2, [pc, #48]	; (800dd50 <prvInitialiseNewTask+0x140>)
 800dd1e:	659a      	str	r2, [r3, #88]	; 0x58
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	4a0c      	ldr	r2, [pc, #48]	; (800dd54 <prvInitialiseNewTask+0x144>)
 800dd24:	65da      	str	r2, [r3, #92]	; 0x5c
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	4a0b      	ldr	r2, [pc, #44]	; (800dd58 <prvInitialiseNewTask+0x148>)
 800dd2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	68f9      	ldr	r1, [r7, #12]
 800dd30:	69b8      	ldr	r0, [r7, #24]
 800dd32:	f7fe ff07 	bl	800cb44 <pxPortInitialiseStack>
 800dd36:	4602      	mov	r2, r0
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd48:	bf00      	nop
 800dd4a:	3720      	adds	r7, #32
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	08013814 	.word	0x08013814
 800dd54:	08013834 	.word	0x08013834
 800dd58:	080137f4 	.word	0x080137f4

0800dd5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd64:	f7ff f81e 	bl	800cda4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd68:	4b2d      	ldr	r3, [pc, #180]	; (800de20 <prvAddNewTaskToReadyList+0xc4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	4a2c      	ldr	r2, [pc, #176]	; (800de20 <prvAddNewTaskToReadyList+0xc4>)
 800dd70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd72:	4b2c      	ldr	r3, [pc, #176]	; (800de24 <prvAddNewTaskToReadyList+0xc8>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d109      	bne.n	800dd8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd7a:	4a2a      	ldr	r2, [pc, #168]	; (800de24 <prvAddNewTaskToReadyList+0xc8>)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd80:	4b27      	ldr	r3, [pc, #156]	; (800de20 <prvAddNewTaskToReadyList+0xc4>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d110      	bne.n	800ddaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd88:	f000 fc26 	bl	800e5d8 <prvInitialiseTaskLists>
 800dd8c:	e00d      	b.n	800ddaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd8e:	4b26      	ldr	r3, [pc, #152]	; (800de28 <prvAddNewTaskToReadyList+0xcc>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d109      	bne.n	800ddaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd96:	4b23      	ldr	r3, [pc, #140]	; (800de24 <prvAddNewTaskToReadyList+0xc8>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d802      	bhi.n	800ddaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dda4:	4a1f      	ldr	r2, [pc, #124]	; (800de24 <prvAddNewTaskToReadyList+0xc8>)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddaa:	4b20      	ldr	r3, [pc, #128]	; (800de2c <prvAddNewTaskToReadyList+0xd0>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	4a1e      	ldr	r2, [pc, #120]	; (800de2c <prvAddNewTaskToReadyList+0xd0>)
 800ddb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ddb4:	4b1d      	ldr	r3, [pc, #116]	; (800de2c <prvAddNewTaskToReadyList+0xd0>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc0:	4b1b      	ldr	r3, [pc, #108]	; (800de30 <prvAddNewTaskToReadyList+0xd4>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d903      	bls.n	800ddd0 <prvAddNewTaskToReadyList+0x74>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddcc:	4a18      	ldr	r2, [pc, #96]	; (800de30 <prvAddNewTaskToReadyList+0xd4>)
 800ddce:	6013      	str	r3, [r2, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4a15      	ldr	r2, [pc, #84]	; (800de34 <prvAddNewTaskToReadyList+0xd8>)
 800ddde:	441a      	add	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3304      	adds	r3, #4
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f7fe fe25 	bl	800ca36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ddec:	f7ff f80a 	bl	800ce04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ddf0:	4b0d      	ldr	r3, [pc, #52]	; (800de28 <prvAddNewTaskToReadyList+0xcc>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00e      	beq.n	800de16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <prvAddNewTaskToReadyList+0xc8>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de02:	429a      	cmp	r2, r3
 800de04:	d207      	bcs.n	800de16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de06:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <prvAddNewTaskToReadyList+0xdc>)
 800de08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	240052ac 	.word	0x240052ac
 800de24:	24004dd8 	.word	0x24004dd8
 800de28:	240052b8 	.word	0x240052b8
 800de2c:	240052c8 	.word	0x240052c8
 800de30:	240052b4 	.word	0x240052b4
 800de34:	24004ddc 	.word	0x24004ddc
 800de38:	e000ed04 	.word	0xe000ed04

0800de3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d017      	beq.n	800de7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de4e:	4b13      	ldr	r3, [pc, #76]	; (800de9c <vTaskDelay+0x60>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00a      	beq.n	800de6c <vTaskDelay+0x30>
	__asm volatile
 800de56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	60bb      	str	r3, [r7, #8]
}
 800de68:	bf00      	nop
 800de6a:	e7fe      	b.n	800de6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de6c:	f000 f88a 	bl	800df84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de70:	2100      	movs	r1, #0
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fcfe 	bl	800e874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de78:	f000 f892 	bl	800dfa0 <xTaskResumeAll>
 800de7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d107      	bne.n	800de94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de84:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <vTaskDelay+0x64>)
 800de86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de94:	bf00      	nop
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	240052d4 	.word	0x240052d4
 800dea0:	e000ed04 	.word	0xe000ed04

0800dea4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08a      	sub	sp, #40	; 0x28
 800dea8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800deaa:	2300      	movs	r3, #0
 800deac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800deb2:	463a      	mov	r2, r7
 800deb4:	1d39      	adds	r1, r7, #4
 800deb6:	f107 0308 	add.w	r3, r7, #8
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fb70 	bl	800c5a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	9202      	str	r2, [sp, #8]
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	2300      	movs	r3, #0
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	2300      	movs	r3, #0
 800ded0:	460a      	mov	r2, r1
 800ded2:	4924      	ldr	r1, [pc, #144]	; (800df64 <vTaskStartScheduler+0xc0>)
 800ded4:	4824      	ldr	r0, [pc, #144]	; (800df68 <vTaskStartScheduler+0xc4>)
 800ded6:	f7ff fdf9 	bl	800dacc <xTaskCreateStatic>
 800deda:	4603      	mov	r3, r0
 800dedc:	4a23      	ldr	r2, [pc, #140]	; (800df6c <vTaskStartScheduler+0xc8>)
 800dede:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dee0:	4b22      	ldr	r3, [pc, #136]	; (800df6c <vTaskStartScheduler+0xc8>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dee8:	2301      	movs	r3, #1
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	e001      	b.n	800def2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800deee:	2300      	movs	r3, #0
 800def0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d102      	bne.n	800defe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800def8:	f000 fd10 	bl	800e91c <xTimerCreateTimerTask>
 800defc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d11b      	bne.n	800df3c <vTaskStartScheduler+0x98>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	613b      	str	r3, [r7, #16]
}
 800df16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df18:	4b15      	ldr	r3, [pc, #84]	; (800df70 <vTaskStartScheduler+0xcc>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3354      	adds	r3, #84	; 0x54
 800df1e:	4a15      	ldr	r2, [pc, #84]	; (800df74 <vTaskStartScheduler+0xd0>)
 800df20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df22:	4b15      	ldr	r3, [pc, #84]	; (800df78 <vTaskStartScheduler+0xd4>)
 800df24:	f04f 32ff 	mov.w	r2, #4294967295
 800df28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df2a:	4b14      	ldr	r3, [pc, #80]	; (800df7c <vTaskStartScheduler+0xd8>)
 800df2c:	2201      	movs	r2, #1
 800df2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df30:	4b13      	ldr	r3, [pc, #76]	; (800df80 <vTaskStartScheduler+0xdc>)
 800df32:	2200      	movs	r2, #0
 800df34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df36:	f7fe fe93 	bl	800cc60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df3a:	e00e      	b.n	800df5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df42:	d10a      	bne.n	800df5a <vTaskStartScheduler+0xb6>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	60fb      	str	r3, [r7, #12]
}
 800df56:	bf00      	nop
 800df58:	e7fe      	b.n	800df58 <vTaskStartScheduler+0xb4>
}
 800df5a:	bf00      	nop
 800df5c:	3718      	adds	r7, #24
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	08013630 	.word	0x08013630
 800df68:	0800e5a9 	.word	0x0800e5a9
 800df6c:	240052d0 	.word	0x240052d0
 800df70:	24004dd8 	.word	0x24004dd8
 800df74:	2400001c 	.word	0x2400001c
 800df78:	240052cc 	.word	0x240052cc
 800df7c:	240052b8 	.word	0x240052b8
 800df80:	240052b0 	.word	0x240052b0

0800df84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df84:	b480      	push	{r7}
 800df86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df88:	4b04      	ldr	r3, [pc, #16]	; (800df9c <vTaskSuspendAll+0x18>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	4a03      	ldr	r2, [pc, #12]	; (800df9c <vTaskSuspendAll+0x18>)
 800df90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df92:	bf00      	nop
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	240052d4 	.word	0x240052d4

0800dfa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfae:	4b42      	ldr	r3, [pc, #264]	; (800e0b8 <xTaskResumeAll+0x118>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d10a      	bne.n	800dfcc <xTaskResumeAll+0x2c>
	__asm volatile
 800dfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	603b      	str	r3, [r7, #0]
}
 800dfc8:	bf00      	nop
 800dfca:	e7fe      	b.n	800dfca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dfcc:	f7fe feea 	bl	800cda4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dfd0:	4b39      	ldr	r3, [pc, #228]	; (800e0b8 <xTaskResumeAll+0x118>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	4a38      	ldr	r2, [pc, #224]	; (800e0b8 <xTaskResumeAll+0x118>)
 800dfd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfda:	4b37      	ldr	r3, [pc, #220]	; (800e0b8 <xTaskResumeAll+0x118>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d162      	bne.n	800e0a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfe2:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <xTaskResumeAll+0x11c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d05e      	beq.n	800e0a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfea:	e02f      	b.n	800e04c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfec:	4b34      	ldr	r3, [pc, #208]	; (800e0c0 <xTaskResumeAll+0x120>)
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	3318      	adds	r3, #24
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fd79 	bl	800caf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3304      	adds	r3, #4
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fd74 	bl	800caf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00c:	4b2d      	ldr	r3, [pc, #180]	; (800e0c4 <xTaskResumeAll+0x124>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	429a      	cmp	r2, r3
 800e012:	d903      	bls.n	800e01c <xTaskResumeAll+0x7c>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	4a2a      	ldr	r2, [pc, #168]	; (800e0c4 <xTaskResumeAll+0x124>)
 800e01a:	6013      	str	r3, [r2, #0]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4a27      	ldr	r2, [pc, #156]	; (800e0c8 <xTaskResumeAll+0x128>)
 800e02a:	441a      	add	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	3304      	adds	r3, #4
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fe fcff 	bl	800ca36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03c:	4b23      	ldr	r3, [pc, #140]	; (800e0cc <xTaskResumeAll+0x12c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	429a      	cmp	r2, r3
 800e044:	d302      	bcc.n	800e04c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e046:	4b22      	ldr	r3, [pc, #136]	; (800e0d0 <xTaskResumeAll+0x130>)
 800e048:	2201      	movs	r2, #1
 800e04a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e04c:	4b1c      	ldr	r3, [pc, #112]	; (800e0c0 <xTaskResumeAll+0x120>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1cb      	bne.n	800dfec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e05a:	f000 fb5f 	bl	800e71c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e05e:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <xTaskResumeAll+0x134>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d010      	beq.n	800e08c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e06a:	f000 f847 	bl	800e0fc <xTaskIncrementTick>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e074:	4b16      	ldr	r3, [pc, #88]	; (800e0d0 <xTaskResumeAll+0x130>)
 800e076:	2201      	movs	r2, #1
 800e078:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1f1      	bne.n	800e06a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e086:	4b13      	ldr	r3, [pc, #76]	; (800e0d4 <xTaskResumeAll+0x134>)
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e08c:	4b10      	ldr	r3, [pc, #64]	; (800e0d0 <xTaskResumeAll+0x130>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d009      	beq.n	800e0a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e094:	2301      	movs	r3, #1
 800e096:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e098:	4b0f      	ldr	r3, [pc, #60]	; (800e0d8 <xTaskResumeAll+0x138>)
 800e09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0a8:	f7fe feac 	bl	800ce04 <vPortExitCritical>

	return xAlreadyYielded;
 800e0ac:	68bb      	ldr	r3, [r7, #8]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	240052d4 	.word	0x240052d4
 800e0bc:	240052ac 	.word	0x240052ac
 800e0c0:	2400526c 	.word	0x2400526c
 800e0c4:	240052b4 	.word	0x240052b4
 800e0c8:	24004ddc 	.word	0x24004ddc
 800e0cc:	24004dd8 	.word	0x24004dd8
 800e0d0:	240052c0 	.word	0x240052c0
 800e0d4:	240052bc 	.word	0x240052bc
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e0e2:	4b05      	ldr	r3, [pc, #20]	; (800e0f8 <xTaskGetTickCount+0x1c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e0e8:	687b      	ldr	r3, [r7, #4]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	240052b0 	.word	0x240052b0

0800e0fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e106:	4b4f      	ldr	r3, [pc, #316]	; (800e244 <xTaskIncrementTick+0x148>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f040 808f 	bne.w	800e22e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e110:	4b4d      	ldr	r3, [pc, #308]	; (800e248 <xTaskIncrementTick+0x14c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e118:	4a4b      	ldr	r2, [pc, #300]	; (800e248 <xTaskIncrementTick+0x14c>)
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d120      	bne.n	800e166 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e124:	4b49      	ldr	r3, [pc, #292]	; (800e24c <xTaskIncrementTick+0x150>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <xTaskIncrementTick+0x48>
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	603b      	str	r3, [r7, #0]
}
 800e140:	bf00      	nop
 800e142:	e7fe      	b.n	800e142 <xTaskIncrementTick+0x46>
 800e144:	4b41      	ldr	r3, [pc, #260]	; (800e24c <xTaskIncrementTick+0x150>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	60fb      	str	r3, [r7, #12]
 800e14a:	4b41      	ldr	r3, [pc, #260]	; (800e250 <xTaskIncrementTick+0x154>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a3f      	ldr	r2, [pc, #252]	; (800e24c <xTaskIncrementTick+0x150>)
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	4a3f      	ldr	r2, [pc, #252]	; (800e250 <xTaskIncrementTick+0x154>)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6013      	str	r3, [r2, #0]
 800e158:	4b3e      	ldr	r3, [pc, #248]	; (800e254 <xTaskIncrementTick+0x158>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	3301      	adds	r3, #1
 800e15e:	4a3d      	ldr	r2, [pc, #244]	; (800e254 <xTaskIncrementTick+0x158>)
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	f000 fadb 	bl	800e71c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e166:	4b3c      	ldr	r3, [pc, #240]	; (800e258 <xTaskIncrementTick+0x15c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d349      	bcc.n	800e204 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e170:	4b36      	ldr	r3, [pc, #216]	; (800e24c <xTaskIncrementTick+0x150>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d104      	bne.n	800e184 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e17a:	4b37      	ldr	r3, [pc, #220]	; (800e258 <xTaskIncrementTick+0x15c>)
 800e17c:	f04f 32ff 	mov.w	r2, #4294967295
 800e180:	601a      	str	r2, [r3, #0]
					break;
 800e182:	e03f      	b.n	800e204 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e184:	4b31      	ldr	r3, [pc, #196]	; (800e24c <xTaskIncrementTick+0x150>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e194:	693a      	ldr	r2, [r7, #16]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d203      	bcs.n	800e1a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e19c:	4a2e      	ldr	r2, [pc, #184]	; (800e258 <xTaskIncrementTick+0x15c>)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1a2:	e02f      	b.n	800e204 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fe fca1 	bl	800caf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d004      	beq.n	800e1c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	3318      	adds	r3, #24
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fc98 	bl	800caf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c4:	4b25      	ldr	r3, [pc, #148]	; (800e25c <xTaskIncrementTick+0x160>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d903      	bls.n	800e1d4 <xTaskIncrementTick+0xd8>
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d0:	4a22      	ldr	r2, [pc, #136]	; (800e25c <xTaskIncrementTick+0x160>)
 800e1d2:	6013      	str	r3, [r2, #0]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d8:	4613      	mov	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4a1f      	ldr	r2, [pc, #124]	; (800e260 <xTaskIncrementTick+0x164>)
 800e1e2:	441a      	add	r2, r3
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4610      	mov	r0, r2
 800e1ec:	f7fe fc23 	bl	800ca36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f4:	4b1b      	ldr	r3, [pc, #108]	; (800e264 <xTaskIncrementTick+0x168>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d3b8      	bcc.n	800e170 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e1fe:	2301      	movs	r3, #1
 800e200:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e202:	e7b5      	b.n	800e170 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e204:	4b17      	ldr	r3, [pc, #92]	; (800e264 <xTaskIncrementTick+0x168>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20a:	4915      	ldr	r1, [pc, #84]	; (800e260 <xTaskIncrementTick+0x164>)
 800e20c:	4613      	mov	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	440b      	add	r3, r1
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d901      	bls.n	800e220 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e21c:	2301      	movs	r3, #1
 800e21e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e220:	4b11      	ldr	r3, [pc, #68]	; (800e268 <xTaskIncrementTick+0x16c>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d007      	beq.n	800e238 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e228:	2301      	movs	r3, #1
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e004      	b.n	800e238 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e22e:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <xTaskIncrementTick+0x170>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a0d      	ldr	r2, [pc, #52]	; (800e26c <xTaskIncrementTick+0x170>)
 800e236:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e238:	697b      	ldr	r3, [r7, #20]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	240052d4 	.word	0x240052d4
 800e248:	240052b0 	.word	0x240052b0
 800e24c:	24005264 	.word	0x24005264
 800e250:	24005268 	.word	0x24005268
 800e254:	240052c4 	.word	0x240052c4
 800e258:	240052cc 	.word	0x240052cc
 800e25c:	240052b4 	.word	0x240052b4
 800e260:	24004ddc 	.word	0x24004ddc
 800e264:	24004dd8 	.word	0x24004dd8
 800e268:	240052c0 	.word	0x240052c0
 800e26c:	240052bc 	.word	0x240052bc

0800e270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e276:	4b2a      	ldr	r3, [pc, #168]	; (800e320 <vTaskSwitchContext+0xb0>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e27e:	4b29      	ldr	r3, [pc, #164]	; (800e324 <vTaskSwitchContext+0xb4>)
 800e280:	2201      	movs	r2, #1
 800e282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e284:	e046      	b.n	800e314 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e286:	4b27      	ldr	r3, [pc, #156]	; (800e324 <vTaskSwitchContext+0xb4>)
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e28c:	4b26      	ldr	r3, [pc, #152]	; (800e328 <vTaskSwitchContext+0xb8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e010      	b.n	800e2b6 <vTaskSwitchContext+0x46>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	607b      	str	r3, [r7, #4]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <vTaskSwitchContext+0x3e>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	60fb      	str	r3, [r7, #12]
 800e2b6:	491d      	ldr	r1, [pc, #116]	; (800e32c <vTaskSwitchContext+0xbc>)
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	440b      	add	r3, r1
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d0e4      	beq.n	800e294 <vTaskSwitchContext+0x24>
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4a15      	ldr	r2, [pc, #84]	; (800e32c <vTaskSwitchContext+0xbc>)
 800e2d6:	4413      	add	r3, r2
 800e2d8:	60bb      	str	r3, [r7, #8]
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	685a      	ldr	r2, [r3, #4]
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	605a      	str	r2, [r3, #4]
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d104      	bne.n	800e2fa <vTaskSwitchContext+0x8a>
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	605a      	str	r2, [r3, #4]
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	4a0b      	ldr	r2, [pc, #44]	; (800e330 <vTaskSwitchContext+0xc0>)
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	4a08      	ldr	r2, [pc, #32]	; (800e328 <vTaskSwitchContext+0xb8>)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e30a:	4b09      	ldr	r3, [pc, #36]	; (800e330 <vTaskSwitchContext+0xc0>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3354      	adds	r3, #84	; 0x54
 800e310:	4a08      	ldr	r2, [pc, #32]	; (800e334 <vTaskSwitchContext+0xc4>)
 800e312:	6013      	str	r3, [r2, #0]
}
 800e314:	bf00      	nop
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	240052d4 	.word	0x240052d4
 800e324:	240052c0 	.word	0x240052c0
 800e328:	240052b4 	.word	0x240052b4
 800e32c:	24004ddc 	.word	0x24004ddc
 800e330:	24004dd8 	.word	0x24004dd8
 800e334:	2400001c 	.word	0x2400001c

0800e338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	60fb      	str	r3, [r7, #12]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e35e:	4b07      	ldr	r3, [pc, #28]	; (800e37c <vTaskPlaceOnEventList+0x44>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	3318      	adds	r3, #24
 800e364:	4619      	mov	r1, r3
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7fe fb89 	bl	800ca7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e36c:	2101      	movs	r1, #1
 800e36e:	6838      	ldr	r0, [r7, #0]
 800e370:	f000 fa80 	bl	800e874 <prvAddCurrentTaskToDelayedList>
}
 800e374:	bf00      	nop
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	24004dd8 	.word	0x24004dd8

0800e380 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10a      	bne.n	800e3a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	617b      	str	r3, [r7, #20]
}
 800e3a4:	bf00      	nop
 800e3a6:	e7fe      	b.n	800e3a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3318      	adds	r3, #24
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f7fe fb40 	bl	800ca36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	68b8      	ldr	r0, [r7, #8]
 800e3c6:	f000 fa55 	bl	800e874 <prvAddCurrentTaskToDelayedList>
	}
 800e3ca:	bf00      	nop
 800e3cc:	3718      	adds	r7, #24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	24004dd8 	.word	0x24004dd8

0800e3d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10a      	bne.n	800e404 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	60fb      	str	r3, [r7, #12]
}
 800e400:	bf00      	nop
 800e402:	e7fe      	b.n	800e402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	3318      	adds	r3, #24
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fe fb71 	bl	800caf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e40e:	4b1e      	ldr	r3, [pc, #120]	; (800e488 <xTaskRemoveFromEventList+0xb0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d11d      	bne.n	800e452 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	3304      	adds	r3, #4
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fe fb68 	bl	800caf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e424:	4b19      	ldr	r3, [pc, #100]	; (800e48c <xTaskRemoveFromEventList+0xb4>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d903      	bls.n	800e434 <xTaskRemoveFromEventList+0x5c>
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e430:	4a16      	ldr	r2, [pc, #88]	; (800e48c <xTaskRemoveFromEventList+0xb4>)
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e438:	4613      	mov	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4a13      	ldr	r2, [pc, #76]	; (800e490 <xTaskRemoveFromEventList+0xb8>)
 800e442:	441a      	add	r2, r3
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	3304      	adds	r3, #4
 800e448:	4619      	mov	r1, r3
 800e44a:	4610      	mov	r0, r2
 800e44c:	f7fe faf3 	bl	800ca36 <vListInsertEnd>
 800e450:	e005      	b.n	800e45e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	3318      	adds	r3, #24
 800e456:	4619      	mov	r1, r3
 800e458:	480e      	ldr	r0, [pc, #56]	; (800e494 <xTaskRemoveFromEventList+0xbc>)
 800e45a:	f7fe faec 	bl	800ca36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e462:	4b0d      	ldr	r3, [pc, #52]	; (800e498 <xTaskRemoveFromEventList+0xc0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e468:	429a      	cmp	r2, r3
 800e46a:	d905      	bls.n	800e478 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e46c:	2301      	movs	r3, #1
 800e46e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e470:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <xTaskRemoveFromEventList+0xc4>)
 800e472:	2201      	movs	r2, #1
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	e001      	b.n	800e47c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e478:	2300      	movs	r3, #0
 800e47a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e47c:	697b      	ldr	r3, [r7, #20]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	240052d4 	.word	0x240052d4
 800e48c:	240052b4 	.word	0x240052b4
 800e490:	24004ddc 	.word	0x24004ddc
 800e494:	2400526c 	.word	0x2400526c
 800e498:	24004dd8 	.word	0x24004dd8
 800e49c:	240052c0 	.word	0x240052c0

0800e4a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4a8:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <vTaskInternalSetTimeOutState+0x24>)
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <vTaskInternalSetTimeOutState+0x28>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	605a      	str	r2, [r3, #4]
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	240052c4 	.word	0x240052c4
 800e4c8:	240052b0 	.word	0x240052b0

0800e4cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10a      	bne.n	800e4f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	613b      	str	r3, [r7, #16]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10a      	bne.n	800e50e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	60fb      	str	r3, [r7, #12]
}
 800e50a:	bf00      	nop
 800e50c:	e7fe      	b.n	800e50c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e50e:	f7fe fc49 	bl	800cda4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e512:	4b1d      	ldr	r3, [pc, #116]	; (800e588 <xTaskCheckForTimeOut+0xbc>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d102      	bne.n	800e532 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e52c:	2300      	movs	r3, #0
 800e52e:	61fb      	str	r3, [r7, #28]
 800e530:	e023      	b.n	800e57a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	4b15      	ldr	r3, [pc, #84]	; (800e58c <xTaskCheckForTimeOut+0xc0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d007      	beq.n	800e54e <xTaskCheckForTimeOut+0x82>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	69ba      	ldr	r2, [r7, #24]
 800e544:	429a      	cmp	r2, r3
 800e546:	d302      	bcc.n	800e54e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e548:	2301      	movs	r3, #1
 800e54a:	61fb      	str	r3, [r7, #28]
 800e54c:	e015      	b.n	800e57a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	429a      	cmp	r2, r3
 800e556:	d20b      	bcs.n	800e570 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	1ad2      	subs	r2, r2, r3
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7ff ff9b 	bl	800e4a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e56a:	2300      	movs	r3, #0
 800e56c:	61fb      	str	r3, [r7, #28]
 800e56e:	e004      	b.n	800e57a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2200      	movs	r2, #0
 800e574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e576:	2301      	movs	r3, #1
 800e578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e57a:	f7fe fc43 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800e57e:	69fb      	ldr	r3, [r7, #28]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	240052b0 	.word	0x240052b0
 800e58c:	240052c4 	.word	0x240052c4

0800e590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e594:	4b03      	ldr	r3, [pc, #12]	; (800e5a4 <vTaskMissedYield+0x14>)
 800e596:	2201      	movs	r2, #1
 800e598:	601a      	str	r2, [r3, #0]
}
 800e59a:	bf00      	nop
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	240052c0 	.word	0x240052c0

0800e5a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5b0:	f000 f852 	bl	800e658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5b4:	4b06      	ldr	r3, [pc, #24]	; (800e5d0 <prvIdleTask+0x28>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d9f9      	bls.n	800e5b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5bc:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <prvIdleTask+0x2c>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e5cc:	e7f0      	b.n	800e5b0 <prvIdleTask+0x8>
 800e5ce:	bf00      	nop
 800e5d0:	24004ddc 	.word	0x24004ddc
 800e5d4:	e000ed04 	.word	0xe000ed04

0800e5d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5de:	2300      	movs	r3, #0
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	e00c      	b.n	800e5fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4413      	add	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4a12      	ldr	r2, [pc, #72]	; (800e638 <prvInitialiseTaskLists+0x60>)
 800e5f0:	4413      	add	r3, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe f9f2 	bl	800c9dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	607b      	str	r3, [r7, #4]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b37      	cmp	r3, #55	; 0x37
 800e602:	d9ef      	bls.n	800e5e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e604:	480d      	ldr	r0, [pc, #52]	; (800e63c <prvInitialiseTaskLists+0x64>)
 800e606:	f7fe f9e9 	bl	800c9dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e60a:	480d      	ldr	r0, [pc, #52]	; (800e640 <prvInitialiseTaskLists+0x68>)
 800e60c:	f7fe f9e6 	bl	800c9dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e610:	480c      	ldr	r0, [pc, #48]	; (800e644 <prvInitialiseTaskLists+0x6c>)
 800e612:	f7fe f9e3 	bl	800c9dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e616:	480c      	ldr	r0, [pc, #48]	; (800e648 <prvInitialiseTaskLists+0x70>)
 800e618:	f7fe f9e0 	bl	800c9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e61c:	480b      	ldr	r0, [pc, #44]	; (800e64c <prvInitialiseTaskLists+0x74>)
 800e61e:	f7fe f9dd 	bl	800c9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e622:	4b0b      	ldr	r3, [pc, #44]	; (800e650 <prvInitialiseTaskLists+0x78>)
 800e624:	4a05      	ldr	r2, [pc, #20]	; (800e63c <prvInitialiseTaskLists+0x64>)
 800e626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e628:	4b0a      	ldr	r3, [pc, #40]	; (800e654 <prvInitialiseTaskLists+0x7c>)
 800e62a:	4a05      	ldr	r2, [pc, #20]	; (800e640 <prvInitialiseTaskLists+0x68>)
 800e62c:	601a      	str	r2, [r3, #0]
}
 800e62e:	bf00      	nop
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	24004ddc 	.word	0x24004ddc
 800e63c:	2400523c 	.word	0x2400523c
 800e640:	24005250 	.word	0x24005250
 800e644:	2400526c 	.word	0x2400526c
 800e648:	24005280 	.word	0x24005280
 800e64c:	24005298 	.word	0x24005298
 800e650:	24005264 	.word	0x24005264
 800e654:	24005268 	.word	0x24005268

0800e658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e65e:	e019      	b.n	800e694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e660:	f7fe fba0 	bl	800cda4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e664:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <prvCheckTasksWaitingTermination+0x50>)
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3304      	adds	r3, #4
 800e670:	4618      	mov	r0, r3
 800e672:	f7fe fa3d 	bl	800caf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e676:	4b0d      	ldr	r3, [pc, #52]	; (800e6ac <prvCheckTasksWaitingTermination+0x54>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	4a0b      	ldr	r2, [pc, #44]	; (800e6ac <prvCheckTasksWaitingTermination+0x54>)
 800e67e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e680:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <prvCheckTasksWaitingTermination+0x58>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3b01      	subs	r3, #1
 800e686:	4a0a      	ldr	r2, [pc, #40]	; (800e6b0 <prvCheckTasksWaitingTermination+0x58>)
 800e688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e68a:	f7fe fbbb 	bl	800ce04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f810 	bl	800e6b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e694:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <prvCheckTasksWaitingTermination+0x58>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1e1      	bne.n	800e660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e69c:	bf00      	nop
 800e69e:	bf00      	nop
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	24005280 	.word	0x24005280
 800e6ac:	240052ac 	.word	0x240052ac
 800e6b0:	24005294 	.word	0x24005294

0800e6b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3354      	adds	r3, #84	; 0x54
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f001 fb2b 	bl	800fd1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d108      	bne.n	800e6e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe f863 	bl	800c7a0 <vPortFree>
				vPortFree( pxTCB );
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7fe f860 	bl	800c7a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6e0:	e018      	b.n	800e714 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d103      	bne.n	800e6f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7fe f857 	bl	800c7a0 <vPortFree>
	}
 800e6f2:	e00f      	b.n	800e714 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d00a      	beq.n	800e714 <prvDeleteTCB+0x60>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	60fb      	str	r3, [r7, #12]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <prvDeleteTCB+0x5e>
	}
 800e714:	bf00      	nop
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e722:	4b0c      	ldr	r3, [pc, #48]	; (800e754 <prvResetNextTaskUnblockTime+0x38>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d104      	bne.n	800e736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <prvResetNextTaskUnblockTime+0x3c>)
 800e72e:	f04f 32ff 	mov.w	r2, #4294967295
 800e732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e734:	e008      	b.n	800e748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e736:	4b07      	ldr	r3, [pc, #28]	; (800e754 <prvResetNextTaskUnblockTime+0x38>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	4a04      	ldr	r2, [pc, #16]	; (800e758 <prvResetNextTaskUnblockTime+0x3c>)
 800e746:	6013      	str	r3, [r2, #0]
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	24005264 	.word	0x24005264
 800e758:	240052cc 	.word	0x240052cc

0800e75c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e762:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <xTaskGetSchedulerState+0x34>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e76a:	2301      	movs	r3, #1
 800e76c:	607b      	str	r3, [r7, #4]
 800e76e:	e008      	b.n	800e782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e770:	4b08      	ldr	r3, [pc, #32]	; (800e794 <xTaskGetSchedulerState+0x38>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e778:	2302      	movs	r3, #2
 800e77a:	607b      	str	r3, [r7, #4]
 800e77c:	e001      	b.n	800e782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e77e:	2300      	movs	r3, #0
 800e780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e782:	687b      	ldr	r3, [r7, #4]
	}
 800e784:	4618      	mov	r0, r3
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	240052b8 	.word	0x240052b8
 800e794:	240052d4 	.word	0x240052d4

0800e798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d056      	beq.n	800e85c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e7ae:	4b2e      	ldr	r3, [pc, #184]	; (800e868 <xTaskPriorityDisinherit+0xd0>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d00a      	beq.n	800e7ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	60fb      	str	r3, [r7, #12]
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60bb      	str	r3, [r7, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7f0:	1e5a      	subs	r2, r3, #1
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d02c      	beq.n	800e85c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e806:	2b00      	cmp	r3, #0
 800e808:	d128      	bne.n	800e85c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe f96e 	bl	800caf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e820:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82c:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <xTaskPriorityDisinherit+0xd4>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d903      	bls.n	800e83c <xTaskPriorityDisinherit+0xa4>
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e838:	4a0c      	ldr	r2, [pc, #48]	; (800e86c <xTaskPriorityDisinherit+0xd4>)
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <xTaskPriorityDisinherit+0xd8>)
 800e84a:	441a      	add	r2, r3
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3304      	adds	r3, #4
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7fe f8ef 	bl	800ca36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e85c:	697b      	ldr	r3, [r7, #20]
	}
 800e85e:	4618      	mov	r0, r3
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	24004dd8 	.word	0x24004dd8
 800e86c:	240052b4 	.word	0x240052b4
 800e870:	24004ddc 	.word	0x24004ddc

0800e874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e87e:	4b21      	ldr	r3, [pc, #132]	; (800e904 <prvAddCurrentTaskToDelayedList+0x90>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e884:	4b20      	ldr	r3, [pc, #128]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3304      	adds	r3, #4
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe f930 	bl	800caf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e896:	d10a      	bne.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e89e:	4b1a      	ldr	r3, [pc, #104]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4819      	ldr	r0, [pc, #100]	; (800e90c <prvAddCurrentTaskToDelayedList+0x98>)
 800e8a8:	f7fe f8c5 	bl	800ca36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8ac:	e026      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8b6:	4b14      	ldr	r3, [pc, #80]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d209      	bcs.n	800e8da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c6:	4b12      	ldr	r3, [pc, #72]	; (800e910 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7fe f8d3 	bl	800ca7e <vListInsert>
}
 800e8d8:	e010      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8da:	4b0e      	ldr	r3, [pc, #56]	; (800e914 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe f8c9 	bl	800ca7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	; (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d202      	bcs.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8f6:	4a08      	ldr	r2, [pc, #32]	; (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	6013      	str	r3, [r2, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	240052b0 	.word	0x240052b0
 800e908:	24004dd8 	.word	0x24004dd8
 800e90c:	24005298 	.word	0x24005298
 800e910:	24005268 	.word	0x24005268
 800e914:	24005264 	.word	0x24005264
 800e918:	240052cc 	.word	0x240052cc

0800e91c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	; 0x28
 800e920:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e922:	2300      	movs	r3, #0
 800e924:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e926:	f000 fb07 	bl	800ef38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e92a:	4b1c      	ldr	r3, [pc, #112]	; (800e99c <xTimerCreateTimerTask+0x80>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d021      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e93a:	1d3a      	adds	r2, r7, #4
 800e93c:	f107 0108 	add.w	r1, r7, #8
 800e940:	f107 030c 	add.w	r3, r7, #12
 800e944:	4618      	mov	r0, r3
 800e946:	f7fd fe45 	bl	800c5d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	9202      	str	r2, [sp, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	2302      	movs	r3, #2
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2300      	movs	r3, #0
 800e95a:	460a      	mov	r2, r1
 800e95c:	4910      	ldr	r1, [pc, #64]	; (800e9a0 <xTimerCreateTimerTask+0x84>)
 800e95e:	4811      	ldr	r0, [pc, #68]	; (800e9a4 <xTimerCreateTimerTask+0x88>)
 800e960:	f7ff f8b4 	bl	800dacc <xTaskCreateStatic>
 800e964:	4603      	mov	r3, r0
 800e966:	4a10      	ldr	r2, [pc, #64]	; (800e9a8 <xTimerCreateTimerTask+0x8c>)
 800e968:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e96a:	4b0f      	ldr	r3, [pc, #60]	; (800e9a8 <xTimerCreateTimerTask+0x8c>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e972:	2301      	movs	r3, #1
 800e974:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	24005308 	.word	0x24005308
 800e9a0:	08013638 	.word	0x08013638
 800e9a4:	0800eae1 	.word	0x0800eae1
 800e9a8:	2400530c 	.word	0x2400530c

0800e9ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	; 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10a      	bne.n	800e9da <xTimerGenericCommand+0x2e>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	623b      	str	r3, [r7, #32]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9da:	4b1a      	ldr	r3, [pc, #104]	; (800ea44 <xTimerGenericCommand+0x98>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d02a      	beq.n	800ea38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b05      	cmp	r3, #5
 800e9f2:	dc18      	bgt.n	800ea26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9f4:	f7ff feb2 	bl	800e75c <xTaskGetSchedulerState>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d109      	bne.n	800ea12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9fe:	4b11      	ldr	r3, [pc, #68]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	f107 0110 	add.w	r1, r7, #16
 800ea06:	2300      	movs	r3, #0
 800ea08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea0a:	f7fe fc77 	bl	800d2fc <xQueueGenericSend>
 800ea0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea10:	e012      	b.n	800ea38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea12:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea14:	6818      	ldr	r0, [r3, #0]
 800ea16:	f107 0110 	add.w	r1, r7, #16
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f7fe fc6d 	bl	800d2fc <xQueueGenericSend>
 800ea22:	6278      	str	r0, [r7, #36]	; 0x24
 800ea24:	e008      	b.n	800ea38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea26:	4b07      	ldr	r3, [pc, #28]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea28:	6818      	ldr	r0, [r3, #0]
 800ea2a:	f107 0110 	add.w	r1, r7, #16
 800ea2e:	2300      	movs	r3, #0
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	f7fe fd61 	bl	800d4f8 <xQueueGenericSendFromISR>
 800ea36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3728      	adds	r7, #40	; 0x28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	24005308 	.word	0x24005308

0800ea48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea52:	4b22      	ldr	r3, [pc, #136]	; (800eadc <prvProcessExpiredTimer+0x94>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fe f845 	bl	800caf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d022      	beq.n	800eaba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	699a      	ldr	r2, [r3, #24]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	18d1      	adds	r1, r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	6978      	ldr	r0, [r7, #20]
 800ea82:	f000 f8d1 	bl	800ec28 <prvInsertTimerInActiveList>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01f      	beq.n	800eacc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	2300      	movs	r3, #0
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	2100      	movs	r1, #0
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	f7ff ff88 	bl	800e9ac <xTimerGenericCommand>
 800ea9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d113      	bne.n	800eacc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	60fb      	str	r3, [r7, #12]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eac0:	f023 0301 	bic.w	r3, r3, #1
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	6a1b      	ldr	r3, [r3, #32]
 800ead0:	6978      	ldr	r0, [r7, #20]
 800ead2:	4798      	blx	r3
}
 800ead4:	bf00      	nop
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	24005300 	.word	0x24005300

0800eae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eae8:	f107 0308 	add.w	r3, r7, #8
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 f857 	bl	800eba0 <prvGetNextExpireTime>
 800eaf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 f803 	bl	800eb04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eafe:	f000 f8d5 	bl	800ecac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb02:	e7f1      	b.n	800eae8 <prvTimerTask+0x8>

0800eb04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb0e:	f7ff fa39 	bl	800df84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb12:	f107 0308 	add.w	r3, r7, #8
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f866 	bl	800ebe8 <prvSampleTimeNow>
 800eb1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d130      	bne.n	800eb86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10a      	bne.n	800eb40 <prvProcessTimerOrBlockTask+0x3c>
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d806      	bhi.n	800eb40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb32:	f7ff fa35 	bl	800dfa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb36:	68f9      	ldr	r1, [r7, #12]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ff85 	bl	800ea48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb3e:	e024      	b.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d008      	beq.n	800eb58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb46:	4b13      	ldr	r3, [pc, #76]	; (800eb94 <prvProcessTimerOrBlockTask+0x90>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <prvProcessTimerOrBlockTask+0x50>
 800eb50:	2301      	movs	r3, #1
 800eb52:	e000      	b.n	800eb56 <prvProcessTimerOrBlockTask+0x52>
 800eb54:	2300      	movs	r3, #0
 800eb56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb58:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <prvProcessTimerOrBlockTask+0x94>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4619      	mov	r1, r3
 800eb66:	f7fe ff7d 	bl	800da64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb6a:	f7ff fa19 	bl	800dfa0 <xTaskResumeAll>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb74:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <prvProcessTimerOrBlockTask+0x98>)
 800eb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	f3bf 8f6f 	isb	sy
}
 800eb84:	e001      	b.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb86:	f7ff fa0b 	bl	800dfa0 <xTaskResumeAll>
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	24005304 	.word	0x24005304
 800eb98:	24005308 	.word	0x24005308
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eba8:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <prvGetNextExpireTime+0x44>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d101      	bne.n	800ebb6 <prvGetNextExpireTime+0x16>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	e000      	b.n	800ebb8 <prvGetNextExpireTime+0x18>
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d105      	bne.n	800ebd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebc4:	4b07      	ldr	r3, [pc, #28]	; (800ebe4 <prvGetNextExpireTime+0x44>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	e001      	b.n	800ebd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	24005300 	.word	0x24005300

0800ebe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebf0:	f7ff fa74 	bl	800e0dc <xTaskGetTickCount>
 800ebf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebf6:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <prvSampleTimeNow+0x3c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d205      	bcs.n	800ec0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec00:	f000 f936 	bl	800ee70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	e002      	b.n	800ec12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec12:	4a04      	ldr	r2, [pc, #16]	; (800ec24 <prvSampleTimeNow+0x3c>)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec18:	68fb      	ldr	r3, [r7, #12]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	24005310 	.word	0x24005310

0800ec28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec36:	2300      	movs	r3, #0
 800ec38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d812      	bhi.n	800ec74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	1ad2      	subs	r2, r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d302      	bcc.n	800ec62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	e01b      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec62:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <prvInsertTimerInActiveList+0x7c>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7fd ff06 	bl	800ca7e <vListInsert>
 800ec72:	e012      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d206      	bcs.n	800ec8a <prvInsertTimerInActiveList+0x62>
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec84:	2301      	movs	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e007      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec8a:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <prvInsertTimerInActiveList+0x80>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3304      	adds	r3, #4
 800ec92:	4619      	mov	r1, r3
 800ec94:	4610      	mov	r0, r2
 800ec96:	f7fd fef2 	bl	800ca7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec9a:	697b      	ldr	r3, [r7, #20]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	24005304 	.word	0x24005304
 800eca8:	24005300 	.word	0x24005300

0800ecac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08e      	sub	sp, #56	; 0x38
 800ecb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecb2:	e0ca      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	da18      	bge.n	800ecec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ecba:	1d3b      	adds	r3, r7, #4
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10a      	bne.n	800ecdc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	61fb      	str	r3, [r7, #28]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece2:	6850      	ldr	r0, [r2, #4]
 800ece4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece6:	6892      	ldr	r2, [r2, #8]
 800ece8:	4611      	mov	r1, r2
 800ecea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f2c0 80aa 	blt.w	800ee48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d004      	beq.n	800ed0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	3304      	adds	r3, #4
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd fef3 	bl	800caf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed0a:	463b      	mov	r3, r7
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff ff6b 	bl	800ebe8 <prvSampleTimeNow>
 800ed12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b09      	cmp	r3, #9
 800ed18:	f200 8097 	bhi.w	800ee4a <prvProcessReceivedCommands+0x19e>
 800ed1c:	a201      	add	r2, pc, #4	; (adr r2, 800ed24 <prvProcessReceivedCommands+0x78>)
 800ed1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed22:	bf00      	nop
 800ed24:	0800ed4d 	.word	0x0800ed4d
 800ed28:	0800ed4d 	.word	0x0800ed4d
 800ed2c:	0800ed4d 	.word	0x0800ed4d
 800ed30:	0800edc1 	.word	0x0800edc1
 800ed34:	0800edd5 	.word	0x0800edd5
 800ed38:	0800ee1f 	.word	0x0800ee1f
 800ed3c:	0800ed4d 	.word	0x0800ed4d
 800ed40:	0800ed4d 	.word	0x0800ed4d
 800ed44:	0800edc1 	.word	0x0800edc1
 800ed48:	0800edd5 	.word	0x0800edd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed52:	f043 0301 	orr.w	r3, r3, #1
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	18d1      	adds	r1, r2, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed6c:	f7ff ff5c 	bl	800ec28 <prvInsertTimerInActiveList>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d069      	beq.n	800ee4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed84:	f003 0304 	and.w	r3, r3, #4
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d05e      	beq.n	800ee4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	441a      	add	r2, r3
 800ed94:	2300      	movs	r3, #0
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	2300      	movs	r3, #0
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed9e:	f7ff fe05 	bl	800e9ac <xTimerGenericCommand>
 800eda2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d14f      	bne.n	800ee4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	61bb      	str	r3, [r7, #24]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc6:	f023 0301 	bic.w	r3, r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800edd2:	e03a      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edda:	f043 0301 	orr.w	r3, r3, #1
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ede6:	68ba      	ldr	r2, [r7, #8]
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10a      	bne.n	800ee0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	617b      	str	r3, [r7, #20]
}
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	699a      	ldr	r2, [r3, #24]
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee10:	18d1      	adds	r1, r2, r3
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee18:	f7ff ff06 	bl	800ec28 <prvInsertTimerInActiveList>
					break;
 800ee1c:	e015      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee24:	f003 0302 	and.w	r3, r3, #2
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d103      	bne.n	800ee34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee2e:	f7fd fcb7 	bl	800c7a0 <vPortFree>
 800ee32:	e00a      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee3a:	f023 0301 	bic.w	r3, r3, #1
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee46:	e000      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee4a:	4b08      	ldr	r3, [pc, #32]	; (800ee6c <prvProcessReceivedCommands+0x1c0>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	1d39      	adds	r1, r7, #4
 800ee50:	2200      	movs	r2, #0
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fbec 	bl	800d630 <xQueueReceive>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f47f af2a 	bne.w	800ecb4 <prvProcessReceivedCommands+0x8>
	}
}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	3730      	adds	r7, #48	; 0x30
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	24005308 	.word	0x24005308

0800ee70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee76:	e048      	b.n	800ef0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee78:	4b2d      	ldr	r3, [pc, #180]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee82:	4b2b      	ldr	r3, [pc, #172]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fd fe2d 	bl	800caf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d02e      	beq.n	800ef0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	693a      	ldr	r2, [r7, #16]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d90e      	bls.n	800eedc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eeca:	4b19      	ldr	r3, [pc, #100]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	3304      	adds	r3, #4
 800eed2:	4619      	mov	r1, r3
 800eed4:	4610      	mov	r0, r2
 800eed6:	f7fd fdd2 	bl	800ca7e <vListInsert>
 800eeda:	e016      	b.n	800ef0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eedc:	2300      	movs	r3, #0
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	2300      	movs	r3, #0
 800eee2:	693a      	ldr	r2, [r7, #16]
 800eee4:	2100      	movs	r1, #0
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff fd60 	bl	800e9ac <xTimerGenericCommand>
 800eeec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10a      	bne.n	800ef0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef8:	f383 8811 	msr	BASEPRI, r3
 800eefc:	f3bf 8f6f 	isb	sy
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	603b      	str	r3, [r7, #0]
}
 800ef06:	bf00      	nop
 800ef08:	e7fe      	b.n	800ef08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef0a:	4b09      	ldr	r3, [pc, #36]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1b1      	bne.n	800ee78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef14:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef1a:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <prvSwitchTimerLists+0xc4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a04      	ldr	r2, [pc, #16]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef22:	4a04      	ldr	r2, [pc, #16]	; (800ef34 <prvSwitchTimerLists+0xc4>)
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	6013      	str	r3, [r2, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	24005300 	.word	0x24005300
 800ef34:	24005304 	.word	0x24005304

0800ef38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef3e:	f7fd ff31 	bl	800cda4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef42:	4b15      	ldr	r3, [pc, #84]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d120      	bne.n	800ef8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef4a:	4814      	ldr	r0, [pc, #80]	; (800ef9c <prvCheckForValidListAndQueue+0x64>)
 800ef4c:	f7fd fd46 	bl	800c9dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef50:	4813      	ldr	r0, [pc, #76]	; (800efa0 <prvCheckForValidListAndQueue+0x68>)
 800ef52:	f7fd fd43 	bl	800c9dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef56:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <prvCheckForValidListAndQueue+0x6c>)
 800ef58:	4a10      	ldr	r2, [pc, #64]	; (800ef9c <prvCheckForValidListAndQueue+0x64>)
 800ef5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef5c:	4b12      	ldr	r3, [pc, #72]	; (800efa8 <prvCheckForValidListAndQueue+0x70>)
 800ef5e:	4a10      	ldr	r2, [pc, #64]	; (800efa0 <prvCheckForValidListAndQueue+0x68>)
 800ef60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef62:	2300      	movs	r3, #0
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	4b11      	ldr	r3, [pc, #68]	; (800efac <prvCheckForValidListAndQueue+0x74>)
 800ef68:	4a11      	ldr	r2, [pc, #68]	; (800efb0 <prvCheckForValidListAndQueue+0x78>)
 800ef6a:	2110      	movs	r1, #16
 800ef6c:	200a      	movs	r0, #10
 800ef6e:	f7fe f8a3 	bl	800d0b8 <xQueueGenericCreateStatic>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4a08      	ldr	r2, [pc, #32]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef78:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d005      	beq.n	800ef8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef80:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	490b      	ldr	r1, [pc, #44]	; (800efb4 <prvCheckForValidListAndQueue+0x7c>)
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fd42 	bl	800da10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef8c:	f7fd ff3a 	bl	800ce04 <vPortExitCritical>
}
 800ef90:	bf00      	nop
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	24005308 	.word	0x24005308
 800ef9c:	240052d8 	.word	0x240052d8
 800efa0:	240052ec 	.word	0x240052ec
 800efa4:	24005300 	.word	0x24005300
 800efa8:	24005304 	.word	0x24005304
 800efac:	240053b4 	.word	0x240053b4
 800efb0:	24005314 	.word	0x24005314
 800efb4:	08013640 	.word	0x08013640

0800efb8 <abs>:
 800efb8:	2800      	cmp	r0, #0
 800efba:	bfb8      	it	lt
 800efbc:	4240      	neglt	r0, r0
 800efbe:	4770      	bx	lr

0800efc0 <__errno>:
 800efc0:	4b01      	ldr	r3, [pc, #4]	; (800efc8 <__errno+0x8>)
 800efc2:	6818      	ldr	r0, [r3, #0]
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	2400001c 	.word	0x2400001c

0800efcc <std>:
 800efcc:	2300      	movs	r3, #0
 800efce:	b510      	push	{r4, lr}
 800efd0:	4604      	mov	r4, r0
 800efd2:	e9c0 3300 	strd	r3, r3, [r0]
 800efd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efda:	6083      	str	r3, [r0, #8]
 800efdc:	8181      	strh	r1, [r0, #12]
 800efde:	6643      	str	r3, [r0, #100]	; 0x64
 800efe0:	81c2      	strh	r2, [r0, #14]
 800efe2:	6183      	str	r3, [r0, #24]
 800efe4:	4619      	mov	r1, r3
 800efe6:	2208      	movs	r2, #8
 800efe8:	305c      	adds	r0, #92	; 0x5c
 800efea:	f000 f91a 	bl	800f222 <memset>
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <std+0x38>)
 800eff0:	6263      	str	r3, [r4, #36]	; 0x24
 800eff2:	4b05      	ldr	r3, [pc, #20]	; (800f008 <std+0x3c>)
 800eff4:	62a3      	str	r3, [r4, #40]	; 0x28
 800eff6:	4b05      	ldr	r3, [pc, #20]	; (800f00c <std+0x40>)
 800eff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800effa:	4b05      	ldr	r3, [pc, #20]	; (800f010 <std+0x44>)
 800effc:	6224      	str	r4, [r4, #32]
 800effe:	6323      	str	r3, [r4, #48]	; 0x30
 800f000:	bd10      	pop	{r4, pc}
 800f002:	bf00      	nop
 800f004:	0800fe35 	.word	0x0800fe35
 800f008:	0800fe57 	.word	0x0800fe57
 800f00c:	0800fe8f 	.word	0x0800fe8f
 800f010:	0800feb3 	.word	0x0800feb3

0800f014 <_cleanup_r>:
 800f014:	4901      	ldr	r1, [pc, #4]	; (800f01c <_cleanup_r+0x8>)
 800f016:	f000 b8af 	b.w	800f178 <_fwalk_reent>
 800f01a:	bf00      	nop
 800f01c:	08010d81 	.word	0x08010d81

0800f020 <__sfmoreglue>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	2268      	movs	r2, #104	; 0x68
 800f024:	1e4d      	subs	r5, r1, #1
 800f026:	4355      	muls	r5, r2
 800f028:	460e      	mov	r6, r1
 800f02a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f02e:	f000 f921 	bl	800f274 <_malloc_r>
 800f032:	4604      	mov	r4, r0
 800f034:	b140      	cbz	r0, 800f048 <__sfmoreglue+0x28>
 800f036:	2100      	movs	r1, #0
 800f038:	e9c0 1600 	strd	r1, r6, [r0]
 800f03c:	300c      	adds	r0, #12
 800f03e:	60a0      	str	r0, [r4, #8]
 800f040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f044:	f000 f8ed 	bl	800f222 <memset>
 800f048:	4620      	mov	r0, r4
 800f04a:	bd70      	pop	{r4, r5, r6, pc}

0800f04c <__sfp_lock_acquire>:
 800f04c:	4801      	ldr	r0, [pc, #4]	; (800f054 <__sfp_lock_acquire+0x8>)
 800f04e:	f000 b8d8 	b.w	800f202 <__retarget_lock_acquire_recursive>
 800f052:	bf00      	nop
 800f054:	24005405 	.word	0x24005405

0800f058 <__sfp_lock_release>:
 800f058:	4801      	ldr	r0, [pc, #4]	; (800f060 <__sfp_lock_release+0x8>)
 800f05a:	f000 b8d3 	b.w	800f204 <__retarget_lock_release_recursive>
 800f05e:	bf00      	nop
 800f060:	24005405 	.word	0x24005405

0800f064 <__sinit_lock_acquire>:
 800f064:	4801      	ldr	r0, [pc, #4]	; (800f06c <__sinit_lock_acquire+0x8>)
 800f066:	f000 b8cc 	b.w	800f202 <__retarget_lock_acquire_recursive>
 800f06a:	bf00      	nop
 800f06c:	24005406 	.word	0x24005406

0800f070 <__sinit_lock_release>:
 800f070:	4801      	ldr	r0, [pc, #4]	; (800f078 <__sinit_lock_release+0x8>)
 800f072:	f000 b8c7 	b.w	800f204 <__retarget_lock_release_recursive>
 800f076:	bf00      	nop
 800f078:	24005406 	.word	0x24005406

0800f07c <__sinit>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	f7ff fff0 	bl	800f064 <__sinit_lock_acquire>
 800f084:	69a3      	ldr	r3, [r4, #24]
 800f086:	b11b      	cbz	r3, 800f090 <__sinit+0x14>
 800f088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f08c:	f7ff bff0 	b.w	800f070 <__sinit_lock_release>
 800f090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f094:	6523      	str	r3, [r4, #80]	; 0x50
 800f096:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <__sinit+0x68>)
 800f098:	4a13      	ldr	r2, [pc, #76]	; (800f0e8 <__sinit+0x6c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f09e:	42a3      	cmp	r3, r4
 800f0a0:	bf04      	itt	eq
 800f0a2:	2301      	moveq	r3, #1
 800f0a4:	61a3      	streq	r3, [r4, #24]
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 f820 	bl	800f0ec <__sfp>
 800f0ac:	6060      	str	r0, [r4, #4]
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 f81c 	bl	800f0ec <__sfp>
 800f0b4:	60a0      	str	r0, [r4, #8]
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f000 f818 	bl	800f0ec <__sfp>
 800f0bc:	2200      	movs	r2, #0
 800f0be:	60e0      	str	r0, [r4, #12]
 800f0c0:	2104      	movs	r1, #4
 800f0c2:	6860      	ldr	r0, [r4, #4]
 800f0c4:	f7ff ff82 	bl	800efcc <std>
 800f0c8:	68a0      	ldr	r0, [r4, #8]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	2109      	movs	r1, #9
 800f0ce:	f7ff ff7d 	bl	800efcc <std>
 800f0d2:	68e0      	ldr	r0, [r4, #12]
 800f0d4:	2202      	movs	r2, #2
 800f0d6:	2112      	movs	r1, #18
 800f0d8:	f7ff ff78 	bl	800efcc <std>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	61a3      	str	r3, [r4, #24]
 800f0e0:	e7d2      	b.n	800f088 <__sinit+0xc>
 800f0e2:	bf00      	nop
 800f0e4:	08013854 	.word	0x08013854
 800f0e8:	0800f015 	.word	0x0800f015

0800f0ec <__sfp>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	f7ff ffac 	bl	800f04c <__sfp_lock_acquire>
 800f0f4:	4b1e      	ldr	r3, [pc, #120]	; (800f170 <__sfp+0x84>)
 800f0f6:	681e      	ldr	r6, [r3, #0]
 800f0f8:	69b3      	ldr	r3, [r6, #24]
 800f0fa:	b913      	cbnz	r3, 800f102 <__sfp+0x16>
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f7ff ffbd 	bl	800f07c <__sinit>
 800f102:	3648      	adds	r6, #72	; 0x48
 800f104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f108:	3b01      	subs	r3, #1
 800f10a:	d503      	bpl.n	800f114 <__sfp+0x28>
 800f10c:	6833      	ldr	r3, [r6, #0]
 800f10e:	b30b      	cbz	r3, 800f154 <__sfp+0x68>
 800f110:	6836      	ldr	r6, [r6, #0]
 800f112:	e7f7      	b.n	800f104 <__sfp+0x18>
 800f114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f118:	b9d5      	cbnz	r5, 800f150 <__sfp+0x64>
 800f11a:	4b16      	ldr	r3, [pc, #88]	; (800f174 <__sfp+0x88>)
 800f11c:	60e3      	str	r3, [r4, #12]
 800f11e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f122:	6665      	str	r5, [r4, #100]	; 0x64
 800f124:	f000 f86c 	bl	800f200 <__retarget_lock_init_recursive>
 800f128:	f7ff ff96 	bl	800f058 <__sfp_lock_release>
 800f12c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f134:	6025      	str	r5, [r4, #0]
 800f136:	61a5      	str	r5, [r4, #24]
 800f138:	2208      	movs	r2, #8
 800f13a:	4629      	mov	r1, r5
 800f13c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f140:	f000 f86f 	bl	800f222 <memset>
 800f144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f14c:	4620      	mov	r0, r4
 800f14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f150:	3468      	adds	r4, #104	; 0x68
 800f152:	e7d9      	b.n	800f108 <__sfp+0x1c>
 800f154:	2104      	movs	r1, #4
 800f156:	4638      	mov	r0, r7
 800f158:	f7ff ff62 	bl	800f020 <__sfmoreglue>
 800f15c:	4604      	mov	r4, r0
 800f15e:	6030      	str	r0, [r6, #0]
 800f160:	2800      	cmp	r0, #0
 800f162:	d1d5      	bne.n	800f110 <__sfp+0x24>
 800f164:	f7ff ff78 	bl	800f058 <__sfp_lock_release>
 800f168:	230c      	movs	r3, #12
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	e7ee      	b.n	800f14c <__sfp+0x60>
 800f16e:	bf00      	nop
 800f170:	08013854 	.word	0x08013854
 800f174:	ffff0001 	.word	0xffff0001

0800f178 <_fwalk_reent>:
 800f178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17c:	4606      	mov	r6, r0
 800f17e:	4688      	mov	r8, r1
 800f180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f184:	2700      	movs	r7, #0
 800f186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f18a:	f1b9 0901 	subs.w	r9, r9, #1
 800f18e:	d505      	bpl.n	800f19c <_fwalk_reent+0x24>
 800f190:	6824      	ldr	r4, [r4, #0]
 800f192:	2c00      	cmp	r4, #0
 800f194:	d1f7      	bne.n	800f186 <_fwalk_reent+0xe>
 800f196:	4638      	mov	r0, r7
 800f198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19c:	89ab      	ldrh	r3, [r5, #12]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d907      	bls.n	800f1b2 <_fwalk_reent+0x3a>
 800f1a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	d003      	beq.n	800f1b2 <_fwalk_reent+0x3a>
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	47c0      	blx	r8
 800f1b0:	4307      	orrs	r7, r0
 800f1b2:	3568      	adds	r5, #104	; 0x68
 800f1b4:	e7e9      	b.n	800f18a <_fwalk_reent+0x12>
	...

0800f1b8 <__libc_init_array>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	4d0d      	ldr	r5, [pc, #52]	; (800f1f0 <__libc_init_array+0x38>)
 800f1bc:	4c0d      	ldr	r4, [pc, #52]	; (800f1f4 <__libc_init_array+0x3c>)
 800f1be:	1b64      	subs	r4, r4, r5
 800f1c0:	10a4      	asrs	r4, r4, #2
 800f1c2:	2600      	movs	r6, #0
 800f1c4:	42a6      	cmp	r6, r4
 800f1c6:	d109      	bne.n	800f1dc <__libc_init_array+0x24>
 800f1c8:	4d0b      	ldr	r5, [pc, #44]	; (800f1f8 <__libc_init_array+0x40>)
 800f1ca:	4c0c      	ldr	r4, [pc, #48]	; (800f1fc <__libc_init_array+0x44>)
 800f1cc:	f003 fe62 	bl	8012e94 <_init>
 800f1d0:	1b64      	subs	r4, r4, r5
 800f1d2:	10a4      	asrs	r4, r4, #2
 800f1d4:	2600      	movs	r6, #0
 800f1d6:	42a6      	cmp	r6, r4
 800f1d8:	d105      	bne.n	800f1e6 <__libc_init_array+0x2e>
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
 800f1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e0:	4798      	blx	r3
 800f1e2:	3601      	adds	r6, #1
 800f1e4:	e7ee      	b.n	800f1c4 <__libc_init_array+0xc>
 800f1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ea:	4798      	blx	r3
 800f1ec:	3601      	adds	r6, #1
 800f1ee:	e7f2      	b.n	800f1d6 <__libc_init_array+0x1e>
 800f1f0:	08013e20 	.word	0x08013e20
 800f1f4:	08013e20 	.word	0x08013e20
 800f1f8:	08013e20 	.word	0x08013e20
 800f1fc:	08013e24 	.word	0x08013e24

0800f200 <__retarget_lock_init_recursive>:
 800f200:	4770      	bx	lr

0800f202 <__retarget_lock_acquire_recursive>:
 800f202:	4770      	bx	lr

0800f204 <__retarget_lock_release_recursive>:
 800f204:	4770      	bx	lr

0800f206 <memcpy>:
 800f206:	440a      	add	r2, r1
 800f208:	4291      	cmp	r1, r2
 800f20a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f20e:	d100      	bne.n	800f212 <memcpy+0xc>
 800f210:	4770      	bx	lr
 800f212:	b510      	push	{r4, lr}
 800f214:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f21c:	4291      	cmp	r1, r2
 800f21e:	d1f9      	bne.n	800f214 <memcpy+0xe>
 800f220:	bd10      	pop	{r4, pc}

0800f222 <memset>:
 800f222:	4402      	add	r2, r0
 800f224:	4603      	mov	r3, r0
 800f226:	4293      	cmp	r3, r2
 800f228:	d100      	bne.n	800f22c <memset+0xa>
 800f22a:	4770      	bx	lr
 800f22c:	f803 1b01 	strb.w	r1, [r3], #1
 800f230:	e7f9      	b.n	800f226 <memset+0x4>
	...

0800f234 <sbrk_aligned>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	4e0e      	ldr	r6, [pc, #56]	; (800f270 <sbrk_aligned+0x3c>)
 800f238:	460c      	mov	r4, r1
 800f23a:	6831      	ldr	r1, [r6, #0]
 800f23c:	4605      	mov	r5, r0
 800f23e:	b911      	cbnz	r1, 800f246 <sbrk_aligned+0x12>
 800f240:	f000 fdc8 	bl	800fdd4 <_sbrk_r>
 800f244:	6030      	str	r0, [r6, #0]
 800f246:	4621      	mov	r1, r4
 800f248:	4628      	mov	r0, r5
 800f24a:	f000 fdc3 	bl	800fdd4 <_sbrk_r>
 800f24e:	1c43      	adds	r3, r0, #1
 800f250:	d00a      	beq.n	800f268 <sbrk_aligned+0x34>
 800f252:	1cc4      	adds	r4, r0, #3
 800f254:	f024 0403 	bic.w	r4, r4, #3
 800f258:	42a0      	cmp	r0, r4
 800f25a:	d007      	beq.n	800f26c <sbrk_aligned+0x38>
 800f25c:	1a21      	subs	r1, r4, r0
 800f25e:	4628      	mov	r0, r5
 800f260:	f000 fdb8 	bl	800fdd4 <_sbrk_r>
 800f264:	3001      	adds	r0, #1
 800f266:	d101      	bne.n	800f26c <sbrk_aligned+0x38>
 800f268:	f04f 34ff 	mov.w	r4, #4294967295
 800f26c:	4620      	mov	r0, r4
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	2400540c 	.word	0x2400540c

0800f274 <_malloc_r>:
 800f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f278:	1ccd      	adds	r5, r1, #3
 800f27a:	f025 0503 	bic.w	r5, r5, #3
 800f27e:	3508      	adds	r5, #8
 800f280:	2d0c      	cmp	r5, #12
 800f282:	bf38      	it	cc
 800f284:	250c      	movcc	r5, #12
 800f286:	2d00      	cmp	r5, #0
 800f288:	4607      	mov	r7, r0
 800f28a:	db01      	blt.n	800f290 <_malloc_r+0x1c>
 800f28c:	42a9      	cmp	r1, r5
 800f28e:	d905      	bls.n	800f29c <_malloc_r+0x28>
 800f290:	230c      	movs	r3, #12
 800f292:	603b      	str	r3, [r7, #0]
 800f294:	2600      	movs	r6, #0
 800f296:	4630      	mov	r0, r6
 800f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29c:	4e2e      	ldr	r6, [pc, #184]	; (800f358 <_malloc_r+0xe4>)
 800f29e:	f001 fe2f 	bl	8010f00 <__malloc_lock>
 800f2a2:	6833      	ldr	r3, [r6, #0]
 800f2a4:	461c      	mov	r4, r3
 800f2a6:	bb34      	cbnz	r4, 800f2f6 <_malloc_r+0x82>
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f7ff ffc2 	bl	800f234 <sbrk_aligned>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	d14d      	bne.n	800f352 <_malloc_r+0xde>
 800f2b6:	6834      	ldr	r4, [r6, #0]
 800f2b8:	4626      	mov	r6, r4
 800f2ba:	2e00      	cmp	r6, #0
 800f2bc:	d140      	bne.n	800f340 <_malloc_r+0xcc>
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	4631      	mov	r1, r6
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	eb04 0803 	add.w	r8, r4, r3
 800f2c8:	f000 fd84 	bl	800fdd4 <_sbrk_r>
 800f2cc:	4580      	cmp	r8, r0
 800f2ce:	d13a      	bne.n	800f346 <_malloc_r+0xd2>
 800f2d0:	6821      	ldr	r1, [r4, #0]
 800f2d2:	3503      	adds	r5, #3
 800f2d4:	1a6d      	subs	r5, r5, r1
 800f2d6:	f025 0503 	bic.w	r5, r5, #3
 800f2da:	3508      	adds	r5, #8
 800f2dc:	2d0c      	cmp	r5, #12
 800f2de:	bf38      	it	cc
 800f2e0:	250c      	movcc	r5, #12
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7ff ffa5 	bl	800f234 <sbrk_aligned>
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d02b      	beq.n	800f346 <_malloc_r+0xd2>
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	442b      	add	r3, r5
 800f2f2:	6023      	str	r3, [r4, #0]
 800f2f4:	e00e      	b.n	800f314 <_malloc_r+0xa0>
 800f2f6:	6822      	ldr	r2, [r4, #0]
 800f2f8:	1b52      	subs	r2, r2, r5
 800f2fa:	d41e      	bmi.n	800f33a <_malloc_r+0xc6>
 800f2fc:	2a0b      	cmp	r2, #11
 800f2fe:	d916      	bls.n	800f32e <_malloc_r+0xba>
 800f300:	1961      	adds	r1, r4, r5
 800f302:	42a3      	cmp	r3, r4
 800f304:	6025      	str	r5, [r4, #0]
 800f306:	bf18      	it	ne
 800f308:	6059      	strne	r1, [r3, #4]
 800f30a:	6863      	ldr	r3, [r4, #4]
 800f30c:	bf08      	it	eq
 800f30e:	6031      	streq	r1, [r6, #0]
 800f310:	5162      	str	r2, [r4, r5]
 800f312:	604b      	str	r3, [r1, #4]
 800f314:	4638      	mov	r0, r7
 800f316:	f104 060b 	add.w	r6, r4, #11
 800f31a:	f001 fdf7 	bl	8010f0c <__malloc_unlock>
 800f31e:	f026 0607 	bic.w	r6, r6, #7
 800f322:	1d23      	adds	r3, r4, #4
 800f324:	1af2      	subs	r2, r6, r3
 800f326:	d0b6      	beq.n	800f296 <_malloc_r+0x22>
 800f328:	1b9b      	subs	r3, r3, r6
 800f32a:	50a3      	str	r3, [r4, r2]
 800f32c:	e7b3      	b.n	800f296 <_malloc_r+0x22>
 800f32e:	6862      	ldr	r2, [r4, #4]
 800f330:	42a3      	cmp	r3, r4
 800f332:	bf0c      	ite	eq
 800f334:	6032      	streq	r2, [r6, #0]
 800f336:	605a      	strne	r2, [r3, #4]
 800f338:	e7ec      	b.n	800f314 <_malloc_r+0xa0>
 800f33a:	4623      	mov	r3, r4
 800f33c:	6864      	ldr	r4, [r4, #4]
 800f33e:	e7b2      	b.n	800f2a6 <_malloc_r+0x32>
 800f340:	4634      	mov	r4, r6
 800f342:	6876      	ldr	r6, [r6, #4]
 800f344:	e7b9      	b.n	800f2ba <_malloc_r+0x46>
 800f346:	230c      	movs	r3, #12
 800f348:	603b      	str	r3, [r7, #0]
 800f34a:	4638      	mov	r0, r7
 800f34c:	f001 fdde 	bl	8010f0c <__malloc_unlock>
 800f350:	e7a1      	b.n	800f296 <_malloc_r+0x22>
 800f352:	6025      	str	r5, [r4, #0]
 800f354:	e7de      	b.n	800f314 <_malloc_r+0xa0>
 800f356:	bf00      	nop
 800f358:	24005408 	.word	0x24005408

0800f35c <__cvt>:
 800f35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35e:	ed2d 8b02 	vpush	{d8}
 800f362:	eeb0 8b40 	vmov.f64	d8, d0
 800f366:	b085      	sub	sp, #20
 800f368:	4617      	mov	r7, r2
 800f36a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f36c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f36e:	ee18 2a90 	vmov	r2, s17
 800f372:	f025 0520 	bic.w	r5, r5, #32
 800f376:	2a00      	cmp	r2, #0
 800f378:	bfb6      	itet	lt
 800f37a:	222d      	movlt	r2, #45	; 0x2d
 800f37c:	2200      	movge	r2, #0
 800f37e:	eeb1 8b40 	vneglt.f64	d8, d0
 800f382:	2d46      	cmp	r5, #70	; 0x46
 800f384:	460c      	mov	r4, r1
 800f386:	701a      	strb	r2, [r3, #0]
 800f388:	d004      	beq.n	800f394 <__cvt+0x38>
 800f38a:	2d45      	cmp	r5, #69	; 0x45
 800f38c:	d100      	bne.n	800f390 <__cvt+0x34>
 800f38e:	3401      	adds	r4, #1
 800f390:	2102      	movs	r1, #2
 800f392:	e000      	b.n	800f396 <__cvt+0x3a>
 800f394:	2103      	movs	r1, #3
 800f396:	ab03      	add	r3, sp, #12
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	ab02      	add	r3, sp, #8
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4622      	mov	r2, r4
 800f3a0:	4633      	mov	r3, r6
 800f3a2:	eeb0 0b48 	vmov.f64	d0, d8
 800f3a6:	f000 fef7 	bl	8010198 <_dtoa_r>
 800f3aa:	2d47      	cmp	r5, #71	; 0x47
 800f3ac:	d101      	bne.n	800f3b2 <__cvt+0x56>
 800f3ae:	07fb      	lsls	r3, r7, #31
 800f3b0:	d51a      	bpl.n	800f3e8 <__cvt+0x8c>
 800f3b2:	2d46      	cmp	r5, #70	; 0x46
 800f3b4:	eb00 0204 	add.w	r2, r0, r4
 800f3b8:	d10c      	bne.n	800f3d4 <__cvt+0x78>
 800f3ba:	7803      	ldrb	r3, [r0, #0]
 800f3bc:	2b30      	cmp	r3, #48	; 0x30
 800f3be:	d107      	bne.n	800f3d0 <__cvt+0x74>
 800f3c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c8:	bf1c      	itt	ne
 800f3ca:	f1c4 0401 	rsbne	r4, r4, #1
 800f3ce:	6034      	strne	r4, [r6, #0]
 800f3d0:	6833      	ldr	r3, [r6, #0]
 800f3d2:	441a      	add	r2, r3
 800f3d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3dc:	bf08      	it	eq
 800f3de:	9203      	streq	r2, [sp, #12]
 800f3e0:	2130      	movs	r1, #48	; 0x30
 800f3e2:	9b03      	ldr	r3, [sp, #12]
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d307      	bcc.n	800f3f8 <__cvt+0x9c>
 800f3e8:	9b03      	ldr	r3, [sp, #12]
 800f3ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3ec:	1a1b      	subs	r3, r3, r0
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	b005      	add	sp, #20
 800f3f2:	ecbd 8b02 	vpop	{d8}
 800f3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f8:	1c5c      	adds	r4, r3, #1
 800f3fa:	9403      	str	r4, [sp, #12]
 800f3fc:	7019      	strb	r1, [r3, #0]
 800f3fe:	e7f0      	b.n	800f3e2 <__cvt+0x86>

0800f400 <__exponent>:
 800f400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f402:	4603      	mov	r3, r0
 800f404:	2900      	cmp	r1, #0
 800f406:	bfb8      	it	lt
 800f408:	4249      	neglt	r1, r1
 800f40a:	f803 2b02 	strb.w	r2, [r3], #2
 800f40e:	bfb4      	ite	lt
 800f410:	222d      	movlt	r2, #45	; 0x2d
 800f412:	222b      	movge	r2, #43	; 0x2b
 800f414:	2909      	cmp	r1, #9
 800f416:	7042      	strb	r2, [r0, #1]
 800f418:	dd2a      	ble.n	800f470 <__exponent+0x70>
 800f41a:	f10d 0407 	add.w	r4, sp, #7
 800f41e:	46a4      	mov	ip, r4
 800f420:	270a      	movs	r7, #10
 800f422:	46a6      	mov	lr, r4
 800f424:	460a      	mov	r2, r1
 800f426:	fb91 f6f7 	sdiv	r6, r1, r7
 800f42a:	fb07 1516 	mls	r5, r7, r6, r1
 800f42e:	3530      	adds	r5, #48	; 0x30
 800f430:	2a63      	cmp	r2, #99	; 0x63
 800f432:	f104 34ff 	add.w	r4, r4, #4294967295
 800f436:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f43a:	4631      	mov	r1, r6
 800f43c:	dcf1      	bgt.n	800f422 <__exponent+0x22>
 800f43e:	3130      	adds	r1, #48	; 0x30
 800f440:	f1ae 0502 	sub.w	r5, lr, #2
 800f444:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f448:	1c44      	adds	r4, r0, #1
 800f44a:	4629      	mov	r1, r5
 800f44c:	4561      	cmp	r1, ip
 800f44e:	d30a      	bcc.n	800f466 <__exponent+0x66>
 800f450:	f10d 0209 	add.w	r2, sp, #9
 800f454:	eba2 020e 	sub.w	r2, r2, lr
 800f458:	4565      	cmp	r5, ip
 800f45a:	bf88      	it	hi
 800f45c:	2200      	movhi	r2, #0
 800f45e:	4413      	add	r3, r2
 800f460:	1a18      	subs	r0, r3, r0
 800f462:	b003      	add	sp, #12
 800f464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f46a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f46e:	e7ed      	b.n	800f44c <__exponent+0x4c>
 800f470:	2330      	movs	r3, #48	; 0x30
 800f472:	3130      	adds	r1, #48	; 0x30
 800f474:	7083      	strb	r3, [r0, #2]
 800f476:	70c1      	strb	r1, [r0, #3]
 800f478:	1d03      	adds	r3, r0, #4
 800f47a:	e7f1      	b.n	800f460 <__exponent+0x60>
 800f47c:	0000      	movs	r0, r0
	...

0800f480 <_printf_float>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	b08b      	sub	sp, #44	; 0x2c
 800f486:	460c      	mov	r4, r1
 800f488:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f48c:	4616      	mov	r6, r2
 800f48e:	461f      	mov	r7, r3
 800f490:	4605      	mov	r5, r0
 800f492:	f001 fcb1 	bl	8010df8 <_localeconv_r>
 800f496:	f8d0 b000 	ldr.w	fp, [r0]
 800f49a:	4658      	mov	r0, fp
 800f49c:	f7f0 ff20 	bl	80002e0 <strlen>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	9308      	str	r3, [sp, #32]
 800f4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f4ac:	6822      	ldr	r2, [r4, #0]
 800f4ae:	3307      	adds	r3, #7
 800f4b0:	f023 0307 	bic.w	r3, r3, #7
 800f4b4:	f103 0108 	add.w	r1, r3, #8
 800f4b8:	f8c8 1000 	str.w	r1, [r8]
 800f4bc:	4682      	mov	sl, r0
 800f4be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f4c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f728 <_printf_float+0x2a8>
 800f4ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f4ce:	eeb0 6bc0 	vabs.f64	d6, d0
 800f4d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	dd24      	ble.n	800f526 <_printf_float+0xa6>
 800f4dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	d502      	bpl.n	800f4ec <_printf_float+0x6c>
 800f4e6:	232d      	movs	r3, #45	; 0x2d
 800f4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4ec:	4b90      	ldr	r3, [pc, #576]	; (800f730 <_printf_float+0x2b0>)
 800f4ee:	4891      	ldr	r0, [pc, #580]	; (800f734 <_printf_float+0x2b4>)
 800f4f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f4f4:	bf94      	ite	ls
 800f4f6:	4698      	movls	r8, r3
 800f4f8:	4680      	movhi	r8, r0
 800f4fa:	2303      	movs	r3, #3
 800f4fc:	6123      	str	r3, [r4, #16]
 800f4fe:	f022 0204 	bic.w	r2, r2, #4
 800f502:	2300      	movs	r3, #0
 800f504:	6022      	str	r2, [r4, #0]
 800f506:	9304      	str	r3, [sp, #16]
 800f508:	9700      	str	r7, [sp, #0]
 800f50a:	4633      	mov	r3, r6
 800f50c:	aa09      	add	r2, sp, #36	; 0x24
 800f50e:	4621      	mov	r1, r4
 800f510:	4628      	mov	r0, r5
 800f512:	f000 f9d3 	bl	800f8bc <_printf_common>
 800f516:	3001      	adds	r0, #1
 800f518:	f040 808a 	bne.w	800f630 <_printf_float+0x1b0>
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295
 800f520:	b00b      	add	sp, #44	; 0x2c
 800f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f526:	eeb4 0b40 	vcmp.f64	d0, d0
 800f52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52e:	d709      	bvc.n	800f544 <_printf_float+0xc4>
 800f530:	ee10 3a90 	vmov	r3, s1
 800f534:	2b00      	cmp	r3, #0
 800f536:	bfbc      	itt	lt
 800f538:	232d      	movlt	r3, #45	; 0x2d
 800f53a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f53e:	487e      	ldr	r0, [pc, #504]	; (800f738 <_printf_float+0x2b8>)
 800f540:	4b7e      	ldr	r3, [pc, #504]	; (800f73c <_printf_float+0x2bc>)
 800f542:	e7d5      	b.n	800f4f0 <_printf_float+0x70>
 800f544:	6863      	ldr	r3, [r4, #4]
 800f546:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f54a:	9104      	str	r1, [sp, #16]
 800f54c:	1c59      	adds	r1, r3, #1
 800f54e:	d13c      	bne.n	800f5ca <_printf_float+0x14a>
 800f550:	2306      	movs	r3, #6
 800f552:	6063      	str	r3, [r4, #4]
 800f554:	2300      	movs	r3, #0
 800f556:	9303      	str	r3, [sp, #12]
 800f558:	ab08      	add	r3, sp, #32
 800f55a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f55e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f562:	ab07      	add	r3, sp, #28
 800f564:	6861      	ldr	r1, [r4, #4]
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	6022      	str	r2, [r4, #0]
 800f56a:	f10d 031b 	add.w	r3, sp, #27
 800f56e:	4628      	mov	r0, r5
 800f570:	f7ff fef4 	bl	800f35c <__cvt>
 800f574:	9b04      	ldr	r3, [sp, #16]
 800f576:	9907      	ldr	r1, [sp, #28]
 800f578:	2b47      	cmp	r3, #71	; 0x47
 800f57a:	4680      	mov	r8, r0
 800f57c:	d108      	bne.n	800f590 <_printf_float+0x110>
 800f57e:	1cc8      	adds	r0, r1, #3
 800f580:	db02      	blt.n	800f588 <_printf_float+0x108>
 800f582:	6863      	ldr	r3, [r4, #4]
 800f584:	4299      	cmp	r1, r3
 800f586:	dd41      	ble.n	800f60c <_printf_float+0x18c>
 800f588:	f1a9 0902 	sub.w	r9, r9, #2
 800f58c:	fa5f f989 	uxtb.w	r9, r9
 800f590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f594:	d820      	bhi.n	800f5d8 <_printf_float+0x158>
 800f596:	3901      	subs	r1, #1
 800f598:	464a      	mov	r2, r9
 800f59a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f59e:	9107      	str	r1, [sp, #28]
 800f5a0:	f7ff ff2e 	bl	800f400 <__exponent>
 800f5a4:	9a08      	ldr	r2, [sp, #32]
 800f5a6:	9004      	str	r0, [sp, #16]
 800f5a8:	1813      	adds	r3, r2, r0
 800f5aa:	2a01      	cmp	r2, #1
 800f5ac:	6123      	str	r3, [r4, #16]
 800f5ae:	dc02      	bgt.n	800f5b6 <_printf_float+0x136>
 800f5b0:	6822      	ldr	r2, [r4, #0]
 800f5b2:	07d2      	lsls	r2, r2, #31
 800f5b4:	d501      	bpl.n	800f5ba <_printf_float+0x13a>
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	6123      	str	r3, [r4, #16]
 800f5ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d0a2      	beq.n	800f508 <_printf_float+0x88>
 800f5c2:	232d      	movs	r3, #45	; 0x2d
 800f5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5c8:	e79e      	b.n	800f508 <_printf_float+0x88>
 800f5ca:	9904      	ldr	r1, [sp, #16]
 800f5cc:	2947      	cmp	r1, #71	; 0x47
 800f5ce:	d1c1      	bne.n	800f554 <_printf_float+0xd4>
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1bf      	bne.n	800f554 <_printf_float+0xd4>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e7bc      	b.n	800f552 <_printf_float+0xd2>
 800f5d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f5dc:	d118      	bne.n	800f610 <_printf_float+0x190>
 800f5de:	2900      	cmp	r1, #0
 800f5e0:	6863      	ldr	r3, [r4, #4]
 800f5e2:	dd0b      	ble.n	800f5fc <_printf_float+0x17c>
 800f5e4:	6121      	str	r1, [r4, #16]
 800f5e6:	b913      	cbnz	r3, 800f5ee <_printf_float+0x16e>
 800f5e8:	6822      	ldr	r2, [r4, #0]
 800f5ea:	07d0      	lsls	r0, r2, #31
 800f5ec:	d502      	bpl.n	800f5f4 <_printf_float+0x174>
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	440b      	add	r3, r1
 800f5f2:	6123      	str	r3, [r4, #16]
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5f8:	9304      	str	r3, [sp, #16]
 800f5fa:	e7de      	b.n	800f5ba <_printf_float+0x13a>
 800f5fc:	b913      	cbnz	r3, 800f604 <_printf_float+0x184>
 800f5fe:	6822      	ldr	r2, [r4, #0]
 800f600:	07d2      	lsls	r2, r2, #31
 800f602:	d501      	bpl.n	800f608 <_printf_float+0x188>
 800f604:	3302      	adds	r3, #2
 800f606:	e7f4      	b.n	800f5f2 <_printf_float+0x172>
 800f608:	2301      	movs	r3, #1
 800f60a:	e7f2      	b.n	800f5f2 <_printf_float+0x172>
 800f60c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f610:	9b08      	ldr	r3, [sp, #32]
 800f612:	4299      	cmp	r1, r3
 800f614:	db05      	blt.n	800f622 <_printf_float+0x1a2>
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	6121      	str	r1, [r4, #16]
 800f61a:	07d8      	lsls	r0, r3, #31
 800f61c:	d5ea      	bpl.n	800f5f4 <_printf_float+0x174>
 800f61e:	1c4b      	adds	r3, r1, #1
 800f620:	e7e7      	b.n	800f5f2 <_printf_float+0x172>
 800f622:	2900      	cmp	r1, #0
 800f624:	bfd4      	ite	le
 800f626:	f1c1 0202 	rsble	r2, r1, #2
 800f62a:	2201      	movgt	r2, #1
 800f62c:	4413      	add	r3, r2
 800f62e:	e7e0      	b.n	800f5f2 <_printf_float+0x172>
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	055a      	lsls	r2, r3, #21
 800f634:	d407      	bmi.n	800f646 <_printf_float+0x1c6>
 800f636:	6923      	ldr	r3, [r4, #16]
 800f638:	4642      	mov	r2, r8
 800f63a:	4631      	mov	r1, r6
 800f63c:	4628      	mov	r0, r5
 800f63e:	47b8      	blx	r7
 800f640:	3001      	adds	r0, #1
 800f642:	d12a      	bne.n	800f69a <_printf_float+0x21a>
 800f644:	e76a      	b.n	800f51c <_printf_float+0x9c>
 800f646:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f64a:	f240 80e2 	bls.w	800f812 <_printf_float+0x392>
 800f64e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	d133      	bne.n	800f6c4 <_printf_float+0x244>
 800f65c:	4a38      	ldr	r2, [pc, #224]	; (800f740 <_printf_float+0x2c0>)
 800f65e:	2301      	movs	r3, #1
 800f660:	4631      	mov	r1, r6
 800f662:	4628      	mov	r0, r5
 800f664:	47b8      	blx	r7
 800f666:	3001      	adds	r0, #1
 800f668:	f43f af58 	beq.w	800f51c <_printf_float+0x9c>
 800f66c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f670:	429a      	cmp	r2, r3
 800f672:	db02      	blt.n	800f67a <_printf_float+0x1fa>
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	07d8      	lsls	r0, r3, #31
 800f678:	d50f      	bpl.n	800f69a <_printf_float+0x21a>
 800f67a:	4653      	mov	r3, sl
 800f67c:	465a      	mov	r2, fp
 800f67e:	4631      	mov	r1, r6
 800f680:	4628      	mov	r0, r5
 800f682:	47b8      	blx	r7
 800f684:	3001      	adds	r0, #1
 800f686:	f43f af49 	beq.w	800f51c <_printf_float+0x9c>
 800f68a:	f04f 0800 	mov.w	r8, #0
 800f68e:	f104 091a 	add.w	r9, r4, #26
 800f692:	9b08      	ldr	r3, [sp, #32]
 800f694:	3b01      	subs	r3, #1
 800f696:	4543      	cmp	r3, r8
 800f698:	dc09      	bgt.n	800f6ae <_printf_float+0x22e>
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	079b      	lsls	r3, r3, #30
 800f69e:	f100 8108 	bmi.w	800f8b2 <_printf_float+0x432>
 800f6a2:	68e0      	ldr	r0, [r4, #12]
 800f6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a6:	4298      	cmp	r0, r3
 800f6a8:	bfb8      	it	lt
 800f6aa:	4618      	movlt	r0, r3
 800f6ac:	e738      	b.n	800f520 <_printf_float+0xa0>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	464a      	mov	r2, r9
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	47b8      	blx	r7
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	f43f af2f 	beq.w	800f51c <_printf_float+0x9c>
 800f6be:	f108 0801 	add.w	r8, r8, #1
 800f6c2:	e7e6      	b.n	800f692 <_printf_float+0x212>
 800f6c4:	9b07      	ldr	r3, [sp, #28]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	dc3c      	bgt.n	800f744 <_printf_float+0x2c4>
 800f6ca:	4a1d      	ldr	r2, [pc, #116]	; (800f740 <_printf_float+0x2c0>)
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	f43f af21 	beq.w	800f51c <_printf_float+0x9c>
 800f6da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	d102      	bne.n	800f6e8 <_printf_float+0x268>
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	07d9      	lsls	r1, r3, #31
 800f6e6:	d5d8      	bpl.n	800f69a <_printf_float+0x21a>
 800f6e8:	4653      	mov	r3, sl
 800f6ea:	465a      	mov	r2, fp
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	47b8      	blx	r7
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	f43f af12 	beq.w	800f51c <_printf_float+0x9c>
 800f6f8:	f04f 0900 	mov.w	r9, #0
 800f6fc:	f104 0a1a 	add.w	sl, r4, #26
 800f700:	9b07      	ldr	r3, [sp, #28]
 800f702:	425b      	negs	r3, r3
 800f704:	454b      	cmp	r3, r9
 800f706:	dc01      	bgt.n	800f70c <_printf_float+0x28c>
 800f708:	9b08      	ldr	r3, [sp, #32]
 800f70a:	e795      	b.n	800f638 <_printf_float+0x1b8>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4652      	mov	r2, sl
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	f43f af00 	beq.w	800f51c <_printf_float+0x9c>
 800f71c:	f109 0901 	add.w	r9, r9, #1
 800f720:	e7ee      	b.n	800f700 <_printf_float+0x280>
 800f722:	bf00      	nop
 800f724:	f3af 8000 	nop.w
 800f728:	ffffffff 	.word	0xffffffff
 800f72c:	7fefffff 	.word	0x7fefffff
 800f730:	08013858 	.word	0x08013858
 800f734:	0801385c 	.word	0x0801385c
 800f738:	08013864 	.word	0x08013864
 800f73c:	08013860 	.word	0x08013860
 800f740:	08013868 	.word	0x08013868
 800f744:	9a08      	ldr	r2, [sp, #32]
 800f746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f748:	429a      	cmp	r2, r3
 800f74a:	bfa8      	it	ge
 800f74c:	461a      	movge	r2, r3
 800f74e:	2a00      	cmp	r2, #0
 800f750:	4691      	mov	r9, r2
 800f752:	dc38      	bgt.n	800f7c6 <_printf_float+0x346>
 800f754:	2300      	movs	r3, #0
 800f756:	9305      	str	r3, [sp, #20]
 800f758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f75c:	f104 021a 	add.w	r2, r4, #26
 800f760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f762:	9905      	ldr	r1, [sp, #20]
 800f764:	9304      	str	r3, [sp, #16]
 800f766:	eba3 0309 	sub.w	r3, r3, r9
 800f76a:	428b      	cmp	r3, r1
 800f76c:	dc33      	bgt.n	800f7d6 <_printf_float+0x356>
 800f76e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f772:	429a      	cmp	r2, r3
 800f774:	db3c      	blt.n	800f7f0 <_printf_float+0x370>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	07da      	lsls	r2, r3, #31
 800f77a:	d439      	bmi.n	800f7f0 <_printf_float+0x370>
 800f77c:	9b08      	ldr	r3, [sp, #32]
 800f77e:	9a04      	ldr	r2, [sp, #16]
 800f780:	9907      	ldr	r1, [sp, #28]
 800f782:	1a9a      	subs	r2, r3, r2
 800f784:	eba3 0901 	sub.w	r9, r3, r1
 800f788:	4591      	cmp	r9, r2
 800f78a:	bfa8      	it	ge
 800f78c:	4691      	movge	r9, r2
 800f78e:	f1b9 0f00 	cmp.w	r9, #0
 800f792:	dc35      	bgt.n	800f800 <_printf_float+0x380>
 800f794:	f04f 0800 	mov.w	r8, #0
 800f798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f79c:	f104 0a1a 	add.w	sl, r4, #26
 800f7a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f7a4:	1a9b      	subs	r3, r3, r2
 800f7a6:	eba3 0309 	sub.w	r3, r3, r9
 800f7aa:	4543      	cmp	r3, r8
 800f7ac:	f77f af75 	ble.w	800f69a <_printf_float+0x21a>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f aeae 	beq.w	800f51c <_printf_float+0x9c>
 800f7c0:	f108 0801 	add.w	r8, r8, #1
 800f7c4:	e7ec      	b.n	800f7a0 <_printf_float+0x320>
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	4631      	mov	r1, r6
 800f7ca:	4642      	mov	r2, r8
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	47b8      	blx	r7
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	d1bf      	bne.n	800f754 <_printf_float+0x2d4>
 800f7d4:	e6a2      	b.n	800f51c <_printf_float+0x9c>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	9204      	str	r2, [sp, #16]
 800f7de:	47b8      	blx	r7
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	f43f ae9b 	beq.w	800f51c <_printf_float+0x9c>
 800f7e6:	9b05      	ldr	r3, [sp, #20]
 800f7e8:	9a04      	ldr	r2, [sp, #16]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	9305      	str	r3, [sp, #20]
 800f7ee:	e7b7      	b.n	800f760 <_printf_float+0x2e0>
 800f7f0:	4653      	mov	r3, sl
 800f7f2:	465a      	mov	r2, fp
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	47b8      	blx	r7
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d1be      	bne.n	800f77c <_printf_float+0x2fc>
 800f7fe:	e68d      	b.n	800f51c <_printf_float+0x9c>
 800f800:	9a04      	ldr	r2, [sp, #16]
 800f802:	464b      	mov	r3, r9
 800f804:	4442      	add	r2, r8
 800f806:	4631      	mov	r1, r6
 800f808:	4628      	mov	r0, r5
 800f80a:	47b8      	blx	r7
 800f80c:	3001      	adds	r0, #1
 800f80e:	d1c1      	bne.n	800f794 <_printf_float+0x314>
 800f810:	e684      	b.n	800f51c <_printf_float+0x9c>
 800f812:	9a08      	ldr	r2, [sp, #32]
 800f814:	2a01      	cmp	r2, #1
 800f816:	dc01      	bgt.n	800f81c <_printf_float+0x39c>
 800f818:	07db      	lsls	r3, r3, #31
 800f81a:	d537      	bpl.n	800f88c <_printf_float+0x40c>
 800f81c:	2301      	movs	r3, #1
 800f81e:	4642      	mov	r2, r8
 800f820:	4631      	mov	r1, r6
 800f822:	4628      	mov	r0, r5
 800f824:	47b8      	blx	r7
 800f826:	3001      	adds	r0, #1
 800f828:	f43f ae78 	beq.w	800f51c <_printf_float+0x9c>
 800f82c:	4653      	mov	r3, sl
 800f82e:	465a      	mov	r2, fp
 800f830:	4631      	mov	r1, r6
 800f832:	4628      	mov	r0, r5
 800f834:	47b8      	blx	r7
 800f836:	3001      	adds	r0, #1
 800f838:	f43f ae70 	beq.w	800f51c <_printf_float+0x9c>
 800f83c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f848:	d01b      	beq.n	800f882 <_printf_float+0x402>
 800f84a:	9b08      	ldr	r3, [sp, #32]
 800f84c:	f108 0201 	add.w	r2, r8, #1
 800f850:	3b01      	subs	r3, #1
 800f852:	4631      	mov	r1, r6
 800f854:	4628      	mov	r0, r5
 800f856:	47b8      	blx	r7
 800f858:	3001      	adds	r0, #1
 800f85a:	d10e      	bne.n	800f87a <_printf_float+0x3fa>
 800f85c:	e65e      	b.n	800f51c <_printf_float+0x9c>
 800f85e:	2301      	movs	r3, #1
 800f860:	464a      	mov	r2, r9
 800f862:	4631      	mov	r1, r6
 800f864:	4628      	mov	r0, r5
 800f866:	47b8      	blx	r7
 800f868:	3001      	adds	r0, #1
 800f86a:	f43f ae57 	beq.w	800f51c <_printf_float+0x9c>
 800f86e:	f108 0801 	add.w	r8, r8, #1
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	3b01      	subs	r3, #1
 800f876:	4543      	cmp	r3, r8
 800f878:	dcf1      	bgt.n	800f85e <_printf_float+0x3de>
 800f87a:	9b04      	ldr	r3, [sp, #16]
 800f87c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f880:	e6db      	b.n	800f63a <_printf_float+0x1ba>
 800f882:	f04f 0800 	mov.w	r8, #0
 800f886:	f104 091a 	add.w	r9, r4, #26
 800f88a:	e7f2      	b.n	800f872 <_printf_float+0x3f2>
 800f88c:	2301      	movs	r3, #1
 800f88e:	4642      	mov	r2, r8
 800f890:	e7df      	b.n	800f852 <_printf_float+0x3d2>
 800f892:	2301      	movs	r3, #1
 800f894:	464a      	mov	r2, r9
 800f896:	4631      	mov	r1, r6
 800f898:	4628      	mov	r0, r5
 800f89a:	47b8      	blx	r7
 800f89c:	3001      	adds	r0, #1
 800f89e:	f43f ae3d 	beq.w	800f51c <_printf_float+0x9c>
 800f8a2:	f108 0801 	add.w	r8, r8, #1
 800f8a6:	68e3      	ldr	r3, [r4, #12]
 800f8a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8aa:	1a5b      	subs	r3, r3, r1
 800f8ac:	4543      	cmp	r3, r8
 800f8ae:	dcf0      	bgt.n	800f892 <_printf_float+0x412>
 800f8b0:	e6f7      	b.n	800f6a2 <_printf_float+0x222>
 800f8b2:	f04f 0800 	mov.w	r8, #0
 800f8b6:	f104 0919 	add.w	r9, r4, #25
 800f8ba:	e7f4      	b.n	800f8a6 <_printf_float+0x426>

0800f8bc <_printf_common>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	4616      	mov	r6, r2
 800f8c2:	4699      	mov	r9, r3
 800f8c4:	688a      	ldr	r2, [r1, #8]
 800f8c6:	690b      	ldr	r3, [r1, #16]
 800f8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	bfb8      	it	lt
 800f8d0:	4613      	movlt	r3, r2
 800f8d2:	6033      	str	r3, [r6, #0]
 800f8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8d8:	4607      	mov	r7, r0
 800f8da:	460c      	mov	r4, r1
 800f8dc:	b10a      	cbz	r2, 800f8e2 <_printf_common+0x26>
 800f8de:	3301      	adds	r3, #1
 800f8e0:	6033      	str	r3, [r6, #0]
 800f8e2:	6823      	ldr	r3, [r4, #0]
 800f8e4:	0699      	lsls	r1, r3, #26
 800f8e6:	bf42      	ittt	mi
 800f8e8:	6833      	ldrmi	r3, [r6, #0]
 800f8ea:	3302      	addmi	r3, #2
 800f8ec:	6033      	strmi	r3, [r6, #0]
 800f8ee:	6825      	ldr	r5, [r4, #0]
 800f8f0:	f015 0506 	ands.w	r5, r5, #6
 800f8f4:	d106      	bne.n	800f904 <_printf_common+0x48>
 800f8f6:	f104 0a19 	add.w	sl, r4, #25
 800f8fa:	68e3      	ldr	r3, [r4, #12]
 800f8fc:	6832      	ldr	r2, [r6, #0]
 800f8fe:	1a9b      	subs	r3, r3, r2
 800f900:	42ab      	cmp	r3, r5
 800f902:	dc26      	bgt.n	800f952 <_printf_common+0x96>
 800f904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f908:	1e13      	subs	r3, r2, #0
 800f90a:	6822      	ldr	r2, [r4, #0]
 800f90c:	bf18      	it	ne
 800f90e:	2301      	movne	r3, #1
 800f910:	0692      	lsls	r2, r2, #26
 800f912:	d42b      	bmi.n	800f96c <_printf_common+0xb0>
 800f914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f918:	4649      	mov	r1, r9
 800f91a:	4638      	mov	r0, r7
 800f91c:	47c0      	blx	r8
 800f91e:	3001      	adds	r0, #1
 800f920:	d01e      	beq.n	800f960 <_printf_common+0xa4>
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	68e5      	ldr	r5, [r4, #12]
 800f926:	6832      	ldr	r2, [r6, #0]
 800f928:	f003 0306 	and.w	r3, r3, #6
 800f92c:	2b04      	cmp	r3, #4
 800f92e:	bf08      	it	eq
 800f930:	1aad      	subeq	r5, r5, r2
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	6922      	ldr	r2, [r4, #16]
 800f936:	bf0c      	ite	eq
 800f938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f93c:	2500      	movne	r5, #0
 800f93e:	4293      	cmp	r3, r2
 800f940:	bfc4      	itt	gt
 800f942:	1a9b      	subgt	r3, r3, r2
 800f944:	18ed      	addgt	r5, r5, r3
 800f946:	2600      	movs	r6, #0
 800f948:	341a      	adds	r4, #26
 800f94a:	42b5      	cmp	r5, r6
 800f94c:	d11a      	bne.n	800f984 <_printf_common+0xc8>
 800f94e:	2000      	movs	r0, #0
 800f950:	e008      	b.n	800f964 <_printf_common+0xa8>
 800f952:	2301      	movs	r3, #1
 800f954:	4652      	mov	r2, sl
 800f956:	4649      	mov	r1, r9
 800f958:	4638      	mov	r0, r7
 800f95a:	47c0      	blx	r8
 800f95c:	3001      	adds	r0, #1
 800f95e:	d103      	bne.n	800f968 <_printf_common+0xac>
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f968:	3501      	adds	r5, #1
 800f96a:	e7c6      	b.n	800f8fa <_printf_common+0x3e>
 800f96c:	18e1      	adds	r1, r4, r3
 800f96e:	1c5a      	adds	r2, r3, #1
 800f970:	2030      	movs	r0, #48	; 0x30
 800f972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f976:	4422      	add	r2, r4
 800f978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f980:	3302      	adds	r3, #2
 800f982:	e7c7      	b.n	800f914 <_printf_common+0x58>
 800f984:	2301      	movs	r3, #1
 800f986:	4622      	mov	r2, r4
 800f988:	4649      	mov	r1, r9
 800f98a:	4638      	mov	r0, r7
 800f98c:	47c0      	blx	r8
 800f98e:	3001      	adds	r0, #1
 800f990:	d0e6      	beq.n	800f960 <_printf_common+0xa4>
 800f992:	3601      	adds	r6, #1
 800f994:	e7d9      	b.n	800f94a <_printf_common+0x8e>
	...

0800f998 <_printf_i>:
 800f998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	7e0f      	ldrb	r7, [r1, #24]
 800f99e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9a0:	2f78      	cmp	r7, #120	; 0x78
 800f9a2:	4691      	mov	r9, r2
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	469a      	mov	sl, r3
 800f9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9ae:	d807      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9b0:	2f62      	cmp	r7, #98	; 0x62
 800f9b2:	d80a      	bhi.n	800f9ca <_printf_i+0x32>
 800f9b4:	2f00      	cmp	r7, #0
 800f9b6:	f000 80d8 	beq.w	800fb6a <_printf_i+0x1d2>
 800f9ba:	2f58      	cmp	r7, #88	; 0x58
 800f9bc:	f000 80a3 	beq.w	800fb06 <_printf_i+0x16e>
 800f9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9c8:	e03a      	b.n	800fa40 <_printf_i+0xa8>
 800f9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ce:	2b15      	cmp	r3, #21
 800f9d0:	d8f6      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9d2:	a101      	add	r1, pc, #4	; (adr r1, 800f9d8 <_printf_i+0x40>)
 800f9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9d8:	0800fa31 	.word	0x0800fa31
 800f9dc:	0800fa45 	.word	0x0800fa45
 800f9e0:	0800f9c1 	.word	0x0800f9c1
 800f9e4:	0800f9c1 	.word	0x0800f9c1
 800f9e8:	0800f9c1 	.word	0x0800f9c1
 800f9ec:	0800f9c1 	.word	0x0800f9c1
 800f9f0:	0800fa45 	.word	0x0800fa45
 800f9f4:	0800f9c1 	.word	0x0800f9c1
 800f9f8:	0800f9c1 	.word	0x0800f9c1
 800f9fc:	0800f9c1 	.word	0x0800f9c1
 800fa00:	0800f9c1 	.word	0x0800f9c1
 800fa04:	0800fb51 	.word	0x0800fb51
 800fa08:	0800fa75 	.word	0x0800fa75
 800fa0c:	0800fb33 	.word	0x0800fb33
 800fa10:	0800f9c1 	.word	0x0800f9c1
 800fa14:	0800f9c1 	.word	0x0800f9c1
 800fa18:	0800fb73 	.word	0x0800fb73
 800fa1c:	0800f9c1 	.word	0x0800f9c1
 800fa20:	0800fa75 	.word	0x0800fa75
 800fa24:	0800f9c1 	.word	0x0800f9c1
 800fa28:	0800f9c1 	.word	0x0800f9c1
 800fa2c:	0800fb3b 	.word	0x0800fb3b
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	1d1a      	adds	r2, r3, #4
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	602a      	str	r2, [r5, #0]
 800fa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa40:	2301      	movs	r3, #1
 800fa42:	e0a3      	b.n	800fb8c <_printf_i+0x1f4>
 800fa44:	6820      	ldr	r0, [r4, #0]
 800fa46:	6829      	ldr	r1, [r5, #0]
 800fa48:	0606      	lsls	r6, r0, #24
 800fa4a:	f101 0304 	add.w	r3, r1, #4
 800fa4e:	d50a      	bpl.n	800fa66 <_printf_i+0xce>
 800fa50:	680e      	ldr	r6, [r1, #0]
 800fa52:	602b      	str	r3, [r5, #0]
 800fa54:	2e00      	cmp	r6, #0
 800fa56:	da03      	bge.n	800fa60 <_printf_i+0xc8>
 800fa58:	232d      	movs	r3, #45	; 0x2d
 800fa5a:	4276      	negs	r6, r6
 800fa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa60:	485e      	ldr	r0, [pc, #376]	; (800fbdc <_printf_i+0x244>)
 800fa62:	230a      	movs	r3, #10
 800fa64:	e019      	b.n	800fa9a <_printf_i+0x102>
 800fa66:	680e      	ldr	r6, [r1, #0]
 800fa68:	602b      	str	r3, [r5, #0]
 800fa6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa6e:	bf18      	it	ne
 800fa70:	b236      	sxthne	r6, r6
 800fa72:	e7ef      	b.n	800fa54 <_printf_i+0xbc>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	6820      	ldr	r0, [r4, #0]
 800fa78:	1d19      	adds	r1, r3, #4
 800fa7a:	6029      	str	r1, [r5, #0]
 800fa7c:	0601      	lsls	r1, r0, #24
 800fa7e:	d501      	bpl.n	800fa84 <_printf_i+0xec>
 800fa80:	681e      	ldr	r6, [r3, #0]
 800fa82:	e002      	b.n	800fa8a <_printf_i+0xf2>
 800fa84:	0646      	lsls	r6, r0, #25
 800fa86:	d5fb      	bpl.n	800fa80 <_printf_i+0xe8>
 800fa88:	881e      	ldrh	r6, [r3, #0]
 800fa8a:	4854      	ldr	r0, [pc, #336]	; (800fbdc <_printf_i+0x244>)
 800fa8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa8e:	bf0c      	ite	eq
 800fa90:	2308      	moveq	r3, #8
 800fa92:	230a      	movne	r3, #10
 800fa94:	2100      	movs	r1, #0
 800fa96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa9a:	6865      	ldr	r5, [r4, #4]
 800fa9c:	60a5      	str	r5, [r4, #8]
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	bfa2      	ittt	ge
 800faa2:	6821      	ldrge	r1, [r4, #0]
 800faa4:	f021 0104 	bicge.w	r1, r1, #4
 800faa8:	6021      	strge	r1, [r4, #0]
 800faaa:	b90e      	cbnz	r6, 800fab0 <_printf_i+0x118>
 800faac:	2d00      	cmp	r5, #0
 800faae:	d04d      	beq.n	800fb4c <_printf_i+0x1b4>
 800fab0:	4615      	mov	r5, r2
 800fab2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fab6:	fb03 6711 	mls	r7, r3, r1, r6
 800faba:	5dc7      	ldrb	r7, [r0, r7]
 800fabc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fac0:	4637      	mov	r7, r6
 800fac2:	42bb      	cmp	r3, r7
 800fac4:	460e      	mov	r6, r1
 800fac6:	d9f4      	bls.n	800fab2 <_printf_i+0x11a>
 800fac8:	2b08      	cmp	r3, #8
 800faca:	d10b      	bne.n	800fae4 <_printf_i+0x14c>
 800facc:	6823      	ldr	r3, [r4, #0]
 800face:	07de      	lsls	r6, r3, #31
 800fad0:	d508      	bpl.n	800fae4 <_printf_i+0x14c>
 800fad2:	6923      	ldr	r3, [r4, #16]
 800fad4:	6861      	ldr	r1, [r4, #4]
 800fad6:	4299      	cmp	r1, r3
 800fad8:	bfde      	ittt	le
 800fada:	2330      	movle	r3, #48	; 0x30
 800fadc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fae4:	1b52      	subs	r2, r2, r5
 800fae6:	6122      	str	r2, [r4, #16]
 800fae8:	f8cd a000 	str.w	sl, [sp]
 800faec:	464b      	mov	r3, r9
 800faee:	aa03      	add	r2, sp, #12
 800faf0:	4621      	mov	r1, r4
 800faf2:	4640      	mov	r0, r8
 800faf4:	f7ff fee2 	bl	800f8bc <_printf_common>
 800faf8:	3001      	adds	r0, #1
 800fafa:	d14c      	bne.n	800fb96 <_printf_i+0x1fe>
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	b004      	add	sp, #16
 800fb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb06:	4835      	ldr	r0, [pc, #212]	; (800fbdc <_printf_i+0x244>)
 800fb08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb0c:	6829      	ldr	r1, [r5, #0]
 800fb0e:	6823      	ldr	r3, [r4, #0]
 800fb10:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb14:	6029      	str	r1, [r5, #0]
 800fb16:	061d      	lsls	r5, r3, #24
 800fb18:	d514      	bpl.n	800fb44 <_printf_i+0x1ac>
 800fb1a:	07df      	lsls	r7, r3, #31
 800fb1c:	bf44      	itt	mi
 800fb1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb22:	6023      	strmi	r3, [r4, #0]
 800fb24:	b91e      	cbnz	r6, 800fb2e <_printf_i+0x196>
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	f023 0320 	bic.w	r3, r3, #32
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	2310      	movs	r3, #16
 800fb30:	e7b0      	b.n	800fa94 <_printf_i+0xfc>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	f043 0320 	orr.w	r3, r3, #32
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	2378      	movs	r3, #120	; 0x78
 800fb3c:	4828      	ldr	r0, [pc, #160]	; (800fbe0 <_printf_i+0x248>)
 800fb3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb42:	e7e3      	b.n	800fb0c <_printf_i+0x174>
 800fb44:	0659      	lsls	r1, r3, #25
 800fb46:	bf48      	it	mi
 800fb48:	b2b6      	uxthmi	r6, r6
 800fb4a:	e7e6      	b.n	800fb1a <_printf_i+0x182>
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	e7bb      	b.n	800fac8 <_printf_i+0x130>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	6826      	ldr	r6, [r4, #0]
 800fb54:	6961      	ldr	r1, [r4, #20]
 800fb56:	1d18      	adds	r0, r3, #4
 800fb58:	6028      	str	r0, [r5, #0]
 800fb5a:	0635      	lsls	r5, r6, #24
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	d501      	bpl.n	800fb64 <_printf_i+0x1cc>
 800fb60:	6019      	str	r1, [r3, #0]
 800fb62:	e002      	b.n	800fb6a <_printf_i+0x1d2>
 800fb64:	0670      	lsls	r0, r6, #25
 800fb66:	d5fb      	bpl.n	800fb60 <_printf_i+0x1c8>
 800fb68:	8019      	strh	r1, [r3, #0]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	4615      	mov	r5, r2
 800fb70:	e7ba      	b.n	800fae8 <_printf_i+0x150>
 800fb72:	682b      	ldr	r3, [r5, #0]
 800fb74:	1d1a      	adds	r2, r3, #4
 800fb76:	602a      	str	r2, [r5, #0]
 800fb78:	681d      	ldr	r5, [r3, #0]
 800fb7a:	6862      	ldr	r2, [r4, #4]
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4628      	mov	r0, r5
 800fb80:	f7f0 fbb6 	bl	80002f0 <memchr>
 800fb84:	b108      	cbz	r0, 800fb8a <_printf_i+0x1f2>
 800fb86:	1b40      	subs	r0, r0, r5
 800fb88:	6060      	str	r0, [r4, #4]
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	6123      	str	r3, [r4, #16]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb94:	e7a8      	b.n	800fae8 <_printf_i+0x150>
 800fb96:	6923      	ldr	r3, [r4, #16]
 800fb98:	462a      	mov	r2, r5
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	47d0      	blx	sl
 800fba0:	3001      	adds	r0, #1
 800fba2:	d0ab      	beq.n	800fafc <_printf_i+0x164>
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	079b      	lsls	r3, r3, #30
 800fba8:	d413      	bmi.n	800fbd2 <_printf_i+0x23a>
 800fbaa:	68e0      	ldr	r0, [r4, #12]
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	4298      	cmp	r0, r3
 800fbb0:	bfb8      	it	lt
 800fbb2:	4618      	movlt	r0, r3
 800fbb4:	e7a4      	b.n	800fb00 <_printf_i+0x168>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4632      	mov	r2, r6
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	47d0      	blx	sl
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d09b      	beq.n	800fafc <_printf_i+0x164>
 800fbc4:	3501      	adds	r5, #1
 800fbc6:	68e3      	ldr	r3, [r4, #12]
 800fbc8:	9903      	ldr	r1, [sp, #12]
 800fbca:	1a5b      	subs	r3, r3, r1
 800fbcc:	42ab      	cmp	r3, r5
 800fbce:	dcf2      	bgt.n	800fbb6 <_printf_i+0x21e>
 800fbd0:	e7eb      	b.n	800fbaa <_printf_i+0x212>
 800fbd2:	2500      	movs	r5, #0
 800fbd4:	f104 0619 	add.w	r6, r4, #25
 800fbd8:	e7f5      	b.n	800fbc6 <_printf_i+0x22e>
 800fbda:	bf00      	nop
 800fbdc:	0801386a 	.word	0x0801386a
 800fbe0:	0801387b 	.word	0x0801387b

0800fbe4 <iprintf>:
 800fbe4:	b40f      	push	{r0, r1, r2, r3}
 800fbe6:	4b0a      	ldr	r3, [pc, #40]	; (800fc10 <iprintf+0x2c>)
 800fbe8:	b513      	push	{r0, r1, r4, lr}
 800fbea:	681c      	ldr	r4, [r3, #0]
 800fbec:	b124      	cbz	r4, 800fbf8 <iprintf+0x14>
 800fbee:	69a3      	ldr	r3, [r4, #24]
 800fbf0:	b913      	cbnz	r3, 800fbf8 <iprintf+0x14>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f7ff fa42 	bl	800f07c <__sinit>
 800fbf8:	ab05      	add	r3, sp, #20
 800fbfa:	9a04      	ldr	r2, [sp, #16]
 800fbfc:	68a1      	ldr	r1, [r4, #8]
 800fbfe:	9301      	str	r3, [sp, #4]
 800fc00:	4620      	mov	r0, r4
 800fc02:	f001 fef5 	bl	80119f0 <_vfiprintf_r>
 800fc06:	b002      	add	sp, #8
 800fc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc0c:	b004      	add	sp, #16
 800fc0e:	4770      	bx	lr
 800fc10:	2400001c 	.word	0x2400001c

0800fc14 <_puts_r>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	460e      	mov	r6, r1
 800fc18:	4605      	mov	r5, r0
 800fc1a:	b118      	cbz	r0, 800fc24 <_puts_r+0x10>
 800fc1c:	6983      	ldr	r3, [r0, #24]
 800fc1e:	b90b      	cbnz	r3, 800fc24 <_puts_r+0x10>
 800fc20:	f7ff fa2c 	bl	800f07c <__sinit>
 800fc24:	69ab      	ldr	r3, [r5, #24]
 800fc26:	68ac      	ldr	r4, [r5, #8]
 800fc28:	b913      	cbnz	r3, 800fc30 <_puts_r+0x1c>
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f7ff fa26 	bl	800f07c <__sinit>
 800fc30:	4b2c      	ldr	r3, [pc, #176]	; (800fce4 <_puts_r+0xd0>)
 800fc32:	429c      	cmp	r4, r3
 800fc34:	d120      	bne.n	800fc78 <_puts_r+0x64>
 800fc36:	686c      	ldr	r4, [r5, #4]
 800fc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc3a:	07db      	lsls	r3, r3, #31
 800fc3c:	d405      	bmi.n	800fc4a <_puts_r+0x36>
 800fc3e:	89a3      	ldrh	r3, [r4, #12]
 800fc40:	0598      	lsls	r0, r3, #22
 800fc42:	d402      	bmi.n	800fc4a <_puts_r+0x36>
 800fc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc46:	f7ff fadc 	bl	800f202 <__retarget_lock_acquire_recursive>
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	0719      	lsls	r1, r3, #28
 800fc4e:	d51d      	bpl.n	800fc8c <_puts_r+0x78>
 800fc50:	6923      	ldr	r3, [r4, #16]
 800fc52:	b1db      	cbz	r3, 800fc8c <_puts_r+0x78>
 800fc54:	3e01      	subs	r6, #1
 800fc56:	68a3      	ldr	r3, [r4, #8]
 800fc58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	60a3      	str	r3, [r4, #8]
 800fc60:	bb39      	cbnz	r1, 800fcb2 <_puts_r+0x9e>
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	da38      	bge.n	800fcd8 <_puts_r+0xc4>
 800fc66:	4622      	mov	r2, r4
 800fc68:	210a      	movs	r1, #10
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f000 f926 	bl	800febc <__swbuf_r>
 800fc70:	3001      	adds	r0, #1
 800fc72:	d011      	beq.n	800fc98 <_puts_r+0x84>
 800fc74:	250a      	movs	r5, #10
 800fc76:	e011      	b.n	800fc9c <_puts_r+0x88>
 800fc78:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <_puts_r+0xd4>)
 800fc7a:	429c      	cmp	r4, r3
 800fc7c:	d101      	bne.n	800fc82 <_puts_r+0x6e>
 800fc7e:	68ac      	ldr	r4, [r5, #8]
 800fc80:	e7da      	b.n	800fc38 <_puts_r+0x24>
 800fc82:	4b1a      	ldr	r3, [pc, #104]	; (800fcec <_puts_r+0xd8>)
 800fc84:	429c      	cmp	r4, r3
 800fc86:	bf08      	it	eq
 800fc88:	68ec      	ldreq	r4, [r5, #12]
 800fc8a:	e7d5      	b.n	800fc38 <_puts_r+0x24>
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f000 f978 	bl	800ff84 <__swsetup_r>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d0dd      	beq.n	800fc54 <_puts_r+0x40>
 800fc98:	f04f 35ff 	mov.w	r5, #4294967295
 800fc9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc9e:	07da      	lsls	r2, r3, #31
 800fca0:	d405      	bmi.n	800fcae <_puts_r+0x9a>
 800fca2:	89a3      	ldrh	r3, [r4, #12]
 800fca4:	059b      	lsls	r3, r3, #22
 800fca6:	d402      	bmi.n	800fcae <_puts_r+0x9a>
 800fca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcaa:	f7ff faab 	bl	800f204 <__retarget_lock_release_recursive>
 800fcae:	4628      	mov	r0, r5
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	da04      	bge.n	800fcc0 <_puts_r+0xac>
 800fcb6:	69a2      	ldr	r2, [r4, #24]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	dc06      	bgt.n	800fcca <_puts_r+0xb6>
 800fcbc:	290a      	cmp	r1, #10
 800fcbe:	d004      	beq.n	800fcca <_puts_r+0xb6>
 800fcc0:	6823      	ldr	r3, [r4, #0]
 800fcc2:	1c5a      	adds	r2, r3, #1
 800fcc4:	6022      	str	r2, [r4, #0]
 800fcc6:	7019      	strb	r1, [r3, #0]
 800fcc8:	e7c5      	b.n	800fc56 <_puts_r+0x42>
 800fcca:	4622      	mov	r2, r4
 800fccc:	4628      	mov	r0, r5
 800fcce:	f000 f8f5 	bl	800febc <__swbuf_r>
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d1bf      	bne.n	800fc56 <_puts_r+0x42>
 800fcd6:	e7df      	b.n	800fc98 <_puts_r+0x84>
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	250a      	movs	r5, #10
 800fcdc:	1c5a      	adds	r2, r3, #1
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	701d      	strb	r5, [r3, #0]
 800fce2:	e7db      	b.n	800fc9c <_puts_r+0x88>
 800fce4:	08013814 	.word	0x08013814
 800fce8:	08013834 	.word	0x08013834
 800fcec:	080137f4 	.word	0x080137f4

0800fcf0 <puts>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <puts+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f7ff bf8d 	b.w	800fc14 <_puts_r>
 800fcfa:	bf00      	nop
 800fcfc:	2400001c 	.word	0x2400001c

0800fd00 <cleanup_glue>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	460c      	mov	r4, r1
 800fd04:	6809      	ldr	r1, [r1, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	b109      	cbz	r1, 800fd0e <cleanup_glue+0xe>
 800fd0a:	f7ff fff9 	bl	800fd00 <cleanup_glue>
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4628      	mov	r0, r5
 800fd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd16:	f001 bc99 	b.w	801164c <_free_r>
	...

0800fd1c <_reclaim_reent>:
 800fd1c:	4b2c      	ldr	r3, [pc, #176]	; (800fdd0 <_reclaim_reent+0xb4>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4283      	cmp	r3, r0
 800fd22:	b570      	push	{r4, r5, r6, lr}
 800fd24:	4604      	mov	r4, r0
 800fd26:	d051      	beq.n	800fdcc <_reclaim_reent+0xb0>
 800fd28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fd2a:	b143      	cbz	r3, 800fd3e <_reclaim_reent+0x22>
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d14a      	bne.n	800fdc8 <_reclaim_reent+0xac>
 800fd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd34:	6819      	ldr	r1, [r3, #0]
 800fd36:	b111      	cbz	r1, 800fd3e <_reclaim_reent+0x22>
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f001 fc87 	bl	801164c <_free_r>
 800fd3e:	6961      	ldr	r1, [r4, #20]
 800fd40:	b111      	cbz	r1, 800fd48 <_reclaim_reent+0x2c>
 800fd42:	4620      	mov	r0, r4
 800fd44:	f001 fc82 	bl	801164c <_free_r>
 800fd48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fd4a:	b111      	cbz	r1, 800fd52 <_reclaim_reent+0x36>
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f001 fc7d 	bl	801164c <_free_r>
 800fd52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd54:	b111      	cbz	r1, 800fd5c <_reclaim_reent+0x40>
 800fd56:	4620      	mov	r0, r4
 800fd58:	f001 fc78 	bl	801164c <_free_r>
 800fd5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fd5e:	b111      	cbz	r1, 800fd66 <_reclaim_reent+0x4a>
 800fd60:	4620      	mov	r0, r4
 800fd62:	f001 fc73 	bl	801164c <_free_r>
 800fd66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fd68:	b111      	cbz	r1, 800fd70 <_reclaim_reent+0x54>
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f001 fc6e 	bl	801164c <_free_r>
 800fd70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fd72:	b111      	cbz	r1, 800fd7a <_reclaim_reent+0x5e>
 800fd74:	4620      	mov	r0, r4
 800fd76:	f001 fc69 	bl	801164c <_free_r>
 800fd7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fd7c:	b111      	cbz	r1, 800fd84 <_reclaim_reent+0x68>
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f001 fc64 	bl	801164c <_free_r>
 800fd84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd86:	b111      	cbz	r1, 800fd8e <_reclaim_reent+0x72>
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f001 fc5f 	bl	801164c <_free_r>
 800fd8e:	69a3      	ldr	r3, [r4, #24]
 800fd90:	b1e3      	cbz	r3, 800fdcc <_reclaim_reent+0xb0>
 800fd92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fd94:	4620      	mov	r0, r4
 800fd96:	4798      	blx	r3
 800fd98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd9a:	b1b9      	cbz	r1, 800fdcc <_reclaim_reent+0xb0>
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fda2:	f7ff bfad 	b.w	800fd00 <cleanup_glue>
 800fda6:	5949      	ldr	r1, [r1, r5]
 800fda8:	b941      	cbnz	r1, 800fdbc <_reclaim_reent+0xa0>
 800fdaa:	3504      	adds	r5, #4
 800fdac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdae:	2d80      	cmp	r5, #128	; 0x80
 800fdb0:	68d9      	ldr	r1, [r3, #12]
 800fdb2:	d1f8      	bne.n	800fda6 <_reclaim_reent+0x8a>
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f001 fc49 	bl	801164c <_free_r>
 800fdba:	e7ba      	b.n	800fd32 <_reclaim_reent+0x16>
 800fdbc:	680e      	ldr	r6, [r1, #0]
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f001 fc44 	bl	801164c <_free_r>
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	e7ef      	b.n	800fda8 <_reclaim_reent+0x8c>
 800fdc8:	2500      	movs	r5, #0
 800fdca:	e7ef      	b.n	800fdac <_reclaim_reent+0x90>
 800fdcc:	bd70      	pop	{r4, r5, r6, pc}
 800fdce:	bf00      	nop
 800fdd0:	2400001c 	.word	0x2400001c

0800fdd4 <_sbrk_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d06      	ldr	r5, [pc, #24]	; (800fdf0 <_sbrk_r+0x1c>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	602b      	str	r3, [r5, #0]
 800fde0:	f7f5 f946 	bl	8005070 <_sbrk>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_sbrk_r+0x1a>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_sbrk_r+0x1a>
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	24005410 	.word	0x24005410

0800fdf4 <siprintf>:
 800fdf4:	b40e      	push	{r1, r2, r3}
 800fdf6:	b500      	push	{lr}
 800fdf8:	b09c      	sub	sp, #112	; 0x70
 800fdfa:	ab1d      	add	r3, sp, #116	; 0x74
 800fdfc:	9002      	str	r0, [sp, #8]
 800fdfe:	9006      	str	r0, [sp, #24]
 800fe00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe04:	4809      	ldr	r0, [pc, #36]	; (800fe2c <siprintf+0x38>)
 800fe06:	9107      	str	r1, [sp, #28]
 800fe08:	9104      	str	r1, [sp, #16]
 800fe0a:	4909      	ldr	r1, [pc, #36]	; (800fe30 <siprintf+0x3c>)
 800fe0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe10:	9105      	str	r1, [sp, #20]
 800fe12:	6800      	ldr	r0, [r0, #0]
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	a902      	add	r1, sp, #8
 800fe18:	f001 fcc0 	bl	801179c <_svfiprintf_r>
 800fe1c:	9b02      	ldr	r3, [sp, #8]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	701a      	strb	r2, [r3, #0]
 800fe22:	b01c      	add	sp, #112	; 0x70
 800fe24:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe28:	b003      	add	sp, #12
 800fe2a:	4770      	bx	lr
 800fe2c:	2400001c 	.word	0x2400001c
 800fe30:	ffff0208 	.word	0xffff0208

0800fe34 <__sread>:
 800fe34:	b510      	push	{r4, lr}
 800fe36:	460c      	mov	r4, r1
 800fe38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe3c:	f001 ff08 	bl	8011c50 <_read_r>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	bfab      	itete	ge
 800fe44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe46:	89a3      	ldrhlt	r3, [r4, #12]
 800fe48:	181b      	addge	r3, r3, r0
 800fe4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe4e:	bfac      	ite	ge
 800fe50:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe52:	81a3      	strhlt	r3, [r4, #12]
 800fe54:	bd10      	pop	{r4, pc}

0800fe56 <__swrite>:
 800fe56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5a:	461f      	mov	r7, r3
 800fe5c:	898b      	ldrh	r3, [r1, #12]
 800fe5e:	05db      	lsls	r3, r3, #23
 800fe60:	4605      	mov	r5, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	4616      	mov	r6, r2
 800fe66:	d505      	bpl.n	800fe74 <__swrite+0x1e>
 800fe68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f000 ffc6 	bl	8010e00 <_lseek_r>
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe7e:	81a3      	strh	r3, [r4, #12]
 800fe80:	4632      	mov	r2, r6
 800fe82:	463b      	mov	r3, r7
 800fe84:	4628      	mov	r0, r5
 800fe86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8a:	f000 b869 	b.w	800ff60 <_write_r>

0800fe8e <__sseek>:
 800fe8e:	b510      	push	{r4, lr}
 800fe90:	460c      	mov	r4, r1
 800fe92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe96:	f000 ffb3 	bl	8010e00 <_lseek_r>
 800fe9a:	1c43      	adds	r3, r0, #1
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	bf15      	itete	ne
 800fea0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800feaa:	81a3      	strheq	r3, [r4, #12]
 800feac:	bf18      	it	ne
 800feae:	81a3      	strhne	r3, [r4, #12]
 800feb0:	bd10      	pop	{r4, pc}

0800feb2 <__sclose>:
 800feb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb6:	f000 b8d3 	b.w	8010060 <_close_r>
	...

0800febc <__swbuf_r>:
 800febc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febe:	460e      	mov	r6, r1
 800fec0:	4614      	mov	r4, r2
 800fec2:	4605      	mov	r5, r0
 800fec4:	b118      	cbz	r0, 800fece <__swbuf_r+0x12>
 800fec6:	6983      	ldr	r3, [r0, #24]
 800fec8:	b90b      	cbnz	r3, 800fece <__swbuf_r+0x12>
 800feca:	f7ff f8d7 	bl	800f07c <__sinit>
 800fece:	4b21      	ldr	r3, [pc, #132]	; (800ff54 <__swbuf_r+0x98>)
 800fed0:	429c      	cmp	r4, r3
 800fed2:	d12b      	bne.n	800ff2c <__swbuf_r+0x70>
 800fed4:	686c      	ldr	r4, [r5, #4]
 800fed6:	69a3      	ldr	r3, [r4, #24]
 800fed8:	60a3      	str	r3, [r4, #8]
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	071a      	lsls	r2, r3, #28
 800fede:	d52f      	bpl.n	800ff40 <__swbuf_r+0x84>
 800fee0:	6923      	ldr	r3, [r4, #16]
 800fee2:	b36b      	cbz	r3, 800ff40 <__swbuf_r+0x84>
 800fee4:	6923      	ldr	r3, [r4, #16]
 800fee6:	6820      	ldr	r0, [r4, #0]
 800fee8:	1ac0      	subs	r0, r0, r3
 800feea:	6963      	ldr	r3, [r4, #20]
 800feec:	b2f6      	uxtb	r6, r6
 800feee:	4283      	cmp	r3, r0
 800fef0:	4637      	mov	r7, r6
 800fef2:	dc04      	bgt.n	800fefe <__swbuf_r+0x42>
 800fef4:	4621      	mov	r1, r4
 800fef6:	4628      	mov	r0, r5
 800fef8:	f000 ff42 	bl	8010d80 <_fflush_r>
 800fefc:	bb30      	cbnz	r0, 800ff4c <__swbuf_r+0x90>
 800fefe:	68a3      	ldr	r3, [r4, #8]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	60a3      	str	r3, [r4, #8]
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	6022      	str	r2, [r4, #0]
 800ff0a:	701e      	strb	r6, [r3, #0]
 800ff0c:	6963      	ldr	r3, [r4, #20]
 800ff0e:	3001      	adds	r0, #1
 800ff10:	4283      	cmp	r3, r0
 800ff12:	d004      	beq.n	800ff1e <__swbuf_r+0x62>
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	07db      	lsls	r3, r3, #31
 800ff18:	d506      	bpl.n	800ff28 <__swbuf_r+0x6c>
 800ff1a:	2e0a      	cmp	r6, #10
 800ff1c:	d104      	bne.n	800ff28 <__swbuf_r+0x6c>
 800ff1e:	4621      	mov	r1, r4
 800ff20:	4628      	mov	r0, r5
 800ff22:	f000 ff2d 	bl	8010d80 <_fflush_r>
 800ff26:	b988      	cbnz	r0, 800ff4c <__swbuf_r+0x90>
 800ff28:	4638      	mov	r0, r7
 800ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff2c:	4b0a      	ldr	r3, [pc, #40]	; (800ff58 <__swbuf_r+0x9c>)
 800ff2e:	429c      	cmp	r4, r3
 800ff30:	d101      	bne.n	800ff36 <__swbuf_r+0x7a>
 800ff32:	68ac      	ldr	r4, [r5, #8]
 800ff34:	e7cf      	b.n	800fed6 <__swbuf_r+0x1a>
 800ff36:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <__swbuf_r+0xa0>)
 800ff38:	429c      	cmp	r4, r3
 800ff3a:	bf08      	it	eq
 800ff3c:	68ec      	ldreq	r4, [r5, #12]
 800ff3e:	e7ca      	b.n	800fed6 <__swbuf_r+0x1a>
 800ff40:	4621      	mov	r1, r4
 800ff42:	4628      	mov	r0, r5
 800ff44:	f000 f81e 	bl	800ff84 <__swsetup_r>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d0cb      	beq.n	800fee4 <__swbuf_r+0x28>
 800ff4c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff50:	e7ea      	b.n	800ff28 <__swbuf_r+0x6c>
 800ff52:	bf00      	nop
 800ff54:	08013814 	.word	0x08013814
 800ff58:	08013834 	.word	0x08013834
 800ff5c:	080137f4 	.word	0x080137f4

0800ff60 <_write_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	; (800ff80 <_write_r+0x20>)
 800ff64:	4604      	mov	r4, r0
 800ff66:	4608      	mov	r0, r1
 800ff68:	4611      	mov	r1, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	602a      	str	r2, [r5, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f7f5 f82e 	bl	8004fd0 <_write>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_write_r+0x1e>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_write_r+0x1e>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	24005410 	.word	0x24005410

0800ff84 <__swsetup_r>:
 800ff84:	4b32      	ldr	r3, [pc, #200]	; (8010050 <__swsetup_r+0xcc>)
 800ff86:	b570      	push	{r4, r5, r6, lr}
 800ff88:	681d      	ldr	r5, [r3, #0]
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	b125      	cbz	r5, 800ff9a <__swsetup_r+0x16>
 800ff90:	69ab      	ldr	r3, [r5, #24]
 800ff92:	b913      	cbnz	r3, 800ff9a <__swsetup_r+0x16>
 800ff94:	4628      	mov	r0, r5
 800ff96:	f7ff f871 	bl	800f07c <__sinit>
 800ff9a:	4b2e      	ldr	r3, [pc, #184]	; (8010054 <__swsetup_r+0xd0>)
 800ff9c:	429c      	cmp	r4, r3
 800ff9e:	d10f      	bne.n	800ffc0 <__swsetup_r+0x3c>
 800ffa0:	686c      	ldr	r4, [r5, #4]
 800ffa2:	89a3      	ldrh	r3, [r4, #12]
 800ffa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffa8:	0719      	lsls	r1, r3, #28
 800ffaa:	d42c      	bmi.n	8010006 <__swsetup_r+0x82>
 800ffac:	06dd      	lsls	r5, r3, #27
 800ffae:	d411      	bmi.n	800ffd4 <__swsetup_r+0x50>
 800ffb0:	2309      	movs	r3, #9
 800ffb2:	6033      	str	r3, [r6, #0]
 800ffb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffb8:	81a3      	strh	r3, [r4, #12]
 800ffba:	f04f 30ff 	mov.w	r0, #4294967295
 800ffbe:	e03e      	b.n	801003e <__swsetup_r+0xba>
 800ffc0:	4b25      	ldr	r3, [pc, #148]	; (8010058 <__swsetup_r+0xd4>)
 800ffc2:	429c      	cmp	r4, r3
 800ffc4:	d101      	bne.n	800ffca <__swsetup_r+0x46>
 800ffc6:	68ac      	ldr	r4, [r5, #8]
 800ffc8:	e7eb      	b.n	800ffa2 <__swsetup_r+0x1e>
 800ffca:	4b24      	ldr	r3, [pc, #144]	; (801005c <__swsetup_r+0xd8>)
 800ffcc:	429c      	cmp	r4, r3
 800ffce:	bf08      	it	eq
 800ffd0:	68ec      	ldreq	r4, [r5, #12]
 800ffd2:	e7e6      	b.n	800ffa2 <__swsetup_r+0x1e>
 800ffd4:	0758      	lsls	r0, r3, #29
 800ffd6:	d512      	bpl.n	800fffe <__swsetup_r+0x7a>
 800ffd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffda:	b141      	cbz	r1, 800ffee <__swsetup_r+0x6a>
 800ffdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	d002      	beq.n	800ffea <__swsetup_r+0x66>
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f001 fb31 	bl	801164c <_free_r>
 800ffea:	2300      	movs	r3, #0
 800ffec:	6363      	str	r3, [r4, #52]	; 0x34
 800ffee:	89a3      	ldrh	r3, [r4, #12]
 800fff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fff4:	81a3      	strh	r3, [r4, #12]
 800fff6:	2300      	movs	r3, #0
 800fff8:	6063      	str	r3, [r4, #4]
 800fffa:	6923      	ldr	r3, [r4, #16]
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	89a3      	ldrh	r3, [r4, #12]
 8010000:	f043 0308 	orr.w	r3, r3, #8
 8010004:	81a3      	strh	r3, [r4, #12]
 8010006:	6923      	ldr	r3, [r4, #16]
 8010008:	b94b      	cbnz	r3, 801001e <__swsetup_r+0x9a>
 801000a:	89a3      	ldrh	r3, [r4, #12]
 801000c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010014:	d003      	beq.n	801001e <__swsetup_r+0x9a>
 8010016:	4621      	mov	r1, r4
 8010018:	4630      	mov	r0, r6
 801001a:	f000 ff29 	bl	8010e70 <__smakebuf_r>
 801001e:	89a0      	ldrh	r0, [r4, #12]
 8010020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010024:	f010 0301 	ands.w	r3, r0, #1
 8010028:	d00a      	beq.n	8010040 <__swsetup_r+0xbc>
 801002a:	2300      	movs	r3, #0
 801002c:	60a3      	str	r3, [r4, #8]
 801002e:	6963      	ldr	r3, [r4, #20]
 8010030:	425b      	negs	r3, r3
 8010032:	61a3      	str	r3, [r4, #24]
 8010034:	6923      	ldr	r3, [r4, #16]
 8010036:	b943      	cbnz	r3, 801004a <__swsetup_r+0xc6>
 8010038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801003c:	d1ba      	bne.n	800ffb4 <__swsetup_r+0x30>
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	0781      	lsls	r1, r0, #30
 8010042:	bf58      	it	pl
 8010044:	6963      	ldrpl	r3, [r4, #20]
 8010046:	60a3      	str	r3, [r4, #8]
 8010048:	e7f4      	b.n	8010034 <__swsetup_r+0xb0>
 801004a:	2000      	movs	r0, #0
 801004c:	e7f7      	b.n	801003e <__swsetup_r+0xba>
 801004e:	bf00      	nop
 8010050:	2400001c 	.word	0x2400001c
 8010054:	08013814 	.word	0x08013814
 8010058:	08013834 	.word	0x08013834
 801005c:	080137f4 	.word	0x080137f4

08010060 <_close_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d06      	ldr	r5, [pc, #24]	; (801007c <_close_r+0x1c>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	f7f4 ffcc 	bl	8005008 <_close>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_close_r+0x1a>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_close_r+0x1a>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	24005410 	.word	0x24005410

08010080 <quorem>:
 8010080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	6903      	ldr	r3, [r0, #16]
 8010086:	690c      	ldr	r4, [r1, #16]
 8010088:	42a3      	cmp	r3, r4
 801008a:	4607      	mov	r7, r0
 801008c:	f2c0 8081 	blt.w	8010192 <quorem+0x112>
 8010090:	3c01      	subs	r4, #1
 8010092:	f101 0814 	add.w	r8, r1, #20
 8010096:	f100 0514 	add.w	r5, r0, #20
 801009a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801009e:	9301      	str	r3, [sp, #4]
 80100a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a8:	3301      	adds	r3, #1
 80100aa:	429a      	cmp	r2, r3
 80100ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80100b8:	d331      	bcc.n	801011e <quorem+0x9e>
 80100ba:	f04f 0e00 	mov.w	lr, #0
 80100be:	4640      	mov	r0, r8
 80100c0:	46ac      	mov	ip, r5
 80100c2:	46f2      	mov	sl, lr
 80100c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80100c8:	b293      	uxth	r3, r2
 80100ca:	fb06 e303 	mla	r3, r6, r3, lr
 80100ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	ebaa 0303 	sub.w	r3, sl, r3
 80100d8:	f8dc a000 	ldr.w	sl, [ip]
 80100dc:	0c12      	lsrs	r2, r2, #16
 80100de:	fa13 f38a 	uxtah	r3, r3, sl
 80100e2:	fb06 e202 	mla	r2, r6, r2, lr
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	9b00      	ldr	r3, [sp, #0]
 80100ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100ee:	b292      	uxth	r2, r2
 80100f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80100f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80100fc:	4581      	cmp	r9, r0
 80100fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010102:	f84c 3b04 	str.w	r3, [ip], #4
 8010106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801010a:	d2db      	bcs.n	80100c4 <quorem+0x44>
 801010c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010110:	b92b      	cbnz	r3, 801011e <quorem+0x9e>
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	3b04      	subs	r3, #4
 8010116:	429d      	cmp	r5, r3
 8010118:	461a      	mov	r2, r3
 801011a:	d32e      	bcc.n	801017a <quorem+0xfa>
 801011c:	613c      	str	r4, [r7, #16]
 801011e:	4638      	mov	r0, r7
 8010120:	f001 f97c 	bl	801141c <__mcmp>
 8010124:	2800      	cmp	r0, #0
 8010126:	db24      	blt.n	8010172 <quorem+0xf2>
 8010128:	3601      	adds	r6, #1
 801012a:	4628      	mov	r0, r5
 801012c:	f04f 0c00 	mov.w	ip, #0
 8010130:	f858 2b04 	ldr.w	r2, [r8], #4
 8010134:	f8d0 e000 	ldr.w	lr, [r0]
 8010138:	b293      	uxth	r3, r2
 801013a:	ebac 0303 	sub.w	r3, ip, r3
 801013e:	0c12      	lsrs	r2, r2, #16
 8010140:	fa13 f38e 	uxtah	r3, r3, lr
 8010144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801014c:	b29b      	uxth	r3, r3
 801014e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010152:	45c1      	cmp	r9, r8
 8010154:	f840 3b04 	str.w	r3, [r0], #4
 8010158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801015c:	d2e8      	bcs.n	8010130 <quorem+0xb0>
 801015e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010166:	b922      	cbnz	r2, 8010172 <quorem+0xf2>
 8010168:	3b04      	subs	r3, #4
 801016a:	429d      	cmp	r5, r3
 801016c:	461a      	mov	r2, r3
 801016e:	d30a      	bcc.n	8010186 <quorem+0x106>
 8010170:	613c      	str	r4, [r7, #16]
 8010172:	4630      	mov	r0, r6
 8010174:	b003      	add	sp, #12
 8010176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017a:	6812      	ldr	r2, [r2, #0]
 801017c:	3b04      	subs	r3, #4
 801017e:	2a00      	cmp	r2, #0
 8010180:	d1cc      	bne.n	801011c <quorem+0x9c>
 8010182:	3c01      	subs	r4, #1
 8010184:	e7c7      	b.n	8010116 <quorem+0x96>
 8010186:	6812      	ldr	r2, [r2, #0]
 8010188:	3b04      	subs	r3, #4
 801018a:	2a00      	cmp	r2, #0
 801018c:	d1f0      	bne.n	8010170 <quorem+0xf0>
 801018e:	3c01      	subs	r4, #1
 8010190:	e7eb      	b.n	801016a <quorem+0xea>
 8010192:	2000      	movs	r0, #0
 8010194:	e7ee      	b.n	8010174 <quorem+0xf4>
	...

08010198 <_dtoa_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	ed2d 8b02 	vpush	{d8}
 80101a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101a2:	b091      	sub	sp, #68	; 0x44
 80101a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101a8:	ec59 8b10 	vmov	r8, r9, d0
 80101ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80101ae:	9106      	str	r1, [sp, #24]
 80101b0:	4606      	mov	r6, r0
 80101b2:	9208      	str	r2, [sp, #32]
 80101b4:	930c      	str	r3, [sp, #48]	; 0x30
 80101b6:	b975      	cbnz	r5, 80101d6 <_dtoa_r+0x3e>
 80101b8:	2010      	movs	r0, #16
 80101ba:	f000 fe99 	bl	8010ef0 <malloc>
 80101be:	4602      	mov	r2, r0
 80101c0:	6270      	str	r0, [r6, #36]	; 0x24
 80101c2:	b920      	cbnz	r0, 80101ce <_dtoa_r+0x36>
 80101c4:	4baa      	ldr	r3, [pc, #680]	; (8010470 <_dtoa_r+0x2d8>)
 80101c6:	21ea      	movs	r1, #234	; 0xea
 80101c8:	48aa      	ldr	r0, [pc, #680]	; (8010474 <_dtoa_r+0x2dc>)
 80101ca:	f001 fd53 	bl	8011c74 <__assert_func>
 80101ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101d2:	6005      	str	r5, [r0, #0]
 80101d4:	60c5      	str	r5, [r0, #12]
 80101d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80101d8:	6819      	ldr	r1, [r3, #0]
 80101da:	b151      	cbz	r1, 80101f2 <_dtoa_r+0x5a>
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	604a      	str	r2, [r1, #4]
 80101e0:	2301      	movs	r3, #1
 80101e2:	4093      	lsls	r3, r2
 80101e4:	608b      	str	r3, [r1, #8]
 80101e6:	4630      	mov	r0, r6
 80101e8:	f000 fed6 	bl	8010f98 <_Bfree>
 80101ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	f1b9 0300 	subs.w	r3, r9, #0
 80101f6:	bfbb      	ittet	lt
 80101f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80101fc:	9303      	strlt	r3, [sp, #12]
 80101fe:	2300      	movge	r3, #0
 8010200:	2201      	movlt	r2, #1
 8010202:	bfac      	ite	ge
 8010204:	6023      	strge	r3, [r4, #0]
 8010206:	6022      	strlt	r2, [r4, #0]
 8010208:	4b9b      	ldr	r3, [pc, #620]	; (8010478 <_dtoa_r+0x2e0>)
 801020a:	9c03      	ldr	r4, [sp, #12]
 801020c:	43a3      	bics	r3, r4
 801020e:	d11c      	bne.n	801024a <_dtoa_r+0xb2>
 8010210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010212:	f242 730f 	movw	r3, #9999	; 0x270f
 8010216:	6013      	str	r3, [r2, #0]
 8010218:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801021c:	ea53 0308 	orrs.w	r3, r3, r8
 8010220:	f000 84fd 	beq.w	8010c1e <_dtoa_r+0xa86>
 8010224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010226:	b963      	cbnz	r3, 8010242 <_dtoa_r+0xaa>
 8010228:	4b94      	ldr	r3, [pc, #592]	; (801047c <_dtoa_r+0x2e4>)
 801022a:	e01f      	b.n	801026c <_dtoa_r+0xd4>
 801022c:	4b94      	ldr	r3, [pc, #592]	; (8010480 <_dtoa_r+0x2e8>)
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	3308      	adds	r3, #8
 8010232:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010234:	6013      	str	r3, [r2, #0]
 8010236:	9801      	ldr	r0, [sp, #4]
 8010238:	b011      	add	sp, #68	; 0x44
 801023a:	ecbd 8b02 	vpop	{d8}
 801023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010242:	4b8e      	ldr	r3, [pc, #568]	; (801047c <_dtoa_r+0x2e4>)
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	3303      	adds	r3, #3
 8010248:	e7f3      	b.n	8010232 <_dtoa_r+0x9a>
 801024a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801024e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010256:	d10b      	bne.n	8010270 <_dtoa_r+0xd8>
 8010258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801025a:	2301      	movs	r3, #1
 801025c:	6013      	str	r3, [r2, #0]
 801025e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 84d9 	beq.w	8010c18 <_dtoa_r+0xa80>
 8010266:	4887      	ldr	r0, [pc, #540]	; (8010484 <_dtoa_r+0x2ec>)
 8010268:	6018      	str	r0, [r3, #0]
 801026a:	1e43      	subs	r3, r0, #1
 801026c:	9301      	str	r3, [sp, #4]
 801026e:	e7e2      	b.n	8010236 <_dtoa_r+0x9e>
 8010270:	a90f      	add	r1, sp, #60	; 0x3c
 8010272:	aa0e      	add	r2, sp, #56	; 0x38
 8010274:	4630      	mov	r0, r6
 8010276:	eeb0 0b48 	vmov.f64	d0, d8
 801027a:	f001 f975 	bl	8011568 <__d2b>
 801027e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010282:	4605      	mov	r5, r0
 8010284:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010286:	2900      	cmp	r1, #0
 8010288:	d046      	beq.n	8010318 <_dtoa_r+0x180>
 801028a:	ee18 4a90 	vmov	r4, s17
 801028e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010292:	ec53 2b18 	vmov	r2, r3, d8
 8010296:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801029a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801029e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80102a2:	2400      	movs	r4, #0
 80102a4:	ec43 2b16 	vmov	d6, r2, r3
 80102a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80102ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010458 <_dtoa_r+0x2c0>
 80102b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80102b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010460 <_dtoa_r+0x2c8>
 80102b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80102bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010468 <_dtoa_r+0x2d0>
 80102c0:	ee07 1a90 	vmov	s15, r1
 80102c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80102c8:	eeb0 7b46 	vmov.f64	d7, d6
 80102cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80102d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80102d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	ee16 ba90 	vmov	fp, s13
 80102e0:	940a      	str	r4, [sp, #40]	; 0x28
 80102e2:	d508      	bpl.n	80102f6 <_dtoa_r+0x15e>
 80102e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80102e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80102ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f0:	bf18      	it	ne
 80102f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80102f6:	f1bb 0f16 	cmp.w	fp, #22
 80102fa:	d82f      	bhi.n	801035c <_dtoa_r+0x1c4>
 80102fc:	4b62      	ldr	r3, [pc, #392]	; (8010488 <_dtoa_r+0x2f0>)
 80102fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010302:	ed93 7b00 	vldr	d7, [r3]
 8010306:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030e:	d501      	bpl.n	8010314 <_dtoa_r+0x17c>
 8010310:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010314:	2300      	movs	r3, #0
 8010316:	e022      	b.n	801035e <_dtoa_r+0x1c6>
 8010318:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801031a:	4401      	add	r1, r0
 801031c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010320:	2b20      	cmp	r3, #32
 8010322:	bfc1      	itttt	gt
 8010324:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010328:	fa04 f303 	lslgt.w	r3, r4, r3
 801032c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010330:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010334:	bfd6      	itet	le
 8010336:	f1c3 0320 	rsble	r3, r3, #32
 801033a:	ea43 0808 	orrgt.w	r8, r3, r8
 801033e:	fa08 f803 	lslle.w	r8, r8, r3
 8010342:	ee07 8a90 	vmov	s15, r8
 8010346:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801034a:	3901      	subs	r1, #1
 801034c:	ee17 4a90 	vmov	r4, s15
 8010350:	ec53 2b17 	vmov	r2, r3, d7
 8010354:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010358:	2401      	movs	r4, #1
 801035a:	e7a3      	b.n	80102a4 <_dtoa_r+0x10c>
 801035c:	2301      	movs	r3, #1
 801035e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010360:	1a43      	subs	r3, r0, r1
 8010362:	1e5a      	subs	r2, r3, #1
 8010364:	bf45      	ittet	mi
 8010366:	f1c3 0301 	rsbmi	r3, r3, #1
 801036a:	9304      	strmi	r3, [sp, #16]
 801036c:	2300      	movpl	r3, #0
 801036e:	2300      	movmi	r3, #0
 8010370:	9205      	str	r2, [sp, #20]
 8010372:	bf54      	ite	pl
 8010374:	9304      	strpl	r3, [sp, #16]
 8010376:	9305      	strmi	r3, [sp, #20]
 8010378:	f1bb 0f00 	cmp.w	fp, #0
 801037c:	db18      	blt.n	80103b0 <_dtoa_r+0x218>
 801037e:	9b05      	ldr	r3, [sp, #20]
 8010380:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010384:	445b      	add	r3, fp
 8010386:	9305      	str	r3, [sp, #20]
 8010388:	2300      	movs	r3, #0
 801038a:	9a06      	ldr	r2, [sp, #24]
 801038c:	2a09      	cmp	r2, #9
 801038e:	d849      	bhi.n	8010424 <_dtoa_r+0x28c>
 8010390:	2a05      	cmp	r2, #5
 8010392:	bfc4      	itt	gt
 8010394:	3a04      	subgt	r2, #4
 8010396:	9206      	strgt	r2, [sp, #24]
 8010398:	9a06      	ldr	r2, [sp, #24]
 801039a:	f1a2 0202 	sub.w	r2, r2, #2
 801039e:	bfcc      	ite	gt
 80103a0:	2400      	movgt	r4, #0
 80103a2:	2401      	movle	r4, #1
 80103a4:	2a03      	cmp	r2, #3
 80103a6:	d848      	bhi.n	801043a <_dtoa_r+0x2a2>
 80103a8:	e8df f002 	tbb	[pc, r2]
 80103ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80103b0:	9b04      	ldr	r3, [sp, #16]
 80103b2:	2200      	movs	r2, #0
 80103b4:	eba3 030b 	sub.w	r3, r3, fp
 80103b8:	9304      	str	r3, [sp, #16]
 80103ba:	9209      	str	r2, [sp, #36]	; 0x24
 80103bc:	f1cb 0300 	rsb	r3, fp, #0
 80103c0:	e7e3      	b.n	801038a <_dtoa_r+0x1f2>
 80103c2:	2200      	movs	r2, #0
 80103c4:	9207      	str	r2, [sp, #28]
 80103c6:	9a08      	ldr	r2, [sp, #32]
 80103c8:	2a00      	cmp	r2, #0
 80103ca:	dc39      	bgt.n	8010440 <_dtoa_r+0x2a8>
 80103cc:	f04f 0a01 	mov.w	sl, #1
 80103d0:	46d1      	mov	r9, sl
 80103d2:	4652      	mov	r2, sl
 80103d4:	f8cd a020 	str.w	sl, [sp, #32]
 80103d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80103da:	2100      	movs	r1, #0
 80103dc:	6079      	str	r1, [r7, #4]
 80103de:	2004      	movs	r0, #4
 80103e0:	f100 0c14 	add.w	ip, r0, #20
 80103e4:	4594      	cmp	ip, r2
 80103e6:	6879      	ldr	r1, [r7, #4]
 80103e8:	d92f      	bls.n	801044a <_dtoa_r+0x2b2>
 80103ea:	4630      	mov	r0, r6
 80103ec:	930d      	str	r3, [sp, #52]	; 0x34
 80103ee:	f000 fd93 	bl	8010f18 <_Balloc>
 80103f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103f4:	9001      	str	r0, [sp, #4]
 80103f6:	4602      	mov	r2, r0
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d149      	bne.n	8010490 <_dtoa_r+0x2f8>
 80103fc:	4b23      	ldr	r3, [pc, #140]	; (801048c <_dtoa_r+0x2f4>)
 80103fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010402:	e6e1      	b.n	80101c8 <_dtoa_r+0x30>
 8010404:	2201      	movs	r2, #1
 8010406:	e7dd      	b.n	80103c4 <_dtoa_r+0x22c>
 8010408:	2200      	movs	r2, #0
 801040a:	9207      	str	r2, [sp, #28]
 801040c:	9a08      	ldr	r2, [sp, #32]
 801040e:	eb0b 0a02 	add.w	sl, fp, r2
 8010412:	f10a 0901 	add.w	r9, sl, #1
 8010416:	464a      	mov	r2, r9
 8010418:	2a01      	cmp	r2, #1
 801041a:	bfb8      	it	lt
 801041c:	2201      	movlt	r2, #1
 801041e:	e7db      	b.n	80103d8 <_dtoa_r+0x240>
 8010420:	2201      	movs	r2, #1
 8010422:	e7f2      	b.n	801040a <_dtoa_r+0x272>
 8010424:	2401      	movs	r4, #1
 8010426:	2200      	movs	r2, #0
 8010428:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801042c:	f04f 3aff 	mov.w	sl, #4294967295
 8010430:	2100      	movs	r1, #0
 8010432:	46d1      	mov	r9, sl
 8010434:	2212      	movs	r2, #18
 8010436:	9108      	str	r1, [sp, #32]
 8010438:	e7ce      	b.n	80103d8 <_dtoa_r+0x240>
 801043a:	2201      	movs	r2, #1
 801043c:	9207      	str	r2, [sp, #28]
 801043e:	e7f5      	b.n	801042c <_dtoa_r+0x294>
 8010440:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010444:	46d1      	mov	r9, sl
 8010446:	4652      	mov	r2, sl
 8010448:	e7c6      	b.n	80103d8 <_dtoa_r+0x240>
 801044a:	3101      	adds	r1, #1
 801044c:	6079      	str	r1, [r7, #4]
 801044e:	0040      	lsls	r0, r0, #1
 8010450:	e7c6      	b.n	80103e0 <_dtoa_r+0x248>
 8010452:	bf00      	nop
 8010454:	f3af 8000 	nop.w
 8010458:	636f4361 	.word	0x636f4361
 801045c:	3fd287a7 	.word	0x3fd287a7
 8010460:	8b60c8b3 	.word	0x8b60c8b3
 8010464:	3fc68a28 	.word	0x3fc68a28
 8010468:	509f79fb 	.word	0x509f79fb
 801046c:	3fd34413 	.word	0x3fd34413
 8010470:	08013899 	.word	0x08013899
 8010474:	080138b0 	.word	0x080138b0
 8010478:	7ff00000 	.word	0x7ff00000
 801047c:	08013895 	.word	0x08013895
 8010480:	0801388c 	.word	0x0801388c
 8010484:	08013869 	.word	0x08013869
 8010488:	080139a0 	.word	0x080139a0
 801048c:	0801390b 	.word	0x0801390b
 8010490:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010492:	9901      	ldr	r1, [sp, #4]
 8010494:	6011      	str	r1, [r2, #0]
 8010496:	f1b9 0f0e 	cmp.w	r9, #14
 801049a:	d86c      	bhi.n	8010576 <_dtoa_r+0x3de>
 801049c:	2c00      	cmp	r4, #0
 801049e:	d06a      	beq.n	8010576 <_dtoa_r+0x3de>
 80104a0:	f1bb 0f00 	cmp.w	fp, #0
 80104a4:	f340 80a0 	ble.w	80105e8 <_dtoa_r+0x450>
 80104a8:	49c1      	ldr	r1, [pc, #772]	; (80107b0 <_dtoa_r+0x618>)
 80104aa:	f00b 020f 	and.w	r2, fp, #15
 80104ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80104b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80104b6:	ed92 7b00 	vldr	d7, [r2]
 80104ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80104be:	f000 8087 	beq.w	80105d0 <_dtoa_r+0x438>
 80104c2:	4abc      	ldr	r2, [pc, #752]	; (80107b4 <_dtoa_r+0x61c>)
 80104c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80104c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80104cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80104d0:	f001 010f 	and.w	r1, r1, #15
 80104d4:	2203      	movs	r2, #3
 80104d6:	48b7      	ldr	r0, [pc, #732]	; (80107b4 <_dtoa_r+0x61c>)
 80104d8:	2900      	cmp	r1, #0
 80104da:	d17b      	bne.n	80105d4 <_dtoa_r+0x43c>
 80104dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80104e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104ea:	2900      	cmp	r1, #0
 80104ec:	f000 80a2 	beq.w	8010634 <_dtoa_r+0x49c>
 80104f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80104f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010500:	f140 8098 	bpl.w	8010634 <_dtoa_r+0x49c>
 8010504:	f1b9 0f00 	cmp.w	r9, #0
 8010508:	f000 8094 	beq.w	8010634 <_dtoa_r+0x49c>
 801050c:	f1ba 0f00 	cmp.w	sl, #0
 8010510:	dd2f      	ble.n	8010572 <_dtoa_r+0x3da>
 8010512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801051a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801051e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010522:	3201      	adds	r2, #1
 8010524:	4650      	mov	r0, sl
 8010526:	ed9d 6b02 	vldr	d6, [sp, #8]
 801052a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801052e:	ee07 2a90 	vmov	s15, r2
 8010532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010536:	eea7 5b06 	vfma.f64	d5, d7, d6
 801053a:	ee15 4a90 	vmov	r4, s11
 801053e:	ec52 1b15 	vmov	r1, r2, d5
 8010542:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010546:	2800      	cmp	r0, #0
 8010548:	d177      	bne.n	801063a <_dtoa_r+0x4a2>
 801054a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801054e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010552:	ec42 1b17 	vmov	d7, r1, r2
 8010556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055e:	f300 8263 	bgt.w	8010a28 <_dtoa_r+0x890>
 8010562:	eeb1 7b47 	vneg.f64	d7, d7
 8010566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	f100 8258 	bmi.w	8010a22 <_dtoa_r+0x88a>
 8010572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010578:	2a00      	cmp	r2, #0
 801057a:	f2c0 811d 	blt.w	80107b8 <_dtoa_r+0x620>
 801057e:	f1bb 0f0e 	cmp.w	fp, #14
 8010582:	f300 8119 	bgt.w	80107b8 <_dtoa_r+0x620>
 8010586:	4b8a      	ldr	r3, [pc, #552]	; (80107b0 <_dtoa_r+0x618>)
 8010588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801058c:	ed93 6b00 	vldr	d6, [r3]
 8010590:	9b08      	ldr	r3, [sp, #32]
 8010592:	2b00      	cmp	r3, #0
 8010594:	f280 80b7 	bge.w	8010706 <_dtoa_r+0x56e>
 8010598:	f1b9 0f00 	cmp.w	r9, #0
 801059c:	f300 80b3 	bgt.w	8010706 <_dtoa_r+0x56e>
 80105a0:	f040 823f 	bne.w	8010a22 <_dtoa_r+0x88a>
 80105a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80105a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80105ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b8:	464c      	mov	r4, r9
 80105ba:	464f      	mov	r7, r9
 80105bc:	f280 8215 	bge.w	80109ea <_dtoa_r+0x852>
 80105c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80105c4:	2331      	movs	r3, #49	; 0x31
 80105c6:	f808 3b01 	strb.w	r3, [r8], #1
 80105ca:	f10b 0b01 	add.w	fp, fp, #1
 80105ce:	e211      	b.n	80109f4 <_dtoa_r+0x85c>
 80105d0:	2202      	movs	r2, #2
 80105d2:	e780      	b.n	80104d6 <_dtoa_r+0x33e>
 80105d4:	07cc      	lsls	r4, r1, #31
 80105d6:	d504      	bpl.n	80105e2 <_dtoa_r+0x44a>
 80105d8:	ed90 6b00 	vldr	d6, [r0]
 80105dc:	3201      	adds	r2, #1
 80105de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105e2:	1049      	asrs	r1, r1, #1
 80105e4:	3008      	adds	r0, #8
 80105e6:	e777      	b.n	80104d8 <_dtoa_r+0x340>
 80105e8:	d022      	beq.n	8010630 <_dtoa_r+0x498>
 80105ea:	f1cb 0100 	rsb	r1, fp, #0
 80105ee:	4a70      	ldr	r2, [pc, #448]	; (80107b0 <_dtoa_r+0x618>)
 80105f0:	f001 000f 	and.w	r0, r1, #15
 80105f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80105f8:	ed92 7b00 	vldr	d7, [r2]
 80105fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010604:	486b      	ldr	r0, [pc, #428]	; (80107b4 <_dtoa_r+0x61c>)
 8010606:	1109      	asrs	r1, r1, #4
 8010608:	2400      	movs	r4, #0
 801060a:	2202      	movs	r2, #2
 801060c:	b929      	cbnz	r1, 801061a <_dtoa_r+0x482>
 801060e:	2c00      	cmp	r4, #0
 8010610:	f43f af6a 	beq.w	80104e8 <_dtoa_r+0x350>
 8010614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010618:	e766      	b.n	80104e8 <_dtoa_r+0x350>
 801061a:	07cf      	lsls	r7, r1, #31
 801061c:	d505      	bpl.n	801062a <_dtoa_r+0x492>
 801061e:	ed90 6b00 	vldr	d6, [r0]
 8010622:	3201      	adds	r2, #1
 8010624:	2401      	movs	r4, #1
 8010626:	ee27 7b06 	vmul.f64	d7, d7, d6
 801062a:	1049      	asrs	r1, r1, #1
 801062c:	3008      	adds	r0, #8
 801062e:	e7ed      	b.n	801060c <_dtoa_r+0x474>
 8010630:	2202      	movs	r2, #2
 8010632:	e759      	b.n	80104e8 <_dtoa_r+0x350>
 8010634:	465f      	mov	r7, fp
 8010636:	4648      	mov	r0, r9
 8010638:	e775      	b.n	8010526 <_dtoa_r+0x38e>
 801063a:	ec42 1b17 	vmov	d7, r1, r2
 801063e:	4a5c      	ldr	r2, [pc, #368]	; (80107b0 <_dtoa_r+0x618>)
 8010640:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010644:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010648:	9a01      	ldr	r2, [sp, #4]
 801064a:	1814      	adds	r4, r2, r0
 801064c:	9a07      	ldr	r2, [sp, #28]
 801064e:	b352      	cbz	r2, 80106a6 <_dtoa_r+0x50e>
 8010650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801065c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010664:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801066c:	ee14 2a90 	vmov	r2, s9
 8010670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010674:	3230      	adds	r2, #48	; 0x30
 8010676:	ee36 6b45 	vsub.f64	d6, d6, d5
 801067a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010682:	f808 2b01 	strb.w	r2, [r8], #1
 8010686:	d439      	bmi.n	80106fc <_dtoa_r+0x564>
 8010688:	ee32 5b46 	vsub.f64	d5, d2, d6
 801068c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	d472      	bmi.n	801077c <_dtoa_r+0x5e4>
 8010696:	45a0      	cmp	r8, r4
 8010698:	f43f af6b 	beq.w	8010572 <_dtoa_r+0x3da>
 801069c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80106a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80106a4:	e7e0      	b.n	8010668 <_dtoa_r+0x4d0>
 80106a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80106aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80106ae:	4621      	mov	r1, r4
 80106b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80106b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80106b8:	ee14 2a90 	vmov	r2, s9
 80106bc:	3230      	adds	r2, #48	; 0x30
 80106be:	f808 2b01 	strb.w	r2, [r8], #1
 80106c2:	45a0      	cmp	r8, r4
 80106c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80106c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80106cc:	d118      	bne.n	8010700 <_dtoa_r+0x568>
 80106ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80106d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80106d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80106da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106de:	dc4d      	bgt.n	801077c <_dtoa_r+0x5e4>
 80106e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80106e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80106e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ec:	f57f af41 	bpl.w	8010572 <_dtoa_r+0x3da>
 80106f0:	4688      	mov	r8, r1
 80106f2:	3901      	subs	r1, #1
 80106f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80106f8:	2b30      	cmp	r3, #48	; 0x30
 80106fa:	d0f9      	beq.n	80106f0 <_dtoa_r+0x558>
 80106fc:	46bb      	mov	fp, r7
 80106fe:	e02a      	b.n	8010756 <_dtoa_r+0x5be>
 8010700:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010704:	e7d6      	b.n	80106b4 <_dtoa_r+0x51c>
 8010706:	ed9d 7b02 	vldr	d7, [sp, #8]
 801070a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801070e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801071a:	ee15 3a10 	vmov	r3, s10
 801071e:	3330      	adds	r3, #48	; 0x30
 8010720:	f808 3b01 	strb.w	r3, [r8], #1
 8010724:	9b01      	ldr	r3, [sp, #4]
 8010726:	eba8 0303 	sub.w	r3, r8, r3
 801072a:	4599      	cmp	r9, r3
 801072c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010730:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010734:	d133      	bne.n	801079e <_dtoa_r+0x606>
 8010736:	ee37 7b07 	vadd.f64	d7, d7, d7
 801073a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	dc1a      	bgt.n	801077a <_dtoa_r+0x5e2>
 8010744:	eeb4 7b46 	vcmp.f64	d7, d6
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	d103      	bne.n	8010756 <_dtoa_r+0x5be>
 801074e:	ee15 3a10 	vmov	r3, s10
 8010752:	07d9      	lsls	r1, r3, #31
 8010754:	d411      	bmi.n	801077a <_dtoa_r+0x5e2>
 8010756:	4629      	mov	r1, r5
 8010758:	4630      	mov	r0, r6
 801075a:	f000 fc1d 	bl	8010f98 <_Bfree>
 801075e:	2300      	movs	r3, #0
 8010760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010762:	f888 3000 	strb.w	r3, [r8]
 8010766:	f10b 0301 	add.w	r3, fp, #1
 801076a:	6013      	str	r3, [r2, #0]
 801076c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801076e:	2b00      	cmp	r3, #0
 8010770:	f43f ad61 	beq.w	8010236 <_dtoa_r+0x9e>
 8010774:	f8c3 8000 	str.w	r8, [r3]
 8010778:	e55d      	b.n	8010236 <_dtoa_r+0x9e>
 801077a:	465f      	mov	r7, fp
 801077c:	4643      	mov	r3, r8
 801077e:	4698      	mov	r8, r3
 8010780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010784:	2a39      	cmp	r2, #57	; 0x39
 8010786:	d106      	bne.n	8010796 <_dtoa_r+0x5fe>
 8010788:	9a01      	ldr	r2, [sp, #4]
 801078a:	429a      	cmp	r2, r3
 801078c:	d1f7      	bne.n	801077e <_dtoa_r+0x5e6>
 801078e:	9901      	ldr	r1, [sp, #4]
 8010790:	2230      	movs	r2, #48	; 0x30
 8010792:	3701      	adds	r7, #1
 8010794:	700a      	strb	r2, [r1, #0]
 8010796:	781a      	ldrb	r2, [r3, #0]
 8010798:	3201      	adds	r2, #1
 801079a:	701a      	strb	r2, [r3, #0]
 801079c:	e7ae      	b.n	80106fc <_dtoa_r+0x564>
 801079e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80107a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107aa:	d1b2      	bne.n	8010712 <_dtoa_r+0x57a>
 80107ac:	e7d3      	b.n	8010756 <_dtoa_r+0x5be>
 80107ae:	bf00      	nop
 80107b0:	080139a0 	.word	0x080139a0
 80107b4:	08013978 	.word	0x08013978
 80107b8:	9907      	ldr	r1, [sp, #28]
 80107ba:	2900      	cmp	r1, #0
 80107bc:	f000 80d0 	beq.w	8010960 <_dtoa_r+0x7c8>
 80107c0:	9906      	ldr	r1, [sp, #24]
 80107c2:	2901      	cmp	r1, #1
 80107c4:	f300 80b4 	bgt.w	8010930 <_dtoa_r+0x798>
 80107c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107ca:	2900      	cmp	r1, #0
 80107cc:	f000 80ac 	beq.w	8010928 <_dtoa_r+0x790>
 80107d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80107d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80107d8:	461c      	mov	r4, r3
 80107da:	930a      	str	r3, [sp, #40]	; 0x28
 80107dc:	9b04      	ldr	r3, [sp, #16]
 80107de:	4413      	add	r3, r2
 80107e0:	9304      	str	r3, [sp, #16]
 80107e2:	9b05      	ldr	r3, [sp, #20]
 80107e4:	2101      	movs	r1, #1
 80107e6:	4413      	add	r3, r2
 80107e8:	4630      	mov	r0, r6
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	f000 fc8c 	bl	8011108 <__i2b>
 80107f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f2:	4607      	mov	r7, r0
 80107f4:	f1b8 0f00 	cmp.w	r8, #0
 80107f8:	dd0d      	ble.n	8010816 <_dtoa_r+0x67e>
 80107fa:	9a05      	ldr	r2, [sp, #20]
 80107fc:	2a00      	cmp	r2, #0
 80107fe:	dd0a      	ble.n	8010816 <_dtoa_r+0x67e>
 8010800:	4542      	cmp	r2, r8
 8010802:	9904      	ldr	r1, [sp, #16]
 8010804:	bfa8      	it	ge
 8010806:	4642      	movge	r2, r8
 8010808:	1a89      	subs	r1, r1, r2
 801080a:	9104      	str	r1, [sp, #16]
 801080c:	9905      	ldr	r1, [sp, #20]
 801080e:	eba8 0802 	sub.w	r8, r8, r2
 8010812:	1a8a      	subs	r2, r1, r2
 8010814:	9205      	str	r2, [sp, #20]
 8010816:	b303      	cbz	r3, 801085a <_dtoa_r+0x6c2>
 8010818:	9a07      	ldr	r2, [sp, #28]
 801081a:	2a00      	cmp	r2, #0
 801081c:	f000 80a5 	beq.w	801096a <_dtoa_r+0x7d2>
 8010820:	2c00      	cmp	r4, #0
 8010822:	dd13      	ble.n	801084c <_dtoa_r+0x6b4>
 8010824:	4639      	mov	r1, r7
 8010826:	4622      	mov	r2, r4
 8010828:	4630      	mov	r0, r6
 801082a:	930d      	str	r3, [sp, #52]	; 0x34
 801082c:	f000 fd2c 	bl	8011288 <__pow5mult>
 8010830:	462a      	mov	r2, r5
 8010832:	4601      	mov	r1, r0
 8010834:	4607      	mov	r7, r0
 8010836:	4630      	mov	r0, r6
 8010838:	f000 fc7c 	bl	8011134 <__multiply>
 801083c:	4629      	mov	r1, r5
 801083e:	900a      	str	r0, [sp, #40]	; 0x28
 8010840:	4630      	mov	r0, r6
 8010842:	f000 fba9 	bl	8010f98 <_Bfree>
 8010846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801084a:	4615      	mov	r5, r2
 801084c:	1b1a      	subs	r2, r3, r4
 801084e:	d004      	beq.n	801085a <_dtoa_r+0x6c2>
 8010850:	4629      	mov	r1, r5
 8010852:	4630      	mov	r0, r6
 8010854:	f000 fd18 	bl	8011288 <__pow5mult>
 8010858:	4605      	mov	r5, r0
 801085a:	2101      	movs	r1, #1
 801085c:	4630      	mov	r0, r6
 801085e:	f000 fc53 	bl	8011108 <__i2b>
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	4604      	mov	r4, r0
 8010868:	f340 8081 	ble.w	801096e <_dtoa_r+0x7d6>
 801086c:	461a      	mov	r2, r3
 801086e:	4601      	mov	r1, r0
 8010870:	4630      	mov	r0, r6
 8010872:	f000 fd09 	bl	8011288 <__pow5mult>
 8010876:	9b06      	ldr	r3, [sp, #24]
 8010878:	2b01      	cmp	r3, #1
 801087a:	4604      	mov	r4, r0
 801087c:	dd7a      	ble.n	8010974 <_dtoa_r+0x7dc>
 801087e:	2300      	movs	r3, #0
 8010880:	930a      	str	r3, [sp, #40]	; 0x28
 8010882:	6922      	ldr	r2, [r4, #16]
 8010884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010888:	6910      	ldr	r0, [r2, #16]
 801088a:	f000 fbed 	bl	8011068 <__hi0bits>
 801088e:	f1c0 0020 	rsb	r0, r0, #32
 8010892:	9b05      	ldr	r3, [sp, #20]
 8010894:	4418      	add	r0, r3
 8010896:	f010 001f 	ands.w	r0, r0, #31
 801089a:	f000 808c 	beq.w	80109b6 <_dtoa_r+0x81e>
 801089e:	f1c0 0220 	rsb	r2, r0, #32
 80108a2:	2a04      	cmp	r2, #4
 80108a4:	f340 8085 	ble.w	80109b2 <_dtoa_r+0x81a>
 80108a8:	f1c0 001c 	rsb	r0, r0, #28
 80108ac:	9b04      	ldr	r3, [sp, #16]
 80108ae:	4403      	add	r3, r0
 80108b0:	9304      	str	r3, [sp, #16]
 80108b2:	9b05      	ldr	r3, [sp, #20]
 80108b4:	4403      	add	r3, r0
 80108b6:	4480      	add	r8, r0
 80108b8:	9305      	str	r3, [sp, #20]
 80108ba:	9b04      	ldr	r3, [sp, #16]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd05      	ble.n	80108cc <_dtoa_r+0x734>
 80108c0:	4629      	mov	r1, r5
 80108c2:	461a      	mov	r2, r3
 80108c4:	4630      	mov	r0, r6
 80108c6:	f000 fd39 	bl	801133c <__lshift>
 80108ca:	4605      	mov	r5, r0
 80108cc:	9b05      	ldr	r3, [sp, #20]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	dd05      	ble.n	80108de <_dtoa_r+0x746>
 80108d2:	4621      	mov	r1, r4
 80108d4:	461a      	mov	r2, r3
 80108d6:	4630      	mov	r0, r6
 80108d8:	f000 fd30 	bl	801133c <__lshift>
 80108dc:	4604      	mov	r4, r0
 80108de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d06a      	beq.n	80109ba <_dtoa_r+0x822>
 80108e4:	4621      	mov	r1, r4
 80108e6:	4628      	mov	r0, r5
 80108e8:	f000 fd98 	bl	801141c <__mcmp>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	da64      	bge.n	80109ba <_dtoa_r+0x822>
 80108f0:	2300      	movs	r3, #0
 80108f2:	4629      	mov	r1, r5
 80108f4:	220a      	movs	r2, #10
 80108f6:	4630      	mov	r0, r6
 80108f8:	f000 fb70 	bl	8010fdc <__multadd>
 80108fc:	9b07      	ldr	r3, [sp, #28]
 80108fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010902:	4605      	mov	r5, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	f000 8191 	beq.w	8010c2c <_dtoa_r+0xa94>
 801090a:	4639      	mov	r1, r7
 801090c:	2300      	movs	r3, #0
 801090e:	220a      	movs	r2, #10
 8010910:	4630      	mov	r0, r6
 8010912:	f000 fb63 	bl	8010fdc <__multadd>
 8010916:	f1ba 0f00 	cmp.w	sl, #0
 801091a:	4607      	mov	r7, r0
 801091c:	f300 808d 	bgt.w	8010a3a <_dtoa_r+0x8a2>
 8010920:	9b06      	ldr	r3, [sp, #24]
 8010922:	2b02      	cmp	r3, #2
 8010924:	dc50      	bgt.n	80109c8 <_dtoa_r+0x830>
 8010926:	e088      	b.n	8010a3a <_dtoa_r+0x8a2>
 8010928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801092a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801092e:	e751      	b.n	80107d4 <_dtoa_r+0x63c>
 8010930:	f109 34ff 	add.w	r4, r9, #4294967295
 8010934:	42a3      	cmp	r3, r4
 8010936:	bfbf      	itttt	lt
 8010938:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801093a:	1ae3      	sublt	r3, r4, r3
 801093c:	18d2      	addlt	r2, r2, r3
 801093e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8010940:	bfb6      	itet	lt
 8010942:	4623      	movlt	r3, r4
 8010944:	1b1c      	subge	r4, r3, r4
 8010946:	2400      	movlt	r4, #0
 8010948:	f1b9 0f00 	cmp.w	r9, #0
 801094c:	bfb5      	itete	lt
 801094e:	9a04      	ldrlt	r2, [sp, #16]
 8010950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8010954:	eba2 0809 	sublt.w	r8, r2, r9
 8010958:	464a      	movge	r2, r9
 801095a:	bfb8      	it	lt
 801095c:	2200      	movlt	r2, #0
 801095e:	e73c      	b.n	80107da <_dtoa_r+0x642>
 8010960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010964:	9f07      	ldr	r7, [sp, #28]
 8010966:	461c      	mov	r4, r3
 8010968:	e744      	b.n	80107f4 <_dtoa_r+0x65c>
 801096a:	461a      	mov	r2, r3
 801096c:	e770      	b.n	8010850 <_dtoa_r+0x6b8>
 801096e:	9b06      	ldr	r3, [sp, #24]
 8010970:	2b01      	cmp	r3, #1
 8010972:	dc18      	bgt.n	80109a6 <_dtoa_r+0x80e>
 8010974:	9b02      	ldr	r3, [sp, #8]
 8010976:	b9b3      	cbnz	r3, 80109a6 <_dtoa_r+0x80e>
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801097e:	b9a2      	cbnz	r2, 80109aa <_dtoa_r+0x812>
 8010980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010984:	0d12      	lsrs	r2, r2, #20
 8010986:	0512      	lsls	r2, r2, #20
 8010988:	b18a      	cbz	r2, 80109ae <_dtoa_r+0x816>
 801098a:	9b04      	ldr	r3, [sp, #16]
 801098c:	3301      	adds	r3, #1
 801098e:	9304      	str	r3, [sp, #16]
 8010990:	9b05      	ldr	r3, [sp, #20]
 8010992:	3301      	adds	r3, #1
 8010994:	9305      	str	r3, [sp, #20]
 8010996:	2301      	movs	r3, #1
 8010998:	930a      	str	r3, [sp, #40]	; 0x28
 801099a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099c:	2b00      	cmp	r3, #0
 801099e:	f47f af70 	bne.w	8010882 <_dtoa_r+0x6ea>
 80109a2:	2001      	movs	r0, #1
 80109a4:	e775      	b.n	8010892 <_dtoa_r+0x6fa>
 80109a6:	2300      	movs	r3, #0
 80109a8:	e7f6      	b.n	8010998 <_dtoa_r+0x800>
 80109aa:	9b02      	ldr	r3, [sp, #8]
 80109ac:	e7f4      	b.n	8010998 <_dtoa_r+0x800>
 80109ae:	920a      	str	r2, [sp, #40]	; 0x28
 80109b0:	e7f3      	b.n	801099a <_dtoa_r+0x802>
 80109b2:	d082      	beq.n	80108ba <_dtoa_r+0x722>
 80109b4:	4610      	mov	r0, r2
 80109b6:	301c      	adds	r0, #28
 80109b8:	e778      	b.n	80108ac <_dtoa_r+0x714>
 80109ba:	f1b9 0f00 	cmp.w	r9, #0
 80109be:	dc37      	bgt.n	8010a30 <_dtoa_r+0x898>
 80109c0:	9b06      	ldr	r3, [sp, #24]
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	dd34      	ble.n	8010a30 <_dtoa_r+0x898>
 80109c6:	46ca      	mov	sl, r9
 80109c8:	f1ba 0f00 	cmp.w	sl, #0
 80109cc:	d10d      	bne.n	80109ea <_dtoa_r+0x852>
 80109ce:	4621      	mov	r1, r4
 80109d0:	4653      	mov	r3, sl
 80109d2:	2205      	movs	r2, #5
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 fb01 	bl	8010fdc <__multadd>
 80109da:	4601      	mov	r1, r0
 80109dc:	4604      	mov	r4, r0
 80109de:	4628      	mov	r0, r5
 80109e0:	f000 fd1c 	bl	801141c <__mcmp>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	f73f adeb 	bgt.w	80105c0 <_dtoa_r+0x428>
 80109ea:	9b08      	ldr	r3, [sp, #32]
 80109ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80109f0:	ea6f 0b03 	mvn.w	fp, r3
 80109f4:	f04f 0900 	mov.w	r9, #0
 80109f8:	4621      	mov	r1, r4
 80109fa:	4630      	mov	r0, r6
 80109fc:	f000 facc 	bl	8010f98 <_Bfree>
 8010a00:	2f00      	cmp	r7, #0
 8010a02:	f43f aea8 	beq.w	8010756 <_dtoa_r+0x5be>
 8010a06:	f1b9 0f00 	cmp.w	r9, #0
 8010a0a:	d005      	beq.n	8010a18 <_dtoa_r+0x880>
 8010a0c:	45b9      	cmp	r9, r7
 8010a0e:	d003      	beq.n	8010a18 <_dtoa_r+0x880>
 8010a10:	4649      	mov	r1, r9
 8010a12:	4630      	mov	r0, r6
 8010a14:	f000 fac0 	bl	8010f98 <_Bfree>
 8010a18:	4639      	mov	r1, r7
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f000 fabc 	bl	8010f98 <_Bfree>
 8010a20:	e699      	b.n	8010756 <_dtoa_r+0x5be>
 8010a22:	2400      	movs	r4, #0
 8010a24:	4627      	mov	r7, r4
 8010a26:	e7e0      	b.n	80109ea <_dtoa_r+0x852>
 8010a28:	46bb      	mov	fp, r7
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	e5c7      	b.n	80105c0 <_dtoa_r+0x428>
 8010a30:	9b07      	ldr	r3, [sp, #28]
 8010a32:	46ca      	mov	sl, r9
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f000 8100 	beq.w	8010c3a <_dtoa_r+0xaa2>
 8010a3a:	f1b8 0f00 	cmp.w	r8, #0
 8010a3e:	dd05      	ble.n	8010a4c <_dtoa_r+0x8b4>
 8010a40:	4639      	mov	r1, r7
 8010a42:	4642      	mov	r2, r8
 8010a44:	4630      	mov	r0, r6
 8010a46:	f000 fc79 	bl	801133c <__lshift>
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d05d      	beq.n	8010b0e <_dtoa_r+0x976>
 8010a52:	6879      	ldr	r1, [r7, #4]
 8010a54:	4630      	mov	r0, r6
 8010a56:	f000 fa5f 	bl	8010f18 <_Balloc>
 8010a5a:	4680      	mov	r8, r0
 8010a5c:	b928      	cbnz	r0, 8010a6a <_dtoa_r+0x8d2>
 8010a5e:	4b82      	ldr	r3, [pc, #520]	; (8010c68 <_dtoa_r+0xad0>)
 8010a60:	4602      	mov	r2, r0
 8010a62:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010a66:	f7ff bbaf 	b.w	80101c8 <_dtoa_r+0x30>
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	3202      	adds	r2, #2
 8010a6e:	0092      	lsls	r2, r2, #2
 8010a70:	f107 010c 	add.w	r1, r7, #12
 8010a74:	300c      	adds	r0, #12
 8010a76:	f7fe fbc6 	bl	800f206 <memcpy>
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	4641      	mov	r1, r8
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f000 fc5c 	bl	801133c <__lshift>
 8010a84:	9b01      	ldr	r3, [sp, #4]
 8010a86:	3301      	adds	r3, #1
 8010a88:	9304      	str	r3, [sp, #16]
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	4453      	add	r3, sl
 8010a8e:	9308      	str	r3, [sp, #32]
 8010a90:	9b02      	ldr	r3, [sp, #8]
 8010a92:	f003 0301 	and.w	r3, r3, #1
 8010a96:	46b9      	mov	r9, r7
 8010a98:	9307      	str	r3, [sp, #28]
 8010a9a:	4607      	mov	r7, r0
 8010a9c:	9b04      	ldr	r3, [sp, #16]
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	9302      	str	r3, [sp, #8]
 8010aa6:	f7ff faeb 	bl	8010080 <quorem>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	3330      	adds	r3, #48	; 0x30
 8010aae:	9005      	str	r0, [sp, #20]
 8010ab0:	4649      	mov	r1, r9
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab6:	f000 fcb1 	bl	801141c <__mcmp>
 8010aba:	463a      	mov	r2, r7
 8010abc:	4682      	mov	sl, r0
 8010abe:	4621      	mov	r1, r4
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	f000 fcc7 	bl	8011454 <__mdiff>
 8010ac6:	68c2      	ldr	r2, [r0, #12]
 8010ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aca:	4680      	mov	r8, r0
 8010acc:	bb0a      	cbnz	r2, 8010b12 <_dtoa_r+0x97a>
 8010ace:	4601      	mov	r1, r0
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f000 fca3 	bl	801141c <__mcmp>
 8010ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ad8:	4602      	mov	r2, r0
 8010ada:	4641      	mov	r1, r8
 8010adc:	4630      	mov	r0, r6
 8010ade:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8010ae2:	f000 fa59 	bl	8010f98 <_Bfree>
 8010ae6:	9b06      	ldr	r3, [sp, #24]
 8010ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010aea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010aee:	ea43 0102 	orr.w	r1, r3, r2
 8010af2:	9b07      	ldr	r3, [sp, #28]
 8010af4:	430b      	orrs	r3, r1
 8010af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af8:	d10d      	bne.n	8010b16 <_dtoa_r+0x97e>
 8010afa:	2b39      	cmp	r3, #57	; 0x39
 8010afc:	d029      	beq.n	8010b52 <_dtoa_r+0x9ba>
 8010afe:	f1ba 0f00 	cmp.w	sl, #0
 8010b02:	dd01      	ble.n	8010b08 <_dtoa_r+0x970>
 8010b04:	9b05      	ldr	r3, [sp, #20]
 8010b06:	3331      	adds	r3, #49	; 0x31
 8010b08:	9a02      	ldr	r2, [sp, #8]
 8010b0a:	7013      	strb	r3, [r2, #0]
 8010b0c:	e774      	b.n	80109f8 <_dtoa_r+0x860>
 8010b0e:	4638      	mov	r0, r7
 8010b10:	e7b8      	b.n	8010a84 <_dtoa_r+0x8ec>
 8010b12:	2201      	movs	r2, #1
 8010b14:	e7e1      	b.n	8010ada <_dtoa_r+0x942>
 8010b16:	f1ba 0f00 	cmp.w	sl, #0
 8010b1a:	db06      	blt.n	8010b2a <_dtoa_r+0x992>
 8010b1c:	9906      	ldr	r1, [sp, #24]
 8010b1e:	ea41 0a0a 	orr.w	sl, r1, sl
 8010b22:	9907      	ldr	r1, [sp, #28]
 8010b24:	ea5a 0101 	orrs.w	r1, sl, r1
 8010b28:	d120      	bne.n	8010b6c <_dtoa_r+0x9d4>
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	ddec      	ble.n	8010b08 <_dtoa_r+0x970>
 8010b2e:	4629      	mov	r1, r5
 8010b30:	2201      	movs	r2, #1
 8010b32:	4630      	mov	r0, r6
 8010b34:	9304      	str	r3, [sp, #16]
 8010b36:	f000 fc01 	bl	801133c <__lshift>
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	f000 fc6d 	bl	801141c <__mcmp>
 8010b42:	2800      	cmp	r0, #0
 8010b44:	9b04      	ldr	r3, [sp, #16]
 8010b46:	dc02      	bgt.n	8010b4e <_dtoa_r+0x9b6>
 8010b48:	d1de      	bne.n	8010b08 <_dtoa_r+0x970>
 8010b4a:	07da      	lsls	r2, r3, #31
 8010b4c:	d5dc      	bpl.n	8010b08 <_dtoa_r+0x970>
 8010b4e:	2b39      	cmp	r3, #57	; 0x39
 8010b50:	d1d8      	bne.n	8010b04 <_dtoa_r+0x96c>
 8010b52:	9a02      	ldr	r2, [sp, #8]
 8010b54:	2339      	movs	r3, #57	; 0x39
 8010b56:	7013      	strb	r3, [r2, #0]
 8010b58:	4643      	mov	r3, r8
 8010b5a:	4698      	mov	r8, r3
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010b62:	2a39      	cmp	r2, #57	; 0x39
 8010b64:	d051      	beq.n	8010c0a <_dtoa_r+0xa72>
 8010b66:	3201      	adds	r2, #1
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	e745      	b.n	80109f8 <_dtoa_r+0x860>
 8010b6c:	2a00      	cmp	r2, #0
 8010b6e:	dd03      	ble.n	8010b78 <_dtoa_r+0x9e0>
 8010b70:	2b39      	cmp	r3, #57	; 0x39
 8010b72:	d0ee      	beq.n	8010b52 <_dtoa_r+0x9ba>
 8010b74:	3301      	adds	r3, #1
 8010b76:	e7c7      	b.n	8010b08 <_dtoa_r+0x970>
 8010b78:	9a04      	ldr	r2, [sp, #16]
 8010b7a:	9908      	ldr	r1, [sp, #32]
 8010b7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b80:	428a      	cmp	r2, r1
 8010b82:	d02b      	beq.n	8010bdc <_dtoa_r+0xa44>
 8010b84:	4629      	mov	r1, r5
 8010b86:	2300      	movs	r3, #0
 8010b88:	220a      	movs	r2, #10
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f000 fa26 	bl	8010fdc <__multadd>
 8010b90:	45b9      	cmp	r9, r7
 8010b92:	4605      	mov	r5, r0
 8010b94:	f04f 0300 	mov.w	r3, #0
 8010b98:	f04f 020a 	mov.w	r2, #10
 8010b9c:	4649      	mov	r1, r9
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	d107      	bne.n	8010bb2 <_dtoa_r+0xa1a>
 8010ba2:	f000 fa1b 	bl	8010fdc <__multadd>
 8010ba6:	4681      	mov	r9, r0
 8010ba8:	4607      	mov	r7, r0
 8010baa:	9b04      	ldr	r3, [sp, #16]
 8010bac:	3301      	adds	r3, #1
 8010bae:	9304      	str	r3, [sp, #16]
 8010bb0:	e774      	b.n	8010a9c <_dtoa_r+0x904>
 8010bb2:	f000 fa13 	bl	8010fdc <__multadd>
 8010bb6:	4639      	mov	r1, r7
 8010bb8:	4681      	mov	r9, r0
 8010bba:	2300      	movs	r3, #0
 8010bbc:	220a      	movs	r2, #10
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f000 fa0c 	bl	8010fdc <__multadd>
 8010bc4:	4607      	mov	r7, r0
 8010bc6:	e7f0      	b.n	8010baa <_dtoa_r+0xa12>
 8010bc8:	f1ba 0f00 	cmp.w	sl, #0
 8010bcc:	9a01      	ldr	r2, [sp, #4]
 8010bce:	bfcc      	ite	gt
 8010bd0:	46d0      	movgt	r8, sl
 8010bd2:	f04f 0801 	movle.w	r8, #1
 8010bd6:	4490      	add	r8, r2
 8010bd8:	f04f 0900 	mov.w	r9, #0
 8010bdc:	4629      	mov	r1, r5
 8010bde:	2201      	movs	r2, #1
 8010be0:	4630      	mov	r0, r6
 8010be2:	9302      	str	r3, [sp, #8]
 8010be4:	f000 fbaa 	bl	801133c <__lshift>
 8010be8:	4621      	mov	r1, r4
 8010bea:	4605      	mov	r5, r0
 8010bec:	f000 fc16 	bl	801141c <__mcmp>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	dcb1      	bgt.n	8010b58 <_dtoa_r+0x9c0>
 8010bf4:	d102      	bne.n	8010bfc <_dtoa_r+0xa64>
 8010bf6:	9b02      	ldr	r3, [sp, #8]
 8010bf8:	07db      	lsls	r3, r3, #31
 8010bfa:	d4ad      	bmi.n	8010b58 <_dtoa_r+0x9c0>
 8010bfc:	4643      	mov	r3, r8
 8010bfe:	4698      	mov	r8, r3
 8010c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c04:	2a30      	cmp	r2, #48	; 0x30
 8010c06:	d0fa      	beq.n	8010bfe <_dtoa_r+0xa66>
 8010c08:	e6f6      	b.n	80109f8 <_dtoa_r+0x860>
 8010c0a:	9a01      	ldr	r2, [sp, #4]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d1a4      	bne.n	8010b5a <_dtoa_r+0x9c2>
 8010c10:	f10b 0b01 	add.w	fp, fp, #1
 8010c14:	2331      	movs	r3, #49	; 0x31
 8010c16:	e778      	b.n	8010b0a <_dtoa_r+0x972>
 8010c18:	4b14      	ldr	r3, [pc, #80]	; (8010c6c <_dtoa_r+0xad4>)
 8010c1a:	f7ff bb27 	b.w	801026c <_dtoa_r+0xd4>
 8010c1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f47f ab03 	bne.w	801022c <_dtoa_r+0x94>
 8010c26:	4b12      	ldr	r3, [pc, #72]	; (8010c70 <_dtoa_r+0xad8>)
 8010c28:	f7ff bb20 	b.w	801026c <_dtoa_r+0xd4>
 8010c2c:	f1ba 0f00 	cmp.w	sl, #0
 8010c30:	dc03      	bgt.n	8010c3a <_dtoa_r+0xaa2>
 8010c32:	9b06      	ldr	r3, [sp, #24]
 8010c34:	2b02      	cmp	r3, #2
 8010c36:	f73f aec7 	bgt.w	80109c8 <_dtoa_r+0x830>
 8010c3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ff fa1d 	bl	8010080 <quorem>
 8010c46:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010c4a:	f808 3b01 	strb.w	r3, [r8], #1
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	eba8 0202 	sub.w	r2, r8, r2
 8010c54:	4592      	cmp	sl, r2
 8010c56:	ddb7      	ble.n	8010bc8 <_dtoa_r+0xa30>
 8010c58:	4629      	mov	r1, r5
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	220a      	movs	r2, #10
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f000 f9bc 	bl	8010fdc <__multadd>
 8010c64:	4605      	mov	r5, r0
 8010c66:	e7ea      	b.n	8010c3e <_dtoa_r+0xaa6>
 8010c68:	0801390b 	.word	0x0801390b
 8010c6c:	08013868 	.word	0x08013868
 8010c70:	0801388c 	.word	0x0801388c

08010c74 <__sflush_r>:
 8010c74:	898a      	ldrh	r2, [r1, #12]
 8010c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	0710      	lsls	r0, r2, #28
 8010c7e:	460c      	mov	r4, r1
 8010c80:	d458      	bmi.n	8010d34 <__sflush_r+0xc0>
 8010c82:	684b      	ldr	r3, [r1, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	dc05      	bgt.n	8010c94 <__sflush_r+0x20>
 8010c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	dc02      	bgt.n	8010c94 <__sflush_r+0x20>
 8010c8e:	2000      	movs	r0, #0
 8010c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c96:	2e00      	cmp	r6, #0
 8010c98:	d0f9      	beq.n	8010c8e <__sflush_r+0x1a>
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ca0:	682f      	ldr	r7, [r5, #0]
 8010ca2:	602b      	str	r3, [r5, #0]
 8010ca4:	d032      	beq.n	8010d0c <__sflush_r+0x98>
 8010ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ca8:	89a3      	ldrh	r3, [r4, #12]
 8010caa:	075a      	lsls	r2, r3, #29
 8010cac:	d505      	bpl.n	8010cba <__sflush_r+0x46>
 8010cae:	6863      	ldr	r3, [r4, #4]
 8010cb0:	1ac0      	subs	r0, r0, r3
 8010cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cb4:	b10b      	cbz	r3, 8010cba <__sflush_r+0x46>
 8010cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cb8:	1ac0      	subs	r0, r0, r3
 8010cba:	2300      	movs	r3, #0
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cc0:	6a21      	ldr	r1, [r4, #32]
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	47b0      	blx	r6
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	89a3      	ldrh	r3, [r4, #12]
 8010cca:	d106      	bne.n	8010cda <__sflush_r+0x66>
 8010ccc:	6829      	ldr	r1, [r5, #0]
 8010cce:	291d      	cmp	r1, #29
 8010cd0:	d82c      	bhi.n	8010d2c <__sflush_r+0xb8>
 8010cd2:	4a2a      	ldr	r2, [pc, #168]	; (8010d7c <__sflush_r+0x108>)
 8010cd4:	40ca      	lsrs	r2, r1
 8010cd6:	07d6      	lsls	r6, r2, #31
 8010cd8:	d528      	bpl.n	8010d2c <__sflush_r+0xb8>
 8010cda:	2200      	movs	r2, #0
 8010cdc:	6062      	str	r2, [r4, #4]
 8010cde:	04d9      	lsls	r1, r3, #19
 8010ce0:	6922      	ldr	r2, [r4, #16]
 8010ce2:	6022      	str	r2, [r4, #0]
 8010ce4:	d504      	bpl.n	8010cf0 <__sflush_r+0x7c>
 8010ce6:	1c42      	adds	r2, r0, #1
 8010ce8:	d101      	bne.n	8010cee <__sflush_r+0x7a>
 8010cea:	682b      	ldr	r3, [r5, #0]
 8010cec:	b903      	cbnz	r3, 8010cf0 <__sflush_r+0x7c>
 8010cee:	6560      	str	r0, [r4, #84]	; 0x54
 8010cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cf2:	602f      	str	r7, [r5, #0]
 8010cf4:	2900      	cmp	r1, #0
 8010cf6:	d0ca      	beq.n	8010c8e <__sflush_r+0x1a>
 8010cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cfc:	4299      	cmp	r1, r3
 8010cfe:	d002      	beq.n	8010d06 <__sflush_r+0x92>
 8010d00:	4628      	mov	r0, r5
 8010d02:	f000 fca3 	bl	801164c <_free_r>
 8010d06:	2000      	movs	r0, #0
 8010d08:	6360      	str	r0, [r4, #52]	; 0x34
 8010d0a:	e7c1      	b.n	8010c90 <__sflush_r+0x1c>
 8010d0c:	6a21      	ldr	r1, [r4, #32]
 8010d0e:	2301      	movs	r3, #1
 8010d10:	4628      	mov	r0, r5
 8010d12:	47b0      	blx	r6
 8010d14:	1c41      	adds	r1, r0, #1
 8010d16:	d1c7      	bne.n	8010ca8 <__sflush_r+0x34>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0c4      	beq.n	8010ca8 <__sflush_r+0x34>
 8010d1e:	2b1d      	cmp	r3, #29
 8010d20:	d001      	beq.n	8010d26 <__sflush_r+0xb2>
 8010d22:	2b16      	cmp	r3, #22
 8010d24:	d101      	bne.n	8010d2a <__sflush_r+0xb6>
 8010d26:	602f      	str	r7, [r5, #0]
 8010d28:	e7b1      	b.n	8010c8e <__sflush_r+0x1a>
 8010d2a:	89a3      	ldrh	r3, [r4, #12]
 8010d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d30:	81a3      	strh	r3, [r4, #12]
 8010d32:	e7ad      	b.n	8010c90 <__sflush_r+0x1c>
 8010d34:	690f      	ldr	r7, [r1, #16]
 8010d36:	2f00      	cmp	r7, #0
 8010d38:	d0a9      	beq.n	8010c8e <__sflush_r+0x1a>
 8010d3a:	0793      	lsls	r3, r2, #30
 8010d3c:	680e      	ldr	r6, [r1, #0]
 8010d3e:	bf08      	it	eq
 8010d40:	694b      	ldreq	r3, [r1, #20]
 8010d42:	600f      	str	r7, [r1, #0]
 8010d44:	bf18      	it	ne
 8010d46:	2300      	movne	r3, #0
 8010d48:	eba6 0807 	sub.w	r8, r6, r7
 8010d4c:	608b      	str	r3, [r1, #8]
 8010d4e:	f1b8 0f00 	cmp.w	r8, #0
 8010d52:	dd9c      	ble.n	8010c8e <__sflush_r+0x1a>
 8010d54:	6a21      	ldr	r1, [r4, #32]
 8010d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d58:	4643      	mov	r3, r8
 8010d5a:	463a      	mov	r2, r7
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	47b0      	blx	r6
 8010d60:	2800      	cmp	r0, #0
 8010d62:	dc06      	bgt.n	8010d72 <__sflush_r+0xfe>
 8010d64:	89a3      	ldrh	r3, [r4, #12]
 8010d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d6a:	81a3      	strh	r3, [r4, #12]
 8010d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d70:	e78e      	b.n	8010c90 <__sflush_r+0x1c>
 8010d72:	4407      	add	r7, r0
 8010d74:	eba8 0800 	sub.w	r8, r8, r0
 8010d78:	e7e9      	b.n	8010d4e <__sflush_r+0xda>
 8010d7a:	bf00      	nop
 8010d7c:	20400001 	.word	0x20400001

08010d80 <_fflush_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	690b      	ldr	r3, [r1, #16]
 8010d84:	4605      	mov	r5, r0
 8010d86:	460c      	mov	r4, r1
 8010d88:	b913      	cbnz	r3, 8010d90 <_fflush_r+0x10>
 8010d8a:	2500      	movs	r5, #0
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	bd38      	pop	{r3, r4, r5, pc}
 8010d90:	b118      	cbz	r0, 8010d9a <_fflush_r+0x1a>
 8010d92:	6983      	ldr	r3, [r0, #24]
 8010d94:	b90b      	cbnz	r3, 8010d9a <_fflush_r+0x1a>
 8010d96:	f7fe f971 	bl	800f07c <__sinit>
 8010d9a:	4b14      	ldr	r3, [pc, #80]	; (8010dec <_fflush_r+0x6c>)
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	d11b      	bne.n	8010dd8 <_fflush_r+0x58>
 8010da0:	686c      	ldr	r4, [r5, #4]
 8010da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0ef      	beq.n	8010d8a <_fflush_r+0xa>
 8010daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dac:	07d0      	lsls	r0, r2, #31
 8010dae:	d404      	bmi.n	8010dba <_fflush_r+0x3a>
 8010db0:	0599      	lsls	r1, r3, #22
 8010db2:	d402      	bmi.n	8010dba <_fflush_r+0x3a>
 8010db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010db6:	f7fe fa24 	bl	800f202 <__retarget_lock_acquire_recursive>
 8010dba:	4628      	mov	r0, r5
 8010dbc:	4621      	mov	r1, r4
 8010dbe:	f7ff ff59 	bl	8010c74 <__sflush_r>
 8010dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dc4:	07da      	lsls	r2, r3, #31
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	d4e0      	bmi.n	8010d8c <_fflush_r+0xc>
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	059b      	lsls	r3, r3, #22
 8010dce:	d4dd      	bmi.n	8010d8c <_fflush_r+0xc>
 8010dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dd2:	f7fe fa17 	bl	800f204 <__retarget_lock_release_recursive>
 8010dd6:	e7d9      	b.n	8010d8c <_fflush_r+0xc>
 8010dd8:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <_fflush_r+0x70>)
 8010dda:	429c      	cmp	r4, r3
 8010ddc:	d101      	bne.n	8010de2 <_fflush_r+0x62>
 8010dde:	68ac      	ldr	r4, [r5, #8]
 8010de0:	e7df      	b.n	8010da2 <_fflush_r+0x22>
 8010de2:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <_fflush_r+0x74>)
 8010de4:	429c      	cmp	r4, r3
 8010de6:	bf08      	it	eq
 8010de8:	68ec      	ldreq	r4, [r5, #12]
 8010dea:	e7da      	b.n	8010da2 <_fflush_r+0x22>
 8010dec:	08013814 	.word	0x08013814
 8010df0:	08013834 	.word	0x08013834
 8010df4:	080137f4 	.word	0x080137f4

08010df8 <_localeconv_r>:
 8010df8:	4800      	ldr	r0, [pc, #0]	; (8010dfc <_localeconv_r+0x4>)
 8010dfa:	4770      	bx	lr
 8010dfc:	24000170 	.word	0x24000170

08010e00 <_lseek_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d07      	ldr	r5, [pc, #28]	; (8010e20 <_lseek_r+0x20>)
 8010e04:	4604      	mov	r4, r0
 8010e06:	4608      	mov	r0, r1
 8010e08:	4611      	mov	r1, r2
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	602a      	str	r2, [r5, #0]
 8010e0e:	461a      	mov	r2, r3
 8010e10:	f7f4 f921 	bl	8005056 <_lseek>
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	d102      	bne.n	8010e1e <_lseek_r+0x1e>
 8010e18:	682b      	ldr	r3, [r5, #0]
 8010e1a:	b103      	cbz	r3, 8010e1e <_lseek_r+0x1e>
 8010e1c:	6023      	str	r3, [r4, #0]
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	24005410 	.word	0x24005410

08010e24 <__swhatbuf_r>:
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	460e      	mov	r6, r1
 8010e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e2c:	2900      	cmp	r1, #0
 8010e2e:	b096      	sub	sp, #88	; 0x58
 8010e30:	4614      	mov	r4, r2
 8010e32:	461d      	mov	r5, r3
 8010e34:	da08      	bge.n	8010e48 <__swhatbuf_r+0x24>
 8010e36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	602a      	str	r2, [r5, #0]
 8010e3e:	061a      	lsls	r2, r3, #24
 8010e40:	d410      	bmi.n	8010e64 <__swhatbuf_r+0x40>
 8010e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e46:	e00e      	b.n	8010e66 <__swhatbuf_r+0x42>
 8010e48:	466a      	mov	r2, sp
 8010e4a:	f000 ff43 	bl	8011cd4 <_fstat_r>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	dbf1      	blt.n	8010e36 <__swhatbuf_r+0x12>
 8010e52:	9a01      	ldr	r2, [sp, #4]
 8010e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e5c:	425a      	negs	r2, r3
 8010e5e:	415a      	adcs	r2, r3
 8010e60:	602a      	str	r2, [r5, #0]
 8010e62:	e7ee      	b.n	8010e42 <__swhatbuf_r+0x1e>
 8010e64:	2340      	movs	r3, #64	; 0x40
 8010e66:	2000      	movs	r0, #0
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	b016      	add	sp, #88	; 0x58
 8010e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e70 <__smakebuf_r>:
 8010e70:	898b      	ldrh	r3, [r1, #12]
 8010e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e74:	079d      	lsls	r5, r3, #30
 8010e76:	4606      	mov	r6, r0
 8010e78:	460c      	mov	r4, r1
 8010e7a:	d507      	bpl.n	8010e8c <__smakebuf_r+0x1c>
 8010e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	6123      	str	r3, [r4, #16]
 8010e84:	2301      	movs	r3, #1
 8010e86:	6163      	str	r3, [r4, #20]
 8010e88:	b002      	add	sp, #8
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}
 8010e8c:	ab01      	add	r3, sp, #4
 8010e8e:	466a      	mov	r2, sp
 8010e90:	f7ff ffc8 	bl	8010e24 <__swhatbuf_r>
 8010e94:	9900      	ldr	r1, [sp, #0]
 8010e96:	4605      	mov	r5, r0
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f7fe f9eb 	bl	800f274 <_malloc_r>
 8010e9e:	b948      	cbnz	r0, 8010eb4 <__smakebuf_r+0x44>
 8010ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea4:	059a      	lsls	r2, r3, #22
 8010ea6:	d4ef      	bmi.n	8010e88 <__smakebuf_r+0x18>
 8010ea8:	f023 0303 	bic.w	r3, r3, #3
 8010eac:	f043 0302 	orr.w	r3, r3, #2
 8010eb0:	81a3      	strh	r3, [r4, #12]
 8010eb2:	e7e3      	b.n	8010e7c <__smakebuf_r+0xc>
 8010eb4:	4b0d      	ldr	r3, [pc, #52]	; (8010eec <__smakebuf_r+0x7c>)
 8010eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010eb8:	89a3      	ldrh	r3, [r4, #12]
 8010eba:	6020      	str	r0, [r4, #0]
 8010ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	9b00      	ldr	r3, [sp, #0]
 8010ec4:	6163      	str	r3, [r4, #20]
 8010ec6:	9b01      	ldr	r3, [sp, #4]
 8010ec8:	6120      	str	r0, [r4, #16]
 8010eca:	b15b      	cbz	r3, 8010ee4 <__smakebuf_r+0x74>
 8010ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f000 ff11 	bl	8011cf8 <_isatty_r>
 8010ed6:	b128      	cbz	r0, 8010ee4 <__smakebuf_r+0x74>
 8010ed8:	89a3      	ldrh	r3, [r4, #12]
 8010eda:	f023 0303 	bic.w	r3, r3, #3
 8010ede:	f043 0301 	orr.w	r3, r3, #1
 8010ee2:	81a3      	strh	r3, [r4, #12]
 8010ee4:	89a0      	ldrh	r0, [r4, #12]
 8010ee6:	4305      	orrs	r5, r0
 8010ee8:	81a5      	strh	r5, [r4, #12]
 8010eea:	e7cd      	b.n	8010e88 <__smakebuf_r+0x18>
 8010eec:	0800f015 	.word	0x0800f015

08010ef0 <malloc>:
 8010ef0:	4b02      	ldr	r3, [pc, #8]	; (8010efc <malloc+0xc>)
 8010ef2:	4601      	mov	r1, r0
 8010ef4:	6818      	ldr	r0, [r3, #0]
 8010ef6:	f7fe b9bd 	b.w	800f274 <_malloc_r>
 8010efa:	bf00      	nop
 8010efc:	2400001c 	.word	0x2400001c

08010f00 <__malloc_lock>:
 8010f00:	4801      	ldr	r0, [pc, #4]	; (8010f08 <__malloc_lock+0x8>)
 8010f02:	f7fe b97e 	b.w	800f202 <__retarget_lock_acquire_recursive>
 8010f06:	bf00      	nop
 8010f08:	24005404 	.word	0x24005404

08010f0c <__malloc_unlock>:
 8010f0c:	4801      	ldr	r0, [pc, #4]	; (8010f14 <__malloc_unlock+0x8>)
 8010f0e:	f7fe b979 	b.w	800f204 <__retarget_lock_release_recursive>
 8010f12:	bf00      	nop
 8010f14:	24005404 	.word	0x24005404

08010f18 <_Balloc>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	460d      	mov	r5, r1
 8010f20:	b976      	cbnz	r6, 8010f40 <_Balloc+0x28>
 8010f22:	2010      	movs	r0, #16
 8010f24:	f7ff ffe4 	bl	8010ef0 <malloc>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8010f2c:	b920      	cbnz	r0, 8010f38 <_Balloc+0x20>
 8010f2e:	4b18      	ldr	r3, [pc, #96]	; (8010f90 <_Balloc+0x78>)
 8010f30:	4818      	ldr	r0, [pc, #96]	; (8010f94 <_Balloc+0x7c>)
 8010f32:	2166      	movs	r1, #102	; 0x66
 8010f34:	f000 fe9e 	bl	8011c74 <__assert_func>
 8010f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f3c:	6006      	str	r6, [r0, #0]
 8010f3e:	60c6      	str	r6, [r0, #12]
 8010f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010f42:	68f3      	ldr	r3, [r6, #12]
 8010f44:	b183      	cbz	r3, 8010f68 <_Balloc+0x50>
 8010f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f4e:	b9b8      	cbnz	r0, 8010f80 <_Balloc+0x68>
 8010f50:	2101      	movs	r1, #1
 8010f52:	fa01 f605 	lsl.w	r6, r1, r5
 8010f56:	1d72      	adds	r2, r6, #5
 8010f58:	0092      	lsls	r2, r2, #2
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f000 fb60 	bl	8011620 <_calloc_r>
 8010f60:	b160      	cbz	r0, 8010f7c <_Balloc+0x64>
 8010f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f66:	e00e      	b.n	8010f86 <_Balloc+0x6e>
 8010f68:	2221      	movs	r2, #33	; 0x21
 8010f6a:	2104      	movs	r1, #4
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f000 fb57 	bl	8011620 <_calloc_r>
 8010f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f74:	60f0      	str	r0, [r6, #12]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d1e4      	bne.n	8010f46 <_Balloc+0x2e>
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}
 8010f80:	6802      	ldr	r2, [r0, #0]
 8010f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f86:	2300      	movs	r3, #0
 8010f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f8c:	e7f7      	b.n	8010f7e <_Balloc+0x66>
 8010f8e:	bf00      	nop
 8010f90:	08013899 	.word	0x08013899
 8010f94:	0801391c 	.word	0x0801391c

08010f98 <_Bfree>:
 8010f98:	b570      	push	{r4, r5, r6, lr}
 8010f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	b976      	cbnz	r6, 8010fc0 <_Bfree+0x28>
 8010fa2:	2010      	movs	r0, #16
 8010fa4:	f7ff ffa4 	bl	8010ef0 <malloc>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	6268      	str	r0, [r5, #36]	; 0x24
 8010fac:	b920      	cbnz	r0, 8010fb8 <_Bfree+0x20>
 8010fae:	4b09      	ldr	r3, [pc, #36]	; (8010fd4 <_Bfree+0x3c>)
 8010fb0:	4809      	ldr	r0, [pc, #36]	; (8010fd8 <_Bfree+0x40>)
 8010fb2:	218a      	movs	r1, #138	; 0x8a
 8010fb4:	f000 fe5e 	bl	8011c74 <__assert_func>
 8010fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fbc:	6006      	str	r6, [r0, #0]
 8010fbe:	60c6      	str	r6, [r0, #12]
 8010fc0:	b13c      	cbz	r4, 8010fd2 <_Bfree+0x3a>
 8010fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010fc4:	6862      	ldr	r2, [r4, #4]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010fcc:	6021      	str	r1, [r4, #0]
 8010fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	08013899 	.word	0x08013899
 8010fd8:	0801391c 	.word	0x0801391c

08010fdc <__multadd>:
 8010fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe0:	690d      	ldr	r5, [r1, #16]
 8010fe2:	4607      	mov	r7, r0
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	461e      	mov	r6, r3
 8010fe8:	f101 0c14 	add.w	ip, r1, #20
 8010fec:	2000      	movs	r0, #0
 8010fee:	f8dc 3000 	ldr.w	r3, [ip]
 8010ff2:	b299      	uxth	r1, r3
 8010ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8010ff8:	0c1e      	lsrs	r6, r3, #16
 8010ffa:	0c0b      	lsrs	r3, r1, #16
 8010ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8011000:	b289      	uxth	r1, r1
 8011002:	3001      	adds	r0, #1
 8011004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011008:	4285      	cmp	r5, r0
 801100a:	f84c 1b04 	str.w	r1, [ip], #4
 801100e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011012:	dcec      	bgt.n	8010fee <__multadd+0x12>
 8011014:	b30e      	cbz	r6, 801105a <__multadd+0x7e>
 8011016:	68a3      	ldr	r3, [r4, #8]
 8011018:	42ab      	cmp	r3, r5
 801101a:	dc19      	bgt.n	8011050 <__multadd+0x74>
 801101c:	6861      	ldr	r1, [r4, #4]
 801101e:	4638      	mov	r0, r7
 8011020:	3101      	adds	r1, #1
 8011022:	f7ff ff79 	bl	8010f18 <_Balloc>
 8011026:	4680      	mov	r8, r0
 8011028:	b928      	cbnz	r0, 8011036 <__multadd+0x5a>
 801102a:	4602      	mov	r2, r0
 801102c:	4b0c      	ldr	r3, [pc, #48]	; (8011060 <__multadd+0x84>)
 801102e:	480d      	ldr	r0, [pc, #52]	; (8011064 <__multadd+0x88>)
 8011030:	21b5      	movs	r1, #181	; 0xb5
 8011032:	f000 fe1f 	bl	8011c74 <__assert_func>
 8011036:	6922      	ldr	r2, [r4, #16]
 8011038:	3202      	adds	r2, #2
 801103a:	f104 010c 	add.w	r1, r4, #12
 801103e:	0092      	lsls	r2, r2, #2
 8011040:	300c      	adds	r0, #12
 8011042:	f7fe f8e0 	bl	800f206 <memcpy>
 8011046:	4621      	mov	r1, r4
 8011048:	4638      	mov	r0, r7
 801104a:	f7ff ffa5 	bl	8010f98 <_Bfree>
 801104e:	4644      	mov	r4, r8
 8011050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011054:	3501      	adds	r5, #1
 8011056:	615e      	str	r6, [r3, #20]
 8011058:	6125      	str	r5, [r4, #16]
 801105a:	4620      	mov	r0, r4
 801105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011060:	0801390b 	.word	0x0801390b
 8011064:	0801391c 	.word	0x0801391c

08011068 <__hi0bits>:
 8011068:	0c03      	lsrs	r3, r0, #16
 801106a:	041b      	lsls	r3, r3, #16
 801106c:	b9d3      	cbnz	r3, 80110a4 <__hi0bits+0x3c>
 801106e:	0400      	lsls	r0, r0, #16
 8011070:	2310      	movs	r3, #16
 8011072:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011076:	bf04      	itt	eq
 8011078:	0200      	lsleq	r0, r0, #8
 801107a:	3308      	addeq	r3, #8
 801107c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011080:	bf04      	itt	eq
 8011082:	0100      	lsleq	r0, r0, #4
 8011084:	3304      	addeq	r3, #4
 8011086:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801108a:	bf04      	itt	eq
 801108c:	0080      	lsleq	r0, r0, #2
 801108e:	3302      	addeq	r3, #2
 8011090:	2800      	cmp	r0, #0
 8011092:	db05      	blt.n	80110a0 <__hi0bits+0x38>
 8011094:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011098:	f103 0301 	add.w	r3, r3, #1
 801109c:	bf08      	it	eq
 801109e:	2320      	moveq	r3, #32
 80110a0:	4618      	mov	r0, r3
 80110a2:	4770      	bx	lr
 80110a4:	2300      	movs	r3, #0
 80110a6:	e7e4      	b.n	8011072 <__hi0bits+0xa>

080110a8 <__lo0bits>:
 80110a8:	6803      	ldr	r3, [r0, #0]
 80110aa:	f013 0207 	ands.w	r2, r3, #7
 80110ae:	4601      	mov	r1, r0
 80110b0:	d00b      	beq.n	80110ca <__lo0bits+0x22>
 80110b2:	07da      	lsls	r2, r3, #31
 80110b4:	d423      	bmi.n	80110fe <__lo0bits+0x56>
 80110b6:	0798      	lsls	r0, r3, #30
 80110b8:	bf49      	itett	mi
 80110ba:	085b      	lsrmi	r3, r3, #1
 80110bc:	089b      	lsrpl	r3, r3, #2
 80110be:	2001      	movmi	r0, #1
 80110c0:	600b      	strmi	r3, [r1, #0]
 80110c2:	bf5c      	itt	pl
 80110c4:	600b      	strpl	r3, [r1, #0]
 80110c6:	2002      	movpl	r0, #2
 80110c8:	4770      	bx	lr
 80110ca:	b298      	uxth	r0, r3
 80110cc:	b9a8      	cbnz	r0, 80110fa <__lo0bits+0x52>
 80110ce:	0c1b      	lsrs	r3, r3, #16
 80110d0:	2010      	movs	r0, #16
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	b90a      	cbnz	r2, 80110da <__lo0bits+0x32>
 80110d6:	3008      	adds	r0, #8
 80110d8:	0a1b      	lsrs	r3, r3, #8
 80110da:	071a      	lsls	r2, r3, #28
 80110dc:	bf04      	itt	eq
 80110de:	091b      	lsreq	r3, r3, #4
 80110e0:	3004      	addeq	r0, #4
 80110e2:	079a      	lsls	r2, r3, #30
 80110e4:	bf04      	itt	eq
 80110e6:	089b      	lsreq	r3, r3, #2
 80110e8:	3002      	addeq	r0, #2
 80110ea:	07da      	lsls	r2, r3, #31
 80110ec:	d403      	bmi.n	80110f6 <__lo0bits+0x4e>
 80110ee:	085b      	lsrs	r3, r3, #1
 80110f0:	f100 0001 	add.w	r0, r0, #1
 80110f4:	d005      	beq.n	8011102 <__lo0bits+0x5a>
 80110f6:	600b      	str	r3, [r1, #0]
 80110f8:	4770      	bx	lr
 80110fa:	4610      	mov	r0, r2
 80110fc:	e7e9      	b.n	80110d2 <__lo0bits+0x2a>
 80110fe:	2000      	movs	r0, #0
 8011100:	4770      	bx	lr
 8011102:	2020      	movs	r0, #32
 8011104:	4770      	bx	lr
	...

08011108 <__i2b>:
 8011108:	b510      	push	{r4, lr}
 801110a:	460c      	mov	r4, r1
 801110c:	2101      	movs	r1, #1
 801110e:	f7ff ff03 	bl	8010f18 <_Balloc>
 8011112:	4602      	mov	r2, r0
 8011114:	b928      	cbnz	r0, 8011122 <__i2b+0x1a>
 8011116:	4b05      	ldr	r3, [pc, #20]	; (801112c <__i2b+0x24>)
 8011118:	4805      	ldr	r0, [pc, #20]	; (8011130 <__i2b+0x28>)
 801111a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801111e:	f000 fda9 	bl	8011c74 <__assert_func>
 8011122:	2301      	movs	r3, #1
 8011124:	6144      	str	r4, [r0, #20]
 8011126:	6103      	str	r3, [r0, #16]
 8011128:	bd10      	pop	{r4, pc}
 801112a:	bf00      	nop
 801112c:	0801390b 	.word	0x0801390b
 8011130:	0801391c 	.word	0x0801391c

08011134 <__multiply>:
 8011134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011138:	4691      	mov	r9, r2
 801113a:	690a      	ldr	r2, [r1, #16]
 801113c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011140:	429a      	cmp	r2, r3
 8011142:	bfb8      	it	lt
 8011144:	460b      	movlt	r3, r1
 8011146:	460c      	mov	r4, r1
 8011148:	bfbc      	itt	lt
 801114a:	464c      	movlt	r4, r9
 801114c:	4699      	movlt	r9, r3
 801114e:	6927      	ldr	r7, [r4, #16]
 8011150:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011154:	68a3      	ldr	r3, [r4, #8]
 8011156:	6861      	ldr	r1, [r4, #4]
 8011158:	eb07 060a 	add.w	r6, r7, sl
 801115c:	42b3      	cmp	r3, r6
 801115e:	b085      	sub	sp, #20
 8011160:	bfb8      	it	lt
 8011162:	3101      	addlt	r1, #1
 8011164:	f7ff fed8 	bl	8010f18 <_Balloc>
 8011168:	b930      	cbnz	r0, 8011178 <__multiply+0x44>
 801116a:	4602      	mov	r2, r0
 801116c:	4b44      	ldr	r3, [pc, #272]	; (8011280 <__multiply+0x14c>)
 801116e:	4845      	ldr	r0, [pc, #276]	; (8011284 <__multiply+0x150>)
 8011170:	f240 115d 	movw	r1, #349	; 0x15d
 8011174:	f000 fd7e 	bl	8011c74 <__assert_func>
 8011178:	f100 0514 	add.w	r5, r0, #20
 801117c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011180:	462b      	mov	r3, r5
 8011182:	2200      	movs	r2, #0
 8011184:	4543      	cmp	r3, r8
 8011186:	d321      	bcc.n	80111cc <__multiply+0x98>
 8011188:	f104 0314 	add.w	r3, r4, #20
 801118c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011190:	f109 0314 	add.w	r3, r9, #20
 8011194:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011198:	9202      	str	r2, [sp, #8]
 801119a:	1b3a      	subs	r2, r7, r4
 801119c:	3a15      	subs	r2, #21
 801119e:	f022 0203 	bic.w	r2, r2, #3
 80111a2:	3204      	adds	r2, #4
 80111a4:	f104 0115 	add.w	r1, r4, #21
 80111a8:	428f      	cmp	r7, r1
 80111aa:	bf38      	it	cc
 80111ac:	2204      	movcc	r2, #4
 80111ae:	9201      	str	r2, [sp, #4]
 80111b0:	9a02      	ldr	r2, [sp, #8]
 80111b2:	9303      	str	r3, [sp, #12]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d80c      	bhi.n	80111d2 <__multiply+0x9e>
 80111b8:	2e00      	cmp	r6, #0
 80111ba:	dd03      	ble.n	80111c4 <__multiply+0x90>
 80111bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d05a      	beq.n	801127a <__multiply+0x146>
 80111c4:	6106      	str	r6, [r0, #16]
 80111c6:	b005      	add	sp, #20
 80111c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111cc:	f843 2b04 	str.w	r2, [r3], #4
 80111d0:	e7d8      	b.n	8011184 <__multiply+0x50>
 80111d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80111d6:	f1ba 0f00 	cmp.w	sl, #0
 80111da:	d024      	beq.n	8011226 <__multiply+0xf2>
 80111dc:	f104 0e14 	add.w	lr, r4, #20
 80111e0:	46a9      	mov	r9, r5
 80111e2:	f04f 0c00 	mov.w	ip, #0
 80111e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80111ea:	f8d9 1000 	ldr.w	r1, [r9]
 80111ee:	fa1f fb82 	uxth.w	fp, r2
 80111f2:	b289      	uxth	r1, r1
 80111f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80111f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80111fc:	f8d9 2000 	ldr.w	r2, [r9]
 8011200:	4461      	add	r1, ip
 8011202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011206:	fb0a c20b 	mla	r2, sl, fp, ip
 801120a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801120e:	b289      	uxth	r1, r1
 8011210:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011214:	4577      	cmp	r7, lr
 8011216:	f849 1b04 	str.w	r1, [r9], #4
 801121a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801121e:	d8e2      	bhi.n	80111e6 <__multiply+0xb2>
 8011220:	9a01      	ldr	r2, [sp, #4]
 8011222:	f845 c002 	str.w	ip, [r5, r2]
 8011226:	9a03      	ldr	r2, [sp, #12]
 8011228:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801122c:	3304      	adds	r3, #4
 801122e:	f1b9 0f00 	cmp.w	r9, #0
 8011232:	d020      	beq.n	8011276 <__multiply+0x142>
 8011234:	6829      	ldr	r1, [r5, #0]
 8011236:	f104 0c14 	add.w	ip, r4, #20
 801123a:	46ae      	mov	lr, r5
 801123c:	f04f 0a00 	mov.w	sl, #0
 8011240:	f8bc b000 	ldrh.w	fp, [ip]
 8011244:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011248:	fb09 220b 	mla	r2, r9, fp, r2
 801124c:	4492      	add	sl, r2
 801124e:	b289      	uxth	r1, r1
 8011250:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011254:	f84e 1b04 	str.w	r1, [lr], #4
 8011258:	f85c 2b04 	ldr.w	r2, [ip], #4
 801125c:	f8be 1000 	ldrh.w	r1, [lr]
 8011260:	0c12      	lsrs	r2, r2, #16
 8011262:	fb09 1102 	mla	r1, r9, r2, r1
 8011266:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801126a:	4567      	cmp	r7, ip
 801126c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011270:	d8e6      	bhi.n	8011240 <__multiply+0x10c>
 8011272:	9a01      	ldr	r2, [sp, #4]
 8011274:	50a9      	str	r1, [r5, r2]
 8011276:	3504      	adds	r5, #4
 8011278:	e79a      	b.n	80111b0 <__multiply+0x7c>
 801127a:	3e01      	subs	r6, #1
 801127c:	e79c      	b.n	80111b8 <__multiply+0x84>
 801127e:	bf00      	nop
 8011280:	0801390b 	.word	0x0801390b
 8011284:	0801391c 	.word	0x0801391c

08011288 <__pow5mult>:
 8011288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801128c:	4615      	mov	r5, r2
 801128e:	f012 0203 	ands.w	r2, r2, #3
 8011292:	4606      	mov	r6, r0
 8011294:	460f      	mov	r7, r1
 8011296:	d007      	beq.n	80112a8 <__pow5mult+0x20>
 8011298:	4c25      	ldr	r4, [pc, #148]	; (8011330 <__pow5mult+0xa8>)
 801129a:	3a01      	subs	r2, #1
 801129c:	2300      	movs	r3, #0
 801129e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112a2:	f7ff fe9b 	bl	8010fdc <__multadd>
 80112a6:	4607      	mov	r7, r0
 80112a8:	10ad      	asrs	r5, r5, #2
 80112aa:	d03d      	beq.n	8011328 <__pow5mult+0xa0>
 80112ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80112ae:	b97c      	cbnz	r4, 80112d0 <__pow5mult+0x48>
 80112b0:	2010      	movs	r0, #16
 80112b2:	f7ff fe1d 	bl	8010ef0 <malloc>
 80112b6:	4602      	mov	r2, r0
 80112b8:	6270      	str	r0, [r6, #36]	; 0x24
 80112ba:	b928      	cbnz	r0, 80112c8 <__pow5mult+0x40>
 80112bc:	4b1d      	ldr	r3, [pc, #116]	; (8011334 <__pow5mult+0xac>)
 80112be:	481e      	ldr	r0, [pc, #120]	; (8011338 <__pow5mult+0xb0>)
 80112c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80112c4:	f000 fcd6 	bl	8011c74 <__assert_func>
 80112c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112cc:	6004      	str	r4, [r0, #0]
 80112ce:	60c4      	str	r4, [r0, #12]
 80112d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80112d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112d8:	b94c      	cbnz	r4, 80112ee <__pow5mult+0x66>
 80112da:	f240 2171 	movw	r1, #625	; 0x271
 80112de:	4630      	mov	r0, r6
 80112e0:	f7ff ff12 	bl	8011108 <__i2b>
 80112e4:	2300      	movs	r3, #0
 80112e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80112ea:	4604      	mov	r4, r0
 80112ec:	6003      	str	r3, [r0, #0]
 80112ee:	f04f 0900 	mov.w	r9, #0
 80112f2:	07eb      	lsls	r3, r5, #31
 80112f4:	d50a      	bpl.n	801130c <__pow5mult+0x84>
 80112f6:	4639      	mov	r1, r7
 80112f8:	4622      	mov	r2, r4
 80112fa:	4630      	mov	r0, r6
 80112fc:	f7ff ff1a 	bl	8011134 <__multiply>
 8011300:	4639      	mov	r1, r7
 8011302:	4680      	mov	r8, r0
 8011304:	4630      	mov	r0, r6
 8011306:	f7ff fe47 	bl	8010f98 <_Bfree>
 801130a:	4647      	mov	r7, r8
 801130c:	106d      	asrs	r5, r5, #1
 801130e:	d00b      	beq.n	8011328 <__pow5mult+0xa0>
 8011310:	6820      	ldr	r0, [r4, #0]
 8011312:	b938      	cbnz	r0, 8011324 <__pow5mult+0x9c>
 8011314:	4622      	mov	r2, r4
 8011316:	4621      	mov	r1, r4
 8011318:	4630      	mov	r0, r6
 801131a:	f7ff ff0b 	bl	8011134 <__multiply>
 801131e:	6020      	str	r0, [r4, #0]
 8011320:	f8c0 9000 	str.w	r9, [r0]
 8011324:	4604      	mov	r4, r0
 8011326:	e7e4      	b.n	80112f2 <__pow5mult+0x6a>
 8011328:	4638      	mov	r0, r7
 801132a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801132e:	bf00      	nop
 8011330:	08013a68 	.word	0x08013a68
 8011334:	08013899 	.word	0x08013899
 8011338:	0801391c 	.word	0x0801391c

0801133c <__lshift>:
 801133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011340:	460c      	mov	r4, r1
 8011342:	6849      	ldr	r1, [r1, #4]
 8011344:	6923      	ldr	r3, [r4, #16]
 8011346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801134a:	68a3      	ldr	r3, [r4, #8]
 801134c:	4607      	mov	r7, r0
 801134e:	4691      	mov	r9, r2
 8011350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011354:	f108 0601 	add.w	r6, r8, #1
 8011358:	42b3      	cmp	r3, r6
 801135a:	db0b      	blt.n	8011374 <__lshift+0x38>
 801135c:	4638      	mov	r0, r7
 801135e:	f7ff fddb 	bl	8010f18 <_Balloc>
 8011362:	4605      	mov	r5, r0
 8011364:	b948      	cbnz	r0, 801137a <__lshift+0x3e>
 8011366:	4602      	mov	r2, r0
 8011368:	4b2a      	ldr	r3, [pc, #168]	; (8011414 <__lshift+0xd8>)
 801136a:	482b      	ldr	r0, [pc, #172]	; (8011418 <__lshift+0xdc>)
 801136c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011370:	f000 fc80 	bl	8011c74 <__assert_func>
 8011374:	3101      	adds	r1, #1
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	e7ee      	b.n	8011358 <__lshift+0x1c>
 801137a:	2300      	movs	r3, #0
 801137c:	f100 0114 	add.w	r1, r0, #20
 8011380:	f100 0210 	add.w	r2, r0, #16
 8011384:	4618      	mov	r0, r3
 8011386:	4553      	cmp	r3, sl
 8011388:	db37      	blt.n	80113fa <__lshift+0xbe>
 801138a:	6920      	ldr	r0, [r4, #16]
 801138c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011390:	f104 0314 	add.w	r3, r4, #20
 8011394:	f019 091f 	ands.w	r9, r9, #31
 8011398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801139c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80113a0:	d02f      	beq.n	8011402 <__lshift+0xc6>
 80113a2:	f1c9 0e20 	rsb	lr, r9, #32
 80113a6:	468a      	mov	sl, r1
 80113a8:	f04f 0c00 	mov.w	ip, #0
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	fa02 f209 	lsl.w	r2, r2, r9
 80113b2:	ea42 020c 	orr.w	r2, r2, ip
 80113b6:	f84a 2b04 	str.w	r2, [sl], #4
 80113ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80113be:	4298      	cmp	r0, r3
 80113c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80113c4:	d8f2      	bhi.n	80113ac <__lshift+0x70>
 80113c6:	1b03      	subs	r3, r0, r4
 80113c8:	3b15      	subs	r3, #21
 80113ca:	f023 0303 	bic.w	r3, r3, #3
 80113ce:	3304      	adds	r3, #4
 80113d0:	f104 0215 	add.w	r2, r4, #21
 80113d4:	4290      	cmp	r0, r2
 80113d6:	bf38      	it	cc
 80113d8:	2304      	movcc	r3, #4
 80113da:	f841 c003 	str.w	ip, [r1, r3]
 80113de:	f1bc 0f00 	cmp.w	ip, #0
 80113e2:	d001      	beq.n	80113e8 <__lshift+0xac>
 80113e4:	f108 0602 	add.w	r6, r8, #2
 80113e8:	3e01      	subs	r6, #1
 80113ea:	4638      	mov	r0, r7
 80113ec:	612e      	str	r6, [r5, #16]
 80113ee:	4621      	mov	r1, r4
 80113f0:	f7ff fdd2 	bl	8010f98 <_Bfree>
 80113f4:	4628      	mov	r0, r5
 80113f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80113fe:	3301      	adds	r3, #1
 8011400:	e7c1      	b.n	8011386 <__lshift+0x4a>
 8011402:	3904      	subs	r1, #4
 8011404:	f853 2b04 	ldr.w	r2, [r3], #4
 8011408:	f841 2f04 	str.w	r2, [r1, #4]!
 801140c:	4298      	cmp	r0, r3
 801140e:	d8f9      	bhi.n	8011404 <__lshift+0xc8>
 8011410:	e7ea      	b.n	80113e8 <__lshift+0xac>
 8011412:	bf00      	nop
 8011414:	0801390b 	.word	0x0801390b
 8011418:	0801391c 	.word	0x0801391c

0801141c <__mcmp>:
 801141c:	b530      	push	{r4, r5, lr}
 801141e:	6902      	ldr	r2, [r0, #16]
 8011420:	690c      	ldr	r4, [r1, #16]
 8011422:	1b12      	subs	r2, r2, r4
 8011424:	d10e      	bne.n	8011444 <__mcmp+0x28>
 8011426:	f100 0314 	add.w	r3, r0, #20
 801142a:	3114      	adds	r1, #20
 801142c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801143c:	42a5      	cmp	r5, r4
 801143e:	d003      	beq.n	8011448 <__mcmp+0x2c>
 8011440:	d305      	bcc.n	801144e <__mcmp+0x32>
 8011442:	2201      	movs	r2, #1
 8011444:	4610      	mov	r0, r2
 8011446:	bd30      	pop	{r4, r5, pc}
 8011448:	4283      	cmp	r3, r0
 801144a:	d3f3      	bcc.n	8011434 <__mcmp+0x18>
 801144c:	e7fa      	b.n	8011444 <__mcmp+0x28>
 801144e:	f04f 32ff 	mov.w	r2, #4294967295
 8011452:	e7f7      	b.n	8011444 <__mcmp+0x28>

08011454 <__mdiff>:
 8011454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011458:	460c      	mov	r4, r1
 801145a:	4606      	mov	r6, r0
 801145c:	4611      	mov	r1, r2
 801145e:	4620      	mov	r0, r4
 8011460:	4690      	mov	r8, r2
 8011462:	f7ff ffdb 	bl	801141c <__mcmp>
 8011466:	1e05      	subs	r5, r0, #0
 8011468:	d110      	bne.n	801148c <__mdiff+0x38>
 801146a:	4629      	mov	r1, r5
 801146c:	4630      	mov	r0, r6
 801146e:	f7ff fd53 	bl	8010f18 <_Balloc>
 8011472:	b930      	cbnz	r0, 8011482 <__mdiff+0x2e>
 8011474:	4b3a      	ldr	r3, [pc, #232]	; (8011560 <__mdiff+0x10c>)
 8011476:	4602      	mov	r2, r0
 8011478:	f240 2132 	movw	r1, #562	; 0x232
 801147c:	4839      	ldr	r0, [pc, #228]	; (8011564 <__mdiff+0x110>)
 801147e:	f000 fbf9 	bl	8011c74 <__assert_func>
 8011482:	2301      	movs	r3, #1
 8011484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148c:	bfa4      	itt	ge
 801148e:	4643      	movge	r3, r8
 8011490:	46a0      	movge	r8, r4
 8011492:	4630      	mov	r0, r6
 8011494:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011498:	bfa6      	itte	ge
 801149a:	461c      	movge	r4, r3
 801149c:	2500      	movge	r5, #0
 801149e:	2501      	movlt	r5, #1
 80114a0:	f7ff fd3a 	bl	8010f18 <_Balloc>
 80114a4:	b920      	cbnz	r0, 80114b0 <__mdiff+0x5c>
 80114a6:	4b2e      	ldr	r3, [pc, #184]	; (8011560 <__mdiff+0x10c>)
 80114a8:	4602      	mov	r2, r0
 80114aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80114ae:	e7e5      	b.n	801147c <__mdiff+0x28>
 80114b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80114b4:	6926      	ldr	r6, [r4, #16]
 80114b6:	60c5      	str	r5, [r0, #12]
 80114b8:	f104 0914 	add.w	r9, r4, #20
 80114bc:	f108 0514 	add.w	r5, r8, #20
 80114c0:	f100 0e14 	add.w	lr, r0, #20
 80114c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80114c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80114cc:	f108 0210 	add.w	r2, r8, #16
 80114d0:	46f2      	mov	sl, lr
 80114d2:	2100      	movs	r1, #0
 80114d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80114d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80114dc:	fa1f f883 	uxth.w	r8, r3
 80114e0:	fa11 f18b 	uxtah	r1, r1, fp
 80114e4:	0c1b      	lsrs	r3, r3, #16
 80114e6:	eba1 0808 	sub.w	r8, r1, r8
 80114ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80114ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80114f2:	fa1f f888 	uxth.w	r8, r8
 80114f6:	1419      	asrs	r1, r3, #16
 80114f8:	454e      	cmp	r6, r9
 80114fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80114fe:	f84a 3b04 	str.w	r3, [sl], #4
 8011502:	d8e7      	bhi.n	80114d4 <__mdiff+0x80>
 8011504:	1b33      	subs	r3, r6, r4
 8011506:	3b15      	subs	r3, #21
 8011508:	f023 0303 	bic.w	r3, r3, #3
 801150c:	3304      	adds	r3, #4
 801150e:	3415      	adds	r4, #21
 8011510:	42a6      	cmp	r6, r4
 8011512:	bf38      	it	cc
 8011514:	2304      	movcc	r3, #4
 8011516:	441d      	add	r5, r3
 8011518:	4473      	add	r3, lr
 801151a:	469e      	mov	lr, r3
 801151c:	462e      	mov	r6, r5
 801151e:	4566      	cmp	r6, ip
 8011520:	d30e      	bcc.n	8011540 <__mdiff+0xec>
 8011522:	f10c 0203 	add.w	r2, ip, #3
 8011526:	1b52      	subs	r2, r2, r5
 8011528:	f022 0203 	bic.w	r2, r2, #3
 801152c:	3d03      	subs	r5, #3
 801152e:	45ac      	cmp	ip, r5
 8011530:	bf38      	it	cc
 8011532:	2200      	movcc	r2, #0
 8011534:	441a      	add	r2, r3
 8011536:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801153a:	b17b      	cbz	r3, 801155c <__mdiff+0x108>
 801153c:	6107      	str	r7, [r0, #16]
 801153e:	e7a3      	b.n	8011488 <__mdiff+0x34>
 8011540:	f856 8b04 	ldr.w	r8, [r6], #4
 8011544:	fa11 f288 	uxtah	r2, r1, r8
 8011548:	1414      	asrs	r4, r2, #16
 801154a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801154e:	b292      	uxth	r2, r2
 8011550:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011554:	f84e 2b04 	str.w	r2, [lr], #4
 8011558:	1421      	asrs	r1, r4, #16
 801155a:	e7e0      	b.n	801151e <__mdiff+0xca>
 801155c:	3f01      	subs	r7, #1
 801155e:	e7ea      	b.n	8011536 <__mdiff+0xe2>
 8011560:	0801390b 	.word	0x0801390b
 8011564:	0801391c 	.word	0x0801391c

08011568 <__d2b>:
 8011568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801156c:	4689      	mov	r9, r1
 801156e:	2101      	movs	r1, #1
 8011570:	ec57 6b10 	vmov	r6, r7, d0
 8011574:	4690      	mov	r8, r2
 8011576:	f7ff fccf 	bl	8010f18 <_Balloc>
 801157a:	4604      	mov	r4, r0
 801157c:	b930      	cbnz	r0, 801158c <__d2b+0x24>
 801157e:	4602      	mov	r2, r0
 8011580:	4b25      	ldr	r3, [pc, #148]	; (8011618 <__d2b+0xb0>)
 8011582:	4826      	ldr	r0, [pc, #152]	; (801161c <__d2b+0xb4>)
 8011584:	f240 310a 	movw	r1, #778	; 0x30a
 8011588:	f000 fb74 	bl	8011c74 <__assert_func>
 801158c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011594:	bb35      	cbnz	r5, 80115e4 <__d2b+0x7c>
 8011596:	2e00      	cmp	r6, #0
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	d028      	beq.n	80115ee <__d2b+0x86>
 801159c:	4668      	mov	r0, sp
 801159e:	9600      	str	r6, [sp, #0]
 80115a0:	f7ff fd82 	bl	80110a8 <__lo0bits>
 80115a4:	9900      	ldr	r1, [sp, #0]
 80115a6:	b300      	cbz	r0, 80115ea <__d2b+0x82>
 80115a8:	9a01      	ldr	r2, [sp, #4]
 80115aa:	f1c0 0320 	rsb	r3, r0, #32
 80115ae:	fa02 f303 	lsl.w	r3, r2, r3
 80115b2:	430b      	orrs	r3, r1
 80115b4:	40c2      	lsrs	r2, r0
 80115b6:	6163      	str	r3, [r4, #20]
 80115b8:	9201      	str	r2, [sp, #4]
 80115ba:	9b01      	ldr	r3, [sp, #4]
 80115bc:	61a3      	str	r3, [r4, #24]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	bf14      	ite	ne
 80115c2:	2202      	movne	r2, #2
 80115c4:	2201      	moveq	r2, #1
 80115c6:	6122      	str	r2, [r4, #16]
 80115c8:	b1d5      	cbz	r5, 8011600 <__d2b+0x98>
 80115ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80115ce:	4405      	add	r5, r0
 80115d0:	f8c9 5000 	str.w	r5, [r9]
 80115d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80115d8:	f8c8 0000 	str.w	r0, [r8]
 80115dc:	4620      	mov	r0, r4
 80115de:	b003      	add	sp, #12
 80115e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80115e8:	e7d5      	b.n	8011596 <__d2b+0x2e>
 80115ea:	6161      	str	r1, [r4, #20]
 80115ec:	e7e5      	b.n	80115ba <__d2b+0x52>
 80115ee:	a801      	add	r0, sp, #4
 80115f0:	f7ff fd5a 	bl	80110a8 <__lo0bits>
 80115f4:	9b01      	ldr	r3, [sp, #4]
 80115f6:	6163      	str	r3, [r4, #20]
 80115f8:	2201      	movs	r2, #1
 80115fa:	6122      	str	r2, [r4, #16]
 80115fc:	3020      	adds	r0, #32
 80115fe:	e7e3      	b.n	80115c8 <__d2b+0x60>
 8011600:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011608:	f8c9 0000 	str.w	r0, [r9]
 801160c:	6918      	ldr	r0, [r3, #16]
 801160e:	f7ff fd2b 	bl	8011068 <__hi0bits>
 8011612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011616:	e7df      	b.n	80115d8 <__d2b+0x70>
 8011618:	0801390b 	.word	0x0801390b
 801161c:	0801391c 	.word	0x0801391c

08011620 <_calloc_r>:
 8011620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011622:	fba1 2402 	umull	r2, r4, r1, r2
 8011626:	b94c      	cbnz	r4, 801163c <_calloc_r+0x1c>
 8011628:	4611      	mov	r1, r2
 801162a:	9201      	str	r2, [sp, #4]
 801162c:	f7fd fe22 	bl	800f274 <_malloc_r>
 8011630:	9a01      	ldr	r2, [sp, #4]
 8011632:	4605      	mov	r5, r0
 8011634:	b930      	cbnz	r0, 8011644 <_calloc_r+0x24>
 8011636:	4628      	mov	r0, r5
 8011638:	b003      	add	sp, #12
 801163a:	bd30      	pop	{r4, r5, pc}
 801163c:	220c      	movs	r2, #12
 801163e:	6002      	str	r2, [r0, #0]
 8011640:	2500      	movs	r5, #0
 8011642:	e7f8      	b.n	8011636 <_calloc_r+0x16>
 8011644:	4621      	mov	r1, r4
 8011646:	f7fd fdec 	bl	800f222 <memset>
 801164a:	e7f4      	b.n	8011636 <_calloc_r+0x16>

0801164c <_free_r>:
 801164c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801164e:	2900      	cmp	r1, #0
 8011650:	d044      	beq.n	80116dc <_free_r+0x90>
 8011652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011656:	9001      	str	r0, [sp, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	f1a1 0404 	sub.w	r4, r1, #4
 801165e:	bfb8      	it	lt
 8011660:	18e4      	addlt	r4, r4, r3
 8011662:	f7ff fc4d 	bl	8010f00 <__malloc_lock>
 8011666:	4a1e      	ldr	r2, [pc, #120]	; (80116e0 <_free_r+0x94>)
 8011668:	9801      	ldr	r0, [sp, #4]
 801166a:	6813      	ldr	r3, [r2, #0]
 801166c:	b933      	cbnz	r3, 801167c <_free_r+0x30>
 801166e:	6063      	str	r3, [r4, #4]
 8011670:	6014      	str	r4, [r2, #0]
 8011672:	b003      	add	sp, #12
 8011674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011678:	f7ff bc48 	b.w	8010f0c <__malloc_unlock>
 801167c:	42a3      	cmp	r3, r4
 801167e:	d908      	bls.n	8011692 <_free_r+0x46>
 8011680:	6825      	ldr	r5, [r4, #0]
 8011682:	1961      	adds	r1, r4, r5
 8011684:	428b      	cmp	r3, r1
 8011686:	bf01      	itttt	eq
 8011688:	6819      	ldreq	r1, [r3, #0]
 801168a:	685b      	ldreq	r3, [r3, #4]
 801168c:	1949      	addeq	r1, r1, r5
 801168e:	6021      	streq	r1, [r4, #0]
 8011690:	e7ed      	b.n	801166e <_free_r+0x22>
 8011692:	461a      	mov	r2, r3
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	b10b      	cbz	r3, 801169c <_free_r+0x50>
 8011698:	42a3      	cmp	r3, r4
 801169a:	d9fa      	bls.n	8011692 <_free_r+0x46>
 801169c:	6811      	ldr	r1, [r2, #0]
 801169e:	1855      	adds	r5, r2, r1
 80116a0:	42a5      	cmp	r5, r4
 80116a2:	d10b      	bne.n	80116bc <_free_r+0x70>
 80116a4:	6824      	ldr	r4, [r4, #0]
 80116a6:	4421      	add	r1, r4
 80116a8:	1854      	adds	r4, r2, r1
 80116aa:	42a3      	cmp	r3, r4
 80116ac:	6011      	str	r1, [r2, #0]
 80116ae:	d1e0      	bne.n	8011672 <_free_r+0x26>
 80116b0:	681c      	ldr	r4, [r3, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	6053      	str	r3, [r2, #4]
 80116b6:	4421      	add	r1, r4
 80116b8:	6011      	str	r1, [r2, #0]
 80116ba:	e7da      	b.n	8011672 <_free_r+0x26>
 80116bc:	d902      	bls.n	80116c4 <_free_r+0x78>
 80116be:	230c      	movs	r3, #12
 80116c0:	6003      	str	r3, [r0, #0]
 80116c2:	e7d6      	b.n	8011672 <_free_r+0x26>
 80116c4:	6825      	ldr	r5, [r4, #0]
 80116c6:	1961      	adds	r1, r4, r5
 80116c8:	428b      	cmp	r3, r1
 80116ca:	bf04      	itt	eq
 80116cc:	6819      	ldreq	r1, [r3, #0]
 80116ce:	685b      	ldreq	r3, [r3, #4]
 80116d0:	6063      	str	r3, [r4, #4]
 80116d2:	bf04      	itt	eq
 80116d4:	1949      	addeq	r1, r1, r5
 80116d6:	6021      	streq	r1, [r4, #0]
 80116d8:	6054      	str	r4, [r2, #4]
 80116da:	e7ca      	b.n	8011672 <_free_r+0x26>
 80116dc:	b003      	add	sp, #12
 80116de:	bd30      	pop	{r4, r5, pc}
 80116e0:	24005408 	.word	0x24005408

080116e4 <__ssputs_r>:
 80116e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e8:	688e      	ldr	r6, [r1, #8]
 80116ea:	429e      	cmp	r6, r3
 80116ec:	4682      	mov	sl, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	4690      	mov	r8, r2
 80116f2:	461f      	mov	r7, r3
 80116f4:	d838      	bhi.n	8011768 <__ssputs_r+0x84>
 80116f6:	898a      	ldrh	r2, [r1, #12]
 80116f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116fc:	d032      	beq.n	8011764 <__ssputs_r+0x80>
 80116fe:	6825      	ldr	r5, [r4, #0]
 8011700:	6909      	ldr	r1, [r1, #16]
 8011702:	eba5 0901 	sub.w	r9, r5, r1
 8011706:	6965      	ldr	r5, [r4, #20]
 8011708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801170c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011710:	3301      	adds	r3, #1
 8011712:	444b      	add	r3, r9
 8011714:	106d      	asrs	r5, r5, #1
 8011716:	429d      	cmp	r5, r3
 8011718:	bf38      	it	cc
 801171a:	461d      	movcc	r5, r3
 801171c:	0553      	lsls	r3, r2, #21
 801171e:	d531      	bpl.n	8011784 <__ssputs_r+0xa0>
 8011720:	4629      	mov	r1, r5
 8011722:	f7fd fda7 	bl	800f274 <_malloc_r>
 8011726:	4606      	mov	r6, r0
 8011728:	b950      	cbnz	r0, 8011740 <__ssputs_r+0x5c>
 801172a:	230c      	movs	r3, #12
 801172c:	f8ca 3000 	str.w	r3, [sl]
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011736:	81a3      	strh	r3, [r4, #12]
 8011738:	f04f 30ff 	mov.w	r0, #4294967295
 801173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011740:	6921      	ldr	r1, [r4, #16]
 8011742:	464a      	mov	r2, r9
 8011744:	f7fd fd5f 	bl	800f206 <memcpy>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	6126      	str	r6, [r4, #16]
 8011756:	6165      	str	r5, [r4, #20]
 8011758:	444e      	add	r6, r9
 801175a:	eba5 0509 	sub.w	r5, r5, r9
 801175e:	6026      	str	r6, [r4, #0]
 8011760:	60a5      	str	r5, [r4, #8]
 8011762:	463e      	mov	r6, r7
 8011764:	42be      	cmp	r6, r7
 8011766:	d900      	bls.n	801176a <__ssputs_r+0x86>
 8011768:	463e      	mov	r6, r7
 801176a:	6820      	ldr	r0, [r4, #0]
 801176c:	4632      	mov	r2, r6
 801176e:	4641      	mov	r1, r8
 8011770:	f000 fae4 	bl	8011d3c <memmove>
 8011774:	68a3      	ldr	r3, [r4, #8]
 8011776:	1b9b      	subs	r3, r3, r6
 8011778:	60a3      	str	r3, [r4, #8]
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	4433      	add	r3, r6
 801177e:	6023      	str	r3, [r4, #0]
 8011780:	2000      	movs	r0, #0
 8011782:	e7db      	b.n	801173c <__ssputs_r+0x58>
 8011784:	462a      	mov	r2, r5
 8011786:	f000 faf3 	bl	8011d70 <_realloc_r>
 801178a:	4606      	mov	r6, r0
 801178c:	2800      	cmp	r0, #0
 801178e:	d1e1      	bne.n	8011754 <__ssputs_r+0x70>
 8011790:	6921      	ldr	r1, [r4, #16]
 8011792:	4650      	mov	r0, sl
 8011794:	f7ff ff5a 	bl	801164c <_free_r>
 8011798:	e7c7      	b.n	801172a <__ssputs_r+0x46>
	...

0801179c <_svfiprintf_r>:
 801179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a0:	4698      	mov	r8, r3
 80117a2:	898b      	ldrh	r3, [r1, #12]
 80117a4:	061b      	lsls	r3, r3, #24
 80117a6:	b09d      	sub	sp, #116	; 0x74
 80117a8:	4607      	mov	r7, r0
 80117aa:	460d      	mov	r5, r1
 80117ac:	4614      	mov	r4, r2
 80117ae:	d50e      	bpl.n	80117ce <_svfiprintf_r+0x32>
 80117b0:	690b      	ldr	r3, [r1, #16]
 80117b2:	b963      	cbnz	r3, 80117ce <_svfiprintf_r+0x32>
 80117b4:	2140      	movs	r1, #64	; 0x40
 80117b6:	f7fd fd5d 	bl	800f274 <_malloc_r>
 80117ba:	6028      	str	r0, [r5, #0]
 80117bc:	6128      	str	r0, [r5, #16]
 80117be:	b920      	cbnz	r0, 80117ca <_svfiprintf_r+0x2e>
 80117c0:	230c      	movs	r3, #12
 80117c2:	603b      	str	r3, [r7, #0]
 80117c4:	f04f 30ff 	mov.w	r0, #4294967295
 80117c8:	e0d1      	b.n	801196e <_svfiprintf_r+0x1d2>
 80117ca:	2340      	movs	r3, #64	; 0x40
 80117cc:	616b      	str	r3, [r5, #20]
 80117ce:	2300      	movs	r3, #0
 80117d0:	9309      	str	r3, [sp, #36]	; 0x24
 80117d2:	2320      	movs	r3, #32
 80117d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80117dc:	2330      	movs	r3, #48	; 0x30
 80117de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011988 <_svfiprintf_r+0x1ec>
 80117e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117e6:	f04f 0901 	mov.w	r9, #1
 80117ea:	4623      	mov	r3, r4
 80117ec:	469a      	mov	sl, r3
 80117ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117f2:	b10a      	cbz	r2, 80117f8 <_svfiprintf_r+0x5c>
 80117f4:	2a25      	cmp	r2, #37	; 0x25
 80117f6:	d1f9      	bne.n	80117ec <_svfiprintf_r+0x50>
 80117f8:	ebba 0b04 	subs.w	fp, sl, r4
 80117fc:	d00b      	beq.n	8011816 <_svfiprintf_r+0x7a>
 80117fe:	465b      	mov	r3, fp
 8011800:	4622      	mov	r2, r4
 8011802:	4629      	mov	r1, r5
 8011804:	4638      	mov	r0, r7
 8011806:	f7ff ff6d 	bl	80116e4 <__ssputs_r>
 801180a:	3001      	adds	r0, #1
 801180c:	f000 80aa 	beq.w	8011964 <_svfiprintf_r+0x1c8>
 8011810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011812:	445a      	add	r2, fp
 8011814:	9209      	str	r2, [sp, #36]	; 0x24
 8011816:	f89a 3000 	ldrb.w	r3, [sl]
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 80a2 	beq.w	8011964 <_svfiprintf_r+0x1c8>
 8011820:	2300      	movs	r3, #0
 8011822:	f04f 32ff 	mov.w	r2, #4294967295
 8011826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801182a:	f10a 0a01 	add.w	sl, sl, #1
 801182e:	9304      	str	r3, [sp, #16]
 8011830:	9307      	str	r3, [sp, #28]
 8011832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011836:	931a      	str	r3, [sp, #104]	; 0x68
 8011838:	4654      	mov	r4, sl
 801183a:	2205      	movs	r2, #5
 801183c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011840:	4851      	ldr	r0, [pc, #324]	; (8011988 <_svfiprintf_r+0x1ec>)
 8011842:	f7ee fd55 	bl	80002f0 <memchr>
 8011846:	9a04      	ldr	r2, [sp, #16]
 8011848:	b9d8      	cbnz	r0, 8011882 <_svfiprintf_r+0xe6>
 801184a:	06d0      	lsls	r0, r2, #27
 801184c:	bf44      	itt	mi
 801184e:	2320      	movmi	r3, #32
 8011850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011854:	0711      	lsls	r1, r2, #28
 8011856:	bf44      	itt	mi
 8011858:	232b      	movmi	r3, #43	; 0x2b
 801185a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801185e:	f89a 3000 	ldrb.w	r3, [sl]
 8011862:	2b2a      	cmp	r3, #42	; 0x2a
 8011864:	d015      	beq.n	8011892 <_svfiprintf_r+0xf6>
 8011866:	9a07      	ldr	r2, [sp, #28]
 8011868:	4654      	mov	r4, sl
 801186a:	2000      	movs	r0, #0
 801186c:	f04f 0c0a 	mov.w	ip, #10
 8011870:	4621      	mov	r1, r4
 8011872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011876:	3b30      	subs	r3, #48	; 0x30
 8011878:	2b09      	cmp	r3, #9
 801187a:	d94e      	bls.n	801191a <_svfiprintf_r+0x17e>
 801187c:	b1b0      	cbz	r0, 80118ac <_svfiprintf_r+0x110>
 801187e:	9207      	str	r2, [sp, #28]
 8011880:	e014      	b.n	80118ac <_svfiprintf_r+0x110>
 8011882:	eba0 0308 	sub.w	r3, r0, r8
 8011886:	fa09 f303 	lsl.w	r3, r9, r3
 801188a:	4313      	orrs	r3, r2
 801188c:	9304      	str	r3, [sp, #16]
 801188e:	46a2      	mov	sl, r4
 8011890:	e7d2      	b.n	8011838 <_svfiprintf_r+0x9c>
 8011892:	9b03      	ldr	r3, [sp, #12]
 8011894:	1d19      	adds	r1, r3, #4
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	9103      	str	r1, [sp, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	bfbb      	ittet	lt
 801189e:	425b      	neglt	r3, r3
 80118a0:	f042 0202 	orrlt.w	r2, r2, #2
 80118a4:	9307      	strge	r3, [sp, #28]
 80118a6:	9307      	strlt	r3, [sp, #28]
 80118a8:	bfb8      	it	lt
 80118aa:	9204      	strlt	r2, [sp, #16]
 80118ac:	7823      	ldrb	r3, [r4, #0]
 80118ae:	2b2e      	cmp	r3, #46	; 0x2e
 80118b0:	d10c      	bne.n	80118cc <_svfiprintf_r+0x130>
 80118b2:	7863      	ldrb	r3, [r4, #1]
 80118b4:	2b2a      	cmp	r3, #42	; 0x2a
 80118b6:	d135      	bne.n	8011924 <_svfiprintf_r+0x188>
 80118b8:	9b03      	ldr	r3, [sp, #12]
 80118ba:	1d1a      	adds	r2, r3, #4
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	9203      	str	r2, [sp, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	bfb8      	it	lt
 80118c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80118c8:	3402      	adds	r4, #2
 80118ca:	9305      	str	r3, [sp, #20]
 80118cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011998 <_svfiprintf_r+0x1fc>
 80118d0:	7821      	ldrb	r1, [r4, #0]
 80118d2:	2203      	movs	r2, #3
 80118d4:	4650      	mov	r0, sl
 80118d6:	f7ee fd0b 	bl	80002f0 <memchr>
 80118da:	b140      	cbz	r0, 80118ee <_svfiprintf_r+0x152>
 80118dc:	2340      	movs	r3, #64	; 0x40
 80118de:	eba0 000a 	sub.w	r0, r0, sl
 80118e2:	fa03 f000 	lsl.w	r0, r3, r0
 80118e6:	9b04      	ldr	r3, [sp, #16]
 80118e8:	4303      	orrs	r3, r0
 80118ea:	3401      	adds	r4, #1
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118f2:	4826      	ldr	r0, [pc, #152]	; (801198c <_svfiprintf_r+0x1f0>)
 80118f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118f8:	2206      	movs	r2, #6
 80118fa:	f7ee fcf9 	bl	80002f0 <memchr>
 80118fe:	2800      	cmp	r0, #0
 8011900:	d038      	beq.n	8011974 <_svfiprintf_r+0x1d8>
 8011902:	4b23      	ldr	r3, [pc, #140]	; (8011990 <_svfiprintf_r+0x1f4>)
 8011904:	bb1b      	cbnz	r3, 801194e <_svfiprintf_r+0x1b2>
 8011906:	9b03      	ldr	r3, [sp, #12]
 8011908:	3307      	adds	r3, #7
 801190a:	f023 0307 	bic.w	r3, r3, #7
 801190e:	3308      	adds	r3, #8
 8011910:	9303      	str	r3, [sp, #12]
 8011912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011914:	4433      	add	r3, r6
 8011916:	9309      	str	r3, [sp, #36]	; 0x24
 8011918:	e767      	b.n	80117ea <_svfiprintf_r+0x4e>
 801191a:	fb0c 3202 	mla	r2, ip, r2, r3
 801191e:	460c      	mov	r4, r1
 8011920:	2001      	movs	r0, #1
 8011922:	e7a5      	b.n	8011870 <_svfiprintf_r+0xd4>
 8011924:	2300      	movs	r3, #0
 8011926:	3401      	adds	r4, #1
 8011928:	9305      	str	r3, [sp, #20]
 801192a:	4619      	mov	r1, r3
 801192c:	f04f 0c0a 	mov.w	ip, #10
 8011930:	4620      	mov	r0, r4
 8011932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011936:	3a30      	subs	r2, #48	; 0x30
 8011938:	2a09      	cmp	r2, #9
 801193a:	d903      	bls.n	8011944 <_svfiprintf_r+0x1a8>
 801193c:	2b00      	cmp	r3, #0
 801193e:	d0c5      	beq.n	80118cc <_svfiprintf_r+0x130>
 8011940:	9105      	str	r1, [sp, #20]
 8011942:	e7c3      	b.n	80118cc <_svfiprintf_r+0x130>
 8011944:	fb0c 2101 	mla	r1, ip, r1, r2
 8011948:	4604      	mov	r4, r0
 801194a:	2301      	movs	r3, #1
 801194c:	e7f0      	b.n	8011930 <_svfiprintf_r+0x194>
 801194e:	ab03      	add	r3, sp, #12
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	462a      	mov	r2, r5
 8011954:	4b0f      	ldr	r3, [pc, #60]	; (8011994 <_svfiprintf_r+0x1f8>)
 8011956:	a904      	add	r1, sp, #16
 8011958:	4638      	mov	r0, r7
 801195a:	f7fd fd91 	bl	800f480 <_printf_float>
 801195e:	1c42      	adds	r2, r0, #1
 8011960:	4606      	mov	r6, r0
 8011962:	d1d6      	bne.n	8011912 <_svfiprintf_r+0x176>
 8011964:	89ab      	ldrh	r3, [r5, #12]
 8011966:	065b      	lsls	r3, r3, #25
 8011968:	f53f af2c 	bmi.w	80117c4 <_svfiprintf_r+0x28>
 801196c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801196e:	b01d      	add	sp, #116	; 0x74
 8011970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011974:	ab03      	add	r3, sp, #12
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	462a      	mov	r2, r5
 801197a:	4b06      	ldr	r3, [pc, #24]	; (8011994 <_svfiprintf_r+0x1f8>)
 801197c:	a904      	add	r1, sp, #16
 801197e:	4638      	mov	r0, r7
 8011980:	f7fe f80a 	bl	800f998 <_printf_i>
 8011984:	e7eb      	b.n	801195e <_svfiprintf_r+0x1c2>
 8011986:	bf00      	nop
 8011988:	08013a74 	.word	0x08013a74
 801198c:	08013a7e 	.word	0x08013a7e
 8011990:	0800f481 	.word	0x0800f481
 8011994:	080116e5 	.word	0x080116e5
 8011998:	08013a7a 	.word	0x08013a7a

0801199c <__sfputc_r>:
 801199c:	6893      	ldr	r3, [r2, #8]
 801199e:	3b01      	subs	r3, #1
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	b410      	push	{r4}
 80119a4:	6093      	str	r3, [r2, #8]
 80119a6:	da08      	bge.n	80119ba <__sfputc_r+0x1e>
 80119a8:	6994      	ldr	r4, [r2, #24]
 80119aa:	42a3      	cmp	r3, r4
 80119ac:	db01      	blt.n	80119b2 <__sfputc_r+0x16>
 80119ae:	290a      	cmp	r1, #10
 80119b0:	d103      	bne.n	80119ba <__sfputc_r+0x1e>
 80119b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b6:	f7fe ba81 	b.w	800febc <__swbuf_r>
 80119ba:	6813      	ldr	r3, [r2, #0]
 80119bc:	1c58      	adds	r0, r3, #1
 80119be:	6010      	str	r0, [r2, #0]
 80119c0:	7019      	strb	r1, [r3, #0]
 80119c2:	4608      	mov	r0, r1
 80119c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <__sfputs_r>:
 80119ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119cc:	4606      	mov	r6, r0
 80119ce:	460f      	mov	r7, r1
 80119d0:	4614      	mov	r4, r2
 80119d2:	18d5      	adds	r5, r2, r3
 80119d4:	42ac      	cmp	r4, r5
 80119d6:	d101      	bne.n	80119dc <__sfputs_r+0x12>
 80119d8:	2000      	movs	r0, #0
 80119da:	e007      	b.n	80119ec <__sfputs_r+0x22>
 80119dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e0:	463a      	mov	r2, r7
 80119e2:	4630      	mov	r0, r6
 80119e4:	f7ff ffda 	bl	801199c <__sfputc_r>
 80119e8:	1c43      	adds	r3, r0, #1
 80119ea:	d1f3      	bne.n	80119d4 <__sfputs_r+0xa>
 80119ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119f0 <_vfiprintf_r>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	460d      	mov	r5, r1
 80119f6:	b09d      	sub	sp, #116	; 0x74
 80119f8:	4614      	mov	r4, r2
 80119fa:	4698      	mov	r8, r3
 80119fc:	4606      	mov	r6, r0
 80119fe:	b118      	cbz	r0, 8011a08 <_vfiprintf_r+0x18>
 8011a00:	6983      	ldr	r3, [r0, #24]
 8011a02:	b90b      	cbnz	r3, 8011a08 <_vfiprintf_r+0x18>
 8011a04:	f7fd fb3a 	bl	800f07c <__sinit>
 8011a08:	4b89      	ldr	r3, [pc, #548]	; (8011c30 <_vfiprintf_r+0x240>)
 8011a0a:	429d      	cmp	r5, r3
 8011a0c:	d11b      	bne.n	8011a46 <_vfiprintf_r+0x56>
 8011a0e:	6875      	ldr	r5, [r6, #4]
 8011a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a12:	07d9      	lsls	r1, r3, #31
 8011a14:	d405      	bmi.n	8011a22 <_vfiprintf_r+0x32>
 8011a16:	89ab      	ldrh	r3, [r5, #12]
 8011a18:	059a      	lsls	r2, r3, #22
 8011a1a:	d402      	bmi.n	8011a22 <_vfiprintf_r+0x32>
 8011a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a1e:	f7fd fbf0 	bl	800f202 <__retarget_lock_acquire_recursive>
 8011a22:	89ab      	ldrh	r3, [r5, #12]
 8011a24:	071b      	lsls	r3, r3, #28
 8011a26:	d501      	bpl.n	8011a2c <_vfiprintf_r+0x3c>
 8011a28:	692b      	ldr	r3, [r5, #16]
 8011a2a:	b9eb      	cbnz	r3, 8011a68 <_vfiprintf_r+0x78>
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	4630      	mov	r0, r6
 8011a30:	f7fe faa8 	bl	800ff84 <__swsetup_r>
 8011a34:	b1c0      	cbz	r0, 8011a68 <_vfiprintf_r+0x78>
 8011a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a38:	07dc      	lsls	r4, r3, #31
 8011a3a:	d50e      	bpl.n	8011a5a <_vfiprintf_r+0x6a>
 8011a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a40:	b01d      	add	sp, #116	; 0x74
 8011a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a46:	4b7b      	ldr	r3, [pc, #492]	; (8011c34 <_vfiprintf_r+0x244>)
 8011a48:	429d      	cmp	r5, r3
 8011a4a:	d101      	bne.n	8011a50 <_vfiprintf_r+0x60>
 8011a4c:	68b5      	ldr	r5, [r6, #8]
 8011a4e:	e7df      	b.n	8011a10 <_vfiprintf_r+0x20>
 8011a50:	4b79      	ldr	r3, [pc, #484]	; (8011c38 <_vfiprintf_r+0x248>)
 8011a52:	429d      	cmp	r5, r3
 8011a54:	bf08      	it	eq
 8011a56:	68f5      	ldreq	r5, [r6, #12]
 8011a58:	e7da      	b.n	8011a10 <_vfiprintf_r+0x20>
 8011a5a:	89ab      	ldrh	r3, [r5, #12]
 8011a5c:	0598      	lsls	r0, r3, #22
 8011a5e:	d4ed      	bmi.n	8011a3c <_vfiprintf_r+0x4c>
 8011a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a62:	f7fd fbcf 	bl	800f204 <__retarget_lock_release_recursive>
 8011a66:	e7e9      	b.n	8011a3c <_vfiprintf_r+0x4c>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a6c:	2320      	movs	r3, #32
 8011a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a76:	2330      	movs	r3, #48	; 0x30
 8011a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c3c <_vfiprintf_r+0x24c>
 8011a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a80:	f04f 0901 	mov.w	r9, #1
 8011a84:	4623      	mov	r3, r4
 8011a86:	469a      	mov	sl, r3
 8011a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a8c:	b10a      	cbz	r2, 8011a92 <_vfiprintf_r+0xa2>
 8011a8e:	2a25      	cmp	r2, #37	; 0x25
 8011a90:	d1f9      	bne.n	8011a86 <_vfiprintf_r+0x96>
 8011a92:	ebba 0b04 	subs.w	fp, sl, r4
 8011a96:	d00b      	beq.n	8011ab0 <_vfiprintf_r+0xc0>
 8011a98:	465b      	mov	r3, fp
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f7ff ff93 	bl	80119ca <__sfputs_r>
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	f000 80aa 	beq.w	8011bfe <_vfiprintf_r+0x20e>
 8011aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aac:	445a      	add	r2, fp
 8011aae:	9209      	str	r2, [sp, #36]	; 0x24
 8011ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f000 80a2 	beq.w	8011bfe <_vfiprintf_r+0x20e>
 8011aba:	2300      	movs	r3, #0
 8011abc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ac4:	f10a 0a01 	add.w	sl, sl, #1
 8011ac8:	9304      	str	r3, [sp, #16]
 8011aca:	9307      	str	r3, [sp, #28]
 8011acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8011ad2:	4654      	mov	r4, sl
 8011ad4:	2205      	movs	r2, #5
 8011ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ada:	4858      	ldr	r0, [pc, #352]	; (8011c3c <_vfiprintf_r+0x24c>)
 8011adc:	f7ee fc08 	bl	80002f0 <memchr>
 8011ae0:	9a04      	ldr	r2, [sp, #16]
 8011ae2:	b9d8      	cbnz	r0, 8011b1c <_vfiprintf_r+0x12c>
 8011ae4:	06d1      	lsls	r1, r2, #27
 8011ae6:	bf44      	itt	mi
 8011ae8:	2320      	movmi	r3, #32
 8011aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aee:	0713      	lsls	r3, r2, #28
 8011af0:	bf44      	itt	mi
 8011af2:	232b      	movmi	r3, #43	; 0x2b
 8011af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011af8:	f89a 3000 	ldrb.w	r3, [sl]
 8011afc:	2b2a      	cmp	r3, #42	; 0x2a
 8011afe:	d015      	beq.n	8011b2c <_vfiprintf_r+0x13c>
 8011b00:	9a07      	ldr	r2, [sp, #28]
 8011b02:	4654      	mov	r4, sl
 8011b04:	2000      	movs	r0, #0
 8011b06:	f04f 0c0a 	mov.w	ip, #10
 8011b0a:	4621      	mov	r1, r4
 8011b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b10:	3b30      	subs	r3, #48	; 0x30
 8011b12:	2b09      	cmp	r3, #9
 8011b14:	d94e      	bls.n	8011bb4 <_vfiprintf_r+0x1c4>
 8011b16:	b1b0      	cbz	r0, 8011b46 <_vfiprintf_r+0x156>
 8011b18:	9207      	str	r2, [sp, #28]
 8011b1a:	e014      	b.n	8011b46 <_vfiprintf_r+0x156>
 8011b1c:	eba0 0308 	sub.w	r3, r0, r8
 8011b20:	fa09 f303 	lsl.w	r3, r9, r3
 8011b24:	4313      	orrs	r3, r2
 8011b26:	9304      	str	r3, [sp, #16]
 8011b28:	46a2      	mov	sl, r4
 8011b2a:	e7d2      	b.n	8011ad2 <_vfiprintf_r+0xe2>
 8011b2c:	9b03      	ldr	r3, [sp, #12]
 8011b2e:	1d19      	adds	r1, r3, #4
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	9103      	str	r1, [sp, #12]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	bfbb      	ittet	lt
 8011b38:	425b      	neglt	r3, r3
 8011b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b3e:	9307      	strge	r3, [sp, #28]
 8011b40:	9307      	strlt	r3, [sp, #28]
 8011b42:	bfb8      	it	lt
 8011b44:	9204      	strlt	r2, [sp, #16]
 8011b46:	7823      	ldrb	r3, [r4, #0]
 8011b48:	2b2e      	cmp	r3, #46	; 0x2e
 8011b4a:	d10c      	bne.n	8011b66 <_vfiprintf_r+0x176>
 8011b4c:	7863      	ldrb	r3, [r4, #1]
 8011b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b50:	d135      	bne.n	8011bbe <_vfiprintf_r+0x1ce>
 8011b52:	9b03      	ldr	r3, [sp, #12]
 8011b54:	1d1a      	adds	r2, r3, #4
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	9203      	str	r2, [sp, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfb8      	it	lt
 8011b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b62:	3402      	adds	r4, #2
 8011b64:	9305      	str	r3, [sp, #20]
 8011b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c4c <_vfiprintf_r+0x25c>
 8011b6a:	7821      	ldrb	r1, [r4, #0]
 8011b6c:	2203      	movs	r2, #3
 8011b6e:	4650      	mov	r0, sl
 8011b70:	f7ee fbbe 	bl	80002f0 <memchr>
 8011b74:	b140      	cbz	r0, 8011b88 <_vfiprintf_r+0x198>
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	eba0 000a 	sub.w	r0, r0, sl
 8011b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8011b80:	9b04      	ldr	r3, [sp, #16]
 8011b82:	4303      	orrs	r3, r0
 8011b84:	3401      	adds	r4, #1
 8011b86:	9304      	str	r3, [sp, #16]
 8011b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8c:	482c      	ldr	r0, [pc, #176]	; (8011c40 <_vfiprintf_r+0x250>)
 8011b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b92:	2206      	movs	r2, #6
 8011b94:	f7ee fbac 	bl	80002f0 <memchr>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d03f      	beq.n	8011c1c <_vfiprintf_r+0x22c>
 8011b9c:	4b29      	ldr	r3, [pc, #164]	; (8011c44 <_vfiprintf_r+0x254>)
 8011b9e:	bb1b      	cbnz	r3, 8011be8 <_vfiprintf_r+0x1f8>
 8011ba0:	9b03      	ldr	r3, [sp, #12]
 8011ba2:	3307      	adds	r3, #7
 8011ba4:	f023 0307 	bic.w	r3, r3, #7
 8011ba8:	3308      	adds	r3, #8
 8011baa:	9303      	str	r3, [sp, #12]
 8011bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bae:	443b      	add	r3, r7
 8011bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8011bb2:	e767      	b.n	8011a84 <_vfiprintf_r+0x94>
 8011bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bb8:	460c      	mov	r4, r1
 8011bba:	2001      	movs	r0, #1
 8011bbc:	e7a5      	b.n	8011b0a <_vfiprintf_r+0x11a>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	3401      	adds	r4, #1
 8011bc2:	9305      	str	r3, [sp, #20]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	f04f 0c0a 	mov.w	ip, #10
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bd0:	3a30      	subs	r2, #48	; 0x30
 8011bd2:	2a09      	cmp	r2, #9
 8011bd4:	d903      	bls.n	8011bde <_vfiprintf_r+0x1ee>
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0c5      	beq.n	8011b66 <_vfiprintf_r+0x176>
 8011bda:	9105      	str	r1, [sp, #20]
 8011bdc:	e7c3      	b.n	8011b66 <_vfiprintf_r+0x176>
 8011bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8011be2:	4604      	mov	r4, r0
 8011be4:	2301      	movs	r3, #1
 8011be6:	e7f0      	b.n	8011bca <_vfiprintf_r+0x1da>
 8011be8:	ab03      	add	r3, sp, #12
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	462a      	mov	r2, r5
 8011bee:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <_vfiprintf_r+0x258>)
 8011bf0:	a904      	add	r1, sp, #16
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f7fd fc44 	bl	800f480 <_printf_float>
 8011bf8:	4607      	mov	r7, r0
 8011bfa:	1c78      	adds	r0, r7, #1
 8011bfc:	d1d6      	bne.n	8011bac <_vfiprintf_r+0x1bc>
 8011bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c00:	07d9      	lsls	r1, r3, #31
 8011c02:	d405      	bmi.n	8011c10 <_vfiprintf_r+0x220>
 8011c04:	89ab      	ldrh	r3, [r5, #12]
 8011c06:	059a      	lsls	r2, r3, #22
 8011c08:	d402      	bmi.n	8011c10 <_vfiprintf_r+0x220>
 8011c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c0c:	f7fd fafa 	bl	800f204 <__retarget_lock_release_recursive>
 8011c10:	89ab      	ldrh	r3, [r5, #12]
 8011c12:	065b      	lsls	r3, r3, #25
 8011c14:	f53f af12 	bmi.w	8011a3c <_vfiprintf_r+0x4c>
 8011c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c1a:	e711      	b.n	8011a40 <_vfiprintf_r+0x50>
 8011c1c:	ab03      	add	r3, sp, #12
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	462a      	mov	r2, r5
 8011c22:	4b09      	ldr	r3, [pc, #36]	; (8011c48 <_vfiprintf_r+0x258>)
 8011c24:	a904      	add	r1, sp, #16
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7fd feb6 	bl	800f998 <_printf_i>
 8011c2c:	e7e4      	b.n	8011bf8 <_vfiprintf_r+0x208>
 8011c2e:	bf00      	nop
 8011c30:	08013814 	.word	0x08013814
 8011c34:	08013834 	.word	0x08013834
 8011c38:	080137f4 	.word	0x080137f4
 8011c3c:	08013a74 	.word	0x08013a74
 8011c40:	08013a7e 	.word	0x08013a7e
 8011c44:	0800f481 	.word	0x0800f481
 8011c48:	080119cb 	.word	0x080119cb
 8011c4c:	08013a7a 	.word	0x08013a7a

08011c50 <_read_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4d07      	ldr	r5, [pc, #28]	; (8011c70 <_read_r+0x20>)
 8011c54:	4604      	mov	r4, r0
 8011c56:	4608      	mov	r0, r1
 8011c58:	4611      	mov	r1, r2
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	602a      	str	r2, [r5, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f7f3 f999 	bl	8004f96 <_read>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_read_r+0x1e>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_read_r+0x1e>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	24005410 	.word	0x24005410

08011c74 <__assert_func>:
 8011c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c76:	4614      	mov	r4, r2
 8011c78:	461a      	mov	r2, r3
 8011c7a:	4b09      	ldr	r3, [pc, #36]	; (8011ca0 <__assert_func+0x2c>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4605      	mov	r5, r0
 8011c80:	68d8      	ldr	r0, [r3, #12]
 8011c82:	b14c      	cbz	r4, 8011c98 <__assert_func+0x24>
 8011c84:	4b07      	ldr	r3, [pc, #28]	; (8011ca4 <__assert_func+0x30>)
 8011c86:	9100      	str	r1, [sp, #0]
 8011c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c8c:	4906      	ldr	r1, [pc, #24]	; (8011ca8 <__assert_func+0x34>)
 8011c8e:	462b      	mov	r3, r5
 8011c90:	f000 f80e 	bl	8011cb0 <fiprintf>
 8011c94:	f000 f8a8 	bl	8011de8 <abort>
 8011c98:	4b04      	ldr	r3, [pc, #16]	; (8011cac <__assert_func+0x38>)
 8011c9a:	461c      	mov	r4, r3
 8011c9c:	e7f3      	b.n	8011c86 <__assert_func+0x12>
 8011c9e:	bf00      	nop
 8011ca0:	2400001c 	.word	0x2400001c
 8011ca4:	08013a85 	.word	0x08013a85
 8011ca8:	08013a92 	.word	0x08013a92
 8011cac:	08013ac0 	.word	0x08013ac0

08011cb0 <fiprintf>:
 8011cb0:	b40e      	push	{r1, r2, r3}
 8011cb2:	b503      	push	{r0, r1, lr}
 8011cb4:	4601      	mov	r1, r0
 8011cb6:	ab03      	add	r3, sp, #12
 8011cb8:	4805      	ldr	r0, [pc, #20]	; (8011cd0 <fiprintf+0x20>)
 8011cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cbe:	6800      	ldr	r0, [r0, #0]
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	f7ff fe95 	bl	80119f0 <_vfiprintf_r>
 8011cc6:	b002      	add	sp, #8
 8011cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ccc:	b003      	add	sp, #12
 8011cce:	4770      	bx	lr
 8011cd0:	2400001c 	.word	0x2400001c

08011cd4 <_fstat_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d07      	ldr	r5, [pc, #28]	; (8011cf4 <_fstat_r+0x20>)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4604      	mov	r4, r0
 8011cdc:	4608      	mov	r0, r1
 8011cde:	4611      	mov	r1, r2
 8011ce0:	602b      	str	r3, [r5, #0]
 8011ce2:	f7f3 f99d 	bl	8005020 <_fstat>
 8011ce6:	1c43      	adds	r3, r0, #1
 8011ce8:	d102      	bne.n	8011cf0 <_fstat_r+0x1c>
 8011cea:	682b      	ldr	r3, [r5, #0]
 8011cec:	b103      	cbz	r3, 8011cf0 <_fstat_r+0x1c>
 8011cee:	6023      	str	r3, [r4, #0]
 8011cf0:	bd38      	pop	{r3, r4, r5, pc}
 8011cf2:	bf00      	nop
 8011cf4:	24005410 	.word	0x24005410

08011cf8 <_isatty_r>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	4d06      	ldr	r5, [pc, #24]	; (8011d14 <_isatty_r+0x1c>)
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4608      	mov	r0, r1
 8011d02:	602b      	str	r3, [r5, #0]
 8011d04:	f7f3 f99c 	bl	8005040 <_isatty>
 8011d08:	1c43      	adds	r3, r0, #1
 8011d0a:	d102      	bne.n	8011d12 <_isatty_r+0x1a>
 8011d0c:	682b      	ldr	r3, [r5, #0]
 8011d0e:	b103      	cbz	r3, 8011d12 <_isatty_r+0x1a>
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	bd38      	pop	{r3, r4, r5, pc}
 8011d14:	24005410 	.word	0x24005410

08011d18 <__ascii_mbtowc>:
 8011d18:	b082      	sub	sp, #8
 8011d1a:	b901      	cbnz	r1, 8011d1e <__ascii_mbtowc+0x6>
 8011d1c:	a901      	add	r1, sp, #4
 8011d1e:	b142      	cbz	r2, 8011d32 <__ascii_mbtowc+0x1a>
 8011d20:	b14b      	cbz	r3, 8011d36 <__ascii_mbtowc+0x1e>
 8011d22:	7813      	ldrb	r3, [r2, #0]
 8011d24:	600b      	str	r3, [r1, #0]
 8011d26:	7812      	ldrb	r2, [r2, #0]
 8011d28:	1e10      	subs	r0, r2, #0
 8011d2a:	bf18      	it	ne
 8011d2c:	2001      	movne	r0, #1
 8011d2e:	b002      	add	sp, #8
 8011d30:	4770      	bx	lr
 8011d32:	4610      	mov	r0, r2
 8011d34:	e7fb      	b.n	8011d2e <__ascii_mbtowc+0x16>
 8011d36:	f06f 0001 	mvn.w	r0, #1
 8011d3a:	e7f8      	b.n	8011d2e <__ascii_mbtowc+0x16>

08011d3c <memmove>:
 8011d3c:	4288      	cmp	r0, r1
 8011d3e:	b510      	push	{r4, lr}
 8011d40:	eb01 0402 	add.w	r4, r1, r2
 8011d44:	d902      	bls.n	8011d4c <memmove+0x10>
 8011d46:	4284      	cmp	r4, r0
 8011d48:	4623      	mov	r3, r4
 8011d4a:	d807      	bhi.n	8011d5c <memmove+0x20>
 8011d4c:	1e43      	subs	r3, r0, #1
 8011d4e:	42a1      	cmp	r1, r4
 8011d50:	d008      	beq.n	8011d64 <memmove+0x28>
 8011d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d5a:	e7f8      	b.n	8011d4e <memmove+0x12>
 8011d5c:	4402      	add	r2, r0
 8011d5e:	4601      	mov	r1, r0
 8011d60:	428a      	cmp	r2, r1
 8011d62:	d100      	bne.n	8011d66 <memmove+0x2a>
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d6e:	e7f7      	b.n	8011d60 <memmove+0x24>

08011d70 <_realloc_r>:
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	4680      	mov	r8, r0
 8011d76:	4614      	mov	r4, r2
 8011d78:	460e      	mov	r6, r1
 8011d7a:	b921      	cbnz	r1, 8011d86 <_realloc_r+0x16>
 8011d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d80:	4611      	mov	r1, r2
 8011d82:	f7fd ba77 	b.w	800f274 <_malloc_r>
 8011d86:	b92a      	cbnz	r2, 8011d94 <_realloc_r+0x24>
 8011d88:	f7ff fc60 	bl	801164c <_free_r>
 8011d8c:	4625      	mov	r5, r4
 8011d8e:	4628      	mov	r0, r5
 8011d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d94:	f000 f82f 	bl	8011df6 <_malloc_usable_size_r>
 8011d98:	4284      	cmp	r4, r0
 8011d9a:	4607      	mov	r7, r0
 8011d9c:	d802      	bhi.n	8011da4 <_realloc_r+0x34>
 8011d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011da2:	d812      	bhi.n	8011dca <_realloc_r+0x5a>
 8011da4:	4621      	mov	r1, r4
 8011da6:	4640      	mov	r0, r8
 8011da8:	f7fd fa64 	bl	800f274 <_malloc_r>
 8011dac:	4605      	mov	r5, r0
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d0ed      	beq.n	8011d8e <_realloc_r+0x1e>
 8011db2:	42bc      	cmp	r4, r7
 8011db4:	4622      	mov	r2, r4
 8011db6:	4631      	mov	r1, r6
 8011db8:	bf28      	it	cs
 8011dba:	463a      	movcs	r2, r7
 8011dbc:	f7fd fa23 	bl	800f206 <memcpy>
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	4640      	mov	r0, r8
 8011dc4:	f7ff fc42 	bl	801164c <_free_r>
 8011dc8:	e7e1      	b.n	8011d8e <_realloc_r+0x1e>
 8011dca:	4635      	mov	r5, r6
 8011dcc:	e7df      	b.n	8011d8e <_realloc_r+0x1e>

08011dce <__ascii_wctomb>:
 8011dce:	b149      	cbz	r1, 8011de4 <__ascii_wctomb+0x16>
 8011dd0:	2aff      	cmp	r2, #255	; 0xff
 8011dd2:	bf85      	ittet	hi
 8011dd4:	238a      	movhi	r3, #138	; 0x8a
 8011dd6:	6003      	strhi	r3, [r0, #0]
 8011dd8:	700a      	strbls	r2, [r1, #0]
 8011dda:	f04f 30ff 	movhi.w	r0, #4294967295
 8011dde:	bf98      	it	ls
 8011de0:	2001      	movls	r0, #1
 8011de2:	4770      	bx	lr
 8011de4:	4608      	mov	r0, r1
 8011de6:	4770      	bx	lr

08011de8 <abort>:
 8011de8:	b508      	push	{r3, lr}
 8011dea:	2006      	movs	r0, #6
 8011dec:	f000 f834 	bl	8011e58 <raise>
 8011df0:	2001      	movs	r0, #1
 8011df2:	f7f3 f8c6 	bl	8004f82 <_exit>

08011df6 <_malloc_usable_size_r>:
 8011df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dfa:	1f18      	subs	r0, r3, #4
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	bfbc      	itt	lt
 8011e00:	580b      	ldrlt	r3, [r1, r0]
 8011e02:	18c0      	addlt	r0, r0, r3
 8011e04:	4770      	bx	lr

08011e06 <_raise_r>:
 8011e06:	291f      	cmp	r1, #31
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	d904      	bls.n	8011e1a <_raise_r+0x14>
 8011e10:	2316      	movs	r3, #22
 8011e12:	6003      	str	r3, [r0, #0]
 8011e14:	f04f 30ff 	mov.w	r0, #4294967295
 8011e18:	bd38      	pop	{r3, r4, r5, pc}
 8011e1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e1c:	b112      	cbz	r2, 8011e24 <_raise_r+0x1e>
 8011e1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e22:	b94b      	cbnz	r3, 8011e38 <_raise_r+0x32>
 8011e24:	4620      	mov	r0, r4
 8011e26:	f000 f831 	bl	8011e8c <_getpid_r>
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4601      	mov	r1, r0
 8011e2e:	4620      	mov	r0, r4
 8011e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e34:	f000 b818 	b.w	8011e68 <_kill_r>
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d00a      	beq.n	8011e52 <_raise_r+0x4c>
 8011e3c:	1c59      	adds	r1, r3, #1
 8011e3e:	d103      	bne.n	8011e48 <_raise_r+0x42>
 8011e40:	2316      	movs	r3, #22
 8011e42:	6003      	str	r3, [r0, #0]
 8011e44:	2001      	movs	r0, #1
 8011e46:	e7e7      	b.n	8011e18 <_raise_r+0x12>
 8011e48:	2400      	movs	r4, #0
 8011e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e4e:	4628      	mov	r0, r5
 8011e50:	4798      	blx	r3
 8011e52:	2000      	movs	r0, #0
 8011e54:	e7e0      	b.n	8011e18 <_raise_r+0x12>
	...

08011e58 <raise>:
 8011e58:	4b02      	ldr	r3, [pc, #8]	; (8011e64 <raise+0xc>)
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f7ff bfd2 	b.w	8011e06 <_raise_r>
 8011e62:	bf00      	nop
 8011e64:	2400001c 	.word	0x2400001c

08011e68 <_kill_r>:
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	4d07      	ldr	r5, [pc, #28]	; (8011e88 <_kill_r+0x20>)
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	4604      	mov	r4, r0
 8011e70:	4608      	mov	r0, r1
 8011e72:	4611      	mov	r1, r2
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	f7f3 f874 	bl	8004f62 <_kill>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d102      	bne.n	8011e84 <_kill_r+0x1c>
 8011e7e:	682b      	ldr	r3, [r5, #0]
 8011e80:	b103      	cbz	r3, 8011e84 <_kill_r+0x1c>
 8011e82:	6023      	str	r3, [r4, #0]
 8011e84:	bd38      	pop	{r3, r4, r5, pc}
 8011e86:	bf00      	nop
 8011e88:	24005410 	.word	0x24005410

08011e8c <_getpid_r>:
 8011e8c:	f7f3 b861 	b.w	8004f52 <_getpid>

08011e90 <cos>:
 8011e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e92:	eeb0 7b40 	vmov.f64	d7, d0
 8011e96:	ee17 3a90 	vmov	r3, s15
 8011e9a:	4a21      	ldr	r2, [pc, #132]	; (8011f20 <cos+0x90>)
 8011e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	dc06      	bgt.n	8011eb2 <cos+0x22>
 8011ea4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011f18 <cos+0x88>
 8011ea8:	b005      	add	sp, #20
 8011eaa:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eae:	f000 ba93 	b.w	80123d8 <__kernel_cos>
 8011eb2:	4a1c      	ldr	r2, [pc, #112]	; (8011f24 <cos+0x94>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	dd04      	ble.n	8011ec2 <cos+0x32>
 8011eb8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011ebc:	b005      	add	sp, #20
 8011ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ec2:	4668      	mov	r0, sp
 8011ec4:	f000 f944 	bl	8012150 <__ieee754_rem_pio2>
 8011ec8:	f000 0003 	and.w	r0, r0, #3
 8011ecc:	2801      	cmp	r0, #1
 8011ece:	d009      	beq.n	8011ee4 <cos+0x54>
 8011ed0:	2802      	cmp	r0, #2
 8011ed2:	d010      	beq.n	8011ef6 <cos+0x66>
 8011ed4:	b9b0      	cbnz	r0, 8011f04 <cos+0x74>
 8011ed6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011eda:	ed9d 0b00 	vldr	d0, [sp]
 8011ede:	f000 fa7b 	bl	80123d8 <__kernel_cos>
 8011ee2:	e7eb      	b.n	8011ebc <cos+0x2c>
 8011ee4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ee8:	ed9d 0b00 	vldr	d0, [sp]
 8011eec:	f000 fd78 	bl	80129e0 <__kernel_sin>
 8011ef0:	eeb1 0b40 	vneg.f64	d0, d0
 8011ef4:	e7e2      	b.n	8011ebc <cos+0x2c>
 8011ef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011efa:	ed9d 0b00 	vldr	d0, [sp]
 8011efe:	f000 fa6b 	bl	80123d8 <__kernel_cos>
 8011f02:	e7f5      	b.n	8011ef0 <cos+0x60>
 8011f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f08:	ed9d 0b00 	vldr	d0, [sp]
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	f000 fd67 	bl	80129e0 <__kernel_sin>
 8011f12:	e7d3      	b.n	8011ebc <cos+0x2c>
 8011f14:	f3af 8000 	nop.w
	...
 8011f20:	3fe921fb 	.word	0x3fe921fb
 8011f24:	7fefffff 	.word	0x7fefffff

08011f28 <sin>:
 8011f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8011f2e:	ee17 3a90 	vmov	r3, s15
 8011f32:	4a21      	ldr	r2, [pc, #132]	; (8011fb8 <sin+0x90>)
 8011f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	dc07      	bgt.n	8011f4c <sin+0x24>
 8011f3c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011fb0 <sin+0x88>
 8011f40:	2000      	movs	r0, #0
 8011f42:	b005      	add	sp, #20
 8011f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f48:	f000 bd4a 	b.w	80129e0 <__kernel_sin>
 8011f4c:	4a1b      	ldr	r2, [pc, #108]	; (8011fbc <sin+0x94>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	dd04      	ble.n	8011f5c <sin+0x34>
 8011f52:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011f56:	b005      	add	sp, #20
 8011f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f5c:	4668      	mov	r0, sp
 8011f5e:	f000 f8f7 	bl	8012150 <__ieee754_rem_pio2>
 8011f62:	f000 0003 	and.w	r0, r0, #3
 8011f66:	2801      	cmp	r0, #1
 8011f68:	d00a      	beq.n	8011f80 <sin+0x58>
 8011f6a:	2802      	cmp	r0, #2
 8011f6c:	d00f      	beq.n	8011f8e <sin+0x66>
 8011f6e:	b9c0      	cbnz	r0, 8011fa2 <sin+0x7a>
 8011f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f74:	ed9d 0b00 	vldr	d0, [sp]
 8011f78:	2001      	movs	r0, #1
 8011f7a:	f000 fd31 	bl	80129e0 <__kernel_sin>
 8011f7e:	e7ea      	b.n	8011f56 <sin+0x2e>
 8011f80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f84:	ed9d 0b00 	vldr	d0, [sp]
 8011f88:	f000 fa26 	bl	80123d8 <__kernel_cos>
 8011f8c:	e7e3      	b.n	8011f56 <sin+0x2e>
 8011f8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f92:	ed9d 0b00 	vldr	d0, [sp]
 8011f96:	2001      	movs	r0, #1
 8011f98:	f000 fd22 	bl	80129e0 <__kernel_sin>
 8011f9c:	eeb1 0b40 	vneg.f64	d0, d0
 8011fa0:	e7d9      	b.n	8011f56 <sin+0x2e>
 8011fa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fa6:	ed9d 0b00 	vldr	d0, [sp]
 8011faa:	f000 fa15 	bl	80123d8 <__kernel_cos>
 8011fae:	e7f5      	b.n	8011f9c <sin+0x74>
	...
 8011fb8:	3fe921fb 	.word	0x3fe921fb
 8011fbc:	7fefffff 	.word	0x7fefffff

08011fc0 <atan2>:
 8011fc0:	f000 b802 	b.w	8011fc8 <__ieee754_atan2>
 8011fc4:	0000      	movs	r0, r0
	...

08011fc8 <__ieee754_atan2>:
 8011fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fca:	eeb0 7b40 	vmov.f64	d7, d0
 8011fce:	ee11 6a10 	vmov	r6, s2
 8011fd2:	ee11 0a90 	vmov	r0, s3
 8011fd6:	4273      	negs	r3, r6
 8011fd8:	4f59      	ldr	r7, [pc, #356]	; (8012140 <__ieee754_atan2+0x178>)
 8011fda:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011fde:	4333      	orrs	r3, r6
 8011fe0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011fe4:	42bb      	cmp	r3, r7
 8011fe6:	d80d      	bhi.n	8012004 <__ieee754_atan2+0x3c>
 8011fe8:	ee10 ca10 	vmov	ip, s0
 8011fec:	ee17 5a90 	vmov	r5, s15
 8011ff0:	f1cc 0100 	rsb	r1, ip, #0
 8011ff4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ff8:	ea41 010c 	orr.w	r1, r1, ip
 8011ffc:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012000:	42b9      	cmp	r1, r7
 8012002:	d904      	bls.n	801200e <__ieee754_atan2+0x46>
 8012004:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012008:	eeb0 0b47 	vmov.f64	d0, d7
 801200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801200e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012012:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012016:	4331      	orrs	r1, r6
 8012018:	d103      	bne.n	8012022 <__ieee754_atan2+0x5a>
 801201a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801201e:	f000 bd37 	b.w	8012a90 <atan>
 8012022:	1784      	asrs	r4, r0, #30
 8012024:	f004 0402 	and.w	r4, r4, #2
 8012028:	ea53 010c 	orrs.w	r1, r3, ip
 801202c:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012030:	d107      	bne.n	8012042 <__ieee754_atan2+0x7a>
 8012032:	2c02      	cmp	r4, #2
 8012034:	d05d      	beq.n	80120f2 <__ieee754_atan2+0x12a>
 8012036:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8012108 <__ieee754_atan2+0x140>
 801203a:	2c03      	cmp	r4, #3
 801203c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8012040:	e7e2      	b.n	8012008 <__ieee754_atan2+0x40>
 8012042:	ea52 0106 	orrs.w	r1, r2, r6
 8012046:	d107      	bne.n	8012058 <__ieee754_atan2+0x90>
 8012048:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012110 <__ieee754_atan2+0x148>
 801204c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8012118 <__ieee754_atan2+0x150>
 8012050:	2d00      	cmp	r5, #0
 8012052:	fe27 7b00 	vselge.f64	d7, d7, d0
 8012056:	e7d7      	b.n	8012008 <__ieee754_atan2+0x40>
 8012058:	42ba      	cmp	r2, r7
 801205a:	d10f      	bne.n	801207c <__ieee754_atan2+0xb4>
 801205c:	4293      	cmp	r3, r2
 801205e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012062:	d107      	bne.n	8012074 <__ieee754_atan2+0xac>
 8012064:	2c02      	cmp	r4, #2
 8012066:	d847      	bhi.n	80120f8 <__ieee754_atan2+0x130>
 8012068:	4b36      	ldr	r3, [pc, #216]	; (8012144 <__ieee754_atan2+0x17c>)
 801206a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801206e:	ed94 7b00 	vldr	d7, [r4]
 8012072:	e7c9      	b.n	8012008 <__ieee754_atan2+0x40>
 8012074:	2c02      	cmp	r4, #2
 8012076:	d842      	bhi.n	80120fe <__ieee754_atan2+0x136>
 8012078:	4b33      	ldr	r3, [pc, #204]	; (8012148 <__ieee754_atan2+0x180>)
 801207a:	e7f6      	b.n	801206a <__ieee754_atan2+0xa2>
 801207c:	42bb      	cmp	r3, r7
 801207e:	d0e3      	beq.n	8012048 <__ieee754_atan2+0x80>
 8012080:	1a9b      	subs	r3, r3, r2
 8012082:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012086:	ea4f 5223 	mov.w	r2, r3, asr #20
 801208a:	da1a      	bge.n	80120c2 <__ieee754_atan2+0xfa>
 801208c:	2800      	cmp	r0, #0
 801208e:	da01      	bge.n	8012094 <__ieee754_atan2+0xcc>
 8012090:	323c      	adds	r2, #60	; 0x3c
 8012092:	db19      	blt.n	80120c8 <__ieee754_atan2+0x100>
 8012094:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8012098:	f000 fdf4 	bl	8012c84 <fabs>
 801209c:	f000 fcf8 	bl	8012a90 <atan>
 80120a0:	eeb0 7b40 	vmov.f64	d7, d0
 80120a4:	2c01      	cmp	r4, #1
 80120a6:	d012      	beq.n	80120ce <__ieee754_atan2+0x106>
 80120a8:	2c02      	cmp	r4, #2
 80120aa:	d019      	beq.n	80120e0 <__ieee754_atan2+0x118>
 80120ac:	2c00      	cmp	r4, #0
 80120ae:	d0ab      	beq.n	8012008 <__ieee754_atan2+0x40>
 80120b0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8012120 <__ieee754_atan2+0x158>
 80120b4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80120b8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8012128 <__ieee754_atan2+0x160>
 80120bc:	ee37 7b40 	vsub.f64	d7, d7, d0
 80120c0:	e7a2      	b.n	8012008 <__ieee754_atan2+0x40>
 80120c2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012110 <__ieee754_atan2+0x148>
 80120c6:	e7ed      	b.n	80120a4 <__ieee754_atan2+0xdc>
 80120c8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012130 <__ieee754_atan2+0x168>
 80120cc:	e7ea      	b.n	80120a4 <__ieee754_atan2+0xdc>
 80120ce:	ee17 1a90 	vmov	r1, s15
 80120d2:	ec53 2b17 	vmov	r2, r3, d7
 80120d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120da:	ec43 2b17 	vmov	d7, r2, r3
 80120de:	e793      	b.n	8012008 <__ieee754_atan2+0x40>
 80120e0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8012120 <__ieee754_atan2+0x158>
 80120e4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80120e8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8012128 <__ieee754_atan2+0x160>
 80120ec:	ee30 7b47 	vsub.f64	d7, d0, d7
 80120f0:	e78a      	b.n	8012008 <__ieee754_atan2+0x40>
 80120f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012128 <__ieee754_atan2+0x160>
 80120f6:	e787      	b.n	8012008 <__ieee754_atan2+0x40>
 80120f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012138 <__ieee754_atan2+0x170>
 80120fc:	e784      	b.n	8012008 <__ieee754_atan2+0x40>
 80120fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012130 <__ieee754_atan2+0x168>
 8012102:	e781      	b.n	8012008 <__ieee754_atan2+0x40>
 8012104:	f3af 8000 	nop.w
 8012108:	54442d18 	.word	0x54442d18
 801210c:	c00921fb 	.word	0xc00921fb
 8012110:	54442d18 	.word	0x54442d18
 8012114:	3ff921fb 	.word	0x3ff921fb
 8012118:	54442d18 	.word	0x54442d18
 801211c:	bff921fb 	.word	0xbff921fb
 8012120:	33145c07 	.word	0x33145c07
 8012124:	3ca1a626 	.word	0x3ca1a626
 8012128:	54442d18 	.word	0x54442d18
 801212c:	400921fb 	.word	0x400921fb
	...
 8012138:	54442d18 	.word	0x54442d18
 801213c:	3fe921fb 	.word	0x3fe921fb
 8012140:	7ff00000 	.word	0x7ff00000
 8012144:	08013bd0 	.word	0x08013bd0
 8012148:	08013be8 	.word	0x08013be8
 801214c:	00000000 	.word	0x00000000

08012150 <__ieee754_rem_pio2>:
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	eeb0 7b40 	vmov.f64	d7, d0
 8012156:	ee17 5a90 	vmov	r5, s15
 801215a:	4b99      	ldr	r3, [pc, #612]	; (80123c0 <__ieee754_rem_pio2+0x270>)
 801215c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012160:	429e      	cmp	r6, r3
 8012162:	b088      	sub	sp, #32
 8012164:	4604      	mov	r4, r0
 8012166:	dc07      	bgt.n	8012178 <__ieee754_rem_pio2+0x28>
 8012168:	2200      	movs	r2, #0
 801216a:	2300      	movs	r3, #0
 801216c:	ed84 0b00 	vstr	d0, [r4]
 8012170:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012174:	2000      	movs	r0, #0
 8012176:	e01b      	b.n	80121b0 <__ieee754_rem_pio2+0x60>
 8012178:	4b92      	ldr	r3, [pc, #584]	; (80123c4 <__ieee754_rem_pio2+0x274>)
 801217a:	429e      	cmp	r6, r3
 801217c:	dc3b      	bgt.n	80121f6 <__ieee754_rem_pio2+0xa6>
 801217e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8012182:	2d00      	cmp	r5, #0
 8012184:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8012380 <__ieee754_rem_pio2+0x230>
 8012188:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801218c:	dd19      	ble.n	80121c2 <__ieee754_rem_pio2+0x72>
 801218e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012192:	429e      	cmp	r6, r3
 8012194:	d00e      	beq.n	80121b4 <__ieee754_rem_pio2+0x64>
 8012196:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8012388 <__ieee754_rem_pio2+0x238>
 801219a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801219e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80121a2:	ed84 5b00 	vstr	d5, [r4]
 80121a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80121ae:	2001      	movs	r0, #1
 80121b0:	b008      	add	sp, #32
 80121b2:	bd70      	pop	{r4, r5, r6, pc}
 80121b4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8012390 <__ieee754_rem_pio2+0x240>
 80121b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121bc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8012398 <__ieee754_rem_pio2+0x248>
 80121c0:	e7eb      	b.n	801219a <__ieee754_rem_pio2+0x4a>
 80121c2:	429e      	cmp	r6, r3
 80121c4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80121c8:	d00e      	beq.n	80121e8 <__ieee754_rem_pio2+0x98>
 80121ca:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8012388 <__ieee754_rem_pio2+0x238>
 80121ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 80121d2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80121d6:	ed84 5b00 	vstr	d5, [r4]
 80121da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121de:	f04f 30ff 	mov.w	r0, #4294967295
 80121e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80121e6:	e7e3      	b.n	80121b0 <__ieee754_rem_pio2+0x60>
 80121e8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012390 <__ieee754_rem_pio2+0x240>
 80121ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121f0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012398 <__ieee754_rem_pio2+0x248>
 80121f4:	e7eb      	b.n	80121ce <__ieee754_rem_pio2+0x7e>
 80121f6:	4b74      	ldr	r3, [pc, #464]	; (80123c8 <__ieee754_rem_pio2+0x278>)
 80121f8:	429e      	cmp	r6, r3
 80121fa:	dc70      	bgt.n	80122de <__ieee754_rem_pio2+0x18e>
 80121fc:	f000 fd42 	bl	8012c84 <fabs>
 8012200:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012204:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80123a0 <__ieee754_rem_pio2+0x250>
 8012208:	eea0 7b06 	vfma.f64	d7, d0, d6
 801220c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012210:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012214:	ee17 0a90 	vmov	r0, s15
 8012218:	eeb1 4b45 	vneg.f64	d4, d5
 801221c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012380 <__ieee754_rem_pio2+0x230>
 8012220:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012224:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012388 <__ieee754_rem_pio2+0x238>
 8012228:	281f      	cmp	r0, #31
 801222a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801222e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012232:	dc08      	bgt.n	8012246 <__ieee754_rem_pio2+0xf6>
 8012234:	4b65      	ldr	r3, [pc, #404]	; (80123cc <__ieee754_rem_pio2+0x27c>)
 8012236:	1e42      	subs	r2, r0, #1
 8012238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801223c:	42b3      	cmp	r3, r6
 801223e:	d002      	beq.n	8012246 <__ieee754_rem_pio2+0xf6>
 8012240:	ed84 6b00 	vstr	d6, [r4]
 8012244:	e026      	b.n	8012294 <__ieee754_rem_pio2+0x144>
 8012246:	ee16 3a90 	vmov	r3, s13
 801224a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801224e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012252:	2b10      	cmp	r3, #16
 8012254:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012258:	ddf2      	ble.n	8012240 <__ieee754_rem_pio2+0xf0>
 801225a:	eeb0 6b40 	vmov.f64	d6, d0
 801225e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8012390 <__ieee754_rem_pio2+0x240>
 8012262:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8012398 <__ieee754_rem_pio2+0x248>
 8012266:	eea4 6b07 	vfma.f64	d6, d4, d7
 801226a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801226e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012272:	eeb0 7b40 	vmov.f64	d7, d0
 8012276:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801227a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801227e:	ee13 3a90 	vmov	r3, s7
 8012282:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	2b31      	cmp	r3, #49	; 0x31
 801228a:	dc17      	bgt.n	80122bc <__ieee754_rem_pio2+0x16c>
 801228c:	eeb0 0b46 	vmov.f64	d0, d6
 8012290:	ed84 3b00 	vstr	d3, [r4]
 8012294:	ed94 6b00 	vldr	d6, [r4]
 8012298:	2d00      	cmp	r5, #0
 801229a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801229e:	ee30 0b47 	vsub.f64	d0, d0, d7
 80122a2:	ed84 0b02 	vstr	d0, [r4, #8]
 80122a6:	da83      	bge.n	80121b0 <__ieee754_rem_pio2+0x60>
 80122a8:	eeb1 6b46 	vneg.f64	d6, d6
 80122ac:	eeb1 0b40 	vneg.f64	d0, d0
 80122b0:	ed84 6b00 	vstr	d6, [r4]
 80122b4:	ed84 0b02 	vstr	d0, [r4, #8]
 80122b8:	4240      	negs	r0, r0
 80122ba:	e779      	b.n	80121b0 <__ieee754_rem_pio2+0x60>
 80122bc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80123a8 <__ieee754_rem_pio2+0x258>
 80122c0:	eeb0 0b46 	vmov.f64	d0, d6
 80122c4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80122c8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80122cc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80123b0 <__ieee754_rem_pio2+0x260>
 80122d0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80122d4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80122d8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80122dc:	e7b0      	b.n	8012240 <__ieee754_rem_pio2+0xf0>
 80122de:	4b3c      	ldr	r3, [pc, #240]	; (80123d0 <__ieee754_rem_pio2+0x280>)
 80122e0:	429e      	cmp	r6, r3
 80122e2:	dd06      	ble.n	80122f2 <__ieee754_rem_pio2+0x1a2>
 80122e4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80122e8:	ed80 7b02 	vstr	d7, [r0, #8]
 80122ec:	ed80 7b00 	vstr	d7, [r0]
 80122f0:	e740      	b.n	8012174 <__ieee754_rem_pio2+0x24>
 80122f2:	1532      	asrs	r2, r6, #20
 80122f4:	ee10 0a10 	vmov	r0, s0
 80122f8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80122fc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012300:	ec41 0b17 	vmov	d7, r0, r1
 8012304:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012308:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80123b8 <__ieee754_rem_pio2+0x268>
 801230c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012314:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012318:	ee27 7b05 	vmul.f64	d7, d7, d5
 801231c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012320:	a902      	add	r1, sp, #8
 8012322:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012326:	ee37 7b46 	vsub.f64	d7, d7, d6
 801232a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801232e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012332:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012336:	2603      	movs	r6, #3
 8012338:	4608      	mov	r0, r1
 801233a:	ed91 7b04 	vldr	d7, [r1, #16]
 801233e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012346:	4633      	mov	r3, r6
 8012348:	f1a1 0108 	sub.w	r1, r1, #8
 801234c:	f106 36ff 	add.w	r6, r6, #4294967295
 8012350:	d0f3      	beq.n	801233a <__ieee754_rem_pio2+0x1ea>
 8012352:	4920      	ldr	r1, [pc, #128]	; (80123d4 <__ieee754_rem_pio2+0x284>)
 8012354:	9101      	str	r1, [sp, #4]
 8012356:	2102      	movs	r1, #2
 8012358:	9100      	str	r1, [sp, #0]
 801235a:	4621      	mov	r1, r4
 801235c:	f000 f8a8 	bl	80124b0 <__kernel_rem_pio2>
 8012360:	2d00      	cmp	r5, #0
 8012362:	f6bf af25 	bge.w	80121b0 <__ieee754_rem_pio2+0x60>
 8012366:	ed94 7b00 	vldr	d7, [r4]
 801236a:	eeb1 7b47 	vneg.f64	d7, d7
 801236e:	ed84 7b00 	vstr	d7, [r4]
 8012372:	ed94 7b02 	vldr	d7, [r4, #8]
 8012376:	eeb1 7b47 	vneg.f64	d7, d7
 801237a:	ed84 7b02 	vstr	d7, [r4, #8]
 801237e:	e79b      	b.n	80122b8 <__ieee754_rem_pio2+0x168>
 8012380:	54400000 	.word	0x54400000
 8012384:	3ff921fb 	.word	0x3ff921fb
 8012388:	1a626331 	.word	0x1a626331
 801238c:	3dd0b461 	.word	0x3dd0b461
 8012390:	1a600000 	.word	0x1a600000
 8012394:	3dd0b461 	.word	0x3dd0b461
 8012398:	2e037073 	.word	0x2e037073
 801239c:	3ba3198a 	.word	0x3ba3198a
 80123a0:	6dc9c883 	.word	0x6dc9c883
 80123a4:	3fe45f30 	.word	0x3fe45f30
 80123a8:	2e000000 	.word	0x2e000000
 80123ac:	3ba3198a 	.word	0x3ba3198a
 80123b0:	252049c1 	.word	0x252049c1
 80123b4:	397b839a 	.word	0x397b839a
 80123b8:	00000000 	.word	0x00000000
 80123bc:	41700000 	.word	0x41700000
 80123c0:	3fe921fb 	.word	0x3fe921fb
 80123c4:	4002d97b 	.word	0x4002d97b
 80123c8:	413921fb 	.word	0x413921fb
 80123cc:	08013c00 	.word	0x08013c00
 80123d0:	7fefffff 	.word	0x7fefffff
 80123d4:	08013c80 	.word	0x08013c80

080123d8 <__kernel_cos>:
 80123d8:	ee10 1a90 	vmov	r1, s1
 80123dc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80123e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80123e4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80123e8:	da05      	bge.n	80123f6 <__kernel_cos+0x1e>
 80123ea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80123ee:	ee17 3a90 	vmov	r3, s15
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d03d      	beq.n	8012472 <__kernel_cos+0x9a>
 80123f6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80123fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012478 <__kernel_cos+0xa0>
 80123fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012480 <__kernel_cos+0xa8>
 8012402:	eea3 6b07 	vfma.f64	d6, d3, d7
 8012406:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012488 <__kernel_cos+0xb0>
 801240a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801240e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012490 <__kernel_cos+0xb8>
 8012412:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012416:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012498 <__kernel_cos+0xc0>
 801241a:	4b23      	ldr	r3, [pc, #140]	; (80124a8 <__kernel_cos+0xd0>)
 801241c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012420:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80124a0 <__kernel_cos+0xc8>
 8012424:	4299      	cmp	r1, r3
 8012426:	eea7 6b03 	vfma.f64	d6, d7, d3
 801242a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801242e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8012432:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012436:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801243a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801243e:	dc04      	bgt.n	801244a <__kernel_cos+0x72>
 8012440:	ee37 6b46 	vsub.f64	d6, d7, d6
 8012444:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012448:	4770      	bx	lr
 801244a:	4b18      	ldr	r3, [pc, #96]	; (80124ac <__kernel_cos+0xd4>)
 801244c:	4299      	cmp	r1, r3
 801244e:	dc0d      	bgt.n	801246c <__kernel_cos+0x94>
 8012450:	2200      	movs	r2, #0
 8012452:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8012456:	ec43 2b15 	vmov	d5, r2, r3
 801245a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801245e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012462:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012466:	ee30 0b47 	vsub.f64	d0, d0, d7
 801246a:	4770      	bx	lr
 801246c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012470:	e7f3      	b.n	801245a <__kernel_cos+0x82>
 8012472:	eeb0 0b44 	vmov.f64	d0, d4
 8012476:	4770      	bx	lr
 8012478:	be8838d4 	.word	0xbe8838d4
 801247c:	bda8fae9 	.word	0xbda8fae9
 8012480:	bdb4b1c4 	.word	0xbdb4b1c4
 8012484:	3e21ee9e 	.word	0x3e21ee9e
 8012488:	809c52ad 	.word	0x809c52ad
 801248c:	be927e4f 	.word	0xbe927e4f
 8012490:	19cb1590 	.word	0x19cb1590
 8012494:	3efa01a0 	.word	0x3efa01a0
 8012498:	16c15177 	.word	0x16c15177
 801249c:	bf56c16c 	.word	0xbf56c16c
 80124a0:	5555554c 	.word	0x5555554c
 80124a4:	3fa55555 	.word	0x3fa55555
 80124a8:	3fd33332 	.word	0x3fd33332
 80124ac:	3fe90000 	.word	0x3fe90000

080124b0 <__kernel_rem_pio2>:
 80124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b4:	ed2d 8b06 	vpush	{d8-d10}
 80124b8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80124bc:	460f      	mov	r7, r1
 80124be:	9002      	str	r0, [sp, #8]
 80124c0:	49c5      	ldr	r1, [pc, #788]	; (80127d8 <__kernel_rem_pio2+0x328>)
 80124c2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80124c4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80124c8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80124cc:	9301      	str	r3, [sp, #4]
 80124ce:	f112 0f14 	cmn.w	r2, #20
 80124d2:	bfa8      	it	ge
 80124d4:	2018      	movge	r0, #24
 80124d6:	f103 31ff 	add.w	r1, r3, #4294967295
 80124da:	bfb8      	it	lt
 80124dc:	2000      	movlt	r0, #0
 80124de:	f06f 0417 	mvn.w	r4, #23
 80124e2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80127c0 <__kernel_rem_pio2+0x310>
 80124e6:	bfa4      	itt	ge
 80124e8:	f1a2 0a03 	subge.w	sl, r2, #3
 80124ec:	fb9a f0f0 	sdivge	r0, sl, r0
 80124f0:	fb00 4404 	mla	r4, r0, r4, r4
 80124f4:	1a46      	subs	r6, r0, r1
 80124f6:	4414      	add	r4, r2
 80124f8:	eb09 0c01 	add.w	ip, r9, r1
 80124fc:	ad1a      	add	r5, sp, #104	; 0x68
 80124fe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8012502:	2200      	movs	r2, #0
 8012504:	4562      	cmp	r2, ip
 8012506:	dd10      	ble.n	801252a <__kernel_rem_pio2+0x7a>
 8012508:	9a01      	ldr	r2, [sp, #4]
 801250a:	ab1a      	add	r3, sp, #104	; 0x68
 801250c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012510:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8012514:	f04f 0c00 	mov.w	ip, #0
 8012518:	45cc      	cmp	ip, r9
 801251a:	dc26      	bgt.n	801256a <__kernel_rem_pio2+0xba>
 801251c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80127c0 <__kernel_rem_pio2+0x310>
 8012520:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012524:	4616      	mov	r6, r2
 8012526:	2500      	movs	r5, #0
 8012528:	e015      	b.n	8012556 <__kernel_rem_pio2+0xa6>
 801252a:	42d6      	cmn	r6, r2
 801252c:	d409      	bmi.n	8012542 <__kernel_rem_pio2+0x92>
 801252e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8012532:	ee07 3a90 	vmov	s15, r3
 8012536:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801253a:	eca5 7b02 	vstmia	r5!, {d7}
 801253e:	3201      	adds	r2, #1
 8012540:	e7e0      	b.n	8012504 <__kernel_rem_pio2+0x54>
 8012542:	eeb0 7b46 	vmov.f64	d7, d6
 8012546:	e7f8      	b.n	801253a <__kernel_rem_pio2+0x8a>
 8012548:	ecb8 5b02 	vldmia	r8!, {d5}
 801254c:	ed96 6b00 	vldr	d6, [r6]
 8012550:	3501      	adds	r5, #1
 8012552:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012556:	428d      	cmp	r5, r1
 8012558:	f1a6 0608 	sub.w	r6, r6, #8
 801255c:	ddf4      	ble.n	8012548 <__kernel_rem_pio2+0x98>
 801255e:	ecaa 7b02 	vstmia	sl!, {d7}
 8012562:	f10c 0c01 	add.w	ip, ip, #1
 8012566:	3208      	adds	r2, #8
 8012568:	e7d6      	b.n	8012518 <__kernel_rem_pio2+0x68>
 801256a:	ab06      	add	r3, sp, #24
 801256c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80127c8 <__kernel_rem_pio2+0x318>
 8012570:	ed9f ab97 	vldr	d10, [pc, #604]	; 80127d0 <__kernel_rem_pio2+0x320>
 8012574:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012578:	9303      	str	r3, [sp, #12]
 801257a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801257e:	464d      	mov	r5, r9
 8012580:	00eb      	lsls	r3, r5, #3
 8012582:	9304      	str	r3, [sp, #16]
 8012584:	ab92      	add	r3, sp, #584	; 0x248
 8012586:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801258a:	f10d 0b18 	add.w	fp, sp, #24
 801258e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012590:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8012594:	465e      	mov	r6, fp
 8012596:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801259a:	4628      	mov	r0, r5
 801259c:	2800      	cmp	r0, #0
 801259e:	f1a2 0208 	sub.w	r2, r2, #8
 80125a2:	dc4c      	bgt.n	801263e <__kernel_rem_pio2+0x18e>
 80125a4:	4620      	mov	r0, r4
 80125a6:	9105      	str	r1, [sp, #20]
 80125a8:	f000 fbea 	bl	8012d80 <scalbn>
 80125ac:	eeb0 8b40 	vmov.f64	d8, d0
 80125b0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80125b4:	ee28 0b00 	vmul.f64	d0, d8, d0
 80125b8:	f000 fb6e 	bl	8012c98 <floor>
 80125bc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80125c0:	eea0 8b47 	vfms.f64	d8, d0, d7
 80125c4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80125c8:	2c00      	cmp	r4, #0
 80125ca:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80125ce:	ee17 8a90 	vmov	r8, s15
 80125d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 80125d6:	9905      	ldr	r1, [sp, #20]
 80125d8:	dd43      	ble.n	8012662 <__kernel_rem_pio2+0x1b2>
 80125da:	1e68      	subs	r0, r5, #1
 80125dc:	ab06      	add	r3, sp, #24
 80125de:	f1c4 0c18 	rsb	ip, r4, #24
 80125e2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80125e6:	fa46 f20c 	asr.w	r2, r6, ip
 80125ea:	4490      	add	r8, r2
 80125ec:	fa02 f20c 	lsl.w	r2, r2, ip
 80125f0:	1ab6      	subs	r6, r6, r2
 80125f2:	f1c4 0217 	rsb	r2, r4, #23
 80125f6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80125fa:	4116      	asrs	r6, r2
 80125fc:	2e00      	cmp	r6, #0
 80125fe:	dd3f      	ble.n	8012680 <__kernel_rem_pio2+0x1d0>
 8012600:	f04f 0c00 	mov.w	ip, #0
 8012604:	f108 0801 	add.w	r8, r8, #1
 8012608:	4660      	mov	r0, ip
 801260a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801260e:	4565      	cmp	r5, ip
 8012610:	dc6e      	bgt.n	80126f0 <__kernel_rem_pio2+0x240>
 8012612:	2c00      	cmp	r4, #0
 8012614:	dd04      	ble.n	8012620 <__kernel_rem_pio2+0x170>
 8012616:	2c01      	cmp	r4, #1
 8012618:	d07f      	beq.n	801271a <__kernel_rem_pio2+0x26a>
 801261a:	2c02      	cmp	r4, #2
 801261c:	f000 8087 	beq.w	801272e <__kernel_rem_pio2+0x27e>
 8012620:	2e02      	cmp	r6, #2
 8012622:	d12d      	bne.n	8012680 <__kernel_rem_pio2+0x1d0>
 8012624:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012628:	ee30 8b48 	vsub.f64	d8, d0, d8
 801262c:	b340      	cbz	r0, 8012680 <__kernel_rem_pio2+0x1d0>
 801262e:	4620      	mov	r0, r4
 8012630:	9105      	str	r1, [sp, #20]
 8012632:	f000 fba5 	bl	8012d80 <scalbn>
 8012636:	9905      	ldr	r1, [sp, #20]
 8012638:	ee38 8b40 	vsub.f64	d8, d8, d0
 801263c:	e020      	b.n	8012680 <__kernel_rem_pio2+0x1d0>
 801263e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012642:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012646:	3801      	subs	r0, #1
 8012648:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801264c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012650:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012654:	eca6 0a01 	vstmia	r6!, {s0}
 8012658:	ed92 0b00 	vldr	d0, [r2]
 801265c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012660:	e79c      	b.n	801259c <__kernel_rem_pio2+0xec>
 8012662:	d105      	bne.n	8012670 <__kernel_rem_pio2+0x1c0>
 8012664:	1e6a      	subs	r2, r5, #1
 8012666:	ab06      	add	r3, sp, #24
 8012668:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801266c:	15f6      	asrs	r6, r6, #23
 801266e:	e7c5      	b.n	80125fc <__kernel_rem_pio2+0x14c>
 8012670:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012674:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267c:	da36      	bge.n	80126ec <__kernel_rem_pio2+0x23c>
 801267e:	2600      	movs	r6, #0
 8012680:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	f040 80aa 	bne.w	80127e0 <__kernel_rem_pio2+0x330>
 801268c:	f105 3bff 	add.w	fp, r5, #4294967295
 8012690:	4658      	mov	r0, fp
 8012692:	2200      	movs	r2, #0
 8012694:	4548      	cmp	r0, r9
 8012696:	da52      	bge.n	801273e <__kernel_rem_pio2+0x28e>
 8012698:	2a00      	cmp	r2, #0
 801269a:	f000 8081 	beq.w	80127a0 <__kernel_rem_pio2+0x2f0>
 801269e:	ab06      	add	r3, sp, #24
 80126a0:	3c18      	subs	r4, #24
 80126a2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	f000 8087 	beq.w	80127ba <__kernel_rem_pio2+0x30a>
 80126ac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80126b0:	4620      	mov	r0, r4
 80126b2:	f000 fb65 	bl	8012d80 <scalbn>
 80126b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80126ba:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80127c8 <__kernel_rem_pio2+0x318>
 80126be:	a96a      	add	r1, sp, #424	; 0x1a8
 80126c0:	f103 0208 	add.w	r2, r3, #8
 80126c4:	1888      	adds	r0, r1, r2
 80126c6:	4659      	mov	r1, fp
 80126c8:	2900      	cmp	r1, #0
 80126ca:	f280 80b7 	bge.w	801283c <__kernel_rem_pio2+0x38c>
 80126ce:	4659      	mov	r1, fp
 80126d0:	2900      	cmp	r1, #0
 80126d2:	f2c0 80d5 	blt.w	8012880 <__kernel_rem_pio2+0x3d0>
 80126d6:	a86a      	add	r0, sp, #424	; 0x1a8
 80126d8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80126dc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80127c0 <__kernel_rem_pio2+0x310>
 80126e0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80127dc <__kernel_rem_pio2+0x32c>
 80126e4:	2400      	movs	r4, #0
 80126e6:	ebab 0001 	sub.w	r0, fp, r1
 80126ea:	e0be      	b.n	801286a <__kernel_rem_pio2+0x3ba>
 80126ec:	2602      	movs	r6, #2
 80126ee:	e787      	b.n	8012600 <__kernel_rem_pio2+0x150>
 80126f0:	f8db 2000 	ldr.w	r2, [fp]
 80126f4:	b958      	cbnz	r0, 801270e <__kernel_rem_pio2+0x25e>
 80126f6:	b122      	cbz	r2, 8012702 <__kernel_rem_pio2+0x252>
 80126f8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80126fc:	f8cb 2000 	str.w	r2, [fp]
 8012700:	2201      	movs	r2, #1
 8012702:	f10c 0c01 	add.w	ip, ip, #1
 8012706:	f10b 0b04 	add.w	fp, fp, #4
 801270a:	4610      	mov	r0, r2
 801270c:	e77f      	b.n	801260e <__kernel_rem_pio2+0x15e>
 801270e:	ebae 0202 	sub.w	r2, lr, r2
 8012712:	f8cb 2000 	str.w	r2, [fp]
 8012716:	4602      	mov	r2, r0
 8012718:	e7f3      	b.n	8012702 <__kernel_rem_pio2+0x252>
 801271a:	f105 3cff 	add.w	ip, r5, #4294967295
 801271e:	ab06      	add	r3, sp, #24
 8012720:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012724:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012728:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801272c:	e778      	b.n	8012620 <__kernel_rem_pio2+0x170>
 801272e:	f105 3cff 	add.w	ip, r5, #4294967295
 8012732:	ab06      	add	r3, sp, #24
 8012734:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012738:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801273c:	e7f4      	b.n	8012728 <__kernel_rem_pio2+0x278>
 801273e:	ab06      	add	r3, sp, #24
 8012740:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012744:	3801      	subs	r0, #1
 8012746:	431a      	orrs	r2, r3
 8012748:	e7a4      	b.n	8012694 <__kernel_rem_pio2+0x1e4>
 801274a:	f10c 0c01 	add.w	ip, ip, #1
 801274e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012752:	2800      	cmp	r0, #0
 8012754:	d0f9      	beq.n	801274a <__kernel_rem_pio2+0x29a>
 8012756:	9b04      	ldr	r3, [sp, #16]
 8012758:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801275c:	eb0d 0203 	add.w	r2, sp, r3
 8012760:	9b01      	ldr	r3, [sp, #4]
 8012762:	18e8      	adds	r0, r5, r3
 8012764:	ab1a      	add	r3, sp, #104	; 0x68
 8012766:	1c6e      	adds	r6, r5, #1
 8012768:	3a98      	subs	r2, #152	; 0x98
 801276a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801276e:	4465      	add	r5, ip
 8012770:	42b5      	cmp	r5, r6
 8012772:	f6ff af05 	blt.w	8012580 <__kernel_rem_pio2+0xd0>
 8012776:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801277a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801277e:	ee07 3a90 	vmov	s15, r3
 8012782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012786:	f04f 0c00 	mov.w	ip, #0
 801278a:	eca0 7b02 	vstmia	r0!, {d7}
 801278e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80127c0 <__kernel_rem_pio2+0x310>
 8012792:	4680      	mov	r8, r0
 8012794:	458c      	cmp	ip, r1
 8012796:	dd07      	ble.n	80127a8 <__kernel_rem_pio2+0x2f8>
 8012798:	eca2 7b02 	vstmia	r2!, {d7}
 801279c:	3601      	adds	r6, #1
 801279e:	e7e7      	b.n	8012770 <__kernel_rem_pio2+0x2c0>
 80127a0:	9a03      	ldr	r2, [sp, #12]
 80127a2:	f04f 0c01 	mov.w	ip, #1
 80127a6:	e7d2      	b.n	801274e <__kernel_rem_pio2+0x29e>
 80127a8:	ecbe 5b02 	vldmia	lr!, {d5}
 80127ac:	ed38 6b02 	vldmdb	r8!, {d6}
 80127b0:	f10c 0c01 	add.w	ip, ip, #1
 80127b4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80127b8:	e7ec      	b.n	8012794 <__kernel_rem_pio2+0x2e4>
 80127ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127be:	e76e      	b.n	801269e <__kernel_rem_pio2+0x1ee>
	...
 80127cc:	3e700000 	.word	0x3e700000
 80127d0:	00000000 	.word	0x00000000
 80127d4:	41700000 	.word	0x41700000
 80127d8:	08013dc8 	.word	0x08013dc8
 80127dc:	08013d88 	.word	0x08013d88
 80127e0:	4260      	negs	r0, r4
 80127e2:	eeb0 0b48 	vmov.f64	d0, d8
 80127e6:	f000 facb 	bl	8012d80 <scalbn>
 80127ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80129c8 <__kernel_rem_pio2+0x518>
 80127ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80127f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f6:	db18      	blt.n	801282a <__kernel_rem_pio2+0x37a>
 80127f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80129d0 <__kernel_rem_pio2+0x520>
 80127fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012800:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012804:	aa06      	add	r2, sp, #24
 8012806:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801280a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801280e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012812:	f105 0b01 	add.w	fp, r5, #1
 8012816:	ee10 3a10 	vmov	r3, s0
 801281a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801281e:	ee17 3a10 	vmov	r3, s14
 8012822:	3418      	adds	r4, #24
 8012824:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012828:	e740      	b.n	80126ac <__kernel_rem_pio2+0x1fc>
 801282a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801282e:	aa06      	add	r2, sp, #24
 8012830:	ee10 3a10 	vmov	r3, s0
 8012834:	46ab      	mov	fp, r5
 8012836:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801283a:	e737      	b.n	80126ac <__kernel_rem_pio2+0x1fc>
 801283c:	ac06      	add	r4, sp, #24
 801283e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8012842:	9401      	str	r4, [sp, #4]
 8012844:	ee07 4a90 	vmov	s15, r4
 8012848:	3901      	subs	r1, #1
 801284a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801284e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012852:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012856:	ed20 7b02 	vstmdb	r0!, {d7}
 801285a:	e735      	b.n	80126c8 <__kernel_rem_pio2+0x218>
 801285c:	ecbc 5b02 	vldmia	ip!, {d5}
 8012860:	ecb5 6b02 	vldmia	r5!, {d6}
 8012864:	3401      	adds	r4, #1
 8012866:	eea5 7b06 	vfma.f64	d7, d5, d6
 801286a:	454c      	cmp	r4, r9
 801286c:	dc01      	bgt.n	8012872 <__kernel_rem_pio2+0x3c2>
 801286e:	4284      	cmp	r4, r0
 8012870:	ddf4      	ble.n	801285c <__kernel_rem_pio2+0x3ac>
 8012872:	ac42      	add	r4, sp, #264	; 0x108
 8012874:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012878:	ed80 7b00 	vstr	d7, [r0]
 801287c:	3901      	subs	r1, #1
 801287e:	e727      	b.n	80126d0 <__kernel_rem_pio2+0x220>
 8012880:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8012882:	2902      	cmp	r1, #2
 8012884:	dc0a      	bgt.n	801289c <__kernel_rem_pio2+0x3ec>
 8012886:	2900      	cmp	r1, #0
 8012888:	dc2c      	bgt.n	80128e4 <__kernel_rem_pio2+0x434>
 801288a:	d045      	beq.n	8012918 <__kernel_rem_pio2+0x468>
 801288c:	f008 0007 	and.w	r0, r8, #7
 8012890:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8012894:	ecbd 8b06 	vpop	{d8-d10}
 8012898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801289e:	2a03      	cmp	r2, #3
 80128a0:	d1f4      	bne.n	801288c <__kernel_rem_pio2+0x3dc>
 80128a2:	aa42      	add	r2, sp, #264	; 0x108
 80128a4:	4413      	add	r3, r2
 80128a6:	461a      	mov	r2, r3
 80128a8:	4619      	mov	r1, r3
 80128aa:	4658      	mov	r0, fp
 80128ac:	2800      	cmp	r0, #0
 80128ae:	f1a1 0108 	sub.w	r1, r1, #8
 80128b2:	dc54      	bgt.n	801295e <__kernel_rem_pio2+0x4ae>
 80128b4:	4659      	mov	r1, fp
 80128b6:	2901      	cmp	r1, #1
 80128b8:	f1a2 0208 	sub.w	r2, r2, #8
 80128bc:	dc5f      	bgt.n	801297e <__kernel_rem_pio2+0x4ce>
 80128be:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80129d8 <__kernel_rem_pio2+0x528>
 80128c2:	3308      	adds	r3, #8
 80128c4:	f1bb 0f01 	cmp.w	fp, #1
 80128c8:	dc69      	bgt.n	801299e <__kernel_rem_pio2+0x4ee>
 80128ca:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80128ce:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80128d2:	2e00      	cmp	r6, #0
 80128d4:	d16a      	bne.n	80129ac <__kernel_rem_pio2+0x4fc>
 80128d6:	ed87 5b00 	vstr	d5, [r7]
 80128da:	ed87 6b02 	vstr	d6, [r7, #8]
 80128de:	ed87 7b04 	vstr	d7, [r7, #16]
 80128e2:	e7d3      	b.n	801288c <__kernel_rem_pio2+0x3dc>
 80128e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80129d8 <__kernel_rem_pio2+0x528>
 80128e8:	ab42      	add	r3, sp, #264	; 0x108
 80128ea:	441a      	add	r2, r3
 80128ec:	465b      	mov	r3, fp
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da26      	bge.n	8012940 <__kernel_rem_pio2+0x490>
 80128f2:	b35e      	cbz	r6, 801294c <__kernel_rem_pio2+0x49c>
 80128f4:	eeb1 7b46 	vneg.f64	d7, d6
 80128f8:	ed87 7b00 	vstr	d7, [r7]
 80128fc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012900:	aa44      	add	r2, sp, #272	; 0x110
 8012902:	2301      	movs	r3, #1
 8012904:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012908:	459b      	cmp	fp, r3
 801290a:	da22      	bge.n	8012952 <__kernel_rem_pio2+0x4a2>
 801290c:	b10e      	cbz	r6, 8012912 <__kernel_rem_pio2+0x462>
 801290e:	eeb1 7b47 	vneg.f64	d7, d7
 8012912:	ed87 7b02 	vstr	d7, [r7, #8]
 8012916:	e7b9      	b.n	801288c <__kernel_rem_pio2+0x3dc>
 8012918:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80129d8 <__kernel_rem_pio2+0x528>
 801291c:	ab42      	add	r3, sp, #264	; 0x108
 801291e:	441a      	add	r2, r3
 8012920:	f1bb 0f00 	cmp.w	fp, #0
 8012924:	da05      	bge.n	8012932 <__kernel_rem_pio2+0x482>
 8012926:	b10e      	cbz	r6, 801292c <__kernel_rem_pio2+0x47c>
 8012928:	eeb1 7b47 	vneg.f64	d7, d7
 801292c:	ed87 7b00 	vstr	d7, [r7]
 8012930:	e7ac      	b.n	801288c <__kernel_rem_pio2+0x3dc>
 8012932:	ed32 6b02 	vldmdb	r2!, {d6}
 8012936:	f10b 3bff 	add.w	fp, fp, #4294967295
 801293a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801293e:	e7ef      	b.n	8012920 <__kernel_rem_pio2+0x470>
 8012940:	ed32 7b02 	vldmdb	r2!, {d7}
 8012944:	3b01      	subs	r3, #1
 8012946:	ee36 6b07 	vadd.f64	d6, d6, d7
 801294a:	e7d0      	b.n	80128ee <__kernel_rem_pio2+0x43e>
 801294c:	eeb0 7b46 	vmov.f64	d7, d6
 8012950:	e7d2      	b.n	80128f8 <__kernel_rem_pio2+0x448>
 8012952:	ecb2 6b02 	vldmia	r2!, {d6}
 8012956:	3301      	adds	r3, #1
 8012958:	ee37 7b06 	vadd.f64	d7, d7, d6
 801295c:	e7d4      	b.n	8012908 <__kernel_rem_pio2+0x458>
 801295e:	ed91 7b00 	vldr	d7, [r1]
 8012962:	ed91 5b02 	vldr	d5, [r1, #8]
 8012966:	3801      	subs	r0, #1
 8012968:	ee37 6b05 	vadd.f64	d6, d7, d5
 801296c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012970:	ed81 6b00 	vstr	d6, [r1]
 8012974:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012978:	ed81 7b02 	vstr	d7, [r1, #8]
 801297c:	e796      	b.n	80128ac <__kernel_rem_pio2+0x3fc>
 801297e:	ed92 7b00 	vldr	d7, [r2]
 8012982:	ed92 5b02 	vldr	d5, [r2, #8]
 8012986:	3901      	subs	r1, #1
 8012988:	ee37 6b05 	vadd.f64	d6, d7, d5
 801298c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012990:	ed82 6b00 	vstr	d6, [r2]
 8012994:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012998:	ed82 7b02 	vstr	d7, [r2, #8]
 801299c:	e78b      	b.n	80128b6 <__kernel_rem_pio2+0x406>
 801299e:	ed33 6b02 	vldmdb	r3!, {d6}
 80129a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80129aa:	e78b      	b.n	80128c4 <__kernel_rem_pio2+0x414>
 80129ac:	eeb1 5b45 	vneg.f64	d5, d5
 80129b0:	eeb1 6b46 	vneg.f64	d6, d6
 80129b4:	ed87 5b00 	vstr	d5, [r7]
 80129b8:	eeb1 7b47 	vneg.f64	d7, d7
 80129bc:	ed87 6b02 	vstr	d6, [r7, #8]
 80129c0:	e78d      	b.n	80128de <__kernel_rem_pio2+0x42e>
 80129c2:	bf00      	nop
 80129c4:	f3af 8000 	nop.w
 80129c8:	00000000 	.word	0x00000000
 80129cc:	41700000 	.word	0x41700000
 80129d0:	00000000 	.word	0x00000000
 80129d4:	3e700000 	.word	0x3e700000
	...

080129e0 <__kernel_sin>:
 80129e0:	ee10 3a90 	vmov	r3, s1
 80129e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129e8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80129ec:	da04      	bge.n	80129f8 <__kernel_sin+0x18>
 80129ee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80129f2:	ee17 3a90 	vmov	r3, s15
 80129f6:	b35b      	cbz	r3, 8012a50 <__kernel_sin+0x70>
 80129f8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80129fc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012a00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012a58 <__kernel_sin+0x78>
 8012a04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012a60 <__kernel_sin+0x80>
 8012a08:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012a0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012a68 <__kernel_sin+0x88>
 8012a10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012a14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012a70 <__kernel_sin+0x90>
 8012a18:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012a1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012a78 <__kernel_sin+0x98>
 8012a20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012a24:	b930      	cbnz	r0, 8012a34 <__kernel_sin+0x54>
 8012a26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012a80 <__kernel_sin+0xa0>
 8012a2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012a2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012a32:	4770      	bx	lr
 8012a34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012a38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012a3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012a40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012a44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012a88 <__kernel_sin+0xa8>
 8012a48:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012a4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop
 8012a54:	f3af 8000 	nop.w
 8012a58:	5acfd57c 	.word	0x5acfd57c
 8012a5c:	3de5d93a 	.word	0x3de5d93a
 8012a60:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a64:	be5ae5e6 	.word	0xbe5ae5e6
 8012a68:	57b1fe7d 	.word	0x57b1fe7d
 8012a6c:	3ec71de3 	.word	0x3ec71de3
 8012a70:	19c161d5 	.word	0x19c161d5
 8012a74:	bf2a01a0 	.word	0xbf2a01a0
 8012a78:	1110f8a6 	.word	0x1110f8a6
 8012a7c:	3f811111 	.word	0x3f811111
 8012a80:	55555549 	.word	0x55555549
 8012a84:	bfc55555 	.word	0xbfc55555
 8012a88:	55555549 	.word	0x55555549
 8012a8c:	3fc55555 	.word	0x3fc55555

08012a90 <atan>:
 8012a90:	b538      	push	{r3, r4, r5, lr}
 8012a92:	eeb0 7b40 	vmov.f64	d7, d0
 8012a96:	ee17 5a90 	vmov	r5, s15
 8012a9a:	4b73      	ldr	r3, [pc, #460]	; (8012c68 <atan+0x1d8>)
 8012a9c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012aa0:	429c      	cmp	r4, r3
 8012aa2:	dd13      	ble.n	8012acc <atan+0x3c>
 8012aa4:	4b71      	ldr	r3, [pc, #452]	; (8012c6c <atan+0x1dc>)
 8012aa6:	429c      	cmp	r4, r3
 8012aa8:	dc03      	bgt.n	8012ab2 <atan+0x22>
 8012aaa:	d107      	bne.n	8012abc <atan+0x2c>
 8012aac:	ee10 3a10 	vmov	r3, s0
 8012ab0:	b123      	cbz	r3, 8012abc <atan+0x2c>
 8012ab2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ab6:	eeb0 0b47 	vmov.f64	d0, d7
 8012aba:	bd38      	pop	{r3, r4, r5, pc}
 8012abc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012bf8 <atan+0x168>
 8012ac0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012c00 <atan+0x170>
 8012ac4:	2d00      	cmp	r5, #0
 8012ac6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8012aca:	e7f4      	b.n	8012ab6 <atan+0x26>
 8012acc:	4b68      	ldr	r3, [pc, #416]	; (8012c70 <atan+0x1e0>)
 8012ace:	429c      	cmp	r4, r3
 8012ad0:	dc11      	bgt.n	8012af6 <atan+0x66>
 8012ad2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012ad6:	429c      	cmp	r4, r3
 8012ad8:	dc0a      	bgt.n	8012af0 <atan+0x60>
 8012ada:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8012ade:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8012c08 <atan+0x178>
 8012ae2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012ae6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aee:	dce2      	bgt.n	8012ab6 <atan+0x26>
 8012af0:	f04f 33ff 	mov.w	r3, #4294967295
 8012af4:	e013      	b.n	8012b1e <atan+0x8e>
 8012af6:	f000 f8c5 	bl	8012c84 <fabs>
 8012afa:	4b5e      	ldr	r3, [pc, #376]	; (8012c74 <atan+0x1e4>)
 8012afc:	429c      	cmp	r4, r3
 8012afe:	dc4f      	bgt.n	8012ba0 <atan+0x110>
 8012b00:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012b04:	429c      	cmp	r4, r3
 8012b06:	dc41      	bgt.n	8012b8c <atan+0xfc>
 8012b08:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012b0c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012b10:	2300      	movs	r3, #0
 8012b12:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012b16:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012b1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c10 <atan+0x180>
 8012b22:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012b26:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012b2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c18 <atan+0x188>
 8012b2e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012b32:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c20 <atan+0x190>
 8012b36:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c28 <atan+0x198>
 8012b3e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c30 <atan+0x1a0>
 8012b46:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c38 <atan+0x1a8>
 8012b4e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c40 <atan+0x1b0>
 8012b52:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b56:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c48 <atan+0x1b8>
 8012b5a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012b5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c50 <atan+0x1c0>
 8012b62:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012b66:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c58 <atan+0x1c8>
 8012b6a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012b6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c60 <atan+0x1d0>
 8012b72:	1c5a      	adds	r2, r3, #1
 8012b74:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012b78:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012b7c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012b80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012b84:	d121      	bne.n	8012bca <atan+0x13a>
 8012b86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b8a:	e794      	b.n	8012ab6 <atan+0x26>
 8012b8c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012b90:	2301      	movs	r3, #1
 8012b92:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012b96:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b9a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012b9e:	e7be      	b.n	8012b1e <atan+0x8e>
 8012ba0:	4b35      	ldr	r3, [pc, #212]	; (8012c78 <atan+0x1e8>)
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	da0b      	bge.n	8012bbe <atan+0x12e>
 8012ba6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012baa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012bae:	ee30 5b47 	vsub.f64	d5, d0, d7
 8012bb2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012bb6:	2302      	movs	r3, #2
 8012bb8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012bbc:	e7af      	b.n	8012b1e <atan+0x8e>
 8012bbe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012bc2:	2303      	movs	r3, #3
 8012bc4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012bc8:	e7a9      	b.n	8012b1e <atan+0x8e>
 8012bca:	4a2c      	ldr	r2, [pc, #176]	; (8012c7c <atan+0x1ec>)
 8012bcc:	492c      	ldr	r1, [pc, #176]	; (8012c80 <atan+0x1f0>)
 8012bce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012bd2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012bd6:	ed93 5b00 	vldr	d5, [r3]
 8012bda:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012bde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012be2:	ed92 6b00 	vldr	d6, [r2]
 8012be6:	2d00      	cmp	r5, #0
 8012be8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012bec:	bfb8      	it	lt
 8012bee:	eeb1 7b47 	vneglt.f64	d7, d7
 8012bf2:	e760      	b.n	8012ab6 <atan+0x26>
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	54442d18 	.word	0x54442d18
 8012bfc:	3ff921fb 	.word	0x3ff921fb
 8012c00:	54442d18 	.word	0x54442d18
 8012c04:	bff921fb 	.word	0xbff921fb
 8012c08:	8800759c 	.word	0x8800759c
 8012c0c:	7e37e43c 	.word	0x7e37e43c
 8012c10:	e322da11 	.word	0xe322da11
 8012c14:	3f90ad3a 	.word	0x3f90ad3a
 8012c18:	24760deb 	.word	0x24760deb
 8012c1c:	3fa97b4b 	.word	0x3fa97b4b
 8012c20:	a0d03d51 	.word	0xa0d03d51
 8012c24:	3fb10d66 	.word	0x3fb10d66
 8012c28:	c54c206e 	.word	0xc54c206e
 8012c2c:	3fb745cd 	.word	0x3fb745cd
 8012c30:	920083ff 	.word	0x920083ff
 8012c34:	3fc24924 	.word	0x3fc24924
 8012c38:	5555550d 	.word	0x5555550d
 8012c3c:	3fd55555 	.word	0x3fd55555
 8012c40:	52defd9a 	.word	0x52defd9a
 8012c44:	bfadde2d 	.word	0xbfadde2d
 8012c48:	2c6a6c2f 	.word	0x2c6a6c2f
 8012c4c:	bfa2b444 	.word	0xbfa2b444
 8012c50:	af749a6d 	.word	0xaf749a6d
 8012c54:	bfb3b0f2 	.word	0xbfb3b0f2
 8012c58:	fe231671 	.word	0xfe231671
 8012c5c:	bfbc71c6 	.word	0xbfbc71c6
 8012c60:	9998ebc4 	.word	0x9998ebc4
 8012c64:	bfc99999 	.word	0xbfc99999
 8012c68:	440fffff 	.word	0x440fffff
 8012c6c:	7ff00000 	.word	0x7ff00000
 8012c70:	3fdbffff 	.word	0x3fdbffff
 8012c74:	3ff2ffff 	.word	0x3ff2ffff
 8012c78:	40038000 	.word	0x40038000
 8012c7c:	08013dd8 	.word	0x08013dd8
 8012c80:	08013df8 	.word	0x08013df8

08012c84 <fabs>:
 8012c84:	ec51 0b10 	vmov	r0, r1, d0
 8012c88:	ee10 2a10 	vmov	r2, s0
 8012c8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c90:	ec43 2b10 	vmov	d0, r2, r3
 8012c94:	4770      	bx	lr
	...

08012c98 <floor>:
 8012c98:	ee10 1a90 	vmov	r1, s1
 8012c9c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ca0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012ca4:	2b13      	cmp	r3, #19
 8012ca6:	b530      	push	{r4, r5, lr}
 8012ca8:	ee10 0a10 	vmov	r0, s0
 8012cac:	ee10 5a10 	vmov	r5, s0
 8012cb0:	dc31      	bgt.n	8012d16 <floor+0x7e>
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	da15      	bge.n	8012ce2 <floor+0x4a>
 8012cb6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012d70 <floor+0xd8>
 8012cba:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012cbe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc6:	dd07      	ble.n	8012cd8 <floor+0x40>
 8012cc8:	2900      	cmp	r1, #0
 8012cca:	da4e      	bge.n	8012d6a <floor+0xd2>
 8012ccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cd0:	4318      	orrs	r0, r3
 8012cd2:	d001      	beq.n	8012cd8 <floor+0x40>
 8012cd4:	4928      	ldr	r1, [pc, #160]	; (8012d78 <floor+0xe0>)
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4602      	mov	r2, r0
 8012cdc:	ec43 2b10 	vmov	d0, r2, r3
 8012ce0:	e020      	b.n	8012d24 <floor+0x8c>
 8012ce2:	4a26      	ldr	r2, [pc, #152]	; (8012d7c <floor+0xe4>)
 8012ce4:	411a      	asrs	r2, r3
 8012ce6:	ea01 0402 	and.w	r4, r1, r2
 8012cea:	4304      	orrs	r4, r0
 8012cec:	d01a      	beq.n	8012d24 <floor+0x8c>
 8012cee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012d70 <floor+0xd8>
 8012cf2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012cf6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfe:	ddeb      	ble.n	8012cd8 <floor+0x40>
 8012d00:	2900      	cmp	r1, #0
 8012d02:	bfbe      	ittt	lt
 8012d04:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012d08:	fa40 f303 	asrlt.w	r3, r0, r3
 8012d0c:	18c9      	addlt	r1, r1, r3
 8012d0e:	ea21 0102 	bic.w	r1, r1, r2
 8012d12:	2000      	movs	r0, #0
 8012d14:	e7e0      	b.n	8012cd8 <floor+0x40>
 8012d16:	2b33      	cmp	r3, #51	; 0x33
 8012d18:	dd05      	ble.n	8012d26 <floor+0x8e>
 8012d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d1e:	d101      	bne.n	8012d24 <floor+0x8c>
 8012d20:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012d24:	bd30      	pop	{r4, r5, pc}
 8012d26:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2e:	40e2      	lsrs	r2, r4
 8012d30:	4202      	tst	r2, r0
 8012d32:	d0f7      	beq.n	8012d24 <floor+0x8c>
 8012d34:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012d70 <floor+0xd8>
 8012d38:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012d3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	ddc8      	ble.n	8012cd8 <floor+0x40>
 8012d46:	2900      	cmp	r1, #0
 8012d48:	da02      	bge.n	8012d50 <floor+0xb8>
 8012d4a:	2b14      	cmp	r3, #20
 8012d4c:	d103      	bne.n	8012d56 <floor+0xbe>
 8012d4e:	3101      	adds	r1, #1
 8012d50:	ea20 0002 	bic.w	r0, r0, r2
 8012d54:	e7c0      	b.n	8012cd8 <floor+0x40>
 8012d56:	2401      	movs	r4, #1
 8012d58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012d5c:	fa04 f303 	lsl.w	r3, r4, r3
 8012d60:	4418      	add	r0, r3
 8012d62:	42a8      	cmp	r0, r5
 8012d64:	bf38      	it	cc
 8012d66:	1909      	addcc	r1, r1, r4
 8012d68:	e7f2      	b.n	8012d50 <floor+0xb8>
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	4601      	mov	r1, r0
 8012d6e:	e7b3      	b.n	8012cd8 <floor+0x40>
 8012d70:	8800759c 	.word	0x8800759c
 8012d74:	7e37e43c 	.word	0x7e37e43c
 8012d78:	bff00000 	.word	0xbff00000
 8012d7c:	000fffff 	.word	0x000fffff

08012d80 <scalbn>:
 8012d80:	ee10 1a90 	vmov	r1, s1
 8012d84:	b510      	push	{r4, lr}
 8012d86:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012d8a:	b98c      	cbnz	r4, 8012db0 <scalbn+0x30>
 8012d8c:	ee10 3a10 	vmov	r3, s0
 8012d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d94:	430b      	orrs	r3, r1
 8012d96:	d011      	beq.n	8012dbc <scalbn+0x3c>
 8012d98:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012e60 <scalbn+0xe0>
 8012d9c:	4b3c      	ldr	r3, [pc, #240]	; (8012e90 <scalbn+0x110>)
 8012d9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012da2:	4298      	cmp	r0, r3
 8012da4:	da0b      	bge.n	8012dbe <scalbn+0x3e>
 8012da6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012e68 <scalbn+0xe8>
 8012daa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012dae:	e005      	b.n	8012dbc <scalbn+0x3c>
 8012db0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012db4:	429c      	cmp	r4, r3
 8012db6:	d107      	bne.n	8012dc8 <scalbn+0x48>
 8012db8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012dbc:	bd10      	pop	{r4, pc}
 8012dbe:	ee10 1a90 	vmov	r1, s1
 8012dc2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012dc6:	3c36      	subs	r4, #54	; 0x36
 8012dc8:	4404      	add	r4, r0
 8012dca:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012dce:	429c      	cmp	r4, r3
 8012dd0:	dd0d      	ble.n	8012dee <scalbn+0x6e>
 8012dd2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012e70 <scalbn+0xf0>
 8012dd6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012e78 <scalbn+0xf8>
 8012dda:	eeb0 6b47 	vmov.f64	d6, d7
 8012dde:	ee10 3a90 	vmov	r3, s1
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012de8:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012dec:	e7e6      	b.n	8012dbc <scalbn+0x3c>
 8012dee:	2c00      	cmp	r4, #0
 8012df0:	dd0a      	ble.n	8012e08 <scalbn+0x88>
 8012df2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012df6:	ec53 2b10 	vmov	r2, r3, d0
 8012dfa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012dfe:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012e02:	ec43 2b10 	vmov	d0, r2, r3
 8012e06:	e7d9      	b.n	8012dbc <scalbn+0x3c>
 8012e08:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012e0c:	da19      	bge.n	8012e42 <scalbn+0xc2>
 8012e0e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e12:	4298      	cmp	r0, r3
 8012e14:	ee10 3a90 	vmov	r3, s1
 8012e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e1c:	dd09      	ble.n	8012e32 <scalbn+0xb2>
 8012e1e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012e70 <scalbn+0xf0>
 8012e22:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012e78 <scalbn+0xf8>
 8012e26:	eeb0 7b40 	vmov.f64	d7, d0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012e30:	e7bb      	b.n	8012daa <scalbn+0x2a>
 8012e32:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012e68 <scalbn+0xe8>
 8012e36:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012e80 <scalbn+0x100>
 8012e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	e7f4      	b.n	8012e2c <scalbn+0xac>
 8012e42:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012e46:	ec53 2b10 	vmov	r2, r3, d0
 8012e4a:	3436      	adds	r4, #54	; 0x36
 8012e4c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012e50:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012e54:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012e88 <scalbn+0x108>
 8012e58:	ec43 2b10 	vmov	d0, r2, r3
 8012e5c:	e7a5      	b.n	8012daa <scalbn+0x2a>
 8012e5e:	bf00      	nop
 8012e60:	00000000 	.word	0x00000000
 8012e64:	43500000 	.word	0x43500000
 8012e68:	c2f8f359 	.word	0xc2f8f359
 8012e6c:	01a56e1f 	.word	0x01a56e1f
 8012e70:	8800759c 	.word	0x8800759c
 8012e74:	7e37e43c 	.word	0x7e37e43c
 8012e78:	8800759c 	.word	0x8800759c
 8012e7c:	fe37e43c 	.word	0xfe37e43c
 8012e80:	c2f8f359 	.word	0xc2f8f359
 8012e84:	81a56e1f 	.word	0x81a56e1f
 8012e88:	00000000 	.word	0x00000000
 8012e8c:	3c900000 	.word	0x3c900000
 8012e90:	ffff3cb0 	.word	0xffff3cb0

08012e94 <_init>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	bf00      	nop
 8012e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e9a:	bc08      	pop	{r3}
 8012e9c:	469e      	mov	lr, r3
 8012e9e:	4770      	bx	lr

08012ea0 <_fini>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	bf00      	nop
 8012ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea6:	bc08      	pop	{r3}
 8012ea8:	469e      	mov	lr, r3
 8012eaa:	4770      	bx	lr
