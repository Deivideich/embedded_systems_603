
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e35c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800e600  0800e600  0001e600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed58  0800ed58  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed58  0800ed58  0001ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed60  0800ed60  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed60  0800ed60  0001ed60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed64  0800ed64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800ed68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  240001e4  0800ef4c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004e6c  0800ef4c  00024e6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d7b  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494a  00000000  00000000  00045f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0004a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  0004c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f60a  00000000  00000000  0004df40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027097  00000000  00000000  0008d54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001981a1  00000000  00000000  000b45e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024c782  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008644  00000000  00000000  0024c7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5e4 	.word	0x0800e5e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800e5e4 	.word	0x0800e5e4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <MX_FREERTOS_Init+0x38>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_FREERTOS_Init+0x3c>)
 80007ca:	f007 fe01 	bl	80083d0 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_FREERTOS_Init+0x40>)
 80007d2:	6013      	str	r3, [r2, #0]
  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <MX_FREERTOS_Init+0x44>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <MX_FREERTOS_Init+0x48>)
 80007da:	f007 fdf9 	bl	80083d0 <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <MX_FREERTOS_Init+0x4c>)
 80007e2:	6013      	str	r3, [r2, #0]
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <MX_FREERTOS_Init+0x50>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <MX_FREERTOS_Init+0x54>)
 80007ea:	f007 fdf1 	bl	80083d0 <osThreadNew>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <MX_FREERTOS_Init+0x58>)
 80007f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	0800e70c 	.word	0x0800e70c
 80007fc:	0800081d 	.word	0x0800081d
 8000800:	24000200 	.word	0x24000200
 8000804:	0800e730 	.word	0x0800e730
 8000808:	08000849 	.word	0x08000849
 800080c:	24000204 	.word	0x24000204
 8000810:	0800e754 	.word	0x0800e754
 8000814:	08000a8d 	.word	0x08000a8d
 8000818:	24000208 	.word	0x24000208

0800081c <blinkGreenTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void blinkGreenTask(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_yellow_GPIO_Port,LD2_yellow_Pin);
 8000824:	2102      	movs	r1, #2
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <blinkGreenTask+0x24>)
 8000828:	f002 f983 	bl	8002b32 <HAL_GPIO_TogglePin>
	for(;;)
	{
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 800082c:	2101      	movs	r1, #1
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <blinkGreenTask+0x28>)
 8000830:	f002 f97f 	bl	8002b32 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000838:	f007 fe5c 	bl	80084f4 <osDelay>
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 800083c:	e7f6      	b.n	800082c <blinkGreenTask+0x10>
 800083e:	bf00      	nop
 8000840:	58021000 	.word	0x58021000
 8000844:	58020400 	.word	0x58020400

08000848 <imuTask>:
	}
}

void imuTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0c2      	sub	sp, #264	; 0x108
 800084c:	af00      	add	r7, sp, #0
 800084e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000856:	6018      	str	r0, [r3, #0]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 8000858:	4a7c      	ldr	r2, [pc, #496]	; (8000a4c <imuTask+0x204>)
 800085a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	4611      	mov	r1, r2
 8000862:	8019      	strh	r1, [r3, #0]
 8000864:	3302      	adds	r3, #2
 8000866:	0c12      	lsrs	r2, r2, #16
 8000868:	701a      	strb	r2, [r3, #0]
	  struct mpu9250 mpu={AFS_2G,GFS_250DPS}; //Struct for storing gyro and acc data
 800086a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086e:	22c0      	movs	r2, #192	; 0xc0
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00a fc0b 	bl	800b08e <memset>
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 8000878:	4875      	ldr	r0, [pc, #468]	; (8000a50 <imuTask+0x208>)
 800087a:	f00b f96d 	bl	800bb58 <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 800087e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000882:	2302      	movs	r3, #2
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	f000 faa3 	bl	8000dd2 <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 800088c:	4871      	ldr	r0, [pc, #452]	; (8000a54 <imuTask+0x20c>)
 800088e:	f00b f963 	bl	800bb58 <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 8000892:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fb65 	bl	8000f6c <calibrateMPU9250>
	  printf("AccBias {");
 80008a2:	486d      	ldr	r0, [pc, #436]	; (8000a58 <imuTask+0x210>)
 80008a4:	f00b f8d2 	bl	800ba4c <iprintf>
	  for(int i=0; i<3; i++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80008ae:	e01b      	b.n	80008e8 <imuTask+0xa0>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 80008b0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80008b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008b8:	4413      	add	r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80008c8:	443b      	add	r3, r7
 80008ca:	3bf0      	subs	r3, #240	; 0xf0
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d4:	ec53 2b17 	vmov	r2, r3, d7
 80008d8:	4860      	ldr	r0, [pc, #384]	; (8000a5c <imuTask+0x214>)
 80008da:	f00b f8b7 	bl	800ba4c <iprintf>
	  for(int i=0; i<3; i++){
 80008de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008e2:	3301      	adds	r3, #1
 80008e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80008e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	dddf      	ble.n	80008b0 <imuTask+0x68>
	  }
	  printf("} GyroBias{");
 80008f0:	485b      	ldr	r0, [pc, #364]	; (8000a60 <imuTask+0x218>)
 80008f2:	f00b f8ab 	bl	800ba4c <iprintf>
	  for(int i=0; i<3; i++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80008fc:	e01b      	b.n	8000936 <imuTask+0xee>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 80008fe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8000902:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000916:	443b      	add	r3, r7
 8000918:	3be4      	subs	r3, #228	; 0xe4
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000922:	ec53 2b17 	vmov	r2, r3, d7
 8000926:	484d      	ldr	r0, [pc, #308]	; (8000a5c <imuTask+0x214>)
 8000928:	f00b f890 	bl	800ba4c <iprintf>
	  for(int i=0; i<3; i++){
 800092c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000930:	3301      	adds	r3, #1
 8000932:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000936:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800093a:	2b02      	cmp	r3, #2
 800093c:	dddf      	ble.n	80008fe <imuTask+0xb6>
	  }
	  printf("}\r\n");
 800093e:	4849      	ldr	r0, [pc, #292]	; (8000a64 <imuTask+0x21c>)
 8000940:	f00b f90a 	bl	800bb58 <puts>

	  printf("Starting IMU...\r\n");
 8000944:	4848      	ldr	r0, [pc, #288]	; (8000a68 <imuTask+0x220>)
 8000946:	f00b f907 	bl	800bb58 <puts>
	  float initPose[] = {100,100,90};
 800094a:	4a48      	ldr	r2, [pc, #288]	; (8000a6c <imuTask+0x224>)
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  setPose(&mpu, initPose);
 8000956:	f107 020c 	add.w	r2, r7, #12
 800095a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f829 	bl	80019b8 <setPose>
	for(;;)
	{
		updateData(&mpu, 0.1, 1); //Printing with func from header file
 8000966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800096e:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8000a70 <imuTask+0x228>
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe6c 	bl	8001650 <updateData>
		printf("Acc XYZ:");
 8000978:	483e      	ldr	r0, [pc, #248]	; (8000a74 <imuTask+0x22c>)
 800097a:	f00b f867 	bl	800ba4c <iprintf>
		for(int i=0;i<3;i++){
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000984:	e015      	b.n	80009b2 <imuTask+0x16a>
		  printf("{%05.3f}",mpu.acc[i]);
 8000986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800098a:	3306      	adds	r3, #6
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000992:	443b      	add	r3, r7
 8000994:	3bd4      	subs	r3, #212	; 0xd4
 8000996:	edd3 7a00 	vldr	s15, [r3]
 800099a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099e:	ec53 2b17 	vmov	r2, r3, d7
 80009a2:	4835      	ldr	r0, [pc, #212]	; (8000a78 <imuTask+0x230>)
 80009a4:	f00b f852 	bl	800ba4c <iprintf>
		for(int i=0;i<3;i++){
 80009a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80009ac:	3301      	adds	r3, #1
 80009ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80009b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	dde5      	ble.n	8000986 <imuTask+0x13e>
		}
		printf(" Gyro XYZ:");
 80009ba:	4830      	ldr	r0, [pc, #192]	; (8000a7c <imuTask+0x234>)
 80009bc:	f00b f846 	bl	800ba4c <iprintf>
		for(int i = 0; i<3;i++){
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80009c6:	e015      	b.n	80009f4 <imuTask+0x1ac>
		   printf("{%05.1f}",mpu.gyro[i]);
 80009c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80009cc:	330a      	adds	r3, #10
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80009d4:	443b      	add	r3, r7
 80009d6:	3bd8      	subs	r3, #216	; 0xd8
 80009d8:	edd3 7a00 	vldr	s15, [r3]
 80009dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e0:	ec53 2b17 	vmov	r2, r3, d7
 80009e4:	4826      	ldr	r0, [pc, #152]	; (8000a80 <imuTask+0x238>)
 80009e6:	f00b f831 	bl	800ba4c <iprintf>
		for(int i = 0; i<3;i++){
 80009ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80009ee:	3301      	adds	r3, #1
 80009f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80009f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	dde5      	ble.n	80009c8 <imuTask+0x180>
		}
		printf(" Pose XYZ:");
 80009fc:	4821      	ldr	r0, [pc, #132]	; (8000a84 <imuTask+0x23c>)
 80009fe:	f00b f825 	bl	800ba4c <iprintf>
		for(int i = 0; i<3;i++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000a08:	e015      	b.n	8000a36 <imuTask+0x1ee>
		   printf("{%05.1f}",mpu.pose[i]);
 8000a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a0e:	332c      	adds	r3, #44	; 0x2c
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000a16:	443b      	add	r3, r7
 8000a18:	3bd4      	subs	r3, #212	; 0xd4
 8000a1a:	edd3 7a00 	vldr	s15, [r3]
 8000a1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a22:	ec53 2b17 	vmov	r2, r3, d7
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <imuTask+0x238>)
 8000a28:	f00b f810 	bl	800ba4c <iprintf>
		for(int i = 0; i<3;i++){
 8000a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a30:	3301      	adds	r3, #1
 8000a32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	dde5      	ble.n	8000a0a <imuTask+0x1c2>
		}
		printf("\r\n");
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <imuTask+0x240>)
 8000a40:	f00b f88a 	bl	800bb58 <puts>
		osDelay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f007 fd55 	bl	80084f4 <osDelay>
		updateData(&mpu, 0.1, 1); //Printing with func from header file
 8000a4a:	e78c      	b.n	8000966 <imuTask+0x11e>
 8000a4c:	0800e6d0 	.word	0x0800e6d0
 8000a50:	0800e62c 	.word	0x0800e62c
 8000a54:	0800e640 	.word	0x0800e640
 8000a58:	0800e654 	.word	0x0800e654
 8000a5c:	0800e660 	.word	0x0800e660
 8000a60:	0800e66c 	.word	0x0800e66c
 8000a64:	0800e678 	.word	0x0800e678
 8000a68:	0800e67c 	.word	0x0800e67c
 8000a6c:	0800e6d4 	.word	0x0800e6d4
 8000a70:	3dcccccd 	.word	0x3dcccccd
 8000a74:	0800e690 	.word	0x0800e690
 8000a78:	0800e69c 	.word	0x0800e69c
 8000a7c:	0800e6a8 	.word	0x0800e6a8
 8000a80:	0800e6b4 	.word	0x0800e6b4
 8000a84:	0800e6c0 	.word	0x0800e6c0
 8000a88:	0800e6cc 	.word	0x0800e6cc

08000a8c <escTask>:
	}
}

void escTask(void *argument){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

	for(;;){
 8000a94:	e7fe      	b.n	8000a94 <escTask+0x8>
	...

08000a98 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b56      	ldr	r3, [pc, #344]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a54      	ldr	r2, [pc, #336]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000acc:	4b4e      	ldr	r3, [pc, #312]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a36      	ldr	r2, [pc, #216]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MX_GPIO_Init+0x170>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_GPIO_Init+0x174>)
 8000b68:	f001 ffca 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4827      	ldr	r0, [pc, #156]	; (8000c10 <MX_GPIO_Init+0x178>)
 8000b72:	f001 ffc5 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b7c:	4825      	ldr	r0, [pc, #148]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000b7e:	f001 ffbf 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <MX_GPIO_Init+0x180>)
 8000b88:	f001 ffba 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481a      	ldr	r0, [pc, #104]	; (8000c0c <MX_GPIO_Init+0x174>)
 8000ba4:	f001 fdfc 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <MX_GPIO_Init+0x178>)
 8000bc0:	f001 fdee 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8000bc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000bde:	f001 fddf 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_GPIO_Init+0x180>)
 8000bfa:	f001 fdd1 	bl	80027a0 <HAL_GPIO_Init>

}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	; 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58020c00 	.word	0x58020c00
 8000c18:	58021000 	.word	0x58021000

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c26:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c28:	bf00      	nop
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <main+0xb0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d004      	beq.n	8000c40 <main+0x24>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1e5a      	subs	r2, r3, #1
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dcf4      	bgt.n	8000c2a <main+0xe>
  if ( timeout < 0 )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da01      	bge.n	8000c4a <main+0x2e>
  {
  Error_Handler();
 8000c46:	f000 f8bf 	bl	8000dc8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f001 fc03 	bl	8002454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f83f 	bl	8000cd0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <main+0xb0>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <main+0xb0>)
 8000c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <main+0xb0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f001 ff79 	bl	8002b68 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 ff8f 	bl	8002b9c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c84:	bf00      	nop
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <main+0xb0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d104      	bne.n	8000c9c <main+0x80>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dcf4      	bgt.n	8000c86 <main+0x6a>
if ( timeout < 0 )
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da01      	bge.n	8000ca6 <main+0x8a>
{
Error_Handler();
 8000ca2:	f000 f891 	bl	8000dc8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f7ff fef7 	bl	8000a98 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000caa:	f000 feb9 	bl	8001a20 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000cae:	f001 faf5 	bl	800229c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000cb2:	f000 ff0d 	bl	8001ad0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000cb6:	f001 f96b 	bl	8001f90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cba:	f001 f9df 	bl	800207c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cbe:	f007 fb3d 	bl	800833c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cc2:	f7ff fd7d 	bl	80007c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cc6:	f007 fb5d 	bl	8008384 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0xae>
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09c      	sub	sp, #112	; 0x70
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	224c      	movs	r2, #76	; 0x4c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00a f9d5 	bl	800b08e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00a f9cf 	bl	800b08e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cf0:	2004      	movs	r0, #4
 8000cf2:	f001 ff67 	bl	8002bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <SystemClock_Config+0xf0>)
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <SystemClock_Config+0xf0>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <SystemClock_Config+0xf0>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <SystemClock_Config+0xf4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d18:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <SystemClock_Config+0xf4>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <SystemClock_Config+0xf4>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2c:	bf00      	nop
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <SystemClock_Config+0xf4>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3a:	d1f8      	bne.n	8000d2e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d52:	2312      	movs	r3, #18
 8000d54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d62:	230c      	movs	r3, #12
 8000d64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d66:	2302      	movs	r3, #2
 8000d68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 ff7f 	bl	8002c78 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d80:	f000 f822 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	233f      	movs	r3, #63	; 0x3f
 8000d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2101      	movs	r1, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fb93 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000db4:	f000 f808 	bl	8000dc8 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3770      	adds	r7, #112	; 0x70
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	58000400 	.word	0x58000400
 8000dc4:	58024800 	.word	0x58024800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>

08000dd2 <initMPU9250>:
#include "spi.h"
#include "stm32h7xx_hal.h"
#include "myprintf.h"

void initMPU9250(struct mpu9250 * mpu9250, uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	461a      	mov	r2, r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	70fb      	strb	r3, [r7, #3]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70bb      	strb	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e040      	b.n	8000e74 <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e01d      	b.n	8000e34 <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4413      	add	r3, r2
 8000e06:	330e      	adds	r3, #14
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4413      	add	r3, r2
 8000e20:	331c      	adds	r3, #28
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3304      	adds	r3, #4
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	3301      	adds	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	ddde      	ble.n	8000df8 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3306      	adds	r3, #6
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	3304      	adds	r3, #4
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	330a      	adds	r3, #10
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	332c      	adds	r3, #44	; 0x2c
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3304      	adds	r3, #4
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	ddbb      	ble.n	8000df2 <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	uint8_t c;
 // wake up device
  mpu9250_write_reg(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8000e82:	2100      	movs	r1, #0
 8000e84:	206b      	movs	r0, #107	; 0x6b
 8000e86:	f000 ff29 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f001 fb74 	bl	8002578 <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8000e90:	2101      	movs	r1, #1
 8000e92:	206b      	movs	r0, #107	; 0x6b
 8000e94:	f000 ff22 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(200);
 8000e98:	20c8      	movs	r0, #200	; 0xc8
 8000e9a:	f001 fb6d 	bl	8002578 <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum HAL_HAL_Delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  mpu9250_write_reg(CONFIG, 0x03);
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	201a      	movs	r0, #26
 8000ea2:	f000 ff1b 	bl	8001cdc <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2019      	movs	r0, #25
 8000eac:	f000 ff16 	bl	8001cdc <mpu9250_write_reg>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  mpu9250_read_reg(GYRO_CONFIG, &c,sizeof(c)); // get current GYRO_CONFIG register value
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	201b      	movs	r0, #27
 8000eba:	f000 ff35 	bl	8001d28 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f023 0318 	bic.w	r3, r3, #24
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 8000ed2:	78bb      	ldrb	r3, [r7, #2]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	201b      	movs	r0, #27
 8000eea:	f000 fef7 	bl	8001cdc <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 8000eee:	f107 030f 	add.w	r3, r7, #15
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f000 ff16 	bl	8001d28 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f023 0318 	bic.w	r3, r3, #24
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	201c      	movs	r0, #28
 8000f1e:	f000 fedd 	bl	8001cdc <mpu9250_write_reg>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  mpu9250_read_reg(ACCEL_CONFIG2, &c, sizeof(c)); // get current ACCEL_CONFIG2 register value
 8000f22:	f107 030f 	add.w	r3, r7, #15
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	201d      	movs	r0, #29
 8000f2c:	f000 fefc 	bl	8001d28 <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f023 030f 	bic.w	r3, r3, #15
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f043 0303 	orr.w	r3, r3, #3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	4619      	mov	r1, r3
 8000f48:	201d      	movs	r0, #29
 8000f4a:	f000 fec7 	bl	8001cdc <mpu9250_write_reg>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
//   mpu9250_write_reg(INT_PIN_CFG, 0x22);
   mpu9250_write_reg(INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
 8000f4e:	2112      	movs	r1, #18
 8000f50:	2037      	movs	r0, #55	; 0x37
 8000f52:	f000 fec3 	bl	8001cdc <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8000f56:	2101      	movs	r1, #1
 8000f58:	2038      	movs	r0, #56	; 0x38
 8000f5a:	f000 febf 	bl	8001cdc <mpu9250_write_reg>
   HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f001 fb0a 	bl	8002578 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b098      	sub	sp, #96	; 0x60
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8000f76:	2300      	movs	r3, #0
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	206b      	movs	r0, #107	; 0x6b
 8000f92:	f000 fea3 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f001 faee 	bl	8002578 <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  mpu9250_write_reg(PWR_MGMT_1, 0x01);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	206b      	movs	r0, #107	; 0x6b
 8000fa0:	f000 fe9c 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	206c      	movs	r0, #108	; 0x6c
 8000fa8:	f000 fe98 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(200);
 8000fac:	20c8      	movs	r0, #200	; 0xc8
 8000fae:	f001 fae3 	bl	8002578 <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2038      	movs	r0, #56	; 0x38
 8000fb6:	f000 fe91 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2023      	movs	r0, #35	; 0x23
 8000fbe:	f000 fe8d 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	206b      	movs	r0, #107	; 0x6b
 8000fc6:	f000 fe89 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2024      	movs	r0, #36	; 0x24
 8000fce:	f000 fe85 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	206a      	movs	r0, #106	; 0x6a
 8000fd6:	f000 fe81 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000fda:	210c      	movs	r1, #12
 8000fdc:	206a      	movs	r0, #106	; 0x6a
 8000fde:	f000 fe7d 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(15);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f001 fac8 	bl	8002578 <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000fe8:	2101      	movs	r1, #1
 8000fea:	201a      	movs	r0, #26
 8000fec:	f000 fe76 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2019      	movs	r0, #25
 8000ff4:	f000 fe72 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201b      	movs	r0, #27
 8000ffc:	f000 fe6e 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f000 fe6a 	bl	8001cdc <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001008:	2383      	movs	r3, #131	; 0x83
 800100a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800100e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001012:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	206a      	movs	r0, #106	; 0x6a
 800101a:	f000 fe5f 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 800101e:	2178      	movs	r1, #120	; 0x78
 8001020:	2023      	movs	r0, #35	; 0x23
 8001022:	f000 fe5b 	bl	8001cdc <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f001 faa6 	bl	8002578 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800102c:	2100      	movs	r1, #0
 800102e:	2023      	movs	r0, #35	; 0x23
 8001030:	f000 fe54 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 8001034:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001038:	2202      	movs	r2, #2
 800103a:	4619      	mov	r1, r3
 800103c:	2072      	movs	r0, #114	; 0x72
 800103e:	f000 fe73 	bl	8001d28 <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001042:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001058:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800105c:	4ac0      	ldr	r2, [pc, #768]	; (8001360 <calibrateMPU9250+0x3f4>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8001068:	2300      	movs	r3, #0
 800106a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800106e:	e071      	b.n	8001154 <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001070:	2300      	movs	r3, #0
 8001072:	82bb      	strh	r3, [r7, #20]
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
 8001078:	2300      	movs	r3, #0
 800107a:	833b      	strh	r3, [r7, #24]
 800107c:	2300      	movs	r3, #0
 800107e:	81bb      	strh	r3, [r7, #12]
 8001080:	2300      	movs	r3, #0
 8001082:	81fb      	strh	r3, [r7, #14]
 8001084:	2300      	movs	r3, #0
 8001086:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 8001088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800108c:	220c      	movs	r2, #12
 800108e:	4619      	mov	r1, r3
 8001090:	2074      	movs	r0, #116	; 0x74
 8001092:	f000 fe49 	bl	8001d28 <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001096:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80010aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80010be:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80010d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80010e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80010fa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8001118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800111e:	4413      	add	r3, r2
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001128:	4413      	add	r3, r2
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800112c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800112e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001138:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800113c:	4413      	add	r3, r2
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001142:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 800114a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800114e:	3301      	adds	r3, #1
 8001150:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001154:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001158:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800115c:	429a      	cmp	r2, r3
 800115e:	d387      	bcc.n	8001070 <calibrateMPU9250+0x104>

  }

    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001162:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001166:	fb92 f3f3 	sdiv	r3, r2, r3
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 800116c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800116e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001172:	fb92 f3f3 	sdiv	r3, r2, r3
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 8001178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800117a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 8001184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800118a:	fb92 f3f3 	sdiv	r3, r2, r3
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 8001190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001192:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001196:	fb92 f3f3 	sdiv	r3, r2, r3
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 800119c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800119e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd05      	ble.n	80011ba <calibrateMPU9250+0x24e>
 80011ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
 80011b8:	e004      	b.n	80011c4 <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80011ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80011c0:	4413      	add	r3, r2
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80011c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c6:	425b      	negs	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da00      	bge.n	80011ce <calibrateMPU9250+0x262>
 80011cc:	3303      	adds	r3, #3
 80011ce:	109b      	asrs	r3, r3, #2
 80011d0:	121b      	asrs	r3, r3, #8
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80011d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011da:	425b      	negs	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da00      	bge.n	80011e2 <calibrateMPU9250+0x276>
 80011e0:	3303      	adds	r3, #3
 80011e2:	109b      	asrs	r3, r3, #2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80011ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ec:	425b      	negs	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da00      	bge.n	80011f4 <calibrateMPU9250+0x288>
 80011f2:	3303      	adds	r3, #3
 80011f4:	109b      	asrs	r3, r3, #2
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80011fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001200:	425b      	negs	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	da00      	bge.n	8001208 <calibrateMPU9250+0x29c>
 8001206:	3303      	adds	r3, #3
 8001208:	109b      	asrs	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001212:	425b      	negs	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <calibrateMPU9250+0x2ae>
 8001218:	3303      	adds	r3, #3
 800121a:	109b      	asrs	r3, r3, #2
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001226:	425b      	negs	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	da00      	bge.n	800122e <calibrateMPU9250+0x2c2>
 800122c:	3303      	adds	r3, #3
 800122e:	109b      	asrs	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 8001236:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800123a:	4619      	mov	r1, r3
 800123c:	2013      	movs	r0, #19
 800123e:	f000 fd4d 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 8001242:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001246:	4619      	mov	r1, r3
 8001248:	2014      	movs	r0, #20
 800124a:	f000 fd47 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 800124e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001252:	4619      	mov	r1, r3
 8001254:	2015      	movs	r0, #21
 8001256:	f000 fd41 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 800125a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800125e:	4619      	mov	r1, r3
 8001260:	2016      	movs	r0, #22
 8001262:	f000 fd3b 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 8001266:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800126a:	4619      	mov	r1, r3
 800126c:	2017      	movs	r0, #23
 800126e:	f000 fd35 	bl	8001cdc <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 8001272:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001276:	4619      	mov	r1, r3
 8001278:	2018      	movs	r0, #24
 800127a:	f000 fd2f 	bl	8001cdc <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001288:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800129e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012bc:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80012c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3308      	adds	r3, #8
 80012da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012de:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 80012ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012f2:	2202      	movs	r2, #2
 80012f4:	4619      	mov	r1, r3
 80012f6:	2077      	movs	r0, #119	; 0x77
 80012f8:	f000 fd16 	bl	8001d28 <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80012fc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001306:	4313      	orrs	r3, r2
 8001308:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 800130a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800130e:	2202      	movs	r2, #2
 8001310:	4619      	mov	r1, r3
 8001312:	207a      	movs	r0, #122	; 0x7a
 8001314:	f000 fd08 	bl	8001d28 <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001318:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001322:	4313      	orrs	r3, r2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 8001326:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800132a:	2202      	movs	r2, #2
 800132c:	4619      	mov	r1, r3
 800132e:	207d      	movs	r0, #125	; 0x7d
 8001330:	f000 fcfa 	bl	8001d28 <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001334:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800133e:	4313      	orrs	r3, r2
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001342:	2301      	movs	r3, #1
 8001344:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <calibrateMPU9250+0x3f8>)
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	4611      	mov	r1, r2
 8001350:	8019      	strh	r1, [r3, #0]
 8001352:	3302      	adds	r3, #2
 8001354:	0c12      	lsrs	r2, r2, #16
 8001356:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8001358:	2300      	movs	r3, #0
 800135a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800135e:	e01b      	b.n	8001398 <calibrateMPU9250+0x42c>
 8001360:	aaaaaaab 	.word	0xaaaaaaab
 8001364:	0800e6e0 	.word	0x0800e6e0
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001368:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	3360      	adds	r3, #96	; 0x60
 8001370:	443b      	add	r3, r7
 8001372:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001376:	461a      	mov	r2, r3
 8001378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <calibrateMPU9250+0x422>
 8001380:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001384:	3360      	adds	r3, #96	; 0x60
 8001386:	443b      	add	r3, r7
 8001388:	2201      	movs	r2, #1
 800138a:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 800138e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001392:	3301      	adds	r3, #1
 8001394:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001398:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800139c:	2b02      	cmp	r3, #2
 800139e:	d9e3      	bls.n	8001368 <calibrateMPU9250+0x3fc>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da00      	bge.n	80013aa <calibrateMPU9250+0x43e>
 80013a8:	3307      	adds	r3, #7
 80013aa:	10db      	asrs	r3, r3, #3
 80013ac:	425b      	negs	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80013b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da00      	bge.n	80013bc <calibrateMPU9250+0x450>
 80013ba:	3307      	adds	r3, #7
 80013bc:	10db      	asrs	r3, r3, #3
 80013be:	425b      	negs	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80013c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <calibrateMPU9250+0x462>
 80013cc:	3307      	adds	r3, #7
 80013ce:	10db      	asrs	r3, r3, #3
 80013d0:	425b      	negs	r3, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	121b      	asrs	r3, r3, #8
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80013e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80013ec:	7f3b      	ldrb	r3, [r7, #28]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	121b      	asrs	r3, r3, #8
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001408:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800140c:	7f7b      	ldrb	r3, [r7, #29]
 800140e:	4313      	orrs	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	121b      	asrs	r3, r3, #8
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001428:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800142c:	7fbb      	ldrb	r3, [r7, #30]
 800142e:	4313      	orrs	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
//  mpu9250_write_reg(YA_OFFSET_L, data[3]);
//  mpu9250_write_reg(ZA_OFFSET_H, data[4]);
//  mpu9250_write_reg(ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001440:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001460:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3304      	adds	r3, #4
 8001470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001474:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001482:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3308      	adds	r3, #8
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	edc3 7a00 	vstr	s15, [r3]
}
 800149a:	bf00      	nop
 800149c:	3760      	adds	r7, #96	; 0x60
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop

080014a4 <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	220e      	movs	r2, #14
 80014b2:	4619      	mov	r1, r3
 80014b4:	203b      	movs	r0, #59	; 0x3b
 80014b6:	f000 fc37 	bl	8001d28 <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 80014cc:	7abb      	ldrb	r3, [r7, #10]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b219      	sxth	r1, r3
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3302      	adds	r3, #2
 80014da:	430a      	orrs	r2, r1
 80014dc:	b212      	sxth	r2, r2
 80014de:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 80014e0:	7b3b      	ldrb	r3, [r7, #12]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b219      	sxth	r1, r3
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	430a      	orrs	r2, r1
 80014f0:	b212      	sxth	r2, r2
 80014f2:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b219      	sxth	r1, r3
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3306      	adds	r3, #6
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 8001508:	7c3b      	ldrb	r3, [r7, #16]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b219      	sxth	r1, r3
 800150e:	7c7b      	ldrb	r3, [r7, #17]
 8001510:	b21a      	sxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3308      	adds	r3, #8
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 800151c:	7cbb      	ldrb	r3, [r7, #18]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b219      	sxth	r1, r3
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	330a      	adds	r3, #10
 800152a:	430a      	orrs	r2, r1
 800152c:	b212      	sxth	r2, r2
 800152e:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 8001530:	7d3b      	ldrb	r3, [r7, #20]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b219      	sxth	r1, r3
 8001536:	7d7b      	ldrb	r3, [r7, #21]
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	330c      	adds	r3, #12
 800153e:	430a      	orrs	r2, r1
 8001540:	b212      	sxth	r2, r2
 8001542:	801a      	strh	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d823      	bhi.n	80015a8 <getGres+0x5c>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <getGres+0x1c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001579 	.word	0x08001579
 800156c:	08001585 	.word	0x08001585
 8001570:	08001591 	.word	0x08001591
 8001574:	0800159d 	.word	0x0800159d
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
    case GFS_250DPS:
    		mpu9250->_gRes = 250.0/32768.0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <getGres+0x74>)
 800157c:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	e013      	b.n	80015ac <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <getGres+0x78>)
 8001588:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	e00d      	b.n	80015ac <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <getGres+0x7c>)
 8001594:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	e007      	b.n	80015ac <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <getGres+0x80>)
 80015a0:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	e001      	b.n	80015ac <getGres+0x60>
         break;
  }
  return 0.0;
 80015a8:	f04f 0300 	mov.w	r3, #0
}
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	3bfa0000 	.word	0x3bfa0000
 80015c4:	3c7a0000 	.word	0x3c7a0000
 80015c8:	3cfa0000 	.word	0x3cfa0000
 80015cc:	3d7a0000 	.word	0x3d7a0000

080015d0 <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d827      	bhi.n	8001634 <getAres+0x64>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <getAres+0x1c>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	0800160b 	.word	0x0800160b
 80015f4:	08001619 	.word	0x08001619
 80015f8:	08001627 	.word	0x08001627
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
		 mpu9250->_aRes = 2.0f/32768.0f;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001602:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	e016      	b.n	8001638 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001610:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	e00f      	b.n	8001638 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800161e:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	e008      	b.n	8001638 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800162c:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	e001      	b.n	8001638 <getAres+0x68>
         break;
  }
  return 0.0;
 8001634:	f04f 0300 	mov.w	r3, #0
}
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0000      	movs	r0, r0
	...

08001650 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 8001650:	b580      	push	{r7, lr}
 8001652:	ed2d 8b02 	vpush	{d8}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001660:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	330c      	adds	r3, #12
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff1b 	bl	80014a4 <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e023      	b.n	80016bc <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ffa0 	bl	80015d0 <getAres>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800169a:	4618      	mov	r0, r3
 800169c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	4403      	add	r3, r0
 80016ac:	330e      	adds	r3, #14
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	ddd8      	ble.n	8001674 <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 80016c2:	2304      	movs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	e025      	b.n	8001714 <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3304      	adds	r3, #4
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff ff34 	bl	800154c <getGres>
 80016e4:	eef0 7a40 	vmov.f32	s15, s0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1f1a      	subs	r2, r3, #4
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016f2:	4618      	mov	r0, r3
 80016f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	4403      	add	r3, r0
 8001702:	331c      	adds	r3, #28
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	3301      	adds	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b06      	cmp	r3, #6
 8001718:	ddd6      	ble.n	80016c8 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4ba1      	ldr	r3, [pc, #644]	; (80019a8 <updateData+0x358>)
 8001724:	fb83 1302 	smull	r1, r3, r3, r2
 8001728:	1059      	asrs	r1, r3, #1
 800172a:	17d3      	asrs	r3, r2, #31
 800172c:	1ac9      	subs	r1, r1, r3
 800172e:	460b      	mov	r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	1ad1      	subs	r1, r2, r3
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e07d      	b.n	800184a <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3306      	adds	r3, #6
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	330a      	adds	r3, #10
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	e03d      	b.n	80017f2 <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3306      	adds	r3, #6
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3304      	adds	r3, #4
 8001782:	ed93 7a00 	vldr	s14, [r3]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	330e      	adds	r3, #14
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3306      	adds	r3, #6
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	330a      	adds	r3, #10
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4413      	add	r3, r2
 80017ce:	331c      	adds	r3, #28
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3304      	adds	r3, #4
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	330a      	adds	r3, #10
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	3301      	adds	r3, #1
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	ddbe      	ble.n	8001776 <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3306      	adds	r3, #6
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3304      	adds	r3, #4
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800180c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3306      	adds	r3, #6
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3304      	adds	r3, #4
 800181c:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	330a      	adds	r3, #10
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	330a      	adds	r3, #10
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b02      	cmp	r3, #2
 800184e:	f77f af7e 	ble.w	800174e <updateData+0xfe>
	}

  // Update orientation
	// 1.1 = gyroscope's error
	mpu9250->pose[2] += 1.1* dt * (mpu9250->gyro[2] + mpu9250->lastAngVel) / 2;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001858:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800185c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001864:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8001998 <updateData+0x348>
 8001868:	ee27 5b05 	vmul.f64	d5, d7, d5
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001880:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001884:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001888:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800188c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80018a0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80019ac <updateData+0x35c>
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d50a      	bpl.n	80018c4 <updateData+0x274>
		mpu9250->pose[2] += 360;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80018b4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80019b0 <updateData+0x360>
 80018b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 80018c2:	e013      	b.n	80018ec <updateData+0x29c>
	else if(mpu9250->pose[2] > 180)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80018ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80019b4 <updateData+0x364>
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	dd09      	ble.n	80018ec <updateData+0x29c>
		mpu9250->pose[2] -= 360;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80018de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80019b0 <updateData+0x360>
 80018e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80018f2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80018fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001900:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80019a0 <updateData+0x350>
 8001904:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001908:	eeb0 0b47 	vmov.f64	d0, d7
 800190c:	f00c f828 	bl	800d960 <cos>
 8001910:	eeb0 6b40 	vmov.f64	d6, d0
 8001914:	edd7 7a02 	vldr	s15, [r7, #8]
 8001918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800191c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001920:	edd7 7a01 	vldr	s15, [r7, #4]
 8001924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001928:	ee26 7b07 	vmul.f64	d7, d6, d7
 800192c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001930:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001940:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800194a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80019a0 <updateData+0x350>
 8001952:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001956:	eeb0 0b47 	vmov.f64	d0, d7
 800195a:	f00c f84d 	bl	800d9f8 <sin>
 800195e:	eeb0 6b40 	vmov.f64	d6, d0
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800196a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800197a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800197e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	ecbd 8b02 	vpop	{d8}
 8001992:	bd80      	pop	{r7, pc}
 8001994:	f3af 8000 	nop.w
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3ff19999 	.word	0x3ff19999
 80019a0:	a2529d39 	.word	0xa2529d39
 80019a4:	3f91df46 	.word	0x3f91df46
 80019a8:	66666667 	.word	0x66666667
 80019ac:	c3340000 	.word	0xc3340000
 80019b0:	43b40000 	.word	0x43b40000
 80019b4:	43340000 	.word	0x43340000

080019b8 <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e00e      	b.n	80019e6 <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	332c      	adds	r3, #44	; 0x2c
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3304      	adds	r3, #4
 80019de:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	dded      	ble.n	80019c8 <setPose+0x10>
	}
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001a04:	1d39      	adds	r1, r7, #4
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <__io_putchar+0x20>)
 8001a0e:	f005 fbab 	bl	8007168 <HAL_UART_Transmit>
  return ch;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	240003b8 	.word	0x240003b8

08001a20 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <MX_SPI1_Init+0xac>)
 8001a28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_SPI1_Init+0xa8>)
 8001ab6:	f003 fc01 	bl	80052bc <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001ac0:	f7ff f982 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2400020c 	.word	0x2400020c
 8001acc:	40013000 	.word	0x40013000

08001ad0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <MX_SPI2_Init+0xa8>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001adc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ae0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001aea:	2207      	movs	r2, #7
 8001aec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001afc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_SPI2_Init+0xa4>)
 8001b62:	f003 fbab 	bl	80052bc <HAL_SPI_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001b6c:	f7ff f92c 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24000294 	.word	0x24000294
 8001b78:	40003800 	.word	0x40003800

08001b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0ba      	sub	sp, #232	; 0xe8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	22bc      	movs	r2, #188	; 0xbc
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f009 fa76 	bl	800b08e <memset>
  if(spiHandle->Instance==SPI1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d142      	bne.n	8001c32 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 f816 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001bc6:	f7ff f8ff 	bl	8000dc8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c06:	2338      	movs	r3, #56	; 0x38
 8001c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <HAL_SPI_MspInit+0x158>)
 8001c2c:	f000 fdb8 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c30:	e047      	b.n	8001cc2 <HAL_SPI_MspInit+0x146>
  else if(spiHandle->Instance==SPI2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_SPI_MspInit+0x15c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d142      	bne.n	8001cc2 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 ffce 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8001c56:	f7ff f8b7 	bl	8000dc8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_SPI_MspInit+0x158>)
 8001cbe:	f000 fd6f 	bl	80027a0 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	37e8      	adds	r7, #232	; 0xe8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	58020400 	.word	0x58020400
 8001cd8:	40003800 	.word	0x40003800

08001cdc <mpu9250_write_reg>:
  }
}

/* USER CODE BEGIN 1 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2110      	movs	r1, #16
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <mpu9250_write_reg+0x44>)
 8001cf2:	f000 ff05 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001cf6:	1df9      	adds	r1, r7, #7
 8001cf8:	2364      	movs	r3, #100	; 0x64
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <mpu9250_write_reg+0x48>)
 8001cfe:	f003 fbe3 	bl	80054c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001d02:	1db9      	adds	r1, r7, #6
 8001d04:	2364      	movs	r3, #100	; 0x64
 8001d06:	2201      	movs	r2, #1
 8001d08:	4806      	ldr	r0, [pc, #24]	; (8001d24 <mpu9250_write_reg+0x48>)
 8001d0a:	f003 fbdd 	bl	80054c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2110      	movs	r1, #16
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <mpu9250_write_reg+0x44>)
 8001d14:	f000 fef4 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58020000 	.word	0x58020000
 8001d24:	2400020c 	.word	0x2400020c

08001d28 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2110      	movs	r1, #16
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <mpu9250_read_reg+0x54>)
 8001d48:	f000 feda 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001d4c:	f107 010f 	add.w	r1, r7, #15
 8001d50:	2364      	movs	r3, #100	; 0x64
 8001d52:	2201      	movs	r2, #1
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <mpu9250_read_reg+0x58>)
 8001d56:	f003 fbb7 	bl	80054c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <mpu9250_read_reg+0x58>)
 8001d64:	f003 fda2 	bl	80058ac <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4803      	ldr	r0, [pc, #12]	; (8001d7c <mpu9250_read_reg+0x54>)
 8001d6e:	f000 fec7 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	58020000 	.word	0x58020000
 8001d80:	2400020c 	.word	0x2400020c

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_MspInit+0x38>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_MspInit+0x38>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_MspInit+0x38>)
 8001d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	210f      	movs	r1, #15
 8001dac:	f06f 0001 	mvn.w	r0, #1
 8001db0:	f000 fccf 	bl	8002752 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	58024400 	.word	0x58024400

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 fba2 	bl	8002538 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001df4:	f008 fbec 	bl	800a5d0 <xTaskGetSchedulerState>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001dfe:	f007 f823 	bl	8008e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
	return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_kill>:

int _kill(int pid, int sig)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e20:	f009 f804 	bl	800ae2c <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2216      	movs	r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
	return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_exit>:

void _exit (int status)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffe7 	bl	8001e16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e48:	e7fe      	b.n	8001e48 <_exit+0x12>

08001e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e00a      	b.n	8001e72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e5c:	f3af 8000 	nop.w
 8001e60:	4601      	mov	r1, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf0      	blt.n	8001e5c <_read+0x12>
	}

return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fdac 	bl	80019fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dbf1      	blt.n	8001e96 <_write+0x12>
	}
	return len;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_close>:

int _close(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_isatty>:

int _isatty(int file)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
	return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f008 ff6a 	bl	800ae2c <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24080000 	.word	0x24080000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	2400031c 	.word	0x2400031c
 8001f8c:	24004e70 	.word	0x24004e70

08001f90 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	; 0x38
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001fca:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fcc:	2248      	movs	r2, #72	; 0x48
 8001fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fea:	4823      	ldr	r0, [pc, #140]	; (8002078 <MX_TIM2_Init+0xe8>)
 8001fec:	f004 f90b 	bl	8006206 <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ff6:	f7fe fee7 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002004:	4619      	mov	r1, r3
 8002006:	481c      	ldr	r0, [pc, #112]	; (8002078 <MX_TIM2_Init+0xe8>)
 8002008:	f004 faca 	bl	80065a0 <HAL_TIM_ConfigClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002012:	f7fe fed9 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002016:	4818      	ldr	r0, [pc, #96]	; (8002078 <MX_TIM2_Init+0xe8>)
 8002018:	f004 f94c 	bl	80062b4 <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002022:	f7fe fed1 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <MX_TIM2_Init+0xe8>)
 8002036:	f004 ffb9 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002040:	f7fe fec2 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	; 0x60
 8002046:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <MX_TIM2_Init+0xe8>)
 800205c:	f004 f98c 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002066:	f7fe feaf 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <MX_TIM2_Init+0xe8>)
 800206c:	f000 f8b6 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8002070:	bf00      	nop
 8002072:	3738      	adds	r7, #56	; 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000320 	.word	0x24000320

0800207c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020b0:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <MX_TIM3_Init+0xec>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020b6:	2248      	movs	r2, #72	; 0x48
 80020b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020d6:	f004 f896 	bl	8006206 <HAL_TIM_Base_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80020e0:	f7fe fe72 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ee:	4619      	mov	r1, r3
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020f2:	f004 fa55 	bl	80065a0 <HAL_TIM_ConfigClockSource>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80020fc:	f7fe fe64 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002100:	4818      	ldr	r0, [pc, #96]	; (8002164 <MX_TIM3_Init+0xe8>)
 8002102:	f004 f8d7 	bl	80062b4 <HAL_TIM_PWM_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800210c:	f7fe fe5c 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4811      	ldr	r0, [pc, #68]	; (8002164 <MX_TIM3_Init+0xe8>)
 8002120:	f004 ff44 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800212a:	f7fe fe4d 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	; 0x60
 8002130:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <MX_TIM3_Init+0xe8>)
 8002146:	f004 f917 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002150:	f7fe fe3a 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <MX_TIM3_Init+0xe8>)
 8002156:	f000 f841 	bl	80021dc <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3738      	adds	r7, #56	; 0x38
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2400036c 	.word	0x2400036c
 8002168:	40000400 	.word	0x40000400

0800216c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217c:	d10f      	bne.n	800219e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 8002180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 8002190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800219c:	e013      	b.n	80021c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_TIM_Base_MspInit+0x6c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 80021aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_TIM_Base_MspInit+0x68>)
 80021ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	58024400 	.word	0x58024400
 80021d8:	40000400 	.word	0x40000400

080021dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d120      	bne.n	8002240 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800221c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222e:	2301      	movs	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <HAL_TIM_MspPostInit+0xb8>)
 800223a:	f000 fab1 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800223e:	e023      	b.n	8002288 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_TIM_MspPostInit+0xbc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d11e      	bne.n	8002288 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_TIM_MspPostInit+0xb4>)
 800225c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002278:	2302      	movs	r3, #2
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <HAL_TIM_MspPostInit+0xb8>)
 8002284:	f000 fa8c 	bl	80027a0 <HAL_GPIO_Init>
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58024400 	.word	0x58024400
 8002294:	58020000 	.word	0x58020000
 8002298:	40000400 	.word	0x40000400

0800229c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022a2:	4a23      	ldr	r2, [pc, #140]	; (8002330 <MX_USART3_UART_Init+0x94>)
 80022a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022e4:	4811      	ldr	r0, [pc, #68]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022e6:	f004 feef 	bl	80070c8 <HAL_UART_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022f0:	f7fe fd6a 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f4:	2100      	movs	r1, #0
 80022f6:	480d      	ldr	r0, [pc, #52]	; (800232c <MX_USART3_UART_Init+0x90>)
 80022f8:	f005 ff22 	bl	8008140 <HAL_UARTEx_SetTxFifoThreshold>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002302:	f7fe fd61 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002306:	2100      	movs	r1, #0
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <MX_USART3_UART_Init+0x90>)
 800230a:	f005 ff57 	bl	80081bc <HAL_UARTEx_SetRxFifoThreshold>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002314:	f7fe fd58 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <MX_USART3_UART_Init+0x90>)
 800231a:	f005 fed8 	bl	80080ce <HAL_UARTEx_DisableFifoMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002324:	f7fe fd50 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	240003b8 	.word	0x240003b8
 8002330:	40004800 	.word	0x40004800

08002334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0b8      	sub	sp, #224	; 0xe0
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	22bc      	movs	r2, #188	; 0xbc
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f008 fe9a 	bl	800b08e <memset>
  if(uartHandle->Instance==USART3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_UART_MspInit+0xc0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d142      	bne.n	80023ea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fc3a 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800237e:	f7fe fd23 	bl	8000dc8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 800238a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 8002394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d8:	2307      	movs	r3, #7
 80023da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_UART_MspInit+0xc8>)
 80023e6:	f000 f9db 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023ea:	bf00      	nop
 80023ec:	37e0      	adds	r7, #224	; 0xe0
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40004800 	.word	0x40004800
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020c00 	.word	0x58020c00

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002404:	f7fe f946 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	; (8002440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242e:	f008 fdf9 	bl	800b024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7fe fbf3 	bl	8000c1c <main>
  bx  lr
 8002436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800243c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002440:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002444:	0800ed68 	.word	0x0800ed68
  ldr r2, =_sbss
 8002448:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 800244c:	24004e6c 	.word	0x24004e6c

08002450 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC3_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245a:	2003      	movs	r0, #3
 800245c:	f000 f96e 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002460:	f001 f9ee 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_Init+0x68>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	4913      	ldr	r1, [pc, #76]	; (80024c0 <HAL_Init+0x6c>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_Init+0x68>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_Init+0x6c>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <HAL_Init+0x70>)
 8002496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_Init+0x74>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249e:	200f      	movs	r0, #15
 80024a0:	f000 f814 	bl	80024cc <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e002      	b.n	80024b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ae:	f7ff fc69 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	58024400 	.word	0x58024400
 80024c0:	0800e6fc 	.word	0x0800e6fc
 80024c4:	24000004 	.word	0x24000004
 80024c8:	24000000 	.word	0x24000000

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_InitTick+0x60>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e021      	b.n	8002524 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_InitTick+0x64>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_InitTick+0x60>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f945 	bl	8002786 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f91d 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x68>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2400000c 	.word	0x2400000c
 8002530:	24000000 	.word	0x24000000
 8002534:	24000008 	.word	0x24000008

08002538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x20>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x24>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_IncTick+0x24>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	2400000c 	.word	0x2400000c
 800255c:	24000448 	.word	0x24000448

08002560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetTick+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	24000448 	.word	0x24000448

08002578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff ffee 	bl	8002560 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d005      	beq.n	800259e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_Delay+0x44>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259e:	bf00      	nop
 80025a0:	f7ff ffde 	bl	8002560 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8f7      	bhi.n	80025a0 <HAL_Delay+0x28>
  {
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2400000c 	.word	0x2400000c

080025c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetREVID+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0c1b      	lsrs	r3, r3, #16
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	5c001000 	.word	0x5c001000

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <__NVIC_SetPriorityGrouping+0x40>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	4313      	orrs	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x40>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00
 800261c:	05fa0000 	.word	0x05fa0000

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff47 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff5e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffb2 	bl	80026f8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_GPIO_Init+0x234>)
 80027b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027b2:	e194      	b.n	8002ade <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8186 	beq.w	8002ad8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d005      	beq.n	80027e4 <HAL_GPIO_Init+0x44>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d130      	bne.n	8002846 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281a:	2201      	movs	r2, #1
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 0201 	and.w	r2, r3, #1
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b03      	cmp	r3, #3
 8002850:	d017      	beq.n	8002882 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d123      	bne.n	80028d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0203 	and.w	r2, r3, #3
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80e0 	beq.w	8002ad8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x238>)
 800291a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <HAL_GPIO_Init+0x238>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_GPIO_Init+0x238>)
 800292a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a29      	ldr	r2, [pc, #164]	; (80029dc <HAL_GPIO_Init+0x23c>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_GPIO_Init+0x240>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d052      	beq.n	8002a08 <HAL_GPIO_Init+0x268>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_GPIO_Init+0x244>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <HAL_GPIO_Init+0x248>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02b      	beq.n	80029ca <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_GPIO_Init+0x24c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d025      	beq.n	80029c6 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_GPIO_Init+0x250>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01f      	beq.n	80029c2 <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_GPIO_Init+0x254>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d019      	beq.n	80029be <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <HAL_GPIO_Init+0x258>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0x21a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_GPIO_Init+0x25c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00d      	beq.n	80029b6 <HAL_GPIO_Init+0x216>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x260>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <HAL_GPIO_Init+0x212>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_GPIO_Init+0x264>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_GPIO_Init+0x20e>
 80029aa:	2309      	movs	r3, #9
 80029ac:	e02d      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029ae:	230a      	movs	r3, #10
 80029b0:	e02b      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029b2:	2308      	movs	r3, #8
 80029b4:	e029      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e027      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e025      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029be:	2305      	movs	r3, #5
 80029c0:	e023      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029c2:	2304      	movs	r3, #4
 80029c4:	e021      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029c6:	2303      	movs	r3, #3
 80029c8:	e01f      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e01d      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01b      	b.n	8002a0a <HAL_GPIO_Init+0x26a>
 80029d2:	bf00      	nop
 80029d4:	58000080 	.word	0x58000080
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58000400 	.word	0x58000400
 80029e0:	58020000 	.word	0x58020000
 80029e4:	58020400 	.word	0x58020400
 80029e8:	58020800 	.word	0x58020800
 80029ec:	58020c00 	.word	0x58020c00
 80029f0:	58021000 	.word	0x58021000
 80029f4:	58021400 	.word	0x58021400
 80029f8:	58021800 	.word	0x58021800
 80029fc:	58021c00 	.word	0x58021c00
 8002a00:	58022000 	.word	0x58022000
 8002a04:	58022400 	.word	0x58022400
 8002a08:	2300      	movs	r3, #0
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4093      	lsls	r3, r2
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1a:	4938      	ldr	r1, [pc, #224]	; (8002afc <HAL_GPIO_Init+0x35c>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	3301      	adds	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f ae63 	bne.w	80027b4 <HAL_GPIO_Init+0x14>
  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	3724      	adds	r7, #36	; 0x24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	58000400 	.word	0x58000400

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	041a      	lsls	r2, r3, #16
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	400b      	ands	r3, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_HSEM_FastTake+0x2c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3320      	adds	r3, #32
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_HSEM_FastTake+0x30>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	58026400 	.word	0x58026400
 8002b98:	80000300 	.word	0x80000300

08002b9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ba6:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_HSEM_Release+0x24>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	58026400 	.word	0x58026400

08002bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d00a      	beq.n	8002bee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e040      	b.n	8002c6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e03e      	b.n	8002c6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002bf6:	491f      	ldr	r1, [pc, #124]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bfe:	f7ff fcaf 	bl	8002560 <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c04:	e009      	b.n	8002c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c06:	f7ff fcab 	bl	8002560 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c14:	d901      	bls.n	8002c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e028      	b.n	8002c6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c26:	d1ee      	bne.n	8002c06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b1e      	cmp	r3, #30
 8002c2c:	d008      	beq.n	8002c40 <HAL_PWREx_ConfigSupply+0x7c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b2e      	cmp	r3, #46	; 0x2e
 8002c32:	d005      	beq.n	8002c40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b1d      	cmp	r3, #29
 8002c38:	d002      	beq.n	8002c40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8002c3e:	d114      	bne.n	8002c6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c40:	f7ff fc8e 	bl	8002560 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c46:	e009      	b.n	8002c5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c48:	f7ff fc8a 	bl	8002560 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c56:	d901      	bls.n	8002c5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e007      	b.n	8002c6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d1ee      	bne.n	8002c48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024800 	.word	0x58024800

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f000 bc1d 	b.w	80034c6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8087 	beq.w	8002da8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4b99      	ldr	r3, [pc, #612]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d007      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x48>
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2b18      	cmp	r3, #24
 8002cb4:	d110      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x60>
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x12e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d168      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e3f6      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x78>
 8002ce2:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a86      	ldr	r2, [pc, #536]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e02e      	b.n	8002d4e <HAL_RCC_OscConfig+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x9a>
 8002cf8:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a80      	ldr	r2, [pc, #512]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a7d      	ldr	r2, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e01d      	b.n	8002d4e <HAL_RCC_OscConfig+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0xbe>
 8002d1c:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a77      	ldr	r2, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a74      	ldr	r2, [pc, #464]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0xd6>
 8002d36:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a71      	ldr	r2, [pc, #452]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d013      	beq.n	8002d7e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff fc03 	bl	8002560 <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5e:	f7ff fbff 	bl	8002560 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e3aa      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0xe6>
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7ff fbef 	bl	8002560 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d86:	f7ff fbeb 	bl	8002560 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e396      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x10e>
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80cb 	beq.w	8002f4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dbe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_RCC_OscConfig+0x164>
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b18      	cmp	r3, #24
 8002dd0:	d156      	bne.n	8002e80 <HAL_RCC_OscConfig+0x208>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d151      	bne.n	8002e80 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x17c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e368      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 0219 	bic.w	r2, r3, #25
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	493f      	ldr	r1, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e06:	f7ff fbab 	bl	8002560 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0e:	f7ff fba7 	bl	8002560 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e352      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	f7ff fbc8 	bl	80025c0 <HAL_GetREVID>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d817      	bhi.n	8002e6a <HAL_RCC_OscConfig+0x1f2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x1dc>
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e52:	e07b      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	031b      	lsls	r3, r3, #12
 8002e62:	4927      	ldr	r1, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	e070      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	4921      	ldr	r1, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7e:	e065      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d048      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0219 	bic.w	r2, r3, #25
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	491a      	ldr	r1, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fb61 	bl	8002560 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7ff fb5d 	bl	8002560 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e308      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	f7ff fb7e 	bl	80025c0 <HAL_GetREVID>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d81a      	bhi.n	8002f04 <HAL_RCC_OscConfig+0x28c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x270>
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	6053      	str	r3, [r2, #4]
 8002ee6:	e031      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	031b      	lsls	r3, r3, #12
 8002ef6:	4902      	ldr	r1, [pc, #8]	; (8002f00 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e026      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
 8002efe:	bf00      	nop
 8002f00:	58024400 	.word	0x58024400
 8002f04:	4b9a      	ldr	r3, [pc, #616]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4997      	ldr	r1, [pc, #604]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b95      	ldr	r3, [pc, #596]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a94      	ldr	r2, [pc, #592]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7ff fb1b 	bl	8002560 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fb17 	bl	8002560 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e2c2      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f40:	4b8b      	ldr	r3, [pc, #556]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a9 	beq.w	80030ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f64:	4b82      	ldr	r3, [pc, #520]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d007      	beq.n	8002f80 <HAL_RCC_OscConfig+0x308>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b18      	cmp	r3, #24
 8002f74:	d13a      	bne.n	8002fec <HAL_RCC_OscConfig+0x374>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d135      	bne.n	8002fec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f80:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_OscConfig+0x320>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e296      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f98:	f7ff fb12 	bl	80025c0 <HAL_GetREVID>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d817      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x348>
 8002fae:	4b70      	ldr	r3, [pc, #448]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fbe:	e075      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	069b      	lsls	r3, r3, #26
 8002fce:	4968      	ldr	r1, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fd4:	e06a      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd6:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	4962      	ldr	r1, [pc, #392]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fea:	e05f      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d042      	beq.n	800307a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ff4:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8002ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7ff faae 	bl	8002560 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003008:	f7ff faaa 	bl	8002560 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e255      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800301a:	4b55      	ldr	r3, [pc, #340]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003026:	f7ff facb 	bl	80025c0 <HAL_GetREVID>
 800302a:	4603      	mov	r3, r0
 800302c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003030:	4293      	cmp	r3, r2
 8003032:	d817      	bhi.n	8003064 <HAL_RCC_OscConfig+0x3ec>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	2b20      	cmp	r3, #32
 800303a:	d108      	bne.n	800304e <HAL_RCC_OscConfig+0x3d6>
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003044:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800304a:	6053      	str	r3, [r2, #4]
 800304c:	e02e      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
 800304e:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	4944      	ldr	r1, [pc, #272]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
 8003062:	e023      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
 8003064:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	493f      	ldr	r1, [pc, #252]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e018      	b.n	80030ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7ff fa6b 	bl	8002560 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800308e:	f7ff fa67 	bl	8002560 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e212      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d036      	beq.n	8003126 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d019      	beq.n	80030f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7ff fa48 	bl	8002560 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d4:	f7ff fa44 	bl	8002560 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1ef      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x45c>
 80030f2:	e018      	b.n	8003126 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7ff fa2e 	bl	8002560 <HAL_GetTick>
 8003104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003108:	f7ff fa2a 	bl	8002560 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1d5      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d039      	beq.n	80031a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01c      	beq.n	8003174 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003144:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003146:	f7ff fa0b 	bl	8002560 <HAL_GetTick>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800314e:	f7ff fa07 	bl	8002560 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1b2      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x4d6>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003174:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a9a      	ldr	r2, [pc, #616]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800317a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800317e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003180:	f7ff f9ee 	bl	8002560 <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003188:	f7ff f9ea 	bl	8002560 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e195      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800319a:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8081 	beq.w	80032b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x770>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a8b      	ldr	r2, [pc, #556]	; (80033e8 <HAL_RCC_OscConfig+0x770>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c0:	f7ff f9ce 	bl	8002560 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7ff f9ca 	bl	8002560 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e175      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031da:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <HAL_RCC_OscConfig+0x770>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x584>
 80031ee:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a7c      	ldr	r2, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e02d      	b.n	8003258 <HAL_RCC_OscConfig+0x5e0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10c      	bne.n	800321e <HAL_RCC_OscConfig+0x5a6>
 8003204:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a76      	ldr	r2, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	4b74      	ldr	r3, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a73      	ldr	r2, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	e01c      	b.n	8003258 <HAL_RCC_OscConfig+0x5e0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x5c8>
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x5e0>
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a64      	ldr	r2, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7ff f97e 	bl	8002560 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7ff f97a 	bl	8002560 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e123      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800327e:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ee      	beq.n	8003268 <HAL_RCC_OscConfig+0x5f0>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7ff f968 	bl	8002560 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7ff f964 	bl	8002560 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e10d      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032aa:	4b4e      	ldr	r3, [pc, #312]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ee      	bne.n	8003294 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8102 	beq.w	80034c4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032c0:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c8:	2b18      	cmp	r3, #24
 80032ca:	f000 80bd 	beq.w	8003448 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	f040 809e 	bne.w	8003414 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a41      	ldr	r2, [pc, #260]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7ff f93c 	bl	8002560 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7ff f938 	bl	8002560 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0e3      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x774>)
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	430a      	orrs	r2, r1
 800331e:	4931      	ldr	r1, [pc, #196]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	628b      	str	r3, [r1, #40]	; 0x28
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	3b01      	subs	r3, #1
 800332a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	3b01      	subs	r3, #1
 8003334:	025b      	lsls	r3, r3, #9
 8003336:	b29b      	uxth	r3, r3
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	3b01      	subs	r3, #1
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003354:	4923      	ldr	r1, [pc, #140]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003356:	4313      	orrs	r3, r2
 8003358:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003366:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCC_OscConfig+0x778>)
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003372:	00d2      	lsls	r2, r2, #3
 8003374:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f023 020c 	bic.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4917      	ldr	r1, [pc, #92]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800338c:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f023 0202 	bic.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_RCC_OscConfig+0x76c>)
 80033d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7ff f8c1 	bl	8002560 <HAL_GetTick>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033e0:	e011      	b.n	8003406 <HAL_RCC_OscConfig+0x78e>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
 80033e8:	58024800 	.word	0x58024800
 80033ec:	fffffc0c 	.word	0xfffffc0c
 80033f0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7ff f8b4 	bl	8002560 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e05f      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003406:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x77c>
 8003412:	e057      	b.n	80034c4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 800341a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7ff f89e 	bl	8002560 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7ff f89a 	bl	8002560 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e045      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x7b0>
 8003446:	e03d      	b.n	80034c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_OscConfig+0x858>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	d031      	beq.n	80034c0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0203 	and.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d12a      	bne.n	80034c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d122      	bne.n	80034c0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d11a      	bne.n	80034c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	0a5b      	lsrs	r3, r3, #9
 800348e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d111      	bne.n	80034c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	0c1b      	lsrs	r3, r3, #16
 80034a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	0e1b      	lsrs	r3, r3, #24
 80034b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3730      	adds	r7, #48	; 0x30
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	58024400 	.word	0x58024400

080034d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e19c      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d910      	bls.n	8003518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b87      	ldr	r3, [pc, #540]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	4985      	ldr	r1, [pc, #532]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b83      	ldr	r3, [pc, #524]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e184      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b7b      	ldr	r3, [pc, #492]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d908      	bls.n	8003546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003534:	4b78      	ldr	r3, [pc, #480]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4975      	ldr	r1, [pc, #468]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003542:	4313      	orrs	r3, r2
 8003544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355e:	429a      	cmp	r2, r3
 8003560:	d908      	bls.n	8003574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003562:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	496a      	ldr	r1, [pc, #424]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003570:	4313      	orrs	r3, r2
 8003572:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800358c:	429a      	cmp	r2, r3
 800358e:	d908      	bls.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003590:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	495e      	ldr	r1, [pc, #376]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035be:	4b56      	ldr	r3, [pc, #344]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4953      	ldr	r1, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d908      	bls.n	80035fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f023 020f 	bic.w	r2, r3, #15
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4947      	ldr	r1, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d055      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800360a:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	4940      	ldr	r1, [pc, #256]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003618:	4313      	orrs	r3, r2
 800361a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d121      	bne.n	8003674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0f6      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0ea      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0de      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0d6      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 8003682:	4313      	orrs	r3, r2
 8003684:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe ff6b 	bl	8002560 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fe ff67 	bl	8002560 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0be      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d1eb      	bne.n	800368e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d208      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d214      	bcs.n	800371c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	4906      	ldr	r1, [pc, #24]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_ClockConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e086      	b.n	8003822 <HAL_RCC_ClockConfig+0x34e>
 8003714:	52002000 	.word	0x52002000
 8003718:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003734:	429a      	cmp	r2, r3
 8003736:	d208      	bcs.n	800374a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003738:	4b3c      	ldr	r3, [pc, #240]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	4939      	ldr	r1, [pc, #228]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 8003746:	4313      	orrs	r3, r2
 8003748:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003762:	429a      	cmp	r2, r3
 8003764:	d208      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	492e      	ldr	r1, [pc, #184]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 8003774:	4313      	orrs	r3, r2
 8003776:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003790:	429a      	cmp	r2, r3
 8003792:	d208      	bcs.n	80037a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4922      	ldr	r1, [pc, #136]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037be:	429a      	cmp	r2, r3
 80037c0:	d208      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4917      	ldr	r1, [pc, #92]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037d4:	f000 f834 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	4912      	ldr	r1, [pc, #72]	; (8003830 <HAL_RCC_ClockConfig+0x35c>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
 80037f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_RCC_ClockConfig+0x358>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <HAL_RCC_ClockConfig+0x35c>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_RCC_ClockConfig+0x360>)
 800380a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800380c:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x364>)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x368>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fe58 	bl	80024cc <HAL_InitTick>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
 8003830:	0800e6fc 	.word	0x0800e6fc
 8003834:	24000004 	.word	0x24000004
 8003838:	24000000 	.word	0x24000000
 800383c:	24000008 	.word	0x24000008

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003846:	4bb3      	ldr	r3, [pc, #716]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384e:	2b18      	cmp	r3, #24
 8003850:	f200 8155 	bhi.w	8003afe <HAL_RCC_GetSysClockFreq+0x2be>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	080038c1 	.word	0x080038c1
 8003860:	08003aff 	.word	0x08003aff
 8003864:	08003aff 	.word	0x08003aff
 8003868:	08003aff 	.word	0x08003aff
 800386c:	08003aff 	.word	0x08003aff
 8003870:	08003aff 	.word	0x08003aff
 8003874:	08003aff 	.word	0x08003aff
 8003878:	08003aff 	.word	0x08003aff
 800387c:	080038e7 	.word	0x080038e7
 8003880:	08003aff 	.word	0x08003aff
 8003884:	08003aff 	.word	0x08003aff
 8003888:	08003aff 	.word	0x08003aff
 800388c:	08003aff 	.word	0x08003aff
 8003890:	08003aff 	.word	0x08003aff
 8003894:	08003aff 	.word	0x08003aff
 8003898:	08003aff 	.word	0x08003aff
 800389c:	080038ed 	.word	0x080038ed
 80038a0:	08003aff 	.word	0x08003aff
 80038a4:	08003aff 	.word	0x08003aff
 80038a8:	08003aff 	.word	0x08003aff
 80038ac:	08003aff 	.word	0x08003aff
 80038b0:	08003aff 	.word	0x08003aff
 80038b4:	08003aff 	.word	0x08003aff
 80038b8:	08003aff 	.word	0x08003aff
 80038bc:	080038f3 	.word	0x080038f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038c0:	4b94      	ldr	r3, [pc, #592]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038cc:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80038de:	e111      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038e0:	4b8d      	ldr	r3, [pc, #564]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e2:	61bb      	str	r3, [r7, #24]
    break;
 80038e4:	e10e      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038e6:	4b8d      	ldr	r3, [pc, #564]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038e8:	61bb      	str	r3, [r7, #24]
    break;
 80038ea:	e10b      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038ec:	4b8c      	ldr	r3, [pc, #560]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038ee:	61bb      	str	r3, [r7, #24]
    break;
 80038f0:	e108      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038f2:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003906:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003908:	4b82      	ldr	r3, [pc, #520]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003912:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	08db      	lsrs	r3, r3, #3
 8003918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80e1 	beq.w	8003af8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b02      	cmp	r3, #2
 800393a:	f000 8083 	beq.w	8003a44 <HAL_RCC_GetSysClockFreq+0x204>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f200 80a1 	bhi.w	8003a88 <HAL_RCC_GetSysClockFreq+0x248>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x114>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d056      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003952:	e099      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003954:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02d      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003960:	4b6c      	ldr	r3, [pc, #432]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	08db      	lsrs	r3, r3, #3
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	4a6b      	ldr	r2, [pc, #428]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b62      	ldr	r3, [pc, #392]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a02 	vldr	s12, [r7, #8]
 800399e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039ba:	e087      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fe:	e065      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a42:	e043      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a86:	e021      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	0a5b      	lsrs	r3, r3, #9
 8003ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af0:	ee17 3a90 	vmov	r3, s15
 8003af4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b00:	61bb      	str	r3, [r7, #24]
    break;
 8003b02:	bf00      	nop
  }

  return sysclockfreq;
 8003b04:	69bb      	ldr	r3, [r7, #24]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
 8003b18:	03d09000 	.word	0x03d09000
 8003b1c:	003d0900 	.word	0x003d0900
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	46000000 	.word	0x46000000
 8003b28:	4c742400 	.word	0x4c742400
 8003b2c:	4a742400 	.word	0x4a742400
 8003b30:	4af42400 	.word	0x4af42400

08003b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b3a:	f7ff fe81 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490f      	ldr	r1, [pc, #60]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	58024400 	.word	0x58024400
 8003b88:	0800e6fc 	.word	0x0800e6fc
 8003b8c:	24000004 	.word	0x24000004
 8003b90:	24000000 	.word	0x24000000

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b98:	f7ff ffcc 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	0800e6fc 	.word	0x0800e6fc

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bc4:	f7ff ffb6 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	58024400 	.word	0x58024400
 8003be8:	0800e6fc 	.word	0x0800e6fc

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03f      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c10:	d02a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c16:	d824      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1c:	d018      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c22:	d81e      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d007      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c2e:	e018      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4aa2      	ldr	r2, [pc, #648]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c3c:	e015      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f9d5 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fa7e 	bl	8005158 <RCCEx_PLL3_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c70:	4b93      	ldr	r3, [pc, #588]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7c:	4990      	ldr	r1, [pc, #576]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	650b      	str	r3, [r1, #80]	; 0x50
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d03d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d826      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb9 	.word	0x08003cb9
 8003ca8:	08003cc7 	.word	0x08003cc7
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cf1 	.word	0x08003cf1
 8003cb4:	08003cf1 	.word	0x08003cf1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f991 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e00c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fa3a 	bl	8005158 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      break;
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf8:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	f023 0207 	bic.w	r2, r3, #7
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	496e      	ldr	r1, [pc, #440]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	650b      	str	r3, [r1, #80]	; 0x50
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d042      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d24:	d02b      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d825      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d30:	2bc0      	cmp	r3, #192	; 0xc0
 8003d32:	d821      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d016      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d81d      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d007      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d44:	e018      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d46:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d52:	e017      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f94a 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d64:	e00e      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3324      	adds	r3, #36	; 0x24
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f9f3 	bl	8005158 <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	494a      	ldr	r1, [pc, #296]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	650b      	str	r3, [r1, #80]	; 0x50
 8003d9c:	e001      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d049      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003db4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db8:	d030      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dbe:	d82a      	bhi.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dc4:	d02c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dca:	d824      	bhi.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd0:	d018      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd6:	d81e      	bhi.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de0:	d007      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003de2:	e018      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a35      	ldr	r2, [pc, #212]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003df0:	e017      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f8fb 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e02:	e00e      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f9a4 	bl	8005158 <RCCEx_PLL3_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e14:	e005      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e36:	4922      	ldr	r1, [pc, #136]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3c:	e001      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d04b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e58:	d030      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5e:	d82a      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e64:	d02e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003e66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e6a:	d824      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e70:	d018      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e76:	d81e      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e80:	d007      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e82:	e018      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e90:	e019      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f8ab 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ea2:	e010      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f954 	bl	8005158 <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ec0:	58024400 	.word	0x58024400
      break;
 8003ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ecc:	4b99      	ldr	r3, [pc, #612]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eda:	4996      	ldr	r1, [pc, #600]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	658b      	str	r3, [r1, #88]	; 0x58
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d032      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d01c      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d817      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d813      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a88      	ldr	r2, [pc, #544]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f1a:	e00e      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 f866 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f2c:	e005      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f40:	4b7c      	ldr	r3, [pc, #496]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	4979      	ldr	r1, [pc, #484]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f52:	e001      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d047      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6c:	d030      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f72:	d82a      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f78:	d02c      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f7e:	d824      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d018      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d81e      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003f96:	e018      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e017      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f821 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00e      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f8ca 	bl	8005158 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fdc:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	4952      	ldr	r1, [pc, #328]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	650b      	str	r3, [r1, #80]	; 0x50
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d049      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004008:	d02e      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800400a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400e:	d828      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004014:	d02a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800401a:	d822      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800401c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004020:	d026      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004026:	d81c      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800402c:	d010      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800402e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004032:	d816      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d111      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ffd5 	bl	8004ff4 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800404e:	e012      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3324      	adds	r3, #36	; 0x24
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f87e 	bl	8005158 <RCCEx_PLL3_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004060:	e009      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
      break;
 8004066:	e006      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004068:	bf00      	nop
 800406a:	e004      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800406c:	bf00      	nop
 800406e:	e002      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	492a      	ldr	r1, [pc, #168]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800408a:	4313      	orrs	r3, r2
 800408c:	650b      	str	r3, [r1, #80]	; 0x50
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d04d      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040aa:	d02e      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b0:	d828      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d02a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d822      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c2:	d026      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80040c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c8:	d81c      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ce:	d010      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d816      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01d      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040de:	d111      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff84 	bl	8004ff4 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040f0:	e012      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f82d 	bl	8005158 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800412c:	4901      	ldr	r1, [pc, #4]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800412e:	4313      	orrs	r3, r2
 8004130:	658b      	str	r3, [r1, #88]	; 0x58
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02f      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d00e      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004156:	d814      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800415c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004160:	d10f      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004162:	4baf      	ldr	r3, [pc, #700]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4aae      	ldr	r2, [pc, #696]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800416e:	e00c      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2101      	movs	r1, #1
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ff3c 	bl	8004ff4 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
      break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004190:	4ba3      	ldr	r3, [pc, #652]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419c:	49a0      	ldr	r1, [pc, #640]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	650b      	str	r3, [r1, #80]	; 0x50
 80041a2:	e001      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d032      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d81b      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041d5 	.word	0x080041d5
 80041cc:	080041e3 	.word	0x080041e3
 80041d0:	080041fb 	.word	0x080041fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d4:	4b92      	ldr	r3, [pc, #584]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4a91      	ldr	r2, [pc, #580]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041e0:	e00c      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 ff03 	bl	8004ff4 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041f2:	e003      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80041fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004202:	4b87      	ldr	r3, [pc, #540]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	4984      	ldr	r1, [pc, #528]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004210:	4313      	orrs	r3, r2
 8004212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004214:	e001      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8086 	beq.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004228:	4b7e      	ldr	r3, [pc, #504]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7d      	ldr	r2, [pc, #500]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004234:	f7fe f994 	bl	8002560 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fe f990 	bl	8002560 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d902      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	75fb      	strb	r3, [r7, #23]
        break;
 800424e:	e005      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004250:	4b74      	ldr	r3, [pc, #464]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ef      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d166      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004262:	4b6f      	ldr	r3, [pc, #444]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800426c:	4053      	eors	r3, r2
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004276:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004280:	4b67      	ldr	r3, [pc, #412]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a66      	ldr	r2, [pc, #408]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800428c:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a63      	ldr	r2, [pc, #396]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004298:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a8:	d115      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fe f959 	bl	8002560 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b0:	e00b      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fe f955 	bl	8002560 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d902      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	75fb      	strb	r3, [r7, #23]
            break;
 80042c8:	e005      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ed      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d126      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d10d      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80042ec:	4b4c      	ldr	r3, [pc, #304]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042fa:	0919      	lsrs	r1, r3, #4
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80042fe:	400b      	ands	r3, r1
 8004300:	4947      	ldr	r1, [pc, #284]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4a44      	ldr	r2, [pc, #272]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800430e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004312:	6113      	str	r3, [r2, #16]
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004322:	493f      	ldr	r1, [pc, #252]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004324:	4313      	orrs	r3, r2
 8004326:	670b      	str	r3, [r1, #112]	; 0x70
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	75bb      	strb	r3, [r7, #22]
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8085 	beq.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004346:	2b28      	cmp	r3, #40	; 0x28
 8004348:	d866      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	0800442d 	.word	0x0800442d
 8004354:	08004419 	.word	0x08004419
 8004358:	08004419 	.word	0x08004419
 800435c:	08004419 	.word	0x08004419
 8004360:	08004419 	.word	0x08004419
 8004364:	08004419 	.word	0x08004419
 8004368:	08004419 	.word	0x08004419
 800436c:	08004419 	.word	0x08004419
 8004370:	080043f5 	.word	0x080043f5
 8004374:	08004419 	.word	0x08004419
 8004378:	08004419 	.word	0x08004419
 800437c:	08004419 	.word	0x08004419
 8004380:	08004419 	.word	0x08004419
 8004384:	08004419 	.word	0x08004419
 8004388:	08004419 	.word	0x08004419
 800438c:	08004419 	.word	0x08004419
 8004390:	08004407 	.word	0x08004407
 8004394:	08004419 	.word	0x08004419
 8004398:	08004419 	.word	0x08004419
 800439c:	08004419 	.word	0x08004419
 80043a0:	08004419 	.word	0x08004419
 80043a4:	08004419 	.word	0x08004419
 80043a8:	08004419 	.word	0x08004419
 80043ac:	08004419 	.word	0x08004419
 80043b0:	0800442d 	.word	0x0800442d
 80043b4:	08004419 	.word	0x08004419
 80043b8:	08004419 	.word	0x08004419
 80043bc:	08004419 	.word	0x08004419
 80043c0:	08004419 	.word	0x08004419
 80043c4:	08004419 	.word	0x08004419
 80043c8:	08004419 	.word	0x08004419
 80043cc:	08004419 	.word	0x08004419
 80043d0:	0800442d 	.word	0x0800442d
 80043d4:	08004419 	.word	0x08004419
 80043d8:	08004419 	.word	0x08004419
 80043dc:	08004419 	.word	0x08004419
 80043e0:	08004419 	.word	0x08004419
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004419 	.word	0x08004419
 80043ec:	08004419 	.word	0x08004419
 80043f0:	0800442d 	.word	0x0800442d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fdfa 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004404:	e013      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3324      	adds	r3, #36	; 0x24
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fea3 	bl	8005158 <RCCEx_PLL3_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004416:	e00a      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
      break;
 800441c:	e007      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	58024800 	.word	0x58024800
 8004428:	00ffffcf 	.word	0x00ffffcf
      break;
 800442c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004434:	4b96      	ldr	r3, [pc, #600]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004440:	4993      	ldr	r1, [pc, #588]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	654b      	str	r3, [r1, #84]	; 0x54
 8004446:	e001      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d038      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	2b05      	cmp	r3, #5
 800445e:	d821      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	080044ab 	.word	0x080044ab
 800446c:	08004481 	.word	0x08004481
 8004470:	08004493 	.word	0x08004493
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044ab 	.word	0x080044ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdb4 	bl	8004ff4 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004490:	e00c      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fe5d 	bl	8005158 <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044a2:	e003      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80044aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044b2:	4b77      	ldr	r3, [pc, #476]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	4974      	ldr	r1, [pc, #464]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	654b      	str	r3, [r1, #84]	; 0x54
 80044c4:	e001      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d821      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800452b 	.word	0x0800452b
 80044ec:	08004501 	.word	0x08004501
 80044f0:	08004513 	.word	0x08004513
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fd74 	bl	8004ff4 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004510:	e00c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3324      	adds	r3, #36	; 0x24
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fe1d 	bl	8005158 <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004522:	e003      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800452a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004532:	4b57      	ldr	r3, [pc, #348]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	4953      	ldr	r1, [pc, #332]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	658b      	str	r3, [r1, #88]	; 0x58
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d04b      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004562:	d02e      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004568:	d828      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d02a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d822      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800457a:	d026      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800457c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004580:	d81c      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004586:	d010      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458c:	d816      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01d      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004596:	d111      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fd28 	bl	8004ff4 <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045a8:	e012      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fdd1 	bl	8005158 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045ba:	e009      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
      break;
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045c2:	bf00      	nop
 80045c4:	e004      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d6:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	492a      	ldr	r1, [pc, #168]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	654b      	str	r3, [r1, #84]	; 0x54
 80045ea:	e001      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d04d      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004602:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004606:	d02e      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004608:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800460c:	d828      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d02a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d822      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800461a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800461e:	d026      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004624:	d81c      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d010      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004630:	d816      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01d      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d111      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fcd6 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800464c:	e012      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3324      	adds	r3, #36	; 0x24
 8004652:	2102      	movs	r1, #2
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fd7f 	bl	8005158 <RCCEx_PLL3_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
      break;
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004688:	4901      	ldr	r1, [pc, #4]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800468a:	4313      	orrs	r3, r2
 800468c:	658b      	str	r3, [r1, #88]	; 0x58
 800468e:	e003      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d04b      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046ae:	d02e      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80046b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046b4:	d828      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ba:	d02a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	d822      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046c6:	d026      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80046c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046cc:	d81c      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d2:	d010      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d8:	d816      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01d      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	d111      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fc82 	bl	8004ff4 <RCCEx_PLL2_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046f4:	e012      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3324      	adds	r3, #36	; 0x24
 80046fa:	2102      	movs	r1, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd2b 	bl	8005158 <RCCEx_PLL3_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004706:	e009      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
      break;
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800470e:	bf00      	nop
 8004710:	e004      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800471a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004722:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004730:	4999      	ldr	r1, [pc, #612]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004732:	4313      	orrs	r3, r2
 8004734:	658b      	str	r3, [r1, #88]	; 0x58
 8004736:	e001      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004752:	d10a      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fcfc 	bl	8005158 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004778:	4987      	ldr	r1, [pc, #540]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004794:	d10a      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3324      	adds	r3, #36	; 0x24
 800479a:	2102      	movs	r1, #2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fcdb 	bl	8005158 <RCCEx_PLL3_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ac:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ba:	4977      	ldr	r1, [pc, #476]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d034      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d6:	d01d      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80047d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047dc:	d817      	bhi.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80047e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80047e8:	e011      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fbff 	bl	8004ff4 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047fa:	e00c      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	2102      	movs	r1, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fca8 	bl	8005158 <RCCEx_PLL3_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
      break;
 8004812:	e000      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004816:	7dfb      	ldrb	r3, [r7, #23]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481c:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800482a:	495b      	ldr	r1, [pc, #364]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	658b      	str	r3, [r1, #88]	; 0x58
 8004830:	e001      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d033      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800484c:	d01c      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800484e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004852:	d816      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004858:	d003      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800485a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485e:	d007      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004860:	e00f      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004862:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4a4c      	ldr	r2, [pc, #304]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800486e:	e00c      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3324      	adds	r3, #36	; 0x24
 8004874:	2101      	movs	r1, #1
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fc6e 	bl	8005158 <RCCEx_PLL3_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
      break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	493e      	ldr	r1, [pc, #248]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	654b      	str	r3, [r1, #84]	; 0x54
 80048a4:	e001      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d029      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d007      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80048c4:	e00f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a33      	ldr	r2, [pc, #204]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048d2:	e00b      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	2102      	movs	r1, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fb8a 	bl	8004ff4 <RCCEx_PLL2_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
      break;
 80048ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048f2:	4b29      	ldr	r3, [pc, #164]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	4926      	ldr	r1, [pc, #152]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004904:	e001      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3324      	adds	r3, #36	; 0x24
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fc1b 	bl	8005158 <RCCEx_PLL3_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d033      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004940:	d017      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004946:	d811      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494c:	d013      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800494e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004952:	d80b      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d010      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800496a:	e007      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
      break;
 8004970:	e004      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800497a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498e:	4902      	ldr	r1, [pc, #8]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004990:	4313      	orrs	r3, r2
 8004992:	654b      	str	r3, [r1, #84]	; 0x54
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ac:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	492e      	ldr	r1, [pc, #184]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049ca:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049d8:	4926      	ldr	r1, [pc, #152]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f6:	491f      	ldr	r1, [pc, #124]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a12:	6113      	str	r3, [r2, #16]
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a1e:	4915      	ldr	r1, [pc, #84]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da08      	bge.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	490e      	ldr	r1, [pc, #56]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	4906      	ldr	r1, [pc, #24]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a5e:	7dbb      	ldrb	r3, [r7, #22]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400

08004a78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a7c:	f7ff f85a 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4904      	ldr	r1, [pc, #16]	; (8004aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	0800e6fc 	.word	0x0800e6fc

08004aa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aac:	4ba1      	ldr	r3, [pc, #644]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ab6:	4b9f      	ldr	r3, [pc, #636]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	0b1b      	lsrs	r3, r3, #12
 8004abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ac2:	4b9c      	ldr	r3, [pc, #624]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ace:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8111 	beq.w	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	f000 8083 	beq.w	8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	f200 80a1 	bhi.w	8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d056      	beq.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b0e:	e099      	b.n	8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b10:	4b88      	ldr	r3, [pc, #544]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02d      	beq.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b1c:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	4a84      	ldr	r2, [pc, #528]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b7b      	ldr	r3, [pc, #492]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b76:	e087      	b.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bba:	e065      	b.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bfe:	e043      	b.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c42:	e021      	b.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	0a5b      	lsrs	r3, r3, #9
 8004c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cae:	ee17 2a90 	vmov	r2, s15
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	ee17 2a90 	vmov	r2, s15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0a:	ee17 2a90 	vmov	r2, s15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
}
 8004d26:	bf00      	nop
 8004d28:	3724      	adds	r7, #36	; 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	03d09000 	.word	0x03d09000
 8004d3c:	46000000 	.word	0x46000000
 8004d40:	4c742400 	.word	0x4c742400
 8004d44:	4a742400 	.word	0x4a742400
 8004d48:	4af42400 	.word	0x4af42400

08004d4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d54:	4ba1      	ldr	r3, [pc, #644]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d5e:	4b9f      	ldr	r3, [pc, #636]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	0d1b      	lsrs	r3, r3, #20
 8004d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d6a:	4b9c      	ldr	r3, [pc, #624]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d76:	4b99      	ldr	r3, [pc, #612]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	08db      	lsrs	r3, r3, #3
 8004d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8111 	beq.w	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f000 8083 	beq.w	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	f200 80a1 	bhi.w	8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d056      	beq.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004db6:	e099      	b.n	8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db8:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d02d      	beq.n	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dc4:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	4a84      	ldr	r2, [pc, #528]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dee:	4b7b      	ldr	r3, [pc, #492]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e1e:	e087      	b.n	8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e62:	e065      	b.n	8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea6:	e043      	b.n	8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eba:	4b48      	ldr	r3, [pc, #288]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ece:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eea:	e021      	b.n	8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b37      	ldr	r3, [pc, #220]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f30:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	0a5b      	lsrs	r3, r3, #9
 8004f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f56:	ee17 2a90 	vmov	r2, s15
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f5e:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f84:	ee17 2a90 	vmov	r2, s15
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f8c:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	0e1b      	lsrs	r3, r3, #24
 8004f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb2:	ee17 2a90 	vmov	r2, s15
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fba:	e008      	b.n	8004fce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	3724      	adds	r7, #36	; 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	03d09000 	.word	0x03d09000
 8004fe4:	46000000 	.word	0x46000000
 8004fe8:	4c742400 	.word	0x4c742400
 8004fec:	4a742400 	.word	0x4a742400
 8004ff0:	4af42400 	.word	0x4af42400

08004ff4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d101      	bne.n	8005012 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e099      	b.n	8005146 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a4e      	ldr	r2, [pc, #312]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501e:	f7fd fa9f 	bl	8002560 <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005024:	e008      	b.n	8005038 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005026:	f7fd fa9b 	bl	8002560 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e086      	b.n	8005146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005044:	4b42      	ldr	r3, [pc, #264]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	031b      	lsls	r3, r3, #12
 8005052:	493f      	ldr	r1, [pc, #252]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	628b      	str	r3, [r1, #40]	; 0x28
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	025b      	lsls	r3, r3, #9
 800506a:	b29b      	uxth	r3, r3
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005088:	4931      	ldr	r1, [pc, #196]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	492d      	ldr	r1, [pc, #180]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f023 0220 	bic.w	r2, r3, #32
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4928      	ldr	r1, [pc, #160]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	4a26      	ldr	r2, [pc, #152]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	f023 0310 	bic.w	r3, r3, #16
 80050bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <RCCEx_PLL2_Config+0x160>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	69d2      	ldr	r2, [r2, #28]
 80050ca:	00d2      	lsls	r2, r2, #3
 80050cc:	4920      	ldr	r1, [pc, #128]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050d2:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	f043 0310 	orr.w	r3, r3, #16
 80050dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f0:	e00f      	b.n	8005112 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a14      	ldr	r2, [pc, #80]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005104:	e005      	b.n	8005112 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800510c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800511c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fd fa1f 	bl	8002560 <HAL_GetTick>
 8005122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005124:	e008      	b.n	8005138 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005126:	f7fd fa1b 	bl	8002560 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e006      	b.n	8005146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	58024400 	.word	0x58024400
 8005154:	ffff0007 	.word	0xffff0007

08005158 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005166:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d101      	bne.n	8005176 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e099      	b.n	80052aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005176:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4e      	ldr	r2, [pc, #312]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fd f9ed 	bl	8002560 <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800518a:	f7fd f9e9 	bl	8002560 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e086      	b.n	80052aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051a8:	4b42      	ldr	r3, [pc, #264]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	051b      	lsls	r3, r3, #20
 80051b6:	493f      	ldr	r1, [pc, #252]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	; 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051ec:	4931      	ldr	r1, [pc, #196]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051f2:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005204:	4b2b      	ldr	r3, [pc, #172]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4928      	ldr	r1, [pc, #160]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005216:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <RCCEx_PLL3_Config+0x160>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69d2      	ldr	r2, [r2, #28]
 800522e:	00d2      	lsls	r2, r2, #3
 8005230:	4920      	ldr	r1, [pc, #128]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800524e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005254:	e00f      	b.n	8005276 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005268:	e005      	b.n	8005276 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fd f96d 	bl	8002560 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005288:	e008      	b.n	800529c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800528a:	f7fd f969 	bl	8002560 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	ffff0007 	.word	0xffff0007

080052bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0f1      	b.n	80054b2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a78      	ldr	r2, [pc, #480]	; (80054bc <HAL_SPI_Init+0x200>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <HAL_SPI_Init+0x42>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a77      	ldr	r2, [pc, #476]	; (80054c0 <HAL_SPI_Init+0x204>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00a      	beq.n	80052fe <HAL_SPI_Init+0x42>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a75      	ldr	r2, [pc, #468]	; (80054c4 <HAL_SPI_Init+0x208>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d005      	beq.n	80052fe <HAL_SPI_Init+0x42>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d901      	bls.n	80052fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0d9      	b.n	80054b2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 ff66 	bl	80061d0 <SPI_GetPacketSize>
 8005304:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6c      	ldr	r2, [pc, #432]	; (80054bc <HAL_SPI_Init+0x200>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00c      	beq.n	800532a <HAL_SPI_Init+0x6e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_SPI_Init+0x204>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_SPI_Init+0x6e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a69      	ldr	r2, [pc, #420]	; (80054c4 <HAL_SPI_Init+0x208>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d002      	beq.n	800532a <HAL_SPI_Init+0x6e>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d811      	bhi.n	800534e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800532e:	4a63      	ldr	r2, [pc, #396]	; (80054bc <HAL_SPI_Init+0x200>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a61      	ldr	r2, [pc, #388]	; (80054c0 <HAL_SPI_Init+0x204>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_SPI_Init+0x8c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a60      	ldr	r2, [pc, #384]	; (80054c4 <HAL_SPI_Init+0x208>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d104      	bne.n	8005352 <HAL_SPI_Init+0x96>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b10      	cmp	r3, #16
 800534c:	d901      	bls.n	8005352 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0af      	b.n	80054b2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fc08 	bl	8001b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800538e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005398:	d119      	bne.n	80053ce <HAL_SPI_Init+0x112>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a2:	d103      	bne.n	80053ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10c      	bne.n	80053ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053bc:	d107      	bne.n	80053ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	ea42 0103 	orr.w	r1, r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	ea42 0103 	orr.w	r1, r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005458:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800546c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40013000 	.word	0x40013000
 80054c0:	40003800 	.word	0x40003800
 80054c4:	40003c00 	.word	0x40003c00

080054c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3320      	adds	r3, #32
 80054de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Transmit+0x2a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e1d7      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054fa:	f7fd f831 	bl	8002560 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d007      	beq.n	800551c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005518:	7efb      	ldrb	r3, [r7, #27]
 800551a:	e1c2      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_SPI_Transmit+0x60>
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005534:	7efb      	ldrb	r3, [r7, #27]
 8005536:	e1b4      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005588:	d107      	bne.n	800559a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b96      	ldr	r3, [pc, #600]	; (80057fc <HAL_SPI_Transmit+0x334>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	88f9      	ldrh	r1, [r7, #6]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d107      	bne.n	80055d8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d947      	bls.n	8005670 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055e0:	e03f      	b.n	8005662 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d114      	bne.n	800561a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005618:	e023      	b.n	8005662 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561a:	f7fc ffa1 	bl	8002560 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d803      	bhi.n	8005632 <HAL_SPI_Transmit+0x16a>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d102      	bne.n	8005638 <HAL_SPI_Transmit+0x170>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d114      	bne.n	8005662 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fcfb 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e11f      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1b9      	bne.n	80055e2 <HAL_SPI_Transmit+0x11a>
 800566e:	e0f2      	b.n	8005856 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b07      	cmp	r3, #7
 8005676:	f240 80e7 	bls.w	8005848 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800567a:	e05d      	b.n	8005738 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d132      	bne.n	80056f0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	d918      	bls.n	80056c8 <HAL_SPI_Transmit+0x200>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d014      	beq.n	80056c8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b02      	subs	r3, #2
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056c6:	e037      	b.n	8005738 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056ee:	e023      	b.n	8005738 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f0:	f7fc ff36 	bl	8002560 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d803      	bhi.n	8005708 <HAL_SPI_Transmit+0x240>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d102      	bne.n	800570e <HAL_SPI_Transmit+0x246>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d114      	bne.n	8005738 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fc90 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0b4      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d19b      	bne.n	800567c <HAL_SPI_Transmit+0x1b4>
 8005744:	e087      	b.n	8005856 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b02      	cmp	r3, #2
 8005752:	d155      	bne.n	8005800 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b03      	cmp	r3, #3
 800575e:	d918      	bls.n	8005792 <HAL_SPI_Transmit+0x2ca>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d914      	bls.n	8005792 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b04      	subs	r3, #4
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005790:	e05a      	b.n	8005848 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d917      	bls.n	80057ce <HAL_SPI_Transmit+0x306>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	881a      	ldrh	r2, [r3, #0]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	1c9a      	adds	r2, r3, #2
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b02      	subs	r3, #2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057cc:	e03c      	b.n	8005848 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3320      	adds	r3, #32
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057f8:	e026      	b.n	8005848 <HAL_SPI_Transmit+0x380>
 80057fa:	bf00      	nop
 80057fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005800:	f7fc feae 	bl	8002560 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d803      	bhi.n	8005818 <HAL_SPI_Transmit+0x350>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d102      	bne.n	800581e <HAL_SPI_Transmit+0x356>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d114      	bne.n	8005848 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fc08 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e02c      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	f47f af78 	bne.w	8005746 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2108      	movs	r1, #8
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fc87 	bl	8006174 <SPI_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fbd9 	bl	8006034 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80058a0:	7efb      	ldrb	r3, [r7, #27]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop

080058ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3330      	adds	r3, #48	; 0x30
 80058c6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d0:	d112      	bne.n	80058f8 <HAL_SPI_Receive+0x4c>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10e      	bne.n	80058f8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2204      	movs	r2, #4
 80058de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f978 	bl	8005be4 <HAL_SPI_TransmitReceive>
 80058f4:	4603      	mov	r3, r0
 80058f6:	e16f      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_SPI_Receive+0x5a>
 8005902:	2302      	movs	r3, #2
 8005904:	e168      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800590e:	f7fc fe27 	bl	8002560 <HAL_GetTick>
 8005912:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d007      	beq.n	8005930 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005920:	2302      	movs	r3, #2
 8005922:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800592c:	7ffb      	ldrb	r3, [r7, #31]
 800592e:	e153      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Receive+0x90>
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
 800594a:	e145      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2204      	movs	r2, #4
 8005950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800599c:	d107      	bne.n	80059ae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b8a      	ldr	r3, [pc, #552]	; (8005be0 <HAL_SPI_Receive+0x334>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	88f9      	ldrh	r1, [r7, #6]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	430b      	orrs	r3, r1
 80059c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059da:	d107      	bne.n	80059ec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d948      	bls.n	8005a86 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80059f4:	e040      	b.n	8005a78 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	f248 0308 	movw	r3, #32776	; 0x8008
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d014      	beq.n	8005a30 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a2e:	e023      	b.n	8005a78 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a30:	f7fc fd96 	bl	8002560 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d803      	bhi.n	8005a48 <HAL_SPI_Receive+0x19c>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d102      	bne.n	8005a4e <HAL_SPI_Receive+0x1a2>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d114      	bne.n	8005a78 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 faf0 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0af      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1b8      	bne.n	80059f6 <HAL_SPI_Receive+0x14a>
 8005a84:	e095      	b.n	8005bb2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b07      	cmp	r3, #7
 8005a8c:	f240 808b 	bls.w	8005ba6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a90:	e03f      	b.n	8005b12 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d114      	bne.n	8005aca <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab0:	1c9a      	adds	r2, r3, #2
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ac8:	e023      	b.n	8005b12 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aca:	f7fc fd49 	bl	8002560 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d803      	bhi.n	8005ae2 <HAL_SPI_Receive+0x236>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_Receive+0x23c>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d114      	bne.n	8005b12 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 faa3 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e062      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1b9      	bne.n	8005a92 <HAL_SPI_Receive+0x1e6>
 8005b1e:	e048      	b.n	8005bb2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d117      	bne.n	8005b5e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b5c:	e023      	b.n	8005ba6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5e:	f7fc fcff 	bl	8002560 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d803      	bhi.n	8005b76 <HAL_SPI_Receive+0x2ca>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Receive+0x2d0>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d114      	bne.n	8005ba6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fa59 	bl	8006034 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e018      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1b6      	bne.n	8005b20 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa3e 	bl	8006034 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	ffff0000 	.word	0xffff0000

08005be4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08e      	sub	sp, #56	; 0x38
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3320      	adds	r3, #32
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3330      	adds	r3, #48	; 0x30
 8005c06:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_TransmitReceive+0x32>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e209      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1e:	f7fc fc9f 	bl	8002560 <HAL_GetTick>
 8005c22:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c3a:	7efb      	ldrb	r3, [r7, #27]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d014      	beq.n	8005c6a <HAL_SPI_TransmitReceive+0x86>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c46:	d106      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005c50:	7efb      	ldrb	r3, [r7, #27]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d009      	beq.n	8005c6a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c68:	e1df      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x98>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x98>
 8005c76:	887b      	ldrh	r3, [r7, #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e1cc      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d003      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2205      	movs	r2, #5
 8005ca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	887a      	ldrh	r2, [r7, #2]
 8005cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4b82      	ldr	r3, [pc, #520]	; (8005ef4 <HAL_SPI_TransmitReceive+0x310>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	8879      	ldrh	r1, [r7, #2]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d10:	d107      	bne.n	8005d22 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d970      	bls.n	8005e0c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d2a:	e068      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d11a      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x18c>
 8005d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	f248 0308 	movw	r3, #32776	; 0x8008
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01a      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x1d2>
 8005d80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005db4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db6:	f7fc fbd3 	bl	8002560 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d803      	bhi.n	8005dce <HAL_SPI_TransmitReceive+0x1ea>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d102      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x1f0>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d114      	bne.n	8005dfe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f92d 	bl	8006034 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e115      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d193      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x148>
 8005e04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d190      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x148>
 8005e0a:	e0e7      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b07      	cmp	r3, #7
 8005e12:	f240 80dd 	bls.w	8005fd0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e16:	e066      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d119      	bne.n	8005e5a <HAL_SPI_TransmitReceive+0x276>
 8005e26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d016      	beq.n	8005e5a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e58:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d11a      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x2ba>
 8005e68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d017      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	8812      	ldrh	r2, [r2, #0]
 8005e76:	b292      	uxth	r2, r2
 8005e78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7e:	1c9a      	adds	r2, r3, #2
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e9e:	f7fc fb5f 	bl	8002560 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d803      	bhi.n	8005eb6 <HAL_SPI_TransmitReceive+0x2d2>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d102      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x2d8>
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d114      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f8b9 	bl	8006034 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e0a1      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d195      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x234>
 8005eec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d192      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x234>
 8005ef2:	e073      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x3f8>
 8005ef4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d11b      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x35a>
 8005f06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3320      	adds	r3, #32
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d11d      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x3a4>
 8005f4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01a      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f86:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f88:	f7fc faea 	bl	8002560 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d803      	bhi.n	8005fa0 <HAL_SPI_TransmitReceive+0x3bc>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d102      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x3c2>
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d114      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f844 	bl	8006034 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e02c      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d190      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x314>
 8005fd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d18d      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2108      	movs	r1, #8
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f8c4 	bl	8006174 <SPI_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff8:	f043 0220 	orr.w	r2, r3, #32
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f816 	bl	8006034 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e001      	b.n	800602a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800602a:	4618      	mov	r0, r3
 800602c:	3730      	adds	r7, #48	; 0x30
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop

08006034 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0208 	orr.w	r2, r2, #8
 8006052:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0210 	orr.w	r2, r2, #16
 8006062:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6919      	ldr	r1, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <SPI_CloseTransfer+0x13c>)
 8006080:	400b      	ands	r3, r1
 8006082:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006092:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b04      	cmp	r3, #4
 800609e:	d014      	beq.n	80060ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00f      	beq.n	80060ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0220 	orr.w	r2, r2, #32
 80060c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d014      	beq.n	8006100 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00f      	beq.n	8006100 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00f      	beq.n	800612a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006110:	f043 0201 	orr.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006128:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613a:	f043 0208 	orr.w	r2, r3, #8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006152:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	fffffc90 	.word	0xfffffc90

08006174 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006184:	e010      	b.n	80061a8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006186:	f7fc f9eb 	bl	8002560 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	429a      	cmp	r2, r3
 8006194:	d803      	bhi.n	800619e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d102      	bne.n	80061a4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00f      	b.n	80061c8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d0df      	beq.n	8006186 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3307      	adds	r3, #7
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e049      	b.n	80062ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fb ff9d 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f000 faa3 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e049      	b.n	800635a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f841 	bl	8006362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fa4c 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006392:	2302      	movs	r3, #2
 8006394:	e0ff      	b.n	8006596 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b14      	cmp	r3, #20
 80063a2:	f200 80f0 	bhi.w	8006586 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	08006401 	.word	0x08006401
 80063b0:	08006587 	.word	0x08006587
 80063b4:	08006587 	.word	0x08006587
 80063b8:	08006587 	.word	0x08006587
 80063bc:	08006441 	.word	0x08006441
 80063c0:	08006587 	.word	0x08006587
 80063c4:	08006587 	.word	0x08006587
 80063c8:	08006587 	.word	0x08006587
 80063cc:	08006483 	.word	0x08006483
 80063d0:	08006587 	.word	0x08006587
 80063d4:	08006587 	.word	0x08006587
 80063d8:	08006587 	.word	0x08006587
 80063dc:	080064c3 	.word	0x080064c3
 80063e0:	08006587 	.word	0x08006587
 80063e4:	08006587 	.word	0x08006587
 80063e8:	08006587 	.word	0x08006587
 80063ec:	08006505 	.word	0x08006505
 80063f0:	08006587 	.word	0x08006587
 80063f4:	08006587 	.word	0x08006587
 80063f8:	08006587 	.word	0x08006587
 80063fc:	08006545 	.word	0x08006545
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fa5c 	bl	80068c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0208 	orr.w	r2, r2, #8
 800641a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6999      	ldr	r1, [r3, #24]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	619a      	str	r2, [r3, #24]
      break;
 800643e:	e0a5      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 facc 	bl	80069e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6999      	ldr	r1, [r3, #24]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	021a      	lsls	r2, r3, #8
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	619a      	str	r2, [r3, #24]
      break;
 8006480:	e084      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fb35 	bl	8006af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0208 	orr.w	r2, r2, #8
 800649c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0204 	bic.w	r2, r2, #4
 80064ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69d9      	ldr	r1, [r3, #28]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	61da      	str	r2, [r3, #28]
      break;
 80064c0:	e064      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fb9d 	bl	8006c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69d9      	ldr	r1, [r3, #28]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	021a      	lsls	r2, r3, #8
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	61da      	str	r2, [r3, #28]
      break;
 8006502:	e043      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fbe6 	bl	8006cdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0208 	orr.w	r2, r2, #8
 800651e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0204 	bic.w	r2, r2, #4
 800652e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006542:	e023      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fc2a 	bl	8006da4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006584:	e002      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006594:	7dfb      	ldrb	r3, [r7, #23]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop

080065a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_ConfigClockSource+0x1c>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e0dc      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x1d6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4b6a      	ldr	r3, [pc, #424]	; (8006780 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065d8:	4013      	ands	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a64      	ldr	r2, [pc, #400]	; (8006784 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	f000 80a9 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 80065f8:	4a62      	ldr	r2, [pc, #392]	; (8006784 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f200 80ae 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006600:	4a61      	ldr	r2, [pc, #388]	; (8006788 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	f000 80a1 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006608:	4a5f      	ldr	r2, [pc, #380]	; (8006788 <HAL_TIM_ConfigClockSource+0x1e8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f200 80a6 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006610:	4a5e      	ldr	r2, [pc, #376]	; (800678c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f000 8099 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006618:	4a5c      	ldr	r2, [pc, #368]	; (800678c <HAL_TIM_ConfigClockSource+0x1ec>)
 800661a:	4293      	cmp	r3, r2
 800661c:	f200 809e 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006620:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006624:	f000 8091 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006628:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800662c:	f200 8096 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006634:	f000 8089 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663c:	f200 808e 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006644:	d03e      	beq.n	80066c4 <HAL_TIM_ConfigClockSource+0x124>
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664a:	f200 8087 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	f000 8086 	beq.w	8006762 <HAL_TIM_ConfigClockSource+0x1c2>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d87f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d01a      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0xf6>
 8006660:	2b70      	cmp	r3, #112	; 0x70
 8006662:	d87b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d050      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x16a>
 8006668:	2b60      	cmp	r3, #96	; 0x60
 800666a:	d877      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d03c      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x14a>
 8006670:	2b50      	cmp	r3, #80	; 0x50
 8006672:	d873      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d058      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x18a>
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d86f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d064      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006680:	2b30      	cmp	r3, #48	; 0x30
 8006682:	d86b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d060      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d867      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05c      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006690:	2b10      	cmp	r3, #16
 8006692:	d05a      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1aa>
 8006694:	e062      	b.n	800675c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6899      	ldr	r1, [r3, #8]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f000 fc61 	bl	8006f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	609a      	str	r2, [r3, #8]
      break;
 80066c2:	e04f      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6899      	ldr	r1, [r3, #8]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f000 fc4a 	bl	8006f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e6:	609a      	str	r2, [r3, #8]
      break;
 80066e8:	e03c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 fbba 	bl	8006e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2150      	movs	r1, #80	; 0x50
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fc14 	bl	8006f30 <TIM_ITRx_SetConfig>
      break;
 8006708:	e02c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	461a      	mov	r2, r3
 8006718:	f000 fbd9 	bl	8006ece <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2160      	movs	r1, #96	; 0x60
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fc04 	bl	8006f30 <TIM_ITRx_SetConfig>
      break;
 8006728:	e01c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6859      	ldr	r1, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	461a      	mov	r2, r3
 8006738:	f000 fb9a 	bl	8006e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2140      	movs	r1, #64	; 0x40
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fbf4 	bl	8006f30 <TIM_ITRx_SetConfig>
      break;
 8006748:	e00c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 fbeb 	bl	8006f30 <TIM_ITRx_SetConfig>
      break;
 800675a:	e003      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
      break;
 8006760:	e000      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	ffceff88 	.word	0xffceff88
 8006784:	00100040 	.word	0x00100040
 8006788:	00100030 	.word	0x00100030
 800678c:	00100020 	.word	0x00100020

08006790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a40      	ldr	r2, [pc, #256]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ae:	d00f      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3d      	ldr	r2, [pc, #244]	; (80068a8 <TIM_Base_SetConfig+0x118>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <TIM_Base_SetConfig+0x11c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3b      	ldr	r2, [pc, #236]	; (80068b0 <TIM_Base_SetConfig+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3a      	ldr	r2, [pc, #232]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d108      	bne.n	80067e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <TIM_Base_SetConfig+0x118>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <TIM_Base_SetConfig+0x11c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <TIM_Base_SetConfig+0x120>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <TIM_Base_SetConfig+0x128>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <TIM_Base_SetConfig+0x128>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d103      	bne.n	8006890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	615a      	str	r2, [r3, #20]
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <TIM_OC1_SetConfig+0x108>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0302 	bic.w	r3, r3, #2
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a2d      	ldr	r2, [pc, #180]	; (80069d0 <TIM_OC1_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <TIM_OC1_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <TIM_OC1_SetConfig+0x114>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <TIM_OC1_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <TIM_OC1_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <TIM_OC1_SetConfig+0x10c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <TIM_OC1_SetConfig+0x110>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <TIM_OC1_SetConfig+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <TIM_OC1_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <TIM_OC1_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	fffeff8f 	.word	0xfffeff8f
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0210 	bic.w	r2, r3, #16
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <TIM_OC2_SetConfig+0xfc>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0320 	bic.w	r3, r3, #32
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <TIM_OC2_SetConfig+0x100>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC2_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <TIM_OC2_SetConfig+0x104>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d10d      	bne.n	8006a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <TIM_OC2_SetConfig+0x100>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <TIM_OC2_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <TIM_OC2_SetConfig+0x108>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <TIM_OC2_SetConfig+0x10c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <TIM_OC2_SetConfig+0x110>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	feff8fff 	.word	0xfeff8fff
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800

08006af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4b33      	ldr	r3, [pc, #204]	; (8006bf0 <TIM_OC3_SetConfig+0xf8>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <TIM_OC3_SetConfig+0xfc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC3_SetConfig+0x66>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <TIM_OC3_SetConfig+0x100>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <TIM_OC3_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <TIM_OC3_SetConfig+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <TIM_OC3_SetConfig+0x104>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <TIM_OC3_SetConfig+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <TIM_OC3_SetConfig+0x10c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d113      	bne.n	8006bca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	fffeff8f 	.word	0xfffeff8f
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <TIM_OC4_SetConfig+0xbc>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <TIM_OC4_SetConfig+0xc0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00f      	beq.n	8006c88 <TIM_OC4_SetConfig+0x80>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <TIM_OC4_SetConfig+0xc4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC4_SetConfig+0x80>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <TIM_OC4_SetConfig+0xc8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC4_SetConfig+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <TIM_OC4_SetConfig+0xcc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <TIM_OC4_SetConfig+0xd0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	feff8fff 	.word	0xfeff8fff
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <TIM_OC5_SetConfig+0xb0>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <TIM_OC5_SetConfig+0xb4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00f      	beq.n	8006d52 <TIM_OC5_SetConfig+0x76>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <TIM_OC5_SetConfig+0xb8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00b      	beq.n	8006d52 <TIM_OC5_SetConfig+0x76>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <TIM_OC5_SetConfig+0xbc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d007      	beq.n	8006d52 <TIM_OC5_SetConfig+0x76>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <TIM_OC5_SetConfig+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d003      	beq.n	8006d52 <TIM_OC5_SetConfig+0x76>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a14      	ldr	r2, [pc, #80]	; (8006da0 <TIM_OC5_SetConfig+0xc4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d109      	bne.n	8006d66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	fffeff8f 	.word	0xfffeff8f
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800

08006da4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <TIM_OC6_SetConfig+0xb4>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	051b      	lsls	r3, r3, #20
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a19      	ldr	r2, [pc, #100]	; (8006e5c <TIM_OC6_SetConfig+0xb8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00f      	beq.n	8006e1c <TIM_OC6_SetConfig+0x78>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <TIM_OC6_SetConfig+0xbc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_OC6_SetConfig+0x78>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <TIM_OC6_SetConfig+0xc0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_OC6_SetConfig+0x78>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <TIM_OC6_SetConfig+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC6_SetConfig+0x78>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <TIM_OC6_SetConfig+0xc8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d109      	bne.n	8006e30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	feff8fff 	.word	0xfeff8fff
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40010400 	.word	0x40010400
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40014400 	.word	0x40014400
 8006e6c:	40014800 	.word	0x40014800

08006e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f023 0201 	bic.w	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 030a 	bic.w	r3, r3, #10
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b087      	sub	sp, #28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f023 0210 	bic.w	r2, r3, #16
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <TIM_ITRx_SetConfig+0x38>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f043 0307 	orr.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	609a      	str	r2, [r3, #8]
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	ffcfff8f 	.word	0xffcfff8f

08006f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e06d      	b.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d108      	bne.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007036:	d01d      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10c      	bne.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4313      	orrs	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
 80070c0:	40001800 	.word	0x40001800
 80070c4:	40014000 	.word	0x40014000

080070c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e042      	b.n	8007160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fb f921 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2224      	movs	r2, #36	; 0x24
 80070f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8c2 	bl	8007294 <UART_SetConfig>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e022      	b.n	8007160 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fe1e 	bl	8007d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fea5 	bl	8007ea8 <UART_CheckIdleState>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717e:	2b20      	cmp	r3, #32
 8007180:	f040 8083 	bne.w	800728a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_UART_Transmit+0x28>
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e07b      	b.n	800728c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Transmit+0x3a>
 800719e:	2302      	movs	r3, #2
 80071a0:	e074      	b.n	800728c <HAL_UART_Transmit+0x124>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2221      	movs	r2, #33	; 0x21
 80071b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ba:	f7fb f9d1 	bl	8002560 <HAL_GetTick>
 80071be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	d108      	bne.n	80071ec <HAL_UART_Transmit+0x84>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e003      	b.n	80071f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071fc:	e02c      	b.n	8007258 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fe98 	bl	8007f3e <UART_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e039      	b.n	800728c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800722c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3302      	adds	r3, #2
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e007      	b.n	8007246 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800725e:	b29b      	uxth	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1cc      	bne.n	80071fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2200      	movs	r2, #0
 800726c:	2140      	movs	r1, #64	; 0x40
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fe65 	bl	8007f3e <UART_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e000      	b.n	800728c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800728a:	2302      	movs	r3, #2
  }
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007298:	b092      	sub	sp, #72	; 0x48
 800729a:	af00      	add	r7, sp, #0
 800729c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4bbe      	ldr	r3, [pc, #760]	; (80075bc <UART_SetConfig+0x328>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4ab3      	ldr	r2, [pc, #716]	; (80075c0 <UART_SetConfig+0x32c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fc:	4313      	orrs	r3, r2
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	4baf      	ldr	r3, [pc, #700]	; (80075c4 <UART_SetConfig+0x330>)
 8007308:	4013      	ands	r3, r2
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007310:	430b      	orrs	r3, r1
 8007312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f023 010f 	bic.w	r1, r3, #15
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4aa6      	ldr	r2, [pc, #664]	; (80075c8 <UART_SetConfig+0x334>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d177      	bne.n	8007424 <UART_SetConfig+0x190>
 8007334:	4ba5      	ldr	r3, [pc, #660]	; (80075cc <UART_SetConfig+0x338>)
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800733c:	2b28      	cmp	r3, #40	; 0x28
 800733e:	d86d      	bhi.n	800741c <UART_SetConfig+0x188>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <UART_SetConfig+0xb4>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	080073ed 	.word	0x080073ed
 800734c:	0800741d 	.word	0x0800741d
 8007350:	0800741d 	.word	0x0800741d
 8007354:	0800741d 	.word	0x0800741d
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	080073f5 	.word	0x080073f5
 800736c:	0800741d 	.word	0x0800741d
 8007370:	0800741d 	.word	0x0800741d
 8007374:	0800741d 	.word	0x0800741d
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	080073fd 	.word	0x080073fd
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	08007405 	.word	0x08007405
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e222      	b.n	800783a <UART_SetConfig+0x5a6>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e21e      	b.n	800783a <UART_SetConfig+0x5a6>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e21a      	b.n	800783a <UART_SetConfig+0x5a6>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e216      	b.n	800783a <UART_SetConfig+0x5a6>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e212      	b.n	800783a <UART_SetConfig+0x5a6>
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e20e      	b.n	800783a <UART_SetConfig+0x5a6>
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e20a      	b.n	800783a <UART_SetConfig+0x5a6>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a69      	ldr	r2, [pc, #420]	; (80075d0 <UART_SetConfig+0x33c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d130      	bne.n	8007490 <UART_SetConfig+0x1fc>
 800742e:	4b67      	ldr	r3, [pc, #412]	; (80075cc <UART_SetConfig+0x338>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b05      	cmp	r3, #5
 8007438:	d826      	bhi.n	8007488 <UART_SetConfig+0x1f4>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0x1ac>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007459 	.word	0x08007459
 8007444:	08007461 	.word	0x08007461
 8007448:	08007469 	.word	0x08007469
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e1ec      	b.n	800783a <UART_SetConfig+0x5a6>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e1e8      	b.n	800783a <UART_SetConfig+0x5a6>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e1e4      	b.n	800783a <UART_SetConfig+0x5a6>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e1e0      	b.n	800783a <UART_SetConfig+0x5a6>
 8007478:	2320      	movs	r3, #32
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e1dc      	b.n	800783a <UART_SetConfig+0x5a6>
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e1d8      	b.n	800783a <UART_SetConfig+0x5a6>
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e1d4      	b.n	800783a <UART_SetConfig+0x5a6>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a4f      	ldr	r2, [pc, #316]	; (80075d4 <UART_SetConfig+0x340>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d130      	bne.n	80074fc <UART_SetConfig+0x268>
 800749a:	4b4c      	ldr	r3, [pc, #304]	; (80075cc <UART_SetConfig+0x338>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d826      	bhi.n	80074f4 <UART_SetConfig+0x260>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x218>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	080074d5 	.word	0x080074d5
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e1b6      	b.n	800783a <UART_SetConfig+0x5a6>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e1b2      	b.n	800783a <UART_SetConfig+0x5a6>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e1ae      	b.n	800783a <UART_SetConfig+0x5a6>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e1aa      	b.n	800783a <UART_SetConfig+0x5a6>
 80074e4:	2320      	movs	r3, #32
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e1a6      	b.n	800783a <UART_SetConfig+0x5a6>
 80074ec:	2340      	movs	r3, #64	; 0x40
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e1a2      	b.n	800783a <UART_SetConfig+0x5a6>
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e19e      	b.n	800783a <UART_SetConfig+0x5a6>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a35      	ldr	r2, [pc, #212]	; (80075d8 <UART_SetConfig+0x344>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d130      	bne.n	8007568 <UART_SetConfig+0x2d4>
 8007506:	4b31      	ldr	r3, [pc, #196]	; (80075cc <UART_SetConfig+0x338>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b05      	cmp	r3, #5
 8007510:	d826      	bhi.n	8007560 <UART_SetConfig+0x2cc>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0x284>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007531 	.word	0x08007531
 800751c:	08007539 	.word	0x08007539
 8007520:	08007541 	.word	0x08007541
 8007524:	08007549 	.word	0x08007549
 8007528:	08007551 	.word	0x08007551
 800752c:	08007559 	.word	0x08007559
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e180      	b.n	800783a <UART_SetConfig+0x5a6>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e17c      	b.n	800783a <UART_SetConfig+0x5a6>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e178      	b.n	800783a <UART_SetConfig+0x5a6>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e174      	b.n	800783a <UART_SetConfig+0x5a6>
 8007550:	2320      	movs	r3, #32
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007556:	e170      	b.n	800783a <UART_SetConfig+0x5a6>
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e16c      	b.n	800783a <UART_SetConfig+0x5a6>
 8007560:	2380      	movs	r3, #128	; 0x80
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e168      	b.n	800783a <UART_SetConfig+0x5a6>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <UART_SetConfig+0x348>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d142      	bne.n	80075f8 <UART_SetConfig+0x364>
 8007572:	4b16      	ldr	r3, [pc, #88]	; (80075cc <UART_SetConfig+0x338>)
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b05      	cmp	r3, #5
 800757c:	d838      	bhi.n	80075f0 <UART_SetConfig+0x35c>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0x2f0>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	0800759d 	.word	0x0800759d
 8007588:	080075a5 	.word	0x080075a5
 800758c:	080075ad 	.word	0x080075ad
 8007590:	080075b5 	.word	0x080075b5
 8007594:	080075e1 	.word	0x080075e1
 8007598:	080075e9 	.word	0x080075e9
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e14a      	b.n	800783a <UART_SetConfig+0x5a6>
 80075a4:	2304      	movs	r3, #4
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e146      	b.n	800783a <UART_SetConfig+0x5a6>
 80075ac:	2308      	movs	r3, #8
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e142      	b.n	800783a <UART_SetConfig+0x5a6>
 80075b4:	2310      	movs	r3, #16
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e13e      	b.n	800783a <UART_SetConfig+0x5a6>
 80075bc:	cfff69f3 	.word	0xcfff69f3
 80075c0:	58000c00 	.word	0x58000c00
 80075c4:	11fff4ff 	.word	0x11fff4ff
 80075c8:	40011000 	.word	0x40011000
 80075cc:	58024400 	.word	0x58024400
 80075d0:	40004400 	.word	0x40004400
 80075d4:	40004800 	.word	0x40004800
 80075d8:	40004c00 	.word	0x40004c00
 80075dc:	40005000 	.word	0x40005000
 80075e0:	2320      	movs	r3, #32
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e128      	b.n	800783a <UART_SetConfig+0x5a6>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e124      	b.n	800783a <UART_SetConfig+0x5a6>
 80075f0:	2380      	movs	r3, #128	; 0x80
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e120      	b.n	800783a <UART_SetConfig+0x5a6>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4acb      	ldr	r2, [pc, #812]	; (800792c <UART_SetConfig+0x698>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d176      	bne.n	80076f0 <UART_SetConfig+0x45c>
 8007602:	4bcb      	ldr	r3, [pc, #812]	; (8007930 <UART_SetConfig+0x69c>)
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800760a:	2b28      	cmp	r3, #40	; 0x28
 800760c:	d86c      	bhi.n	80076e8 <UART_SetConfig+0x454>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <UART_SetConfig+0x380>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	080076b9 	.word	0x080076b9
 8007618:	080076e9 	.word	0x080076e9
 800761c:	080076e9 	.word	0x080076e9
 8007620:	080076e9 	.word	0x080076e9
 8007624:	080076e9 	.word	0x080076e9
 8007628:	080076e9 	.word	0x080076e9
 800762c:	080076e9 	.word	0x080076e9
 8007630:	080076e9 	.word	0x080076e9
 8007634:	080076c1 	.word	0x080076c1
 8007638:	080076e9 	.word	0x080076e9
 800763c:	080076e9 	.word	0x080076e9
 8007640:	080076e9 	.word	0x080076e9
 8007644:	080076e9 	.word	0x080076e9
 8007648:	080076e9 	.word	0x080076e9
 800764c:	080076e9 	.word	0x080076e9
 8007650:	080076e9 	.word	0x080076e9
 8007654:	080076c9 	.word	0x080076c9
 8007658:	080076e9 	.word	0x080076e9
 800765c:	080076e9 	.word	0x080076e9
 8007660:	080076e9 	.word	0x080076e9
 8007664:	080076e9 	.word	0x080076e9
 8007668:	080076e9 	.word	0x080076e9
 800766c:	080076e9 	.word	0x080076e9
 8007670:	080076e9 	.word	0x080076e9
 8007674:	080076d1 	.word	0x080076d1
 8007678:	080076e9 	.word	0x080076e9
 800767c:	080076e9 	.word	0x080076e9
 8007680:	080076e9 	.word	0x080076e9
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080076e9 	.word	0x080076e9
 800768c:	080076e9 	.word	0x080076e9
 8007690:	080076e9 	.word	0x080076e9
 8007694:	080076d9 	.word	0x080076d9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076e9 	.word	0x080076e9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e0bc      	b.n	800783a <UART_SetConfig+0x5a6>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e0b8      	b.n	800783a <UART_SetConfig+0x5a6>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e0b4      	b.n	800783a <UART_SetConfig+0x5a6>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e0b0      	b.n	800783a <UART_SetConfig+0x5a6>
 80076d8:	2320      	movs	r3, #32
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e0ac      	b.n	800783a <UART_SetConfig+0x5a6>
 80076e0:	2340      	movs	r3, #64	; 0x40
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e0a8      	b.n	800783a <UART_SetConfig+0x5a6>
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e0a4      	b.n	800783a <UART_SetConfig+0x5a6>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a8f      	ldr	r2, [pc, #572]	; (8007934 <UART_SetConfig+0x6a0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d130      	bne.n	800775c <UART_SetConfig+0x4c8>
 80076fa:	4b8d      	ldr	r3, [pc, #564]	; (8007930 <UART_SetConfig+0x69c>)
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b05      	cmp	r3, #5
 8007704:	d826      	bhi.n	8007754 <UART_SetConfig+0x4c0>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x478>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007725 	.word	0x08007725
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007735 	.word	0x08007735
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007745 	.word	0x08007745
 8007720:	0800774d 	.word	0x0800774d
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e086      	b.n	800783a <UART_SetConfig+0x5a6>
 800772c:	2304      	movs	r3, #4
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e082      	b.n	800783a <UART_SetConfig+0x5a6>
 8007734:	2308      	movs	r3, #8
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e07e      	b.n	800783a <UART_SetConfig+0x5a6>
 800773c:	2310      	movs	r3, #16
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e07a      	b.n	800783a <UART_SetConfig+0x5a6>
 8007744:	2320      	movs	r3, #32
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e076      	b.n	800783a <UART_SetConfig+0x5a6>
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e072      	b.n	800783a <UART_SetConfig+0x5a6>
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e06e      	b.n	800783a <UART_SetConfig+0x5a6>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a75      	ldr	r2, [pc, #468]	; (8007938 <UART_SetConfig+0x6a4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d130      	bne.n	80077c8 <UART_SetConfig+0x534>
 8007766:	4b72      	ldr	r3, [pc, #456]	; (8007930 <UART_SetConfig+0x69c>)
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	2b05      	cmp	r3, #5
 8007770:	d826      	bhi.n	80077c0 <UART_SetConfig+0x52c>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0x4e4>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	08007791 	.word	0x08007791
 800777c:	08007799 	.word	0x08007799
 8007780:	080077a1 	.word	0x080077a1
 8007784:	080077a9 	.word	0x080077a9
 8007788:	080077b1 	.word	0x080077b1
 800778c:	080077b9 	.word	0x080077b9
 8007790:	2300      	movs	r3, #0
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e050      	b.n	800783a <UART_SetConfig+0x5a6>
 8007798:	2304      	movs	r3, #4
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e04c      	b.n	800783a <UART_SetConfig+0x5a6>
 80077a0:	2308      	movs	r3, #8
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e048      	b.n	800783a <UART_SetConfig+0x5a6>
 80077a8:	2310      	movs	r3, #16
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e044      	b.n	800783a <UART_SetConfig+0x5a6>
 80077b0:	2320      	movs	r3, #32
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e040      	b.n	800783a <UART_SetConfig+0x5a6>
 80077b8:	2340      	movs	r3, #64	; 0x40
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e03c      	b.n	800783a <UART_SetConfig+0x5a6>
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e038      	b.n	800783a <UART_SetConfig+0x5a6>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a5b      	ldr	r2, [pc, #364]	; (800793c <UART_SetConfig+0x6a8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d130      	bne.n	8007834 <UART_SetConfig+0x5a0>
 80077d2:	4b57      	ldr	r3, [pc, #348]	; (8007930 <UART_SetConfig+0x69c>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b05      	cmp	r3, #5
 80077dc:	d826      	bhi.n	800782c <UART_SetConfig+0x598>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x550>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	080077fd 	.word	0x080077fd
 80077e8:	08007805 	.word	0x08007805
 80077ec:	0800780d 	.word	0x0800780d
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007825 	.word	0x08007825
 80077fc:	2302      	movs	r3, #2
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e01a      	b.n	800783a <UART_SetConfig+0x5a6>
 8007804:	2304      	movs	r3, #4
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e016      	b.n	800783a <UART_SetConfig+0x5a6>
 800780c:	2308      	movs	r3, #8
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e012      	b.n	800783a <UART_SetConfig+0x5a6>
 8007814:	2310      	movs	r3, #16
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781a:	e00e      	b.n	800783a <UART_SetConfig+0x5a6>
 800781c:	2320      	movs	r3, #32
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007822:	e00a      	b.n	800783a <UART_SetConfig+0x5a6>
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e006      	b.n	800783a <UART_SetConfig+0x5a6>
 800782c:	2380      	movs	r3, #128	; 0x80
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e002      	b.n	800783a <UART_SetConfig+0x5a6>
 8007834:	2380      	movs	r3, #128	; 0x80
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a3f      	ldr	r2, [pc, #252]	; (800793c <UART_SetConfig+0x6a8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	f040 80f8 	bne.w	8007a36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007846:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800784a:	2b20      	cmp	r3, #32
 800784c:	dc46      	bgt.n	80078dc <UART_SetConfig+0x648>
 800784e:	2b02      	cmp	r3, #2
 8007850:	f2c0 8082 	blt.w	8007958 <UART_SetConfig+0x6c4>
 8007854:	3b02      	subs	r3, #2
 8007856:	2b1e      	cmp	r3, #30
 8007858:	d87e      	bhi.n	8007958 <UART_SetConfig+0x6c4>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x5cc>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078e3 	.word	0x080078e3
 8007864:	08007959 	.word	0x08007959
 8007868:	080078eb 	.word	0x080078eb
 800786c:	08007959 	.word	0x08007959
 8007870:	08007959 	.word	0x08007959
 8007874:	08007959 	.word	0x08007959
 8007878:	080078fb 	.word	0x080078fb
 800787c:	08007959 	.word	0x08007959
 8007880:	08007959 	.word	0x08007959
 8007884:	08007959 	.word	0x08007959
 8007888:	08007959 	.word	0x08007959
 800788c:	08007959 	.word	0x08007959
 8007890:	08007959 	.word	0x08007959
 8007894:	08007959 	.word	0x08007959
 8007898:	0800790b 	.word	0x0800790b
 800789c:	08007959 	.word	0x08007959
 80078a0:	08007959 	.word	0x08007959
 80078a4:	08007959 	.word	0x08007959
 80078a8:	08007959 	.word	0x08007959
 80078ac:	08007959 	.word	0x08007959
 80078b0:	08007959 	.word	0x08007959
 80078b4:	08007959 	.word	0x08007959
 80078b8:	08007959 	.word	0x08007959
 80078bc:	08007959 	.word	0x08007959
 80078c0:	08007959 	.word	0x08007959
 80078c4:	08007959 	.word	0x08007959
 80078c8:	08007959 	.word	0x08007959
 80078cc:	08007959 	.word	0x08007959
 80078d0:	08007959 	.word	0x08007959
 80078d4:	08007959 	.word	0x08007959
 80078d8:	0800794b 	.word	0x0800794b
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d037      	beq.n	8007950 <UART_SetConfig+0x6bc>
 80078e0:	e03a      	b.n	8007958 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078e2:	f7fd f8c9 	bl	8004a78 <HAL_RCCEx_GetD3PCLK1Freq>
 80078e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078e8:	e03c      	b.n	8007964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fd f8d8 	bl	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f8:	e034      	b.n	8007964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078fa:	f107 0318 	add.w	r3, r7, #24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fd fa24 	bl	8004d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007908:	e02c      	b.n	8007964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <UART_SetConfig+0x69c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d016      	beq.n	8007944 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <UART_SetConfig+0x69c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	08db      	lsrs	r3, r3, #3
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	4a07      	ldr	r2, [pc, #28]	; (8007940 <UART_SetConfig+0x6ac>)
 8007922:	fa22 f303 	lsr.w	r3, r2, r3
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007928:	e01c      	b.n	8007964 <UART_SetConfig+0x6d0>
 800792a:	bf00      	nop
 800792c:	40011400 	.word	0x40011400
 8007930:	58024400 	.word	0x58024400
 8007934:	40007800 	.word	0x40007800
 8007938:	40007c00 	.word	0x40007c00
 800793c:	58000c00 	.word	0x58000c00
 8007940:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007944:	4b9d      	ldr	r3, [pc, #628]	; (8007bbc <UART_SetConfig+0x928>)
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007948:	e00c      	b.n	8007964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800794a:	4b9d      	ldr	r3, [pc, #628]	; (8007bc0 <UART_SetConfig+0x92c>)
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800794e:	e009      	b.n	8007964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007956:	e005      	b.n	8007964 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007962:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 81de 	beq.w	8007d28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	4a94      	ldr	r2, [pc, #592]	; (8007bc4 <UART_SetConfig+0x930>)
 8007972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007976:	461a      	mov	r2, r3
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	fbb3 f3f2 	udiv	r3, r3, r2
 800797e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	4413      	add	r3, r2
 800798a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798c:	429a      	cmp	r2, r3
 800798e:	d305      	bcc.n	800799c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	429a      	cmp	r2, r3
 800799a:	d903      	bls.n	80079a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079a2:	e1c1      	b.n	8007d28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a6:	2200      	movs	r2, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	60fa      	str	r2, [r7, #12]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	4a84      	ldr	r2, [pc, #528]	; (8007bc4 <UART_SetConfig+0x930>)
 80079b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2200      	movs	r2, #0
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079c6:	f7f8 fce3 	bl	8000390 <__aeabi_uldivmod>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4610      	mov	r0, r2
 80079d0:	4619      	mov	r1, r3
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	020b      	lsls	r3, r1, #8
 80079dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079e0:	0202      	lsls	r2, r0, #8
 80079e2:	6979      	ldr	r1, [r7, #20]
 80079e4:	6849      	ldr	r1, [r1, #4]
 80079e6:	0849      	lsrs	r1, r1, #1
 80079e8:	2000      	movs	r0, #0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4605      	mov	r5, r0
 80079ee:	eb12 0804 	adds.w	r8, r2, r4
 80079f2:	eb43 0905 	adc.w	r9, r3, r5
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	469a      	mov	sl, r3
 80079fe:	4693      	mov	fp, r2
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	f7f8 fcc2 	bl	8000390 <__aeabi_uldivmod>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4613      	mov	r3, r2
 8007a12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a1a:	d308      	bcc.n	8007a2e <UART_SetConfig+0x79a>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a22:	d204      	bcs.n	8007a2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a2a:	60da      	str	r2, [r3, #12]
 8007a2c:	e17c      	b.n	8007d28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a34:	e178      	b.n	8007d28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3e:	f040 80c5 	bne.w	8007bcc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	dc48      	bgt.n	8007adc <UART_SetConfig+0x848>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	db7b      	blt.n	8007b46 <UART_SetConfig+0x8b2>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d879      	bhi.n	8007b46 <UART_SetConfig+0x8b2>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x7c4>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007ae3 	.word	0x08007ae3
 8007a5c:	08007aeb 	.word	0x08007aeb
 8007a60:	08007b47 	.word	0x08007b47
 8007a64:	08007b47 	.word	0x08007b47
 8007a68:	08007af3 	.word	0x08007af3
 8007a6c:	08007b47 	.word	0x08007b47
 8007a70:	08007b47 	.word	0x08007b47
 8007a74:	08007b47 	.word	0x08007b47
 8007a78:	08007b03 	.word	0x08007b03
 8007a7c:	08007b47 	.word	0x08007b47
 8007a80:	08007b47 	.word	0x08007b47
 8007a84:	08007b47 	.word	0x08007b47
 8007a88:	08007b47 	.word	0x08007b47
 8007a8c:	08007b47 	.word	0x08007b47
 8007a90:	08007b47 	.word	0x08007b47
 8007a94:	08007b47 	.word	0x08007b47
 8007a98:	08007b13 	.word	0x08007b13
 8007a9c:	08007b47 	.word	0x08007b47
 8007aa0:	08007b47 	.word	0x08007b47
 8007aa4:	08007b47 	.word	0x08007b47
 8007aa8:	08007b47 	.word	0x08007b47
 8007aac:	08007b47 	.word	0x08007b47
 8007ab0:	08007b47 	.word	0x08007b47
 8007ab4:	08007b47 	.word	0x08007b47
 8007ab8:	08007b47 	.word	0x08007b47
 8007abc:	08007b47 	.word	0x08007b47
 8007ac0:	08007b47 	.word	0x08007b47
 8007ac4:	08007b47 	.word	0x08007b47
 8007ac8:	08007b47 	.word	0x08007b47
 8007acc:	08007b47 	.word	0x08007b47
 8007ad0:	08007b47 	.word	0x08007b47
 8007ad4:	08007b47 	.word	0x08007b47
 8007ad8:	08007b39 	.word	0x08007b39
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d02e      	beq.n	8007b3e <UART_SetConfig+0x8aa>
 8007ae0:	e031      	b.n	8007b46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae2:	f7fc f857 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8007ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ae8:	e033      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aea:	f7fc f869 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8007aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007af0:	e02f      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fc ffd4 	bl	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b00:	e027      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd f920 	bl	8004d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b10:	e01f      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b12:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <UART_SetConfig+0x934>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b1e:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <UART_SetConfig+0x934>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	4a24      	ldr	r2, [pc, #144]	; (8007bbc <UART_SetConfig+0x928>)
 8007b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b30:	e00f      	b.n	8007b52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b32:	4b22      	ldr	r3, [pc, #136]	; (8007bbc <UART_SetConfig+0x928>)
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b36:	e00c      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b38:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <UART_SetConfig+0x92c>)
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b3c:	e009      	b.n	8007b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b44:	e005      	b.n	8007b52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80e7 	beq.w	8007d28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <UART_SetConfig+0x930>)
 8007b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b6c:	005a      	lsls	r2, r3, #1
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	085b      	lsrs	r3, r3, #1
 8007b74:	441a      	add	r2, r3
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	2b0f      	cmp	r3, #15
 8007b84:	d916      	bls.n	8007bb4 <UART_SetConfig+0x920>
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d212      	bcs.n	8007bb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	f023 030f 	bic.w	r3, r3, #15
 8007b96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	e0b9      	b.n	8007d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bba:	e0b5      	b.n	8007d28 <UART_SetConfig+0xa94>
 8007bbc:	03d09000 	.word	0x03d09000
 8007bc0:	003d0900 	.word	0x003d0900
 8007bc4:	0800e778 	.word	0x0800e778
 8007bc8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	dc49      	bgt.n	8007c68 <UART_SetConfig+0x9d4>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	db7c      	blt.n	8007cd2 <UART_SetConfig+0xa3e>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d87a      	bhi.n	8007cd2 <UART_SetConfig+0xa3e>
 8007bdc:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x950>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c6f 	.word	0x08007c6f
 8007be8:	08007c77 	.word	0x08007c77
 8007bec:	08007cd3 	.word	0x08007cd3
 8007bf0:	08007cd3 	.word	0x08007cd3
 8007bf4:	08007c7f 	.word	0x08007c7f
 8007bf8:	08007cd3 	.word	0x08007cd3
 8007bfc:	08007cd3 	.word	0x08007cd3
 8007c00:	08007cd3 	.word	0x08007cd3
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007cd3 	.word	0x08007cd3
 8007c0c:	08007cd3 	.word	0x08007cd3
 8007c10:	08007cd3 	.word	0x08007cd3
 8007c14:	08007cd3 	.word	0x08007cd3
 8007c18:	08007cd3 	.word	0x08007cd3
 8007c1c:	08007cd3 	.word	0x08007cd3
 8007c20:	08007cd3 	.word	0x08007cd3
 8007c24:	08007c9f 	.word	0x08007c9f
 8007c28:	08007cd3 	.word	0x08007cd3
 8007c2c:	08007cd3 	.word	0x08007cd3
 8007c30:	08007cd3 	.word	0x08007cd3
 8007c34:	08007cd3 	.word	0x08007cd3
 8007c38:	08007cd3 	.word	0x08007cd3
 8007c3c:	08007cd3 	.word	0x08007cd3
 8007c40:	08007cd3 	.word	0x08007cd3
 8007c44:	08007cd3 	.word	0x08007cd3
 8007c48:	08007cd3 	.word	0x08007cd3
 8007c4c:	08007cd3 	.word	0x08007cd3
 8007c50:	08007cd3 	.word	0x08007cd3
 8007c54:	08007cd3 	.word	0x08007cd3
 8007c58:	08007cd3 	.word	0x08007cd3
 8007c5c:	08007cd3 	.word	0x08007cd3
 8007c60:	08007cd3 	.word	0x08007cd3
 8007c64:	08007cc5 	.word	0x08007cc5
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d02e      	beq.n	8007cca <UART_SetConfig+0xa36>
 8007c6c:	e031      	b.n	8007cd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6e:	f7fb ff91 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8007c72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c74:	e033      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c76:	f7fb ffa3 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8007c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c7c:	e02f      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fc ff0e 	bl	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c8c:	e027      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c8e:	f107 0318 	add.w	r3, r7, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fd f85a 	bl	8004d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c9c:	e01f      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9e:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <UART_SetConfig+0xac0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <UART_SetConfig+0xac0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	08db      	lsrs	r3, r3, #3
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	4a28      	ldr	r2, [pc, #160]	; (8007d58 <UART_SetConfig+0xac4>)
 8007cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cbc:	e00f      	b.n	8007cde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007cbe:	4b26      	ldr	r3, [pc, #152]	; (8007d58 <UART_SetConfig+0xac4>)
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc2:	e00c      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <UART_SetConfig+0xac8>)
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc8:	e009      	b.n	8007cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e005      	b.n	8007cde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8007cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d021      	beq.n	8007d28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <UART_SetConfig+0xacc>)
 8007cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	441a      	add	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	2b0f      	cmp	r3, #15
 8007d0c:	d909      	bls.n	8007d22 <UART_SetConfig+0xa8e>
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d14:	d205      	bcs.n	8007d22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	e002      	b.n	8007d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2200      	movs	r2, #0
 8007d42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3748      	adds	r7, #72	; 0x48
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d52:	bf00      	nop
 8007d54:	58024400 	.word	0x58024400
 8007d58:	03d09000 	.word	0x03d09000
 8007d5c:	003d0900 	.word	0x003d0900
 8007d60:	0800e778 	.word	0x0800e778

08007d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d10a      	bne.n	8007e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb8:	f7fa fb52 	bl	8002560 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d10e      	bne.n	8007eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f82f 	bl	8007f3e <UART_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e025      	b.n	8007f36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d10e      	bne.n	8007f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f819 	bl	8007f3e <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e00f      	b.n	8007f36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b09c      	sub	sp, #112	; 0x70
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4e:	e0a9      	b.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	f000 80a5 	beq.w	80080a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5a:	f7fa fb01 	bl	8002560 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d302      	bcc.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d140      	bne.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f84:	667b      	str	r3, [r7, #100]	; 0x64
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e069      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d051      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800e:	d149      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008018:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800802e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
 800803a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800803e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	613b      	str	r3, [r7, #16]
   return(result);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	66bb      	str	r3, [r7, #104]	; 0x68
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3308      	adds	r3, #8
 800806a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800806c:	623a      	str	r2, [r7, #32]
 800806e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	69f9      	ldr	r1, [r7, #28]
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	61bb      	str	r3, [r7, #24]
   return(result);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e5      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69da      	ldr	r2, [r3, #28]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	f43f af46 	beq.w	8007f50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3770      	adds	r7, #112	; 0x70
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e027      	b.n	8008134 <HAL_UARTEx_DisableFifoMode+0x66>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2224      	movs	r2, #36	; 0x24
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008112:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008154:	2302      	movs	r3, #2
 8008156:	e02d      	b.n	80081b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f84f 	bl	8008238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e02d      	b.n	8008230 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	; 0x24
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f811 	bl	8008238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008258:	e031      	b.n	80082be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800825a:	2310      	movs	r3, #16
 800825c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800825e:	2310      	movs	r3, #16
 8008260:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	0e5b      	lsrs	r3, r3, #25
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	0f5b      	lsrs	r3, r3, #29
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	7b3a      	ldrb	r2, [r7, #12]
 8008286:	4911      	ldr	r1, [pc, #68]	; (80082cc <UARTEx_SetNbDataToProcess+0x94>)
 8008288:	5c8a      	ldrb	r2, [r1, r2]
 800828a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800828e:	7b3a      	ldrb	r2, [r7, #12]
 8008290:	490f      	ldr	r1, [pc, #60]	; (80082d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008292:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008294:	fb93 f3f2 	sdiv	r3, r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	7b7a      	ldrb	r2, [r7, #13]
 80082a4:	4909      	ldr	r1, [pc, #36]	; (80082cc <UARTEx_SetNbDataToProcess+0x94>)
 80082a6:	5c8a      	ldrb	r2, [r1, r2]
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082ac:	7b7a      	ldrb	r2, [r7, #13]
 80082ae:	4908      	ldr	r1, [pc, #32]	; (80082d0 <UARTEx_SetNbDataToProcess+0x98>)
 80082b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082be:	bf00      	nop
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	0800e790 	.word	0x0800e790
 80082d0:	0800e798 	.word	0x0800e798

080082d4 <__NVIC_SetPriority>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80082e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	db0a      	blt.n	80082fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	490c      	ldr	r1, [pc, #48]	; (8008320 <__NVIC_SetPriority+0x4c>)
 80082ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082f2:	0112      	lsls	r2, r2, #4
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	440b      	add	r3, r1
 80082f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082fc:	e00a      	b.n	8008314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	b2da      	uxtb	r2, r3
 8008302:	4908      	ldr	r1, [pc, #32]	; (8008324 <__NVIC_SetPriority+0x50>)
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	3b04      	subs	r3, #4
 800830c:	0112      	lsls	r2, r2, #4
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	440b      	add	r3, r1
 8008312:	761a      	strb	r2, [r3, #24]
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	e000e100 	.word	0xe000e100
 8008324:	e000ed00 	.word	0xe000ed00

08008328 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800832c:	2100      	movs	r1, #0
 800832e:	f06f 0004 	mvn.w	r0, #4
 8008332:	f7ff ffcf 	bl	80082d4 <__NVIC_SetPriority>
#endif
}
 8008336:	bf00      	nop
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	603b      	str	r3, [r7, #0]
  return(result);
 8008348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800834e:	f06f 0305 	mvn.w	r3, #5
 8008352:	607b      	str	r3, [r7, #4]
 8008354:	e00c      	b.n	8008370 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008356:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <osKernelInitialize+0x44>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d105      	bne.n	800836a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <osKernelInitialize+0x44>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008364:	2300      	movs	r3, #0
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	e002      	b.n	8008370 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800836a:	f04f 33ff 	mov.w	r3, #4294967295
 800836e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008370:	687b      	ldr	r3, [r7, #4]
}
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	2400044c 	.word	0x2400044c

08008384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838a:	f3ef 8305 	mrs	r3, IPSR
 800838e:	603b      	str	r3, [r7, #0]
  return(result);
 8008390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008396:	f06f 0305 	mvn.w	r3, #5
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	e010      	b.n	80083c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <osKernelStart+0x48>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d109      	bne.n	80083ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083a6:	f7ff ffbf 	bl	8008328 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083aa:	4b08      	ldr	r3, [pc, #32]	; (80083cc <osKernelStart+0x48>)
 80083ac:	2202      	movs	r2, #2
 80083ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083b0:	f001 fcb2 	bl	8009d18 <vTaskStartScheduler>
      stat = osOK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e002      	b.n	80083c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083c0:	687b      	ldr	r3, [r7, #4]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2400044c 	.word	0x2400044c

080083d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08e      	sub	sp, #56	; 0x38
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e0:	f3ef 8305 	mrs	r3, IPSR
 80083e4:	617b      	str	r3, [r7, #20]
  return(result);
 80083e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d17e      	bne.n	80084ea <osThreadNew+0x11a>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d07b      	beq.n	80084ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80083f2:	2380      	movs	r3, #128	; 0x80
 80083f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80083f6:	2318      	movs	r3, #24
 80083f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d045      	beq.n	8008496 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <osThreadNew+0x48>
        name = attr->name;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <osThreadNew+0x6e>
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b38      	cmp	r3, #56	; 0x38
 8008430:	d805      	bhi.n	800843e <osThreadNew+0x6e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <osThreadNew+0x72>
        return (NULL);
 800843e:	2300      	movs	r3, #0
 8008440:	e054      	b.n	80084ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	089b      	lsrs	r3, r3, #2
 8008450:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <osThreadNew+0xa8>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	2bbb      	cmp	r3, #187	; 0xbb
 8008460:	d90a      	bls.n	8008478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008466:	2b00      	cmp	r3, #0
 8008468:	d006      	beq.n	8008478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <osThreadNew+0xa8>
        mem = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	e010      	b.n	800849a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <osThreadNew+0xca>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d108      	bne.n	800849a <osThreadNew+0xca>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <osThreadNew+0xca>
          mem = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	e001      	b.n	800849a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d110      	bne.n	80084c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084a8:	9202      	str	r2, [sp, #8]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6a3a      	ldr	r2, [r7, #32]
 80084b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f001 fa42 	bl	8009940 <xTaskCreateStatic>
 80084bc:	4603      	mov	r3, r0
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	e013      	b.n	80084ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d110      	bne.n	80084ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f107 0310 	add.w	r3, r7, #16
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f001 fa8d 	bl	80099fa <xTaskCreate>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d001      	beq.n	80084ea <osThreadNew+0x11a>
            hTask = NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084ea:	693b      	ldr	r3, [r7, #16]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3728      	adds	r7, #40	; 0x28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084fc:	f3ef 8305 	mrs	r3, IPSR
 8008500:	60bb      	str	r3, [r7, #8]
  return(result);
 8008502:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <osDelay+0x1c>
    stat = osErrorISR;
 8008508:	f06f 0305 	mvn.w	r3, #5
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e007      	b.n	8008520 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <osDelay+0x2c>
      vTaskDelay(ticks);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fbc8 	bl	8009cb0 <vTaskDelay>
    }
  }

  return (stat);
 8008520:	68fb      	ldr	r3, [r7, #12]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4a07      	ldr	r2, [pc, #28]	; (8008558 <vApplicationGetIdleTaskMemory+0x2c>)
 800853c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a06      	ldr	r2, [pc, #24]	; (800855c <vApplicationGetIdleTaskMemory+0x30>)
 8008542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	24000450 	.word	0x24000450
 800855c:	2400050c 	.word	0x2400050c

08008560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4a07      	ldr	r2, [pc, #28]	; (800858c <vApplicationGetTimerTaskMemory+0x2c>)
 8008570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a06      	ldr	r2, [pc, #24]	; (8008590 <vApplicationGetTimerTaskMemory+0x30>)
 8008576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	2400070c 	.word	0x2400070c
 8008590:	240007c8 	.word	0x240007c8

08008594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a0:	f001 fc2a 	bl	8009df8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085a4:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <pvPortMalloc+0x180>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085ac:	f000 f920 	bl	80087f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b0:	4b59      	ldr	r3, [pc, #356]	; (8008718 <pvPortMalloc+0x184>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8093 	bne.w	80086e4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01d      	beq.n	8008600 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085c4:	2208      	movs	r2, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d014      	beq.n	8008600 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	3308      	adds	r3, #8
 80085de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d06e      	beq.n	80086e4 <pvPortMalloc+0x150>
 8008606:	4b45      	ldr	r3, [pc, #276]	; (800871c <pvPortMalloc+0x188>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d869      	bhi.n	80086e4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008610:	4b43      	ldr	r3, [pc, #268]	; (8008720 <pvPortMalloc+0x18c>)
 8008612:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008614:	4b42      	ldr	r3, [pc, #264]	; (8008720 <pvPortMalloc+0x18c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861a:	e004      	b.n	8008626 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d903      	bls.n	8008638 <pvPortMalloc+0xa4>
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f1      	bne.n	800861c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <pvPortMalloc+0x180>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	429a      	cmp	r2, r3
 8008640:	d050      	beq.n	80086e4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2208      	movs	r2, #8
 8008648:	4413      	add	r3, r2
 800864a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	2308      	movs	r3, #8
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	429a      	cmp	r2, r3
 8008662:	d91f      	bls.n	80086a4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <pvPortMalloc+0xf8>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	613b      	str	r3, [r7, #16]
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800869e:	69b8      	ldr	r0, [r7, #24]
 80086a0:	f000 f908 	bl	80088b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a4:	4b1d      	ldr	r3, [pc, #116]	; (800871c <pvPortMalloc+0x188>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	4a1b      	ldr	r2, [pc, #108]	; (800871c <pvPortMalloc+0x188>)
 80086b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086b2:	4b1a      	ldr	r3, [pc, #104]	; (800871c <pvPortMalloc+0x188>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b1b      	ldr	r3, [pc, #108]	; (8008724 <pvPortMalloc+0x190>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d203      	bcs.n	80086c6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086be:	4b17      	ldr	r3, [pc, #92]	; (800871c <pvPortMalloc+0x188>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a18      	ldr	r2, [pc, #96]	; (8008724 <pvPortMalloc+0x190>)
 80086c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <pvPortMalloc+0x184>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086da:	4b13      	ldr	r3, [pc, #76]	; (8008728 <pvPortMalloc+0x194>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3301      	adds	r3, #1
 80086e0:	4a11      	ldr	r2, [pc, #68]	; (8008728 <pvPortMalloc+0x194>)
 80086e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e4:	f001 fb96 	bl	8009e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <pvPortMalloc+0x174>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	60fb      	str	r3, [r7, #12]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <pvPortMalloc+0x172>
	return pvReturn;
 8008708:	69fb      	ldr	r3, [r7, #28]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3728      	adds	r7, #40	; 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	240047d0 	.word	0x240047d0
 8008718:	240047e4 	.word	0x240047e4
 800871c:	240047d4 	.word	0x240047d4
 8008720:	240047c8 	.word	0x240047c8
 8008724:	240047d8 	.word	0x240047d8
 8008728:	240047dc 	.word	0x240047dc

0800872c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04d      	beq.n	80087da <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800873e:	2308      	movs	r3, #8
 8008740:	425b      	negs	r3, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4413      	add	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <vPortFree+0xb8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4013      	ands	r3, r2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <vPortFree+0x44>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <vPortFree+0x62>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	60bb      	str	r3, [r7, #8]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <vPortFree+0xb8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4013      	ands	r3, r2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11a      	bne.n	80087da <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <vPortFree+0xb8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	401a      	ands	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b4:	f001 fb20 	bl	8009df8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <vPortFree+0xbc>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4413      	add	r3, r2
 80087c2:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <vPortFree+0xbc>)
 80087c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087c6:	6938      	ldr	r0, [r7, #16]
 80087c8:	f000 f874 	bl	80088b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087cc:	4b07      	ldr	r3, [pc, #28]	; (80087ec <vPortFree+0xc0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	4a06      	ldr	r2, [pc, #24]	; (80087ec <vPortFree+0xc0>)
 80087d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087d6:	f001 fb1d 	bl	8009e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	240047e4 	.word	0x240047e4
 80087e8:	240047d4 	.word	0x240047d4
 80087ec:	240047e0 	.word	0x240047e0

080087f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087f6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087fc:	4b27      	ldr	r3, [pc, #156]	; (800889c <prvHeapInit+0xac>)
 80087fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00c      	beq.n	8008824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3307      	adds	r3, #7
 800880e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	4a1f      	ldr	r2, [pc, #124]	; (800889c <prvHeapInit+0xac>)
 8008820:	4413      	add	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008828:	4a1d      	ldr	r2, [pc, #116]	; (80088a0 <prvHeapInit+0xb0>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800882e:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <prvHeapInit+0xb0>)
 8008830:	2200      	movs	r2, #0
 8008832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800883c:	2208      	movs	r2, #8
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <prvHeapInit+0xb4>)
 8008850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008852:	4b14      	ldr	r3, [pc, #80]	; (80088a4 <prvHeapInit+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <prvHeapInit+0xb4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008870:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <prvHeapInit+0xb4>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a0a      	ldr	r2, [pc, #40]	; (80088a8 <prvHeapInit+0xb8>)
 800887e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a09      	ldr	r2, [pc, #36]	; (80088ac <prvHeapInit+0xbc>)
 8008886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008888:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <prvHeapInit+0xc0>)
 800888a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800888e:	601a      	str	r2, [r3, #0]
}
 8008890:	bf00      	nop
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	24000bc8 	.word	0x24000bc8
 80088a0:	240047c8 	.word	0x240047c8
 80088a4:	240047d0 	.word	0x240047d0
 80088a8:	240047d8 	.word	0x240047d8
 80088ac:	240047d4 	.word	0x240047d4
 80088b0:	240047e4 	.word	0x240047e4

080088b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088bc:	4b28      	ldr	r3, [pc, #160]	; (8008960 <prvInsertBlockIntoFreeList+0xac>)
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e002      	b.n	80088c8 <prvInsertBlockIntoFreeList+0x14>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d8f7      	bhi.n	80088c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d108      	bne.n	80088f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	441a      	add	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d118      	bne.n	800893c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d00d      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	441a      	add	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e008      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e003      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d002      	beq.n	8008952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	240047c8 	.word	0x240047c8
 8008964:	240047d0 	.word	0x240047d0

08008968 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f103 0208 	add.w	r2, r3, #8
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f103 0208 	add.w	r2, r3, #8
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f103 0208 	add.w	r2, r3, #8
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	601a      	str	r2, [r3, #0]
}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b085      	sub	sp, #20
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d103      	bne.n	8008a2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e00c      	b.n	8008a44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	e002      	b.n	8008a38 <vListInsert+0x2e>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d2f6      	bcs.n	8008a32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	601a      	str	r2, [r3, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6892      	ldr	r2, [r2, #8]
 8008a92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6852      	ldr	r2, [r2, #4]
 8008a9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d103      	bne.n	8008ab0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3b04      	subs	r3, #4
 8008aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b00:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <pxPortInitialiseStack+0x64>)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3b14      	subs	r3, #20
 8008b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3b04      	subs	r3, #4
 8008b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f06f 0202 	mvn.w	r2, #2
 8008b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b20      	subs	r3, #32
 8008b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b26:	68fb      	ldr	r3, [r7, #12]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	08008b39 	.word	0x08008b39

08008b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <prvTaskExitError+0x54>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d00a      	beq.n	8008b62 <prvTaskExitError+0x2a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	60fb      	str	r3, [r7, #12]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <prvTaskExitError+0x28>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60bb      	str	r3, [r7, #8]
}
 8008b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b76:	bf00      	nop
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0fc      	beq.n	8008b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	24000010 	.word	0x24000010

08008b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <pxCurrentTCBConst2>)
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	6808      	ldr	r0, [r1, #0]
 8008b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	f380 8809 	msr	PSP, r0
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f04f 0000 	mov.w	r0, #0
 8008ba6:	f380 8811 	msr	BASEPRI, r0
 8008baa:	4770      	bx	lr
 8008bac:	f3af 8000 	nop.w

08008bb0 <pxCurrentTCBConst2>:
 8008bb0:	24004830 	.word	0x24004830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop

08008bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bb8:	4808      	ldr	r0, [pc, #32]	; (8008bdc <prvPortStartFirstTask+0x24>)
 8008bba:	6800      	ldr	r0, [r0, #0]
 8008bbc:	6800      	ldr	r0, [r0, #0]
 8008bbe:	f380 8808 	msr	MSP, r0
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8814 	msr	CONTROL, r0
 8008bca:	b662      	cpsie	i
 8008bcc:	b661      	cpsie	f
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	df00      	svc	0
 8008bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bda:	bf00      	nop
 8008bdc:	e000ed08 	.word	0xe000ed08

08008be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008be6:	4b46      	ldr	r3, [pc, #280]	; (8008d00 <xPortStartScheduler+0x120>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a46      	ldr	r2, [pc, #280]	; (8008d04 <xPortStartScheduler+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d10a      	bne.n	8008c06 <xPortStartScheduler+0x26>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c06:	4b3e      	ldr	r3, [pc, #248]	; (8008d00 <xPortStartScheduler+0x120>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a3f      	ldr	r2, [pc, #252]	; (8008d08 <xPortStartScheduler+0x128>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10a      	bne.n	8008c26 <xPortStartScheduler+0x46>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c26:	4b39      	ldr	r3, [pc, #228]	; (8008d0c <xPortStartScheduler+0x12c>)
 8008c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	4b31      	ldr	r3, [pc, #196]	; (8008d10 <xPortStartScheduler+0x130>)
 8008c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c4e:	4b31      	ldr	r3, [pc, #196]	; (8008d14 <xPortStartScheduler+0x134>)
 8008c50:	2207      	movs	r2, #7
 8008c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c54:	e009      	b.n	8008c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c56:	4b2f      	ldr	r3, [pc, #188]	; (8008d14 <xPortStartScheduler+0x134>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <xPortStartScheduler+0x134>)
 8008c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c72:	2b80      	cmp	r3, #128	; 0x80
 8008c74:	d0ef      	beq.n	8008c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c76:	4b27      	ldr	r3, [pc, #156]	; (8008d14 <xPortStartScheduler+0x134>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1c3 0307 	rsb	r3, r3, #7
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d00a      	beq.n	8008c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60bb      	str	r3, [r7, #8]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <xPortStartScheduler+0x134>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <xPortStartScheduler+0x134>)
 8008ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <xPortStartScheduler+0x134>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008caa:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <xPortStartScheduler+0x134>)
 8008cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cb6:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <xPortStartScheduler+0x138>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <xPortStartScheduler+0x138>)
 8008cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <xPortStartScheduler+0x138>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a14      	ldr	r2, [pc, #80]	; (8008d18 <xPortStartScheduler+0x138>)
 8008cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cce:	f000 f8dd 	bl	8008e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <xPortStartScheduler+0x13c>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cd8:	f000 f8fc 	bl	8008ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cdc:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <xPortStartScheduler+0x140>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a0f      	ldr	r2, [pc, #60]	; (8008d20 <xPortStartScheduler+0x140>)
 8008ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ce8:	f7ff ff66 	bl	8008bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cec:	f001 f9fa 	bl	800a0e4 <vTaskSwitchContext>
	prvTaskExitError();
 8008cf0:	f7ff ff22 	bl	8008b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	e000ed00 	.word	0xe000ed00
 8008d04:	410fc271 	.word	0x410fc271
 8008d08:	410fc270 	.word	0x410fc270
 8008d0c:	e000e400 	.word	0xe000e400
 8008d10:	240047e8 	.word	0x240047e8
 8008d14:	240047ec 	.word	0x240047ec
 8008d18:	e000ed20 	.word	0xe000ed20
 8008d1c:	24000010 	.word	0x24000010
 8008d20:	e000ef34 	.word	0xe000ef34

08008d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	607b      	str	r3, [r7, #4]
}
 8008d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <vPortEnterCritical+0x58>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	4a0d      	ldr	r2, [pc, #52]	; (8008d7c <vPortEnterCritical+0x58>)
 8008d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d48:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <vPortEnterCritical+0x58>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d10f      	bne.n	8008d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortEnterCritical+0x5c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	603b      	str	r3, [r7, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <vPortEnterCritical+0x4a>
	}
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	24000010 	.word	0x24000010
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d8a:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <vPortExitCritical+0x50>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <vPortExitCritical+0x24>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	607b      	str	r3, [r7, #4]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <vPortExitCritical+0x50>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <vPortExitCritical+0x50>)
 8008db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008db2:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <vPortExitCritical+0x50>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <vPortExitCritical+0x42>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	24000010 	.word	0x24000010
	...

08008de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008de0:	f3ef 8009 	mrs	r0, PSP
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <pxCurrentTCBConst>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f01e 0f10 	tst.w	lr, #16
 8008df0:	bf08      	it	eq
 8008df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	6010      	str	r0, [r2, #0]
 8008dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e04:	f380 8811 	msr	BASEPRI, r0
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f001 f968 	bl	800a0e4 <vTaskSwitchContext>
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f380 8811 	msr	BASEPRI, r0
 8008e1c:	bc09      	pop	{r0, r3}
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6808      	ldr	r0, [r1, #0]
 8008e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e26:	f01e 0f10 	tst.w	lr, #16
 8008e2a:	bf08      	it	eq
 8008e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e30:	f380 8809 	msr	PSP, r0
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst>:
 8008e40:	24004830 	.word	0x24004830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop

08008e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e62:	f001 f885 	bl	8009f70 <xTaskIncrementTick>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <xPortSysTickHandler+0x40>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f383 8811 	msr	BASEPRI, r3
}
 8008e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e96:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <vPortSetupTimerInterrupt+0x38>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <vPortSetupTimerInterrupt+0x3c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <vPortSetupTimerInterrupt+0x40>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	099b      	lsrs	r3, r3, #6
 8008ea8:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <vPortSetupTimerInterrupt+0x44>)
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eae:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	e000e010 	.word	0xe000e010
 8008ec4:	e000e018 	.word	0xe000e018
 8008ec8:	24000000 	.word	0x24000000
 8008ecc:	10624dd3 	.word	0x10624dd3
 8008ed0:	e000e014 	.word	0xe000e014

08008ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ee4 <vPortEnableVFP+0x10>
 8008ed8:	6801      	ldr	r1, [r0, #0]
 8008eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ede:	6001      	str	r1, [r0, #0]
 8008ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ee2:	bf00      	nop
 8008ee4:	e000ed88 	.word	0xe000ed88

08008ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d914      	bls.n	8008f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008efa:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <vPortValidateInterruptPriority+0x70>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f04:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <vPortValidateInterruptPriority+0x74>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	7afa      	ldrb	r2, [r7, #11]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d20a      	bcs.n	8008f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f24:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <vPortValidateInterruptPriority+0x78>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <vPortValidateInterruptPriority+0x7c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d90a      	bls.n	8008f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	603b      	str	r3, [r7, #0]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <vPortValidateInterruptPriority+0x60>
	}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	e000e3f0 	.word	0xe000e3f0
 8008f5c:	240047e8 	.word	0x240047e8
 8008f60:	e000ed0c 	.word	0xe000ed0c
 8008f64:	240047ec 	.word	0x240047ec

08008f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60bb      	str	r3, [r7, #8]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f92:	f7ff fec7 	bl	8008d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fa2:	fb01 f303 	mul.w	r3, r1, r3
 8008fa6:	441a      	add	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	68f9      	ldr	r1, [r7, #12]
 8008fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	441a      	add	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	22ff      	movs	r2, #255	; 0xff
 8008fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	22ff      	movs	r2, #255	; 0xff
 8008fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d114      	bne.n	8009012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 f929 	bl	800a24c <xTaskRemoveFromEventList>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d012      	beq.n	8009026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009000:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <xQueueGenericReset+0xcc>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	e009      	b.n	8009026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3310      	adds	r3, #16
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fca6 	bl	8008968 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff fca1 	bl	8008968 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f7ff fead 	bl	8008d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800902a:	2301      	movs	r3, #1
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	e000ed04 	.word	0xe000ed04

08009038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <xQueueGenericCreateStatic+0x52>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <xQueueGenericCreateStatic+0x56>
 800908a:	2301      	movs	r3, #1
 800908c:	e000      	b.n	8009090 <xQueueGenericCreateStatic+0x58>
 800908e:	2300      	movs	r3, #0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	623b      	str	r3, [r7, #32]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <xQueueGenericCreateStatic+0x7e>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <xQueueGenericCreateStatic+0x82>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <xQueueGenericCreateStatic+0x84>
 80090ba:	2300      	movs	r3, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	61fb      	str	r3, [r7, #28]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80090d6:	2350      	movs	r3, #80	; 0x50
 80090d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b50      	cmp	r3, #80	; 0x50
 80090de:	d00a      	beq.n	80090f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	61bb      	str	r3, [r7, #24]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00d      	beq.n	800911e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800910a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	4613      	mov	r3, r2
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f805 	bl	8009128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	; 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	e002      	b.n	800914a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009156:	2101      	movs	r1, #1
 8009158:	69b8      	ldr	r0, [r7, #24]
 800915a:	f7ff ff05 	bl	8008f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08e      	sub	sp, #56	; 0x38
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800917e:	2300      	movs	r3, #0
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <xQueueGenericSend+0x32>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <xQueueGenericSend+0x40>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <xQueueGenericSend+0x44>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <xQueueGenericSend+0x46>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10a      	bne.n	80091d0 <xQueueGenericSend+0x60>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d103      	bne.n	80091de <xQueueGenericSend+0x6e>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <xQueueGenericSend+0x72>
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <xQueueGenericSend+0x74>
 80091e2:	2300      	movs	r3, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueGenericSend+0x8e>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	623b      	str	r3, [r7, #32]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091fe:	f001 f9e7 	bl	800a5d0 <xTaskGetSchedulerState>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <xQueueGenericSend+0x9e>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <xQueueGenericSend+0xa2>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericSend+0xa4>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueGenericSend+0xbe>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fb      	str	r3, [r7, #28]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800922e:	f7ff fd79 	bl	8008d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	429a      	cmp	r2, r3
 800923c:	d302      	bcc.n	8009244 <xQueueGenericSend+0xd4>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d129      	bne.n	8009298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924a:	f000 fa0b 	bl	8009664 <prvCopyDataToQueue>
 800924e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d010      	beq.n	800927a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	3324      	adds	r3, #36	; 0x24
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fff5 	bl	800a24c <xTaskRemoveFromEventList>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d013      	beq.n	8009290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009268:	4b3f      	ldr	r3, [pc, #252]	; (8009368 <xQueueGenericSend+0x1f8>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	e00a      	b.n	8009290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009280:	4b39      	ldr	r3, [pc, #228]	; (8009368 <xQueueGenericSend+0x1f8>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009290:	f7ff fd78 	bl	8008d84 <vPortExitCritical>
				return pdPASS;
 8009294:	2301      	movs	r3, #1
 8009296:	e063      	b.n	8009360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800929e:	f7ff fd71 	bl	8008d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e05c      	b.n	8009360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d106      	bne.n	80092ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ac:	f107 0314 	add.w	r3, r7, #20
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 f82f 	bl	800a314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092ba:	f7ff fd63 	bl	8008d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092be:	f000 fd9b 	bl	8009df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092c2:	f7ff fd2f 	bl	8008d24 <vPortEnterCritical>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092cc:	b25b      	sxtb	r3, r3
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d103      	bne.n	80092dc <xQueueGenericSend+0x16c>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d103      	bne.n	80092f2 <xQueueGenericSend+0x182>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f2:	f7ff fd47 	bl	8008d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092f6:	1d3a      	adds	r2, r7, #4
 80092f8:	f107 0314 	add.w	r3, r7, #20
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f81e 	bl	800a340 <xTaskCheckForTimeOut>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d124      	bne.n	8009354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800930a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800930c:	f000 faa2 	bl	8009854 <prvIsQueueFull>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d018      	beq.n	8009348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	3310      	adds	r3, #16
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f000 ff44 	bl	800a1ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009326:	f000 fa2d 	bl	8009784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800932a:	f000 fd73 	bl	8009e14 <xTaskResumeAll>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f af7c 	bne.w	800922e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <xQueueGenericSend+0x1f8>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	e772      	b.n	800922e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800934a:	f000 fa1b 	bl	8009784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800934e:	f000 fd61 	bl	8009e14 <xTaskResumeAll>
 8009352:	e76c      	b.n	800922e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009356:	f000 fa15 	bl	8009784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935a:	f000 fd5b 	bl	8009e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800935e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009360:	4618      	mov	r0, r3
 8009362:	3738      	adds	r7, #56	; 0x38
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b090      	sub	sp, #64	; 0x40
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <xQueueGenericSendFromISR+0x3c>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <xQueueGenericSendFromISR+0x40>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <xQueueGenericSendFromISR+0x42>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d103      	bne.n	80093d6 <xQueueGenericSendFromISR+0x6a>
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <xQueueGenericSendFromISR+0x6e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e000      	b.n	80093dc <xQueueGenericSendFromISR+0x70>
 80093da:	2300      	movs	r3, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	623b      	str	r3, [r7, #32]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093f6:	f7ff fd77 	bl	8008ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80093fa:	f3ef 8211 	mrs	r2, BASEPRI
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	61fa      	str	r2, [r7, #28]
 8009410:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941e:	429a      	cmp	r2, r3
 8009420:	d302      	bcc.n	8009428 <xQueueGenericSendFromISR+0xbc>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d12f      	bne.n	8009488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800942e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800943e:	f000 f911 	bl	8009664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d112      	bne.n	8009472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b00      	cmp	r3, #0
 8009452:	d016      	beq.n	8009482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	3324      	adds	r3, #36	; 0x24
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fef7 	bl	800a24c <xTaskRemoveFromEventList>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00e      	beq.n	8009482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00b      	beq.n	8009482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	e007      	b.n	8009482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009476:	3301      	adds	r3, #1
 8009478:	b2db      	uxtb	r3, r3
 800947a:	b25a      	sxtb	r2, r3
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009482:	2301      	movs	r3, #1
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009486:	e001      	b.n	800948c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009488:	2300      	movs	r3, #0
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f383 8811 	msr	BASEPRI, r3
}
 8009496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800949a:	4618      	mov	r0, r3
 800949c:	3740      	adds	r7, #64	; 0x40
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b08c      	sub	sp, #48	; 0x30
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <xQueueReceive+0x30>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	623b      	str	r3, [r7, #32]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d103      	bne.n	80094e2 <xQueueReceive+0x3e>
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <xQueueReceive+0x42>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueReceive+0x44>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xQueueReceive+0x5e>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	61fb      	str	r3, [r7, #28]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009502:	f001 f865 	bl	800a5d0 <xTaskGetSchedulerState>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <xQueueReceive+0x6e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <xQueueReceive+0x72>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <xQueueReceive+0x74>
 8009516:	2300      	movs	r3, #0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xQueueReceive+0x8e>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	61bb      	str	r3, [r7, #24]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009532:	f7ff fbf7 	bl	8008d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01f      	beq.n	8009582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009546:	f000 f8f7 	bl	8009738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	1e5a      	subs	r2, r3, #1
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00f      	beq.n	800957a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	3310      	adds	r3, #16
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fe74 	bl	800a24c <xTaskRemoveFromEventList>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800956a:	4b3d      	ldr	r3, [pc, #244]	; (8009660 <xQueueReceive+0x1bc>)
 800956c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800957a:	f7ff fc03 	bl	8008d84 <vPortExitCritical>
				return pdPASS;
 800957e:	2301      	movs	r3, #1
 8009580:	e069      	b.n	8009656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009588:	f7ff fbfc 	bl	8008d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800958c:	2300      	movs	r3, #0
 800958e:	e062      	b.n	8009656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009596:	f107 0310 	add.w	r3, r7, #16
 800959a:	4618      	mov	r0, r3
 800959c:	f000 feba 	bl	800a314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a4:	f7ff fbee 	bl	8008d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a8:	f000 fc26 	bl	8009df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ac:	f7ff fbba 	bl	8008d24 <vPortEnterCritical>
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095bc:	d103      	bne.n	80095c6 <xQueueReceive+0x122>
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095cc:	b25b      	sxtb	r3, r3
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d103      	bne.n	80095dc <xQueueReceive+0x138>
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095dc:	f7ff fbd2 	bl	8008d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095e0:	1d3a      	adds	r2, r7, #4
 80095e2:	f107 0310 	add.w	r3, r7, #16
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fea9 	bl	800a340 <xTaskCheckForTimeOut>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d123      	bne.n	800963c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f6:	f000 f917 	bl	8009828 <prvIsQueueEmpty>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d017      	beq.n	8009630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	3324      	adds	r3, #36	; 0x24
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fdcf 	bl	800a1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800960e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009610:	f000 f8b8 	bl	8009784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009614:	f000 fbfe 	bl	8009e14 <xTaskResumeAll>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d189      	bne.n	8009532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800961e:	4b10      	ldr	r3, [pc, #64]	; (8009660 <xQueueReceive+0x1bc>)
 8009620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	e780      	b.n	8009532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009632:	f000 f8a7 	bl	8009784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009636:	f000 fbed 	bl	8009e14 <xTaskResumeAll>
 800963a:	e77a      	b.n	8009532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800963c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963e:	f000 f8a1 	bl	8009784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009642:	f000 fbe7 	bl	8009e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009648:	f000 f8ee 	bl	8009828 <prvIsQueueEmpty>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	f43f af6f 	beq.w	8009532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3730      	adds	r7, #48	; 0x30
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10d      	bne.n	800969e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d14d      	bne.n	8009726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 ffbc 	bl	800a60c <xTaskPriorityDisinherit>
 8009694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	609a      	str	r2, [r3, #8]
 800969c:	e043      	b.n	8009726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d119      	bne.n	80096d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6858      	ldr	r0, [r3, #4]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	461a      	mov	r2, r3
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	f001 fcdf 	bl	800b072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	441a      	add	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d32b      	bcc.n	8009726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	605a      	str	r2, [r3, #4]
 80096d6:	e026      	b.n	8009726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68d8      	ldr	r0, [r3, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	461a      	mov	r2, r3
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	f001 fcc5 	bl	800b072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	425b      	negs	r3, r3
 80096f2:	441a      	add	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d207      	bcs.n	8009714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970c:	425b      	negs	r3, r3
 800970e:	441a      	add	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d105      	bne.n	8009726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3b01      	subs	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800972e:	697b      	ldr	r3, [r7, #20]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d018      	beq.n	800977c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	441a      	add	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	429a      	cmp	r2, r3
 8009762:	d303      	bcc.n	800976c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68d9      	ldr	r1, [r3, #12]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	461a      	mov	r2, r3
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f001 fc7b 	bl	800b072 <memcpy>
	}
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800978c:	f7ff faca 	bl	8008d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009798:	e011      	b.n	80097be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d012      	beq.n	80097c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3324      	adds	r3, #36	; 0x24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fd50 	bl	800a24c <xTaskRemoveFromEventList>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097b2:	f000 fe27 	bl	800a404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dce9      	bgt.n	800979a <prvUnlockQueue+0x16>
 80097c6:	e000      	b.n	80097ca <prvUnlockQueue+0x46>
					break;
 80097c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	22ff      	movs	r2, #255	; 0xff
 80097ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097d2:	f7ff fad7 	bl	8008d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097d6:	f7ff faa5 	bl	8008d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097e2:	e011      	b.n	8009808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d012      	beq.n	8009812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3310      	adds	r3, #16
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fd2b 	bl	800a24c <xTaskRemoveFromEventList>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097fc:	f000 fe02 	bl	800a404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	3b01      	subs	r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dce9      	bgt.n	80097e4 <prvUnlockQueue+0x60>
 8009810:	e000      	b.n	8009814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	22ff      	movs	r2, #255	; 0xff
 8009818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800981c:	f7ff fab2 	bl	8008d84 <vPortExitCritical>
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009830:	f7ff fa78 	bl	8008d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800983c:	2301      	movs	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	e001      	b.n	8009846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009846:	f7ff fa9d 	bl	8008d84 <vPortExitCritical>

	return xReturn;
 800984a:	68fb      	ldr	r3, [r7, #12]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800985c:	f7ff fa62 	bl	8008d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009868:	429a      	cmp	r2, r3
 800986a:	d102      	bne.n	8009872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	e001      	b.n	8009876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009876:	f7ff fa85 	bl	8008d84 <vPortExitCritical>

	return xReturn;
 800987a:	68fb      	ldr	r3, [r7, #12]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e014      	b.n	80098be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009894:	4a0f      	ldr	r2, [pc, #60]	; (80098d4 <vQueueAddToRegistry+0x50>)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098a0:	490c      	ldr	r1, [pc, #48]	; (80098d4 <vQueueAddToRegistry+0x50>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098aa:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <vQueueAddToRegistry+0x50>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	4413      	add	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098b6:	e006      	b.n	80098c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	d9e7      	bls.n	8009894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	240047f0 	.word	0x240047f0

080098d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098e8:	f7ff fa1c 	bl	8008d24 <vPortEnterCritical>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d103      	bne.n	8009902 <vQueueWaitForMessageRestricted+0x2a>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009908:	b25b      	sxtb	r3, r3
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d103      	bne.n	8009918 <vQueueWaitForMessageRestricted+0x40>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009918:	f7ff fa34 	bl	8008d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	3324      	adds	r3, #36	; 0x24
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fc61 	bl	800a1f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009932:	6978      	ldr	r0, [r7, #20]
 8009934:	f7ff ff26 	bl	8009784 <prvUnlockQueue>
	}
 8009938:	bf00      	nop
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af04      	add	r7, sp, #16
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	623b      	str	r3, [r7, #32]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xTaskCreateStatic+0x46>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	61fb      	str	r3, [r7, #28]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009986:	23bc      	movs	r3, #188	; 0xbc
 8009988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2bbc      	cmp	r3, #188	; 0xbc
 800998e:	d00a      	beq.n	80099a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	61bb      	str	r3, [r7, #24]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01e      	beq.n	80099ec <xTaskCreateStatic+0xac>
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01b      	beq.n	80099ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	2202      	movs	r2, #2
 80099c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099c6:	2300      	movs	r3, #0
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	9302      	str	r3, [sp, #8]
 80099ce:	f107 0314 	add.w	r3, r7, #20
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	68b9      	ldr	r1, [r7, #8]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f850 	bl	8009a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099e6:	f000 f8f3 	bl	8009bd0 <prvAddNewTaskToReadyList>
 80099ea:	e001      	b.n	80099f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099f0:	697b      	ldr	r3, [r7, #20]
	}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3728      	adds	r7, #40	; 0x28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b08c      	sub	sp, #48	; 0x30
 80099fe:	af04      	add	r7, sp, #16
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	4613      	mov	r3, r2
 8009a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a0a:	88fb      	ldrh	r3, [r7, #6]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fdc0 	bl	8008594 <pvPortMalloc>
 8009a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00e      	beq.n	8009a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a1c:	20bc      	movs	r0, #188	; 0xbc
 8009a1e:	f7fe fdb9 	bl	8008594 <pvPortMalloc>
 8009a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8009a30:	e005      	b.n	8009a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a32:	6978      	ldr	r0, [r7, #20]
 8009a34:	f7fe fe7a 	bl	800872c <vPortFree>
 8009a38:	e001      	b.n	8009a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d017      	beq.n	8009a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a4c:	88fa      	ldrh	r2, [r7, #6]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	9302      	str	r3, [sp, #8]
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f80e 	bl	8009a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a68:	69f8      	ldr	r0, [r7, #28]
 8009a6a:	f000 f8b1 	bl	8009bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	e002      	b.n	8009a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a74:	f04f 33ff 	mov.w	r3, #4294967295
 8009a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	21a5      	movs	r1, #165	; 0xa5
 8009a9e:	f001 faf6 	bl	800b08e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009aac:	440b      	add	r3, r1
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	f023 0307 	bic.w	r3, r3, #7
 8009aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	617b      	str	r3, [r7, #20]
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01f      	beq.n	8009b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	61fb      	str	r3, [r7, #28]
 8009ae6:	e012      	b.n	8009b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	4413      	add	r3, r2
 8009aee:	7819      	ldrb	r1, [r3, #0]
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	3334      	adds	r3, #52	; 0x34
 8009af8:	460a      	mov	r2, r1
 8009afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	4413      	add	r3, r2
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	61fb      	str	r3, [r7, #28]
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	2b0f      	cmp	r3, #15
 8009b12:	d9e9      	bls.n	8009ae8 <prvInitialiseNewTask+0x64>
 8009b14:	e000      	b.n	8009b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8009b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b20:	e003      	b.n	8009b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	2b37      	cmp	r3, #55	; 0x37
 8009b2e:	d901      	bls.n	8009b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b30:	2337      	movs	r3, #55	; 0x37
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	2200      	movs	r2, #0
 8009b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe ff2c 	bl	80089a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	3318      	adds	r3, #24
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe ff27 	bl	80089a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	3354      	adds	r3, #84	; 0x54
 8009b84:	2260      	movs	r2, #96	; 0x60
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fa80 	bl	800b08e <memset>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	4a0c      	ldr	r2, [pc, #48]	; (8009bc4 <prvInitialiseNewTask+0x140>)
 8009b92:	659a      	str	r2, [r3, #88]	; 0x58
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <prvInitialiseNewTask+0x144>)
 8009b98:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	4a0b      	ldr	r2, [pc, #44]	; (8009bcc <prvInitialiseNewTask+0x148>)
 8009b9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	68f9      	ldr	r1, [r7, #12]
 8009ba4:	69b8      	ldr	r0, [r7, #24]
 8009ba6:	f7fe ff93 	bl	8008ad0 <pxPortInitialiseStack>
 8009baa:	4602      	mov	r2, r0
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bbc:	bf00      	nop
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	0800e7c0 	.word	0x0800e7c0
 8009bc8:	0800e7e0 	.word	0x0800e7e0
 8009bcc:	0800e7a0 	.word	0x0800e7a0

08009bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bd8:	f7ff f8a4 	bl	8008d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bdc:	4b2d      	ldr	r3, [pc, #180]	; (8009c94 <prvAddNewTaskToReadyList+0xc4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4a2c      	ldr	r2, [pc, #176]	; (8009c94 <prvAddNewTaskToReadyList+0xc4>)
 8009be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009be6:	4b2c      	ldr	r3, [pc, #176]	; (8009c98 <prvAddNewTaskToReadyList+0xc8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bee:	4a2a      	ldr	r2, [pc, #168]	; (8009c98 <prvAddNewTaskToReadyList+0xc8>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009bf4:	4b27      	ldr	r3, [pc, #156]	; (8009c94 <prvAddNewTaskToReadyList+0xc4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d110      	bne.n	8009c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bfc:	f000 fc26 	bl	800a44c <prvInitialiseTaskLists>
 8009c00:	e00d      	b.n	8009c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c02:	4b26      	ldr	r3, [pc, #152]	; (8009c9c <prvAddNewTaskToReadyList+0xcc>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c0a:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <prvAddNewTaskToReadyList+0xc8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d802      	bhi.n	8009c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c18:	4a1f      	ldr	r2, [pc, #124]	; (8009c98 <prvAddNewTaskToReadyList+0xc8>)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c1e:	4b20      	ldr	r3, [pc, #128]	; (8009ca0 <prvAddNewTaskToReadyList+0xd0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3301      	adds	r3, #1
 8009c24:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <prvAddNewTaskToReadyList+0xd0>)
 8009c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <prvAddNewTaskToReadyList+0xd0>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <prvAddNewTaskToReadyList+0xd4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d903      	bls.n	8009c44 <prvAddNewTaskToReadyList+0x74>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	4a18      	ldr	r2, [pc, #96]	; (8009ca4 <prvAddNewTaskToReadyList+0xd4>)
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <prvAddNewTaskToReadyList+0xd8>)
 8009c52:	441a      	add	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3304      	adds	r3, #4
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	f7fe feb1 	bl	80089c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c60:	f7ff f890 	bl	8008d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c64:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <prvAddNewTaskToReadyList+0xcc>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00e      	beq.n	8009c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <prvAddNewTaskToReadyList+0xc8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d207      	bcs.n	8009c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <prvAddNewTaskToReadyList+0xdc>)
 8009c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	24004d04 	.word	0x24004d04
 8009c98:	24004830 	.word	0x24004830
 8009c9c:	24004d10 	.word	0x24004d10
 8009ca0:	24004d20 	.word	0x24004d20
 8009ca4:	24004d0c 	.word	0x24004d0c
 8009ca8:	24004834 	.word	0x24004834
 8009cac:	e000ed04 	.word	0xe000ed04

08009cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d017      	beq.n	8009cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cc2:	4b13      	ldr	r3, [pc, #76]	; (8009d10 <vTaskDelay+0x60>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <vTaskDelay+0x30>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60bb      	str	r3, [r7, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ce0:	f000 f88a 	bl	8009df8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fcfe 	bl	800a6e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cec:	f000 f892 	bl	8009e14 <xTaskResumeAll>
 8009cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d107      	bne.n	8009d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <vTaskDelay+0x64>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d08:	bf00      	nop
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	24004d2c 	.word	0x24004d2c
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d26:	463a      	mov	r2, r7
 8009d28:	1d39      	adds	r1, r7, #4
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe fbfc 	bl	800852c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	9202      	str	r2, [sp, #8]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	460a      	mov	r2, r1
 8009d46:	4924      	ldr	r1, [pc, #144]	; (8009dd8 <vTaskStartScheduler+0xc0>)
 8009d48:	4824      	ldr	r0, [pc, #144]	; (8009ddc <vTaskStartScheduler+0xc4>)
 8009d4a:	f7ff fdf9 	bl	8009940 <xTaskCreateStatic>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4a23      	ldr	r2, [pc, #140]	; (8009de0 <vTaskStartScheduler+0xc8>)
 8009d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d54:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <vTaskStartScheduler+0xc8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e001      	b.n	8009d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d102      	bne.n	8009d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d6c:	f000 fd10 	bl	800a790 <xTimerCreateTimerTask>
 8009d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d11b      	bne.n	8009db0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	613b      	str	r3, [r7, #16]
}
 8009d8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d8c:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <vTaskStartScheduler+0xcc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3354      	adds	r3, #84	; 0x54
 8009d92:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <vTaskStartScheduler+0xd0>)
 8009d94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d96:	4b15      	ldr	r3, [pc, #84]	; (8009dec <vTaskStartScheduler+0xd4>)
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d9e:	4b14      	ldr	r3, [pc, #80]	; (8009df0 <vTaskStartScheduler+0xd8>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009da4:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <vTaskStartScheduler+0xdc>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009daa:	f7fe ff19 	bl	8008be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dae:	e00e      	b.n	8009dce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d10a      	bne.n	8009dce <vTaskStartScheduler+0xb6>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <vTaskStartScheduler+0xb4>
}
 8009dce:	bf00      	nop
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800e6e4 	.word	0x0800e6e4
 8009ddc:	0800a41d 	.word	0x0800a41d
 8009de0:	24004d28 	.word	0x24004d28
 8009de4:	24004830 	.word	0x24004830
 8009de8:	24000014 	.word	0x24000014
 8009dec:	24004d24 	.word	0x24004d24
 8009df0:	24004d10 	.word	0x24004d10
 8009df4:	24004d08 	.word	0x24004d08

08009df8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009dfc:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <vTaskSuspendAll+0x18>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a03      	ldr	r2, [pc, #12]	; (8009e10 <vTaskSuspendAll+0x18>)
 8009e04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e06:	bf00      	nop
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	24004d2c 	.word	0x24004d2c

08009e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e22:	4b42      	ldr	r3, [pc, #264]	; (8009f2c <xTaskResumeAll+0x118>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	603b      	str	r3, [r7, #0]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e40:	f7fe ff70 	bl	8008d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e44:	4b39      	ldr	r3, [pc, #228]	; (8009f2c <xTaskResumeAll+0x118>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4a38      	ldr	r2, [pc, #224]	; (8009f2c <xTaskResumeAll+0x118>)
 8009e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <xTaskResumeAll+0x118>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d162      	bne.n	8009f1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e56:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <xTaskResumeAll+0x11c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d05e      	beq.n	8009f1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e5e:	e02f      	b.n	8009ec0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	4b34      	ldr	r3, [pc, #208]	; (8009f34 <xTaskResumeAll+0x120>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3318      	adds	r3, #24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fe05 	bl	8008a7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fe00 	bl	8008a7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e80:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <xTaskResumeAll+0x124>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d903      	bls.n	8009e90 <xTaskResumeAll+0x7c>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	4a2a      	ldr	r2, [pc, #168]	; (8009f38 <xTaskResumeAll+0x124>)
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4a27      	ldr	r2, [pc, #156]	; (8009f3c <xTaskResumeAll+0x128>)
 8009e9e:	441a      	add	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7fe fd8b 	bl	80089c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4b23      	ldr	r3, [pc, #140]	; (8009f40 <xTaskResumeAll+0x12c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d302      	bcc.n	8009ec0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009eba:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <xTaskResumeAll+0x130>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ec0:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <xTaskResumeAll+0x120>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1cb      	bne.n	8009e60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ece:	f000 fb5f 	bl	800a590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ed2:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <xTaskResumeAll+0x134>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d010      	beq.n	8009f00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ede:	f000 f847 	bl	8009f70 <xTaskIncrementTick>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ee8:	4b16      	ldr	r3, [pc, #88]	; (8009f44 <xTaskResumeAll+0x130>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f1      	bne.n	8009ede <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009efa:	4b13      	ldr	r3, [pc, #76]	; (8009f48 <xTaskResumeAll+0x134>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f00:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <xTaskResumeAll+0x130>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d009      	beq.n	8009f1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <xTaskResumeAll+0x138>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f1c:	f7fe ff32 	bl	8008d84 <vPortExitCritical>

	return xAlreadyYielded;
 8009f20:	68bb      	ldr	r3, [r7, #8]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	24004d2c 	.word	0x24004d2c
 8009f30:	24004d04 	.word	0x24004d04
 8009f34:	24004cc4 	.word	0x24004cc4
 8009f38:	24004d0c 	.word	0x24004d0c
 8009f3c:	24004834 	.word	0x24004834
 8009f40:	24004830 	.word	0x24004830
 8009f44:	24004d18 	.word	0x24004d18
 8009f48:	24004d14 	.word	0x24004d14
 8009f4c:	e000ed04 	.word	0xe000ed04

08009f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <xTaskGetTickCount+0x1c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f5c:	687b      	ldr	r3, [r7, #4]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	24004d08 	.word	0x24004d08

08009f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f7a:	4b4f      	ldr	r3, [pc, #316]	; (800a0b8 <xTaskIncrementTick+0x148>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f040 808f 	bne.w	800a0a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f84:	4b4d      	ldr	r3, [pc, #308]	; (800a0bc <xTaskIncrementTick+0x14c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f8c:	4a4b      	ldr	r2, [pc, #300]	; (800a0bc <xTaskIncrementTick+0x14c>)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d120      	bne.n	8009fda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f98:	4b49      	ldr	r3, [pc, #292]	; (800a0c0 <xTaskIncrementTick+0x150>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	603b      	str	r3, [r7, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <xTaskIncrementTick+0x46>
 8009fb8:	4b41      	ldr	r3, [pc, #260]	; (800a0c0 <xTaskIncrementTick+0x150>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	60fb      	str	r3, [r7, #12]
 8009fbe:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <xTaskIncrementTick+0x154>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a3f      	ldr	r2, [pc, #252]	; (800a0c0 <xTaskIncrementTick+0x150>)
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	4a3f      	ldr	r2, [pc, #252]	; (800a0c4 <xTaskIncrementTick+0x154>)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	4b3e      	ldr	r3, [pc, #248]	; (800a0c8 <xTaskIncrementTick+0x158>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	4a3d      	ldr	r2, [pc, #244]	; (800a0c8 <xTaskIncrementTick+0x158>)
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	f000 fadb 	bl	800a590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fda:	4b3c      	ldr	r3, [pc, #240]	; (800a0cc <xTaskIncrementTick+0x15c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d349      	bcc.n	800a078 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fe4:	4b36      	ldr	r3, [pc, #216]	; (800a0c0 <xTaskIncrementTick+0x150>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fee:	4b37      	ldr	r3, [pc, #220]	; (800a0cc <xTaskIncrementTick+0x15c>)
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	601a      	str	r2, [r3, #0]
					break;
 8009ff6:	e03f      	b.n	800a078 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff8:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <xTaskIncrementTick+0x150>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d203      	bcs.n	800a018 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a010:	4a2e      	ldr	r2, [pc, #184]	; (800a0cc <xTaskIncrementTick+0x15c>)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a016:	e02f      	b.n	800a078 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3304      	adds	r3, #4
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fd2d 	bl	8008a7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3318      	adds	r3, #24
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fd24 	bl	8008a7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <xTaskIncrementTick+0x160>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d903      	bls.n	800a048 <xTaskIncrementTick+0xd8>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a22      	ldr	r2, [pc, #136]	; (800a0d0 <xTaskIncrementTick+0x160>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4a1f      	ldr	r2, [pc, #124]	; (800a0d4 <xTaskIncrementTick+0x164>)
 800a056:	441a      	add	r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fe fcaf 	bl	80089c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <xTaskIncrementTick+0x168>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d3b8      	bcc.n	8009fe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a076:	e7b5      	b.n	8009fe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <xTaskIncrementTick+0x168>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07e:	4915      	ldr	r1, [pc, #84]	; (800a0d4 <xTaskIncrementTick+0x164>)
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d901      	bls.n	800a094 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a090:	2301      	movs	r3, #1
 800a092:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a094:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <xTaskIncrementTick+0x16c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d007      	beq.n	800a0ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	e004      	b.n	800a0ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <xTaskIncrementTick+0x170>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4a0d      	ldr	r2, [pc, #52]	; (800a0e0 <xTaskIncrementTick+0x170>)
 800a0aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0ac:	697b      	ldr	r3, [r7, #20]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	24004d2c 	.word	0x24004d2c
 800a0bc:	24004d08 	.word	0x24004d08
 800a0c0:	24004cbc 	.word	0x24004cbc
 800a0c4:	24004cc0 	.word	0x24004cc0
 800a0c8:	24004d1c 	.word	0x24004d1c
 800a0cc:	24004d24 	.word	0x24004d24
 800a0d0:	24004d0c 	.word	0x24004d0c
 800a0d4:	24004834 	.word	0x24004834
 800a0d8:	24004830 	.word	0x24004830
 800a0dc:	24004d18 	.word	0x24004d18
 800a0e0:	24004d14 	.word	0x24004d14

0800a0e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <vTaskSwitchContext+0xb0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0f2:	4b29      	ldr	r3, [pc, #164]	; (800a198 <vTaskSwitchContext+0xb4>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0f8:	e046      	b.n	800a188 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a0fa:	4b27      	ldr	r3, [pc, #156]	; (800a198 <vTaskSwitchContext+0xb4>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a100:	4b26      	ldr	r3, [pc, #152]	; (800a19c <vTaskSwitchContext+0xb8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	e010      	b.n	800a12a <vTaskSwitchContext+0x46>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <vTaskSwitchContext+0x40>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <vTaskSwitchContext+0x3e>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3b01      	subs	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	491d      	ldr	r1, [pc, #116]	; (800a1a0 <vTaskSwitchContext+0xbc>)
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4613      	mov	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0e4      	beq.n	800a108 <vTaskSwitchContext+0x24>
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <vTaskSwitchContext+0xbc>)
 800a14a:	4413      	add	r3, r2
 800a14c:	60bb      	str	r3, [r7, #8]
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	605a      	str	r2, [r3, #4]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	3308      	adds	r3, #8
 800a160:	429a      	cmp	r2, r3
 800a162:	d104      	bne.n	800a16e <vTaskSwitchContext+0x8a>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	605a      	str	r2, [r3, #4]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	4a0b      	ldr	r2, [pc, #44]	; (800a1a4 <vTaskSwitchContext+0xc0>)
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <vTaskSwitchContext+0xb8>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <vTaskSwitchContext+0xc0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3354      	adds	r3, #84	; 0x54
 800a184:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <vTaskSwitchContext+0xc4>)
 800a186:	6013      	str	r3, [r2, #0]
}
 800a188:	bf00      	nop
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	24004d2c 	.word	0x24004d2c
 800a198:	24004d18 	.word	0x24004d18
 800a19c:	24004d0c 	.word	0x24004d0c
 800a1a0:	24004834 	.word	0x24004834
 800a1a4:	24004830 	.word	0x24004830
 800a1a8:	24000014 	.word	0x24000014

0800a1ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	60fb      	str	r3, [r7, #12]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1d2:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <vTaskPlaceOnEventList+0x44>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3318      	adds	r3, #24
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7fe fc15 	bl	8008a0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	6838      	ldr	r0, [r7, #0]
 800a1e4:	f000 fa80 	bl	800a6e8 <prvAddCurrentTaskToDelayedList>
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	24004830 	.word	0x24004830

0800a1f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	617b      	str	r3, [r7, #20]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <vTaskPlaceOnEventListRestricted+0x54>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3318      	adds	r3, #24
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7fe fbcc 	bl	80089c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f000 fa55 	bl	800a6e8 <prvAddCurrentTaskToDelayedList>
	}
 800a23e:	bf00      	nop
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	24004830 	.word	0x24004830

0800a24c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	60fb      	str	r3, [r7, #12]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	3318      	adds	r3, #24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fbfd 	bl	8008a7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a282:	4b1e      	ldr	r3, [pc, #120]	; (800a2fc <xTaskRemoveFromEventList+0xb0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d11d      	bne.n	800a2c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fbf4 	bl	8008a7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4b19      	ldr	r3, [pc, #100]	; (800a300 <xTaskRemoveFromEventList+0xb4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d903      	bls.n	800a2a8 <xTaskRemoveFromEventList+0x5c>
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	4a16      	ldr	r2, [pc, #88]	; (800a300 <xTaskRemoveFromEventList+0xb4>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4a13      	ldr	r2, [pc, #76]	; (800a304 <xTaskRemoveFromEventList+0xb8>)
 800a2b6:	441a      	add	r2, r3
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fb7f 	bl	80089c2 <vListInsertEnd>
 800a2c4:	e005      	b.n	800a2d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	480e      	ldr	r0, [pc, #56]	; (800a308 <xTaskRemoveFromEventList+0xbc>)
 800a2ce:	f7fe fb78 	bl	80089c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <xTaskRemoveFromEventList+0xc0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d905      	bls.n	800a2ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <xTaskRemoveFromEventList+0xc4>)
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	e001      	b.n	800a2f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2f0:	697b      	ldr	r3, [r7, #20]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	24004d2c 	.word	0x24004d2c
 800a300:	24004d0c 	.word	0x24004d0c
 800a304:	24004834 	.word	0x24004834
 800a308:	24004cc4 	.word	0x24004cc4
 800a30c:	24004830 	.word	0x24004830
 800a310:	24004d18 	.word	0x24004d18

0800a314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <vTaskInternalSetTimeOutState+0x24>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <vTaskInternalSetTimeOutState+0x28>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	605a      	str	r2, [r3, #4]
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	24004d1c 	.word	0x24004d1c
 800a33c:	24004d08 	.word	0x24004d08

0800a340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	60fb      	str	r3, [r7, #12]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a382:	f7fe fccf 	bl	8008d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a386:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <xTaskCheckForTimeOut+0xbc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39e:	d102      	bne.n	800a3a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	e023      	b.n	800a3ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b15      	ldr	r3, [pc, #84]	; (800a400 <xTaskCheckForTimeOut+0xc0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d007      	beq.n	800a3c2 <xTaskCheckForTimeOut+0x82>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d302      	bcc.n	800a3c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	61fb      	str	r3, [r7, #28]
 800a3c0:	e015      	b.n	800a3ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d20b      	bcs.n	800a3e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7ff ff9b 	bl	800a314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61fb      	str	r3, [r7, #28]
 800a3e2:	e004      	b.n	800a3ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3ee:	f7fe fcc9 	bl	8008d84 <vPortExitCritical>

	return xReturn;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	24004d08 	.word	0x24004d08
 800a400:	24004d1c 	.word	0x24004d1c

0800a404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a408:	4b03      	ldr	r3, [pc, #12]	; (800a418 <vTaskMissedYield+0x14>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
}
 800a40e:	bf00      	nop
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	24004d18 	.word	0x24004d18

0800a41c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a424:	f000 f852 	bl	800a4cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a428:	4b06      	ldr	r3, [pc, #24]	; (800a444 <prvIdleTask+0x28>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d9f9      	bls.n	800a424 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <prvIdleTask+0x2c>)
 800a432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a440:	e7f0      	b.n	800a424 <prvIdleTask+0x8>
 800a442:	bf00      	nop
 800a444:	24004834 	.word	0x24004834
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
 800a456:	e00c      	b.n	800a472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4a12      	ldr	r2, [pc, #72]	; (800a4ac <prvInitialiseTaskLists+0x60>)
 800a464:	4413      	add	r3, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fa7e 	bl	8008968 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3301      	adds	r3, #1
 800a470:	607b      	str	r3, [r7, #4]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b37      	cmp	r3, #55	; 0x37
 800a476:	d9ef      	bls.n	800a458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a478:	480d      	ldr	r0, [pc, #52]	; (800a4b0 <prvInitialiseTaskLists+0x64>)
 800a47a:	f7fe fa75 	bl	8008968 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a47e:	480d      	ldr	r0, [pc, #52]	; (800a4b4 <prvInitialiseTaskLists+0x68>)
 800a480:	f7fe fa72 	bl	8008968 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a484:	480c      	ldr	r0, [pc, #48]	; (800a4b8 <prvInitialiseTaskLists+0x6c>)
 800a486:	f7fe fa6f 	bl	8008968 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a48a:	480c      	ldr	r0, [pc, #48]	; (800a4bc <prvInitialiseTaskLists+0x70>)
 800a48c:	f7fe fa6c 	bl	8008968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a490:	480b      	ldr	r0, [pc, #44]	; (800a4c0 <prvInitialiseTaskLists+0x74>)
 800a492:	f7fe fa69 	bl	8008968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a496:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <prvInitialiseTaskLists+0x78>)
 800a498:	4a05      	ldr	r2, [pc, #20]	; (800a4b0 <prvInitialiseTaskLists+0x64>)
 800a49a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <prvInitialiseTaskLists+0x7c>)
 800a49e:	4a05      	ldr	r2, [pc, #20]	; (800a4b4 <prvInitialiseTaskLists+0x68>)
 800a4a0:	601a      	str	r2, [r3, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	24004834 	.word	0x24004834
 800a4b0:	24004c94 	.word	0x24004c94
 800a4b4:	24004ca8 	.word	0x24004ca8
 800a4b8:	24004cc4 	.word	0x24004cc4
 800a4bc:	24004cd8 	.word	0x24004cd8
 800a4c0:	24004cf0 	.word	0x24004cf0
 800a4c4:	24004cbc 	.word	0x24004cbc
 800a4c8:	24004cc0 	.word	0x24004cc0

0800a4cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4d2:	e019      	b.n	800a508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4d4:	f7fe fc26 	bl	8008d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d8:	4b10      	ldr	r3, [pc, #64]	; (800a51c <prvCheckTasksWaitingTermination+0x50>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe fac9 	bl	8008a7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4ea:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <prvCheckTasksWaitingTermination+0x54>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4a0b      	ldr	r2, [pc, #44]	; (800a520 <prvCheckTasksWaitingTermination+0x54>)
 800a4f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <prvCheckTasksWaitingTermination+0x58>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	4a0a      	ldr	r2, [pc, #40]	; (800a524 <prvCheckTasksWaitingTermination+0x58>)
 800a4fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4fe:	f7fe fc41 	bl	8008d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f810 	bl	800a528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a508:	4b06      	ldr	r3, [pc, #24]	; (800a524 <prvCheckTasksWaitingTermination+0x58>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e1      	bne.n	800a4d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	24004cd8 	.word	0x24004cd8
 800a520:	24004d04 	.word	0x24004d04
 800a524:	24004cec 	.word	0x24004cec

0800a528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3354      	adds	r3, #84	; 0x54
 800a534:	4618      	mov	r0, r3
 800a536:	f001 fb25 	bl	800bb84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a540:	2b00      	cmp	r3, #0
 800a542:	d108      	bne.n	800a556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe f8ef 	bl	800872c <vPortFree>
				vPortFree( pxTCB );
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fe f8ec 	bl	800872c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a554:	e018      	b.n	800a588 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d103      	bne.n	800a568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7fe f8e3 	bl	800872c <vPortFree>
	}
 800a566:	e00f      	b.n	800a588 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d00a      	beq.n	800a588 <prvDeleteTCB+0x60>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	60fb      	str	r3, [r7, #12]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <prvDeleteTCB+0x5e>
	}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5a8:	e008      	b.n	800a5bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5ba:	6013      	str	r3, [r2, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	24004cbc 	.word	0x24004cbc
 800a5cc:	24004d24 	.word	0x24004d24

0800a5d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <xTaskGetSchedulerState+0x34>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	607b      	str	r3, [r7, #4]
 800a5e2:	e008      	b.n	800a5f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e4:	4b08      	ldr	r3, [pc, #32]	; (800a608 <xTaskGetSchedulerState+0x38>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	e001      	b.n	800a5f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5f6:	687b      	ldr	r3, [r7, #4]
	}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	24004d10 	.word	0x24004d10
 800a608:	24004d2c 	.word	0x24004d2c

0800a60c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d056      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a622:	4b2e      	ldr	r3, [pc, #184]	; (800a6dc <xTaskPriorityDisinherit+0xd0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d00a      	beq.n	800a642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	60fb      	str	r3, [r7, #12]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10a      	bne.n	800a660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	60bb      	str	r3, [r7, #8]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	1e5a      	subs	r2, r3, #1
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a672:	429a      	cmp	r2, r3
 800a674:	d02c      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d128      	bne.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f9fa 	bl	8008a7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <xTaskPriorityDisinherit+0xd4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d903      	bls.n	800a6b0 <xTaskPriorityDisinherit+0xa4>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <xTaskPriorityDisinherit+0xd4>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <xTaskPriorityDisinherit+0xd8>)
 800a6be:	441a      	add	r2, r3
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f7fe f97b 	bl	80089c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6d0:	697b      	ldr	r3, [r7, #20]
	}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	24004830 	.word	0x24004830
 800a6e0:	24004d0c 	.word	0x24004d0c
 800a6e4:	24004834 	.word	0x24004834

0800a6e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6f2:	4b21      	ldr	r3, [pc, #132]	; (800a778 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f8:	4b20      	ldr	r3, [pc, #128]	; (800a77c <prvAddCurrentTaskToDelayedList+0x94>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe f9bc 	bl	8008a7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d10a      	bne.n	800a722 <prvAddCurrentTaskToDelayedList+0x3a>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d007      	beq.n	800a722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a712:	4b1a      	ldr	r3, [pc, #104]	; (800a77c <prvAddCurrentTaskToDelayedList+0x94>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3304      	adds	r3, #4
 800a718:	4619      	mov	r1, r3
 800a71a:	4819      	ldr	r0, [pc, #100]	; (800a780 <prvAddCurrentTaskToDelayedList+0x98>)
 800a71c:	f7fe f951 	bl	80089c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a720:	e026      	b.n	800a770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4413      	add	r3, r2
 800a728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a72a:	4b14      	ldr	r3, [pc, #80]	; (800a77c <prvAddCurrentTaskToDelayedList+0x94>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	429a      	cmp	r2, r3
 800a738:	d209      	bcs.n	800a74e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <prvAddCurrentTaskToDelayedList+0x94>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3304      	adds	r3, #4
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	f7fe f95f 	bl	8008a0a <vListInsert>
}
 800a74c:	e010      	b.n	800a770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a74e:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <prvAddCurrentTaskToDelayedList+0x94>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3304      	adds	r3, #4
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f7fe f955 	bl	8008a0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d202      	bcs.n	800a770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a76a:	4a08      	ldr	r2, [pc, #32]	; (800a78c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	6013      	str	r3, [r2, #0]
}
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	24004d08 	.word	0x24004d08
 800a77c:	24004830 	.word	0x24004830
 800a780:	24004cf0 	.word	0x24004cf0
 800a784:	24004cc0 	.word	0x24004cc0
 800a788:	24004cbc 	.word	0x24004cbc
 800a78c:	24004d24 	.word	0x24004d24

0800a790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	; 0x28
 800a794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a79a:	f000 fb07 	bl	800adac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a79e:	4b1c      	ldr	r3, [pc, #112]	; (800a810 <xTimerCreateTimerTask+0x80>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d021      	beq.n	800a7ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7ae:	1d3a      	adds	r2, r7, #4
 800a7b0:	f107 0108 	add.w	r1, r7, #8
 800a7b4:	f107 030c 	add.w	r3, r7, #12
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fd fed1 	bl	8008560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	9202      	str	r2, [sp, #8]
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	4910      	ldr	r1, [pc, #64]	; (800a814 <xTimerCreateTimerTask+0x84>)
 800a7d2:	4811      	ldr	r0, [pc, #68]	; (800a818 <xTimerCreateTimerTask+0x88>)
 800a7d4:	f7ff f8b4 	bl	8009940 <xTaskCreateStatic>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4a10      	ldr	r2, [pc, #64]	; (800a81c <xTimerCreateTimerTask+0x8c>)
 800a7dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <xTimerCreateTimerTask+0x8c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	613b      	str	r3, [r7, #16]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a806:	697b      	ldr	r3, [r7, #20]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	24004d60 	.word	0x24004d60
 800a814:	0800e6ec 	.word	0x0800e6ec
 800a818:	0800a955 	.word	0x0800a955
 800a81c:	24004d64 	.word	0x24004d64

0800a820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08a      	sub	sp, #40	; 0x28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a82e:	2300      	movs	r3, #0
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	623b      	str	r3, [r7, #32]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a84e:	4b1a      	ldr	r3, [pc, #104]	; (800a8b8 <xTimerGenericCommand+0x98>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d02a      	beq.n	800a8ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b05      	cmp	r3, #5
 800a866:	dc18      	bgt.n	800a89a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a868:	f7ff feb2 	bl	800a5d0 <xTaskGetSchedulerState>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d109      	bne.n	800a886 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a872:	4b11      	ldr	r3, [pc, #68]	; (800a8b8 <xTimerGenericCommand+0x98>)
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	f107 0110 	add.w	r1, r7, #16
 800a87a:	2300      	movs	r3, #0
 800a87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87e:	f7fe fc77 	bl	8009170 <xQueueGenericSend>
 800a882:	6278      	str	r0, [r7, #36]	; 0x24
 800a884:	e012      	b.n	800a8ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a886:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <xTimerGenericCommand+0x98>)
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f107 0110 	add.w	r1, r7, #16
 800a88e:	2300      	movs	r3, #0
 800a890:	2200      	movs	r2, #0
 800a892:	f7fe fc6d 	bl	8009170 <xQueueGenericSend>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24
 800a898:	e008      	b.n	800a8ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <xTimerGenericCommand+0x98>)
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f107 0110 	add.w	r1, r7, #16
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	f7fe fd61 	bl	800936c <xQueueGenericSendFromISR>
 800a8aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	24004d60 	.word	0x24004d60

0800a8bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c6:	4b22      	ldr	r3, [pc, #136]	; (800a950 <prvProcessExpiredTimer+0x94>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe f8d1 	bl	8008a7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d022      	beq.n	800a92e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	699a      	ldr	r2, [r3, #24]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	18d1      	adds	r1, r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	6978      	ldr	r0, [r7, #20]
 800a8f6:	f000 f8d1 	bl	800aa9c <prvInsertTimerInActiveList>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01f      	beq.n	800a940 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a900:	2300      	movs	r3, #0
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	2300      	movs	r3, #0
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	2100      	movs	r1, #0
 800a90a:	6978      	ldr	r0, [r7, #20]
 800a90c:	f7ff ff88 	bl	800a820 <xTimerGenericCommand>
 800a910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d113      	bne.n	800a940 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	60fb      	str	r3, [r7, #12]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a934:	f023 0301 	bic.w	r3, r3, #1
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	6978      	ldr	r0, [r7, #20]
 800a946:	4798      	blx	r3
}
 800a948:	bf00      	nop
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	24004d58 	.word	0x24004d58

0800a954 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a95c:	f107 0308 	add.w	r3, r7, #8
 800a960:	4618      	mov	r0, r3
 800a962:	f000 f857 	bl	800aa14 <prvGetNextExpireTime>
 800a966:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	4619      	mov	r1, r3
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f803 	bl	800a978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a972:	f000 f8d5 	bl	800ab20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a976:	e7f1      	b.n	800a95c <prvTimerTask+0x8>

0800a978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a982:	f7ff fa39 	bl	8009df8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a986:	f107 0308 	add.w	r3, r7, #8
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f866 	bl	800aa5c <prvSampleTimeNow>
 800a990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d130      	bne.n	800a9fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <prvProcessTimerOrBlockTask+0x3c>
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d806      	bhi.n	800a9b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9a6:	f7ff fa35 	bl	8009e14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff ff85 	bl	800a8bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9b2:	e024      	b.n	800a9fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <prvProcessTimerOrBlockTask+0x90>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <prvProcessTimerOrBlockTask+0x50>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e000      	b.n	800a9ca <prvProcessTimerOrBlockTask+0x52>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <prvProcessTimerOrBlockTask+0x94>)
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	f7fe ff7d 	bl	80098d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9de:	f7ff fa19 	bl	8009e14 <xTaskResumeAll>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9e8:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <prvProcessTimerOrBlockTask+0x98>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
}
 800a9f8:	e001      	b.n	800a9fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9fa:	f7ff fa0b 	bl	8009e14 <xTaskResumeAll>
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	24004d5c 	.word	0x24004d5c
 800aa0c:	24004d60 	.word	0x24004d60
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa1c:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <prvGetNextExpireTime+0x44>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <prvGetNextExpireTime+0x16>
 800aa26:	2201      	movs	r2, #1
 800aa28:	e000      	b.n	800aa2c <prvGetNextExpireTime+0x18>
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa38:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <prvGetNextExpireTime+0x44>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e001      	b.n	800aa48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa48:	68fb      	ldr	r3, [r7, #12]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	24004d58 	.word	0x24004d58

0800aa5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa64:	f7ff fa74 	bl	8009f50 <xTaskGetTickCount>
 800aa68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <prvSampleTimeNow+0x3c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d205      	bcs.n	800aa80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa74:	f000 f936 	bl	800ace4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e002      	b.n	800aa86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa86:	4a04      	ldr	r2, [pc, #16]	; (800aa98 <prvSampleTimeNow+0x3c>)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	24004d68 	.word	0x24004d68

0800aa9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d812      	bhi.n	800aae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d302      	bcc.n	800aad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aad0:	2301      	movs	r3, #1
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e01b      	b.n	800ab0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aad6:	4b10      	ldr	r3, [pc, #64]	; (800ab18 <prvInsertTimerInActiveList+0x7c>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f7fd ff92 	bl	8008a0a <vListInsert>
 800aae6:	e012      	b.n	800ab0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d206      	bcs.n	800aafe <prvInsertTimerInActiveList+0x62>
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d302      	bcc.n	800aafe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e007      	b.n	800ab0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aafe:	4b07      	ldr	r3, [pc, #28]	; (800ab1c <prvInsertTimerInActiveList+0x80>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7fd ff7e 	bl	8008a0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab0e:	697b      	ldr	r3, [r7, #20]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	24004d5c 	.word	0x24004d5c
 800ab1c:	24004d58 	.word	0x24004d58

0800ab20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	; 0x38
 800ab24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab26:	e0ca      	b.n	800acbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	da18      	bge.n	800ab60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab2e:	1d3b      	adds	r3, r7, #4
 800ab30:	3304      	adds	r3, #4
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	61fb      	str	r3, [r7, #28]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab56:	6850      	ldr	r0, [r2, #4]
 800ab58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5a:	6892      	ldr	r2, [r2, #8]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f2c0 80aa 	blt.w	800acbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	3304      	adds	r3, #4
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fd ff7f 	bl	8008a7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff ff6b 	bl	800aa5c <prvSampleTimeNow>
 800ab86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b09      	cmp	r3, #9
 800ab8c:	f200 8097 	bhi.w	800acbe <prvProcessReceivedCommands+0x19e>
 800ab90:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <prvProcessReceivedCommands+0x78>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800abc1 	.word	0x0800abc1
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abc1 	.word	0x0800abc1
 800aba4:	0800ac35 	.word	0x0800ac35
 800aba8:	0800ac49 	.word	0x0800ac49
 800abac:	0800ac93 	.word	0x0800ac93
 800abb0:	0800abc1 	.word	0x0800abc1
 800abb4:	0800abc1 	.word	0x0800abc1
 800abb8:	0800ac35 	.word	0x0800ac35
 800abbc:	0800ac49 	.word	0x0800ac49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc6:	f043 0301 	orr.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	18d1      	adds	r1, r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe0:	f7ff ff5c 	bl	800aa9c <prvInsertTimerInActiveList>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d069      	beq.n	800acbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d05e      	beq.n	800acbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	441a      	add	r2, r3
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac12:	f7ff fe05 	bl	800a820 <xTimerGenericCommand>
 800ac16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d14f      	bne.n	800acbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	61bb      	str	r3, [r7, #24]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac46:	e03a      	b.n	800acbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac4e:	f043 0301 	orr.w	r3, r3, #1
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	617b      	str	r3, [r7, #20]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	18d1      	adds	r1, r2, r3
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8c:	f7ff ff06 	bl	800aa9c <prvInsertTimerInActiveList>
					break;
 800ac90:	e015      	b.n	800acbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca2:	f7fd fd43 	bl	800872c <vPortFree>
 800aca6:	e00a      	b.n	800acbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acae:	f023 0301 	bic.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acba:	e000      	b.n	800acbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800acbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acbe:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <prvProcessReceivedCommands+0x1c0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	1d39      	adds	r1, r7, #4
 800acc4:	2200      	movs	r2, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fbec 	bl	80094a4 <xQueueReceive>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f47f af2a 	bne.w	800ab28 <prvProcessReceivedCommands+0x8>
	}
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop
 800acd8:	3730      	adds	r7, #48	; 0x30
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	24004d60 	.word	0x24004d60

0800ace4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acea:	e048      	b.n	800ad7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acec:	4b2d      	ldr	r3, [pc, #180]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf6:	4b2b      	ldr	r3, [pc, #172]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fd feb9 	bl	8008a7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02e      	beq.n	800ad7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4413      	add	r3, r2
 800ad28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d90e      	bls.n	800ad50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad3e:	4b19      	ldr	r3, [pc, #100]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f7fd fe5e 	bl	8008a0a <vListInsert>
 800ad4e:	e016      	b.n	800ad7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad50:	2300      	movs	r3, #0
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	2300      	movs	r3, #0
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	2100      	movs	r1, #0
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fd60 	bl	800a820 <xTimerGenericCommand>
 800ad60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	603b      	str	r3, [r7, #0]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad7e:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1b1      	bne.n	800acec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad88:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad8e:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <prvSwitchTimerLists+0xc4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a04      	ldr	r2, [pc, #16]	; (800ada4 <prvSwitchTimerLists+0xc0>)
 800ad94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad96:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <prvSwitchTimerLists+0xc4>)
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	6013      	str	r3, [r2, #0]
}
 800ad9c:	bf00      	nop
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	24004d58 	.word	0x24004d58
 800ada8:	24004d5c 	.word	0x24004d5c

0800adac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adb2:	f7fd ffb7 	bl	8008d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adb6:	4b15      	ldr	r3, [pc, #84]	; (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d120      	bne.n	800ae00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adbe:	4814      	ldr	r0, [pc, #80]	; (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adc0:	f7fd fdd2 	bl	8008968 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adc4:	4813      	ldr	r0, [pc, #76]	; (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800adc6:	f7fd fdcf 	bl	8008968 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adca:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <prvCheckForValidListAndQueue+0x6c>)
 800adcc:	4a10      	ldr	r2, [pc, #64]	; (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800add0:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <prvCheckForValidListAndQueue+0x70>)
 800add2:	4a10      	ldr	r2, [pc, #64]	; (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800add4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800add6:	2300      	movs	r3, #0
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <prvCheckForValidListAndQueue+0x74>)
 800addc:	4a11      	ldr	r2, [pc, #68]	; (800ae24 <prvCheckForValidListAndQueue+0x78>)
 800adde:	2110      	movs	r1, #16
 800ade0:	200a      	movs	r0, #10
 800ade2:	f7fe f929 	bl	8009038 <xQueueGenericCreateStatic>
 800ade6:	4603      	mov	r3, r0
 800ade8:	4a08      	ldr	r2, [pc, #32]	; (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adec:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	490b      	ldr	r1, [pc, #44]	; (800ae28 <prvCheckForValidListAndQueue+0x7c>)
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fd42 	bl	8009884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae00:	f7fd ffc0 	bl	8008d84 <vPortExitCritical>
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	24004d60 	.word	0x24004d60
 800ae10:	24004d30 	.word	0x24004d30
 800ae14:	24004d44 	.word	0x24004d44
 800ae18:	24004d58 	.word	0x24004d58
 800ae1c:	24004d5c 	.word	0x24004d5c
 800ae20:	24004e0c 	.word	0x24004e0c
 800ae24:	24004d6c 	.word	0x24004d6c
 800ae28:	0800e6f4 	.word	0x0800e6f4

0800ae2c <__errno>:
 800ae2c:	4b01      	ldr	r3, [pc, #4]	; (800ae34 <__errno+0x8>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	24000014 	.word	0x24000014

0800ae38 <std>:
 800ae38:	2300      	movs	r3, #0
 800ae3a:	b510      	push	{r4, lr}
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae46:	6083      	str	r3, [r0, #8]
 800ae48:	8181      	strh	r1, [r0, #12]
 800ae4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae4c:	81c2      	strh	r2, [r0, #14]
 800ae4e:	6183      	str	r3, [r0, #24]
 800ae50:	4619      	mov	r1, r3
 800ae52:	2208      	movs	r2, #8
 800ae54:	305c      	adds	r0, #92	; 0x5c
 800ae56:	f000 f91a 	bl	800b08e <memset>
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x38>)
 800ae5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x3c>)
 800ae60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <std+0x40>)
 800ae64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <std+0x44>)
 800ae68:	6224      	str	r4, [r4, #32]
 800ae6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae6c:	bd10      	pop	{r4, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800bc5d 	.word	0x0800bc5d
 800ae74:	0800bc7f 	.word	0x0800bc7f
 800ae78:	0800bcb7 	.word	0x0800bcb7
 800ae7c:	0800bcdb 	.word	0x0800bcdb

0800ae80 <_cleanup_r>:
 800ae80:	4901      	ldr	r1, [pc, #4]	; (800ae88 <_cleanup_r+0x8>)
 800ae82:	f000 b8af 	b.w	800afe4 <_fwalk_reent>
 800ae86:	bf00      	nop
 800ae88:	0800cba9 	.word	0x0800cba9

0800ae8c <__sfmoreglue>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	2268      	movs	r2, #104	; 0x68
 800ae90:	1e4d      	subs	r5, r1, #1
 800ae92:	4355      	muls	r5, r2
 800ae94:	460e      	mov	r6, r1
 800ae96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae9a:	f000 f921 	bl	800b0e0 <_malloc_r>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	b140      	cbz	r0, 800aeb4 <__sfmoreglue+0x28>
 800aea2:	2100      	movs	r1, #0
 800aea4:	e9c0 1600 	strd	r1, r6, [r0]
 800aea8:	300c      	adds	r0, #12
 800aeaa:	60a0      	str	r0, [r4, #8]
 800aeac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeb0:	f000 f8ed 	bl	800b08e <memset>
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <__sfp_lock_acquire>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__sfp_lock_acquire+0x8>)
 800aeba:	f000 b8d8 	b.w	800b06e <__retarget_lock_acquire_recursive>
 800aebe:	bf00      	nop
 800aec0:	24004e5d 	.word	0x24004e5d

0800aec4 <__sfp_lock_release>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__sfp_lock_release+0x8>)
 800aec6:	f000 b8d3 	b.w	800b070 <__retarget_lock_release_recursive>
 800aeca:	bf00      	nop
 800aecc:	24004e5d 	.word	0x24004e5d

0800aed0 <__sinit_lock_acquire>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sinit_lock_acquire+0x8>)
 800aed2:	f000 b8cc 	b.w	800b06e <__retarget_lock_acquire_recursive>
 800aed6:	bf00      	nop
 800aed8:	24004e5e 	.word	0x24004e5e

0800aedc <__sinit_lock_release>:
 800aedc:	4801      	ldr	r0, [pc, #4]	; (800aee4 <__sinit_lock_release+0x8>)
 800aede:	f000 b8c7 	b.w	800b070 <__retarget_lock_release_recursive>
 800aee2:	bf00      	nop
 800aee4:	24004e5e 	.word	0x24004e5e

0800aee8 <__sinit>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	4604      	mov	r4, r0
 800aeec:	f7ff fff0 	bl	800aed0 <__sinit_lock_acquire>
 800aef0:	69a3      	ldr	r3, [r4, #24]
 800aef2:	b11b      	cbz	r3, 800aefc <__sinit+0x14>
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f7ff bff0 	b.w	800aedc <__sinit_lock_release>
 800aefc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af00:	6523      	str	r3, [r4, #80]	; 0x50
 800af02:	4b13      	ldr	r3, [pc, #76]	; (800af50 <__sinit+0x68>)
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <__sinit+0x6c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	62a2      	str	r2, [r4, #40]	; 0x28
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	bf04      	itt	eq
 800af0e:	2301      	moveq	r3, #1
 800af10:	61a3      	streq	r3, [r4, #24]
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f820 	bl	800af58 <__sfp>
 800af18:	6060      	str	r0, [r4, #4]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f81c 	bl	800af58 <__sfp>
 800af20:	60a0      	str	r0, [r4, #8]
 800af22:	4620      	mov	r0, r4
 800af24:	f000 f818 	bl	800af58 <__sfp>
 800af28:	2200      	movs	r2, #0
 800af2a:	60e0      	str	r0, [r4, #12]
 800af2c:	2104      	movs	r1, #4
 800af2e:	6860      	ldr	r0, [r4, #4]
 800af30:	f7ff ff82 	bl	800ae38 <std>
 800af34:	68a0      	ldr	r0, [r4, #8]
 800af36:	2201      	movs	r2, #1
 800af38:	2109      	movs	r1, #9
 800af3a:	f7ff ff7d 	bl	800ae38 <std>
 800af3e:	68e0      	ldr	r0, [r4, #12]
 800af40:	2202      	movs	r2, #2
 800af42:	2112      	movs	r1, #18
 800af44:	f7ff ff78 	bl	800ae38 <std>
 800af48:	2301      	movs	r3, #1
 800af4a:	61a3      	str	r3, [r4, #24]
 800af4c:	e7d2      	b.n	800aef4 <__sinit+0xc>
 800af4e:	bf00      	nop
 800af50:	0800e800 	.word	0x0800e800
 800af54:	0800ae81 	.word	0x0800ae81

0800af58 <__sfp>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	4607      	mov	r7, r0
 800af5c:	f7ff ffac 	bl	800aeb8 <__sfp_lock_acquire>
 800af60:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <__sfp+0x84>)
 800af62:	681e      	ldr	r6, [r3, #0]
 800af64:	69b3      	ldr	r3, [r6, #24]
 800af66:	b913      	cbnz	r3, 800af6e <__sfp+0x16>
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff ffbd 	bl	800aee8 <__sinit>
 800af6e:	3648      	adds	r6, #72	; 0x48
 800af70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af74:	3b01      	subs	r3, #1
 800af76:	d503      	bpl.n	800af80 <__sfp+0x28>
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	b30b      	cbz	r3, 800afc0 <__sfp+0x68>
 800af7c:	6836      	ldr	r6, [r6, #0]
 800af7e:	e7f7      	b.n	800af70 <__sfp+0x18>
 800af80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af84:	b9d5      	cbnz	r5, 800afbc <__sfp+0x64>
 800af86:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <__sfp+0x88>)
 800af88:	60e3      	str	r3, [r4, #12]
 800af8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af8e:	6665      	str	r5, [r4, #100]	; 0x64
 800af90:	f000 f86c 	bl	800b06c <__retarget_lock_init_recursive>
 800af94:	f7ff ff96 	bl	800aec4 <__sfp_lock_release>
 800af98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afa0:	6025      	str	r5, [r4, #0]
 800afa2:	61a5      	str	r5, [r4, #24]
 800afa4:	2208      	movs	r2, #8
 800afa6:	4629      	mov	r1, r5
 800afa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afac:	f000 f86f 	bl	800b08e <memset>
 800afb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb8:	4620      	mov	r0, r4
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	3468      	adds	r4, #104	; 0x68
 800afbe:	e7d9      	b.n	800af74 <__sfp+0x1c>
 800afc0:	2104      	movs	r1, #4
 800afc2:	4638      	mov	r0, r7
 800afc4:	f7ff ff62 	bl	800ae8c <__sfmoreglue>
 800afc8:	4604      	mov	r4, r0
 800afca:	6030      	str	r0, [r6, #0]
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1d5      	bne.n	800af7c <__sfp+0x24>
 800afd0:	f7ff ff78 	bl	800aec4 <__sfp_lock_release>
 800afd4:	230c      	movs	r3, #12
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	e7ee      	b.n	800afb8 <__sfp+0x60>
 800afda:	bf00      	nop
 800afdc:	0800e800 	.word	0x0800e800
 800afe0:	ffff0001 	.word	0xffff0001

0800afe4 <_fwalk_reent>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	4606      	mov	r6, r0
 800afea:	4688      	mov	r8, r1
 800afec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aff0:	2700      	movs	r7, #0
 800aff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aff6:	f1b9 0901 	subs.w	r9, r9, #1
 800affa:	d505      	bpl.n	800b008 <_fwalk_reent+0x24>
 800affc:	6824      	ldr	r4, [r4, #0]
 800affe:	2c00      	cmp	r4, #0
 800b000:	d1f7      	bne.n	800aff2 <_fwalk_reent+0xe>
 800b002:	4638      	mov	r0, r7
 800b004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b008:	89ab      	ldrh	r3, [r5, #12]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d907      	bls.n	800b01e <_fwalk_reent+0x3a>
 800b00e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b012:	3301      	adds	r3, #1
 800b014:	d003      	beq.n	800b01e <_fwalk_reent+0x3a>
 800b016:	4629      	mov	r1, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	47c0      	blx	r8
 800b01c:	4307      	orrs	r7, r0
 800b01e:	3568      	adds	r5, #104	; 0x68
 800b020:	e7e9      	b.n	800aff6 <_fwalk_reent+0x12>
	...

0800b024 <__libc_init_array>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	4d0d      	ldr	r5, [pc, #52]	; (800b05c <__libc_init_array+0x38>)
 800b028:	4c0d      	ldr	r4, [pc, #52]	; (800b060 <__libc_init_array+0x3c>)
 800b02a:	1b64      	subs	r4, r4, r5
 800b02c:	10a4      	asrs	r4, r4, #2
 800b02e:	2600      	movs	r6, #0
 800b030:	42a6      	cmp	r6, r4
 800b032:	d109      	bne.n	800b048 <__libc_init_array+0x24>
 800b034:	4d0b      	ldr	r5, [pc, #44]	; (800b064 <__libc_init_array+0x40>)
 800b036:	4c0c      	ldr	r4, [pc, #48]	; (800b068 <__libc_init_array+0x44>)
 800b038:	f003 fad4 	bl	800e5e4 <_init>
 800b03c:	1b64      	subs	r4, r4, r5
 800b03e:	10a4      	asrs	r4, r4, #2
 800b040:	2600      	movs	r6, #0
 800b042:	42a6      	cmp	r6, r4
 800b044:	d105      	bne.n	800b052 <__libc_init_array+0x2e>
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04c:	4798      	blx	r3
 800b04e:	3601      	adds	r6, #1
 800b050:	e7ee      	b.n	800b030 <__libc_init_array+0xc>
 800b052:	f855 3b04 	ldr.w	r3, [r5], #4
 800b056:	4798      	blx	r3
 800b058:	3601      	adds	r6, #1
 800b05a:	e7f2      	b.n	800b042 <__libc_init_array+0x1e>
 800b05c:	0800ed60 	.word	0x0800ed60
 800b060:	0800ed60 	.word	0x0800ed60
 800b064:	0800ed60 	.word	0x0800ed60
 800b068:	0800ed64 	.word	0x0800ed64

0800b06c <__retarget_lock_init_recursive>:
 800b06c:	4770      	bx	lr

0800b06e <__retarget_lock_acquire_recursive>:
 800b06e:	4770      	bx	lr

0800b070 <__retarget_lock_release_recursive>:
 800b070:	4770      	bx	lr

0800b072 <memcpy>:
 800b072:	440a      	add	r2, r1
 800b074:	4291      	cmp	r1, r2
 800b076:	f100 33ff 	add.w	r3, r0, #4294967295
 800b07a:	d100      	bne.n	800b07e <memcpy+0xc>
 800b07c:	4770      	bx	lr
 800b07e:	b510      	push	{r4, lr}
 800b080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b088:	4291      	cmp	r1, r2
 800b08a:	d1f9      	bne.n	800b080 <memcpy+0xe>
 800b08c:	bd10      	pop	{r4, pc}

0800b08e <memset>:
 800b08e:	4402      	add	r2, r0
 800b090:	4603      	mov	r3, r0
 800b092:	4293      	cmp	r3, r2
 800b094:	d100      	bne.n	800b098 <memset+0xa>
 800b096:	4770      	bx	lr
 800b098:	f803 1b01 	strb.w	r1, [r3], #1
 800b09c:	e7f9      	b.n	800b092 <memset+0x4>
	...

0800b0a0 <sbrk_aligned>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	4e0e      	ldr	r6, [pc, #56]	; (800b0dc <sbrk_aligned+0x3c>)
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	6831      	ldr	r1, [r6, #0]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	b911      	cbnz	r1, 800b0b2 <sbrk_aligned+0x12>
 800b0ac:	f000 fdc6 	bl	800bc3c <_sbrk_r>
 800b0b0:	6030      	str	r0, [r6, #0]
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f000 fdc1 	bl	800bc3c <_sbrk_r>
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	d00a      	beq.n	800b0d4 <sbrk_aligned+0x34>
 800b0be:	1cc4      	adds	r4, r0, #3
 800b0c0:	f024 0403 	bic.w	r4, r4, #3
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d007      	beq.n	800b0d8 <sbrk_aligned+0x38>
 800b0c8:	1a21      	subs	r1, r4, r0
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f000 fdb6 	bl	800bc3c <_sbrk_r>
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d101      	bne.n	800b0d8 <sbrk_aligned+0x38>
 800b0d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b0d8:	4620      	mov	r0, r4
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	24004e64 	.word	0x24004e64

0800b0e0 <_malloc_r>:
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	1ccd      	adds	r5, r1, #3
 800b0e6:	f025 0503 	bic.w	r5, r5, #3
 800b0ea:	3508      	adds	r5, #8
 800b0ec:	2d0c      	cmp	r5, #12
 800b0ee:	bf38      	it	cc
 800b0f0:	250c      	movcc	r5, #12
 800b0f2:	2d00      	cmp	r5, #0
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	db01      	blt.n	800b0fc <_malloc_r+0x1c>
 800b0f8:	42a9      	cmp	r1, r5
 800b0fa:	d905      	bls.n	800b108 <_malloc_r+0x28>
 800b0fc:	230c      	movs	r3, #12
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	2600      	movs	r6, #0
 800b102:	4630      	mov	r0, r6
 800b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b108:	4e2e      	ldr	r6, [pc, #184]	; (800b1c4 <_malloc_r+0xe4>)
 800b10a:	f001 fe0d 	bl	800cd28 <__malloc_lock>
 800b10e:	6833      	ldr	r3, [r6, #0]
 800b110:	461c      	mov	r4, r3
 800b112:	bb34      	cbnz	r4, 800b162 <_malloc_r+0x82>
 800b114:	4629      	mov	r1, r5
 800b116:	4638      	mov	r0, r7
 800b118:	f7ff ffc2 	bl	800b0a0 <sbrk_aligned>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	4604      	mov	r4, r0
 800b120:	d14d      	bne.n	800b1be <_malloc_r+0xde>
 800b122:	6834      	ldr	r4, [r6, #0]
 800b124:	4626      	mov	r6, r4
 800b126:	2e00      	cmp	r6, #0
 800b128:	d140      	bne.n	800b1ac <_malloc_r+0xcc>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	4631      	mov	r1, r6
 800b12e:	4638      	mov	r0, r7
 800b130:	eb04 0803 	add.w	r8, r4, r3
 800b134:	f000 fd82 	bl	800bc3c <_sbrk_r>
 800b138:	4580      	cmp	r8, r0
 800b13a:	d13a      	bne.n	800b1b2 <_malloc_r+0xd2>
 800b13c:	6821      	ldr	r1, [r4, #0]
 800b13e:	3503      	adds	r5, #3
 800b140:	1a6d      	subs	r5, r5, r1
 800b142:	f025 0503 	bic.w	r5, r5, #3
 800b146:	3508      	adds	r5, #8
 800b148:	2d0c      	cmp	r5, #12
 800b14a:	bf38      	it	cc
 800b14c:	250c      	movcc	r5, #12
 800b14e:	4629      	mov	r1, r5
 800b150:	4638      	mov	r0, r7
 800b152:	f7ff ffa5 	bl	800b0a0 <sbrk_aligned>
 800b156:	3001      	adds	r0, #1
 800b158:	d02b      	beq.n	800b1b2 <_malloc_r+0xd2>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	442b      	add	r3, r5
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	e00e      	b.n	800b180 <_malloc_r+0xa0>
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	1b52      	subs	r2, r2, r5
 800b166:	d41e      	bmi.n	800b1a6 <_malloc_r+0xc6>
 800b168:	2a0b      	cmp	r2, #11
 800b16a:	d916      	bls.n	800b19a <_malloc_r+0xba>
 800b16c:	1961      	adds	r1, r4, r5
 800b16e:	42a3      	cmp	r3, r4
 800b170:	6025      	str	r5, [r4, #0]
 800b172:	bf18      	it	ne
 800b174:	6059      	strne	r1, [r3, #4]
 800b176:	6863      	ldr	r3, [r4, #4]
 800b178:	bf08      	it	eq
 800b17a:	6031      	streq	r1, [r6, #0]
 800b17c:	5162      	str	r2, [r4, r5]
 800b17e:	604b      	str	r3, [r1, #4]
 800b180:	4638      	mov	r0, r7
 800b182:	f104 060b 	add.w	r6, r4, #11
 800b186:	f001 fdd5 	bl	800cd34 <__malloc_unlock>
 800b18a:	f026 0607 	bic.w	r6, r6, #7
 800b18e:	1d23      	adds	r3, r4, #4
 800b190:	1af2      	subs	r2, r6, r3
 800b192:	d0b6      	beq.n	800b102 <_malloc_r+0x22>
 800b194:	1b9b      	subs	r3, r3, r6
 800b196:	50a3      	str	r3, [r4, r2]
 800b198:	e7b3      	b.n	800b102 <_malloc_r+0x22>
 800b19a:	6862      	ldr	r2, [r4, #4]
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	bf0c      	ite	eq
 800b1a0:	6032      	streq	r2, [r6, #0]
 800b1a2:	605a      	strne	r2, [r3, #4]
 800b1a4:	e7ec      	b.n	800b180 <_malloc_r+0xa0>
 800b1a6:	4623      	mov	r3, r4
 800b1a8:	6864      	ldr	r4, [r4, #4]
 800b1aa:	e7b2      	b.n	800b112 <_malloc_r+0x32>
 800b1ac:	4634      	mov	r4, r6
 800b1ae:	6876      	ldr	r6, [r6, #4]
 800b1b0:	e7b9      	b.n	800b126 <_malloc_r+0x46>
 800b1b2:	230c      	movs	r3, #12
 800b1b4:	603b      	str	r3, [r7, #0]
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f001 fdbc 	bl	800cd34 <__malloc_unlock>
 800b1bc:	e7a1      	b.n	800b102 <_malloc_r+0x22>
 800b1be:	6025      	str	r5, [r4, #0]
 800b1c0:	e7de      	b.n	800b180 <_malloc_r+0xa0>
 800b1c2:	bf00      	nop
 800b1c4:	24004e60 	.word	0x24004e60

0800b1c8 <__cvt>:
 800b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ca:	ed2d 8b02 	vpush	{d8}
 800b1ce:	eeb0 8b40 	vmov.f64	d8, d0
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	4617      	mov	r7, r2
 800b1d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b1d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b1da:	ee18 2a90 	vmov	r2, s17
 800b1de:	f025 0520 	bic.w	r5, r5, #32
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	bfb6      	itet	lt
 800b1e6:	222d      	movlt	r2, #45	; 0x2d
 800b1e8:	2200      	movge	r2, #0
 800b1ea:	eeb1 8b40 	vneglt.f64	d8, d0
 800b1ee:	2d46      	cmp	r5, #70	; 0x46
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	701a      	strb	r2, [r3, #0]
 800b1f4:	d004      	beq.n	800b200 <__cvt+0x38>
 800b1f6:	2d45      	cmp	r5, #69	; 0x45
 800b1f8:	d100      	bne.n	800b1fc <__cvt+0x34>
 800b1fa:	3401      	adds	r4, #1
 800b1fc:	2102      	movs	r1, #2
 800b1fe:	e000      	b.n	800b202 <__cvt+0x3a>
 800b200:	2103      	movs	r1, #3
 800b202:	ab03      	add	r3, sp, #12
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	ab02      	add	r3, sp, #8
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	4622      	mov	r2, r4
 800b20c:	4633      	mov	r3, r6
 800b20e:	eeb0 0b48 	vmov.f64	d0, d8
 800b212:	f000 fed5 	bl	800bfc0 <_dtoa_r>
 800b216:	2d47      	cmp	r5, #71	; 0x47
 800b218:	d101      	bne.n	800b21e <__cvt+0x56>
 800b21a:	07fb      	lsls	r3, r7, #31
 800b21c:	d51a      	bpl.n	800b254 <__cvt+0x8c>
 800b21e:	2d46      	cmp	r5, #70	; 0x46
 800b220:	eb00 0204 	add.w	r2, r0, r4
 800b224:	d10c      	bne.n	800b240 <__cvt+0x78>
 800b226:	7803      	ldrb	r3, [r0, #0]
 800b228:	2b30      	cmp	r3, #48	; 0x30
 800b22a:	d107      	bne.n	800b23c <__cvt+0x74>
 800b22c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	bf1c      	itt	ne
 800b236:	f1c4 0401 	rsbne	r4, r4, #1
 800b23a:	6034      	strne	r4, [r6, #0]
 800b23c:	6833      	ldr	r3, [r6, #0]
 800b23e:	441a      	add	r2, r3
 800b240:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b248:	bf08      	it	eq
 800b24a:	9203      	streq	r2, [sp, #12]
 800b24c:	2130      	movs	r1, #48	; 0x30
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	4293      	cmp	r3, r2
 800b252:	d307      	bcc.n	800b264 <__cvt+0x9c>
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b258:	1a1b      	subs	r3, r3, r0
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	b005      	add	sp, #20
 800b25e:	ecbd 8b02 	vpop	{d8}
 800b262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b264:	1c5c      	adds	r4, r3, #1
 800b266:	9403      	str	r4, [sp, #12]
 800b268:	7019      	strb	r1, [r3, #0]
 800b26a:	e7f0      	b.n	800b24e <__cvt+0x86>

0800b26c <__exponent>:
 800b26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b26e:	4603      	mov	r3, r0
 800b270:	2900      	cmp	r1, #0
 800b272:	bfb8      	it	lt
 800b274:	4249      	neglt	r1, r1
 800b276:	f803 2b02 	strb.w	r2, [r3], #2
 800b27a:	bfb4      	ite	lt
 800b27c:	222d      	movlt	r2, #45	; 0x2d
 800b27e:	222b      	movge	r2, #43	; 0x2b
 800b280:	2909      	cmp	r1, #9
 800b282:	7042      	strb	r2, [r0, #1]
 800b284:	dd2a      	ble.n	800b2dc <__exponent+0x70>
 800b286:	f10d 0407 	add.w	r4, sp, #7
 800b28a:	46a4      	mov	ip, r4
 800b28c:	270a      	movs	r7, #10
 800b28e:	46a6      	mov	lr, r4
 800b290:	460a      	mov	r2, r1
 800b292:	fb91 f6f7 	sdiv	r6, r1, r7
 800b296:	fb07 1516 	mls	r5, r7, r6, r1
 800b29a:	3530      	adds	r5, #48	; 0x30
 800b29c:	2a63      	cmp	r2, #99	; 0x63
 800b29e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	dcf1      	bgt.n	800b28e <__exponent+0x22>
 800b2aa:	3130      	adds	r1, #48	; 0x30
 800b2ac:	f1ae 0502 	sub.w	r5, lr, #2
 800b2b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2b4:	1c44      	adds	r4, r0, #1
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4561      	cmp	r1, ip
 800b2ba:	d30a      	bcc.n	800b2d2 <__exponent+0x66>
 800b2bc:	f10d 0209 	add.w	r2, sp, #9
 800b2c0:	eba2 020e 	sub.w	r2, r2, lr
 800b2c4:	4565      	cmp	r5, ip
 800b2c6:	bf88      	it	hi
 800b2c8:	2200      	movhi	r2, #0
 800b2ca:	4413      	add	r3, r2
 800b2cc:	1a18      	subs	r0, r3, r0
 800b2ce:	b003      	add	sp, #12
 800b2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b2da:	e7ed      	b.n	800b2b8 <__exponent+0x4c>
 800b2dc:	2330      	movs	r3, #48	; 0x30
 800b2de:	3130      	adds	r1, #48	; 0x30
 800b2e0:	7083      	strb	r3, [r0, #2]
 800b2e2:	70c1      	strb	r1, [r0, #3]
 800b2e4:	1d03      	adds	r3, r0, #4
 800b2e6:	e7f1      	b.n	800b2cc <__exponent+0x60>

0800b2e8 <_printf_float>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	b08b      	sub	sp, #44	; 0x2c
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b2f4:	4616      	mov	r6, r2
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	f001 fc91 	bl	800cc20 <_localeconv_r>
 800b2fe:	f8d0 b000 	ldr.w	fp, [r0]
 800b302:	4658      	mov	r0, fp
 800b304:	f7f4 ffec 	bl	80002e0 <strlen>
 800b308:	2300      	movs	r3, #0
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	f8d8 3000 	ldr.w	r3, [r8]
 800b310:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b314:	6822      	ldr	r2, [r4, #0]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	f103 0108 	add.w	r1, r3, #8
 800b320:	f8c8 1000 	str.w	r1, [r8]
 800b324:	4682      	mov	sl, r0
 800b326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b32a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b32e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b590 <_printf_float+0x2a8>
 800b332:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b336:	eeb0 6bc0 	vabs.f64	d6, d0
 800b33a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b342:	dd24      	ble.n	800b38e <_printf_float+0xa6>
 800b344:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34c:	d502      	bpl.n	800b354 <_printf_float+0x6c>
 800b34e:	232d      	movs	r3, #45	; 0x2d
 800b350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b354:	4b90      	ldr	r3, [pc, #576]	; (800b598 <_printf_float+0x2b0>)
 800b356:	4891      	ldr	r0, [pc, #580]	; (800b59c <_printf_float+0x2b4>)
 800b358:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b35c:	bf94      	ite	ls
 800b35e:	4698      	movls	r8, r3
 800b360:	4680      	movhi	r8, r0
 800b362:	2303      	movs	r3, #3
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	f022 0204 	bic.w	r2, r2, #4
 800b36a:	2300      	movs	r3, #0
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	9304      	str	r3, [sp, #16]
 800b370:	9700      	str	r7, [sp, #0]
 800b372:	4633      	mov	r3, r6
 800b374:	aa09      	add	r2, sp, #36	; 0x24
 800b376:	4621      	mov	r1, r4
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 f9d3 	bl	800b724 <_printf_common>
 800b37e:	3001      	adds	r0, #1
 800b380:	f040 808a 	bne.w	800b498 <_printf_float+0x1b0>
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	b00b      	add	sp, #44	; 0x2c
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b396:	d709      	bvc.n	800b3ac <_printf_float+0xc4>
 800b398:	ee10 3a90 	vmov	r3, s1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfbc      	itt	lt
 800b3a0:	232d      	movlt	r3, #45	; 0x2d
 800b3a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3a6:	487e      	ldr	r0, [pc, #504]	; (800b5a0 <_printf_float+0x2b8>)
 800b3a8:	4b7e      	ldr	r3, [pc, #504]	; (800b5a4 <_printf_float+0x2bc>)
 800b3aa:	e7d5      	b.n	800b358 <_printf_float+0x70>
 800b3ac:	6863      	ldr	r3, [r4, #4]
 800b3ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b3b2:	9104      	str	r1, [sp, #16]
 800b3b4:	1c59      	adds	r1, r3, #1
 800b3b6:	d13c      	bne.n	800b432 <_printf_float+0x14a>
 800b3b8:	2306      	movs	r3, #6
 800b3ba:	6063      	str	r3, [r4, #4]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	ab08      	add	r3, sp, #32
 800b3c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b3c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b3ca:	ab07      	add	r3, sp, #28
 800b3cc:	6861      	ldr	r1, [r4, #4]
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	6022      	str	r2, [r4, #0]
 800b3d2:	f10d 031b 	add.w	r3, sp, #27
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7ff fef6 	bl	800b1c8 <__cvt>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	9907      	ldr	r1, [sp, #28]
 800b3e0:	2b47      	cmp	r3, #71	; 0x47
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	d108      	bne.n	800b3f8 <_printf_float+0x110>
 800b3e6:	1cc8      	adds	r0, r1, #3
 800b3e8:	db02      	blt.n	800b3f0 <_printf_float+0x108>
 800b3ea:	6863      	ldr	r3, [r4, #4]
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	dd41      	ble.n	800b474 <_printf_float+0x18c>
 800b3f0:	f1a9 0902 	sub.w	r9, r9, #2
 800b3f4:	fa5f f989 	uxtb.w	r9, r9
 800b3f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b3fc:	d820      	bhi.n	800b440 <_printf_float+0x158>
 800b3fe:	3901      	subs	r1, #1
 800b400:	464a      	mov	r2, r9
 800b402:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b406:	9107      	str	r1, [sp, #28]
 800b408:	f7ff ff30 	bl	800b26c <__exponent>
 800b40c:	9a08      	ldr	r2, [sp, #32]
 800b40e:	9004      	str	r0, [sp, #16]
 800b410:	1813      	adds	r3, r2, r0
 800b412:	2a01      	cmp	r2, #1
 800b414:	6123      	str	r3, [r4, #16]
 800b416:	dc02      	bgt.n	800b41e <_printf_float+0x136>
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	07d2      	lsls	r2, r2, #31
 800b41c:	d501      	bpl.n	800b422 <_printf_float+0x13a>
 800b41e:	3301      	adds	r3, #1
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0a2      	beq.n	800b370 <_printf_float+0x88>
 800b42a:	232d      	movs	r3, #45	; 0x2d
 800b42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b430:	e79e      	b.n	800b370 <_printf_float+0x88>
 800b432:	9904      	ldr	r1, [sp, #16]
 800b434:	2947      	cmp	r1, #71	; 0x47
 800b436:	d1c1      	bne.n	800b3bc <_printf_float+0xd4>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1bf      	bne.n	800b3bc <_printf_float+0xd4>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e7bc      	b.n	800b3ba <_printf_float+0xd2>
 800b440:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b444:	d118      	bne.n	800b478 <_printf_float+0x190>
 800b446:	2900      	cmp	r1, #0
 800b448:	6863      	ldr	r3, [r4, #4]
 800b44a:	dd0b      	ble.n	800b464 <_printf_float+0x17c>
 800b44c:	6121      	str	r1, [r4, #16]
 800b44e:	b913      	cbnz	r3, 800b456 <_printf_float+0x16e>
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	07d0      	lsls	r0, r2, #31
 800b454:	d502      	bpl.n	800b45c <_printf_float+0x174>
 800b456:	3301      	adds	r3, #1
 800b458:	440b      	add	r3, r1
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	2300      	movs	r3, #0
 800b45e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b460:	9304      	str	r3, [sp, #16]
 800b462:	e7de      	b.n	800b422 <_printf_float+0x13a>
 800b464:	b913      	cbnz	r3, 800b46c <_printf_float+0x184>
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	07d2      	lsls	r2, r2, #31
 800b46a:	d501      	bpl.n	800b470 <_printf_float+0x188>
 800b46c:	3302      	adds	r3, #2
 800b46e:	e7f4      	b.n	800b45a <_printf_float+0x172>
 800b470:	2301      	movs	r3, #1
 800b472:	e7f2      	b.n	800b45a <_printf_float+0x172>
 800b474:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b478:	9b08      	ldr	r3, [sp, #32]
 800b47a:	4299      	cmp	r1, r3
 800b47c:	db05      	blt.n	800b48a <_printf_float+0x1a2>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	6121      	str	r1, [r4, #16]
 800b482:	07d8      	lsls	r0, r3, #31
 800b484:	d5ea      	bpl.n	800b45c <_printf_float+0x174>
 800b486:	1c4b      	adds	r3, r1, #1
 800b488:	e7e7      	b.n	800b45a <_printf_float+0x172>
 800b48a:	2900      	cmp	r1, #0
 800b48c:	bfd4      	ite	le
 800b48e:	f1c1 0202 	rsble	r2, r1, #2
 800b492:	2201      	movgt	r2, #1
 800b494:	4413      	add	r3, r2
 800b496:	e7e0      	b.n	800b45a <_printf_float+0x172>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	055a      	lsls	r2, r3, #21
 800b49c:	d407      	bmi.n	800b4ae <_printf_float+0x1c6>
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d12a      	bne.n	800b502 <_printf_float+0x21a>
 800b4ac:	e76a      	b.n	800b384 <_printf_float+0x9c>
 800b4ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b4b2:	f240 80e2 	bls.w	800b67a <_printf_float+0x392>
 800b4b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b4ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c2:	d133      	bne.n	800b52c <_printf_float+0x244>
 800b4c4:	4a38      	ldr	r2, [pc, #224]	; (800b5a8 <_printf_float+0x2c0>)
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af58 	beq.w	800b384 <_printf_float+0x9c>
 800b4d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	db02      	blt.n	800b4e2 <_printf_float+0x1fa>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	07d8      	lsls	r0, r3, #31
 800b4e0:	d50f      	bpl.n	800b502 <_printf_float+0x21a>
 800b4e2:	4653      	mov	r3, sl
 800b4e4:	465a      	mov	r2, fp
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f af49 	beq.w	800b384 <_printf_float+0x9c>
 800b4f2:	f04f 0800 	mov.w	r8, #0
 800b4f6:	f104 091a 	add.w	r9, r4, #26
 800b4fa:	9b08      	ldr	r3, [sp, #32]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	4543      	cmp	r3, r8
 800b500:	dc09      	bgt.n	800b516 <_printf_float+0x22e>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	079b      	lsls	r3, r3, #30
 800b506:	f100 8108 	bmi.w	800b71a <_printf_float+0x432>
 800b50a:	68e0      	ldr	r0, [r4, #12]
 800b50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50e:	4298      	cmp	r0, r3
 800b510:	bfb8      	it	lt
 800b512:	4618      	movlt	r0, r3
 800b514:	e738      	b.n	800b388 <_printf_float+0xa0>
 800b516:	2301      	movs	r3, #1
 800b518:	464a      	mov	r2, r9
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	f43f af2f 	beq.w	800b384 <_printf_float+0x9c>
 800b526:	f108 0801 	add.w	r8, r8, #1
 800b52a:	e7e6      	b.n	800b4fa <_printf_float+0x212>
 800b52c:	9b07      	ldr	r3, [sp, #28]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dc3c      	bgt.n	800b5ac <_printf_float+0x2c4>
 800b532:	4a1d      	ldr	r2, [pc, #116]	; (800b5a8 <_printf_float+0x2c0>)
 800b534:	2301      	movs	r3, #1
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f af21 	beq.w	800b384 <_printf_float+0x9c>
 800b542:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b546:	4313      	orrs	r3, r2
 800b548:	d102      	bne.n	800b550 <_printf_float+0x268>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	07d9      	lsls	r1, r3, #31
 800b54e:	d5d8      	bpl.n	800b502 <_printf_float+0x21a>
 800b550:	4653      	mov	r3, sl
 800b552:	465a      	mov	r2, fp
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f af12 	beq.w	800b384 <_printf_float+0x9c>
 800b560:	f04f 0900 	mov.w	r9, #0
 800b564:	f104 0a1a 	add.w	sl, r4, #26
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	425b      	negs	r3, r3
 800b56c:	454b      	cmp	r3, r9
 800b56e:	dc01      	bgt.n	800b574 <_printf_float+0x28c>
 800b570:	9b08      	ldr	r3, [sp, #32]
 800b572:	e795      	b.n	800b4a0 <_printf_float+0x1b8>
 800b574:	2301      	movs	r3, #1
 800b576:	4652      	mov	r2, sl
 800b578:	4631      	mov	r1, r6
 800b57a:	4628      	mov	r0, r5
 800b57c:	47b8      	blx	r7
 800b57e:	3001      	adds	r0, #1
 800b580:	f43f af00 	beq.w	800b384 <_printf_float+0x9c>
 800b584:	f109 0901 	add.w	r9, r9, #1
 800b588:	e7ee      	b.n	800b568 <_printf_float+0x280>
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w
 800b590:	ffffffff 	.word	0xffffffff
 800b594:	7fefffff 	.word	0x7fefffff
 800b598:	0800e804 	.word	0x0800e804
 800b59c:	0800e808 	.word	0x0800e808
 800b5a0:	0800e810 	.word	0x0800e810
 800b5a4:	0800e80c 	.word	0x0800e80c
 800b5a8:	0800e814 	.word	0x0800e814
 800b5ac:	9a08      	ldr	r2, [sp, #32]
 800b5ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	bfa8      	it	ge
 800b5b4:	461a      	movge	r2, r3
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	4691      	mov	r9, r2
 800b5ba:	dc38      	bgt.n	800b62e <_printf_float+0x346>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5c4:	f104 021a 	add.w	r2, r4, #26
 800b5c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5ca:	9905      	ldr	r1, [sp, #20]
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	eba3 0309 	sub.w	r3, r3, r9
 800b5d2:	428b      	cmp	r3, r1
 800b5d4:	dc33      	bgt.n	800b63e <_printf_float+0x356>
 800b5d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	db3c      	blt.n	800b658 <_printf_float+0x370>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	07da      	lsls	r2, r3, #31
 800b5e2:	d439      	bmi.n	800b658 <_printf_float+0x370>
 800b5e4:	9b08      	ldr	r3, [sp, #32]
 800b5e6:	9a04      	ldr	r2, [sp, #16]
 800b5e8:	9907      	ldr	r1, [sp, #28]
 800b5ea:	1a9a      	subs	r2, r3, r2
 800b5ec:	eba3 0901 	sub.w	r9, r3, r1
 800b5f0:	4591      	cmp	r9, r2
 800b5f2:	bfa8      	it	ge
 800b5f4:	4691      	movge	r9, r2
 800b5f6:	f1b9 0f00 	cmp.w	r9, #0
 800b5fa:	dc35      	bgt.n	800b668 <_printf_float+0x380>
 800b5fc:	f04f 0800 	mov.w	r8, #0
 800b600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b604:	f104 0a1a 	add.w	sl, r4, #26
 800b608:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	eba3 0309 	sub.w	r3, r3, r9
 800b612:	4543      	cmp	r3, r8
 800b614:	f77f af75 	ble.w	800b502 <_printf_float+0x21a>
 800b618:	2301      	movs	r3, #1
 800b61a:	4652      	mov	r2, sl
 800b61c:	4631      	mov	r1, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	47b8      	blx	r7
 800b622:	3001      	adds	r0, #1
 800b624:	f43f aeae 	beq.w	800b384 <_printf_float+0x9c>
 800b628:	f108 0801 	add.w	r8, r8, #1
 800b62c:	e7ec      	b.n	800b608 <_printf_float+0x320>
 800b62e:	4613      	mov	r3, r2
 800b630:	4631      	mov	r1, r6
 800b632:	4642      	mov	r2, r8
 800b634:	4628      	mov	r0, r5
 800b636:	47b8      	blx	r7
 800b638:	3001      	adds	r0, #1
 800b63a:	d1bf      	bne.n	800b5bc <_printf_float+0x2d4>
 800b63c:	e6a2      	b.n	800b384 <_printf_float+0x9c>
 800b63e:	2301      	movs	r3, #1
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	9204      	str	r2, [sp, #16]
 800b646:	47b8      	blx	r7
 800b648:	3001      	adds	r0, #1
 800b64a:	f43f ae9b 	beq.w	800b384 <_printf_float+0x9c>
 800b64e:	9b05      	ldr	r3, [sp, #20]
 800b650:	9a04      	ldr	r2, [sp, #16]
 800b652:	3301      	adds	r3, #1
 800b654:	9305      	str	r3, [sp, #20]
 800b656:	e7b7      	b.n	800b5c8 <_printf_float+0x2e0>
 800b658:	4653      	mov	r3, sl
 800b65a:	465a      	mov	r2, fp
 800b65c:	4631      	mov	r1, r6
 800b65e:	4628      	mov	r0, r5
 800b660:	47b8      	blx	r7
 800b662:	3001      	adds	r0, #1
 800b664:	d1be      	bne.n	800b5e4 <_printf_float+0x2fc>
 800b666:	e68d      	b.n	800b384 <_printf_float+0x9c>
 800b668:	9a04      	ldr	r2, [sp, #16]
 800b66a:	464b      	mov	r3, r9
 800b66c:	4442      	add	r2, r8
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	d1c1      	bne.n	800b5fc <_printf_float+0x314>
 800b678:	e684      	b.n	800b384 <_printf_float+0x9c>
 800b67a:	9a08      	ldr	r2, [sp, #32]
 800b67c:	2a01      	cmp	r2, #1
 800b67e:	dc01      	bgt.n	800b684 <_printf_float+0x39c>
 800b680:	07db      	lsls	r3, r3, #31
 800b682:	d537      	bpl.n	800b6f4 <_printf_float+0x40c>
 800b684:	2301      	movs	r3, #1
 800b686:	4642      	mov	r2, r8
 800b688:	4631      	mov	r1, r6
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	f43f ae78 	beq.w	800b384 <_printf_float+0x9c>
 800b694:	4653      	mov	r3, sl
 800b696:	465a      	mov	r2, fp
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f43f ae70 	beq.w	800b384 <_printf_float+0x9c>
 800b6a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b6a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	d01b      	beq.n	800b6ea <_printf_float+0x402>
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	f108 0201 	add.w	r2, r8, #1
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d10e      	bne.n	800b6e2 <_printf_float+0x3fa>
 800b6c4:	e65e      	b.n	800b384 <_printf_float+0x9c>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	464a      	mov	r2, r9
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f ae57 	beq.w	800b384 <_printf_float+0x9c>
 800b6d6:	f108 0801 	add.w	r8, r8, #1
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4543      	cmp	r3, r8
 800b6e0:	dcf1      	bgt.n	800b6c6 <_printf_float+0x3de>
 800b6e2:	9b04      	ldr	r3, [sp, #16]
 800b6e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6e8:	e6db      	b.n	800b4a2 <_printf_float+0x1ba>
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	f104 091a 	add.w	r9, r4, #26
 800b6f2:	e7f2      	b.n	800b6da <_printf_float+0x3f2>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	4642      	mov	r2, r8
 800b6f8:	e7df      	b.n	800b6ba <_printf_float+0x3d2>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	464a      	mov	r2, r9
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae3d 	beq.w	800b384 <_printf_float+0x9c>
 800b70a:	f108 0801 	add.w	r8, r8, #1
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b712:	1a5b      	subs	r3, r3, r1
 800b714:	4543      	cmp	r3, r8
 800b716:	dcf0      	bgt.n	800b6fa <_printf_float+0x412>
 800b718:	e6f7      	b.n	800b50a <_printf_float+0x222>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	f104 0919 	add.w	r9, r4, #25
 800b722:	e7f4      	b.n	800b70e <_printf_float+0x426>

0800b724 <_printf_common>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	4616      	mov	r6, r2
 800b72a:	4699      	mov	r9, r3
 800b72c:	688a      	ldr	r2, [r1, #8]
 800b72e:	690b      	ldr	r3, [r1, #16]
 800b730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b734:	4293      	cmp	r3, r2
 800b736:	bfb8      	it	lt
 800b738:	4613      	movlt	r3, r2
 800b73a:	6033      	str	r3, [r6, #0]
 800b73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b740:	4607      	mov	r7, r0
 800b742:	460c      	mov	r4, r1
 800b744:	b10a      	cbz	r2, 800b74a <_printf_common+0x26>
 800b746:	3301      	adds	r3, #1
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	0699      	lsls	r1, r3, #26
 800b74e:	bf42      	ittt	mi
 800b750:	6833      	ldrmi	r3, [r6, #0]
 800b752:	3302      	addmi	r3, #2
 800b754:	6033      	strmi	r3, [r6, #0]
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	f015 0506 	ands.w	r5, r5, #6
 800b75c:	d106      	bne.n	800b76c <_printf_common+0x48>
 800b75e:	f104 0a19 	add.w	sl, r4, #25
 800b762:	68e3      	ldr	r3, [r4, #12]
 800b764:	6832      	ldr	r2, [r6, #0]
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	42ab      	cmp	r3, r5
 800b76a:	dc26      	bgt.n	800b7ba <_printf_common+0x96>
 800b76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b770:	1e13      	subs	r3, r2, #0
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	bf18      	it	ne
 800b776:	2301      	movne	r3, #1
 800b778:	0692      	lsls	r2, r2, #26
 800b77a:	d42b      	bmi.n	800b7d4 <_printf_common+0xb0>
 800b77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b780:	4649      	mov	r1, r9
 800b782:	4638      	mov	r0, r7
 800b784:	47c0      	blx	r8
 800b786:	3001      	adds	r0, #1
 800b788:	d01e      	beq.n	800b7c8 <_printf_common+0xa4>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	68e5      	ldr	r5, [r4, #12]
 800b78e:	6832      	ldr	r2, [r6, #0]
 800b790:	f003 0306 	and.w	r3, r3, #6
 800b794:	2b04      	cmp	r3, #4
 800b796:	bf08      	it	eq
 800b798:	1aad      	subeq	r5, r5, r2
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	6922      	ldr	r2, [r4, #16]
 800b79e:	bf0c      	ite	eq
 800b7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7a4:	2500      	movne	r5, #0
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	bfc4      	itt	gt
 800b7aa:	1a9b      	subgt	r3, r3, r2
 800b7ac:	18ed      	addgt	r5, r5, r3
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	341a      	adds	r4, #26
 800b7b2:	42b5      	cmp	r5, r6
 800b7b4:	d11a      	bne.n	800b7ec <_printf_common+0xc8>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e008      	b.n	800b7cc <_printf_common+0xa8>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4652      	mov	r2, sl
 800b7be:	4649      	mov	r1, r9
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	47c0      	blx	r8
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d103      	bne.n	800b7d0 <_printf_common+0xac>
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d0:	3501      	adds	r5, #1
 800b7d2:	e7c6      	b.n	800b762 <_printf_common+0x3e>
 800b7d4:	18e1      	adds	r1, r4, r3
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	2030      	movs	r0, #48	; 0x30
 800b7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7de:	4422      	add	r2, r4
 800b7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7e8:	3302      	adds	r3, #2
 800b7ea:	e7c7      	b.n	800b77c <_printf_common+0x58>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	47c0      	blx	r8
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d0e6      	beq.n	800b7c8 <_printf_common+0xa4>
 800b7fa:	3601      	adds	r6, #1
 800b7fc:	e7d9      	b.n	800b7b2 <_printf_common+0x8e>
	...

0800b800 <_printf_i>:
 800b800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b804:	7e0f      	ldrb	r7, [r1, #24]
 800b806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b808:	2f78      	cmp	r7, #120	; 0x78
 800b80a:	4691      	mov	r9, r2
 800b80c:	4680      	mov	r8, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	469a      	mov	sl, r3
 800b812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b816:	d807      	bhi.n	800b828 <_printf_i+0x28>
 800b818:	2f62      	cmp	r7, #98	; 0x62
 800b81a:	d80a      	bhi.n	800b832 <_printf_i+0x32>
 800b81c:	2f00      	cmp	r7, #0
 800b81e:	f000 80d8 	beq.w	800b9d2 <_printf_i+0x1d2>
 800b822:	2f58      	cmp	r7, #88	; 0x58
 800b824:	f000 80a3 	beq.w	800b96e <_printf_i+0x16e>
 800b828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b830:	e03a      	b.n	800b8a8 <_printf_i+0xa8>
 800b832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b836:	2b15      	cmp	r3, #21
 800b838:	d8f6      	bhi.n	800b828 <_printf_i+0x28>
 800b83a:	a101      	add	r1, pc, #4	; (adr r1, 800b840 <_printf_i+0x40>)
 800b83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b840:	0800b899 	.word	0x0800b899
 800b844:	0800b8ad 	.word	0x0800b8ad
 800b848:	0800b829 	.word	0x0800b829
 800b84c:	0800b829 	.word	0x0800b829
 800b850:	0800b829 	.word	0x0800b829
 800b854:	0800b829 	.word	0x0800b829
 800b858:	0800b8ad 	.word	0x0800b8ad
 800b85c:	0800b829 	.word	0x0800b829
 800b860:	0800b829 	.word	0x0800b829
 800b864:	0800b829 	.word	0x0800b829
 800b868:	0800b829 	.word	0x0800b829
 800b86c:	0800b9b9 	.word	0x0800b9b9
 800b870:	0800b8dd 	.word	0x0800b8dd
 800b874:	0800b99b 	.word	0x0800b99b
 800b878:	0800b829 	.word	0x0800b829
 800b87c:	0800b829 	.word	0x0800b829
 800b880:	0800b9db 	.word	0x0800b9db
 800b884:	0800b829 	.word	0x0800b829
 800b888:	0800b8dd 	.word	0x0800b8dd
 800b88c:	0800b829 	.word	0x0800b829
 800b890:	0800b829 	.word	0x0800b829
 800b894:	0800b9a3 	.word	0x0800b9a3
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	1d1a      	adds	r2, r3, #4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	602a      	str	r2, [r5, #0]
 800b8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e0a3      	b.n	800b9f4 <_printf_i+0x1f4>
 800b8ac:	6820      	ldr	r0, [r4, #0]
 800b8ae:	6829      	ldr	r1, [r5, #0]
 800b8b0:	0606      	lsls	r6, r0, #24
 800b8b2:	f101 0304 	add.w	r3, r1, #4
 800b8b6:	d50a      	bpl.n	800b8ce <_printf_i+0xce>
 800b8b8:	680e      	ldr	r6, [r1, #0]
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	da03      	bge.n	800b8c8 <_printf_i+0xc8>
 800b8c0:	232d      	movs	r3, #45	; 0x2d
 800b8c2:	4276      	negs	r6, r6
 800b8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c8:	485e      	ldr	r0, [pc, #376]	; (800ba44 <_printf_i+0x244>)
 800b8ca:	230a      	movs	r3, #10
 800b8cc:	e019      	b.n	800b902 <_printf_i+0x102>
 800b8ce:	680e      	ldr	r6, [r1, #0]
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8d6:	bf18      	it	ne
 800b8d8:	b236      	sxthne	r6, r6
 800b8da:	e7ef      	b.n	800b8bc <_printf_i+0xbc>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	6820      	ldr	r0, [r4, #0]
 800b8e0:	1d19      	adds	r1, r3, #4
 800b8e2:	6029      	str	r1, [r5, #0]
 800b8e4:	0601      	lsls	r1, r0, #24
 800b8e6:	d501      	bpl.n	800b8ec <_printf_i+0xec>
 800b8e8:	681e      	ldr	r6, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <_printf_i+0xf2>
 800b8ec:	0646      	lsls	r6, r0, #25
 800b8ee:	d5fb      	bpl.n	800b8e8 <_printf_i+0xe8>
 800b8f0:	881e      	ldrh	r6, [r3, #0]
 800b8f2:	4854      	ldr	r0, [pc, #336]	; (800ba44 <_printf_i+0x244>)
 800b8f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b8f6:	bf0c      	ite	eq
 800b8f8:	2308      	moveq	r3, #8
 800b8fa:	230a      	movne	r3, #10
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b902:	6865      	ldr	r5, [r4, #4]
 800b904:	60a5      	str	r5, [r4, #8]
 800b906:	2d00      	cmp	r5, #0
 800b908:	bfa2      	ittt	ge
 800b90a:	6821      	ldrge	r1, [r4, #0]
 800b90c:	f021 0104 	bicge.w	r1, r1, #4
 800b910:	6021      	strge	r1, [r4, #0]
 800b912:	b90e      	cbnz	r6, 800b918 <_printf_i+0x118>
 800b914:	2d00      	cmp	r5, #0
 800b916:	d04d      	beq.n	800b9b4 <_printf_i+0x1b4>
 800b918:	4615      	mov	r5, r2
 800b91a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b91e:	fb03 6711 	mls	r7, r3, r1, r6
 800b922:	5dc7      	ldrb	r7, [r0, r7]
 800b924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b928:	4637      	mov	r7, r6
 800b92a:	42bb      	cmp	r3, r7
 800b92c:	460e      	mov	r6, r1
 800b92e:	d9f4      	bls.n	800b91a <_printf_i+0x11a>
 800b930:	2b08      	cmp	r3, #8
 800b932:	d10b      	bne.n	800b94c <_printf_i+0x14c>
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	07de      	lsls	r6, r3, #31
 800b938:	d508      	bpl.n	800b94c <_printf_i+0x14c>
 800b93a:	6923      	ldr	r3, [r4, #16]
 800b93c:	6861      	ldr	r1, [r4, #4]
 800b93e:	4299      	cmp	r1, r3
 800b940:	bfde      	ittt	le
 800b942:	2330      	movle	r3, #48	; 0x30
 800b944:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b94c:	1b52      	subs	r2, r2, r5
 800b94e:	6122      	str	r2, [r4, #16]
 800b950:	f8cd a000 	str.w	sl, [sp]
 800b954:	464b      	mov	r3, r9
 800b956:	aa03      	add	r2, sp, #12
 800b958:	4621      	mov	r1, r4
 800b95a:	4640      	mov	r0, r8
 800b95c:	f7ff fee2 	bl	800b724 <_printf_common>
 800b960:	3001      	adds	r0, #1
 800b962:	d14c      	bne.n	800b9fe <_printf_i+0x1fe>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	b004      	add	sp, #16
 800b96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96e:	4835      	ldr	r0, [pc, #212]	; (800ba44 <_printf_i+0x244>)
 800b970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b974:	6829      	ldr	r1, [r5, #0]
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	f851 6b04 	ldr.w	r6, [r1], #4
 800b97c:	6029      	str	r1, [r5, #0]
 800b97e:	061d      	lsls	r5, r3, #24
 800b980:	d514      	bpl.n	800b9ac <_printf_i+0x1ac>
 800b982:	07df      	lsls	r7, r3, #31
 800b984:	bf44      	itt	mi
 800b986:	f043 0320 	orrmi.w	r3, r3, #32
 800b98a:	6023      	strmi	r3, [r4, #0]
 800b98c:	b91e      	cbnz	r6, 800b996 <_printf_i+0x196>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f023 0320 	bic.w	r3, r3, #32
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	2310      	movs	r3, #16
 800b998:	e7b0      	b.n	800b8fc <_printf_i+0xfc>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	f043 0320 	orr.w	r3, r3, #32
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	2378      	movs	r3, #120	; 0x78
 800b9a4:	4828      	ldr	r0, [pc, #160]	; (800ba48 <_printf_i+0x248>)
 800b9a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9aa:	e7e3      	b.n	800b974 <_printf_i+0x174>
 800b9ac:	0659      	lsls	r1, r3, #25
 800b9ae:	bf48      	it	mi
 800b9b0:	b2b6      	uxthmi	r6, r6
 800b9b2:	e7e6      	b.n	800b982 <_printf_i+0x182>
 800b9b4:	4615      	mov	r5, r2
 800b9b6:	e7bb      	b.n	800b930 <_printf_i+0x130>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	6826      	ldr	r6, [r4, #0]
 800b9bc:	6961      	ldr	r1, [r4, #20]
 800b9be:	1d18      	adds	r0, r3, #4
 800b9c0:	6028      	str	r0, [r5, #0]
 800b9c2:	0635      	lsls	r5, r6, #24
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	d501      	bpl.n	800b9cc <_printf_i+0x1cc>
 800b9c8:	6019      	str	r1, [r3, #0]
 800b9ca:	e002      	b.n	800b9d2 <_printf_i+0x1d2>
 800b9cc:	0670      	lsls	r0, r6, #25
 800b9ce:	d5fb      	bpl.n	800b9c8 <_printf_i+0x1c8>
 800b9d0:	8019      	strh	r1, [r3, #0]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	4615      	mov	r5, r2
 800b9d8:	e7ba      	b.n	800b950 <_printf_i+0x150>
 800b9da:	682b      	ldr	r3, [r5, #0]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	602a      	str	r2, [r5, #0]
 800b9e0:	681d      	ldr	r5, [r3, #0]
 800b9e2:	6862      	ldr	r2, [r4, #4]
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f7f4 fc82 	bl	80002f0 <memchr>
 800b9ec:	b108      	cbz	r0, 800b9f2 <_printf_i+0x1f2>
 800b9ee:	1b40      	subs	r0, r0, r5
 800b9f0:	6060      	str	r0, [r4, #4]
 800b9f2:	6863      	ldr	r3, [r4, #4]
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9fc:	e7a8      	b.n	800b950 <_printf_i+0x150>
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4649      	mov	r1, r9
 800ba04:	4640      	mov	r0, r8
 800ba06:	47d0      	blx	sl
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d0ab      	beq.n	800b964 <_printf_i+0x164>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	079b      	lsls	r3, r3, #30
 800ba10:	d413      	bmi.n	800ba3a <_printf_i+0x23a>
 800ba12:	68e0      	ldr	r0, [r4, #12]
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	4298      	cmp	r0, r3
 800ba18:	bfb8      	it	lt
 800ba1a:	4618      	movlt	r0, r3
 800ba1c:	e7a4      	b.n	800b968 <_printf_i+0x168>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4632      	mov	r2, r6
 800ba22:	4649      	mov	r1, r9
 800ba24:	4640      	mov	r0, r8
 800ba26:	47d0      	blx	sl
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d09b      	beq.n	800b964 <_printf_i+0x164>
 800ba2c:	3501      	adds	r5, #1
 800ba2e:	68e3      	ldr	r3, [r4, #12]
 800ba30:	9903      	ldr	r1, [sp, #12]
 800ba32:	1a5b      	subs	r3, r3, r1
 800ba34:	42ab      	cmp	r3, r5
 800ba36:	dcf2      	bgt.n	800ba1e <_printf_i+0x21e>
 800ba38:	e7eb      	b.n	800ba12 <_printf_i+0x212>
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	f104 0619 	add.w	r6, r4, #25
 800ba40:	e7f5      	b.n	800ba2e <_printf_i+0x22e>
 800ba42:	bf00      	nop
 800ba44:	0800e816 	.word	0x0800e816
 800ba48:	0800e827 	.word	0x0800e827

0800ba4c <iprintf>:
 800ba4c:	b40f      	push	{r0, r1, r2, r3}
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <iprintf+0x2c>)
 800ba50:	b513      	push	{r0, r1, r4, lr}
 800ba52:	681c      	ldr	r4, [r3, #0]
 800ba54:	b124      	cbz	r4, 800ba60 <iprintf+0x14>
 800ba56:	69a3      	ldr	r3, [r4, #24]
 800ba58:	b913      	cbnz	r3, 800ba60 <iprintf+0x14>
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff fa44 	bl	800aee8 <__sinit>
 800ba60:	ab05      	add	r3, sp, #20
 800ba62:	9a04      	ldr	r2, [sp, #16]
 800ba64:	68a1      	ldr	r1, [r4, #8]
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f001 fd79 	bl	800d560 <_vfiprintf_r>
 800ba6e:	b002      	add	sp, #8
 800ba70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba74:	b004      	add	sp, #16
 800ba76:	4770      	bx	lr
 800ba78:	24000014 	.word	0x24000014

0800ba7c <_puts_r>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	460e      	mov	r6, r1
 800ba80:	4605      	mov	r5, r0
 800ba82:	b118      	cbz	r0, 800ba8c <_puts_r+0x10>
 800ba84:	6983      	ldr	r3, [r0, #24]
 800ba86:	b90b      	cbnz	r3, 800ba8c <_puts_r+0x10>
 800ba88:	f7ff fa2e 	bl	800aee8 <__sinit>
 800ba8c:	69ab      	ldr	r3, [r5, #24]
 800ba8e:	68ac      	ldr	r4, [r5, #8]
 800ba90:	b913      	cbnz	r3, 800ba98 <_puts_r+0x1c>
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7ff fa28 	bl	800aee8 <__sinit>
 800ba98:	4b2c      	ldr	r3, [pc, #176]	; (800bb4c <_puts_r+0xd0>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d120      	bne.n	800bae0 <_puts_r+0x64>
 800ba9e:	686c      	ldr	r4, [r5, #4]
 800baa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baa2:	07db      	lsls	r3, r3, #31
 800baa4:	d405      	bmi.n	800bab2 <_puts_r+0x36>
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	0598      	lsls	r0, r3, #22
 800baaa:	d402      	bmi.n	800bab2 <_puts_r+0x36>
 800baac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baae:	f7ff fade 	bl	800b06e <__retarget_lock_acquire_recursive>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	0719      	lsls	r1, r3, #28
 800bab6:	d51d      	bpl.n	800baf4 <_puts_r+0x78>
 800bab8:	6923      	ldr	r3, [r4, #16]
 800baba:	b1db      	cbz	r3, 800baf4 <_puts_r+0x78>
 800babc:	3e01      	subs	r6, #1
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bac4:	3b01      	subs	r3, #1
 800bac6:	60a3      	str	r3, [r4, #8]
 800bac8:	bb39      	cbnz	r1, 800bb1a <_puts_r+0x9e>
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da38      	bge.n	800bb40 <_puts_r+0xc4>
 800bace:	4622      	mov	r2, r4
 800bad0:	210a      	movs	r1, #10
 800bad2:	4628      	mov	r0, r5
 800bad4:	f000 f906 	bl	800bce4 <__swbuf_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d011      	beq.n	800bb00 <_puts_r+0x84>
 800badc:	250a      	movs	r5, #10
 800bade:	e011      	b.n	800bb04 <_puts_r+0x88>
 800bae0:	4b1b      	ldr	r3, [pc, #108]	; (800bb50 <_puts_r+0xd4>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d101      	bne.n	800baea <_puts_r+0x6e>
 800bae6:	68ac      	ldr	r4, [r5, #8]
 800bae8:	e7da      	b.n	800baa0 <_puts_r+0x24>
 800baea:	4b1a      	ldr	r3, [pc, #104]	; (800bb54 <_puts_r+0xd8>)
 800baec:	429c      	cmp	r4, r3
 800baee:	bf08      	it	eq
 800baf0:	68ec      	ldreq	r4, [r5, #12]
 800baf2:	e7d5      	b.n	800baa0 <_puts_r+0x24>
 800baf4:	4621      	mov	r1, r4
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f958 	bl	800bdac <__swsetup_r>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d0dd      	beq.n	800babc <_puts_r+0x40>
 800bb00:	f04f 35ff 	mov.w	r5, #4294967295
 800bb04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb06:	07da      	lsls	r2, r3, #31
 800bb08:	d405      	bmi.n	800bb16 <_puts_r+0x9a>
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	059b      	lsls	r3, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_puts_r+0x9a>
 800bb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb12:	f7ff faad 	bl	800b070 <__retarget_lock_release_recursive>
 800bb16:	4628      	mov	r0, r5
 800bb18:	bd70      	pop	{r4, r5, r6, pc}
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da04      	bge.n	800bb28 <_puts_r+0xac>
 800bb1e:	69a2      	ldr	r2, [r4, #24]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	dc06      	bgt.n	800bb32 <_puts_r+0xb6>
 800bb24:	290a      	cmp	r1, #10
 800bb26:	d004      	beq.n	800bb32 <_puts_r+0xb6>
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	7019      	strb	r1, [r3, #0]
 800bb30:	e7c5      	b.n	800babe <_puts_r+0x42>
 800bb32:	4622      	mov	r2, r4
 800bb34:	4628      	mov	r0, r5
 800bb36:	f000 f8d5 	bl	800bce4 <__swbuf_r>
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d1bf      	bne.n	800babe <_puts_r+0x42>
 800bb3e:	e7df      	b.n	800bb00 <_puts_r+0x84>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	250a      	movs	r5, #10
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	701d      	strb	r5, [r3, #0]
 800bb4a:	e7db      	b.n	800bb04 <_puts_r+0x88>
 800bb4c:	0800e7c0 	.word	0x0800e7c0
 800bb50:	0800e7e0 	.word	0x0800e7e0
 800bb54:	0800e7a0 	.word	0x0800e7a0

0800bb58 <puts>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	; (800bb64 <puts+0xc>)
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f7ff bf8d 	b.w	800ba7c <_puts_r>
 800bb62:	bf00      	nop
 800bb64:	24000014 	.word	0x24000014

0800bb68 <cleanup_glue>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	6809      	ldr	r1, [r1, #0]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b109      	cbz	r1, 800bb76 <cleanup_glue+0xe>
 800bb72:	f7ff fff9 	bl	800bb68 <cleanup_glue>
 800bb76:	4621      	mov	r1, r4
 800bb78:	4628      	mov	r0, r5
 800bb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7e:	f001 bc79 	b.w	800d474 <_free_r>
	...

0800bb84 <_reclaim_reent>:
 800bb84:	4b2c      	ldr	r3, [pc, #176]	; (800bc38 <_reclaim_reent+0xb4>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4283      	cmp	r3, r0
 800bb8a:	b570      	push	{r4, r5, r6, lr}
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	d051      	beq.n	800bc34 <_reclaim_reent+0xb0>
 800bb90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb92:	b143      	cbz	r3, 800bba6 <_reclaim_reent+0x22>
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d14a      	bne.n	800bc30 <_reclaim_reent+0xac>
 800bb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb9c:	6819      	ldr	r1, [r3, #0]
 800bb9e:	b111      	cbz	r1, 800bba6 <_reclaim_reent+0x22>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f001 fc67 	bl	800d474 <_free_r>
 800bba6:	6961      	ldr	r1, [r4, #20]
 800bba8:	b111      	cbz	r1, 800bbb0 <_reclaim_reent+0x2c>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f001 fc62 	bl	800d474 <_free_r>
 800bbb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbb2:	b111      	cbz	r1, 800bbba <_reclaim_reent+0x36>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f001 fc5d 	bl	800d474 <_free_r>
 800bbba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bbbc:	b111      	cbz	r1, 800bbc4 <_reclaim_reent+0x40>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f001 fc58 	bl	800d474 <_free_r>
 800bbc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bbc6:	b111      	cbz	r1, 800bbce <_reclaim_reent+0x4a>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f001 fc53 	bl	800d474 <_free_r>
 800bbce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bbd0:	b111      	cbz	r1, 800bbd8 <_reclaim_reent+0x54>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f001 fc4e 	bl	800d474 <_free_r>
 800bbd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bbda:	b111      	cbz	r1, 800bbe2 <_reclaim_reent+0x5e>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f001 fc49 	bl	800d474 <_free_r>
 800bbe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bbe4:	b111      	cbz	r1, 800bbec <_reclaim_reent+0x68>
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f001 fc44 	bl	800d474 <_free_r>
 800bbec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbee:	b111      	cbz	r1, 800bbf6 <_reclaim_reent+0x72>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f001 fc3f 	bl	800d474 <_free_r>
 800bbf6:	69a3      	ldr	r3, [r4, #24]
 800bbf8:	b1e3      	cbz	r3, 800bc34 <_reclaim_reent+0xb0>
 800bbfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4798      	blx	r3
 800bc00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc02:	b1b9      	cbz	r1, 800bc34 <_reclaim_reent+0xb0>
 800bc04:	4620      	mov	r0, r4
 800bc06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc0a:	f7ff bfad 	b.w	800bb68 <cleanup_glue>
 800bc0e:	5949      	ldr	r1, [r1, r5]
 800bc10:	b941      	cbnz	r1, 800bc24 <_reclaim_reent+0xa0>
 800bc12:	3504      	adds	r5, #4
 800bc14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc16:	2d80      	cmp	r5, #128	; 0x80
 800bc18:	68d9      	ldr	r1, [r3, #12]
 800bc1a:	d1f8      	bne.n	800bc0e <_reclaim_reent+0x8a>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f001 fc29 	bl	800d474 <_free_r>
 800bc22:	e7ba      	b.n	800bb9a <_reclaim_reent+0x16>
 800bc24:	680e      	ldr	r6, [r1, #0]
 800bc26:	4620      	mov	r0, r4
 800bc28:	f001 fc24 	bl	800d474 <_free_r>
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	e7ef      	b.n	800bc10 <_reclaim_reent+0x8c>
 800bc30:	2500      	movs	r5, #0
 800bc32:	e7ef      	b.n	800bc14 <_reclaim_reent+0x90>
 800bc34:	bd70      	pop	{r4, r5, r6, pc}
 800bc36:	bf00      	nop
 800bc38:	24000014 	.word	0x24000014

0800bc3c <_sbrk_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d06      	ldr	r5, [pc, #24]	; (800bc58 <_sbrk_r+0x1c>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	602b      	str	r3, [r5, #0]
 800bc48:	f7f6 f96c 	bl	8001f24 <_sbrk>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_sbrk_r+0x1a>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_sbrk_r+0x1a>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	24004e68 	.word	0x24004e68

0800bc5c <__sread>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	460c      	mov	r4, r1
 800bc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc64:	f001 fdac 	bl	800d7c0 <_read_r>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	bfab      	itete	ge
 800bc6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc6e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc70:	181b      	addge	r3, r3, r0
 800bc72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc76:	bfac      	ite	ge
 800bc78:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc7a:	81a3      	strhlt	r3, [r4, #12]
 800bc7c:	bd10      	pop	{r4, pc}

0800bc7e <__swrite>:
 800bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	461f      	mov	r7, r3
 800bc84:	898b      	ldrh	r3, [r1, #12]
 800bc86:	05db      	lsls	r3, r3, #23
 800bc88:	4605      	mov	r5, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	d505      	bpl.n	800bc9c <__swrite+0x1e>
 800bc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc94:	2302      	movs	r3, #2
 800bc96:	2200      	movs	r2, #0
 800bc98:	f000 ffc6 	bl	800cc28 <_lseek_r>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bca6:	81a3      	strh	r3, [r4, #12]
 800bca8:	4632      	mov	r2, r6
 800bcaa:	463b      	mov	r3, r7
 800bcac:	4628      	mov	r0, r5
 800bcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	f000 b869 	b.w	800bd88 <_write_r>

0800bcb6 <__sseek>:
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	460c      	mov	r4, r1
 800bcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbe:	f000 ffb3 	bl	800cc28 <_lseek_r>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	bf15      	itete	ne
 800bcc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcd2:	81a3      	strheq	r3, [r4, #12]
 800bcd4:	bf18      	it	ne
 800bcd6:	81a3      	strhne	r3, [r4, #12]
 800bcd8:	bd10      	pop	{r4, pc}

0800bcda <__sclose>:
 800bcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcde:	f000 b8d3 	b.w	800be88 <_close_r>
	...

0800bce4 <__swbuf_r>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	460e      	mov	r6, r1
 800bce8:	4614      	mov	r4, r2
 800bcea:	4605      	mov	r5, r0
 800bcec:	b118      	cbz	r0, 800bcf6 <__swbuf_r+0x12>
 800bcee:	6983      	ldr	r3, [r0, #24]
 800bcf0:	b90b      	cbnz	r3, 800bcf6 <__swbuf_r+0x12>
 800bcf2:	f7ff f8f9 	bl	800aee8 <__sinit>
 800bcf6:	4b21      	ldr	r3, [pc, #132]	; (800bd7c <__swbuf_r+0x98>)
 800bcf8:	429c      	cmp	r4, r3
 800bcfa:	d12b      	bne.n	800bd54 <__swbuf_r+0x70>
 800bcfc:	686c      	ldr	r4, [r5, #4]
 800bcfe:	69a3      	ldr	r3, [r4, #24]
 800bd00:	60a3      	str	r3, [r4, #8]
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	071a      	lsls	r2, r3, #28
 800bd06:	d52f      	bpl.n	800bd68 <__swbuf_r+0x84>
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	b36b      	cbz	r3, 800bd68 <__swbuf_r+0x84>
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	6820      	ldr	r0, [r4, #0]
 800bd10:	1ac0      	subs	r0, r0, r3
 800bd12:	6963      	ldr	r3, [r4, #20]
 800bd14:	b2f6      	uxtb	r6, r6
 800bd16:	4283      	cmp	r3, r0
 800bd18:	4637      	mov	r7, r6
 800bd1a:	dc04      	bgt.n	800bd26 <__swbuf_r+0x42>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f000 ff42 	bl	800cba8 <_fflush_r>
 800bd24:	bb30      	cbnz	r0, 800bd74 <__swbuf_r+0x90>
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	60a3      	str	r3, [r4, #8]
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	6022      	str	r2, [r4, #0]
 800bd32:	701e      	strb	r6, [r3, #0]
 800bd34:	6963      	ldr	r3, [r4, #20]
 800bd36:	3001      	adds	r0, #1
 800bd38:	4283      	cmp	r3, r0
 800bd3a:	d004      	beq.n	800bd46 <__swbuf_r+0x62>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	07db      	lsls	r3, r3, #31
 800bd40:	d506      	bpl.n	800bd50 <__swbuf_r+0x6c>
 800bd42:	2e0a      	cmp	r6, #10
 800bd44:	d104      	bne.n	800bd50 <__swbuf_r+0x6c>
 800bd46:	4621      	mov	r1, r4
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 ff2d 	bl	800cba8 <_fflush_r>
 800bd4e:	b988      	cbnz	r0, 800bd74 <__swbuf_r+0x90>
 800bd50:	4638      	mov	r0, r7
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd54:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <__swbuf_r+0x9c>)
 800bd56:	429c      	cmp	r4, r3
 800bd58:	d101      	bne.n	800bd5e <__swbuf_r+0x7a>
 800bd5a:	68ac      	ldr	r4, [r5, #8]
 800bd5c:	e7cf      	b.n	800bcfe <__swbuf_r+0x1a>
 800bd5e:	4b09      	ldr	r3, [pc, #36]	; (800bd84 <__swbuf_r+0xa0>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	bf08      	it	eq
 800bd64:	68ec      	ldreq	r4, [r5, #12]
 800bd66:	e7ca      	b.n	800bcfe <__swbuf_r+0x1a>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 f81e 	bl	800bdac <__swsetup_r>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d0cb      	beq.n	800bd0c <__swbuf_r+0x28>
 800bd74:	f04f 37ff 	mov.w	r7, #4294967295
 800bd78:	e7ea      	b.n	800bd50 <__swbuf_r+0x6c>
 800bd7a:	bf00      	nop
 800bd7c:	0800e7c0 	.word	0x0800e7c0
 800bd80:	0800e7e0 	.word	0x0800e7e0
 800bd84:	0800e7a0 	.word	0x0800e7a0

0800bd88 <_write_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4d07      	ldr	r5, [pc, #28]	; (800bda8 <_write_r+0x20>)
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4608      	mov	r0, r1
 800bd90:	4611      	mov	r1, r2
 800bd92:	2200      	movs	r2, #0
 800bd94:	602a      	str	r2, [r5, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f7f6 f874 	bl	8001e84 <_write>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_write_r+0x1e>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_write_r+0x1e>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	24004e68 	.word	0x24004e68

0800bdac <__swsetup_r>:
 800bdac:	4b32      	ldr	r3, [pc, #200]	; (800be78 <__swsetup_r+0xcc>)
 800bdae:	b570      	push	{r4, r5, r6, lr}
 800bdb0:	681d      	ldr	r5, [r3, #0]
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	b125      	cbz	r5, 800bdc2 <__swsetup_r+0x16>
 800bdb8:	69ab      	ldr	r3, [r5, #24]
 800bdba:	b913      	cbnz	r3, 800bdc2 <__swsetup_r+0x16>
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f7ff f893 	bl	800aee8 <__sinit>
 800bdc2:	4b2e      	ldr	r3, [pc, #184]	; (800be7c <__swsetup_r+0xd0>)
 800bdc4:	429c      	cmp	r4, r3
 800bdc6:	d10f      	bne.n	800bde8 <__swsetup_r+0x3c>
 800bdc8:	686c      	ldr	r4, [r5, #4]
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdd0:	0719      	lsls	r1, r3, #28
 800bdd2:	d42c      	bmi.n	800be2e <__swsetup_r+0x82>
 800bdd4:	06dd      	lsls	r5, r3, #27
 800bdd6:	d411      	bmi.n	800bdfc <__swsetup_r+0x50>
 800bdd8:	2309      	movs	r3, #9
 800bdda:	6033      	str	r3, [r6, #0]
 800bddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	f04f 30ff 	mov.w	r0, #4294967295
 800bde6:	e03e      	b.n	800be66 <__swsetup_r+0xba>
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <__swsetup_r+0xd4>)
 800bdea:	429c      	cmp	r4, r3
 800bdec:	d101      	bne.n	800bdf2 <__swsetup_r+0x46>
 800bdee:	68ac      	ldr	r4, [r5, #8]
 800bdf0:	e7eb      	b.n	800bdca <__swsetup_r+0x1e>
 800bdf2:	4b24      	ldr	r3, [pc, #144]	; (800be84 <__swsetup_r+0xd8>)
 800bdf4:	429c      	cmp	r4, r3
 800bdf6:	bf08      	it	eq
 800bdf8:	68ec      	ldreq	r4, [r5, #12]
 800bdfa:	e7e6      	b.n	800bdca <__swsetup_r+0x1e>
 800bdfc:	0758      	lsls	r0, r3, #29
 800bdfe:	d512      	bpl.n	800be26 <__swsetup_r+0x7a>
 800be00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be02:	b141      	cbz	r1, 800be16 <__swsetup_r+0x6a>
 800be04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be08:	4299      	cmp	r1, r3
 800be0a:	d002      	beq.n	800be12 <__swsetup_r+0x66>
 800be0c:	4630      	mov	r0, r6
 800be0e:	f001 fb31 	bl	800d474 <_free_r>
 800be12:	2300      	movs	r3, #0
 800be14:	6363      	str	r3, [r4, #52]	; 0x34
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	2300      	movs	r3, #0
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f043 0308 	orr.w	r3, r3, #8
 800be2c:	81a3      	strh	r3, [r4, #12]
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	b94b      	cbnz	r3, 800be46 <__swsetup_r+0x9a>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be3c:	d003      	beq.n	800be46 <__swsetup_r+0x9a>
 800be3e:	4621      	mov	r1, r4
 800be40:	4630      	mov	r0, r6
 800be42:	f000 ff29 	bl	800cc98 <__smakebuf_r>
 800be46:	89a0      	ldrh	r0, [r4, #12]
 800be48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be4c:	f010 0301 	ands.w	r3, r0, #1
 800be50:	d00a      	beq.n	800be68 <__swsetup_r+0xbc>
 800be52:	2300      	movs	r3, #0
 800be54:	60a3      	str	r3, [r4, #8]
 800be56:	6963      	ldr	r3, [r4, #20]
 800be58:	425b      	negs	r3, r3
 800be5a:	61a3      	str	r3, [r4, #24]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	b943      	cbnz	r3, 800be72 <__swsetup_r+0xc6>
 800be60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be64:	d1ba      	bne.n	800bddc <__swsetup_r+0x30>
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	0781      	lsls	r1, r0, #30
 800be6a:	bf58      	it	pl
 800be6c:	6963      	ldrpl	r3, [r4, #20]
 800be6e:	60a3      	str	r3, [r4, #8]
 800be70:	e7f4      	b.n	800be5c <__swsetup_r+0xb0>
 800be72:	2000      	movs	r0, #0
 800be74:	e7f7      	b.n	800be66 <__swsetup_r+0xba>
 800be76:	bf00      	nop
 800be78:	24000014 	.word	0x24000014
 800be7c:	0800e7c0 	.word	0x0800e7c0
 800be80:	0800e7e0 	.word	0x0800e7e0
 800be84:	0800e7a0 	.word	0x0800e7a0

0800be88 <_close_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d06      	ldr	r5, [pc, #24]	; (800bea4 <_close_r+0x1c>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	f7f6 f812 	bl	8001ebc <_close>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_close_r+0x1a>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_close_r+0x1a>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	24004e68 	.word	0x24004e68

0800bea8 <quorem>:
 800bea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	6903      	ldr	r3, [r0, #16]
 800beae:	690c      	ldr	r4, [r1, #16]
 800beb0:	42a3      	cmp	r3, r4
 800beb2:	4607      	mov	r7, r0
 800beb4:	f2c0 8081 	blt.w	800bfba <quorem+0x112>
 800beb8:	3c01      	subs	r4, #1
 800beba:	f101 0814 	add.w	r8, r1, #20
 800bebe:	f100 0514 	add.w	r5, r0, #20
 800bec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800becc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bed0:	3301      	adds	r3, #1
 800bed2:	429a      	cmp	r2, r3
 800bed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bedc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bee0:	d331      	bcc.n	800bf46 <quorem+0x9e>
 800bee2:	f04f 0e00 	mov.w	lr, #0
 800bee6:	4640      	mov	r0, r8
 800bee8:	46ac      	mov	ip, r5
 800beea:	46f2      	mov	sl, lr
 800beec:	f850 2b04 	ldr.w	r2, [r0], #4
 800bef0:	b293      	uxth	r3, r2
 800bef2:	fb06 e303 	mla	r3, r6, r3, lr
 800bef6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800befa:	b29b      	uxth	r3, r3
 800befc:	ebaa 0303 	sub.w	r3, sl, r3
 800bf00:	f8dc a000 	ldr.w	sl, [ip]
 800bf04:	0c12      	lsrs	r2, r2, #16
 800bf06:	fa13 f38a 	uxtah	r3, r3, sl
 800bf0a:	fb06 e202 	mla	r2, r6, r2, lr
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	9b00      	ldr	r3, [sp, #0]
 800bf12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf16:	b292      	uxth	r2, r2
 800bf18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf20:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf24:	4581      	cmp	r9, r0
 800bf26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2a:	f84c 3b04 	str.w	r3, [ip], #4
 800bf2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf32:	d2db      	bcs.n	800beec <quorem+0x44>
 800bf34:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf38:	b92b      	cbnz	r3, 800bf46 <quorem+0x9e>
 800bf3a:	9b01      	ldr	r3, [sp, #4]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	429d      	cmp	r5, r3
 800bf40:	461a      	mov	r2, r3
 800bf42:	d32e      	bcc.n	800bfa2 <quorem+0xfa>
 800bf44:	613c      	str	r4, [r7, #16]
 800bf46:	4638      	mov	r0, r7
 800bf48:	f001 f97c 	bl	800d244 <__mcmp>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	db24      	blt.n	800bf9a <quorem+0xf2>
 800bf50:	3601      	adds	r6, #1
 800bf52:	4628      	mov	r0, r5
 800bf54:	f04f 0c00 	mov.w	ip, #0
 800bf58:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf5c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf60:	b293      	uxth	r3, r2
 800bf62:	ebac 0303 	sub.w	r3, ip, r3
 800bf66:	0c12      	lsrs	r2, r2, #16
 800bf68:	fa13 f38e 	uxtah	r3, r3, lr
 800bf6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf7a:	45c1      	cmp	r9, r8
 800bf7c:	f840 3b04 	str.w	r3, [r0], #4
 800bf80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf84:	d2e8      	bcs.n	800bf58 <quorem+0xb0>
 800bf86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf8e:	b922      	cbnz	r2, 800bf9a <quorem+0xf2>
 800bf90:	3b04      	subs	r3, #4
 800bf92:	429d      	cmp	r5, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	d30a      	bcc.n	800bfae <quorem+0x106>
 800bf98:	613c      	str	r4, [r7, #16]
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	b003      	add	sp, #12
 800bf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	3b04      	subs	r3, #4
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	d1cc      	bne.n	800bf44 <quorem+0x9c>
 800bfaa:	3c01      	subs	r4, #1
 800bfac:	e7c7      	b.n	800bf3e <quorem+0x96>
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	3b04      	subs	r3, #4
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	d1f0      	bne.n	800bf98 <quorem+0xf0>
 800bfb6:	3c01      	subs	r4, #1
 800bfb8:	e7eb      	b.n	800bf92 <quorem+0xea>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	e7ee      	b.n	800bf9c <quorem+0xf4>
	...

0800bfc0 <_dtoa_r>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ed2d 8b02 	vpush	{d8}
 800bfc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfca:	b091      	sub	sp, #68	; 0x44
 800bfcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfd0:	ec59 8b10 	vmov	r8, r9, d0
 800bfd4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bfd6:	9106      	str	r1, [sp, #24]
 800bfd8:	4606      	mov	r6, r0
 800bfda:	9208      	str	r2, [sp, #32]
 800bfdc:	930c      	str	r3, [sp, #48]	; 0x30
 800bfde:	b975      	cbnz	r5, 800bffe <_dtoa_r+0x3e>
 800bfe0:	2010      	movs	r0, #16
 800bfe2:	f000 fe99 	bl	800cd18 <malloc>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	6270      	str	r0, [r6, #36]	; 0x24
 800bfea:	b920      	cbnz	r0, 800bff6 <_dtoa_r+0x36>
 800bfec:	4baa      	ldr	r3, [pc, #680]	; (800c298 <_dtoa_r+0x2d8>)
 800bfee:	21ea      	movs	r1, #234	; 0xea
 800bff0:	48aa      	ldr	r0, [pc, #680]	; (800c29c <_dtoa_r+0x2dc>)
 800bff2:	f001 fbf7 	bl	800d7e4 <__assert_func>
 800bff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bffa:	6005      	str	r5, [r0, #0]
 800bffc:	60c5      	str	r5, [r0, #12]
 800bffe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c000:	6819      	ldr	r1, [r3, #0]
 800c002:	b151      	cbz	r1, 800c01a <_dtoa_r+0x5a>
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	604a      	str	r2, [r1, #4]
 800c008:	2301      	movs	r3, #1
 800c00a:	4093      	lsls	r3, r2
 800c00c:	608b      	str	r3, [r1, #8]
 800c00e:	4630      	mov	r0, r6
 800c010:	f000 fed6 	bl	800cdc0 <_Bfree>
 800c014:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	f1b9 0300 	subs.w	r3, r9, #0
 800c01e:	bfbb      	ittet	lt
 800c020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c024:	9303      	strlt	r3, [sp, #12]
 800c026:	2300      	movge	r3, #0
 800c028:	2201      	movlt	r2, #1
 800c02a:	bfac      	ite	ge
 800c02c:	6023      	strge	r3, [r4, #0]
 800c02e:	6022      	strlt	r2, [r4, #0]
 800c030:	4b9b      	ldr	r3, [pc, #620]	; (800c2a0 <_dtoa_r+0x2e0>)
 800c032:	9c03      	ldr	r4, [sp, #12]
 800c034:	43a3      	bics	r3, r4
 800c036:	d11c      	bne.n	800c072 <_dtoa_r+0xb2>
 800c038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c03a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c044:	ea53 0308 	orrs.w	r3, r3, r8
 800c048:	f000 84fd 	beq.w	800ca46 <_dtoa_r+0xa86>
 800c04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c04e:	b963      	cbnz	r3, 800c06a <_dtoa_r+0xaa>
 800c050:	4b94      	ldr	r3, [pc, #592]	; (800c2a4 <_dtoa_r+0x2e4>)
 800c052:	e01f      	b.n	800c094 <_dtoa_r+0xd4>
 800c054:	4b94      	ldr	r3, [pc, #592]	; (800c2a8 <_dtoa_r+0x2e8>)
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	3308      	adds	r3, #8
 800c05a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	9801      	ldr	r0, [sp, #4]
 800c060:	b011      	add	sp, #68	; 0x44
 800c062:	ecbd 8b02 	vpop	{d8}
 800c066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06a:	4b8e      	ldr	r3, [pc, #568]	; (800c2a4 <_dtoa_r+0x2e4>)
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	3303      	adds	r3, #3
 800c070:	e7f3      	b.n	800c05a <_dtoa_r+0x9a>
 800c072:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c076:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07e:	d10b      	bne.n	800c098 <_dtoa_r+0xd8>
 800c080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c082:	2301      	movs	r3, #1
 800c084:	6013      	str	r3, [r2, #0]
 800c086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 84d9 	beq.w	800ca40 <_dtoa_r+0xa80>
 800c08e:	4887      	ldr	r0, [pc, #540]	; (800c2ac <_dtoa_r+0x2ec>)
 800c090:	6018      	str	r0, [r3, #0]
 800c092:	1e43      	subs	r3, r0, #1
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	e7e2      	b.n	800c05e <_dtoa_r+0x9e>
 800c098:	a90f      	add	r1, sp, #60	; 0x3c
 800c09a:	aa0e      	add	r2, sp, #56	; 0x38
 800c09c:	4630      	mov	r0, r6
 800c09e:	eeb0 0b48 	vmov.f64	d0, d8
 800c0a2:	f001 f975 	bl	800d390 <__d2b>
 800c0a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	d046      	beq.n	800c140 <_dtoa_r+0x180>
 800c0b2:	ee18 4a90 	vmov	r4, s17
 800c0b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c0ba:	ec53 2b18 	vmov	r2, r3, d8
 800c0be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c0c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c0ca:	2400      	movs	r4, #0
 800c0cc:	ec43 2b16 	vmov	d6, r2, r3
 800c0d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c0d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c280 <_dtoa_r+0x2c0>
 800c0d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c0dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c288 <_dtoa_r+0x2c8>
 800c0e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c0e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c290 <_dtoa_r+0x2d0>
 800c0e8:	ee07 1a90 	vmov	s15, r1
 800c0ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c0f0:	eeb0 7b46 	vmov.f64	d7, d6
 800c0f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c0f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c0fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c104:	ee16 ba90 	vmov	fp, s13
 800c108:	940a      	str	r4, [sp, #40]	; 0x28
 800c10a:	d508      	bpl.n	800c11e <_dtoa_r+0x15e>
 800c10c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c110:	eeb4 6b47 	vcmp.f64	d6, d7
 800c114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c118:	bf18      	it	ne
 800c11a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c11e:	f1bb 0f16 	cmp.w	fp, #22
 800c122:	d82f      	bhi.n	800c184 <_dtoa_r+0x1c4>
 800c124:	4b62      	ldr	r3, [pc, #392]	; (800c2b0 <_dtoa_r+0x2f0>)
 800c126:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c12a:	ed93 7b00 	vldr	d7, [r3]
 800c12e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c136:	d501      	bpl.n	800c13c <_dtoa_r+0x17c>
 800c138:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c13c:	2300      	movs	r3, #0
 800c13e:	e022      	b.n	800c186 <_dtoa_r+0x1c6>
 800c140:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c142:	4401      	add	r1, r0
 800c144:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c148:	2b20      	cmp	r3, #32
 800c14a:	bfc1      	itttt	gt
 800c14c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c150:	fa04 f303 	lslgt.w	r3, r4, r3
 800c154:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c158:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c15c:	bfd6      	itet	le
 800c15e:	f1c3 0320 	rsble	r3, r3, #32
 800c162:	ea43 0808 	orrgt.w	r8, r3, r8
 800c166:	fa08 f803 	lslle.w	r8, r8, r3
 800c16a:	ee07 8a90 	vmov	s15, r8
 800c16e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c172:	3901      	subs	r1, #1
 800c174:	ee17 4a90 	vmov	r4, s15
 800c178:	ec53 2b17 	vmov	r2, r3, d7
 800c17c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c180:	2401      	movs	r4, #1
 800c182:	e7a3      	b.n	800c0cc <_dtoa_r+0x10c>
 800c184:	2301      	movs	r3, #1
 800c186:	930b      	str	r3, [sp, #44]	; 0x2c
 800c188:	1a43      	subs	r3, r0, r1
 800c18a:	1e5a      	subs	r2, r3, #1
 800c18c:	bf45      	ittet	mi
 800c18e:	f1c3 0301 	rsbmi	r3, r3, #1
 800c192:	9304      	strmi	r3, [sp, #16]
 800c194:	2300      	movpl	r3, #0
 800c196:	2300      	movmi	r3, #0
 800c198:	9205      	str	r2, [sp, #20]
 800c19a:	bf54      	ite	pl
 800c19c:	9304      	strpl	r3, [sp, #16]
 800c19e:	9305      	strmi	r3, [sp, #20]
 800c1a0:	f1bb 0f00 	cmp.w	fp, #0
 800c1a4:	db18      	blt.n	800c1d8 <_dtoa_r+0x218>
 800c1a6:	9b05      	ldr	r3, [sp, #20]
 800c1a8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c1ac:	445b      	add	r3, fp
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9a06      	ldr	r2, [sp, #24]
 800c1b4:	2a09      	cmp	r2, #9
 800c1b6:	d849      	bhi.n	800c24c <_dtoa_r+0x28c>
 800c1b8:	2a05      	cmp	r2, #5
 800c1ba:	bfc4      	itt	gt
 800c1bc:	3a04      	subgt	r2, #4
 800c1be:	9206      	strgt	r2, [sp, #24]
 800c1c0:	9a06      	ldr	r2, [sp, #24]
 800c1c2:	f1a2 0202 	sub.w	r2, r2, #2
 800c1c6:	bfcc      	ite	gt
 800c1c8:	2400      	movgt	r4, #0
 800c1ca:	2401      	movle	r4, #1
 800c1cc:	2a03      	cmp	r2, #3
 800c1ce:	d848      	bhi.n	800c262 <_dtoa_r+0x2a2>
 800c1d0:	e8df f002 	tbb	[pc, r2]
 800c1d4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c1d8:	9b04      	ldr	r3, [sp, #16]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	eba3 030b 	sub.w	r3, r3, fp
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e4:	f1cb 0300 	rsb	r3, fp, #0
 800c1e8:	e7e3      	b.n	800c1b2 <_dtoa_r+0x1f2>
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	9207      	str	r2, [sp, #28]
 800c1ee:	9a08      	ldr	r2, [sp, #32]
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	dc39      	bgt.n	800c268 <_dtoa_r+0x2a8>
 800c1f4:	f04f 0a01 	mov.w	sl, #1
 800c1f8:	46d1      	mov	r9, sl
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	f8cd a020 	str.w	sl, [sp, #32]
 800c200:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c202:	2100      	movs	r1, #0
 800c204:	6079      	str	r1, [r7, #4]
 800c206:	2004      	movs	r0, #4
 800c208:	f100 0c14 	add.w	ip, r0, #20
 800c20c:	4594      	cmp	ip, r2
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	d92f      	bls.n	800c272 <_dtoa_r+0x2b2>
 800c212:	4630      	mov	r0, r6
 800c214:	930d      	str	r3, [sp, #52]	; 0x34
 800c216:	f000 fd93 	bl	800cd40 <_Balloc>
 800c21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c21c:	9001      	str	r0, [sp, #4]
 800c21e:	4602      	mov	r2, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	d149      	bne.n	800c2b8 <_dtoa_r+0x2f8>
 800c224:	4b23      	ldr	r3, [pc, #140]	; (800c2b4 <_dtoa_r+0x2f4>)
 800c226:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c22a:	e6e1      	b.n	800bff0 <_dtoa_r+0x30>
 800c22c:	2201      	movs	r2, #1
 800c22e:	e7dd      	b.n	800c1ec <_dtoa_r+0x22c>
 800c230:	2200      	movs	r2, #0
 800c232:	9207      	str	r2, [sp, #28]
 800c234:	9a08      	ldr	r2, [sp, #32]
 800c236:	eb0b 0a02 	add.w	sl, fp, r2
 800c23a:	f10a 0901 	add.w	r9, sl, #1
 800c23e:	464a      	mov	r2, r9
 800c240:	2a01      	cmp	r2, #1
 800c242:	bfb8      	it	lt
 800c244:	2201      	movlt	r2, #1
 800c246:	e7db      	b.n	800c200 <_dtoa_r+0x240>
 800c248:	2201      	movs	r2, #1
 800c24a:	e7f2      	b.n	800c232 <_dtoa_r+0x272>
 800c24c:	2401      	movs	r4, #1
 800c24e:	2200      	movs	r2, #0
 800c250:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c254:	f04f 3aff 	mov.w	sl, #4294967295
 800c258:	2100      	movs	r1, #0
 800c25a:	46d1      	mov	r9, sl
 800c25c:	2212      	movs	r2, #18
 800c25e:	9108      	str	r1, [sp, #32]
 800c260:	e7ce      	b.n	800c200 <_dtoa_r+0x240>
 800c262:	2201      	movs	r2, #1
 800c264:	9207      	str	r2, [sp, #28]
 800c266:	e7f5      	b.n	800c254 <_dtoa_r+0x294>
 800c268:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c26c:	46d1      	mov	r9, sl
 800c26e:	4652      	mov	r2, sl
 800c270:	e7c6      	b.n	800c200 <_dtoa_r+0x240>
 800c272:	3101      	adds	r1, #1
 800c274:	6079      	str	r1, [r7, #4]
 800c276:	0040      	lsls	r0, r0, #1
 800c278:	e7c6      	b.n	800c208 <_dtoa_r+0x248>
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w
 800c280:	636f4361 	.word	0x636f4361
 800c284:	3fd287a7 	.word	0x3fd287a7
 800c288:	8b60c8b3 	.word	0x8b60c8b3
 800c28c:	3fc68a28 	.word	0x3fc68a28
 800c290:	509f79fb 	.word	0x509f79fb
 800c294:	3fd34413 	.word	0x3fd34413
 800c298:	0800e845 	.word	0x0800e845
 800c29c:	0800e85c 	.word	0x0800e85c
 800c2a0:	7ff00000 	.word	0x7ff00000
 800c2a4:	0800e841 	.word	0x0800e841
 800c2a8:	0800e838 	.word	0x0800e838
 800c2ac:	0800e815 	.word	0x0800e815
 800c2b0:	0800e950 	.word	0x0800e950
 800c2b4:	0800e8b7 	.word	0x0800e8b7
 800c2b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c2ba:	9901      	ldr	r1, [sp, #4]
 800c2bc:	6011      	str	r1, [r2, #0]
 800c2be:	f1b9 0f0e 	cmp.w	r9, #14
 800c2c2:	d86c      	bhi.n	800c39e <_dtoa_r+0x3de>
 800c2c4:	2c00      	cmp	r4, #0
 800c2c6:	d06a      	beq.n	800c39e <_dtoa_r+0x3de>
 800c2c8:	f1bb 0f00 	cmp.w	fp, #0
 800c2cc:	f340 80a0 	ble.w	800c410 <_dtoa_r+0x450>
 800c2d0:	49c1      	ldr	r1, [pc, #772]	; (800c5d8 <_dtoa_r+0x618>)
 800c2d2:	f00b 020f 	and.w	r2, fp, #15
 800c2d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c2da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c2de:	ed92 7b00 	vldr	d7, [r2]
 800c2e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c2e6:	f000 8087 	beq.w	800c3f8 <_dtoa_r+0x438>
 800c2ea:	4abc      	ldr	r2, [pc, #752]	; (800c5dc <_dtoa_r+0x61c>)
 800c2ec:	ed92 6b08 	vldr	d6, [r2, #32]
 800c2f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c2f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c2f8:	f001 010f 	and.w	r1, r1, #15
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	48b7      	ldr	r0, [pc, #732]	; (800c5dc <_dtoa_r+0x61c>)
 800c300:	2900      	cmp	r1, #0
 800c302:	d17b      	bne.n	800c3fc <_dtoa_r+0x43c>
 800c304:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c308:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c30c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c312:	2900      	cmp	r1, #0
 800c314:	f000 80a2 	beq.w	800c45c <_dtoa_r+0x49c>
 800c318:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c31c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c320:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	f140 8098 	bpl.w	800c45c <_dtoa_r+0x49c>
 800c32c:	f1b9 0f00 	cmp.w	r9, #0
 800c330:	f000 8094 	beq.w	800c45c <_dtoa_r+0x49c>
 800c334:	f1ba 0f00 	cmp.w	sl, #0
 800c338:	dd2f      	ble.n	800c39a <_dtoa_r+0x3da>
 800c33a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c33e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c342:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c346:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c34a:	3201      	adds	r2, #1
 800c34c:	4650      	mov	r0, sl
 800c34e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c352:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c356:	ee07 2a90 	vmov	s15, r2
 800c35a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c35e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c362:	ee15 4a90 	vmov	r4, s11
 800c366:	ec52 1b15 	vmov	r1, r2, d5
 800c36a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c36e:	2800      	cmp	r0, #0
 800c370:	d177      	bne.n	800c462 <_dtoa_r+0x4a2>
 800c372:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c376:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c37a:	ec42 1b17 	vmov	d7, r1, r2
 800c37e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c386:	f300 8263 	bgt.w	800c850 <_dtoa_r+0x890>
 800c38a:	eeb1 7b47 	vneg.f64	d7, d7
 800c38e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c396:	f100 8258 	bmi.w	800c84a <_dtoa_r+0x88a>
 800c39a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c39e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	f2c0 811d 	blt.w	800c5e0 <_dtoa_r+0x620>
 800c3a6:	f1bb 0f0e 	cmp.w	fp, #14
 800c3aa:	f300 8119 	bgt.w	800c5e0 <_dtoa_r+0x620>
 800c3ae:	4b8a      	ldr	r3, [pc, #552]	; (800c5d8 <_dtoa_r+0x618>)
 800c3b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3b4:	ed93 6b00 	vldr	d6, [r3]
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f280 80b7 	bge.w	800c52e <_dtoa_r+0x56e>
 800c3c0:	f1b9 0f00 	cmp.w	r9, #0
 800c3c4:	f300 80b3 	bgt.w	800c52e <_dtoa_r+0x56e>
 800c3c8:	f040 823f 	bne.w	800c84a <_dtoa_r+0x88a>
 800c3cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c3d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c3d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e0:	464c      	mov	r4, r9
 800c3e2:	464f      	mov	r7, r9
 800c3e4:	f280 8215 	bge.w	800c812 <_dtoa_r+0x852>
 800c3e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c3ec:	2331      	movs	r3, #49	; 0x31
 800c3ee:	f808 3b01 	strb.w	r3, [r8], #1
 800c3f2:	f10b 0b01 	add.w	fp, fp, #1
 800c3f6:	e211      	b.n	800c81c <_dtoa_r+0x85c>
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	e780      	b.n	800c2fe <_dtoa_r+0x33e>
 800c3fc:	07cc      	lsls	r4, r1, #31
 800c3fe:	d504      	bpl.n	800c40a <_dtoa_r+0x44a>
 800c400:	ed90 6b00 	vldr	d6, [r0]
 800c404:	3201      	adds	r2, #1
 800c406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c40a:	1049      	asrs	r1, r1, #1
 800c40c:	3008      	adds	r0, #8
 800c40e:	e777      	b.n	800c300 <_dtoa_r+0x340>
 800c410:	d022      	beq.n	800c458 <_dtoa_r+0x498>
 800c412:	f1cb 0100 	rsb	r1, fp, #0
 800c416:	4a70      	ldr	r2, [pc, #448]	; (800c5d8 <_dtoa_r+0x618>)
 800c418:	f001 000f 	and.w	r0, r1, #15
 800c41c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c420:	ed92 7b00 	vldr	d7, [r2]
 800c424:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c42c:	486b      	ldr	r0, [pc, #428]	; (800c5dc <_dtoa_r+0x61c>)
 800c42e:	1109      	asrs	r1, r1, #4
 800c430:	2400      	movs	r4, #0
 800c432:	2202      	movs	r2, #2
 800c434:	b929      	cbnz	r1, 800c442 <_dtoa_r+0x482>
 800c436:	2c00      	cmp	r4, #0
 800c438:	f43f af6a 	beq.w	800c310 <_dtoa_r+0x350>
 800c43c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c440:	e766      	b.n	800c310 <_dtoa_r+0x350>
 800c442:	07cf      	lsls	r7, r1, #31
 800c444:	d505      	bpl.n	800c452 <_dtoa_r+0x492>
 800c446:	ed90 6b00 	vldr	d6, [r0]
 800c44a:	3201      	adds	r2, #1
 800c44c:	2401      	movs	r4, #1
 800c44e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c452:	1049      	asrs	r1, r1, #1
 800c454:	3008      	adds	r0, #8
 800c456:	e7ed      	b.n	800c434 <_dtoa_r+0x474>
 800c458:	2202      	movs	r2, #2
 800c45a:	e759      	b.n	800c310 <_dtoa_r+0x350>
 800c45c:	465f      	mov	r7, fp
 800c45e:	4648      	mov	r0, r9
 800c460:	e775      	b.n	800c34e <_dtoa_r+0x38e>
 800c462:	ec42 1b17 	vmov	d7, r1, r2
 800c466:	4a5c      	ldr	r2, [pc, #368]	; (800c5d8 <_dtoa_r+0x618>)
 800c468:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c46c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c470:	9a01      	ldr	r2, [sp, #4]
 800c472:	1814      	adds	r4, r2, r0
 800c474:	9a07      	ldr	r2, [sp, #28]
 800c476:	b352      	cbz	r2, 800c4ce <_dtoa_r+0x50e>
 800c478:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c47c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c480:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c484:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c488:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c48c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c490:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c494:	ee14 2a90 	vmov	r2, s9
 800c498:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c49c:	3230      	adds	r2, #48	; 0x30
 800c49e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4aa:	f808 2b01 	strb.w	r2, [r8], #1
 800c4ae:	d439      	bmi.n	800c524 <_dtoa_r+0x564>
 800c4b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c4b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4bc:	d472      	bmi.n	800c5a4 <_dtoa_r+0x5e4>
 800c4be:	45a0      	cmp	r8, r4
 800c4c0:	f43f af6b 	beq.w	800c39a <_dtoa_r+0x3da>
 800c4c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4cc:	e7e0      	b.n	800c490 <_dtoa_r+0x4d0>
 800c4ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c4d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c4dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c4e0:	ee14 2a90 	vmov	r2, s9
 800c4e4:	3230      	adds	r2, #48	; 0x30
 800c4e6:	f808 2b01 	strb.w	r2, [r8], #1
 800c4ea:	45a0      	cmp	r8, r4
 800c4ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4f4:	d118      	bne.n	800c528 <_dtoa_r+0x568>
 800c4f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c4fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c4fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c506:	dc4d      	bgt.n	800c5a4 <_dtoa_r+0x5e4>
 800c508:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c50c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c514:	f57f af41 	bpl.w	800c39a <_dtoa_r+0x3da>
 800c518:	4688      	mov	r8, r1
 800c51a:	3901      	subs	r1, #1
 800c51c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c520:	2b30      	cmp	r3, #48	; 0x30
 800c522:	d0f9      	beq.n	800c518 <_dtoa_r+0x558>
 800c524:	46bb      	mov	fp, r7
 800c526:	e02a      	b.n	800c57e <_dtoa_r+0x5be>
 800c528:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c52c:	e7d6      	b.n	800c4dc <_dtoa_r+0x51c>
 800c52e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c532:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c536:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c53a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c53e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c542:	ee15 3a10 	vmov	r3, s10
 800c546:	3330      	adds	r3, #48	; 0x30
 800c548:	f808 3b01 	strb.w	r3, [r8], #1
 800c54c:	9b01      	ldr	r3, [sp, #4]
 800c54e:	eba8 0303 	sub.w	r3, r8, r3
 800c552:	4599      	cmp	r9, r3
 800c554:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c558:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c55c:	d133      	bne.n	800c5c6 <_dtoa_r+0x606>
 800c55e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c562:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56a:	dc1a      	bgt.n	800c5a2 <_dtoa_r+0x5e2>
 800c56c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c574:	d103      	bne.n	800c57e <_dtoa_r+0x5be>
 800c576:	ee15 3a10 	vmov	r3, s10
 800c57a:	07d9      	lsls	r1, r3, #31
 800c57c:	d411      	bmi.n	800c5a2 <_dtoa_r+0x5e2>
 800c57e:	4629      	mov	r1, r5
 800c580:	4630      	mov	r0, r6
 800c582:	f000 fc1d 	bl	800cdc0 <_Bfree>
 800c586:	2300      	movs	r3, #0
 800c588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c58a:	f888 3000 	strb.w	r3, [r8]
 800c58e:	f10b 0301 	add.w	r3, fp, #1
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c596:	2b00      	cmp	r3, #0
 800c598:	f43f ad61 	beq.w	800c05e <_dtoa_r+0x9e>
 800c59c:	f8c3 8000 	str.w	r8, [r3]
 800c5a0:	e55d      	b.n	800c05e <_dtoa_r+0x9e>
 800c5a2:	465f      	mov	r7, fp
 800c5a4:	4643      	mov	r3, r8
 800c5a6:	4698      	mov	r8, r3
 800c5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ac:	2a39      	cmp	r2, #57	; 0x39
 800c5ae:	d106      	bne.n	800c5be <_dtoa_r+0x5fe>
 800c5b0:	9a01      	ldr	r2, [sp, #4]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d1f7      	bne.n	800c5a6 <_dtoa_r+0x5e6>
 800c5b6:	9901      	ldr	r1, [sp, #4]
 800c5b8:	2230      	movs	r2, #48	; 0x30
 800c5ba:	3701      	adds	r7, #1
 800c5bc:	700a      	strb	r2, [r1, #0]
 800c5be:	781a      	ldrb	r2, [r3, #0]
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	e7ae      	b.n	800c524 <_dtoa_r+0x564>
 800c5c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d2:	d1b2      	bne.n	800c53a <_dtoa_r+0x57a>
 800c5d4:	e7d3      	b.n	800c57e <_dtoa_r+0x5be>
 800c5d6:	bf00      	nop
 800c5d8:	0800e950 	.word	0x0800e950
 800c5dc:	0800e928 	.word	0x0800e928
 800c5e0:	9907      	ldr	r1, [sp, #28]
 800c5e2:	2900      	cmp	r1, #0
 800c5e4:	f000 80d0 	beq.w	800c788 <_dtoa_r+0x7c8>
 800c5e8:	9906      	ldr	r1, [sp, #24]
 800c5ea:	2901      	cmp	r1, #1
 800c5ec:	f300 80b4 	bgt.w	800c758 <_dtoa_r+0x798>
 800c5f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5f2:	2900      	cmp	r1, #0
 800c5f4:	f000 80ac 	beq.w	800c750 <_dtoa_r+0x790>
 800c5f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c5fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c600:	461c      	mov	r4, r3
 800c602:	930a      	str	r3, [sp, #40]	; 0x28
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	4413      	add	r3, r2
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	9b05      	ldr	r3, [sp, #20]
 800c60c:	2101      	movs	r1, #1
 800c60e:	4413      	add	r3, r2
 800c610:	4630      	mov	r0, r6
 800c612:	9305      	str	r3, [sp, #20]
 800c614:	f000 fc8c 	bl	800cf30 <__i2b>
 800c618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c61a:	4607      	mov	r7, r0
 800c61c:	f1b8 0f00 	cmp.w	r8, #0
 800c620:	dd0d      	ble.n	800c63e <_dtoa_r+0x67e>
 800c622:	9a05      	ldr	r2, [sp, #20]
 800c624:	2a00      	cmp	r2, #0
 800c626:	dd0a      	ble.n	800c63e <_dtoa_r+0x67e>
 800c628:	4542      	cmp	r2, r8
 800c62a:	9904      	ldr	r1, [sp, #16]
 800c62c:	bfa8      	it	ge
 800c62e:	4642      	movge	r2, r8
 800c630:	1a89      	subs	r1, r1, r2
 800c632:	9104      	str	r1, [sp, #16]
 800c634:	9905      	ldr	r1, [sp, #20]
 800c636:	eba8 0802 	sub.w	r8, r8, r2
 800c63a:	1a8a      	subs	r2, r1, r2
 800c63c:	9205      	str	r2, [sp, #20]
 800c63e:	b303      	cbz	r3, 800c682 <_dtoa_r+0x6c2>
 800c640:	9a07      	ldr	r2, [sp, #28]
 800c642:	2a00      	cmp	r2, #0
 800c644:	f000 80a5 	beq.w	800c792 <_dtoa_r+0x7d2>
 800c648:	2c00      	cmp	r4, #0
 800c64a:	dd13      	ble.n	800c674 <_dtoa_r+0x6b4>
 800c64c:	4639      	mov	r1, r7
 800c64e:	4622      	mov	r2, r4
 800c650:	4630      	mov	r0, r6
 800c652:	930d      	str	r3, [sp, #52]	; 0x34
 800c654:	f000 fd2c 	bl	800d0b0 <__pow5mult>
 800c658:	462a      	mov	r2, r5
 800c65a:	4601      	mov	r1, r0
 800c65c:	4607      	mov	r7, r0
 800c65e:	4630      	mov	r0, r6
 800c660:	f000 fc7c 	bl	800cf5c <__multiply>
 800c664:	4629      	mov	r1, r5
 800c666:	900a      	str	r0, [sp, #40]	; 0x28
 800c668:	4630      	mov	r0, r6
 800c66a:	f000 fba9 	bl	800cdc0 <_Bfree>
 800c66e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c672:	4615      	mov	r5, r2
 800c674:	1b1a      	subs	r2, r3, r4
 800c676:	d004      	beq.n	800c682 <_dtoa_r+0x6c2>
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f000 fd18 	bl	800d0b0 <__pow5mult>
 800c680:	4605      	mov	r5, r0
 800c682:	2101      	movs	r1, #1
 800c684:	4630      	mov	r0, r6
 800c686:	f000 fc53 	bl	800cf30 <__i2b>
 800c68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	4604      	mov	r4, r0
 800c690:	f340 8081 	ble.w	800c796 <_dtoa_r+0x7d6>
 800c694:	461a      	mov	r2, r3
 800c696:	4601      	mov	r1, r0
 800c698:	4630      	mov	r0, r6
 800c69a:	f000 fd09 	bl	800d0b0 <__pow5mult>
 800c69e:	9b06      	ldr	r3, [sp, #24]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	dd7a      	ble.n	800c79c <_dtoa_r+0x7dc>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6aa:	6922      	ldr	r2, [r4, #16]
 800c6ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6b0:	6910      	ldr	r0, [r2, #16]
 800c6b2:	f000 fbed 	bl	800ce90 <__hi0bits>
 800c6b6:	f1c0 0020 	rsb	r0, r0, #32
 800c6ba:	9b05      	ldr	r3, [sp, #20]
 800c6bc:	4418      	add	r0, r3
 800c6be:	f010 001f 	ands.w	r0, r0, #31
 800c6c2:	f000 808c 	beq.w	800c7de <_dtoa_r+0x81e>
 800c6c6:	f1c0 0220 	rsb	r2, r0, #32
 800c6ca:	2a04      	cmp	r2, #4
 800c6cc:	f340 8085 	ble.w	800c7da <_dtoa_r+0x81a>
 800c6d0:	f1c0 001c 	rsb	r0, r0, #28
 800c6d4:	9b04      	ldr	r3, [sp, #16]
 800c6d6:	4403      	add	r3, r0
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	9b05      	ldr	r3, [sp, #20]
 800c6dc:	4403      	add	r3, r0
 800c6de:	4480      	add	r8, r0
 800c6e0:	9305      	str	r3, [sp, #20]
 800c6e2:	9b04      	ldr	r3, [sp, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd05      	ble.n	800c6f4 <_dtoa_r+0x734>
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f000 fd39 	bl	800d164 <__lshift>
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	9b05      	ldr	r3, [sp, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dd05      	ble.n	800c706 <_dtoa_r+0x746>
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	4630      	mov	r0, r6
 800c700:	f000 fd30 	bl	800d164 <__lshift>
 800c704:	4604      	mov	r4, r0
 800c706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d06a      	beq.n	800c7e2 <_dtoa_r+0x822>
 800c70c:	4621      	mov	r1, r4
 800c70e:	4628      	mov	r0, r5
 800c710:	f000 fd98 	bl	800d244 <__mcmp>
 800c714:	2800      	cmp	r0, #0
 800c716:	da64      	bge.n	800c7e2 <_dtoa_r+0x822>
 800c718:	2300      	movs	r3, #0
 800c71a:	4629      	mov	r1, r5
 800c71c:	220a      	movs	r2, #10
 800c71e:	4630      	mov	r0, r6
 800c720:	f000 fb70 	bl	800ce04 <__multadd>
 800c724:	9b07      	ldr	r3, [sp, #28]
 800c726:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c72a:	4605      	mov	r5, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 8191 	beq.w	800ca54 <_dtoa_r+0xa94>
 800c732:	4639      	mov	r1, r7
 800c734:	2300      	movs	r3, #0
 800c736:	220a      	movs	r2, #10
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 fb63 	bl	800ce04 <__multadd>
 800c73e:	f1ba 0f00 	cmp.w	sl, #0
 800c742:	4607      	mov	r7, r0
 800c744:	f300 808d 	bgt.w	800c862 <_dtoa_r+0x8a2>
 800c748:	9b06      	ldr	r3, [sp, #24]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	dc50      	bgt.n	800c7f0 <_dtoa_r+0x830>
 800c74e:	e088      	b.n	800c862 <_dtoa_r+0x8a2>
 800c750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c752:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c756:	e751      	b.n	800c5fc <_dtoa_r+0x63c>
 800c758:	f109 34ff 	add.w	r4, r9, #4294967295
 800c75c:	42a3      	cmp	r3, r4
 800c75e:	bfbf      	itttt	lt
 800c760:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c762:	1ae3      	sublt	r3, r4, r3
 800c764:	18d2      	addlt	r2, r2, r3
 800c766:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c768:	bfb6      	itet	lt
 800c76a:	4623      	movlt	r3, r4
 800c76c:	1b1c      	subge	r4, r3, r4
 800c76e:	2400      	movlt	r4, #0
 800c770:	f1b9 0f00 	cmp.w	r9, #0
 800c774:	bfb5      	itete	lt
 800c776:	9a04      	ldrlt	r2, [sp, #16]
 800c778:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c77c:	eba2 0809 	sublt.w	r8, r2, r9
 800c780:	464a      	movge	r2, r9
 800c782:	bfb8      	it	lt
 800c784:	2200      	movlt	r2, #0
 800c786:	e73c      	b.n	800c602 <_dtoa_r+0x642>
 800c788:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c78c:	9f07      	ldr	r7, [sp, #28]
 800c78e:	461c      	mov	r4, r3
 800c790:	e744      	b.n	800c61c <_dtoa_r+0x65c>
 800c792:	461a      	mov	r2, r3
 800c794:	e770      	b.n	800c678 <_dtoa_r+0x6b8>
 800c796:	9b06      	ldr	r3, [sp, #24]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	dc18      	bgt.n	800c7ce <_dtoa_r+0x80e>
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	b9b3      	cbnz	r3, 800c7ce <_dtoa_r+0x80e>
 800c7a0:	9b03      	ldr	r3, [sp, #12]
 800c7a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c7a6:	b9a2      	cbnz	r2, 800c7d2 <_dtoa_r+0x812>
 800c7a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c7ac:	0d12      	lsrs	r2, r2, #20
 800c7ae:	0512      	lsls	r2, r2, #20
 800c7b0:	b18a      	cbz	r2, 800c7d6 <_dtoa_r+0x816>
 800c7b2:	9b04      	ldr	r3, [sp, #16]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	9304      	str	r3, [sp, #16]
 800c7b8:	9b05      	ldr	r3, [sp, #20]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	9305      	str	r3, [sp, #20]
 800c7be:	2301      	movs	r3, #1
 800c7c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f47f af70 	bne.w	800c6aa <_dtoa_r+0x6ea>
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	e775      	b.n	800c6ba <_dtoa_r+0x6fa>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e7f6      	b.n	800c7c0 <_dtoa_r+0x800>
 800c7d2:	9b02      	ldr	r3, [sp, #8]
 800c7d4:	e7f4      	b.n	800c7c0 <_dtoa_r+0x800>
 800c7d6:	920a      	str	r2, [sp, #40]	; 0x28
 800c7d8:	e7f3      	b.n	800c7c2 <_dtoa_r+0x802>
 800c7da:	d082      	beq.n	800c6e2 <_dtoa_r+0x722>
 800c7dc:	4610      	mov	r0, r2
 800c7de:	301c      	adds	r0, #28
 800c7e0:	e778      	b.n	800c6d4 <_dtoa_r+0x714>
 800c7e2:	f1b9 0f00 	cmp.w	r9, #0
 800c7e6:	dc37      	bgt.n	800c858 <_dtoa_r+0x898>
 800c7e8:	9b06      	ldr	r3, [sp, #24]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	dd34      	ble.n	800c858 <_dtoa_r+0x898>
 800c7ee:	46ca      	mov	sl, r9
 800c7f0:	f1ba 0f00 	cmp.w	sl, #0
 800c7f4:	d10d      	bne.n	800c812 <_dtoa_r+0x852>
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4653      	mov	r3, sl
 800c7fa:	2205      	movs	r2, #5
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f000 fb01 	bl	800ce04 <__multadd>
 800c802:	4601      	mov	r1, r0
 800c804:	4604      	mov	r4, r0
 800c806:	4628      	mov	r0, r5
 800c808:	f000 fd1c 	bl	800d244 <__mcmp>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f73f adeb 	bgt.w	800c3e8 <_dtoa_r+0x428>
 800c812:	9b08      	ldr	r3, [sp, #32]
 800c814:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c818:	ea6f 0b03 	mvn.w	fp, r3
 800c81c:	f04f 0900 	mov.w	r9, #0
 800c820:	4621      	mov	r1, r4
 800c822:	4630      	mov	r0, r6
 800c824:	f000 facc 	bl	800cdc0 <_Bfree>
 800c828:	2f00      	cmp	r7, #0
 800c82a:	f43f aea8 	beq.w	800c57e <_dtoa_r+0x5be>
 800c82e:	f1b9 0f00 	cmp.w	r9, #0
 800c832:	d005      	beq.n	800c840 <_dtoa_r+0x880>
 800c834:	45b9      	cmp	r9, r7
 800c836:	d003      	beq.n	800c840 <_dtoa_r+0x880>
 800c838:	4649      	mov	r1, r9
 800c83a:	4630      	mov	r0, r6
 800c83c:	f000 fac0 	bl	800cdc0 <_Bfree>
 800c840:	4639      	mov	r1, r7
 800c842:	4630      	mov	r0, r6
 800c844:	f000 fabc 	bl	800cdc0 <_Bfree>
 800c848:	e699      	b.n	800c57e <_dtoa_r+0x5be>
 800c84a:	2400      	movs	r4, #0
 800c84c:	4627      	mov	r7, r4
 800c84e:	e7e0      	b.n	800c812 <_dtoa_r+0x852>
 800c850:	46bb      	mov	fp, r7
 800c852:	4604      	mov	r4, r0
 800c854:	4607      	mov	r7, r0
 800c856:	e5c7      	b.n	800c3e8 <_dtoa_r+0x428>
 800c858:	9b07      	ldr	r3, [sp, #28]
 800c85a:	46ca      	mov	sl, r9
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8100 	beq.w	800ca62 <_dtoa_r+0xaa2>
 800c862:	f1b8 0f00 	cmp.w	r8, #0
 800c866:	dd05      	ble.n	800c874 <_dtoa_r+0x8b4>
 800c868:	4639      	mov	r1, r7
 800c86a:	4642      	mov	r2, r8
 800c86c:	4630      	mov	r0, r6
 800c86e:	f000 fc79 	bl	800d164 <__lshift>
 800c872:	4607      	mov	r7, r0
 800c874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c876:	2b00      	cmp	r3, #0
 800c878:	d05d      	beq.n	800c936 <_dtoa_r+0x976>
 800c87a:	6879      	ldr	r1, [r7, #4]
 800c87c:	4630      	mov	r0, r6
 800c87e:	f000 fa5f 	bl	800cd40 <_Balloc>
 800c882:	4680      	mov	r8, r0
 800c884:	b928      	cbnz	r0, 800c892 <_dtoa_r+0x8d2>
 800c886:	4b82      	ldr	r3, [pc, #520]	; (800ca90 <_dtoa_r+0xad0>)
 800c888:	4602      	mov	r2, r0
 800c88a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c88e:	f7ff bbaf 	b.w	800bff0 <_dtoa_r+0x30>
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	3202      	adds	r2, #2
 800c896:	0092      	lsls	r2, r2, #2
 800c898:	f107 010c 	add.w	r1, r7, #12
 800c89c:	300c      	adds	r0, #12
 800c89e:	f7fe fbe8 	bl	800b072 <memcpy>
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4641      	mov	r1, r8
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f000 fc5c 	bl	800d164 <__lshift>
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	9b01      	ldr	r3, [sp, #4]
 800c8b4:	4453      	add	r3, sl
 800c8b6:	9308      	str	r3, [sp, #32]
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	46b9      	mov	r9, r7
 800c8c0:	9307      	str	r3, [sp, #28]
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	f7ff faeb 	bl	800bea8 <quorem>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	3330      	adds	r3, #48	; 0x30
 800c8d6:	9005      	str	r0, [sp, #20]
 800c8d8:	4649      	mov	r1, r9
 800c8da:	4628      	mov	r0, r5
 800c8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8de:	f000 fcb1 	bl	800d244 <__mcmp>
 800c8e2:	463a      	mov	r2, r7
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f000 fcc7 	bl	800d27c <__mdiff>
 800c8ee:	68c2      	ldr	r2, [r0, #12]
 800c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	bb0a      	cbnz	r2, 800c93a <_dtoa_r+0x97a>
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f000 fca3 	bl	800d244 <__mcmp>
 800c8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c900:	4602      	mov	r2, r0
 800c902:	4641      	mov	r1, r8
 800c904:	4630      	mov	r0, r6
 800c906:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c90a:	f000 fa59 	bl	800cdc0 <_Bfree>
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c912:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c916:	ea43 0102 	orr.w	r1, r3, r2
 800c91a:	9b07      	ldr	r3, [sp, #28]
 800c91c:	430b      	orrs	r3, r1
 800c91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c920:	d10d      	bne.n	800c93e <_dtoa_r+0x97e>
 800c922:	2b39      	cmp	r3, #57	; 0x39
 800c924:	d029      	beq.n	800c97a <_dtoa_r+0x9ba>
 800c926:	f1ba 0f00 	cmp.w	sl, #0
 800c92a:	dd01      	ble.n	800c930 <_dtoa_r+0x970>
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	3331      	adds	r3, #49	; 0x31
 800c930:	9a02      	ldr	r2, [sp, #8]
 800c932:	7013      	strb	r3, [r2, #0]
 800c934:	e774      	b.n	800c820 <_dtoa_r+0x860>
 800c936:	4638      	mov	r0, r7
 800c938:	e7b8      	b.n	800c8ac <_dtoa_r+0x8ec>
 800c93a:	2201      	movs	r2, #1
 800c93c:	e7e1      	b.n	800c902 <_dtoa_r+0x942>
 800c93e:	f1ba 0f00 	cmp.w	sl, #0
 800c942:	db06      	blt.n	800c952 <_dtoa_r+0x992>
 800c944:	9906      	ldr	r1, [sp, #24]
 800c946:	ea41 0a0a 	orr.w	sl, r1, sl
 800c94a:	9907      	ldr	r1, [sp, #28]
 800c94c:	ea5a 0101 	orrs.w	r1, sl, r1
 800c950:	d120      	bne.n	800c994 <_dtoa_r+0x9d4>
 800c952:	2a00      	cmp	r2, #0
 800c954:	ddec      	ble.n	800c930 <_dtoa_r+0x970>
 800c956:	4629      	mov	r1, r5
 800c958:	2201      	movs	r2, #1
 800c95a:	4630      	mov	r0, r6
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	f000 fc01 	bl	800d164 <__lshift>
 800c962:	4621      	mov	r1, r4
 800c964:	4605      	mov	r5, r0
 800c966:	f000 fc6d 	bl	800d244 <__mcmp>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	dc02      	bgt.n	800c976 <_dtoa_r+0x9b6>
 800c970:	d1de      	bne.n	800c930 <_dtoa_r+0x970>
 800c972:	07da      	lsls	r2, r3, #31
 800c974:	d5dc      	bpl.n	800c930 <_dtoa_r+0x970>
 800c976:	2b39      	cmp	r3, #57	; 0x39
 800c978:	d1d8      	bne.n	800c92c <_dtoa_r+0x96c>
 800c97a:	9a02      	ldr	r2, [sp, #8]
 800c97c:	2339      	movs	r3, #57	; 0x39
 800c97e:	7013      	strb	r3, [r2, #0]
 800c980:	4643      	mov	r3, r8
 800c982:	4698      	mov	r8, r3
 800c984:	3b01      	subs	r3, #1
 800c986:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c98a:	2a39      	cmp	r2, #57	; 0x39
 800c98c:	d051      	beq.n	800ca32 <_dtoa_r+0xa72>
 800c98e:	3201      	adds	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	e745      	b.n	800c820 <_dtoa_r+0x860>
 800c994:	2a00      	cmp	r2, #0
 800c996:	dd03      	ble.n	800c9a0 <_dtoa_r+0x9e0>
 800c998:	2b39      	cmp	r3, #57	; 0x39
 800c99a:	d0ee      	beq.n	800c97a <_dtoa_r+0x9ba>
 800c99c:	3301      	adds	r3, #1
 800c99e:	e7c7      	b.n	800c930 <_dtoa_r+0x970>
 800c9a0:	9a04      	ldr	r2, [sp, #16]
 800c9a2:	9908      	ldr	r1, [sp, #32]
 800c9a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c9a8:	428a      	cmp	r2, r1
 800c9aa:	d02b      	beq.n	800ca04 <_dtoa_r+0xa44>
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	220a      	movs	r2, #10
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f000 fa26 	bl	800ce04 <__multadd>
 800c9b8:	45b9      	cmp	r9, r7
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	f04f 0300 	mov.w	r3, #0
 800c9c0:	f04f 020a 	mov.w	r2, #10
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	d107      	bne.n	800c9da <_dtoa_r+0xa1a>
 800c9ca:	f000 fa1b 	bl	800ce04 <__multadd>
 800c9ce:	4681      	mov	r9, r0
 800c9d0:	4607      	mov	r7, r0
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	9304      	str	r3, [sp, #16]
 800c9d8:	e774      	b.n	800c8c4 <_dtoa_r+0x904>
 800c9da:	f000 fa13 	bl	800ce04 <__multadd>
 800c9de:	4639      	mov	r1, r7
 800c9e0:	4681      	mov	r9, r0
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	220a      	movs	r2, #10
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 fa0c 	bl	800ce04 <__multadd>
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	e7f0      	b.n	800c9d2 <_dtoa_r+0xa12>
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	9a01      	ldr	r2, [sp, #4]
 800c9f6:	bfcc      	ite	gt
 800c9f8:	46d0      	movgt	r8, sl
 800c9fa:	f04f 0801 	movle.w	r8, #1
 800c9fe:	4490      	add	r8, r2
 800ca00:	f04f 0900 	mov.w	r9, #0
 800ca04:	4629      	mov	r1, r5
 800ca06:	2201      	movs	r2, #1
 800ca08:	4630      	mov	r0, r6
 800ca0a:	9302      	str	r3, [sp, #8]
 800ca0c:	f000 fbaa 	bl	800d164 <__lshift>
 800ca10:	4621      	mov	r1, r4
 800ca12:	4605      	mov	r5, r0
 800ca14:	f000 fc16 	bl	800d244 <__mcmp>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dcb1      	bgt.n	800c980 <_dtoa_r+0x9c0>
 800ca1c:	d102      	bne.n	800ca24 <_dtoa_r+0xa64>
 800ca1e:	9b02      	ldr	r3, [sp, #8]
 800ca20:	07db      	lsls	r3, r3, #31
 800ca22:	d4ad      	bmi.n	800c980 <_dtoa_r+0x9c0>
 800ca24:	4643      	mov	r3, r8
 800ca26:	4698      	mov	r8, r3
 800ca28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca2c:	2a30      	cmp	r2, #48	; 0x30
 800ca2e:	d0fa      	beq.n	800ca26 <_dtoa_r+0xa66>
 800ca30:	e6f6      	b.n	800c820 <_dtoa_r+0x860>
 800ca32:	9a01      	ldr	r2, [sp, #4]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d1a4      	bne.n	800c982 <_dtoa_r+0x9c2>
 800ca38:	f10b 0b01 	add.w	fp, fp, #1
 800ca3c:	2331      	movs	r3, #49	; 0x31
 800ca3e:	e778      	b.n	800c932 <_dtoa_r+0x972>
 800ca40:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <_dtoa_r+0xad4>)
 800ca42:	f7ff bb27 	b.w	800c094 <_dtoa_r+0xd4>
 800ca46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f47f ab03 	bne.w	800c054 <_dtoa_r+0x94>
 800ca4e:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <_dtoa_r+0xad8>)
 800ca50:	f7ff bb20 	b.w	800c094 <_dtoa_r+0xd4>
 800ca54:	f1ba 0f00 	cmp.w	sl, #0
 800ca58:	dc03      	bgt.n	800ca62 <_dtoa_r+0xaa2>
 800ca5a:	9b06      	ldr	r3, [sp, #24]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	f73f aec7 	bgt.w	800c7f0 <_dtoa_r+0x830>
 800ca62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f7ff fa1d 	bl	800bea8 <quorem>
 800ca6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ca72:	f808 3b01 	strb.w	r3, [r8], #1
 800ca76:	9a01      	ldr	r2, [sp, #4]
 800ca78:	eba8 0202 	sub.w	r2, r8, r2
 800ca7c:	4592      	cmp	sl, r2
 800ca7e:	ddb7      	ble.n	800c9f0 <_dtoa_r+0xa30>
 800ca80:	4629      	mov	r1, r5
 800ca82:	2300      	movs	r3, #0
 800ca84:	220a      	movs	r2, #10
 800ca86:	4630      	mov	r0, r6
 800ca88:	f000 f9bc 	bl	800ce04 <__multadd>
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	e7ea      	b.n	800ca66 <_dtoa_r+0xaa6>
 800ca90:	0800e8b7 	.word	0x0800e8b7
 800ca94:	0800e814 	.word	0x0800e814
 800ca98:	0800e838 	.word	0x0800e838

0800ca9c <__sflush_r>:
 800ca9c:	898a      	ldrh	r2, [r1, #12]
 800ca9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa2:	4605      	mov	r5, r0
 800caa4:	0710      	lsls	r0, r2, #28
 800caa6:	460c      	mov	r4, r1
 800caa8:	d458      	bmi.n	800cb5c <__sflush_r+0xc0>
 800caaa:	684b      	ldr	r3, [r1, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dc05      	bgt.n	800cabc <__sflush_r+0x20>
 800cab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	dc02      	bgt.n	800cabc <__sflush_r+0x20>
 800cab6:	2000      	movs	r0, #0
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d0f9      	beq.n	800cab6 <__sflush_r+0x1a>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cac8:	682f      	ldr	r7, [r5, #0]
 800caca:	602b      	str	r3, [r5, #0]
 800cacc:	d032      	beq.n	800cb34 <__sflush_r+0x98>
 800cace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	075a      	lsls	r2, r3, #29
 800cad4:	d505      	bpl.n	800cae2 <__sflush_r+0x46>
 800cad6:	6863      	ldr	r3, [r4, #4]
 800cad8:	1ac0      	subs	r0, r0, r3
 800cada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cadc:	b10b      	cbz	r3, 800cae2 <__sflush_r+0x46>
 800cade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cae0:	1ac0      	subs	r0, r0, r3
 800cae2:	2300      	movs	r3, #0
 800cae4:	4602      	mov	r2, r0
 800cae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cae8:	6a21      	ldr	r1, [r4, #32]
 800caea:	4628      	mov	r0, r5
 800caec:	47b0      	blx	r6
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	d106      	bne.n	800cb02 <__sflush_r+0x66>
 800caf4:	6829      	ldr	r1, [r5, #0]
 800caf6:	291d      	cmp	r1, #29
 800caf8:	d82c      	bhi.n	800cb54 <__sflush_r+0xb8>
 800cafa:	4a2a      	ldr	r2, [pc, #168]	; (800cba4 <__sflush_r+0x108>)
 800cafc:	40ca      	lsrs	r2, r1
 800cafe:	07d6      	lsls	r6, r2, #31
 800cb00:	d528      	bpl.n	800cb54 <__sflush_r+0xb8>
 800cb02:	2200      	movs	r2, #0
 800cb04:	6062      	str	r2, [r4, #4]
 800cb06:	04d9      	lsls	r1, r3, #19
 800cb08:	6922      	ldr	r2, [r4, #16]
 800cb0a:	6022      	str	r2, [r4, #0]
 800cb0c:	d504      	bpl.n	800cb18 <__sflush_r+0x7c>
 800cb0e:	1c42      	adds	r2, r0, #1
 800cb10:	d101      	bne.n	800cb16 <__sflush_r+0x7a>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	b903      	cbnz	r3, 800cb18 <__sflush_r+0x7c>
 800cb16:	6560      	str	r0, [r4, #84]	; 0x54
 800cb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb1a:	602f      	str	r7, [r5, #0]
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	d0ca      	beq.n	800cab6 <__sflush_r+0x1a>
 800cb20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb24:	4299      	cmp	r1, r3
 800cb26:	d002      	beq.n	800cb2e <__sflush_r+0x92>
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f000 fca3 	bl	800d474 <_free_r>
 800cb2e:	2000      	movs	r0, #0
 800cb30:	6360      	str	r0, [r4, #52]	; 0x34
 800cb32:	e7c1      	b.n	800cab8 <__sflush_r+0x1c>
 800cb34:	6a21      	ldr	r1, [r4, #32]
 800cb36:	2301      	movs	r3, #1
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b0      	blx	r6
 800cb3c:	1c41      	adds	r1, r0, #1
 800cb3e:	d1c7      	bne.n	800cad0 <__sflush_r+0x34>
 800cb40:	682b      	ldr	r3, [r5, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0c4      	beq.n	800cad0 <__sflush_r+0x34>
 800cb46:	2b1d      	cmp	r3, #29
 800cb48:	d001      	beq.n	800cb4e <__sflush_r+0xb2>
 800cb4a:	2b16      	cmp	r3, #22
 800cb4c:	d101      	bne.n	800cb52 <__sflush_r+0xb6>
 800cb4e:	602f      	str	r7, [r5, #0]
 800cb50:	e7b1      	b.n	800cab6 <__sflush_r+0x1a>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	e7ad      	b.n	800cab8 <__sflush_r+0x1c>
 800cb5c:	690f      	ldr	r7, [r1, #16]
 800cb5e:	2f00      	cmp	r7, #0
 800cb60:	d0a9      	beq.n	800cab6 <__sflush_r+0x1a>
 800cb62:	0793      	lsls	r3, r2, #30
 800cb64:	680e      	ldr	r6, [r1, #0]
 800cb66:	bf08      	it	eq
 800cb68:	694b      	ldreq	r3, [r1, #20]
 800cb6a:	600f      	str	r7, [r1, #0]
 800cb6c:	bf18      	it	ne
 800cb6e:	2300      	movne	r3, #0
 800cb70:	eba6 0807 	sub.w	r8, r6, r7
 800cb74:	608b      	str	r3, [r1, #8]
 800cb76:	f1b8 0f00 	cmp.w	r8, #0
 800cb7a:	dd9c      	ble.n	800cab6 <__sflush_r+0x1a>
 800cb7c:	6a21      	ldr	r1, [r4, #32]
 800cb7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb80:	4643      	mov	r3, r8
 800cb82:	463a      	mov	r2, r7
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b0      	blx	r6
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	dc06      	bgt.n	800cb9a <__sflush_r+0xfe>
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	e78e      	b.n	800cab8 <__sflush_r+0x1c>
 800cb9a:	4407      	add	r7, r0
 800cb9c:	eba8 0800 	sub.w	r8, r8, r0
 800cba0:	e7e9      	b.n	800cb76 <__sflush_r+0xda>
 800cba2:	bf00      	nop
 800cba4:	20400001 	.word	0x20400001

0800cba8 <_fflush_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	690b      	ldr	r3, [r1, #16]
 800cbac:	4605      	mov	r5, r0
 800cbae:	460c      	mov	r4, r1
 800cbb0:	b913      	cbnz	r3, 800cbb8 <_fflush_r+0x10>
 800cbb2:	2500      	movs	r5, #0
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
 800cbb8:	b118      	cbz	r0, 800cbc2 <_fflush_r+0x1a>
 800cbba:	6983      	ldr	r3, [r0, #24]
 800cbbc:	b90b      	cbnz	r3, 800cbc2 <_fflush_r+0x1a>
 800cbbe:	f7fe f993 	bl	800aee8 <__sinit>
 800cbc2:	4b14      	ldr	r3, [pc, #80]	; (800cc14 <_fflush_r+0x6c>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	d11b      	bne.n	800cc00 <_fflush_r+0x58>
 800cbc8:	686c      	ldr	r4, [r5, #4]
 800cbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d0ef      	beq.n	800cbb2 <_fflush_r+0xa>
 800cbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbd4:	07d0      	lsls	r0, r2, #31
 800cbd6:	d404      	bmi.n	800cbe2 <_fflush_r+0x3a>
 800cbd8:	0599      	lsls	r1, r3, #22
 800cbda:	d402      	bmi.n	800cbe2 <_fflush_r+0x3a>
 800cbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbde:	f7fe fa46 	bl	800b06e <__retarget_lock_acquire_recursive>
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	f7ff ff59 	bl	800ca9c <__sflush_r>
 800cbea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbec:	07da      	lsls	r2, r3, #31
 800cbee:	4605      	mov	r5, r0
 800cbf0:	d4e0      	bmi.n	800cbb4 <_fflush_r+0xc>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	059b      	lsls	r3, r3, #22
 800cbf6:	d4dd      	bmi.n	800cbb4 <_fflush_r+0xc>
 800cbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbfa:	f7fe fa39 	bl	800b070 <__retarget_lock_release_recursive>
 800cbfe:	e7d9      	b.n	800cbb4 <_fflush_r+0xc>
 800cc00:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <_fflush_r+0x70>)
 800cc02:	429c      	cmp	r4, r3
 800cc04:	d101      	bne.n	800cc0a <_fflush_r+0x62>
 800cc06:	68ac      	ldr	r4, [r5, #8]
 800cc08:	e7df      	b.n	800cbca <_fflush_r+0x22>
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <_fflush_r+0x74>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	bf08      	it	eq
 800cc10:	68ec      	ldreq	r4, [r5, #12]
 800cc12:	e7da      	b.n	800cbca <_fflush_r+0x22>
 800cc14:	0800e7c0 	.word	0x0800e7c0
 800cc18:	0800e7e0 	.word	0x0800e7e0
 800cc1c:	0800e7a0 	.word	0x0800e7a0

0800cc20 <_localeconv_r>:
 800cc20:	4800      	ldr	r0, [pc, #0]	; (800cc24 <_localeconv_r+0x4>)
 800cc22:	4770      	bx	lr
 800cc24:	24000168 	.word	0x24000168

0800cc28 <_lseek_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d07      	ldr	r5, [pc, #28]	; (800cc48 <_lseek_r+0x20>)
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4608      	mov	r0, r1
 800cc30:	4611      	mov	r1, r2
 800cc32:	2200      	movs	r2, #0
 800cc34:	602a      	str	r2, [r5, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	f7f5 f967 	bl	8001f0a <_lseek>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d102      	bne.n	800cc46 <_lseek_r+0x1e>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	b103      	cbz	r3, 800cc46 <_lseek_r+0x1e>
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	24004e68 	.word	0x24004e68

0800cc4c <__swhatbuf_r>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	460e      	mov	r6, r1
 800cc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc54:	2900      	cmp	r1, #0
 800cc56:	b096      	sub	sp, #88	; 0x58
 800cc58:	4614      	mov	r4, r2
 800cc5a:	461d      	mov	r5, r3
 800cc5c:	da08      	bge.n	800cc70 <__swhatbuf_r+0x24>
 800cc5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	602a      	str	r2, [r5, #0]
 800cc66:	061a      	lsls	r2, r3, #24
 800cc68:	d410      	bmi.n	800cc8c <__swhatbuf_r+0x40>
 800cc6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc6e:	e00e      	b.n	800cc8e <__swhatbuf_r+0x42>
 800cc70:	466a      	mov	r2, sp
 800cc72:	f000 fde7 	bl	800d844 <_fstat_r>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	dbf1      	blt.n	800cc5e <__swhatbuf_r+0x12>
 800cc7a:	9a01      	ldr	r2, [sp, #4]
 800cc7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc84:	425a      	negs	r2, r3
 800cc86:	415a      	adcs	r2, r3
 800cc88:	602a      	str	r2, [r5, #0]
 800cc8a:	e7ee      	b.n	800cc6a <__swhatbuf_r+0x1e>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	2000      	movs	r0, #0
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	b016      	add	sp, #88	; 0x58
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc98 <__smakebuf_r>:
 800cc98:	898b      	ldrh	r3, [r1, #12]
 800cc9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc9c:	079d      	lsls	r5, r3, #30
 800cc9e:	4606      	mov	r6, r0
 800cca0:	460c      	mov	r4, r1
 800cca2:	d507      	bpl.n	800ccb4 <__smakebuf_r+0x1c>
 800cca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	2301      	movs	r3, #1
 800ccae:	6163      	str	r3, [r4, #20]
 800ccb0:	b002      	add	sp, #8
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	ab01      	add	r3, sp, #4
 800ccb6:	466a      	mov	r2, sp
 800ccb8:	f7ff ffc8 	bl	800cc4c <__swhatbuf_r>
 800ccbc:	9900      	ldr	r1, [sp, #0]
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7fe fa0d 	bl	800b0e0 <_malloc_r>
 800ccc6:	b948      	cbnz	r0, 800ccdc <__smakebuf_r+0x44>
 800ccc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cccc:	059a      	lsls	r2, r3, #22
 800ccce:	d4ef      	bmi.n	800ccb0 <__smakebuf_r+0x18>
 800ccd0:	f023 0303 	bic.w	r3, r3, #3
 800ccd4:	f043 0302 	orr.w	r3, r3, #2
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	e7e3      	b.n	800cca4 <__smakebuf_r+0xc>
 800ccdc:	4b0d      	ldr	r3, [pc, #52]	; (800cd14 <__smakebuf_r+0x7c>)
 800ccde:	62b3      	str	r3, [r6, #40]	; 0x28
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	6020      	str	r0, [r4, #0]
 800cce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	9b00      	ldr	r3, [sp, #0]
 800ccec:	6163      	str	r3, [r4, #20]
 800ccee:	9b01      	ldr	r3, [sp, #4]
 800ccf0:	6120      	str	r0, [r4, #16]
 800ccf2:	b15b      	cbz	r3, 800cd0c <__smakebuf_r+0x74>
 800ccf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f000 fdb5 	bl	800d868 <_isatty_r>
 800ccfe:	b128      	cbz	r0, 800cd0c <__smakebuf_r+0x74>
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	f023 0303 	bic.w	r3, r3, #3
 800cd06:	f043 0301 	orr.w	r3, r3, #1
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	89a0      	ldrh	r0, [r4, #12]
 800cd0e:	4305      	orrs	r5, r0
 800cd10:	81a5      	strh	r5, [r4, #12]
 800cd12:	e7cd      	b.n	800ccb0 <__smakebuf_r+0x18>
 800cd14:	0800ae81 	.word	0x0800ae81

0800cd18 <malloc>:
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <malloc+0xc>)
 800cd1a:	4601      	mov	r1, r0
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	f7fe b9df 	b.w	800b0e0 <_malloc_r>
 800cd22:	bf00      	nop
 800cd24:	24000014 	.word	0x24000014

0800cd28 <__malloc_lock>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__malloc_lock+0x8>)
 800cd2a:	f7fe b9a0 	b.w	800b06e <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	24004e5c 	.word	0x24004e5c

0800cd34 <__malloc_unlock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_unlock+0x8>)
 800cd36:	f7fe b99b 	b.w	800b070 <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	24004e5c 	.word	0x24004e5c

0800cd40 <_Balloc>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	b976      	cbnz	r6, 800cd68 <_Balloc+0x28>
 800cd4a:	2010      	movs	r0, #16
 800cd4c:	f7ff ffe4 	bl	800cd18 <malloc>
 800cd50:	4602      	mov	r2, r0
 800cd52:	6260      	str	r0, [r4, #36]	; 0x24
 800cd54:	b920      	cbnz	r0, 800cd60 <_Balloc+0x20>
 800cd56:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <_Balloc+0x78>)
 800cd58:	4818      	ldr	r0, [pc, #96]	; (800cdbc <_Balloc+0x7c>)
 800cd5a:	2166      	movs	r1, #102	; 0x66
 800cd5c:	f000 fd42 	bl	800d7e4 <__assert_func>
 800cd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd64:	6006      	str	r6, [r0, #0]
 800cd66:	60c6      	str	r6, [r0, #12]
 800cd68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd6a:	68f3      	ldr	r3, [r6, #12]
 800cd6c:	b183      	cbz	r3, 800cd90 <_Balloc+0x50>
 800cd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd76:	b9b8      	cbnz	r0, 800cda8 <_Balloc+0x68>
 800cd78:	2101      	movs	r1, #1
 800cd7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd7e:	1d72      	adds	r2, r6, #5
 800cd80:	0092      	lsls	r2, r2, #2
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fb60 	bl	800d448 <_calloc_r>
 800cd88:	b160      	cbz	r0, 800cda4 <_Balloc+0x64>
 800cd8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd8e:	e00e      	b.n	800cdae <_Balloc+0x6e>
 800cd90:	2221      	movs	r2, #33	; 0x21
 800cd92:	2104      	movs	r1, #4
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 fb57 	bl	800d448 <_calloc_r>
 800cd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd9c:	60f0      	str	r0, [r6, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e4      	bne.n	800cd6e <_Balloc+0x2e>
 800cda4:	2000      	movs	r0, #0
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	6802      	ldr	r2, [r0, #0]
 800cdaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdb4:	e7f7      	b.n	800cda6 <_Balloc+0x66>
 800cdb6:	bf00      	nop
 800cdb8:	0800e845 	.word	0x0800e845
 800cdbc:	0800e8c8 	.word	0x0800e8c8

0800cdc0 <_Bfree>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b976      	cbnz	r6, 800cde8 <_Bfree+0x28>
 800cdca:	2010      	movs	r0, #16
 800cdcc:	f7ff ffa4 	bl	800cd18 <malloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	6268      	str	r0, [r5, #36]	; 0x24
 800cdd4:	b920      	cbnz	r0, 800cde0 <_Bfree+0x20>
 800cdd6:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <_Bfree+0x3c>)
 800cdd8:	4809      	ldr	r0, [pc, #36]	; (800ce00 <_Bfree+0x40>)
 800cdda:	218a      	movs	r1, #138	; 0x8a
 800cddc:	f000 fd02 	bl	800d7e4 <__assert_func>
 800cde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde4:	6006      	str	r6, [r0, #0]
 800cde6:	60c6      	str	r6, [r0, #12]
 800cde8:	b13c      	cbz	r4, 800cdfa <_Bfree+0x3a>
 800cdea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdec:	6862      	ldr	r2, [r4, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdf4:	6021      	str	r1, [r4, #0]
 800cdf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	0800e845 	.word	0x0800e845
 800ce00:	0800e8c8 	.word	0x0800e8c8

0800ce04 <__multadd>:
 800ce04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	690d      	ldr	r5, [r1, #16]
 800ce0a:	4607      	mov	r7, r0
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	461e      	mov	r6, r3
 800ce10:	f101 0c14 	add.w	ip, r1, #20
 800ce14:	2000      	movs	r0, #0
 800ce16:	f8dc 3000 	ldr.w	r3, [ip]
 800ce1a:	b299      	uxth	r1, r3
 800ce1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce20:	0c1e      	lsrs	r6, r3, #16
 800ce22:	0c0b      	lsrs	r3, r1, #16
 800ce24:	fb02 3306 	mla	r3, r2, r6, r3
 800ce28:	b289      	uxth	r1, r1
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce30:	4285      	cmp	r5, r0
 800ce32:	f84c 1b04 	str.w	r1, [ip], #4
 800ce36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce3a:	dcec      	bgt.n	800ce16 <__multadd+0x12>
 800ce3c:	b30e      	cbz	r6, 800ce82 <__multadd+0x7e>
 800ce3e:	68a3      	ldr	r3, [r4, #8]
 800ce40:	42ab      	cmp	r3, r5
 800ce42:	dc19      	bgt.n	800ce78 <__multadd+0x74>
 800ce44:	6861      	ldr	r1, [r4, #4]
 800ce46:	4638      	mov	r0, r7
 800ce48:	3101      	adds	r1, #1
 800ce4a:	f7ff ff79 	bl	800cd40 <_Balloc>
 800ce4e:	4680      	mov	r8, r0
 800ce50:	b928      	cbnz	r0, 800ce5e <__multadd+0x5a>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <__multadd+0x84>)
 800ce56:	480d      	ldr	r0, [pc, #52]	; (800ce8c <__multadd+0x88>)
 800ce58:	21b5      	movs	r1, #181	; 0xb5
 800ce5a:	f000 fcc3 	bl	800d7e4 <__assert_func>
 800ce5e:	6922      	ldr	r2, [r4, #16]
 800ce60:	3202      	adds	r2, #2
 800ce62:	f104 010c 	add.w	r1, r4, #12
 800ce66:	0092      	lsls	r2, r2, #2
 800ce68:	300c      	adds	r0, #12
 800ce6a:	f7fe f902 	bl	800b072 <memcpy>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7ff ffa5 	bl	800cdc0 <_Bfree>
 800ce76:	4644      	mov	r4, r8
 800ce78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce7c:	3501      	adds	r5, #1
 800ce7e:	615e      	str	r6, [r3, #20]
 800ce80:	6125      	str	r5, [r4, #16]
 800ce82:	4620      	mov	r0, r4
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	0800e8b7 	.word	0x0800e8b7
 800ce8c:	0800e8c8 	.word	0x0800e8c8

0800ce90 <__hi0bits>:
 800ce90:	0c03      	lsrs	r3, r0, #16
 800ce92:	041b      	lsls	r3, r3, #16
 800ce94:	b9d3      	cbnz	r3, 800cecc <__hi0bits+0x3c>
 800ce96:	0400      	lsls	r0, r0, #16
 800ce98:	2310      	movs	r3, #16
 800ce9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce9e:	bf04      	itt	eq
 800cea0:	0200      	lsleq	r0, r0, #8
 800cea2:	3308      	addeq	r3, #8
 800cea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cea8:	bf04      	itt	eq
 800ceaa:	0100      	lsleq	r0, r0, #4
 800ceac:	3304      	addeq	r3, #4
 800ceae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ceb2:	bf04      	itt	eq
 800ceb4:	0080      	lsleq	r0, r0, #2
 800ceb6:	3302      	addeq	r3, #2
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	db05      	blt.n	800cec8 <__hi0bits+0x38>
 800cebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cec0:	f103 0301 	add.w	r3, r3, #1
 800cec4:	bf08      	it	eq
 800cec6:	2320      	moveq	r3, #32
 800cec8:	4618      	mov	r0, r3
 800ceca:	4770      	bx	lr
 800cecc:	2300      	movs	r3, #0
 800cece:	e7e4      	b.n	800ce9a <__hi0bits+0xa>

0800ced0 <__lo0bits>:
 800ced0:	6803      	ldr	r3, [r0, #0]
 800ced2:	f013 0207 	ands.w	r2, r3, #7
 800ced6:	4601      	mov	r1, r0
 800ced8:	d00b      	beq.n	800cef2 <__lo0bits+0x22>
 800ceda:	07da      	lsls	r2, r3, #31
 800cedc:	d423      	bmi.n	800cf26 <__lo0bits+0x56>
 800cede:	0798      	lsls	r0, r3, #30
 800cee0:	bf49      	itett	mi
 800cee2:	085b      	lsrmi	r3, r3, #1
 800cee4:	089b      	lsrpl	r3, r3, #2
 800cee6:	2001      	movmi	r0, #1
 800cee8:	600b      	strmi	r3, [r1, #0]
 800ceea:	bf5c      	itt	pl
 800ceec:	600b      	strpl	r3, [r1, #0]
 800ceee:	2002      	movpl	r0, #2
 800cef0:	4770      	bx	lr
 800cef2:	b298      	uxth	r0, r3
 800cef4:	b9a8      	cbnz	r0, 800cf22 <__lo0bits+0x52>
 800cef6:	0c1b      	lsrs	r3, r3, #16
 800cef8:	2010      	movs	r0, #16
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	b90a      	cbnz	r2, 800cf02 <__lo0bits+0x32>
 800cefe:	3008      	adds	r0, #8
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	071a      	lsls	r2, r3, #28
 800cf04:	bf04      	itt	eq
 800cf06:	091b      	lsreq	r3, r3, #4
 800cf08:	3004      	addeq	r0, #4
 800cf0a:	079a      	lsls	r2, r3, #30
 800cf0c:	bf04      	itt	eq
 800cf0e:	089b      	lsreq	r3, r3, #2
 800cf10:	3002      	addeq	r0, #2
 800cf12:	07da      	lsls	r2, r3, #31
 800cf14:	d403      	bmi.n	800cf1e <__lo0bits+0x4e>
 800cf16:	085b      	lsrs	r3, r3, #1
 800cf18:	f100 0001 	add.w	r0, r0, #1
 800cf1c:	d005      	beq.n	800cf2a <__lo0bits+0x5a>
 800cf1e:	600b      	str	r3, [r1, #0]
 800cf20:	4770      	bx	lr
 800cf22:	4610      	mov	r0, r2
 800cf24:	e7e9      	b.n	800cefa <__lo0bits+0x2a>
 800cf26:	2000      	movs	r0, #0
 800cf28:	4770      	bx	lr
 800cf2a:	2020      	movs	r0, #32
 800cf2c:	4770      	bx	lr
	...

0800cf30 <__i2b>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	2101      	movs	r1, #1
 800cf36:	f7ff ff03 	bl	800cd40 <_Balloc>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	b928      	cbnz	r0, 800cf4a <__i2b+0x1a>
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <__i2b+0x24>)
 800cf40:	4805      	ldr	r0, [pc, #20]	; (800cf58 <__i2b+0x28>)
 800cf42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf46:	f000 fc4d 	bl	800d7e4 <__assert_func>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	6144      	str	r4, [r0, #20]
 800cf4e:	6103      	str	r3, [r0, #16]
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	bf00      	nop
 800cf54:	0800e8b7 	.word	0x0800e8b7
 800cf58:	0800e8c8 	.word	0x0800e8c8

0800cf5c <__multiply>:
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4691      	mov	r9, r2
 800cf62:	690a      	ldr	r2, [r1, #16]
 800cf64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	bfb8      	it	lt
 800cf6c:	460b      	movlt	r3, r1
 800cf6e:	460c      	mov	r4, r1
 800cf70:	bfbc      	itt	lt
 800cf72:	464c      	movlt	r4, r9
 800cf74:	4699      	movlt	r9, r3
 800cf76:	6927      	ldr	r7, [r4, #16]
 800cf78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	6861      	ldr	r1, [r4, #4]
 800cf80:	eb07 060a 	add.w	r6, r7, sl
 800cf84:	42b3      	cmp	r3, r6
 800cf86:	b085      	sub	sp, #20
 800cf88:	bfb8      	it	lt
 800cf8a:	3101      	addlt	r1, #1
 800cf8c:	f7ff fed8 	bl	800cd40 <_Balloc>
 800cf90:	b930      	cbnz	r0, 800cfa0 <__multiply+0x44>
 800cf92:	4602      	mov	r2, r0
 800cf94:	4b44      	ldr	r3, [pc, #272]	; (800d0a8 <__multiply+0x14c>)
 800cf96:	4845      	ldr	r0, [pc, #276]	; (800d0ac <__multiply+0x150>)
 800cf98:	f240 115d 	movw	r1, #349	; 0x15d
 800cf9c:	f000 fc22 	bl	800d7e4 <__assert_func>
 800cfa0:	f100 0514 	add.w	r5, r0, #20
 800cfa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	2200      	movs	r2, #0
 800cfac:	4543      	cmp	r3, r8
 800cfae:	d321      	bcc.n	800cff4 <__multiply+0x98>
 800cfb0:	f104 0314 	add.w	r3, r4, #20
 800cfb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfb8:	f109 0314 	add.w	r3, r9, #20
 800cfbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfc0:	9202      	str	r2, [sp, #8]
 800cfc2:	1b3a      	subs	r2, r7, r4
 800cfc4:	3a15      	subs	r2, #21
 800cfc6:	f022 0203 	bic.w	r2, r2, #3
 800cfca:	3204      	adds	r2, #4
 800cfcc:	f104 0115 	add.w	r1, r4, #21
 800cfd0:	428f      	cmp	r7, r1
 800cfd2:	bf38      	it	cc
 800cfd4:	2204      	movcc	r2, #4
 800cfd6:	9201      	str	r2, [sp, #4]
 800cfd8:	9a02      	ldr	r2, [sp, #8]
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d80c      	bhi.n	800cffa <__multiply+0x9e>
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	dd03      	ble.n	800cfec <__multiply+0x90>
 800cfe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d05a      	beq.n	800d0a2 <__multiply+0x146>
 800cfec:	6106      	str	r6, [r0, #16]
 800cfee:	b005      	add	sp, #20
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	f843 2b04 	str.w	r2, [r3], #4
 800cff8:	e7d8      	b.n	800cfac <__multiply+0x50>
 800cffa:	f8b3 a000 	ldrh.w	sl, [r3]
 800cffe:	f1ba 0f00 	cmp.w	sl, #0
 800d002:	d024      	beq.n	800d04e <__multiply+0xf2>
 800d004:	f104 0e14 	add.w	lr, r4, #20
 800d008:	46a9      	mov	r9, r5
 800d00a:	f04f 0c00 	mov.w	ip, #0
 800d00e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d012:	f8d9 1000 	ldr.w	r1, [r9]
 800d016:	fa1f fb82 	uxth.w	fp, r2
 800d01a:	b289      	uxth	r1, r1
 800d01c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d024:	f8d9 2000 	ldr.w	r2, [r9]
 800d028:	4461      	add	r1, ip
 800d02a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d02e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d036:	b289      	uxth	r1, r1
 800d038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d03c:	4577      	cmp	r7, lr
 800d03e:	f849 1b04 	str.w	r1, [r9], #4
 800d042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d046:	d8e2      	bhi.n	800d00e <__multiply+0xb2>
 800d048:	9a01      	ldr	r2, [sp, #4]
 800d04a:	f845 c002 	str.w	ip, [r5, r2]
 800d04e:	9a03      	ldr	r2, [sp, #12]
 800d050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d054:	3304      	adds	r3, #4
 800d056:	f1b9 0f00 	cmp.w	r9, #0
 800d05a:	d020      	beq.n	800d09e <__multiply+0x142>
 800d05c:	6829      	ldr	r1, [r5, #0]
 800d05e:	f104 0c14 	add.w	ip, r4, #20
 800d062:	46ae      	mov	lr, r5
 800d064:	f04f 0a00 	mov.w	sl, #0
 800d068:	f8bc b000 	ldrh.w	fp, [ip]
 800d06c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d070:	fb09 220b 	mla	r2, r9, fp, r2
 800d074:	4492      	add	sl, r2
 800d076:	b289      	uxth	r1, r1
 800d078:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d07c:	f84e 1b04 	str.w	r1, [lr], #4
 800d080:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d084:	f8be 1000 	ldrh.w	r1, [lr]
 800d088:	0c12      	lsrs	r2, r2, #16
 800d08a:	fb09 1102 	mla	r1, r9, r2, r1
 800d08e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d092:	4567      	cmp	r7, ip
 800d094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d098:	d8e6      	bhi.n	800d068 <__multiply+0x10c>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	50a9      	str	r1, [r5, r2]
 800d09e:	3504      	adds	r5, #4
 800d0a0:	e79a      	b.n	800cfd8 <__multiply+0x7c>
 800d0a2:	3e01      	subs	r6, #1
 800d0a4:	e79c      	b.n	800cfe0 <__multiply+0x84>
 800d0a6:	bf00      	nop
 800d0a8:	0800e8b7 	.word	0x0800e8b7
 800d0ac:	0800e8c8 	.word	0x0800e8c8

0800d0b0 <__pow5mult>:
 800d0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	4615      	mov	r5, r2
 800d0b6:	f012 0203 	ands.w	r2, r2, #3
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	460f      	mov	r7, r1
 800d0be:	d007      	beq.n	800d0d0 <__pow5mult+0x20>
 800d0c0:	4c25      	ldr	r4, [pc, #148]	; (800d158 <__pow5mult+0xa8>)
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ca:	f7ff fe9b 	bl	800ce04 <__multadd>
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	10ad      	asrs	r5, r5, #2
 800d0d2:	d03d      	beq.n	800d150 <__pow5mult+0xa0>
 800d0d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0d6:	b97c      	cbnz	r4, 800d0f8 <__pow5mult+0x48>
 800d0d8:	2010      	movs	r0, #16
 800d0da:	f7ff fe1d 	bl	800cd18 <malloc>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	6270      	str	r0, [r6, #36]	; 0x24
 800d0e2:	b928      	cbnz	r0, 800d0f0 <__pow5mult+0x40>
 800d0e4:	4b1d      	ldr	r3, [pc, #116]	; (800d15c <__pow5mult+0xac>)
 800d0e6:	481e      	ldr	r0, [pc, #120]	; (800d160 <__pow5mult+0xb0>)
 800d0e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0ec:	f000 fb7a 	bl	800d7e4 <__assert_func>
 800d0f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0f4:	6004      	str	r4, [r0, #0]
 800d0f6:	60c4      	str	r4, [r0, #12]
 800d0f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d100:	b94c      	cbnz	r4, 800d116 <__pow5mult+0x66>
 800d102:	f240 2171 	movw	r1, #625	; 0x271
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff ff12 	bl	800cf30 <__i2b>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d112:	4604      	mov	r4, r0
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	f04f 0900 	mov.w	r9, #0
 800d11a:	07eb      	lsls	r3, r5, #31
 800d11c:	d50a      	bpl.n	800d134 <__pow5mult+0x84>
 800d11e:	4639      	mov	r1, r7
 800d120:	4622      	mov	r2, r4
 800d122:	4630      	mov	r0, r6
 800d124:	f7ff ff1a 	bl	800cf5c <__multiply>
 800d128:	4639      	mov	r1, r7
 800d12a:	4680      	mov	r8, r0
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7ff fe47 	bl	800cdc0 <_Bfree>
 800d132:	4647      	mov	r7, r8
 800d134:	106d      	asrs	r5, r5, #1
 800d136:	d00b      	beq.n	800d150 <__pow5mult+0xa0>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	b938      	cbnz	r0, 800d14c <__pow5mult+0x9c>
 800d13c:	4622      	mov	r2, r4
 800d13e:	4621      	mov	r1, r4
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff ff0b 	bl	800cf5c <__multiply>
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	f8c0 9000 	str.w	r9, [r0]
 800d14c:	4604      	mov	r4, r0
 800d14e:	e7e4      	b.n	800d11a <__pow5mult+0x6a>
 800d150:	4638      	mov	r0, r7
 800d152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d156:	bf00      	nop
 800d158:	0800ea18 	.word	0x0800ea18
 800d15c:	0800e845 	.word	0x0800e845
 800d160:	0800e8c8 	.word	0x0800e8c8

0800d164 <__lshift>:
 800d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d168:	460c      	mov	r4, r1
 800d16a:	6849      	ldr	r1, [r1, #4]
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	4607      	mov	r7, r0
 800d176:	4691      	mov	r9, r2
 800d178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d17c:	f108 0601 	add.w	r6, r8, #1
 800d180:	42b3      	cmp	r3, r6
 800d182:	db0b      	blt.n	800d19c <__lshift+0x38>
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff fddb 	bl	800cd40 <_Balloc>
 800d18a:	4605      	mov	r5, r0
 800d18c:	b948      	cbnz	r0, 800d1a2 <__lshift+0x3e>
 800d18e:	4602      	mov	r2, r0
 800d190:	4b2a      	ldr	r3, [pc, #168]	; (800d23c <__lshift+0xd8>)
 800d192:	482b      	ldr	r0, [pc, #172]	; (800d240 <__lshift+0xdc>)
 800d194:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d198:	f000 fb24 	bl	800d7e4 <__assert_func>
 800d19c:	3101      	adds	r1, #1
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	e7ee      	b.n	800d180 <__lshift+0x1c>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f100 0114 	add.w	r1, r0, #20
 800d1a8:	f100 0210 	add.w	r2, r0, #16
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	4553      	cmp	r3, sl
 800d1b0:	db37      	blt.n	800d222 <__lshift+0xbe>
 800d1b2:	6920      	ldr	r0, [r4, #16]
 800d1b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b8:	f104 0314 	add.w	r3, r4, #20
 800d1bc:	f019 091f 	ands.w	r9, r9, #31
 800d1c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1c8:	d02f      	beq.n	800d22a <__lshift+0xc6>
 800d1ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d1ce:	468a      	mov	sl, r1
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	fa02 f209 	lsl.w	r2, r2, r9
 800d1da:	ea42 020c 	orr.w	r2, r2, ip
 800d1de:	f84a 2b04 	str.w	r2, [sl], #4
 800d1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e6:	4298      	cmp	r0, r3
 800d1e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1ec:	d8f2      	bhi.n	800d1d4 <__lshift+0x70>
 800d1ee:	1b03      	subs	r3, r0, r4
 800d1f0:	3b15      	subs	r3, #21
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	f104 0215 	add.w	r2, r4, #21
 800d1fc:	4290      	cmp	r0, r2
 800d1fe:	bf38      	it	cc
 800d200:	2304      	movcc	r3, #4
 800d202:	f841 c003 	str.w	ip, [r1, r3]
 800d206:	f1bc 0f00 	cmp.w	ip, #0
 800d20a:	d001      	beq.n	800d210 <__lshift+0xac>
 800d20c:	f108 0602 	add.w	r6, r8, #2
 800d210:	3e01      	subs	r6, #1
 800d212:	4638      	mov	r0, r7
 800d214:	612e      	str	r6, [r5, #16]
 800d216:	4621      	mov	r1, r4
 800d218:	f7ff fdd2 	bl	800cdc0 <_Bfree>
 800d21c:	4628      	mov	r0, r5
 800d21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d222:	f842 0f04 	str.w	r0, [r2, #4]!
 800d226:	3301      	adds	r3, #1
 800d228:	e7c1      	b.n	800d1ae <__lshift+0x4a>
 800d22a:	3904      	subs	r1, #4
 800d22c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d230:	f841 2f04 	str.w	r2, [r1, #4]!
 800d234:	4298      	cmp	r0, r3
 800d236:	d8f9      	bhi.n	800d22c <__lshift+0xc8>
 800d238:	e7ea      	b.n	800d210 <__lshift+0xac>
 800d23a:	bf00      	nop
 800d23c:	0800e8b7 	.word	0x0800e8b7
 800d240:	0800e8c8 	.word	0x0800e8c8

0800d244 <__mcmp>:
 800d244:	b530      	push	{r4, r5, lr}
 800d246:	6902      	ldr	r2, [r0, #16]
 800d248:	690c      	ldr	r4, [r1, #16]
 800d24a:	1b12      	subs	r2, r2, r4
 800d24c:	d10e      	bne.n	800d26c <__mcmp+0x28>
 800d24e:	f100 0314 	add.w	r3, r0, #20
 800d252:	3114      	adds	r1, #20
 800d254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d25c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d264:	42a5      	cmp	r5, r4
 800d266:	d003      	beq.n	800d270 <__mcmp+0x2c>
 800d268:	d305      	bcc.n	800d276 <__mcmp+0x32>
 800d26a:	2201      	movs	r2, #1
 800d26c:	4610      	mov	r0, r2
 800d26e:	bd30      	pop	{r4, r5, pc}
 800d270:	4283      	cmp	r3, r0
 800d272:	d3f3      	bcc.n	800d25c <__mcmp+0x18>
 800d274:	e7fa      	b.n	800d26c <__mcmp+0x28>
 800d276:	f04f 32ff 	mov.w	r2, #4294967295
 800d27a:	e7f7      	b.n	800d26c <__mcmp+0x28>

0800d27c <__mdiff>:
 800d27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d280:	460c      	mov	r4, r1
 800d282:	4606      	mov	r6, r0
 800d284:	4611      	mov	r1, r2
 800d286:	4620      	mov	r0, r4
 800d288:	4690      	mov	r8, r2
 800d28a:	f7ff ffdb 	bl	800d244 <__mcmp>
 800d28e:	1e05      	subs	r5, r0, #0
 800d290:	d110      	bne.n	800d2b4 <__mdiff+0x38>
 800d292:	4629      	mov	r1, r5
 800d294:	4630      	mov	r0, r6
 800d296:	f7ff fd53 	bl	800cd40 <_Balloc>
 800d29a:	b930      	cbnz	r0, 800d2aa <__mdiff+0x2e>
 800d29c:	4b3a      	ldr	r3, [pc, #232]	; (800d388 <__mdiff+0x10c>)
 800d29e:	4602      	mov	r2, r0
 800d2a0:	f240 2132 	movw	r1, #562	; 0x232
 800d2a4:	4839      	ldr	r0, [pc, #228]	; (800d38c <__mdiff+0x110>)
 800d2a6:	f000 fa9d 	bl	800d7e4 <__assert_func>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b4:	bfa4      	itt	ge
 800d2b6:	4643      	movge	r3, r8
 800d2b8:	46a0      	movge	r8, r4
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2c0:	bfa6      	itte	ge
 800d2c2:	461c      	movge	r4, r3
 800d2c4:	2500      	movge	r5, #0
 800d2c6:	2501      	movlt	r5, #1
 800d2c8:	f7ff fd3a 	bl	800cd40 <_Balloc>
 800d2cc:	b920      	cbnz	r0, 800d2d8 <__mdiff+0x5c>
 800d2ce:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <__mdiff+0x10c>)
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2d6:	e7e5      	b.n	800d2a4 <__mdiff+0x28>
 800d2d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2dc:	6926      	ldr	r6, [r4, #16]
 800d2de:	60c5      	str	r5, [r0, #12]
 800d2e0:	f104 0914 	add.w	r9, r4, #20
 800d2e4:	f108 0514 	add.w	r5, r8, #20
 800d2e8:	f100 0e14 	add.w	lr, r0, #20
 800d2ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2f4:	f108 0210 	add.w	r2, r8, #16
 800d2f8:	46f2      	mov	sl, lr
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d304:	fa1f f883 	uxth.w	r8, r3
 800d308:	fa11 f18b 	uxtah	r1, r1, fp
 800d30c:	0c1b      	lsrs	r3, r3, #16
 800d30e:	eba1 0808 	sub.w	r8, r1, r8
 800d312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d31a:	fa1f f888 	uxth.w	r8, r8
 800d31e:	1419      	asrs	r1, r3, #16
 800d320:	454e      	cmp	r6, r9
 800d322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d326:	f84a 3b04 	str.w	r3, [sl], #4
 800d32a:	d8e7      	bhi.n	800d2fc <__mdiff+0x80>
 800d32c:	1b33      	subs	r3, r6, r4
 800d32e:	3b15      	subs	r3, #21
 800d330:	f023 0303 	bic.w	r3, r3, #3
 800d334:	3304      	adds	r3, #4
 800d336:	3415      	adds	r4, #21
 800d338:	42a6      	cmp	r6, r4
 800d33a:	bf38      	it	cc
 800d33c:	2304      	movcc	r3, #4
 800d33e:	441d      	add	r5, r3
 800d340:	4473      	add	r3, lr
 800d342:	469e      	mov	lr, r3
 800d344:	462e      	mov	r6, r5
 800d346:	4566      	cmp	r6, ip
 800d348:	d30e      	bcc.n	800d368 <__mdiff+0xec>
 800d34a:	f10c 0203 	add.w	r2, ip, #3
 800d34e:	1b52      	subs	r2, r2, r5
 800d350:	f022 0203 	bic.w	r2, r2, #3
 800d354:	3d03      	subs	r5, #3
 800d356:	45ac      	cmp	ip, r5
 800d358:	bf38      	it	cc
 800d35a:	2200      	movcc	r2, #0
 800d35c:	441a      	add	r2, r3
 800d35e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d362:	b17b      	cbz	r3, 800d384 <__mdiff+0x108>
 800d364:	6107      	str	r7, [r0, #16]
 800d366:	e7a3      	b.n	800d2b0 <__mdiff+0x34>
 800d368:	f856 8b04 	ldr.w	r8, [r6], #4
 800d36c:	fa11 f288 	uxtah	r2, r1, r8
 800d370:	1414      	asrs	r4, r2, #16
 800d372:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d376:	b292      	uxth	r2, r2
 800d378:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d37c:	f84e 2b04 	str.w	r2, [lr], #4
 800d380:	1421      	asrs	r1, r4, #16
 800d382:	e7e0      	b.n	800d346 <__mdiff+0xca>
 800d384:	3f01      	subs	r7, #1
 800d386:	e7ea      	b.n	800d35e <__mdiff+0xe2>
 800d388:	0800e8b7 	.word	0x0800e8b7
 800d38c:	0800e8c8 	.word	0x0800e8c8

0800d390 <__d2b>:
 800d390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4689      	mov	r9, r1
 800d396:	2101      	movs	r1, #1
 800d398:	ec57 6b10 	vmov	r6, r7, d0
 800d39c:	4690      	mov	r8, r2
 800d39e:	f7ff fccf 	bl	800cd40 <_Balloc>
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	b930      	cbnz	r0, 800d3b4 <__d2b+0x24>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	4b25      	ldr	r3, [pc, #148]	; (800d440 <__d2b+0xb0>)
 800d3aa:	4826      	ldr	r0, [pc, #152]	; (800d444 <__d2b+0xb4>)
 800d3ac:	f240 310a 	movw	r1, #778	; 0x30a
 800d3b0:	f000 fa18 	bl	800d7e4 <__assert_func>
 800d3b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d3b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3bc:	bb35      	cbnz	r5, 800d40c <__d2b+0x7c>
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	d028      	beq.n	800d416 <__d2b+0x86>
 800d3c4:	4668      	mov	r0, sp
 800d3c6:	9600      	str	r6, [sp, #0]
 800d3c8:	f7ff fd82 	bl	800ced0 <__lo0bits>
 800d3cc:	9900      	ldr	r1, [sp, #0]
 800d3ce:	b300      	cbz	r0, 800d412 <__d2b+0x82>
 800d3d0:	9a01      	ldr	r2, [sp, #4]
 800d3d2:	f1c0 0320 	rsb	r3, r0, #32
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	430b      	orrs	r3, r1
 800d3dc:	40c2      	lsrs	r2, r0
 800d3de:	6163      	str	r3, [r4, #20]
 800d3e0:	9201      	str	r2, [sp, #4]
 800d3e2:	9b01      	ldr	r3, [sp, #4]
 800d3e4:	61a3      	str	r3, [r4, #24]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bf14      	ite	ne
 800d3ea:	2202      	movne	r2, #2
 800d3ec:	2201      	moveq	r2, #1
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	b1d5      	cbz	r5, 800d428 <__d2b+0x98>
 800d3f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3f6:	4405      	add	r5, r0
 800d3f8:	f8c9 5000 	str.w	r5, [r9]
 800d3fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d400:	f8c8 0000 	str.w	r0, [r8]
 800d404:	4620      	mov	r0, r4
 800d406:	b003      	add	sp, #12
 800d408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d410:	e7d5      	b.n	800d3be <__d2b+0x2e>
 800d412:	6161      	str	r1, [r4, #20]
 800d414:	e7e5      	b.n	800d3e2 <__d2b+0x52>
 800d416:	a801      	add	r0, sp, #4
 800d418:	f7ff fd5a 	bl	800ced0 <__lo0bits>
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	2201      	movs	r2, #1
 800d422:	6122      	str	r2, [r4, #16]
 800d424:	3020      	adds	r0, #32
 800d426:	e7e3      	b.n	800d3f0 <__d2b+0x60>
 800d428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d42c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d430:	f8c9 0000 	str.w	r0, [r9]
 800d434:	6918      	ldr	r0, [r3, #16]
 800d436:	f7ff fd2b 	bl	800ce90 <__hi0bits>
 800d43a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d43e:	e7df      	b.n	800d400 <__d2b+0x70>
 800d440:	0800e8b7 	.word	0x0800e8b7
 800d444:	0800e8c8 	.word	0x0800e8c8

0800d448 <_calloc_r>:
 800d448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d44a:	fba1 2402 	umull	r2, r4, r1, r2
 800d44e:	b94c      	cbnz	r4, 800d464 <_calloc_r+0x1c>
 800d450:	4611      	mov	r1, r2
 800d452:	9201      	str	r2, [sp, #4]
 800d454:	f7fd fe44 	bl	800b0e0 <_malloc_r>
 800d458:	9a01      	ldr	r2, [sp, #4]
 800d45a:	4605      	mov	r5, r0
 800d45c:	b930      	cbnz	r0, 800d46c <_calloc_r+0x24>
 800d45e:	4628      	mov	r0, r5
 800d460:	b003      	add	sp, #12
 800d462:	bd30      	pop	{r4, r5, pc}
 800d464:	220c      	movs	r2, #12
 800d466:	6002      	str	r2, [r0, #0]
 800d468:	2500      	movs	r5, #0
 800d46a:	e7f8      	b.n	800d45e <_calloc_r+0x16>
 800d46c:	4621      	mov	r1, r4
 800d46e:	f7fd fe0e 	bl	800b08e <memset>
 800d472:	e7f4      	b.n	800d45e <_calloc_r+0x16>

0800d474 <_free_r>:
 800d474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d476:	2900      	cmp	r1, #0
 800d478:	d044      	beq.n	800d504 <_free_r+0x90>
 800d47a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d47e:	9001      	str	r0, [sp, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	f1a1 0404 	sub.w	r4, r1, #4
 800d486:	bfb8      	it	lt
 800d488:	18e4      	addlt	r4, r4, r3
 800d48a:	f7ff fc4d 	bl	800cd28 <__malloc_lock>
 800d48e:	4a1e      	ldr	r2, [pc, #120]	; (800d508 <_free_r+0x94>)
 800d490:	9801      	ldr	r0, [sp, #4]
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	b933      	cbnz	r3, 800d4a4 <_free_r+0x30>
 800d496:	6063      	str	r3, [r4, #4]
 800d498:	6014      	str	r4, [r2, #0]
 800d49a:	b003      	add	sp, #12
 800d49c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4a0:	f7ff bc48 	b.w	800cd34 <__malloc_unlock>
 800d4a4:	42a3      	cmp	r3, r4
 800d4a6:	d908      	bls.n	800d4ba <_free_r+0x46>
 800d4a8:	6825      	ldr	r5, [r4, #0]
 800d4aa:	1961      	adds	r1, r4, r5
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	bf01      	itttt	eq
 800d4b0:	6819      	ldreq	r1, [r3, #0]
 800d4b2:	685b      	ldreq	r3, [r3, #4]
 800d4b4:	1949      	addeq	r1, r1, r5
 800d4b6:	6021      	streq	r1, [r4, #0]
 800d4b8:	e7ed      	b.n	800d496 <_free_r+0x22>
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	b10b      	cbz	r3, 800d4c4 <_free_r+0x50>
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	d9fa      	bls.n	800d4ba <_free_r+0x46>
 800d4c4:	6811      	ldr	r1, [r2, #0]
 800d4c6:	1855      	adds	r5, r2, r1
 800d4c8:	42a5      	cmp	r5, r4
 800d4ca:	d10b      	bne.n	800d4e4 <_free_r+0x70>
 800d4cc:	6824      	ldr	r4, [r4, #0]
 800d4ce:	4421      	add	r1, r4
 800d4d0:	1854      	adds	r4, r2, r1
 800d4d2:	42a3      	cmp	r3, r4
 800d4d4:	6011      	str	r1, [r2, #0]
 800d4d6:	d1e0      	bne.n	800d49a <_free_r+0x26>
 800d4d8:	681c      	ldr	r4, [r3, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	6053      	str	r3, [r2, #4]
 800d4de:	4421      	add	r1, r4
 800d4e0:	6011      	str	r1, [r2, #0]
 800d4e2:	e7da      	b.n	800d49a <_free_r+0x26>
 800d4e4:	d902      	bls.n	800d4ec <_free_r+0x78>
 800d4e6:	230c      	movs	r3, #12
 800d4e8:	6003      	str	r3, [r0, #0]
 800d4ea:	e7d6      	b.n	800d49a <_free_r+0x26>
 800d4ec:	6825      	ldr	r5, [r4, #0]
 800d4ee:	1961      	adds	r1, r4, r5
 800d4f0:	428b      	cmp	r3, r1
 800d4f2:	bf04      	itt	eq
 800d4f4:	6819      	ldreq	r1, [r3, #0]
 800d4f6:	685b      	ldreq	r3, [r3, #4]
 800d4f8:	6063      	str	r3, [r4, #4]
 800d4fa:	bf04      	itt	eq
 800d4fc:	1949      	addeq	r1, r1, r5
 800d4fe:	6021      	streq	r1, [r4, #0]
 800d500:	6054      	str	r4, [r2, #4]
 800d502:	e7ca      	b.n	800d49a <_free_r+0x26>
 800d504:	b003      	add	sp, #12
 800d506:	bd30      	pop	{r4, r5, pc}
 800d508:	24004e60 	.word	0x24004e60

0800d50c <__sfputc_r>:
 800d50c:	6893      	ldr	r3, [r2, #8]
 800d50e:	3b01      	subs	r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	b410      	push	{r4}
 800d514:	6093      	str	r3, [r2, #8]
 800d516:	da08      	bge.n	800d52a <__sfputc_r+0x1e>
 800d518:	6994      	ldr	r4, [r2, #24]
 800d51a:	42a3      	cmp	r3, r4
 800d51c:	db01      	blt.n	800d522 <__sfputc_r+0x16>
 800d51e:	290a      	cmp	r1, #10
 800d520:	d103      	bne.n	800d52a <__sfputc_r+0x1e>
 800d522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d526:	f7fe bbdd 	b.w	800bce4 <__swbuf_r>
 800d52a:	6813      	ldr	r3, [r2, #0]
 800d52c:	1c58      	adds	r0, r3, #1
 800d52e:	6010      	str	r0, [r2, #0]
 800d530:	7019      	strb	r1, [r3, #0]
 800d532:	4608      	mov	r0, r1
 800d534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <__sfputs_r>:
 800d53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53c:	4606      	mov	r6, r0
 800d53e:	460f      	mov	r7, r1
 800d540:	4614      	mov	r4, r2
 800d542:	18d5      	adds	r5, r2, r3
 800d544:	42ac      	cmp	r4, r5
 800d546:	d101      	bne.n	800d54c <__sfputs_r+0x12>
 800d548:	2000      	movs	r0, #0
 800d54a:	e007      	b.n	800d55c <__sfputs_r+0x22>
 800d54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d550:	463a      	mov	r2, r7
 800d552:	4630      	mov	r0, r6
 800d554:	f7ff ffda 	bl	800d50c <__sfputc_r>
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d1f3      	bne.n	800d544 <__sfputs_r+0xa>
 800d55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d560 <_vfiprintf_r>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	460d      	mov	r5, r1
 800d566:	b09d      	sub	sp, #116	; 0x74
 800d568:	4614      	mov	r4, r2
 800d56a:	4698      	mov	r8, r3
 800d56c:	4606      	mov	r6, r0
 800d56e:	b118      	cbz	r0, 800d578 <_vfiprintf_r+0x18>
 800d570:	6983      	ldr	r3, [r0, #24]
 800d572:	b90b      	cbnz	r3, 800d578 <_vfiprintf_r+0x18>
 800d574:	f7fd fcb8 	bl	800aee8 <__sinit>
 800d578:	4b89      	ldr	r3, [pc, #548]	; (800d7a0 <_vfiprintf_r+0x240>)
 800d57a:	429d      	cmp	r5, r3
 800d57c:	d11b      	bne.n	800d5b6 <_vfiprintf_r+0x56>
 800d57e:	6875      	ldr	r5, [r6, #4]
 800d580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d582:	07d9      	lsls	r1, r3, #31
 800d584:	d405      	bmi.n	800d592 <_vfiprintf_r+0x32>
 800d586:	89ab      	ldrh	r3, [r5, #12]
 800d588:	059a      	lsls	r2, r3, #22
 800d58a:	d402      	bmi.n	800d592 <_vfiprintf_r+0x32>
 800d58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d58e:	f7fd fd6e 	bl	800b06e <__retarget_lock_acquire_recursive>
 800d592:	89ab      	ldrh	r3, [r5, #12]
 800d594:	071b      	lsls	r3, r3, #28
 800d596:	d501      	bpl.n	800d59c <_vfiprintf_r+0x3c>
 800d598:	692b      	ldr	r3, [r5, #16]
 800d59a:	b9eb      	cbnz	r3, 800d5d8 <_vfiprintf_r+0x78>
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7fe fc04 	bl	800bdac <__swsetup_r>
 800d5a4:	b1c0      	cbz	r0, 800d5d8 <_vfiprintf_r+0x78>
 800d5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a8:	07dc      	lsls	r4, r3, #31
 800d5aa:	d50e      	bpl.n	800d5ca <_vfiprintf_r+0x6a>
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	b01d      	add	sp, #116	; 0x74
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	4b7b      	ldr	r3, [pc, #492]	; (800d7a4 <_vfiprintf_r+0x244>)
 800d5b8:	429d      	cmp	r5, r3
 800d5ba:	d101      	bne.n	800d5c0 <_vfiprintf_r+0x60>
 800d5bc:	68b5      	ldr	r5, [r6, #8]
 800d5be:	e7df      	b.n	800d580 <_vfiprintf_r+0x20>
 800d5c0:	4b79      	ldr	r3, [pc, #484]	; (800d7a8 <_vfiprintf_r+0x248>)
 800d5c2:	429d      	cmp	r5, r3
 800d5c4:	bf08      	it	eq
 800d5c6:	68f5      	ldreq	r5, [r6, #12]
 800d5c8:	e7da      	b.n	800d580 <_vfiprintf_r+0x20>
 800d5ca:	89ab      	ldrh	r3, [r5, #12]
 800d5cc:	0598      	lsls	r0, r3, #22
 800d5ce:	d4ed      	bmi.n	800d5ac <_vfiprintf_r+0x4c>
 800d5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5d2:	f7fd fd4d 	bl	800b070 <__retarget_lock_release_recursive>
 800d5d6:	e7e9      	b.n	800d5ac <_vfiprintf_r+0x4c>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9309      	str	r3, [sp, #36]	; 0x24
 800d5dc:	2320      	movs	r3, #32
 800d5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e6:	2330      	movs	r3, #48	; 0x30
 800d5e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7ac <_vfiprintf_r+0x24c>
 800d5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5f0:	f04f 0901 	mov.w	r9, #1
 800d5f4:	4623      	mov	r3, r4
 800d5f6:	469a      	mov	sl, r3
 800d5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5fc:	b10a      	cbz	r2, 800d602 <_vfiprintf_r+0xa2>
 800d5fe:	2a25      	cmp	r2, #37	; 0x25
 800d600:	d1f9      	bne.n	800d5f6 <_vfiprintf_r+0x96>
 800d602:	ebba 0b04 	subs.w	fp, sl, r4
 800d606:	d00b      	beq.n	800d620 <_vfiprintf_r+0xc0>
 800d608:	465b      	mov	r3, fp
 800d60a:	4622      	mov	r2, r4
 800d60c:	4629      	mov	r1, r5
 800d60e:	4630      	mov	r0, r6
 800d610:	f7ff ff93 	bl	800d53a <__sfputs_r>
 800d614:	3001      	adds	r0, #1
 800d616:	f000 80aa 	beq.w	800d76e <_vfiprintf_r+0x20e>
 800d61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d61c:	445a      	add	r2, fp
 800d61e:	9209      	str	r2, [sp, #36]	; 0x24
 800d620:	f89a 3000 	ldrb.w	r3, [sl]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80a2 	beq.w	800d76e <_vfiprintf_r+0x20e>
 800d62a:	2300      	movs	r3, #0
 800d62c:	f04f 32ff 	mov.w	r2, #4294967295
 800d630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d634:	f10a 0a01 	add.w	sl, sl, #1
 800d638:	9304      	str	r3, [sp, #16]
 800d63a:	9307      	str	r3, [sp, #28]
 800d63c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d640:	931a      	str	r3, [sp, #104]	; 0x68
 800d642:	4654      	mov	r4, sl
 800d644:	2205      	movs	r2, #5
 800d646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64a:	4858      	ldr	r0, [pc, #352]	; (800d7ac <_vfiprintf_r+0x24c>)
 800d64c:	f7f2 fe50 	bl	80002f0 <memchr>
 800d650:	9a04      	ldr	r2, [sp, #16]
 800d652:	b9d8      	cbnz	r0, 800d68c <_vfiprintf_r+0x12c>
 800d654:	06d1      	lsls	r1, r2, #27
 800d656:	bf44      	itt	mi
 800d658:	2320      	movmi	r3, #32
 800d65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d65e:	0713      	lsls	r3, r2, #28
 800d660:	bf44      	itt	mi
 800d662:	232b      	movmi	r3, #43	; 0x2b
 800d664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d668:	f89a 3000 	ldrb.w	r3, [sl]
 800d66c:	2b2a      	cmp	r3, #42	; 0x2a
 800d66e:	d015      	beq.n	800d69c <_vfiprintf_r+0x13c>
 800d670:	9a07      	ldr	r2, [sp, #28]
 800d672:	4654      	mov	r4, sl
 800d674:	2000      	movs	r0, #0
 800d676:	f04f 0c0a 	mov.w	ip, #10
 800d67a:	4621      	mov	r1, r4
 800d67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d680:	3b30      	subs	r3, #48	; 0x30
 800d682:	2b09      	cmp	r3, #9
 800d684:	d94e      	bls.n	800d724 <_vfiprintf_r+0x1c4>
 800d686:	b1b0      	cbz	r0, 800d6b6 <_vfiprintf_r+0x156>
 800d688:	9207      	str	r2, [sp, #28]
 800d68a:	e014      	b.n	800d6b6 <_vfiprintf_r+0x156>
 800d68c:	eba0 0308 	sub.w	r3, r0, r8
 800d690:	fa09 f303 	lsl.w	r3, r9, r3
 800d694:	4313      	orrs	r3, r2
 800d696:	9304      	str	r3, [sp, #16]
 800d698:	46a2      	mov	sl, r4
 800d69a:	e7d2      	b.n	800d642 <_vfiprintf_r+0xe2>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	1d19      	adds	r1, r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	9103      	str	r1, [sp, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfbb      	ittet	lt
 800d6a8:	425b      	neglt	r3, r3
 800d6aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ae:	9307      	strge	r3, [sp, #28]
 800d6b0:	9307      	strlt	r3, [sp, #28]
 800d6b2:	bfb8      	it	lt
 800d6b4:	9204      	strlt	r2, [sp, #16]
 800d6b6:	7823      	ldrb	r3, [r4, #0]
 800d6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ba:	d10c      	bne.n	800d6d6 <_vfiprintf_r+0x176>
 800d6bc:	7863      	ldrb	r3, [r4, #1]
 800d6be:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c0:	d135      	bne.n	800d72e <_vfiprintf_r+0x1ce>
 800d6c2:	9b03      	ldr	r3, [sp, #12]
 800d6c4:	1d1a      	adds	r2, r3, #4
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	9203      	str	r2, [sp, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	bfb8      	it	lt
 800d6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6d2:	3402      	adds	r4, #2
 800d6d4:	9305      	str	r3, [sp, #20]
 800d6d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7bc <_vfiprintf_r+0x25c>
 800d6da:	7821      	ldrb	r1, [r4, #0]
 800d6dc:	2203      	movs	r2, #3
 800d6de:	4650      	mov	r0, sl
 800d6e0:	f7f2 fe06 	bl	80002f0 <memchr>
 800d6e4:	b140      	cbz	r0, 800d6f8 <_vfiprintf_r+0x198>
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	eba0 000a 	sub.w	r0, r0, sl
 800d6ec:	fa03 f000 	lsl.w	r0, r3, r0
 800d6f0:	9b04      	ldr	r3, [sp, #16]
 800d6f2:	4303      	orrs	r3, r0
 800d6f4:	3401      	adds	r4, #1
 800d6f6:	9304      	str	r3, [sp, #16]
 800d6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fc:	482c      	ldr	r0, [pc, #176]	; (800d7b0 <_vfiprintf_r+0x250>)
 800d6fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d702:	2206      	movs	r2, #6
 800d704:	f7f2 fdf4 	bl	80002f0 <memchr>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d03f      	beq.n	800d78c <_vfiprintf_r+0x22c>
 800d70c:	4b29      	ldr	r3, [pc, #164]	; (800d7b4 <_vfiprintf_r+0x254>)
 800d70e:	bb1b      	cbnz	r3, 800d758 <_vfiprintf_r+0x1f8>
 800d710:	9b03      	ldr	r3, [sp, #12]
 800d712:	3307      	adds	r3, #7
 800d714:	f023 0307 	bic.w	r3, r3, #7
 800d718:	3308      	adds	r3, #8
 800d71a:	9303      	str	r3, [sp, #12]
 800d71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71e:	443b      	add	r3, r7
 800d720:	9309      	str	r3, [sp, #36]	; 0x24
 800d722:	e767      	b.n	800d5f4 <_vfiprintf_r+0x94>
 800d724:	fb0c 3202 	mla	r2, ip, r2, r3
 800d728:	460c      	mov	r4, r1
 800d72a:	2001      	movs	r0, #1
 800d72c:	e7a5      	b.n	800d67a <_vfiprintf_r+0x11a>
 800d72e:	2300      	movs	r3, #0
 800d730:	3401      	adds	r4, #1
 800d732:	9305      	str	r3, [sp, #20]
 800d734:	4619      	mov	r1, r3
 800d736:	f04f 0c0a 	mov.w	ip, #10
 800d73a:	4620      	mov	r0, r4
 800d73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d740:	3a30      	subs	r2, #48	; 0x30
 800d742:	2a09      	cmp	r2, #9
 800d744:	d903      	bls.n	800d74e <_vfiprintf_r+0x1ee>
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0c5      	beq.n	800d6d6 <_vfiprintf_r+0x176>
 800d74a:	9105      	str	r1, [sp, #20]
 800d74c:	e7c3      	b.n	800d6d6 <_vfiprintf_r+0x176>
 800d74e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d752:	4604      	mov	r4, r0
 800d754:	2301      	movs	r3, #1
 800d756:	e7f0      	b.n	800d73a <_vfiprintf_r+0x1da>
 800d758:	ab03      	add	r3, sp, #12
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	462a      	mov	r2, r5
 800d75e:	4b16      	ldr	r3, [pc, #88]	; (800d7b8 <_vfiprintf_r+0x258>)
 800d760:	a904      	add	r1, sp, #16
 800d762:	4630      	mov	r0, r6
 800d764:	f7fd fdc0 	bl	800b2e8 <_printf_float>
 800d768:	4607      	mov	r7, r0
 800d76a:	1c78      	adds	r0, r7, #1
 800d76c:	d1d6      	bne.n	800d71c <_vfiprintf_r+0x1bc>
 800d76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d770:	07d9      	lsls	r1, r3, #31
 800d772:	d405      	bmi.n	800d780 <_vfiprintf_r+0x220>
 800d774:	89ab      	ldrh	r3, [r5, #12]
 800d776:	059a      	lsls	r2, r3, #22
 800d778:	d402      	bmi.n	800d780 <_vfiprintf_r+0x220>
 800d77a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d77c:	f7fd fc78 	bl	800b070 <__retarget_lock_release_recursive>
 800d780:	89ab      	ldrh	r3, [r5, #12]
 800d782:	065b      	lsls	r3, r3, #25
 800d784:	f53f af12 	bmi.w	800d5ac <_vfiprintf_r+0x4c>
 800d788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d78a:	e711      	b.n	800d5b0 <_vfiprintf_r+0x50>
 800d78c:	ab03      	add	r3, sp, #12
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	462a      	mov	r2, r5
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <_vfiprintf_r+0x258>)
 800d794:	a904      	add	r1, sp, #16
 800d796:	4630      	mov	r0, r6
 800d798:	f7fe f832 	bl	800b800 <_printf_i>
 800d79c:	e7e4      	b.n	800d768 <_vfiprintf_r+0x208>
 800d79e:	bf00      	nop
 800d7a0:	0800e7c0 	.word	0x0800e7c0
 800d7a4:	0800e7e0 	.word	0x0800e7e0
 800d7a8:	0800e7a0 	.word	0x0800e7a0
 800d7ac:	0800ea24 	.word	0x0800ea24
 800d7b0:	0800ea2e 	.word	0x0800ea2e
 800d7b4:	0800b2e9 	.word	0x0800b2e9
 800d7b8:	0800d53b 	.word	0x0800d53b
 800d7bc:	0800ea2a 	.word	0x0800ea2a

0800d7c0 <_read_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4d07      	ldr	r5, [pc, #28]	; (800d7e0 <_read_r+0x20>)
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	4608      	mov	r0, r1
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	602a      	str	r2, [r5, #0]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	f7f4 fb3b 	bl	8001e4a <_read>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d102      	bne.n	800d7de <_read_r+0x1e>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b103      	cbz	r3, 800d7de <_read_r+0x1e>
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	24004e68 	.word	0x24004e68

0800d7e4 <__assert_func>:
 800d7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4b09      	ldr	r3, [pc, #36]	; (800d810 <__assert_func+0x2c>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	68d8      	ldr	r0, [r3, #12]
 800d7f2:	b14c      	cbz	r4, 800d808 <__assert_func+0x24>
 800d7f4:	4b07      	ldr	r3, [pc, #28]	; (800d814 <__assert_func+0x30>)
 800d7f6:	9100      	str	r1, [sp, #0]
 800d7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7fc:	4906      	ldr	r1, [pc, #24]	; (800d818 <__assert_func+0x34>)
 800d7fe:	462b      	mov	r3, r5
 800d800:	f000 f80e 	bl	800d820 <fiprintf>
 800d804:	f000 f85f 	bl	800d8c6 <abort>
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <__assert_func+0x38>)
 800d80a:	461c      	mov	r4, r3
 800d80c:	e7f3      	b.n	800d7f6 <__assert_func+0x12>
 800d80e:	bf00      	nop
 800d810:	24000014 	.word	0x24000014
 800d814:	0800ea35 	.word	0x0800ea35
 800d818:	0800ea42 	.word	0x0800ea42
 800d81c:	0800ea70 	.word	0x0800ea70

0800d820 <fiprintf>:
 800d820:	b40e      	push	{r1, r2, r3}
 800d822:	b503      	push	{r0, r1, lr}
 800d824:	4601      	mov	r1, r0
 800d826:	ab03      	add	r3, sp, #12
 800d828:	4805      	ldr	r0, [pc, #20]	; (800d840 <fiprintf+0x20>)
 800d82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82e:	6800      	ldr	r0, [r0, #0]
 800d830:	9301      	str	r3, [sp, #4]
 800d832:	f7ff fe95 	bl	800d560 <_vfiprintf_r>
 800d836:	b002      	add	sp, #8
 800d838:	f85d eb04 	ldr.w	lr, [sp], #4
 800d83c:	b003      	add	sp, #12
 800d83e:	4770      	bx	lr
 800d840:	24000014 	.word	0x24000014

0800d844 <_fstat_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4d07      	ldr	r5, [pc, #28]	; (800d864 <_fstat_r+0x20>)
 800d848:	2300      	movs	r3, #0
 800d84a:	4604      	mov	r4, r0
 800d84c:	4608      	mov	r0, r1
 800d84e:	4611      	mov	r1, r2
 800d850:	602b      	str	r3, [r5, #0]
 800d852:	f7f4 fb3f 	bl	8001ed4 <_fstat>
 800d856:	1c43      	adds	r3, r0, #1
 800d858:	d102      	bne.n	800d860 <_fstat_r+0x1c>
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	b103      	cbz	r3, 800d860 <_fstat_r+0x1c>
 800d85e:	6023      	str	r3, [r4, #0]
 800d860:	bd38      	pop	{r3, r4, r5, pc}
 800d862:	bf00      	nop
 800d864:	24004e68 	.word	0x24004e68

0800d868 <_isatty_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d06      	ldr	r5, [pc, #24]	; (800d884 <_isatty_r+0x1c>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	f7f4 fb3e 	bl	8001ef4 <_isatty>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d102      	bne.n	800d882 <_isatty_r+0x1a>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	b103      	cbz	r3, 800d882 <_isatty_r+0x1a>
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	24004e68 	.word	0x24004e68

0800d888 <__ascii_mbtowc>:
 800d888:	b082      	sub	sp, #8
 800d88a:	b901      	cbnz	r1, 800d88e <__ascii_mbtowc+0x6>
 800d88c:	a901      	add	r1, sp, #4
 800d88e:	b142      	cbz	r2, 800d8a2 <__ascii_mbtowc+0x1a>
 800d890:	b14b      	cbz	r3, 800d8a6 <__ascii_mbtowc+0x1e>
 800d892:	7813      	ldrb	r3, [r2, #0]
 800d894:	600b      	str	r3, [r1, #0]
 800d896:	7812      	ldrb	r2, [r2, #0]
 800d898:	1e10      	subs	r0, r2, #0
 800d89a:	bf18      	it	ne
 800d89c:	2001      	movne	r0, #1
 800d89e:	b002      	add	sp, #8
 800d8a0:	4770      	bx	lr
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	e7fb      	b.n	800d89e <__ascii_mbtowc+0x16>
 800d8a6:	f06f 0001 	mvn.w	r0, #1
 800d8aa:	e7f8      	b.n	800d89e <__ascii_mbtowc+0x16>

0800d8ac <__ascii_wctomb>:
 800d8ac:	b149      	cbz	r1, 800d8c2 <__ascii_wctomb+0x16>
 800d8ae:	2aff      	cmp	r2, #255	; 0xff
 800d8b0:	bf85      	ittet	hi
 800d8b2:	238a      	movhi	r3, #138	; 0x8a
 800d8b4:	6003      	strhi	r3, [r0, #0]
 800d8b6:	700a      	strbls	r2, [r1, #0]
 800d8b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8bc:	bf98      	it	ls
 800d8be:	2001      	movls	r0, #1
 800d8c0:	4770      	bx	lr
 800d8c2:	4608      	mov	r0, r1
 800d8c4:	4770      	bx	lr

0800d8c6 <abort>:
 800d8c6:	b508      	push	{r3, lr}
 800d8c8:	2006      	movs	r0, #6
 800d8ca:	f000 f82b 	bl	800d924 <raise>
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	f7f4 fab1 	bl	8001e36 <_exit>

0800d8d4 <_raise_r>:
 800d8d4:	291f      	cmp	r1, #31
 800d8d6:	b538      	push	{r3, r4, r5, lr}
 800d8d8:	4604      	mov	r4, r0
 800d8da:	460d      	mov	r5, r1
 800d8dc:	d904      	bls.n	800d8e8 <_raise_r+0x14>
 800d8de:	2316      	movs	r3, #22
 800d8e0:	6003      	str	r3, [r0, #0]
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8ea:	b112      	cbz	r2, 800d8f2 <_raise_r+0x1e>
 800d8ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8f0:	b94b      	cbnz	r3, 800d906 <_raise_r+0x32>
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 f830 	bl	800d958 <_getpid_r>
 800d8f8:	462a      	mov	r2, r5
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d902:	f000 b817 	b.w	800d934 <_kill_r>
 800d906:	2b01      	cmp	r3, #1
 800d908:	d00a      	beq.n	800d920 <_raise_r+0x4c>
 800d90a:	1c59      	adds	r1, r3, #1
 800d90c:	d103      	bne.n	800d916 <_raise_r+0x42>
 800d90e:	2316      	movs	r3, #22
 800d910:	6003      	str	r3, [r0, #0]
 800d912:	2001      	movs	r0, #1
 800d914:	e7e7      	b.n	800d8e6 <_raise_r+0x12>
 800d916:	2400      	movs	r4, #0
 800d918:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d91c:	4628      	mov	r0, r5
 800d91e:	4798      	blx	r3
 800d920:	2000      	movs	r0, #0
 800d922:	e7e0      	b.n	800d8e6 <_raise_r+0x12>

0800d924 <raise>:
 800d924:	4b02      	ldr	r3, [pc, #8]	; (800d930 <raise+0xc>)
 800d926:	4601      	mov	r1, r0
 800d928:	6818      	ldr	r0, [r3, #0]
 800d92a:	f7ff bfd3 	b.w	800d8d4 <_raise_r>
 800d92e:	bf00      	nop
 800d930:	24000014 	.word	0x24000014

0800d934 <_kill_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	; (800d954 <_kill_r+0x20>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	4611      	mov	r1, r2
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	f7f4 fa68 	bl	8001e16 <_kill>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d102      	bne.n	800d950 <_kill_r+0x1c>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b103      	cbz	r3, 800d950 <_kill_r+0x1c>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	24004e68 	.word	0x24004e68

0800d958 <_getpid_r>:
 800d958:	f7f4 ba55 	b.w	8001e06 <_getpid>
 800d95c:	0000      	movs	r0, r0
	...

0800d960 <cos>:
 800d960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d962:	eeb0 7b40 	vmov.f64	d7, d0
 800d966:	ee17 3a90 	vmov	r3, s15
 800d96a:	4a21      	ldr	r2, [pc, #132]	; (800d9f0 <cos+0x90>)
 800d96c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d970:	4293      	cmp	r3, r2
 800d972:	dc06      	bgt.n	800d982 <cos+0x22>
 800d974:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800d9e8 <cos+0x88>
 800d978:	b005      	add	sp, #20
 800d97a:	f85d eb04 	ldr.w	lr, [sp], #4
 800d97e:	f000 b9cb 	b.w	800dd18 <__kernel_cos>
 800d982:	4a1c      	ldr	r2, [pc, #112]	; (800d9f4 <cos+0x94>)
 800d984:	4293      	cmp	r3, r2
 800d986:	dd04      	ble.n	800d992 <cos+0x32>
 800d988:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d98c:	b005      	add	sp, #20
 800d98e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d992:	4668      	mov	r0, sp
 800d994:	f000 f87c 	bl	800da90 <__ieee754_rem_pio2>
 800d998:	f000 0003 	and.w	r0, r0, #3
 800d99c:	2801      	cmp	r0, #1
 800d99e:	d009      	beq.n	800d9b4 <cos+0x54>
 800d9a0:	2802      	cmp	r0, #2
 800d9a2:	d010      	beq.n	800d9c6 <cos+0x66>
 800d9a4:	b9b0      	cbnz	r0, 800d9d4 <cos+0x74>
 800d9a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9aa:	ed9d 0b00 	vldr	d0, [sp]
 800d9ae:	f000 f9b3 	bl	800dd18 <__kernel_cos>
 800d9b2:	e7eb      	b.n	800d98c <cos+0x2c>
 800d9b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9b8:	ed9d 0b00 	vldr	d0, [sp]
 800d9bc:	f000 fcb0 	bl	800e320 <__kernel_sin>
 800d9c0:	eeb1 0b40 	vneg.f64	d0, d0
 800d9c4:	e7e2      	b.n	800d98c <cos+0x2c>
 800d9c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9ca:	ed9d 0b00 	vldr	d0, [sp]
 800d9ce:	f000 f9a3 	bl	800dd18 <__kernel_cos>
 800d9d2:	e7f5      	b.n	800d9c0 <cos+0x60>
 800d9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9d8:	ed9d 0b00 	vldr	d0, [sp]
 800d9dc:	2001      	movs	r0, #1
 800d9de:	f000 fc9f 	bl	800e320 <__kernel_sin>
 800d9e2:	e7d3      	b.n	800d98c <cos+0x2c>
 800d9e4:	f3af 8000 	nop.w
	...
 800d9f0:	3fe921fb 	.word	0x3fe921fb
 800d9f4:	7fefffff 	.word	0x7fefffff

0800d9f8 <sin>:
 800d9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9fa:	eeb0 7b40 	vmov.f64	d7, d0
 800d9fe:	ee17 3a90 	vmov	r3, s15
 800da02:	4a21      	ldr	r2, [pc, #132]	; (800da88 <sin+0x90>)
 800da04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da08:	4293      	cmp	r3, r2
 800da0a:	dc07      	bgt.n	800da1c <sin+0x24>
 800da0c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800da80 <sin+0x88>
 800da10:	2000      	movs	r0, #0
 800da12:	b005      	add	sp, #20
 800da14:	f85d eb04 	ldr.w	lr, [sp], #4
 800da18:	f000 bc82 	b.w	800e320 <__kernel_sin>
 800da1c:	4a1b      	ldr	r2, [pc, #108]	; (800da8c <sin+0x94>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	dd04      	ble.n	800da2c <sin+0x34>
 800da22:	ee30 0b40 	vsub.f64	d0, d0, d0
 800da26:	b005      	add	sp, #20
 800da28:	f85d fb04 	ldr.w	pc, [sp], #4
 800da2c:	4668      	mov	r0, sp
 800da2e:	f000 f82f 	bl	800da90 <__ieee754_rem_pio2>
 800da32:	f000 0003 	and.w	r0, r0, #3
 800da36:	2801      	cmp	r0, #1
 800da38:	d00a      	beq.n	800da50 <sin+0x58>
 800da3a:	2802      	cmp	r0, #2
 800da3c:	d00f      	beq.n	800da5e <sin+0x66>
 800da3e:	b9c0      	cbnz	r0, 800da72 <sin+0x7a>
 800da40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da44:	ed9d 0b00 	vldr	d0, [sp]
 800da48:	2001      	movs	r0, #1
 800da4a:	f000 fc69 	bl	800e320 <__kernel_sin>
 800da4e:	e7ea      	b.n	800da26 <sin+0x2e>
 800da50:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da54:	ed9d 0b00 	vldr	d0, [sp]
 800da58:	f000 f95e 	bl	800dd18 <__kernel_cos>
 800da5c:	e7e3      	b.n	800da26 <sin+0x2e>
 800da5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da62:	ed9d 0b00 	vldr	d0, [sp]
 800da66:	2001      	movs	r0, #1
 800da68:	f000 fc5a 	bl	800e320 <__kernel_sin>
 800da6c:	eeb1 0b40 	vneg.f64	d0, d0
 800da70:	e7d9      	b.n	800da26 <sin+0x2e>
 800da72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da76:	ed9d 0b00 	vldr	d0, [sp]
 800da7a:	f000 f94d 	bl	800dd18 <__kernel_cos>
 800da7e:	e7f5      	b.n	800da6c <sin+0x74>
	...
 800da88:	3fe921fb 	.word	0x3fe921fb
 800da8c:	7fefffff 	.word	0x7fefffff

0800da90 <__ieee754_rem_pio2>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	eeb0 7b40 	vmov.f64	d7, d0
 800da96:	ee17 5a90 	vmov	r5, s15
 800da9a:	4b99      	ldr	r3, [pc, #612]	; (800dd00 <__ieee754_rem_pio2+0x270>)
 800da9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800daa0:	429e      	cmp	r6, r3
 800daa2:	b088      	sub	sp, #32
 800daa4:	4604      	mov	r4, r0
 800daa6:	dc07      	bgt.n	800dab8 <__ieee754_rem_pio2+0x28>
 800daa8:	2200      	movs	r2, #0
 800daaa:	2300      	movs	r3, #0
 800daac:	ed84 0b00 	vstr	d0, [r4]
 800dab0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dab4:	2000      	movs	r0, #0
 800dab6:	e01b      	b.n	800daf0 <__ieee754_rem_pio2+0x60>
 800dab8:	4b92      	ldr	r3, [pc, #584]	; (800dd04 <__ieee754_rem_pio2+0x274>)
 800daba:	429e      	cmp	r6, r3
 800dabc:	dc3b      	bgt.n	800db36 <__ieee754_rem_pio2+0xa6>
 800dabe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800dac2:	2d00      	cmp	r5, #0
 800dac4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800dcc0 <__ieee754_rem_pio2+0x230>
 800dac8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800dacc:	dd19      	ble.n	800db02 <__ieee754_rem_pio2+0x72>
 800dace:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dad2:	429e      	cmp	r6, r3
 800dad4:	d00e      	beq.n	800daf4 <__ieee754_rem_pio2+0x64>
 800dad6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800dcc8 <__ieee754_rem_pio2+0x238>
 800dada:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dade:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dae2:	ed84 5b00 	vstr	d5, [r4]
 800dae6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800daea:	ed84 7b02 	vstr	d7, [r4, #8]
 800daee:	2001      	movs	r0, #1
 800daf0:	b008      	add	sp, #32
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dcd0 <__ieee754_rem_pio2+0x240>
 800daf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dafc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dcd8 <__ieee754_rem_pio2+0x248>
 800db00:	e7eb      	b.n	800dada <__ieee754_rem_pio2+0x4a>
 800db02:	429e      	cmp	r6, r3
 800db04:	ee30 7b06 	vadd.f64	d7, d0, d6
 800db08:	d00e      	beq.n	800db28 <__ieee754_rem_pio2+0x98>
 800db0a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800dcc8 <__ieee754_rem_pio2+0x238>
 800db0e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800db12:	ee37 7b45 	vsub.f64	d7, d7, d5
 800db16:	ed84 5b00 	vstr	d5, [r4]
 800db1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db1e:	f04f 30ff 	mov.w	r0, #4294967295
 800db22:	ed84 7b02 	vstr	d7, [r4, #8]
 800db26:	e7e3      	b.n	800daf0 <__ieee754_rem_pio2+0x60>
 800db28:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dcd0 <__ieee754_rem_pio2+0x240>
 800db2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dcd8 <__ieee754_rem_pio2+0x248>
 800db34:	e7eb      	b.n	800db0e <__ieee754_rem_pio2+0x7e>
 800db36:	4b74      	ldr	r3, [pc, #464]	; (800dd08 <__ieee754_rem_pio2+0x278>)
 800db38:	429e      	cmp	r6, r3
 800db3a:	dc70      	bgt.n	800dc1e <__ieee754_rem_pio2+0x18e>
 800db3c:	f000 fc48 	bl	800e3d0 <fabs>
 800db40:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800db44:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dce0 <__ieee754_rem_pio2+0x250>
 800db48:	eea0 7b06 	vfma.f64	d7, d0, d6
 800db4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800db50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800db54:	ee17 0a90 	vmov	r0, s15
 800db58:	eeb1 4b45 	vneg.f64	d4, d5
 800db5c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dcc0 <__ieee754_rem_pio2+0x230>
 800db60:	eea5 0b47 	vfms.f64	d0, d5, d7
 800db64:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dcc8 <__ieee754_rem_pio2+0x238>
 800db68:	281f      	cmp	r0, #31
 800db6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800db6e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800db72:	dc08      	bgt.n	800db86 <__ieee754_rem_pio2+0xf6>
 800db74:	4b65      	ldr	r3, [pc, #404]	; (800dd0c <__ieee754_rem_pio2+0x27c>)
 800db76:	1e42      	subs	r2, r0, #1
 800db78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7c:	42b3      	cmp	r3, r6
 800db7e:	d002      	beq.n	800db86 <__ieee754_rem_pio2+0xf6>
 800db80:	ed84 6b00 	vstr	d6, [r4]
 800db84:	e026      	b.n	800dbd4 <__ieee754_rem_pio2+0x144>
 800db86:	ee16 3a90 	vmov	r3, s13
 800db8a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800db8e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800db92:	2b10      	cmp	r3, #16
 800db94:	ea4f 5226 	mov.w	r2, r6, asr #20
 800db98:	ddf2      	ble.n	800db80 <__ieee754_rem_pio2+0xf0>
 800db9a:	eeb0 6b40 	vmov.f64	d6, d0
 800db9e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800dcd0 <__ieee754_rem_pio2+0x240>
 800dba2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dcd8 <__ieee754_rem_pio2+0x248>
 800dba6:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dbaa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dbae:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dbb2:	eeb0 7b40 	vmov.f64	d7, d0
 800dbb6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dbba:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dbbe:	ee13 3a90 	vmov	r3, s7
 800dbc2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	2b31      	cmp	r3, #49	; 0x31
 800dbca:	dc17      	bgt.n	800dbfc <__ieee754_rem_pio2+0x16c>
 800dbcc:	eeb0 0b46 	vmov.f64	d0, d6
 800dbd0:	ed84 3b00 	vstr	d3, [r4]
 800dbd4:	ed94 6b00 	vldr	d6, [r4]
 800dbd8:	2d00      	cmp	r5, #0
 800dbda:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dbde:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dbe2:	ed84 0b02 	vstr	d0, [r4, #8]
 800dbe6:	da83      	bge.n	800daf0 <__ieee754_rem_pio2+0x60>
 800dbe8:	eeb1 6b46 	vneg.f64	d6, d6
 800dbec:	eeb1 0b40 	vneg.f64	d0, d0
 800dbf0:	ed84 6b00 	vstr	d6, [r4]
 800dbf4:	ed84 0b02 	vstr	d0, [r4, #8]
 800dbf8:	4240      	negs	r0, r0
 800dbfa:	e779      	b.n	800daf0 <__ieee754_rem_pio2+0x60>
 800dbfc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800dce8 <__ieee754_rem_pio2+0x258>
 800dc00:	eeb0 0b46 	vmov.f64	d0, d6
 800dc04:	eea4 0b03 	vfma.f64	d0, d4, d3
 800dc08:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dc0c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800dcf0 <__ieee754_rem_pio2+0x260>
 800dc10:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dc14:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dc18:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dc1c:	e7b0      	b.n	800db80 <__ieee754_rem_pio2+0xf0>
 800dc1e:	4b3c      	ldr	r3, [pc, #240]	; (800dd10 <__ieee754_rem_pio2+0x280>)
 800dc20:	429e      	cmp	r6, r3
 800dc22:	dd06      	ble.n	800dc32 <__ieee754_rem_pio2+0x1a2>
 800dc24:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dc28:	ed80 7b02 	vstr	d7, [r0, #8]
 800dc2c:	ed80 7b00 	vstr	d7, [r0]
 800dc30:	e740      	b.n	800dab4 <__ieee754_rem_pio2+0x24>
 800dc32:	1532      	asrs	r2, r6, #20
 800dc34:	ee10 0a10 	vmov	r0, s0
 800dc38:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800dc3c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dc40:	ec41 0b17 	vmov	d7, r0, r1
 800dc44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dc48:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800dcf8 <__ieee754_rem_pio2+0x268>
 800dc4c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dc50:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc54:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dc58:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc5c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dc60:	a902      	add	r1, sp, #8
 800dc62:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dc66:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc6a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dc6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc72:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc76:	2603      	movs	r6, #3
 800dc78:	4608      	mov	r0, r1
 800dc7a:	ed91 7b04 	vldr	d7, [r1, #16]
 800dc7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc86:	4633      	mov	r3, r6
 800dc88:	f1a1 0108 	sub.w	r1, r1, #8
 800dc8c:	f106 36ff 	add.w	r6, r6, #4294967295
 800dc90:	d0f3      	beq.n	800dc7a <__ieee754_rem_pio2+0x1ea>
 800dc92:	4920      	ldr	r1, [pc, #128]	; (800dd14 <__ieee754_rem_pio2+0x284>)
 800dc94:	9101      	str	r1, [sp, #4]
 800dc96:	2102      	movs	r1, #2
 800dc98:	9100      	str	r1, [sp, #0]
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	f000 f8a8 	bl	800ddf0 <__kernel_rem_pio2>
 800dca0:	2d00      	cmp	r5, #0
 800dca2:	f6bf af25 	bge.w	800daf0 <__ieee754_rem_pio2+0x60>
 800dca6:	ed94 7b00 	vldr	d7, [r4]
 800dcaa:	eeb1 7b47 	vneg.f64	d7, d7
 800dcae:	ed84 7b00 	vstr	d7, [r4]
 800dcb2:	ed94 7b02 	vldr	d7, [r4, #8]
 800dcb6:	eeb1 7b47 	vneg.f64	d7, d7
 800dcba:	ed84 7b02 	vstr	d7, [r4, #8]
 800dcbe:	e79b      	b.n	800dbf8 <__ieee754_rem_pio2+0x168>
 800dcc0:	54400000 	.word	0x54400000
 800dcc4:	3ff921fb 	.word	0x3ff921fb
 800dcc8:	1a626331 	.word	0x1a626331
 800dccc:	3dd0b461 	.word	0x3dd0b461
 800dcd0:	1a600000 	.word	0x1a600000
 800dcd4:	3dd0b461 	.word	0x3dd0b461
 800dcd8:	2e037073 	.word	0x2e037073
 800dcdc:	3ba3198a 	.word	0x3ba3198a
 800dce0:	6dc9c883 	.word	0x6dc9c883
 800dce4:	3fe45f30 	.word	0x3fe45f30
 800dce8:	2e000000 	.word	0x2e000000
 800dcec:	3ba3198a 	.word	0x3ba3198a
 800dcf0:	252049c1 	.word	0x252049c1
 800dcf4:	397b839a 	.word	0x397b839a
 800dcf8:	00000000 	.word	0x00000000
 800dcfc:	41700000 	.word	0x41700000
 800dd00:	3fe921fb 	.word	0x3fe921fb
 800dd04:	4002d97b 	.word	0x4002d97b
 800dd08:	413921fb 	.word	0x413921fb
 800dd0c:	0800eb7c 	.word	0x0800eb7c
 800dd10:	7fefffff 	.word	0x7fefffff
 800dd14:	0800ebfc 	.word	0x0800ebfc

0800dd18 <__kernel_cos>:
 800dd18:	ee10 1a90 	vmov	r1, s1
 800dd1c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dd20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd24:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dd28:	da05      	bge.n	800dd36 <__kernel_cos+0x1e>
 800dd2a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dd2e:	ee17 3a90 	vmov	r3, s15
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d03d      	beq.n	800ddb2 <__kernel_cos+0x9a>
 800dd36:	ee20 3b00 	vmul.f64	d3, d0, d0
 800dd3a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ddb8 <__kernel_cos+0xa0>
 800dd3e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ddc0 <__kernel_cos+0xa8>
 800dd42:	eea3 6b07 	vfma.f64	d6, d3, d7
 800dd46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ddc8 <__kernel_cos+0xb0>
 800dd4a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dd4e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ddd0 <__kernel_cos+0xb8>
 800dd52:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dd56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ddd8 <__kernel_cos+0xc0>
 800dd5a:	4b23      	ldr	r3, [pc, #140]	; (800dde8 <__kernel_cos+0xd0>)
 800dd5c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dd60:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800dde0 <__kernel_cos+0xc8>
 800dd64:	4299      	cmp	r1, r3
 800dd66:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dd6a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dd6e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800dd72:	ee23 7b07 	vmul.f64	d7, d3, d7
 800dd76:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800dd7a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dd7e:	dc04      	bgt.n	800dd8a <__kernel_cos+0x72>
 800dd80:	ee37 6b46 	vsub.f64	d6, d7, d6
 800dd84:	ee34 0b46 	vsub.f64	d0, d4, d6
 800dd88:	4770      	bx	lr
 800dd8a:	4b18      	ldr	r3, [pc, #96]	; (800ddec <__kernel_cos+0xd4>)
 800dd8c:	4299      	cmp	r1, r3
 800dd8e:	dc0d      	bgt.n	800ddac <__kernel_cos+0x94>
 800dd90:	2200      	movs	r2, #0
 800dd92:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800dd96:	ec43 2b15 	vmov	d5, r2, r3
 800dd9a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800dd9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dda2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dda6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ddaa:	4770      	bx	lr
 800ddac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ddb0:	e7f3      	b.n	800dd9a <__kernel_cos+0x82>
 800ddb2:	eeb0 0b44 	vmov.f64	d0, d4
 800ddb6:	4770      	bx	lr
 800ddb8:	be8838d4 	.word	0xbe8838d4
 800ddbc:	bda8fae9 	.word	0xbda8fae9
 800ddc0:	bdb4b1c4 	.word	0xbdb4b1c4
 800ddc4:	3e21ee9e 	.word	0x3e21ee9e
 800ddc8:	809c52ad 	.word	0x809c52ad
 800ddcc:	be927e4f 	.word	0xbe927e4f
 800ddd0:	19cb1590 	.word	0x19cb1590
 800ddd4:	3efa01a0 	.word	0x3efa01a0
 800ddd8:	16c15177 	.word	0x16c15177
 800dddc:	bf56c16c 	.word	0xbf56c16c
 800dde0:	5555554c 	.word	0x5555554c
 800dde4:	3fa55555 	.word	0x3fa55555
 800dde8:	3fd33332 	.word	0x3fd33332
 800ddec:	3fe90000 	.word	0x3fe90000

0800ddf0 <__kernel_rem_pio2>:
 800ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	ed2d 8b06 	vpush	{d8-d10}
 800ddf8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ddfc:	460f      	mov	r7, r1
 800ddfe:	9002      	str	r0, [sp, #8]
 800de00:	49c5      	ldr	r1, [pc, #788]	; (800e118 <__kernel_rem_pio2+0x328>)
 800de02:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800de04:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800de08:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	f112 0f14 	cmn.w	r2, #20
 800de12:	bfa8      	it	ge
 800de14:	2018      	movge	r0, #24
 800de16:	f103 31ff 	add.w	r1, r3, #4294967295
 800de1a:	bfb8      	it	lt
 800de1c:	2000      	movlt	r0, #0
 800de1e:	f06f 0417 	mvn.w	r4, #23
 800de22:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e100 <__kernel_rem_pio2+0x310>
 800de26:	bfa4      	itt	ge
 800de28:	f1a2 0a03 	subge.w	sl, r2, #3
 800de2c:	fb9a f0f0 	sdivge	r0, sl, r0
 800de30:	fb00 4404 	mla	r4, r0, r4, r4
 800de34:	1a46      	subs	r6, r0, r1
 800de36:	4414      	add	r4, r2
 800de38:	eb09 0c01 	add.w	ip, r9, r1
 800de3c:	ad1a      	add	r5, sp, #104	; 0x68
 800de3e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800de42:	2200      	movs	r2, #0
 800de44:	4562      	cmp	r2, ip
 800de46:	dd10      	ble.n	800de6a <__kernel_rem_pio2+0x7a>
 800de48:	9a01      	ldr	r2, [sp, #4]
 800de4a:	ab1a      	add	r3, sp, #104	; 0x68
 800de4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800de50:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800de54:	f04f 0c00 	mov.w	ip, #0
 800de58:	45cc      	cmp	ip, r9
 800de5a:	dc26      	bgt.n	800deaa <__kernel_rem_pio2+0xba>
 800de5c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e100 <__kernel_rem_pio2+0x310>
 800de60:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800de64:	4616      	mov	r6, r2
 800de66:	2500      	movs	r5, #0
 800de68:	e015      	b.n	800de96 <__kernel_rem_pio2+0xa6>
 800de6a:	42d6      	cmn	r6, r2
 800de6c:	d409      	bmi.n	800de82 <__kernel_rem_pio2+0x92>
 800de6e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800de72:	ee07 3a90 	vmov	s15, r3
 800de76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de7a:	eca5 7b02 	vstmia	r5!, {d7}
 800de7e:	3201      	adds	r2, #1
 800de80:	e7e0      	b.n	800de44 <__kernel_rem_pio2+0x54>
 800de82:	eeb0 7b46 	vmov.f64	d7, d6
 800de86:	e7f8      	b.n	800de7a <__kernel_rem_pio2+0x8a>
 800de88:	ecb8 5b02 	vldmia	r8!, {d5}
 800de8c:	ed96 6b00 	vldr	d6, [r6]
 800de90:	3501      	adds	r5, #1
 800de92:	eea5 7b06 	vfma.f64	d7, d5, d6
 800de96:	428d      	cmp	r5, r1
 800de98:	f1a6 0608 	sub.w	r6, r6, #8
 800de9c:	ddf4      	ble.n	800de88 <__kernel_rem_pio2+0x98>
 800de9e:	ecaa 7b02 	vstmia	sl!, {d7}
 800dea2:	f10c 0c01 	add.w	ip, ip, #1
 800dea6:	3208      	adds	r2, #8
 800dea8:	e7d6      	b.n	800de58 <__kernel_rem_pio2+0x68>
 800deaa:	ab06      	add	r3, sp, #24
 800deac:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e108 <__kernel_rem_pio2+0x318>
 800deb0:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e110 <__kernel_rem_pio2+0x320>
 800deb4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800deb8:	9303      	str	r3, [sp, #12]
 800deba:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800debe:	464d      	mov	r5, r9
 800dec0:	00eb      	lsls	r3, r5, #3
 800dec2:	9304      	str	r3, [sp, #16]
 800dec4:	ab92      	add	r3, sp, #584	; 0x248
 800dec6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800deca:	f10d 0b18 	add.w	fp, sp, #24
 800dece:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ded0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ded4:	465e      	mov	r6, fp
 800ded6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800deda:	4628      	mov	r0, r5
 800dedc:	2800      	cmp	r0, #0
 800dede:	f1a2 0208 	sub.w	r2, r2, #8
 800dee2:	dc4c      	bgt.n	800df7e <__kernel_rem_pio2+0x18e>
 800dee4:	4620      	mov	r0, r4
 800dee6:	9105      	str	r1, [sp, #20]
 800dee8:	f000 faf2 	bl	800e4d0 <scalbn>
 800deec:	eeb0 8b40 	vmov.f64	d8, d0
 800def0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800def4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800def8:	f000 fa76 	bl	800e3e8 <floor>
 800defc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800df00:	eea0 8b47 	vfms.f64	d8, d0, d7
 800df04:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800df08:	2c00      	cmp	r4, #0
 800df0a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800df0e:	ee17 8a90 	vmov	r8, s15
 800df12:	ee38 8b40 	vsub.f64	d8, d8, d0
 800df16:	9905      	ldr	r1, [sp, #20]
 800df18:	dd43      	ble.n	800dfa2 <__kernel_rem_pio2+0x1b2>
 800df1a:	1e68      	subs	r0, r5, #1
 800df1c:	ab06      	add	r3, sp, #24
 800df1e:	f1c4 0c18 	rsb	ip, r4, #24
 800df22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800df26:	fa46 f20c 	asr.w	r2, r6, ip
 800df2a:	4490      	add	r8, r2
 800df2c:	fa02 f20c 	lsl.w	r2, r2, ip
 800df30:	1ab6      	subs	r6, r6, r2
 800df32:	f1c4 0217 	rsb	r2, r4, #23
 800df36:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800df3a:	4116      	asrs	r6, r2
 800df3c:	2e00      	cmp	r6, #0
 800df3e:	dd3f      	ble.n	800dfc0 <__kernel_rem_pio2+0x1d0>
 800df40:	f04f 0c00 	mov.w	ip, #0
 800df44:	f108 0801 	add.w	r8, r8, #1
 800df48:	4660      	mov	r0, ip
 800df4a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800df4e:	4565      	cmp	r5, ip
 800df50:	dc6e      	bgt.n	800e030 <__kernel_rem_pio2+0x240>
 800df52:	2c00      	cmp	r4, #0
 800df54:	dd04      	ble.n	800df60 <__kernel_rem_pio2+0x170>
 800df56:	2c01      	cmp	r4, #1
 800df58:	d07f      	beq.n	800e05a <__kernel_rem_pio2+0x26a>
 800df5a:	2c02      	cmp	r4, #2
 800df5c:	f000 8087 	beq.w	800e06e <__kernel_rem_pio2+0x27e>
 800df60:	2e02      	cmp	r6, #2
 800df62:	d12d      	bne.n	800dfc0 <__kernel_rem_pio2+0x1d0>
 800df64:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800df68:	ee30 8b48 	vsub.f64	d8, d0, d8
 800df6c:	b340      	cbz	r0, 800dfc0 <__kernel_rem_pio2+0x1d0>
 800df6e:	4620      	mov	r0, r4
 800df70:	9105      	str	r1, [sp, #20]
 800df72:	f000 faad 	bl	800e4d0 <scalbn>
 800df76:	9905      	ldr	r1, [sp, #20]
 800df78:	ee38 8b40 	vsub.f64	d8, d8, d0
 800df7c:	e020      	b.n	800dfc0 <__kernel_rem_pio2+0x1d0>
 800df7e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800df82:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800df86:	3801      	subs	r0, #1
 800df88:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800df8c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800df90:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800df94:	eca6 0a01 	vstmia	r6!, {s0}
 800df98:	ed92 0b00 	vldr	d0, [r2]
 800df9c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800dfa0:	e79c      	b.n	800dedc <__kernel_rem_pio2+0xec>
 800dfa2:	d105      	bne.n	800dfb0 <__kernel_rem_pio2+0x1c0>
 800dfa4:	1e6a      	subs	r2, r5, #1
 800dfa6:	ab06      	add	r3, sp, #24
 800dfa8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800dfac:	15f6      	asrs	r6, r6, #23
 800dfae:	e7c5      	b.n	800df3c <__kernel_rem_pio2+0x14c>
 800dfb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dfb4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfbc:	da36      	bge.n	800e02c <__kernel_rem_pio2+0x23c>
 800dfbe:	2600      	movs	r6, #0
 800dfc0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfc8:	f040 80aa 	bne.w	800e120 <__kernel_rem_pio2+0x330>
 800dfcc:	f105 3bff 	add.w	fp, r5, #4294967295
 800dfd0:	4658      	mov	r0, fp
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	4548      	cmp	r0, r9
 800dfd6:	da52      	bge.n	800e07e <__kernel_rem_pio2+0x28e>
 800dfd8:	2a00      	cmp	r2, #0
 800dfda:	f000 8081 	beq.w	800e0e0 <__kernel_rem_pio2+0x2f0>
 800dfde:	ab06      	add	r3, sp, #24
 800dfe0:	3c18      	subs	r4, #24
 800dfe2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f000 8087 	beq.w	800e0fa <__kernel_rem_pio2+0x30a>
 800dfec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 fa6d 	bl	800e4d0 <scalbn>
 800dff6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dffa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e108 <__kernel_rem_pio2+0x318>
 800dffe:	a96a      	add	r1, sp, #424	; 0x1a8
 800e000:	f103 0208 	add.w	r2, r3, #8
 800e004:	1888      	adds	r0, r1, r2
 800e006:	4659      	mov	r1, fp
 800e008:	2900      	cmp	r1, #0
 800e00a:	f280 80b7 	bge.w	800e17c <__kernel_rem_pio2+0x38c>
 800e00e:	4659      	mov	r1, fp
 800e010:	2900      	cmp	r1, #0
 800e012:	f2c0 80d5 	blt.w	800e1c0 <__kernel_rem_pio2+0x3d0>
 800e016:	a86a      	add	r0, sp, #424	; 0x1a8
 800e018:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e01c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e100 <__kernel_rem_pio2+0x310>
 800e020:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e11c <__kernel_rem_pio2+0x32c>
 800e024:	2400      	movs	r4, #0
 800e026:	ebab 0001 	sub.w	r0, fp, r1
 800e02a:	e0be      	b.n	800e1aa <__kernel_rem_pio2+0x3ba>
 800e02c:	2602      	movs	r6, #2
 800e02e:	e787      	b.n	800df40 <__kernel_rem_pio2+0x150>
 800e030:	f8db 2000 	ldr.w	r2, [fp]
 800e034:	b958      	cbnz	r0, 800e04e <__kernel_rem_pio2+0x25e>
 800e036:	b122      	cbz	r2, 800e042 <__kernel_rem_pio2+0x252>
 800e038:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e03c:	f8cb 2000 	str.w	r2, [fp]
 800e040:	2201      	movs	r2, #1
 800e042:	f10c 0c01 	add.w	ip, ip, #1
 800e046:	f10b 0b04 	add.w	fp, fp, #4
 800e04a:	4610      	mov	r0, r2
 800e04c:	e77f      	b.n	800df4e <__kernel_rem_pio2+0x15e>
 800e04e:	ebae 0202 	sub.w	r2, lr, r2
 800e052:	f8cb 2000 	str.w	r2, [fp]
 800e056:	4602      	mov	r2, r0
 800e058:	e7f3      	b.n	800e042 <__kernel_rem_pio2+0x252>
 800e05a:	f105 3cff 	add.w	ip, r5, #4294967295
 800e05e:	ab06      	add	r3, sp, #24
 800e060:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e064:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e068:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e06c:	e778      	b.n	800df60 <__kernel_rem_pio2+0x170>
 800e06e:	f105 3cff 	add.w	ip, r5, #4294967295
 800e072:	ab06      	add	r3, sp, #24
 800e074:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e078:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e07c:	e7f4      	b.n	800e068 <__kernel_rem_pio2+0x278>
 800e07e:	ab06      	add	r3, sp, #24
 800e080:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e084:	3801      	subs	r0, #1
 800e086:	431a      	orrs	r2, r3
 800e088:	e7a4      	b.n	800dfd4 <__kernel_rem_pio2+0x1e4>
 800e08a:	f10c 0c01 	add.w	ip, ip, #1
 800e08e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e092:	2800      	cmp	r0, #0
 800e094:	d0f9      	beq.n	800e08a <__kernel_rem_pio2+0x29a>
 800e096:	9b04      	ldr	r3, [sp, #16]
 800e098:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e09c:	eb0d 0203 	add.w	r2, sp, r3
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	18e8      	adds	r0, r5, r3
 800e0a4:	ab1a      	add	r3, sp, #104	; 0x68
 800e0a6:	1c6e      	adds	r6, r5, #1
 800e0a8:	3a98      	subs	r2, #152	; 0x98
 800e0aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e0ae:	4465      	add	r5, ip
 800e0b0:	42b5      	cmp	r5, r6
 800e0b2:	f6ff af05 	blt.w	800dec0 <__kernel_rem_pio2+0xd0>
 800e0b6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e0ba:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e0be:	ee07 3a90 	vmov	s15, r3
 800e0c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0c6:	f04f 0c00 	mov.w	ip, #0
 800e0ca:	eca0 7b02 	vstmia	r0!, {d7}
 800e0ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e100 <__kernel_rem_pio2+0x310>
 800e0d2:	4680      	mov	r8, r0
 800e0d4:	458c      	cmp	ip, r1
 800e0d6:	dd07      	ble.n	800e0e8 <__kernel_rem_pio2+0x2f8>
 800e0d8:	eca2 7b02 	vstmia	r2!, {d7}
 800e0dc:	3601      	adds	r6, #1
 800e0de:	e7e7      	b.n	800e0b0 <__kernel_rem_pio2+0x2c0>
 800e0e0:	9a03      	ldr	r2, [sp, #12]
 800e0e2:	f04f 0c01 	mov.w	ip, #1
 800e0e6:	e7d2      	b.n	800e08e <__kernel_rem_pio2+0x29e>
 800e0e8:	ecbe 5b02 	vldmia	lr!, {d5}
 800e0ec:	ed38 6b02 	vldmdb	r8!, {d6}
 800e0f0:	f10c 0c01 	add.w	ip, ip, #1
 800e0f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e0f8:	e7ec      	b.n	800e0d4 <__kernel_rem_pio2+0x2e4>
 800e0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e0fe:	e76e      	b.n	800dfde <__kernel_rem_pio2+0x1ee>
	...
 800e10c:	3e700000 	.word	0x3e700000
 800e110:	00000000 	.word	0x00000000
 800e114:	41700000 	.word	0x41700000
 800e118:	0800ed48 	.word	0x0800ed48
 800e11c:	0800ed08 	.word	0x0800ed08
 800e120:	4260      	negs	r0, r4
 800e122:	eeb0 0b48 	vmov.f64	d0, d8
 800e126:	f000 f9d3 	bl	800e4d0 <scalbn>
 800e12a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e308 <__kernel_rem_pio2+0x518>
 800e12e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e136:	db18      	blt.n	800e16a <__kernel_rem_pio2+0x37a>
 800e138:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e310 <__kernel_rem_pio2+0x520>
 800e13c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e140:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e144:	aa06      	add	r2, sp, #24
 800e146:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e14a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e14e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e152:	f105 0b01 	add.w	fp, r5, #1
 800e156:	ee10 3a10 	vmov	r3, s0
 800e15a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e15e:	ee17 3a10 	vmov	r3, s14
 800e162:	3418      	adds	r4, #24
 800e164:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e168:	e740      	b.n	800dfec <__kernel_rem_pio2+0x1fc>
 800e16a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e16e:	aa06      	add	r2, sp, #24
 800e170:	ee10 3a10 	vmov	r3, s0
 800e174:	46ab      	mov	fp, r5
 800e176:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e17a:	e737      	b.n	800dfec <__kernel_rem_pio2+0x1fc>
 800e17c:	ac06      	add	r4, sp, #24
 800e17e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e182:	9401      	str	r4, [sp, #4]
 800e184:	ee07 4a90 	vmov	s15, r4
 800e188:	3901      	subs	r1, #1
 800e18a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e18e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e192:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e196:	ed20 7b02 	vstmdb	r0!, {d7}
 800e19a:	e735      	b.n	800e008 <__kernel_rem_pio2+0x218>
 800e19c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e1a0:	ecb5 6b02 	vldmia	r5!, {d6}
 800e1a4:	3401      	adds	r4, #1
 800e1a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e1aa:	454c      	cmp	r4, r9
 800e1ac:	dc01      	bgt.n	800e1b2 <__kernel_rem_pio2+0x3c2>
 800e1ae:	4284      	cmp	r4, r0
 800e1b0:	ddf4      	ble.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e1b2:	ac42      	add	r4, sp, #264	; 0x108
 800e1b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e1b8:	ed80 7b00 	vstr	d7, [r0]
 800e1bc:	3901      	subs	r1, #1
 800e1be:	e727      	b.n	800e010 <__kernel_rem_pio2+0x220>
 800e1c0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e1c2:	2902      	cmp	r1, #2
 800e1c4:	dc0a      	bgt.n	800e1dc <__kernel_rem_pio2+0x3ec>
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	dc2c      	bgt.n	800e224 <__kernel_rem_pio2+0x434>
 800e1ca:	d045      	beq.n	800e258 <__kernel_rem_pio2+0x468>
 800e1cc:	f008 0007 	and.w	r0, r8, #7
 800e1d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e1d4:	ecbd 8b06 	vpop	{d8-d10}
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e1de:	2a03      	cmp	r2, #3
 800e1e0:	d1f4      	bne.n	800e1cc <__kernel_rem_pio2+0x3dc>
 800e1e2:	aa42      	add	r2, sp, #264	; 0x108
 800e1e4:	4413      	add	r3, r2
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4658      	mov	r0, fp
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	f1a1 0108 	sub.w	r1, r1, #8
 800e1f2:	dc54      	bgt.n	800e29e <__kernel_rem_pio2+0x4ae>
 800e1f4:	4659      	mov	r1, fp
 800e1f6:	2901      	cmp	r1, #1
 800e1f8:	f1a2 0208 	sub.w	r2, r2, #8
 800e1fc:	dc5f      	bgt.n	800e2be <__kernel_rem_pio2+0x4ce>
 800e1fe:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e318 <__kernel_rem_pio2+0x528>
 800e202:	3308      	adds	r3, #8
 800e204:	f1bb 0f01 	cmp.w	fp, #1
 800e208:	dc69      	bgt.n	800e2de <__kernel_rem_pio2+0x4ee>
 800e20a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e20e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e212:	2e00      	cmp	r6, #0
 800e214:	d16a      	bne.n	800e2ec <__kernel_rem_pio2+0x4fc>
 800e216:	ed87 5b00 	vstr	d5, [r7]
 800e21a:	ed87 6b02 	vstr	d6, [r7, #8]
 800e21e:	ed87 7b04 	vstr	d7, [r7, #16]
 800e222:	e7d3      	b.n	800e1cc <__kernel_rem_pio2+0x3dc>
 800e224:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e318 <__kernel_rem_pio2+0x528>
 800e228:	ab42      	add	r3, sp, #264	; 0x108
 800e22a:	441a      	add	r2, r3
 800e22c:	465b      	mov	r3, fp
 800e22e:	2b00      	cmp	r3, #0
 800e230:	da26      	bge.n	800e280 <__kernel_rem_pio2+0x490>
 800e232:	b35e      	cbz	r6, 800e28c <__kernel_rem_pio2+0x49c>
 800e234:	eeb1 7b46 	vneg.f64	d7, d6
 800e238:	ed87 7b00 	vstr	d7, [r7]
 800e23c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e240:	aa44      	add	r2, sp, #272	; 0x110
 800e242:	2301      	movs	r3, #1
 800e244:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e248:	459b      	cmp	fp, r3
 800e24a:	da22      	bge.n	800e292 <__kernel_rem_pio2+0x4a2>
 800e24c:	b10e      	cbz	r6, 800e252 <__kernel_rem_pio2+0x462>
 800e24e:	eeb1 7b47 	vneg.f64	d7, d7
 800e252:	ed87 7b02 	vstr	d7, [r7, #8]
 800e256:	e7b9      	b.n	800e1cc <__kernel_rem_pio2+0x3dc>
 800e258:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e318 <__kernel_rem_pio2+0x528>
 800e25c:	ab42      	add	r3, sp, #264	; 0x108
 800e25e:	441a      	add	r2, r3
 800e260:	f1bb 0f00 	cmp.w	fp, #0
 800e264:	da05      	bge.n	800e272 <__kernel_rem_pio2+0x482>
 800e266:	b10e      	cbz	r6, 800e26c <__kernel_rem_pio2+0x47c>
 800e268:	eeb1 7b47 	vneg.f64	d7, d7
 800e26c:	ed87 7b00 	vstr	d7, [r7]
 800e270:	e7ac      	b.n	800e1cc <__kernel_rem_pio2+0x3dc>
 800e272:	ed32 6b02 	vldmdb	r2!, {d6}
 800e276:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e27a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e27e:	e7ef      	b.n	800e260 <__kernel_rem_pio2+0x470>
 800e280:	ed32 7b02 	vldmdb	r2!, {d7}
 800e284:	3b01      	subs	r3, #1
 800e286:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e28a:	e7d0      	b.n	800e22e <__kernel_rem_pio2+0x43e>
 800e28c:	eeb0 7b46 	vmov.f64	d7, d6
 800e290:	e7d2      	b.n	800e238 <__kernel_rem_pio2+0x448>
 800e292:	ecb2 6b02 	vldmia	r2!, {d6}
 800e296:	3301      	adds	r3, #1
 800e298:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e29c:	e7d4      	b.n	800e248 <__kernel_rem_pio2+0x458>
 800e29e:	ed91 7b00 	vldr	d7, [r1]
 800e2a2:	ed91 5b02 	vldr	d5, [r1, #8]
 800e2a6:	3801      	subs	r0, #1
 800e2a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e2ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2b0:	ed81 6b00 	vstr	d6, [r1]
 800e2b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2b8:	ed81 7b02 	vstr	d7, [r1, #8]
 800e2bc:	e796      	b.n	800e1ec <__kernel_rem_pio2+0x3fc>
 800e2be:	ed92 7b00 	vldr	d7, [r2]
 800e2c2:	ed92 5b02 	vldr	d5, [r2, #8]
 800e2c6:	3901      	subs	r1, #1
 800e2c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e2cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2d0:	ed82 6b00 	vstr	d6, [r2]
 800e2d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2d8:	ed82 7b02 	vstr	d7, [r2, #8]
 800e2dc:	e78b      	b.n	800e1f6 <__kernel_rem_pio2+0x406>
 800e2de:	ed33 6b02 	vldmdb	r3!, {d6}
 800e2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e2ea:	e78b      	b.n	800e204 <__kernel_rem_pio2+0x414>
 800e2ec:	eeb1 5b45 	vneg.f64	d5, d5
 800e2f0:	eeb1 6b46 	vneg.f64	d6, d6
 800e2f4:	ed87 5b00 	vstr	d5, [r7]
 800e2f8:	eeb1 7b47 	vneg.f64	d7, d7
 800e2fc:	ed87 6b02 	vstr	d6, [r7, #8]
 800e300:	e78d      	b.n	800e21e <__kernel_rem_pio2+0x42e>
 800e302:	bf00      	nop
 800e304:	f3af 8000 	nop.w
 800e308:	00000000 	.word	0x00000000
 800e30c:	41700000 	.word	0x41700000
 800e310:	00000000 	.word	0x00000000
 800e314:	3e700000 	.word	0x3e700000
	...

0800e320 <__kernel_sin>:
 800e320:	ee10 3a90 	vmov	r3, s1
 800e324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e328:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e32c:	da04      	bge.n	800e338 <__kernel_sin+0x18>
 800e32e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e332:	ee17 3a90 	vmov	r3, s15
 800e336:	b35b      	cbz	r3, 800e390 <__kernel_sin+0x70>
 800e338:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e33c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e340:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e398 <__kernel_sin+0x78>
 800e344:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e3a0 <__kernel_sin+0x80>
 800e348:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e34c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e3a8 <__kernel_sin+0x88>
 800e350:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e354:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e3b0 <__kernel_sin+0x90>
 800e358:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e35c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e3b8 <__kernel_sin+0x98>
 800e360:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e364:	b930      	cbnz	r0, 800e374 <__kernel_sin+0x54>
 800e366:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e3c0 <__kernel_sin+0xa0>
 800e36a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e36e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e372:	4770      	bx	lr
 800e374:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e378:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e37c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e380:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e384:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e3c8 <__kernel_sin+0xa8>
 800e388:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e38c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	f3af 8000 	nop.w
 800e398:	5acfd57c 	.word	0x5acfd57c
 800e39c:	3de5d93a 	.word	0x3de5d93a
 800e3a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800e3a4:	be5ae5e6 	.word	0xbe5ae5e6
 800e3a8:	57b1fe7d 	.word	0x57b1fe7d
 800e3ac:	3ec71de3 	.word	0x3ec71de3
 800e3b0:	19c161d5 	.word	0x19c161d5
 800e3b4:	bf2a01a0 	.word	0xbf2a01a0
 800e3b8:	1110f8a6 	.word	0x1110f8a6
 800e3bc:	3f811111 	.word	0x3f811111
 800e3c0:	55555549 	.word	0x55555549
 800e3c4:	bfc55555 	.word	0xbfc55555
 800e3c8:	55555549 	.word	0x55555549
 800e3cc:	3fc55555 	.word	0x3fc55555

0800e3d0 <fabs>:
 800e3d0:	ec51 0b10 	vmov	r0, r1, d0
 800e3d4:	ee10 2a10 	vmov	r2, s0
 800e3d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3dc:	ec43 2b10 	vmov	d0, r2, r3
 800e3e0:	4770      	bx	lr
 800e3e2:	0000      	movs	r0, r0
 800e3e4:	0000      	movs	r0, r0
	...

0800e3e8 <floor>:
 800e3e8:	ee10 1a90 	vmov	r1, s1
 800e3ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e3f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e3f4:	2b13      	cmp	r3, #19
 800e3f6:	b530      	push	{r4, r5, lr}
 800e3f8:	ee10 0a10 	vmov	r0, s0
 800e3fc:	ee10 5a10 	vmov	r5, s0
 800e400:	dc31      	bgt.n	800e466 <floor+0x7e>
 800e402:	2b00      	cmp	r3, #0
 800e404:	da15      	bge.n	800e432 <floor+0x4a>
 800e406:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e4c0 <floor+0xd8>
 800e40a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e40e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	dd07      	ble.n	800e428 <floor+0x40>
 800e418:	2900      	cmp	r1, #0
 800e41a:	da4e      	bge.n	800e4ba <floor+0xd2>
 800e41c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e420:	4318      	orrs	r0, r3
 800e422:	d001      	beq.n	800e428 <floor+0x40>
 800e424:	4928      	ldr	r1, [pc, #160]	; (800e4c8 <floor+0xe0>)
 800e426:	2000      	movs	r0, #0
 800e428:	460b      	mov	r3, r1
 800e42a:	4602      	mov	r2, r0
 800e42c:	ec43 2b10 	vmov	d0, r2, r3
 800e430:	e020      	b.n	800e474 <floor+0x8c>
 800e432:	4a26      	ldr	r2, [pc, #152]	; (800e4cc <floor+0xe4>)
 800e434:	411a      	asrs	r2, r3
 800e436:	ea01 0402 	and.w	r4, r1, r2
 800e43a:	4304      	orrs	r4, r0
 800e43c:	d01a      	beq.n	800e474 <floor+0x8c>
 800e43e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e4c0 <floor+0xd8>
 800e442:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e446:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44e:	ddeb      	ble.n	800e428 <floor+0x40>
 800e450:	2900      	cmp	r1, #0
 800e452:	bfbe      	ittt	lt
 800e454:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e458:	fa40 f303 	asrlt.w	r3, r0, r3
 800e45c:	18c9      	addlt	r1, r1, r3
 800e45e:	ea21 0102 	bic.w	r1, r1, r2
 800e462:	2000      	movs	r0, #0
 800e464:	e7e0      	b.n	800e428 <floor+0x40>
 800e466:	2b33      	cmp	r3, #51	; 0x33
 800e468:	dd05      	ble.n	800e476 <floor+0x8e>
 800e46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e46e:	d101      	bne.n	800e474 <floor+0x8c>
 800e470:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e474:	bd30      	pop	{r4, r5, pc}
 800e476:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e47a:	f04f 32ff 	mov.w	r2, #4294967295
 800e47e:	40e2      	lsrs	r2, r4
 800e480:	4202      	tst	r2, r0
 800e482:	d0f7      	beq.n	800e474 <floor+0x8c>
 800e484:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e4c0 <floor+0xd8>
 800e488:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e48c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e494:	ddc8      	ble.n	800e428 <floor+0x40>
 800e496:	2900      	cmp	r1, #0
 800e498:	da02      	bge.n	800e4a0 <floor+0xb8>
 800e49a:	2b14      	cmp	r3, #20
 800e49c:	d103      	bne.n	800e4a6 <floor+0xbe>
 800e49e:	3101      	adds	r1, #1
 800e4a0:	ea20 0002 	bic.w	r0, r0, r2
 800e4a4:	e7c0      	b.n	800e428 <floor+0x40>
 800e4a6:	2401      	movs	r4, #1
 800e4a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4ac:	fa04 f303 	lsl.w	r3, r4, r3
 800e4b0:	4418      	add	r0, r3
 800e4b2:	42a8      	cmp	r0, r5
 800e4b4:	bf38      	it	cc
 800e4b6:	1909      	addcc	r1, r1, r4
 800e4b8:	e7f2      	b.n	800e4a0 <floor+0xb8>
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	4601      	mov	r1, r0
 800e4be:	e7b3      	b.n	800e428 <floor+0x40>
 800e4c0:	8800759c 	.word	0x8800759c
 800e4c4:	7e37e43c 	.word	0x7e37e43c
 800e4c8:	bff00000 	.word	0xbff00000
 800e4cc:	000fffff 	.word	0x000fffff

0800e4d0 <scalbn>:
 800e4d0:	ee10 1a90 	vmov	r1, s1
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e4da:	b98c      	cbnz	r4, 800e500 <scalbn+0x30>
 800e4dc:	ee10 3a10 	vmov	r3, s0
 800e4e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e4e4:	430b      	orrs	r3, r1
 800e4e6:	d011      	beq.n	800e50c <scalbn+0x3c>
 800e4e8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e5b0 <scalbn+0xe0>
 800e4ec:	4b3c      	ldr	r3, [pc, #240]	; (800e5e0 <scalbn+0x110>)
 800e4ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	da0b      	bge.n	800e50e <scalbn+0x3e>
 800e4f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e5b8 <scalbn+0xe8>
 800e4fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e4fe:	e005      	b.n	800e50c <scalbn+0x3c>
 800e500:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e504:	429c      	cmp	r4, r3
 800e506:	d107      	bne.n	800e518 <scalbn+0x48>
 800e508:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e50c:	bd10      	pop	{r4, pc}
 800e50e:	ee10 1a90 	vmov	r1, s1
 800e512:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e516:	3c36      	subs	r4, #54	; 0x36
 800e518:	4404      	add	r4, r0
 800e51a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e51e:	429c      	cmp	r4, r3
 800e520:	dd0d      	ble.n	800e53e <scalbn+0x6e>
 800e522:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e5c0 <scalbn+0xf0>
 800e526:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e5c8 <scalbn+0xf8>
 800e52a:	eeb0 6b47 	vmov.f64	d6, d7
 800e52e:	ee10 3a90 	vmov	r3, s1
 800e532:	2b00      	cmp	r3, #0
 800e534:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e538:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e53c:	e7e6      	b.n	800e50c <scalbn+0x3c>
 800e53e:	2c00      	cmp	r4, #0
 800e540:	dd0a      	ble.n	800e558 <scalbn+0x88>
 800e542:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e546:	ec53 2b10 	vmov	r2, r3, d0
 800e54a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e54e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e552:	ec43 2b10 	vmov	d0, r2, r3
 800e556:	e7d9      	b.n	800e50c <scalbn+0x3c>
 800e558:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e55c:	da19      	bge.n	800e592 <scalbn+0xc2>
 800e55e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e562:	4298      	cmp	r0, r3
 800e564:	ee10 3a90 	vmov	r3, s1
 800e568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e56c:	dd09      	ble.n	800e582 <scalbn+0xb2>
 800e56e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e5c0 <scalbn+0xf0>
 800e572:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e5c8 <scalbn+0xf8>
 800e576:	eeb0 7b40 	vmov.f64	d7, d0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e580:	e7bb      	b.n	800e4fa <scalbn+0x2a>
 800e582:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e5b8 <scalbn+0xe8>
 800e586:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e5d0 <scalbn+0x100>
 800e58a:	eeb0 7b40 	vmov.f64	d7, d0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	e7f4      	b.n	800e57c <scalbn+0xac>
 800e592:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e596:	ec53 2b10 	vmov	r2, r3, d0
 800e59a:	3436      	adds	r4, #54	; 0x36
 800e59c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e5a0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e5a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e5d8 <scalbn+0x108>
 800e5a8:	ec43 2b10 	vmov	d0, r2, r3
 800e5ac:	e7a5      	b.n	800e4fa <scalbn+0x2a>
 800e5ae:	bf00      	nop
 800e5b0:	00000000 	.word	0x00000000
 800e5b4:	43500000 	.word	0x43500000
 800e5b8:	c2f8f359 	.word	0xc2f8f359
 800e5bc:	01a56e1f 	.word	0x01a56e1f
 800e5c0:	8800759c 	.word	0x8800759c
 800e5c4:	7e37e43c 	.word	0x7e37e43c
 800e5c8:	8800759c 	.word	0x8800759c
 800e5cc:	fe37e43c 	.word	0xfe37e43c
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	81a56e1f 	.word	0x81a56e1f
 800e5d8:	00000000 	.word	0x00000000
 800e5dc:	3c900000 	.word	0x3c900000
 800e5e0:	ffff3cb0 	.word	0xffff3cb0

0800e5e4 <_init>:
 800e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e6:	bf00      	nop
 800e5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ea:	bc08      	pop	{r3}
 800e5ec:	469e      	mov	lr, r3
 800e5ee:	4770      	bx	lr

0800e5f0 <_fini>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	bf00      	nop
 800e5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5f6:	bc08      	pop	{r3}
 800e5f8:	469e      	mov	lr, r3
 800e5fa:	4770      	bx	lr
