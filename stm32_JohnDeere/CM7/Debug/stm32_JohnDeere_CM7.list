
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800c010  0800c010  0001c010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c51c  0800c51c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c524  0800c524  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c528  0800c528  0001c528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0800c52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d9c  240001dc  0800c708  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004f78  0800c708  00024f78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025203  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ab6  00000000  00000000  00045450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  00049f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a1  00000000  00000000  0004bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003fa5a  00000000  00000000  0004d0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000250fc  00000000  00000000  0008cb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001985c7  00000000  00000000  000b1c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082fc  00000000  00000000  0024a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  002524cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bff8 	.word	0x0800bff8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800bff8 	.word	0x0800bff8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c8:	429a      	cmp	r2, r3
 80007ca:	bf28      	it	cs
 80007cc:	461a      	movcs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007da:	429a      	cmp	r2, r3
 80007dc:	bf28      	it	cs
 80007de:	461a      	movcs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	429a      	cmp	r2, r3
 80007ee:	bf28      	it	cs
 80007f0:	461a      	movcs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	1ad2      	subs	r2, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000804:	fbb2 f3f3 	udiv	r3, r2, r3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800080c:	fb03 f202 	mul.w	r2, r3, r2
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4413      	add	r3, r2
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800082a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000890 <setPwmS+0xd8>
 800082e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000844:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000890 <setPwmS+0xd8>
 8000848:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800084c:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000862:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000866:	ed97 6b04 	vldr	d6, [r7, #16]
 800086a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086e:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	ed97 7b02 	vldr	d7, [r7, #8]
 800087a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800087e:	ee17 2a90 	vmov	r2, s15
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000884:	bf00      	nop
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	00000000 	.word	0x00000000
 8000894:	412e8480 	.word	0x412e8480

08000898 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_FREERTOS_Init+0x34>)
 800089e:	f006 f9ba 	bl	8006c16 <osMutexNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <MX_FREERTOS_Init+0x38>)
 80008a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <MX_FREERTOS_Init+0x3c>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_FREERTOS_Init+0x40>)
 80008ae:	f006 f905 	bl	8006abc <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <MX_FREERTOS_Init+0x44>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
  // imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
   servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <MX_FREERTOS_Init+0x48>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_FREERTOS_Init+0x4c>)
 80008be:	f006 f8fd 	bl	8006abc <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <MX_FREERTOS_Init+0x50>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	0800c170 	.word	0x0800c170
 80008d0:	24000200 	.word	0x24000200
 80008d4:	0800c14c 	.word	0x0800c14c
 80008d8:	080008ed 	.word	0x080008ed
 80008dc:	240001fc 	.word	0x240001fc
 80008e0:	0800c128 	.word	0x0800c128
 80008e4:	08000901 	.word	0x08000901
 80008e8:	240001f8 	.word	0x240001f8

080008ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80008f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f8:	f006 f972 	bl	8006be0 <osDelay>
 80008fc:	e7fa      	b.n	80008f4 <StartDefaultTask+0x8>
	...

08000900 <servoTask>:
	for(;;){
    osDelay(100);
	}
}

void servoTask(void *argument){
 8000900:	b580      	push	{r7, lr}
 8000902:	b0a0      	sub	sp, #128	; 0x80
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8000908:	2100      	movs	r1, #0
 800090a:	4818      	ldr	r0, [pc, #96]	; (800096c <servoTask+0x6c>)
 800090c:	f003 ff76 	bl	80047fc <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	67fb      	str	r3, [r7, #124]	; 0x7c
  int maxPulseWidthServo = 2000;
 8000916:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800091a:	67bb      	str	r3, [r7, #120]	; 0x78
  unsigned int pwmPeriod = 20000;
 800091c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000920:	677b      	str	r3, [r7, #116]	; 0x74
  int resolution = 100;
 8000922:	2364      	movs	r3, #100	; 0x64
 8000924:	673b      	str	r3, [r7, #112]	; 0x70
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2268      	movs	r2, #104	; 0x68
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 fcd6 	bl	800a2e0 <memset>
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <servoTask+0x6c>)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4611      	mov	r1, r2
 800093c:	224c      	movs	r2, #76	; 0x4c
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fda3 	bl	800a48a <memcpy>
 8000944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000946:	657b      	str	r3, [r7, #84]	; 0x54
 8000948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800094a:	65bb      	str	r3, [r7, #88]	; 0x58
 800094c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800094e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000952:	663b      	str	r3, [r7, #96]	; 0x60
//  float out[2] = {15, 90}; // min, max percentage values
//  float slope = (float)(out[1] - out[0]) / (in[1] - in[0]);
//
//  uint8_t last_steer = 0;

  servoValues.percentage = 50;
 8000954:	2332      	movs	r3, #50	; 0x32
 8000956:	667b      	str	r3, [r7, #100]	; 0x64
  setPwmS(&servoValues);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff2b 	bl	80007b8 <setPwmS>
    // if(servoValues.percentage != last_steer){
    //   setPwmS(&servoValues);
		//   printf("servo {%u},last {%u}",servoValues.percentage, last_steer);
    // }
    // last_steer = servoValues.percentage;
    osDelay(10000);
 8000962:	f242 7010 	movw	r0, #10000	; 0x2710
 8000966:	f006 f93b 	bl	8006be0 <osDelay>
 800096a:	e7fa      	b.n	8000962 <servoTask+0x62>
 800096c:	24000364 	.word	0x24000364

08000970 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a54      	ldr	r2, [pc, #336]	; (8000ae0 <MX_GPIO_Init+0x170>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a4d      	ldr	r2, [pc, #308]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a45      	ldr	r2, [pc, #276]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x170>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a36      	ldr	r2, [pc, #216]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0x170>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <MX_GPIO_Init+0x174>)
 8000a40:	f001 f93e 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0x178>)
 8000a4a:	f001 f939 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a54:	4825      	ldr	r0, [pc, #148]	; (8000aec <MX_GPIO_Init+0x17c>)
 8000a56:	f001 f933 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <MX_GPIO_Init+0x180>)
 8000a60:	f001 f92e 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a64:	2310      	movs	r3, #16
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x174>)
 8000a7c:	f000 ff70 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x178>)
 8000a98:	f000 ff62 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8000a9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_GPIO_Init+0x17c>)
 8000ab6:	f000 ff53 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_GPIO_Init+0x180>)
 8000ad2:	f000 ff45 	bl	8001960 <HAL_GPIO_Init>

}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	; 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020000 	.word	0x58020000
 8000ae8:	58020400 	.word	0x58020400
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	58021000 	.word	0x58021000

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b00:	bf00      	nop
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <main+0xb0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <main+0x24>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dcf4      	bgt.n	8000b02 <main+0xe>
  if ( timeout < 0 )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da01      	bge.n	8000b22 <main+0x2e>
  {
  Error_Handler();
 8000b1e:	f000 f8bf 	bl	8000ca0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fd9b 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f83f 	bl	8000ba8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <main+0xb0>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <main+0xb0>)
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <main+0xb0>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 f8d3 	bl	8001cf4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f001 f8e9 	bl	8001d28 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b5c:	bf00      	nop
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <main+0xb0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d104      	bne.n	8000b74 <main+0x80>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dcf4      	bgt.n	8000b5e <main+0x6a>
if ( timeout < 0 )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da01      	bge.n	8000b7e <main+0x8a>
{
Error_Handler();
 8000b7a:	f000 f891 	bl	8000ca0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff fef7 	bl	8000970 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b82:	f000 f8a5 	bl	8000cd0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b86:	f000 fc8d 	bl	80014a4 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000b8a:	f000 f8f9 	bl	8000d80 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b8e:	f000 fb03 	bl	8001198 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b92:	f000 fb77 	bl	8001284 <MX_TIM3_Init>
//  setPwmS(&servoValues);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b96:	f005 ff47 	bl	8006a28 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b9a:	f7ff fe7d 	bl	8000898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b9e:	f005 ff67 	bl	8006a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0xae>
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09c      	sub	sp, #112	; 0x70
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	224c      	movs	r2, #76	; 0x4c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f009 fb92 	bl	800a2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f009 fb8c 	bl	800a2e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f001 f8c1 	bl	8001d50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <SystemClock_Config+0xf0>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <SystemClock_Config+0xf0>)
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <SystemClock_Config+0xf0>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <SystemClock_Config+0xf4>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf0:	4a2a      	ldr	r2, [pc, #168]	; (8000c9c <SystemClock_Config+0xf4>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <SystemClock_Config+0xf4>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c04:	bf00      	nop
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <SystemClock_Config+0xf4>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c12:	d1f8      	bne.n	8000c06 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000c2a:	2312      	movs	r3, #18
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f8d9 	bl	8001e04 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c58:	f000 f822 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	233f      	movs	r3, #63	; 0x3f
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2303      	movs	r3, #3
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fced 	bl	8002660 <HAL_RCC_ClockConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c8c:	f000 f808 	bl	8000ca0 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3770      	adds	r7, #112	; 0x70
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58000400 	.word	0x58000400
 8000c9c:	58024800 	.word	0x58024800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <__io_putchar+0x20>)
 8000cbe:	f004 fdc9 	bl	8005854 <HAL_UART_Transmit>
  return ch;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	240003b0 	.word	0x240003b0

08000cd0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <MX_SPI1_Init+0xac>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000cdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_SPI1_Init+0xa8>)
 8000d66:	f003 fb6f 	bl	8004448 <HAL_SPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000d70:	f7ff ff96 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000204 	.word	0x24000204
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <MX_SPI2_Init+0xa8>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000db0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_SPI2_Init+0xa4>)
 8000e12:	f003 fb19 	bl	8004448 <HAL_SPI_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000e1c:	f7ff ff40 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2400028c 	.word	0x2400028c
 8000e28:	40003800 	.word	0x40003800

08000e2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ba      	sub	sp, #232	; 0xe8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	22bc      	movs	r2, #188	; 0xbc
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 fa47 	bl	800a2e0 <memset>
  if(spiHandle->Instance==SPI1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <HAL_SPI_MspInit+0x150>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d142      	bne.n	8000ee2 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 ff84 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e76:	f7ff ff13 	bl	8000ca0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e80:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000eb6:	2338      	movs	r3, #56	; 0x38
 8000eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <HAL_SPI_MspInit+0x158>)
 8000edc:	f000 fd40 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ee0:	e047      	b.n	8000f72 <HAL_SPI_MspInit+0x146>
  else if(spiHandle->Instance==SPI2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_SPI_MspInit+0x15c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d142      	bne.n	8000f72 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 ff3c 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8000f06:	f7ff fecb 	bl	8000ca0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_SPI_MspInit+0x154>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f60:	2305      	movs	r3, #5
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_SPI_MspInit+0x158>)
 8000f6e:	f000 fcf7 	bl	8001960 <HAL_GPIO_Init>
}
 8000f72:	bf00      	nop
 8000f74:	37e8      	adds	r7, #232	; 0xe8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020400 	.word	0x58020400
 8000f88:	40003800 	.word	0x40003800

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x38>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_MspInit+0x38>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_MspInit+0x38>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f06f 0001 	mvn.w	r0, #1
 8000fb8:	f000 fcab 	bl	8001912 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 fba2 	bl	8001740 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ffc:	f007 ff6e 	bl	8008edc <xTaskGetSchedulerState>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001006:	f006 fb1f 	bl	8007648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}

0800100e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
	return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_kill>:

int _kill(int pid, int sig)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001028:	f009 fa02 	bl	800a430 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	2216      	movs	r2, #22
 8001030:	601a      	str	r2, [r3, #0]
	return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_exit>:

void _exit (int status)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001046:	f04f 31ff 	mov.w	r1, #4294967295
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffe7 	bl	800101e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001050:	e7fe      	b.n	8001050 <_exit+0x12>

08001052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00a      	b.n	800107a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001064:	f3af 8000 	nop.w
 8001068:	4601      	mov	r1, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	b2ca      	uxtb	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf0      	blt.n	8001064 <_read+0x12>
	}

return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe00 	bl	8000cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <_write+0x12>
	}
	return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_close>:

int _close(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ec:	605a      	str	r2, [r3, #4]
	return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_isatty>:

int _isatty(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f009 f968 	bl	800a430 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	24080000 	.word	0x24080000
 800118c:	00000400 	.word	0x00000400
 8001190:	24000314 	.word	0x24000314
 8001194:	24004f78 	.word	0x24004f78

08001198 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011d4:	2248      	movs	r2, #72	; 0x48
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4823      	ldr	r0, [pc, #140]	; (8001280 <MX_TIM2_Init+0xe8>)
 80011f4:	f003 fa49 	bl	800468a <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011fe:	f7ff fd4f 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <MX_TIM2_Init+0xe8>)
 8001210:	f003 fd16 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800121a:	f7ff fd41 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <MX_TIM2_Init+0xe8>)
 8001220:	f003 fa8a 	bl	8004738 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800122a:	f7ff fd39 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_TIM2_Init+0xe8>)
 800123e:	f004 fa2b 	bl	8005698 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001248:	f7ff fd2a 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM2_Init+0xe8>)
 8001264:	f003 fbd8 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800126e:	f7ff fd17 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM2_Init+0xe8>)
 8001274:	f000 f8b6 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	; 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000318 	.word	0x24000318

08001284 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_TIM3_Init+0xe8>)
 80012b8:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <MX_TIM3_Init+0xec>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_TIM3_Init+0xe8>)
 80012be:	2248      	movs	r2, #72	; 0x48
 80012c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_TIM3_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_TIM3_Init+0xe8>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_TIM3_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_TIM3_Init+0xe8>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_TIM3_Init+0xe8>)
 80012de:	f003 f9d4 	bl	800468a <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e8:	f7ff fcda 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_TIM3_Init+0xe8>)
 80012fa:	f003 fca1 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001304:	f7ff fccc 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM3_Init+0xe8>)
 800130a:	f003 fa15 	bl	8004738 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001314:	f7ff fcc4 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_TIM3_Init+0xe8>)
 8001328:	f004 f9b6 	bl	8005698 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001332:	f7ff fcb5 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM3_Init+0xe8>)
 800134e:	f003 fb63 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001358:	f7ff fca2 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM3_Init+0xe8>)
 800135e:	f000 f841 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000364 	.word	0x24000364
 8001370:	40000400 	.word	0x40000400

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001384:	d10f      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013a4:	e013      	b.n	80013ce <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0x6c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d10e      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 80013b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_TIM_Base_MspInit+0x68>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	58024400 	.word	0x58024400
 80013e0:	40000400 	.word	0x40000400

080013e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d120      	bne.n	8001448 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001436:	2301      	movs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4816      	ldr	r0, [pc, #88]	; (800149c <HAL_TIM_MspPostInit+0xb8>)
 8001442:	f000 fa8d 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001446:	e023      	b.n	8001490 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_TIM_MspPostInit+0xbc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11e      	bne.n	8001490 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_TIM_MspPostInit+0xb4>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001480:	2302      	movs	r3, #2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <HAL_TIM_MspPostInit+0xb8>)
 800148c:	f000 fa68 	bl	8001960 <HAL_GPIO_Init>
}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58024400 	.word	0x58024400
 800149c:	58020000 	.word	0x58020000
 80014a0:	40000400 	.word	0x40000400

080014a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART3_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ee:	f004 f961 	bl	80057b4 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fbd2 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001500:	f005 f994 	bl	800682c <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f7ff fbc9 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001512:	f005 f9c9 	bl	80068a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff fbc0 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001522:	f005 f94a 	bl	80067ba <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f7ff fbb8 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240003b0 	.word	0x240003b0
 8001538:	40004800 	.word	0x40004800

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b8      	sub	sp, #224	; 0xe0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	22bc      	movs	r2, #188	; 0xbc
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f008 febf 	bl	800a2e0 <memset>
  if(uartHandle->Instance==USART3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_UART_MspInit+0xc0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d142      	bne.n	80015f2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fbfc 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff fb8b 	bl	8000ca0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_UART_MspInit+0xc4>)
 800158c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_UART_MspInit+0xc4>)
 8001592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0xc4>)
 800159c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e0:	2307      	movs	r3, #7
 80015e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0xc8>)
 80015ee:	f000 f9b7 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	37e0      	adds	r7, #224	; 0xe0
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004800 	.word	0x40004800
 8001600:	58024400 	.word	0x58024400
 8001604:	58020c00 	.word	0x58020c00

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800160c:	f7ff f83e 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f008 ff01 	bl	800a43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fa5b 	bl	8000af4 <main>
  bx  lr
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001648:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 800164c:	0800c52c 	.word	0x0800c52c
  ldr r2, =_sbss
 8001650:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001654:	24004f78 	.word	0x24004f78

08001658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC3_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 f94a 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001668:	f001 f9b0 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_Init+0x68>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <HAL_Init+0x6c>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_Init+0x68>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_Init+0x6c>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x70>)
 800169e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f814 	bl	80016d4 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e002      	b.n	80016bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fc69 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58024400 	.word	0x58024400
 80016c8:	0800c118 	.word	0x0800c118
 80016cc:	24000004 	.word	0x24000004
 80016d0:	24000000 	.word	0x24000000

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e021      	b.n	800172c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_InitTick+0x64>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_InitTick+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f921 	bl	8001946 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f8f9 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x68>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2400000c 	.word	0x2400000c
 8001738:	24000000 	.word	0x24000000
 800173c:	24000008 	.word	0x24000008

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400000c 	.word	0x2400000c
 8001764:	24000440 	.word	0x24000440

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000440 	.word	0x24000440

08001780 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetREVID+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1b      	lsrs	r3, r3, #16
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	5c001000 	.word	0x5c001000

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	05fa0000 	.word	0x05fa0000

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff47 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb2 	bl	80018b8 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_GPIO_Init+0x234>)
 8001970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001972:	e194      	b.n	8001c9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8186 	beq.w	8001c98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d005      	beq.n	80019a4 <HAL_GPIO_Init+0x44>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d130      	bne.n	8001a06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 0201 	and.w	r2, r3, #1
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d017      	beq.n	8001a42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d123      	bne.n	8001a96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0203 	and.w	r2, r3, #3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80e0 	beq.w	8001c98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ade:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_GPIO_Init+0x23c>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_GPIO_Init+0x240>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d052      	beq.n	8001bc8 <HAL_GPIO_Init+0x268>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_GPIO_Init+0x244>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0x22e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_GPIO_Init+0x248>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x22a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_GPIO_Init+0x24c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x226>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x250>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x222>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_GPIO_Init+0x254>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x21e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x258>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x25c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x260>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_GPIO_Init+0x264>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x20e>
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	e02d      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e02b      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e029      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e027      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e025      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e023      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e021      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e01f      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e01d      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e01b      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b92:	bf00      	nop
 8001b94:	58000080 	.word	0x58000080
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58000400 	.word	0x58000400
 8001ba0:	58020000 	.word	0x58020000
 8001ba4:	58020400 	.word	0x58020400
 8001ba8:	58020800 	.word	0x58020800
 8001bac:	58020c00 	.word	0x58020c00
 8001bb0:	58021000 	.word	0x58021000
 8001bb4:	58021400 	.word	0x58021400
 8001bb8:	58021800 	.word	0x58021800
 8001bbc:	58021c00 	.word	0x58021c00
 8001bc0:	58022000 	.word	0x58022000
 8001bc4:	58022400 	.word	0x58022400
 8001bc8:	2300      	movs	r3, #0
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	f002 0203 	and.w	r2, r2, #3
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x35c>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f ae63 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	58000400 	.word	0x58000400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_HSEM_FastTake+0x2c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3320      	adds	r3, #32
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_HSEM_FastTake+0x30>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	58026400 	.word	0x58026400
 8001d24:	80000300 	.word	0x80000300

08001d28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d32:	4906      	ldr	r1, [pc, #24]	; (8001d4c <HAL_HSEM_Release+0x24>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	58026400 	.word	0x58026400

08001d50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d00a      	beq.n	8001d7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e040      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e03e      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d82:	491f      	ldr	r1, [pc, #124]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d8a:	f7ff fced 	bl	8001768 <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d92:	f7ff fce9 	bl	8001768 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da0:	d901      	bls.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e028      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d1ee      	bne.n	8001d92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b1e      	cmp	r3, #30
 8001db8:	d008      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8001dbe:	d005      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b1d      	cmp	r3, #29
 8001dc4:	d002      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b2d      	cmp	r3, #45	; 0x2d
 8001dca:	d114      	bne.n	8001df6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001dcc:	f7ff fccc 	bl	8001768 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dd4:	f7ff fcc8 	bl	8001768 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de2:	d901      	bls.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	58024800 	.word	0x58024800

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f000 bc1d 	b.w	8002652 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8087 	beq.w	8001f34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e30:	4b96      	ldr	r3, [pc, #600]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_OscConfig+0x48>
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2b18      	cmp	r3, #24
 8001e40:	d110      	bne.n	8001e64 <HAL_RCC_OscConfig+0x60>
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x12e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d168      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e3f6      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x78>
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a86      	ldr	r2, [pc, #536]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e02e      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x9a>
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a80      	ldr	r2, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b7e      	ldr	r3, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7d      	ldr	r2, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e01d      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xbe>
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a74      	ldr	r2, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fc41 	bl	8001768 <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7ff fc3d 	bl	8001768 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e3aa      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0xe6>
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fc2d 	bl	8001768 <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f12:	f7ff fc29 	bl	8001768 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e396      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x10e>
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80cb 	beq.w	80020d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_RCC_OscConfig+0x164>
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b18      	cmp	r3, #24
 8001f5c:	d156      	bne.n	800200c <HAL_RCC_OscConfig+0x208>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d151      	bne.n	800200c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x17c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e368      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 0219 	bic.w	r2, r3, #25
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	493f      	ldr	r1, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f92:	f7ff fbe9 	bl	8001768 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fbe5 	bl	8001768 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e352      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	f7ff fbe2 	bl	8001780 <HAL_GetREVID>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d817      	bhi.n	8001ff6 <HAL_RCC_OscConfig+0x1f2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1dc>
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fde:	e07b      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff4:	e070      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	061b      	lsls	r3, r3, #24
 8002004:	4921      	ldr	r1, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200a:	e065      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d048      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0219 	bic.w	r2, r3, #25
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	491a      	ldr	r1, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fb9f 	bl	8001768 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fb9b 	bl	8001768 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e308      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	f7ff fb98 	bl	8001780 <HAL_GetREVID>
 8002050:	4603      	mov	r3, r0
 8002052:	f241 0203 	movw	r2, #4099	; 0x1003
 8002056:	4293      	cmp	r3, r2
 8002058:	d81a      	bhi.n	8002090 <HAL_RCC_OscConfig+0x28c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d108      	bne.n	8002074 <HAL_RCC_OscConfig+0x270>
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x288>)
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	6053      	str	r3, [r2, #4]
 8002072:	e031      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	031b      	lsls	r3, r3, #12
 8002082:	4902      	ldr	r1, [pc, #8]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 800208a:	bf00      	nop
 800208c:	58024400 	.word	0x58024400
 8002090:	4b9a      	ldr	r3, [pc, #616]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	4997      	ldr	r1, [pc, #604]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b95      	ldr	r3, [pc, #596]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb59 	bl	8001768 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fb55 	bl	8001768 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2c2      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020cc:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a9 	beq.w	8002238 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d007      	beq.n	800210c <HAL_RCC_OscConfig+0x308>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b18      	cmp	r3, #24
 8002100:	d13a      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d135      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800210c:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e296      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002124:	f7ff fb2c 	bl	8001780 <HAL_GetREVID>
 8002128:	4603      	mov	r3, r0
 800212a:	f241 0203 	movw	r2, #4099	; 0x1003
 800212e:	4293      	cmp	r3, r2
 8002130:	d817      	bhi.n	8002162 <HAL_RCC_OscConfig+0x35e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d108      	bne.n	800214c <HAL_RCC_OscConfig+0x348>
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002148:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214a:	e075      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	4968      	ldr	r1, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002160:	e06a      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	4962      	ldr	r1, [pc, #392]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002176:	e05f      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d042      	beq.n	8002206 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff faec 	bl	8001768 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002194:	f7ff fae8 	bl	8001768 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e255      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a6:	4b55      	ldr	r3, [pc, #340]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b2:	f7ff fae5 	bl	8001780 <HAL_GetREVID>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80021bc:	4293      	cmp	r3, r2
 80021be:	d817      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x3ec>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d108      	bne.n	80021da <HAL_RCC_OscConfig+0x3d6>
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80021d0:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021d6:	6053      	str	r3, [r2, #4]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	4944      	ldr	r1, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
 80021ee:	e023      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	493f      	ldr	r1, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3c      	ldr	r2, [pc, #240]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800220c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff faa9 	bl	8001768 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800221a:	f7ff faa5 	bl	8001768 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e212      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa86 	bl	8001768 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa82 	bl	8001768 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ef      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x45c>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff fa6c 	bl	8001768 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fa68 	bl	8001768 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1d5      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d039      	beq.n	8002332 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fa49 	bl	8001768 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022da:	f7ff fa45 	bl	8001768 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1b2      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x4d6>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002300:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9a      	ldr	r2, [pc, #616]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800230a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230c:	f7ff fa2c 	bl	8001768 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002314:	f7ff fa28 	bl	8001768 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e195      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002326:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8081 	beq.w	8002442 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8b      	ldr	r2, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234c:	f7ff fa0c 	bl	8001768 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7ff fa08 	bl	8001768 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e175      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	4b83      	ldr	r3, [pc, #524]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x584>
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	e02d      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x5a6>
 8002390:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a73      	ldr	r2, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c8>
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a64      	ldr	r2, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f9bc 	bl	8001768 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7ff f9b8 	bl	8001768 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e123      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCC_OscConfig+0x5f0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f9a6 	bl	8001768 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7ff f9a2 	bl	8001768 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e10d      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002436:	4b4e      	ldr	r3, [pc, #312]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ee      	bne.n	8002420 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8102 	beq.w	8002650 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800244c:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002454:	2b18      	cmp	r3, #24
 8002456:	f000 80bd 	beq.w	80025d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 809e 	bne.w	80025a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a41      	ldr	r2, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f97a 	bl	8001768 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f976 	bl	8001768 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0e3      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x774>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4931      	ldr	r1, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	628b      	str	r3, [r1, #40]	; 0x28
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	3b01      	subs	r3, #1
 80024b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	3b01      	subs	r3, #1
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	3b01      	subs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	3b01      	subs	r3, #1
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80024e0:	4923      	ldr	r1, [pc, #140]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x778>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f023 020c 	bic.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4917      	ldr	r1, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f023 0202 	bic.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f8ff 	bl	8001768 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800256c:	e011      	b.n	8002592 <HAL_RCC_OscConfig+0x78e>
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	58024800 	.word	0x58024800
 8002578:	fffffc0c 	.word	0xfffffc0c
 800257c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f8f2 	bl	8001768 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e05f      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x858>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x77c>
 800259e:	e057      	b.n	8002650 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f8dc 	bl	8001768 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f8d8 	bl	8001768 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e045      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x7b0>
 80025d2:	e03d      	b.n	8002650 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d031      	beq.n	800264c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d12a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d122      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0a5b      	lsrs	r3, r3, #9
 800261a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d111      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	58024400 	.word	0x58024400

08002660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e19c      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b87      	ldr	r3, [pc, #540]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 020f 	bic.w	r2, r3, #15
 800268a:	4985      	ldr	r1, [pc, #532]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b83      	ldr	r3, [pc, #524]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e184      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026c0:	4b78      	ldr	r3, [pc, #480]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4975      	ldr	r1, [pc, #468]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d908      	bls.n	8002700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	496a      	ldr	r1, [pc, #424]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002718:	429a      	cmp	r2, r3
 800271a:	d908      	bls.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800271c:	4b61      	ldr	r3, [pc, #388]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	495e      	ldr	r1, [pc, #376]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002746:	429a      	cmp	r2, r3
 8002748:	d908      	bls.n	800275c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800274a:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4953      	ldr	r1, [pc, #332]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002758:	4313      	orrs	r3, r2
 800275a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	429a      	cmp	r2, r3
 8002776:	d908      	bls.n	800278a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f023 020f 	bic.w	r2, r3, #15
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4947      	ldr	r1, [pc, #284]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002786:	4313      	orrs	r3, r2
 8002788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d055      	beq.n	8002842 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4940      	ldr	r1, [pc, #256]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b0:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d121      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0f6      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d115      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0ea      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0de      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d6      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f023 0207 	bic.w	r2, r3, #7
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4925      	ldr	r1, [pc, #148]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800280e:	4313      	orrs	r3, r2
 8002810:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe ffa9 	bl	8001768 <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002818:	e00a      	b.n	8002830 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281a:	f7fe ffa5 	bl	8001768 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0be      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	429a      	cmp	r2, r3
 8002840:	d1eb      	bne.n	800281a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	429a      	cmp	r2, r3
 800285c:	d208      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f023 020f 	bic.w	r2, r3, #15
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800286c:	4313      	orrs	r3, r2
 800286e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d214      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 020f 	bic.w	r2, r3, #15
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e086      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
 80028a0:	52002000 	.word	0x52002000
 80028a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d208      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	4939      	ldr	r1, [pc, #228]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d208      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	492e      	ldr	r1, [pc, #184]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002900:	4313      	orrs	r3, r2
 8002902:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800291c:	429a      	cmp	r2, r3
 800291e:	d208      	bcs.n	8002932 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 800292e:	4313      	orrs	r3, r2
 8002930:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800294a:	429a      	cmp	r2, r3
 800294c:	d208      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4917      	ldr	r1, [pc, #92]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 800295c:	4313      	orrs	r3, r2
 800295e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002960:	f000 f834 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4912      	ldr	r1, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x35c>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_RCC_ClockConfig+0x35c>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x360>)
 8002996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x364>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x368>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fe96 	bl	80016d4 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	58024400 	.word	0x58024400
 80029bc:	0800c118 	.word	0x0800c118
 80029c0:	24000004 	.word	0x24000004
 80029c4:	24000000 	.word	0x24000000
 80029c8:	24000008 	.word	0x24000008

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d2:	4bb3      	ldr	r3, [pc, #716]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029da:	2b18      	cmp	r3, #24
 80029dc:	f200 8155 	bhi.w	8002c8a <HAL_RCC_GetSysClockFreq+0x2be>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a4d 	.word	0x08002a4d
 80029ec:	08002c8b 	.word	0x08002c8b
 80029f0:	08002c8b 	.word	0x08002c8b
 80029f4:	08002c8b 	.word	0x08002c8b
 80029f8:	08002c8b 	.word	0x08002c8b
 80029fc:	08002c8b 	.word	0x08002c8b
 8002a00:	08002c8b 	.word	0x08002c8b
 8002a04:	08002c8b 	.word	0x08002c8b
 8002a08:	08002a73 	.word	0x08002a73
 8002a0c:	08002c8b 	.word	0x08002c8b
 8002a10:	08002c8b 	.word	0x08002c8b
 8002a14:	08002c8b 	.word	0x08002c8b
 8002a18:	08002c8b 	.word	0x08002c8b
 8002a1c:	08002c8b 	.word	0x08002c8b
 8002a20:	08002c8b 	.word	0x08002c8b
 8002a24:	08002c8b 	.word	0x08002c8b
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002c8b 	.word	0x08002c8b
 8002a30:	08002c8b 	.word	0x08002c8b
 8002a34:	08002c8b 	.word	0x08002c8b
 8002a38:	08002c8b 	.word	0x08002c8b
 8002a3c:	08002c8b 	.word	0x08002c8b
 8002a40:	08002c8b 	.word	0x08002c8b
 8002a44:	08002c8b 	.word	0x08002c8b
 8002a48:	08002a7f 	.word	0x08002a7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a58:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	4a90      	ldr	r2, [pc, #576]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a6a:	e111      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a6e:	61bb      	str	r3, [r7, #24]
    break;
 8002a70:	e10e      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a74:	61bb      	str	r3, [r7, #24]
    break;
 8002a76:	e10b      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a7a:	61bb      	str	r3, [r7, #24]
    break;
 8002a7c:	e108      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a88:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a94:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80e1 	beq.w	8002c84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f000 8083 	beq.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x204>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f200 80a1 	bhi.w	8002c14 <HAL_RCC_GetSysClockFreq+0x248>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d056      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ade:	e099      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02d      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b46:	e087      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002cb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b8a:	e065      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9e:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bce:	e043      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002cbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c12:	e021      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c62:	3301      	adds	r3, #1
 8002c64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7c:	ee17 3a90 	vmov	r3, s15
 8002c80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c8c:	61bb      	str	r3, [r7, #24]
    break;
 8002c8e:	bf00      	nop
  }

  return sysclockfreq;
 8002c90:	69bb      	ldr	r3, [r7, #24]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	03d09000 	.word	0x03d09000
 8002ca8:	003d0900 	.word	0x003d0900
 8002cac:	007a1200 	.word	0x007a1200
 8002cb0:	46000000 	.word	0x46000000
 8002cb4:	4c742400 	.word	0x4c742400
 8002cb8:	4a742400 	.word	0x4a742400
 8002cbc:	4af42400 	.word	0x4af42400

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cc6:	f7ff fe81 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490f      	ldr	r1, [pc, #60]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	58024400 	.word	0x58024400
 8002d14:	0800c118 	.word	0x0800c118
 8002d18:	24000004 	.word	0x24000004
 8002d1c:	24000000 	.word	0x24000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d24:	f7ff ffcc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	58024400 	.word	0x58024400
 8002d48:	0800c118 	.word	0x0800c118

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d50:	f7ff ffb6 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	58024400 	.word	0x58024400
 8002d74:	0800c118 	.word	0x0800c118

08002d78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d80:	2300      	movs	r3, #0
 8002d82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d03f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d9c:	d02a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002da2:	d824      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da8:	d018      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dae:	d81e      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d007      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dba:	e018      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dbc:	4ba3      	ldr	r3, [pc, #652]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	4aa2      	ldr	r2, [pc, #648]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dc8:	e015      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 f9d5 	bl	8004180 <RCCEx_PLL2_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dda:	e00c      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	2102      	movs	r1, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fa7e 	bl	80042e4 <RCCEx_PLL3_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
      break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e08:	4990      	ldr	r1, [pc, #576]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e0e:	e001      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d03d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d826      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e53 	.word	0x08002e53
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a80      	ldr	r2, [pc, #512]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e50:	e015      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f991 	bl	8004180 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fa3a 	bl	80042e4 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e84:	4b71      	ldr	r3, [pc, #452]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	f023 0207 	bic.w	r2, r3, #7
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	496e      	ldr	r1, [pc, #440]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	650b      	str	r3, [r1, #80]	; 0x50
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d042      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d02b      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d825      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8002eba:	d028      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ebc:	2bc0      	cmp	r3, #192	; 0xc0
 8002ebe:	d821      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d81d      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002ed0:	e018      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed2:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ede:	e017      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f94a 	bl	8004180 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f9f3 	bl	80042e4 <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	494a      	ldr	r1, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	650b      	str	r3, [r1, #80]	; 0x50
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d049      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f4a:	d82a      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f50:	d02c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002f52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d018      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a35      	ldr	r2, [pc, #212]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f7c:	e017      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f8fb 	bl	8004180 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f8e:	e00e      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3324      	adds	r3, #36	; 0x24
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f9a4 	bl	80042e4 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e005      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fc2:	4922      	ldr	r1, [pc, #136]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	658b      	str	r3, [r1, #88]	; 0x58
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04b      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe4:	d030      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fea:	d82a      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002fec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002ff2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff6:	d824      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003002:	d81e      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d007      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800300e:	e018      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800301c:	e019      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f8ab 	bl	8004180 <RCCEx_PLL2_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800302e:	e010      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3324      	adds	r3, #36	; 0x24
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f954 	bl	80042e4 <RCCEx_PLL3_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
      break;
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800304c:	58024400 	.word	0x58024400
      break;
 8003050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003066:	4996      	ldr	r1, [pc, #600]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003068:	4313      	orrs	r3, r2
 800306a:	658b      	str	r3, [r1, #88]	; 0x58
 800306c:	e001      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d032      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	d01c      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d817      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 800308a:	2b20      	cmp	r3, #32
 800308c:	d00c      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800308e:	2b20      	cmp	r3, #32
 8003090:	d813      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003096:	2b10      	cmp	r3, #16
 8003098:	d10f      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4a88      	ldr	r2, [pc, #544]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80030a6:	e00e      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f866 	bl	8004180 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80030b8:	e005      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80030c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030cc:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	4979      	ldr	r1, [pc, #484]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d047      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d030      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d82a      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003104:	d02c      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800310a:	d824      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d018      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	d81e      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d007      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003122:	e018      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003124:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800312a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003130:	e017      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f821 	bl	8004180 <RCCEx_PLL2_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003142:	e00e      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f8ca 	bl	80042e4 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003154:	e005      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003168:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	4952      	ldr	r1, [pc, #328]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003176:	4313      	orrs	r3, r2
 8003178:	650b      	str	r3, [r1, #80]	; 0x50
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d049      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319a:	d828      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800319c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a0:	d02a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80031a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a6:	d822      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ac:	d026      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80031ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031b2:	d81c      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b8:	d010      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80031ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031be:	d816      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01d      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d111      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ffd5 	bl	8004180 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031da:	e012      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f87e 	bl	80042e4 <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031ec:	e009      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
      break;
 80031f2:	e006      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031f4:	bf00      	nop
 80031f6:	e004      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	492a      	ldr	r1, [pc, #168]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003216:	4313      	orrs	r3, r2
 8003218:	650b      	str	r3, [r1, #80]	; 0x50
 800321a:	e001      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003236:	d02e      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323c:	d828      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d02a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d822      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800324a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800324e:	d026      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003250:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003254:	d81c      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325a:	d010      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800325c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003260:	d816      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01d      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326a:	d111      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff84 	bl	8004180 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800327c:	e012      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f82d 	bl	80042e4 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800328e:	e009      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80032a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032b8:	4901      	ldr	r1, [pc, #4]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	658b      	str	r3, [r1, #88]	; 0x58
 80032be:	e003      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80032c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d00e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80032de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e2:	d814      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80032e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ec:	d10f      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ee:	4baf      	ldr	r3, [pc, #700]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	4aae      	ldr	r2, [pc, #696]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80032fa:	e00c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f000 ff3c 	bl	8004180 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
      break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800331c:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003328:	49a0      	ldr	r1, [pc, #640]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800332a:	4313      	orrs	r3, r2
 800332c:	650b      	str	r3, [r1, #80]	; 0x50
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	2b03      	cmp	r3, #3
 8003346:	d81b      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003387 	.word	0x08003387
 8003354:	08003361 	.word	0x08003361
 8003358:	0800336f 	.word	0x0800336f
 800335c:	08003387 	.word	0x08003387
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	4a91      	ldr	r2, [pc, #580]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800336c:	e00c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ff03 	bl	8004180 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800337e:	e003      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4984      	ldr	r1, [pc, #528]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800339c:	4313      	orrs	r3, r2
 800339e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8086 	beq.w	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7d      	ldr	r2, [pc, #500]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c0:	f7fe f9d2 	bl	8001768 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fe f9ce 	bl	8001768 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d902      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	75fb      	strb	r3, [r7, #23]
        break;
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033dc:	4b74      	ldr	r3, [pc, #464]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d166      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033f8:	4053      	eors	r3, r2
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800340c:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003424:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	d115      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe f997 	bl	8001768 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800343c:	e00b      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe f993 	bl	8001768 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d902      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	75fb      	strb	r3, [r7, #23]
            break;
 8003454:	e005      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ed      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d126      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003476:	d10d      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003486:	0919      	lsrs	r1, r3, #4
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800348a:	400b      	ands	r3, r1
 800348c:	4947      	ldr	r1, [pc, #284]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003494:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a44      	ldr	r2, [pc, #272]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800349a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800349e:	6113      	str	r3, [r2, #16]
 80034a0:	4b42      	ldr	r3, [pc, #264]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	493f      	ldr	r1, [pc, #252]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	670b      	str	r3, [r1, #112]	; 0x70
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8085 	beq.w	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	2b28      	cmp	r3, #40	; 0x28
 80034d4:	d866      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	080035b9 	.word	0x080035b9
 80034e0:	080035a5 	.word	0x080035a5
 80034e4:	080035a5 	.word	0x080035a5
 80034e8:	080035a5 	.word	0x080035a5
 80034ec:	080035a5 	.word	0x080035a5
 80034f0:	080035a5 	.word	0x080035a5
 80034f4:	080035a5 	.word	0x080035a5
 80034f8:	080035a5 	.word	0x080035a5
 80034fc:	08003581 	.word	0x08003581
 8003500:	080035a5 	.word	0x080035a5
 8003504:	080035a5 	.word	0x080035a5
 8003508:	080035a5 	.word	0x080035a5
 800350c:	080035a5 	.word	0x080035a5
 8003510:	080035a5 	.word	0x080035a5
 8003514:	080035a5 	.word	0x080035a5
 8003518:	080035a5 	.word	0x080035a5
 800351c:	08003593 	.word	0x08003593
 8003520:	080035a5 	.word	0x080035a5
 8003524:	080035a5 	.word	0x080035a5
 8003528:	080035a5 	.word	0x080035a5
 800352c:	080035a5 	.word	0x080035a5
 8003530:	080035a5 	.word	0x080035a5
 8003534:	080035a5 	.word	0x080035a5
 8003538:	080035a5 	.word	0x080035a5
 800353c:	080035b9 	.word	0x080035b9
 8003540:	080035a5 	.word	0x080035a5
 8003544:	080035a5 	.word	0x080035a5
 8003548:	080035a5 	.word	0x080035a5
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080035a5 	.word	0x080035a5
 8003558:	080035a5 	.word	0x080035a5
 800355c:	080035b9 	.word	0x080035b9
 8003560:	080035a5 	.word	0x080035a5
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035a5 	.word	0x080035a5
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035a5 	.word	0x080035a5
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035b9 	.word	0x080035b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fdfa 	bl	8004180 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003590:	e013      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fea3 	bl	80042e4 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035a2:	e00a      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e007      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035aa:	bf00      	nop
 80035ac:	58024400 	.word	0x58024400
 80035b0:	58024800 	.word	0x58024800
 80035b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80035b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035c0:	4b96      	ldr	r3, [pc, #600]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035cc:	4993      	ldr	r1, [pc, #588]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	654b      	str	r3, [r1, #84]	; 0x54
 80035d2:	e001      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d038      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d821      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003637 	.word	0x08003637
 80035f8:	0800360d 	.word	0x0800360d
 80035fc:	0800361f 	.word	0x0800361f
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fdb4 	bl	8004180 <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800361c:	e00c      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fe5d 	bl	80042e4 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800362e:	e003      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      break;
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4974      	ldr	r1, [pc, #464]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	654b      	str	r3, [r1, #84]	; 0x54
 8003650:	e001      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	2b05      	cmp	r3, #5
 800366a:	d821      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036b7 	.word	0x080036b7
 8003678:	0800368d 	.word	0x0800368d
 800367c:	0800369f 	.word	0x0800369f
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fd74 	bl	8004180 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3324      	adds	r3, #36	; 0x24
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fe1d 	bl	80042e4 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	4953      	ldr	r1, [pc, #332]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	658b      	str	r3, [r1, #88]	; 0x58
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ee:	d02e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d828      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d02a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d822      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003706:	d026      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800370c:	d81c      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003712:	d010      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d816      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01d      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d111      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fd28 	bl	8004180 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003734:	e012      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3324      	adds	r3, #36	; 0x24
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fdd1 	bl	80042e4 <RCCEx_PLL3_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003746:	e009      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800375a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003770:	492a      	ldr	r1, [pc, #168]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	654b      	str	r3, [r1, #84]	; 0x54
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003792:	d02e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003794:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003798:	d828      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d02a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	d822      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037aa:	d026      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80037ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b0:	d81c      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b6:	d010      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d816      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01d      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d111      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fcd6 	bl	8004180 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037d8:	e012      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3324      	adds	r3, #36	; 0x24
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fd7f 	bl	80042e4 <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037ea:	e009      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
      break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003814:	4901      	ldr	r1, [pc, #4]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	658b      	str	r3, [r1, #88]	; 0x58
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800381c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d04b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800383a:	d02e      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800383c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003840:	d828      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003846:	d02a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d822      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800384e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003852:	d026      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003854:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003858:	d81c      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800385a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385e:	d010      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003864:	d816      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	d111      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fc82 	bl	8004180 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003880:	e012      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fd2b 	bl	80042e4 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003892:	e009      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	75fb      	strb	r3, [r7, #23]
      break;
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80038a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038ae:	4b9d      	ldr	r3, [pc, #628]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038bc:	4999      	ldr	r1, [pc, #612]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	658b      	str	r3, [r1, #88]	; 0x58
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3324      	adds	r3, #36	; 0x24
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fcfc 	bl	80042e4 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038f6:	4b8b      	ldr	r3, [pc, #556]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003904:	4987      	ldr	r1, [pc, #540]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003906:	4313      	orrs	r3, r2
 8003908:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3324      	adds	r3, #36	; 0x24
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fcdb 	bl	80042e4 <RCCEx_PLL3_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003938:	4b7a      	ldr	r3, [pc, #488]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	4977      	ldr	r1, [pc, #476]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d034      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800395e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003962:	d01d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003968:	d817      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003974:	e011      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fbff 	bl	8004180 <RCCEx_PLL2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003986:	e00c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fca8 	bl	80042e4 <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
      break;
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80039a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a8:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039b6:	495b      	ldr	r1, [pc, #364]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	658b      	str	r3, [r1, #88]	; 0x58
 80039bc:	e001      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d033      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039d8:	d01c      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80039da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039de:	d816      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80039e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e4:	d003      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80039e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ea:	d007      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80039ec:	e00f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ee:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80039fa:	e00c      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fc6e 	bl	80042e4 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
      break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	493e      	ldr	r1, [pc, #248]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a30:	e001      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d029      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d007      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2102      	movs	r1, #2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb8a 	bl	8004180 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a7e:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	4926      	ldr	r1, [pc, #152]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fc1b 	bl	80042e4 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d033      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003acc:	d017      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad2:	d811      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d013      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ade:	d80b      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003af6:	e007      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1a:	4902      	ldr	r1, [pc, #8]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003b22:	bf00      	nop
 8003b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	492e      	ldr	r1, [pc, #184]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b56:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b64:	4926      	ldr	r1, [pc, #152]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b82:	491f      	ldr	r1, [pc, #124]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b9e:	6113      	str	r3, [r2, #16]
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003baa:	4915      	ldr	r1, [pc, #84]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da08      	bge.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003bea:	7dbb      	ldrb	r3, [r7, #22]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	58024400 	.word	0x58024400

08003c04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c08:	f7ff f85a 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	0800c118 	.word	0x0800c118

08003c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c38:	4ba1      	ldr	r3, [pc, #644]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c42:	4b9f      	ldr	r3, [pc, #636]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	0b1b      	lsrs	r3, r3, #12
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c4e:	4b9c      	ldr	r3, [pc, #624]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c5a:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8111 	beq.w	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f000 8083 	beq.w	8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	f200 80a1 	bhi.w	8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d056      	beq.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c9a:	e099      	b.n	8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c9c:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02d      	beq.n	8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ca8:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	4a84      	ldr	r2, [pc, #528]	; (8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d02:	e087      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d46:	e065      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d8a:	e043      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dce:	e021      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	0a5b      	lsrs	r3, r3, #9
 8003e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3a:	ee17 2a90 	vmov	r2, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e68:	ee17 2a90 	vmov	r2, s15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 2a90 	vmov	r2, s15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	03d09000 	.word	0x03d09000
 8003ec8:	46000000 	.word	0x46000000
 8003ecc:	4c742400 	.word	0x4c742400
 8003ed0:	4a742400 	.word	0x4a742400
 8003ed4:	4af42400 	.word	0x4af42400

08003ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ee0:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003eea:	4b9f      	ldr	r3, [pc, #636]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	0d1b      	lsrs	r3, r3, #20
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ef6:	4b9c      	ldr	r3, [pc, #624]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f02:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8111 	beq.w	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f000 8083 	beq.w	8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f200 80a1 	bhi.w	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d056      	beq.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f42:	e099      	b.n	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f44:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f50:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	4a84      	ldr	r2, [pc, #528]	; (800416c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003faa:	e087      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fee:	e065      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a03 	vldr	s12, [r7, #12]
 8004016:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004032:	e043      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	ed97 6a03 	vldr	s12, [r7, #12]
 800405a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800405e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800406a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004076:	e021      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a03 	vldr	s12, [r7, #12]
 800409e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004104:	edd7 6a07 	vldr	s13, [r7, #28]
 8004108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004110:	ee17 2a90 	vmov	r2, s15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004132:	edd7 6a07 	vldr	s13, [r7, #28]
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004146:	e008      	b.n	800415a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
 800416c:	03d09000 	.word	0x03d09000
 8004170:	46000000 	.word	0x46000000
 8004174:	4c742400 	.word	0x4c742400
 8004178:	4a742400 	.word	0x4a742400
 800417c:	4af42400 	.word	0x4af42400

08004180 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800418e:	4b53      	ldr	r3, [pc, #332]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b03      	cmp	r3, #3
 8004198:	d101      	bne.n	800419e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e099      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041aa:	f7fd fadd 	bl	8001768 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041b2:	f7fd fad9 	bl	8001768 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e086      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	493f      	ldr	r1, [pc, #252]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	628b      	str	r3, [r1, #40]	; 0x28
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	025b      	lsls	r3, r3, #9
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	3b01      	subs	r3, #1
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004214:	4931      	ldr	r1, [pc, #196]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	492d      	ldr	r1, [pc, #180]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f023 0220 	bic.w	r2, r3, #32
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4928      	ldr	r1, [pc, #160]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800424c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <RCCEx_PLL2_Config+0x160>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	69d2      	ldr	r2, [r2, #28]
 8004256:	00d2      	lsls	r2, r2, #3
 8004258:	4920      	ldr	r1, [pc, #128]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800427a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800427c:	e00f      	b.n	800429e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004290:	e005      	b.n	800429e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042aa:	f7fd fa5d 	bl	8001768 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042b2:	f7fd fa59 	bl	8001768 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e006      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
 80042e0:	ffff0007 	.word	0xffff0007

080042e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042f2:	4b53      	ldr	r3, [pc, #332]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d101      	bne.n	8004302 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e099      	b.n	8004436 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004302:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4e      	ldr	r2, [pc, #312]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fd fa2b 	bl	8001768 <HAL_GetTick>
 8004312:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004314:	e008      	b.n	8004328 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004316:	f7fd fa27 	bl	8001768 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e086      	b.n	8004436 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	051b      	lsls	r3, r3, #20
 8004342:	493f      	ldr	r1, [pc, #252]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	628b      	str	r3, [r1, #40]	; 0x28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	3b01      	subs	r3, #1
 800434e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	025b      	lsls	r3, r3, #9
 800435a:	b29b      	uxth	r3, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	3b01      	subs	r3, #1
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004378:	4931      	ldr	r1, [pc, #196]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800437e:	4b30      	ldr	r3, [pc, #192]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	492d      	ldr	r1, [pc, #180]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4928      	ldr	r1, [pc, #160]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a26      	ldr	r2, [pc, #152]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <RCCEx_PLL3_Config+0x160>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	69d2      	ldr	r2, [r2, #28]
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	4920      	ldr	r1, [pc, #128]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043c2:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e0:	e00f      	b.n	8004402 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043f4:	e005      	b.n	8004402 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	4a11      	ldr	r2, [pc, #68]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440e:	f7fd f9ab 	bl	8001768 <HAL_GetTick>
 8004412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004414:	e008      	b.n	8004428 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004416:	f7fd f9a7 	bl	8001768 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e006      	b.n	8004436 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	ffff0007 	.word	0xffff0007

08004448 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0f1      	b.n	800463e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a78      	ldr	r2, [pc, #480]	; (8004648 <HAL_SPI_Init+0x200>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00f      	beq.n	800448a <HAL_SPI_Init+0x42>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a77      	ldr	r2, [pc, #476]	; (800464c <HAL_SPI_Init+0x204>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00a      	beq.n	800448a <HAL_SPI_Init+0x42>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_SPI_Init+0x208>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d005      	beq.n	800448a <HAL_SPI_Init+0x42>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d901      	bls.n	800448a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0d9      	b.n	800463e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8e2 	bl	8004654 <SPI_GetPacketSize>
 8004490:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6c      	ldr	r2, [pc, #432]	; (8004648 <HAL_SPI_Init+0x200>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00c      	beq.n	80044b6 <HAL_SPI_Init+0x6e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6a      	ldr	r2, [pc, #424]	; (800464c <HAL_SPI_Init+0x204>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <HAL_SPI_Init+0x6e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a69      	ldr	r2, [pc, #420]	; (8004650 <HAL_SPI_Init+0x208>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d002      	beq.n	80044b6 <HAL_SPI_Init+0x6e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d811      	bhi.n	80044da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80044ba:	4a63      	ldr	r2, [pc, #396]	; (8004648 <HAL_SPI_Init+0x200>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a61      	ldr	r2, [pc, #388]	; (800464c <HAL_SPI_Init+0x204>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_SPI_Init+0x8c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a60      	ldr	r2, [pc, #384]	; (8004650 <HAL_SPI_Init+0x208>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d104      	bne.n	80044de <HAL_SPI_Init+0x96>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d901      	bls.n	80044de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0af      	b.n	800463e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fc9a 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800451a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	d119      	bne.n	800455a <HAL_SPI_Init+0x112>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d103      	bne.n	8004538 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10c      	bne.n	800455a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004548:	d107      	bne.n	800455a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	431a      	orrs	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	ea42 0103 	orr.w	r1, r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ba:	ea42 0103 	orr.w	r1, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d113      	bne.n	80045fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40013000 	.word	0x40013000
 800464c:	40003800 	.word	0x40003800
 8004650:	40003c00 	.word	0x40003c00

08004654 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3307      	adds	r3, #7
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	fb02 f303 	mul.w	r3, r2, r3
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e049      	b.n	8004730 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc fe5f 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f000 fbb1 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e049      	b.n	80047de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f841 	bl	80047e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f000 fb5a 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x24>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e03c      	b.n	800489a <HAL_TIM_PWM_Start+0x9e>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d109      	bne.n	800483a <HAL_TIM_PWM_Start+0x3e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e02f      	b.n	800489a <HAL_TIM_PWM_Start+0x9e>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e022      	b.n	800489a <HAL_TIM_PWM_Start+0x9e>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d109      	bne.n	800486e <HAL_TIM_PWM_Start+0x72>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e015      	b.n	800489a <HAL_TIM_PWM_Start+0x9e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b10      	cmp	r3, #16
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x8c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e008      	b.n	800489a <HAL_TIM_PWM_Start+0x9e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0a1      	b.n	80049e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start+0xb6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b0:	e023      	b.n	80048fa <HAL_TIM_PWM_Start+0xfe>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start+0xc6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	e01b      	b.n	80048fa <HAL_TIM_PWM_Start+0xfe>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Start+0xd6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d0:	e013      	b.n	80048fa <HAL_TIM_PWM_Start+0xfe>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Start+0xe6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e0:	e00b      	b.n	80048fa <HAL_TIM_PWM_Start+0xfe>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start+0xf6>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	e003      	b.n	80048fa <HAL_TIM_PWM_Start+0xfe>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fea2 	bl	800564c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <HAL_TIM_PWM_Start+0x1f4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <HAL_TIM_PWM_Start+0x13e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <HAL_TIM_PWM_Start+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_TIM_PWM_Start+0x13e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a35      	ldr	r2, [pc, #212]	; (80049f8 <HAL_TIM_PWM_Start+0x1fc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_TIM_PWM_Start+0x13e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <HAL_TIM_PWM_Start+0x200>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIM_PWM_Start+0x13e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_TIM_PWM_Start+0x204>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_TIM_PWM_Start+0x142>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_TIM_PWM_Start+0x144>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <HAL_TIM_PWM_Start+0x1f4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d022      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d01d      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <HAL_TIM_PWM_Start+0x208>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a24      	ldr	r2, [pc, #144]	; (8004a08 <HAL_TIM_PWM_Start+0x20c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <HAL_TIM_PWM_Start+0x210>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_TIM_PWM_Start+0x1f8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_TIM_PWM_Start+0x214>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIM_PWM_Start+0x1a8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <HAL_TIM_PWM_Start+0x1fc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d115      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_TIM_PWM_Start+0x218>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d015      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x1e6>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d011      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e008      	b.n	80049e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40010400 	.word	0x40010400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40001800 	.word	0x40001800
 8004a14:	00010007 	.word	0x00010007

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0ff      	b.n	8004c36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b14      	cmp	r3, #20
 8004a42:	f200 80f0 	bhi.w	8004c26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004c27 	.word	0x08004c27
 8004a54:	08004c27 	.word	0x08004c27
 8004a58:	08004c27 	.word	0x08004c27
 8004a5c:	08004ae1 	.word	0x08004ae1
 8004a60:	08004c27 	.word	0x08004c27
 8004a64:	08004c27 	.word	0x08004c27
 8004a68:	08004c27 	.word	0x08004c27
 8004a6c:	08004b23 	.word	0x08004b23
 8004a70:	08004c27 	.word	0x08004c27
 8004a74:	08004c27 	.word	0x08004c27
 8004a78:	08004c27 	.word	0x08004c27
 8004a7c:	08004b63 	.word	0x08004b63
 8004a80:	08004c27 	.word	0x08004c27
 8004a84:	08004c27 	.word	0x08004c27
 8004a88:	08004c27 	.word	0x08004c27
 8004a8c:	08004ba5 	.word	0x08004ba5
 8004a90:	08004c27 	.word	0x08004c27
 8004a94:	08004c27 	.word	0x08004c27
 8004a98:	08004c27 	.word	0x08004c27
 8004a9c:	08004be5 	.word	0x08004be5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fa5c 	bl	8004f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0204 	bic.w	r2, r2, #4
 8004aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6999      	ldr	r1, [r3, #24]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	619a      	str	r2, [r3, #24]
      break;
 8004ade:	e0a5      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 facc 	bl	8005084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	021a      	lsls	r2, r3, #8
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	619a      	str	r2, [r3, #24]
      break;
 8004b20:	e084      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fb35 	bl	8005198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0208 	orr.w	r2, r2, #8
 8004b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0204 	bic.w	r2, r2, #4
 8004b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	61da      	str	r2, [r3, #28]
      break;
 8004b60:	e064      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fb9d 	bl	80052a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69d9      	ldr	r1, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	021a      	lsls	r2, r3, #8
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	61da      	str	r2, [r3, #28]
      break;
 8004ba2:	e043      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fbe6 	bl	800537c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004be2:	e023      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fc2a 	bl	8005444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c24:	e002      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop

08004c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_ConfigClockSource+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0dc      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x1d6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a64      	ldr	r2, [pc, #400]	; (8004e24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	f000 80a9 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004c98:	4a62      	ldr	r2, [pc, #392]	; (8004e24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f200 80ae 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004ca0:	4a61      	ldr	r2, [pc, #388]	; (8004e28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f000 80a1 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004ca8:	4a5f      	ldr	r2, [pc, #380]	; (8004e28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f200 80a6 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 8099 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004cb8:	4a5c      	ldr	r2, [pc, #368]	; (8004e2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 809e 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004cc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004cc4:	f000 8091 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004cc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ccc:	f200 8096 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd4:	f000 8089 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cdc:	f200 808e 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d03e      	beq.n	8004d64 <HAL_TIM_ConfigClockSource+0x124>
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	f200 8087 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	f000 8086 	beq.w	8004e02 <HAL_TIM_ConfigClockSource+0x1c2>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d87f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004cfc:	2b70      	cmp	r3, #112	; 0x70
 8004cfe:	d01a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xf6>
 8004d00:	2b70      	cmp	r3, #112	; 0x70
 8004d02:	d87b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d050      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x16a>
 8004d08:	2b60      	cmp	r3, #96	; 0x60
 8004d0a:	d877      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d0c:	2b50      	cmp	r3, #80	; 0x50
 8004d0e:	d03c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x14a>
 8004d10:	2b50      	cmp	r3, #80	; 0x50
 8004d12:	d873      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d058      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x18a>
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d86f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d1c:	2b30      	cmp	r3, #48	; 0x30
 8004d1e:	d064      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d86b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d060      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d867      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d05a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1aa>
 8004d34:	e062      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f000 fc61 	bl	800560c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
      break;
 8004d62:	e04f      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f000 fc4a 	bl	800560c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e03c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fbba 	bl	8005510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2150      	movs	r1, #80	; 0x50
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fc14 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e02c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fbd9 	bl	800556e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2160      	movs	r1, #96	; 0x60
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fc04 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e01c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fb9a 	bl	8005510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fbf4 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e00c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f000 fbeb 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e003      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	ffceff88 	.word	0xffceff88
 8004e24:	00100040 	.word	0x00100040
 8004e28:	00100030 	.word	0x00100030
 8004e2c:	00100020 	.word	0x00100020

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d00f      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <TIM_Base_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3c      	ldr	r2, [pc, #240]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3a      	ldr	r2, [pc, #232]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d108      	bne.n	8004e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <TIM_Base_SetConfig+0x118>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a27      	ldr	r2, [pc, #156]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a26      	ldr	r2, [pc, #152]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40010400 	.word	0x40010400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <TIM_OC1_SetConfig+0x108>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2d      	ldr	r2, [pc, #180]	; (8005070 <TIM_OC1_SetConfig+0x10c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x7c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <TIM_OC1_SetConfig+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x7c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2b      	ldr	r2, [pc, #172]	; (8005078 <TIM_OC1_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x7c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2a      	ldr	r2, [pc, #168]	; (800507c <TIM_OC1_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x7c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a29      	ldr	r2, [pc, #164]	; (8005080 <TIM_OC1_SetConfig+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10c      	bne.n	8004ffa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0308 	bic.w	r3, r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <TIM_OC1_SetConfig+0x10c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_OC1_SetConfig+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <TIM_OC1_SetConfig+0x110>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC1_SetConfig+0xbe>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <TIM_OC1_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC1_SetConfig+0xbe>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <TIM_OC1_SetConfig+0x118>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC1_SetConfig+0xbe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <TIM_OC1_SetConfig+0x11c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d111      	bne.n	8005046 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	fffeff8f 	.word	0xfffeff8f
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800

08005084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <TIM_OC2_SetConfig+0xfc>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0320 	bic.w	r3, r3, #32
 80050ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <TIM_OC2_SetConfig+0x100>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0x68>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <TIM_OC2_SetConfig+0x104>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10d      	bne.n	8005108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <TIM_OC2_SetConfig+0x100>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_OC2_SetConfig+0xac>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <TIM_OC2_SetConfig+0x104>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_OC2_SetConfig+0xac>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <TIM_OC2_SetConfig+0x108>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC2_SetConfig+0xac>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <TIM_OC2_SetConfig+0x10c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0xac>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <TIM_OC2_SetConfig+0x110>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d113      	bne.n	8005158 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	feff8fff 	.word	0xfeff8fff
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4b33      	ldr	r3, [pc, #204]	; (8005290 <TIM_OC3_SetConfig+0xf8>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_OC3_SetConfig+0xfc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0x66>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_OC3_SetConfig+0x100>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10d      	bne.n	800521a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <TIM_OC3_SetConfig+0xfc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC3_SetConfig+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <TIM_OC3_SetConfig+0x100>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC3_SetConfig+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1b      	ldr	r2, [pc, #108]	; (800529c <TIM_OC3_SetConfig+0x104>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC3_SetConfig+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <TIM_OC3_SetConfig+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <TIM_OC3_SetConfig+0x10c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d113      	bne.n	800526a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	fffeff8f 	.word	0xfffeff8f
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <TIM_OC4_SetConfig+0xbc>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a19      	ldr	r2, [pc, #100]	; (8005368 <TIM_OC4_SetConfig+0xc0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_OC4_SetConfig+0x80>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a18      	ldr	r2, [pc, #96]	; (800536c <TIM_OC4_SetConfig+0xc4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_OC4_SetConfig+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a17      	ldr	r2, [pc, #92]	; (8005370 <TIM_OC4_SetConfig+0xc8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_OC4_SetConfig+0x80>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <TIM_OC4_SetConfig+0xcc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC4_SetConfig+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <TIM_OC4_SetConfig+0xd0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d109      	bne.n	800533c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	019b      	lsls	r3, r3, #6
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	feff8fff 	.word	0xfeff8fff
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <TIM_OC5_SetConfig+0xb0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <TIM_OC5_SetConfig+0xb4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_OC5_SetConfig+0x76>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <TIM_OC5_SetConfig+0xb8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_OC5_SetConfig+0x76>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <TIM_OC5_SetConfig+0xbc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_OC5_SetConfig+0x76>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <TIM_OC5_SetConfig+0xc0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_OC5_SetConfig+0x76>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <TIM_OC5_SetConfig+0xc4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d109      	bne.n	8005406 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	fffeff8f 	.word	0xfffeff8f
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <TIM_OC6_SetConfig+0xb4>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	051b      	lsls	r3, r3, #20
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <TIM_OC6_SetConfig+0xb8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_OC6_SetConfig+0x78>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a18      	ldr	r2, [pc, #96]	; (8005500 <TIM_OC6_SetConfig+0xbc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_OC6_SetConfig+0x78>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a17      	ldr	r2, [pc, #92]	; (8005504 <TIM_OC6_SetConfig+0xc0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC6_SetConfig+0x78>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a16      	ldr	r2, [pc, #88]	; (8005508 <TIM_OC6_SetConfig+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC6_SetConfig+0x78>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <TIM_OC6_SetConfig+0xc8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	feff8fff 	.word	0xfeff8fff
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 030a 	bic.w	r3, r3, #10
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556e:	b480      	push	{r7}
 8005570:	b087      	sub	sp, #28
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0210 	bic.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <TIM_ITRx_SetConfig+0x38>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f043 0307 	orr.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	ffcfff8f 	.word	0xffcfff8f

0800560c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	431a      	orrs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e06d      	b.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a30      	ldr	r2, [pc, #192]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2f      	ldr	r2, [pc, #188]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d108      	bne.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a20      	ldr	r2, [pc, #128]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d01d      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d10c      	bne.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40001800 	.word	0x40001800
 80057b0:	40014000 	.word	0x40014000

080057b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e042      	b.n	800584c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fb feaf 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2224      	movs	r2, #36	; 0x24
 80057e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8c2 	bl	8005980 <UART_SetConfig>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e022      	b.n	800584c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fe1e 	bl	8006450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fea5 	bl	8006594 <UART_CheckIdleState>
 800584a:	4603      	mov	r3, r0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	2b20      	cmp	r3, #32
 800586c:	f040 8083 	bne.w	8005976 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Transmit+0x28>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e07b      	b.n	8005978 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit+0x3a>
 800588a:	2302      	movs	r3, #2
 800588c:	e074      	b.n	8005978 <HAL_UART_Transmit+0x124>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a6:	f7fb ff5f 	bl	8001768 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d108      	bne.n	80058d8 <HAL_UART_Transmit+0x84>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e003      	b.n	80058e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80058e8:	e02c      	b.n	8005944 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fe98 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e039      	b.n	8005978 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	3302      	adds	r3, #2
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	e007      	b.n	8005932 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1cc      	bne.n	80058ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fe65 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e000      	b.n	8005978 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005976:	2302      	movs	r3, #2
  }
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b092      	sub	sp, #72	; 0x48
 8005986:	af00      	add	r7, sp, #0
 8005988:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	431a      	orrs	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	431a      	orrs	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4bbe      	ldr	r3, [pc, #760]	; (8005ca8 <UART_SetConfig+0x328>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4ab3      	ldr	r2, [pc, #716]	; (8005cac <UART_SetConfig+0x32c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059e8:	4313      	orrs	r3, r2
 80059ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	4baf      	ldr	r3, [pc, #700]	; (8005cb0 <UART_SetConfig+0x330>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	f023 010f 	bic.w	r1, r3, #15
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4aa6      	ldr	r2, [pc, #664]	; (8005cb4 <UART_SetConfig+0x334>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d177      	bne.n	8005b10 <UART_SetConfig+0x190>
 8005a20:	4ba5      	ldr	r3, [pc, #660]	; (8005cb8 <UART_SetConfig+0x338>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a28:	2b28      	cmp	r3, #40	; 0x28
 8005a2a:	d86d      	bhi.n	8005b08 <UART_SetConfig+0x188>
 8005a2c:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0xb4>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005ad9 	.word	0x08005ad9
 8005a38:	08005b09 	.word	0x08005b09
 8005a3c:	08005b09 	.word	0x08005b09
 8005a40:	08005b09 	.word	0x08005b09
 8005a44:	08005b09 	.word	0x08005b09
 8005a48:	08005b09 	.word	0x08005b09
 8005a4c:	08005b09 	.word	0x08005b09
 8005a50:	08005b09 	.word	0x08005b09
 8005a54:	08005ae1 	.word	0x08005ae1
 8005a58:	08005b09 	.word	0x08005b09
 8005a5c:	08005b09 	.word	0x08005b09
 8005a60:	08005b09 	.word	0x08005b09
 8005a64:	08005b09 	.word	0x08005b09
 8005a68:	08005b09 	.word	0x08005b09
 8005a6c:	08005b09 	.word	0x08005b09
 8005a70:	08005b09 	.word	0x08005b09
 8005a74:	08005ae9 	.word	0x08005ae9
 8005a78:	08005b09 	.word	0x08005b09
 8005a7c:	08005b09 	.word	0x08005b09
 8005a80:	08005b09 	.word	0x08005b09
 8005a84:	08005b09 	.word	0x08005b09
 8005a88:	08005b09 	.word	0x08005b09
 8005a8c:	08005b09 	.word	0x08005b09
 8005a90:	08005b09 	.word	0x08005b09
 8005a94:	08005af1 	.word	0x08005af1
 8005a98:	08005b09 	.word	0x08005b09
 8005a9c:	08005b09 	.word	0x08005b09
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005b09 	.word	0x08005b09
 8005aa8:	08005b09 	.word	0x08005b09
 8005aac:	08005b09 	.word	0x08005b09
 8005ab0:	08005b09 	.word	0x08005b09
 8005ab4:	08005af9 	.word	0x08005af9
 8005ab8:	08005b09 	.word	0x08005b09
 8005abc:	08005b09 	.word	0x08005b09
 8005ac0:	08005b09 	.word	0x08005b09
 8005ac4:	08005b09 	.word	0x08005b09
 8005ac8:	08005b09 	.word	0x08005b09
 8005acc:	08005b09 	.word	0x08005b09
 8005ad0:	08005b09 	.word	0x08005b09
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e222      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e21e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e21a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e216      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005af8:	2320      	movs	r3, #32
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e212      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e20e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e20a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a69      	ldr	r2, [pc, #420]	; (8005cbc <UART_SetConfig+0x33c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d130      	bne.n	8005b7c <UART_SetConfig+0x1fc>
 8005b1a:	4b67      	ldr	r3, [pc, #412]	; (8005cb8 <UART_SetConfig+0x338>)
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d826      	bhi.n	8005b74 <UART_SetConfig+0x1f4>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0x1ac>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b45 	.word	0x08005b45
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	08005b55 	.word	0x08005b55
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e1ec      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e1e8      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e1e4      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e1e0      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b64:	2320      	movs	r3, #32
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e1dc      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e1d8      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e1d4      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a4f      	ldr	r2, [pc, #316]	; (8005cc0 <UART_SetConfig+0x340>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d130      	bne.n	8005be8 <UART_SetConfig+0x268>
 8005b86:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <UART_SetConfig+0x338>)
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d826      	bhi.n	8005be0 <UART_SetConfig+0x260>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <UART_SetConfig+0x218>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bb9 	.word	0x08005bb9
 8005ba0:	08005bc1 	.word	0x08005bc1
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e1b6      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e1b2      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e1ae      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e1aa      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e1a6      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005bd8:	2340      	movs	r3, #64	; 0x40
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e1a2      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e19e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a35      	ldr	r2, [pc, #212]	; (8005cc4 <UART_SetConfig+0x344>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d130      	bne.n	8005c54 <UART_SetConfig+0x2d4>
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <UART_SetConfig+0x338>)
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d826      	bhi.n	8005c4c <UART_SetConfig+0x2cc>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x284>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c1d 	.word	0x08005c1d
 8005c08:	08005c25 	.word	0x08005c25
 8005c0c:	08005c2d 	.word	0x08005c2d
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e180      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e17c      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e178      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e174      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e170      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e16c      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e168      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <UART_SetConfig+0x348>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d142      	bne.n	8005ce4 <UART_SetConfig+0x364>
 8005c5e:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <UART_SetConfig+0x338>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d838      	bhi.n	8005cdc <UART_SetConfig+0x35c>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x2f0>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c89 	.word	0x08005c89
 8005c74:	08005c91 	.word	0x08005c91
 8005c78:	08005c99 	.word	0x08005c99
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e14a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e146      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e142      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e13e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ca8:	cfff69f3 	.word	0xcfff69f3
 8005cac:	58000c00 	.word	0x58000c00
 8005cb0:	11fff4ff 	.word	0x11fff4ff
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	40004400 	.word	0x40004400
 8005cc0:	40004800 	.word	0x40004800
 8005cc4:	40004c00 	.word	0x40004c00
 8005cc8:	40005000 	.word	0x40005000
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e128      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e124      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e120      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4acb      	ldr	r2, [pc, #812]	; (8006018 <UART_SetConfig+0x698>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d176      	bne.n	8005ddc <UART_SetConfig+0x45c>
 8005cee:	4bcb      	ldr	r3, [pc, #812]	; (800601c <UART_SetConfig+0x69c>)
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cf6:	2b28      	cmp	r3, #40	; 0x28
 8005cf8:	d86c      	bhi.n	8005dd4 <UART_SetConfig+0x454>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0x380>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005da5 	.word	0x08005da5
 8005d04:	08005dd5 	.word	0x08005dd5
 8005d08:	08005dd5 	.word	0x08005dd5
 8005d0c:	08005dd5 	.word	0x08005dd5
 8005d10:	08005dd5 	.word	0x08005dd5
 8005d14:	08005dd5 	.word	0x08005dd5
 8005d18:	08005dd5 	.word	0x08005dd5
 8005d1c:	08005dd5 	.word	0x08005dd5
 8005d20:	08005dad 	.word	0x08005dad
 8005d24:	08005dd5 	.word	0x08005dd5
 8005d28:	08005dd5 	.word	0x08005dd5
 8005d2c:	08005dd5 	.word	0x08005dd5
 8005d30:	08005dd5 	.word	0x08005dd5
 8005d34:	08005dd5 	.word	0x08005dd5
 8005d38:	08005dd5 	.word	0x08005dd5
 8005d3c:	08005dd5 	.word	0x08005dd5
 8005d40:	08005db5 	.word	0x08005db5
 8005d44:	08005dd5 	.word	0x08005dd5
 8005d48:	08005dd5 	.word	0x08005dd5
 8005d4c:	08005dd5 	.word	0x08005dd5
 8005d50:	08005dd5 	.word	0x08005dd5
 8005d54:	08005dd5 	.word	0x08005dd5
 8005d58:	08005dd5 	.word	0x08005dd5
 8005d5c:	08005dd5 	.word	0x08005dd5
 8005d60:	08005dbd 	.word	0x08005dbd
 8005d64:	08005dd5 	.word	0x08005dd5
 8005d68:	08005dd5 	.word	0x08005dd5
 8005d6c:	08005dd5 	.word	0x08005dd5
 8005d70:	08005dd5 	.word	0x08005dd5
 8005d74:	08005dd5 	.word	0x08005dd5
 8005d78:	08005dd5 	.word	0x08005dd5
 8005d7c:	08005dd5 	.word	0x08005dd5
 8005d80:	08005dc5 	.word	0x08005dc5
 8005d84:	08005dd5 	.word	0x08005dd5
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005dd5 	.word	0x08005dd5
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005dd5 	.word	0x08005dd5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e0bc      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e0b8      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e0b4      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e0b0      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e0ac      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e0a8      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e0a4      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a8f      	ldr	r2, [pc, #572]	; (8006020 <UART_SetConfig+0x6a0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d130      	bne.n	8005e48 <UART_SetConfig+0x4c8>
 8005de6:	4b8d      	ldr	r3, [pc, #564]	; (800601c <UART_SetConfig+0x69c>)
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d826      	bhi.n	8005e40 <UART_SetConfig+0x4c0>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x478>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e11 	.word	0x08005e11
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e086      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e082      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e07e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e07a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e30:	2320      	movs	r3, #32
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e076      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e072      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e06e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a75      	ldr	r2, [pc, #468]	; (8006024 <UART_SetConfig+0x6a4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d130      	bne.n	8005eb4 <UART_SetConfig+0x534>
 8005e52:	4b72      	ldr	r3, [pc, #456]	; (800601c <UART_SetConfig+0x69c>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d826      	bhi.n	8005eac <UART_SetConfig+0x52c>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x4e4>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e050      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e04c      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e048      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e044      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e040      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e03c      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e038      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5b      	ldr	r2, [pc, #364]	; (8006028 <UART_SetConfig+0x6a8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d130      	bne.n	8005f20 <UART_SetConfig+0x5a0>
 8005ebe:	4b57      	ldr	r3, [pc, #348]	; (800601c <UART_SetConfig+0x69c>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d826      	bhi.n	8005f18 <UART_SetConfig+0x598>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x550>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e01a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e016      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e012      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e00e      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e00a      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e006      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e002      	b.n	8005f26 <UART_SetConfig+0x5a6>
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	; (8006028 <UART_SetConfig+0x6a8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	f040 80f8 	bne.w	8006122 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	dc46      	bgt.n	8005fc8 <UART_SetConfig+0x648>
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	f2c0 8082 	blt.w	8006044 <UART_SetConfig+0x6c4>
 8005f40:	3b02      	subs	r3, #2
 8005f42:	2b1e      	cmp	r3, #30
 8005f44:	d87e      	bhi.n	8006044 <UART_SetConfig+0x6c4>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0x5cc>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005fcf 	.word	0x08005fcf
 8005f50:	08006045 	.word	0x08006045
 8005f54:	08005fd7 	.word	0x08005fd7
 8005f58:	08006045 	.word	0x08006045
 8005f5c:	08006045 	.word	0x08006045
 8005f60:	08006045 	.word	0x08006045
 8005f64:	08005fe7 	.word	0x08005fe7
 8005f68:	08006045 	.word	0x08006045
 8005f6c:	08006045 	.word	0x08006045
 8005f70:	08006045 	.word	0x08006045
 8005f74:	08006045 	.word	0x08006045
 8005f78:	08006045 	.word	0x08006045
 8005f7c:	08006045 	.word	0x08006045
 8005f80:	08006045 	.word	0x08006045
 8005f84:	08005ff7 	.word	0x08005ff7
 8005f88:	08006045 	.word	0x08006045
 8005f8c:	08006045 	.word	0x08006045
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08006045 	.word	0x08006045
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	08006045 	.word	0x08006045
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006045 	.word	0x08006045
 8005fa8:	08006045 	.word	0x08006045
 8005fac:	08006045 	.word	0x08006045
 8005fb0:	08006045 	.word	0x08006045
 8005fb4:	08006045 	.word	0x08006045
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	08006045 	.word	0x08006045
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006037 	.word	0x08006037
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d037      	beq.n	800603c <UART_SetConfig+0x6bc>
 8005fcc:	e03a      	b.n	8006044 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fce:	f7fd fe19 	bl	8003c04 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005fd4:	e03c      	b.n	8006050 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fd fe28 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fe4:	e034      	b.n	8006050 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe6:	f107 0318 	add.w	r3, r7, #24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd ff74 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ff4:	e02c      	b.n	8006050 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <UART_SetConfig+0x69c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <UART_SetConfig+0x69c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	4a07      	ldr	r2, [pc, #28]	; (800602c <UART_SetConfig+0x6ac>)
 800600e:	fa22 f303 	lsr.w	r3, r2, r3
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006014:	e01c      	b.n	8006050 <UART_SetConfig+0x6d0>
 8006016:	bf00      	nop
 8006018:	40011400 	.word	0x40011400
 800601c:	58024400 	.word	0x58024400
 8006020:	40007800 	.word	0x40007800
 8006024:	40007c00 	.word	0x40007c00
 8006028:	58000c00 	.word	0x58000c00
 800602c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006030:	4b9d      	ldr	r3, [pc, #628]	; (80062a8 <UART_SetConfig+0x928>)
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006034:	e00c      	b.n	8006050 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006036:	4b9d      	ldr	r3, [pc, #628]	; (80062ac <UART_SetConfig+0x92c>)
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800603a:	e009      	b.n	8006050 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006042:	e005      	b.n	8006050 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800604e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 81de 	beq.w	8006414 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	4a94      	ldr	r2, [pc, #592]	; (80062b0 <UART_SetConfig+0x930>)
 800605e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006062:	461a      	mov	r2, r3
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	fbb3 f3f2 	udiv	r3, r3, r2
 800606a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	4413      	add	r3, r2
 8006076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006078:	429a      	cmp	r2, r3
 800607a:	d305      	bcc.n	8006088 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006084:	429a      	cmp	r2, r3
 8006086:	d903      	bls.n	8006090 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800608e:	e1c1      	b.n	8006414 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006092:	2200      	movs	r2, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	4a84      	ldr	r2, [pc, #528]	; (80062b0 <UART_SetConfig+0x930>)
 800609e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b2:	f7fa f96d 	bl	8000390 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	020b      	lsls	r3, r1, #8
 80060c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060cc:	0202      	lsls	r2, r0, #8
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	6849      	ldr	r1, [r1, #4]
 80060d2:	0849      	lsrs	r1, r1, #1
 80060d4:	2000      	movs	r0, #0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4605      	mov	r5, r0
 80060da:	eb12 0804 	adds.w	r8, r2, r4
 80060de:	eb43 0905 	adc.w	r9, r3, r5
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	469a      	mov	sl, r3
 80060ea:	4693      	mov	fp, r2
 80060ec:	4652      	mov	r2, sl
 80060ee:	465b      	mov	r3, fp
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	f7fa f94c 	bl	8000390 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4613      	mov	r3, r2
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006106:	d308      	bcc.n	800611a <UART_SetConfig+0x79a>
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610e:	d204      	bcs.n	800611a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	e17c      	b.n	8006414 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006120:	e178      	b.n	8006414 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612a:	f040 80c5 	bne.w	80062b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800612e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006132:	2b20      	cmp	r3, #32
 8006134:	dc48      	bgt.n	80061c8 <UART_SetConfig+0x848>
 8006136:	2b00      	cmp	r3, #0
 8006138:	db7b      	blt.n	8006232 <UART_SetConfig+0x8b2>
 800613a:	2b20      	cmp	r3, #32
 800613c:	d879      	bhi.n	8006232 <UART_SetConfig+0x8b2>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x7c4>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	080061cf 	.word	0x080061cf
 8006148:	080061d7 	.word	0x080061d7
 800614c:	08006233 	.word	0x08006233
 8006150:	08006233 	.word	0x08006233
 8006154:	080061df 	.word	0x080061df
 8006158:	08006233 	.word	0x08006233
 800615c:	08006233 	.word	0x08006233
 8006160:	08006233 	.word	0x08006233
 8006164:	080061ef 	.word	0x080061ef
 8006168:	08006233 	.word	0x08006233
 800616c:	08006233 	.word	0x08006233
 8006170:	08006233 	.word	0x08006233
 8006174:	08006233 	.word	0x08006233
 8006178:	08006233 	.word	0x08006233
 800617c:	08006233 	.word	0x08006233
 8006180:	08006233 	.word	0x08006233
 8006184:	080061ff 	.word	0x080061ff
 8006188:	08006233 	.word	0x08006233
 800618c:	08006233 	.word	0x08006233
 8006190:	08006233 	.word	0x08006233
 8006194:	08006233 	.word	0x08006233
 8006198:	08006233 	.word	0x08006233
 800619c:	08006233 	.word	0x08006233
 80061a0:	08006233 	.word	0x08006233
 80061a4:	08006233 	.word	0x08006233
 80061a8:	08006233 	.word	0x08006233
 80061ac:	08006233 	.word	0x08006233
 80061b0:	08006233 	.word	0x08006233
 80061b4:	08006233 	.word	0x08006233
 80061b8:	08006233 	.word	0x08006233
 80061bc:	08006233 	.word	0x08006233
 80061c0:	08006233 	.word	0x08006233
 80061c4:	08006225 	.word	0x08006225
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d02e      	beq.n	800622a <UART_SetConfig+0x8aa>
 80061cc:	e031      	b.n	8006232 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ce:	f7fc fda7 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80061d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061d4:	e033      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d6:	f7fc fdb9 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80061da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061dc:	e02f      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fd fd24 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ec:	e027      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ee:	f107 0318 	add.w	r3, r7, #24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fd fe70 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061fc:	e01f      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061fe:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <UART_SetConfig+0x934>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800620a:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <UART_SetConfig+0x934>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <UART_SetConfig+0x928>)
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800621c:	e00f      	b.n	800623e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800621e:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <UART_SetConfig+0x928>)
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006222:	e00c      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006224:	4b21      	ldr	r3, [pc, #132]	; (80062ac <UART_SetConfig+0x92c>)
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006228:	e009      	b.n	800623e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006230:	e005      	b.n	800623e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800623c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80e7 	beq.w	8006414 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <UART_SetConfig+0x930>)
 800624c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006250:	461a      	mov	r2, r3
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	fbb3 f3f2 	udiv	r3, r3, r2
 8006258:	005a      	lsls	r2, r3, #1
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	441a      	add	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d916      	bls.n	80062a0 <UART_SetConfig+0x920>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d212      	bcs.n	80062a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	b29b      	uxth	r3, r3
 800627e:	f023 030f 	bic.w	r3, r3, #15
 8006282:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b29a      	uxth	r2, r3
 8006290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006292:	4313      	orrs	r3, r2
 8006294:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e0b9      	b.n	8006414 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062a6:	e0b5      	b.n	8006414 <UART_SetConfig+0xa94>
 80062a8:	03d09000 	.word	0x03d09000
 80062ac:	003d0900 	.word	0x003d0900
 80062b0:	0800c180 	.word	0x0800c180
 80062b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062bc:	2b20      	cmp	r3, #32
 80062be:	dc49      	bgt.n	8006354 <UART_SetConfig+0x9d4>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	db7c      	blt.n	80063be <UART_SetConfig+0xa3e>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d87a      	bhi.n	80063be <UART_SetConfig+0xa3e>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0x950>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	0800635b 	.word	0x0800635b
 80062d4:	08006363 	.word	0x08006363
 80062d8:	080063bf 	.word	0x080063bf
 80062dc:	080063bf 	.word	0x080063bf
 80062e0:	0800636b 	.word	0x0800636b
 80062e4:	080063bf 	.word	0x080063bf
 80062e8:	080063bf 	.word	0x080063bf
 80062ec:	080063bf 	.word	0x080063bf
 80062f0:	0800637b 	.word	0x0800637b
 80062f4:	080063bf 	.word	0x080063bf
 80062f8:	080063bf 	.word	0x080063bf
 80062fc:	080063bf 	.word	0x080063bf
 8006300:	080063bf 	.word	0x080063bf
 8006304:	080063bf 	.word	0x080063bf
 8006308:	080063bf 	.word	0x080063bf
 800630c:	080063bf 	.word	0x080063bf
 8006310:	0800638b 	.word	0x0800638b
 8006314:	080063bf 	.word	0x080063bf
 8006318:	080063bf 	.word	0x080063bf
 800631c:	080063bf 	.word	0x080063bf
 8006320:	080063bf 	.word	0x080063bf
 8006324:	080063bf 	.word	0x080063bf
 8006328:	080063bf 	.word	0x080063bf
 800632c:	080063bf 	.word	0x080063bf
 8006330:	080063bf 	.word	0x080063bf
 8006334:	080063bf 	.word	0x080063bf
 8006338:	080063bf 	.word	0x080063bf
 800633c:	080063bf 	.word	0x080063bf
 8006340:	080063bf 	.word	0x080063bf
 8006344:	080063bf 	.word	0x080063bf
 8006348:	080063bf 	.word	0x080063bf
 800634c:	080063bf 	.word	0x080063bf
 8006350:	080063b1 	.word	0x080063b1
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d02e      	beq.n	80063b6 <UART_SetConfig+0xa36>
 8006358:	e031      	b.n	80063be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fc fce1 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800635e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006360:	e033      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006362:	f7fc fcf3 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8006366:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006368:	e02f      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd fc5e 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006378:	e027      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637a:	f107 0318 	add.w	r3, r7, #24
 800637e:	4618      	mov	r0, r3
 8006380:	f7fd fdaa 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006388:	e01f      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638a:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <UART_SetConfig+0xac0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006396:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <UART_SetConfig+0xac0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	4a28      	ldr	r2, [pc, #160]	; (8006444 <UART_SetConfig+0xac4>)
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063a8:	e00f      	b.n	80063ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <UART_SetConfig+0xac4>)
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ae:	e00c      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <UART_SetConfig+0xac8>)
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b4:	e009      	b.n	80063ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063bc:	e005      	b.n	80063ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063c8:	bf00      	nop
    }

    if (pclk != 0U)
 80063ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d021      	beq.n	8006414 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <UART_SetConfig+0xacc>)
 80063d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063da:	461a      	mov	r2, r3
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	fbb3 f2f2 	udiv	r2, r3, r2
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	441a      	add	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d909      	bls.n	800640e <UART_SetConfig+0xa8e>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d205      	bcs.n	800640e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	b29a      	uxth	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	e002      	b.n	8006414 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2201      	movs	r2, #1
 8006418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2201      	movs	r2, #1
 8006420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006430:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006434:	4618      	mov	r0, r3
 8006436:	3748      	adds	r7, #72	; 0x48
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800643e:	bf00      	nop
 8006440:	58024400 	.word	0x58024400
 8006444:	03d09000 	.word	0x03d09000
 8006448:	003d0900 	.word	0x003d0900
 800644c:	0800c180 	.word	0x0800c180

08006450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01a      	beq.n	8006566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654e:	d10a      	bne.n	8006566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065a4:	f7fb f8e0 	bl	8001768 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10e      	bne.n	80065d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f82f 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e025      	b.n	8006622 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d10e      	bne.n	8006602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f819 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e00f      	b.n	8006622 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b09c      	sub	sp, #112	; 0x70
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	4613      	mov	r3, r2
 8006638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663a:	e0a9      	b.n	8006790 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	f000 80a5 	beq.w	8006790 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fb f88f 	bl	8001768 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <UART_WaitOnFlagUntilTimeout+0x32>
 8006656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006658:	2b00      	cmp	r3, #0
 800665a:	d140      	bne.n	80066de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006670:	667b      	str	r3, [r7, #100]	; 0x64
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	663b      	str	r3, [r7, #96]	; 0x60
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80066b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e5      	bne.n	800668e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e069      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d051      	beq.n	8006790 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fa:	d149      	bne.n	8006790 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800671a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
 8006726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800672a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	613b      	str	r3, [r7, #16]
   return(result);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006758:	623a      	str	r2, [r7, #32]
 800675a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69f9      	ldr	r1, [r7, #28]
 800675e:	6a3a      	ldr	r2, [r7, #32]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	61bb      	str	r3, [r7, #24]
   return(result);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e010      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	f43f af46 	beq.w	800663c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3770      	adds	r7, #112	; 0x70
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e027      	b.n	8006820 <HAL_UARTEx_DisableFifoMode+0x66>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2224      	movs	r2, #36	; 0x24
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0201 	bic.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006840:	2302      	movs	r3, #2
 8006842:	e02d      	b.n	80068a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0201 	bic.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f84f 	bl	8006924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e02d      	b.n	800691c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	; 0x24
 80068cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f811 	bl	8006924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006944:	e031      	b.n	80069aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006946:	2310      	movs	r3, #16
 8006948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800694a:	2310      	movs	r3, #16
 800694c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	0e5b      	lsrs	r3, r3, #25
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	0f5b      	lsrs	r3, r3, #29
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	7b3a      	ldrb	r2, [r7, #12]
 8006972:	4911      	ldr	r1, [pc, #68]	; (80069b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006974:	5c8a      	ldrb	r2, [r1, r2]
 8006976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800697a:	7b3a      	ldrb	r2, [r7, #12]
 800697c:	490f      	ldr	r1, [pc, #60]	; (80069bc <UARTEx_SetNbDataToProcess+0x98>)
 800697e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006980:	fb93 f3f2 	sdiv	r3, r3, r2
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	7b7a      	ldrb	r2, [r7, #13]
 8006990:	4909      	ldr	r1, [pc, #36]	; (80069b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006992:	5c8a      	ldrb	r2, [r1, r2]
 8006994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006998:	7b7a      	ldrb	r2, [r7, #13]
 800699a:	4908      	ldr	r1, [pc, #32]	; (80069bc <UARTEx_SetNbDataToProcess+0x98>)
 800699c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800699e:	fb93 f3f2 	sdiv	r3, r3, r2
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	0800c198 	.word	0x0800c198
 80069bc:	0800c1a0 	.word	0x0800c1a0

080069c0 <__NVIC_SetPriority>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	6039      	str	r1, [r7, #0]
 80069ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db0a      	blt.n	80069ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	490c      	ldr	r1, [pc, #48]	; (8006a0c <__NVIC_SetPriority+0x4c>)
 80069da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069de:	0112      	lsls	r2, r2, #4
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	440b      	add	r3, r1
 80069e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069e8:	e00a      	b.n	8006a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4908      	ldr	r1, [pc, #32]	; (8006a10 <__NVIC_SetPriority+0x50>)
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	3b04      	subs	r3, #4
 80069f8:	0112      	lsls	r2, r2, #4
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	440b      	add	r3, r1
 80069fe:	761a      	strb	r2, [r3, #24]
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	e000e100 	.word	0xe000e100
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f06f 0004 	mvn.w	r0, #4
 8006a1e:	f7ff ffcf 	bl	80069c0 <__NVIC_SetPriority>
#endif
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	603b      	str	r3, [r7, #0]
  return(result);
 8006a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a3a:	f06f 0305 	mvn.w	r3, #5
 8006a3e:	607b      	str	r3, [r7, #4]
 8006a40:	e00c      	b.n	8006a5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <osKernelInitialize+0x44>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a4a:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <osKernelInitialize+0x44>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	e002      	b.n	8006a5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a5c:	687b      	ldr	r3, [r7, #4]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	24000444 	.word	0x24000444

08006a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a76:	f3ef 8305 	mrs	r3, IPSR
 8006a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a82:	f06f 0305 	mvn.w	r3, #5
 8006a86:	607b      	str	r3, [r7, #4]
 8006a88:	e010      	b.n	8006aac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <osKernelStart+0x48>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d109      	bne.n	8006aa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a92:	f7ff ffbf 	bl	8006a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <osKernelStart+0x48>)
 8006a98:	2202      	movs	r2, #2
 8006a9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a9c:	f001 fdc2 	bl	8008624 <vTaskStartScheduler>
      stat = osOK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	e002      	b.n	8006aac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aac:	687b      	ldr	r3, [r7, #4]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	24000444 	.word	0x24000444

08006abc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af04      	add	r7, sp, #16
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006acc:	f3ef 8305 	mrs	r3, IPSR
 8006ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d17e      	bne.n	8006bd6 <osThreadNew+0x11a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d07b      	beq.n	8006bd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ade:	2380      	movs	r3, #128	; 0x80
 8006ae0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ae2:	2318      	movs	r3, #24
 8006ae4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d045      	beq.n	8006b82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <osThreadNew+0x48>
        name = attr->name;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <osThreadNew+0x6e>
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b38      	cmp	r3, #56	; 0x38
 8006b1c:	d805      	bhi.n	8006b2a <osThreadNew+0x6e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <osThreadNew+0x72>
        return (NULL);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e054      	b.n	8006bd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	089b      	lsrs	r3, r3, #2
 8006b3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <osThreadNew+0xa8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	2ba7      	cmp	r3, #167	; 0xa7
 8006b4c:	d90a      	bls.n	8006b64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d006      	beq.n	8006b64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <osThreadNew+0xa8>
        mem = 1;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	e010      	b.n	8006b86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10c      	bne.n	8006b86 <osThreadNew+0xca>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <osThreadNew+0xca>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <osThreadNew+0xca>
          mem = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e001      	b.n	8006b86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d110      	bne.n	8006bae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b94:	9202      	str	r2, [sp, #8]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6a3a      	ldr	r2, [r7, #32]
 8006ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f001 fb52 	bl	800824c <xTaskCreateStatic>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e013      	b.n	8006bd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d110      	bne.n	8006bd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f107 0310 	add.w	r3, r7, #16
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f001 fb9d 	bl	8008306 <xTaskCreate>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <osThreadNew+0x11a>
            hTask = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bd6:	693b      	ldr	r3, [r7, #16]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	; 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be8:	f3ef 8305 	mrs	r3, IPSR
 8006bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <osDelay+0x1c>
    stat = osErrorISR;
 8006bf4:	f06f 0305 	mvn.w	r3, #5
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e007      	b.n	8006c0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fcd8 	bl	80085bc <vTaskDelay>
    }
  }

  return (stat);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b088      	sub	sp, #32
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c22:	f3ef 8305 	mrs	r3, IPSR
 8006c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d174      	bne.n	8006d18 <osMutexNew+0x102>
    if (attr != NULL) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <osMutexNew+0x26>
      type = attr->attr_bits;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e001      	b.n	8006c40 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <osMutexNew+0x3a>
      rmtx = 1U;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	e001      	b.n	8006c54 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d15c      	bne.n	8006d18 <osMutexNew+0x102>
      mem = -1;
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c62:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d006      	beq.n	8006c80 <osMutexNew+0x6a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b4f      	cmp	r3, #79	; 0x4f
 8006c78:	d902      	bls.n	8006c80 <osMutexNew+0x6a>
          mem = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	e00c      	b.n	8006c9a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d108      	bne.n	8006c9a <osMutexNew+0x84>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <osMutexNew+0x84>
            mem = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	e001      	b.n	8006c9a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d112      	bne.n	8006cc6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4619      	mov	r1, r3
 8006cac:	2004      	movs	r0, #4
 8006cae:	f000 feca 	bl	8007a46 <xQueueCreateMutexStatic>
 8006cb2:	61f8      	str	r0, [r7, #28]
 8006cb4:	e016      	b.n	8006ce4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	f000 fec2 	bl	8007a46 <xQueueCreateMutexStatic>
 8006cc2:	61f8      	str	r0, [r7, #28]
 8006cc4:	e00e      	b.n	8006ce4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10b      	bne.n	8006ce4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	f000 fe9f 	bl	8007a16 <xQueueCreateMutex>
 8006cd8:	61f8      	str	r0, [r7, #28]
 8006cda:	e003      	b.n	8006ce4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f000 fe9a 	bl	8007a16 <xQueueCreateMutex>
 8006ce2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00c      	beq.n	8006d04 <osMutexNew+0xee>
        if (attr != NULL) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <osMutexNew+0xe2>
          name = attr->name;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e001      	b.n	8006cfc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006cfc:	68f9      	ldr	r1, [r7, #12]
 8006cfe:	69f8      	ldr	r0, [r7, #28]
 8006d00:	f001 fa46 	bl	8008190 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d006      	beq.n	8006d18 <osMutexNew+0x102>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006d18:	69fb      	ldr	r3, [r7, #28]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <vApplicationGetIdleTaskMemory+0x30>)
 8006d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2280      	movs	r2, #128	; 0x80
 8006d40:	601a      	str	r2, [r3, #0]
}
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	24000448 	.word	0x24000448
 8006d54:	240004f0 	.word	0x240004f0

08006d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a07      	ldr	r2, [pc, #28]	; (8006d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4a06      	ldr	r2, [pc, #24]	; (8006d88 <vApplicationGetTimerTaskMemory+0x30>)
 8006d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d76:	601a      	str	r2, [r3, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	240006f0 	.word	0x240006f0
 8006d88:	24000798 	.word	0x24000798

08006d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d98:	f001 fcb4 	bl	8008704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d9c:	4b5b      	ldr	r3, [pc, #364]	; (8006f0c <pvPortMalloc+0x180>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006da4:	f000 f920 	bl	8006fe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006da8:	4b59      	ldr	r3, [pc, #356]	; (8006f10 <pvPortMalloc+0x184>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 8093 	bne.w	8006edc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01d      	beq.n	8006df8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d014      	beq.n	8006df8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f023 0307 	bic.w	r3, r3, #7
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d06e      	beq.n	8006edc <pvPortMalloc+0x150>
 8006dfe:	4b45      	ldr	r3, [pc, #276]	; (8006f14 <pvPortMalloc+0x188>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d869      	bhi.n	8006edc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e08:	4b43      	ldr	r3, [pc, #268]	; (8006f18 <pvPortMalloc+0x18c>)
 8006e0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e0c:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <pvPortMalloc+0x18c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e12:	e004      	b.n	8006e1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d903      	bls.n	8006e30 <pvPortMalloc+0xa4>
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f1      	bne.n	8006e14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e30:	4b36      	ldr	r3, [pc, #216]	; (8006f0c <pvPortMalloc+0x180>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d050      	beq.n	8006edc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2208      	movs	r2, #8
 8006e40:	4413      	add	r3, r2
 8006e42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	2308      	movs	r3, #8
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d91f      	bls.n	8006e9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <pvPortMalloc+0xf8>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	613b      	str	r3, [r7, #16]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e96:	69b8      	ldr	r0, [r7, #24]
 8006e98:	f000 f908 	bl	80070ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <pvPortMalloc+0x188>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <pvPortMalloc+0x188>)
 8006ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <pvPortMalloc+0x188>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <pvPortMalloc+0x190>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d203      	bcs.n	8006ebe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eb6:	4b17      	ldr	r3, [pc, #92]	; (8006f14 <pvPortMalloc+0x188>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <pvPortMalloc+0x190>)
 8006ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <pvPortMalloc+0x184>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ed2:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <pvPortMalloc+0x194>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <pvPortMalloc+0x194>)
 8006eda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006edc:	f001 fc20 	bl	8008720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <pvPortMalloc+0x174>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60fb      	str	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <pvPortMalloc+0x172>
	return pvReturn;
 8006f00:	69fb      	ldr	r3, [r7, #28]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	240047a0 	.word	0x240047a0
 8006f10:	240047b4 	.word	0x240047b4
 8006f14:	240047a4 	.word	0x240047a4
 8006f18:	24004798 	.word	0x24004798
 8006f1c:	240047a8 	.word	0x240047a8
 8006f20:	240047ac 	.word	0x240047ac

08006f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d04d      	beq.n	8006fd2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f36:	2308      	movs	r3, #8
 8006f38:	425b      	negs	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <vPortFree+0xb8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <vPortFree+0x44>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <vPortFree+0x62>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60bb      	str	r3, [r7, #8]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <vPortFree+0xb8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01e      	beq.n	8006fd2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d11a      	bne.n	8006fd2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <vPortFree+0xb8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fac:	f001 fbaa 	bl	8008704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <vPortFree+0xbc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <vPortFree+0xbc>)
 8006fbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f000 f874 	bl	80070ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fc4:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <vPortFree+0xc0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4a06      	ldr	r2, [pc, #24]	; (8006fe4 <vPortFree+0xc0>)
 8006fcc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fce:	f001 fba7 	bl	8008720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	240047b4 	.word	0x240047b4
 8006fe0:	240047a4 	.word	0x240047a4
 8006fe4:	240047b0 	.word	0x240047b0

08006fe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ff4:	4b27      	ldr	r3, [pc, #156]	; (8007094 <prvHeapInit+0xac>)
 8006ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3307      	adds	r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	4a1f      	ldr	r2, [pc, #124]	; (8007094 <prvHeapInit+0xac>)
 8007018:	4413      	add	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007020:	4a1d      	ldr	r2, [pc, #116]	; (8007098 <prvHeapInit+0xb0>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007026:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <prvHeapInit+0xb0>)
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007034:	2208      	movs	r2, #8
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0307 	bic.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <prvHeapInit+0xb4>)
 8007048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800704a:	4b14      	ldr	r3, [pc, #80]	; (800709c <prvHeapInit+0xb4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <prvHeapInit+0xb4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <prvHeapInit+0xb4>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a0a      	ldr	r2, [pc, #40]	; (80070a0 <prvHeapInit+0xb8>)
 8007076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <prvHeapInit+0xbc>)
 800707e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <prvHeapInit+0xc0>)
 8007082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007086:	601a      	str	r2, [r3, #0]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	24000b98 	.word	0x24000b98
 8007098:	24004798 	.word	0x24004798
 800709c:	240047a0 	.word	0x240047a0
 80070a0:	240047a8 	.word	0x240047a8
 80070a4:	240047a4 	.word	0x240047a4
 80070a8:	240047b4 	.word	0x240047b4

080070ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070b4:	4b28      	ldr	r3, [pc, #160]	; (8007158 <prvInsertBlockIntoFreeList+0xac>)
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e002      	b.n	80070c0 <prvInsertBlockIntoFreeList+0x14>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d8f7      	bhi.n	80070ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d108      	bne.n	80070ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	441a      	add	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	441a      	add	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d118      	bne.n	8007134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <prvInsertBlockIntoFreeList+0xb0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d00d      	beq.n	800712a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e008      	b.n	800713c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800712a:	4b0c      	ldr	r3, [pc, #48]	; (800715c <prvInsertBlockIntoFreeList+0xb0>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e003      	b.n	800713c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d002      	beq.n	800714a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	24004798 	.word	0x24004798
 800715c:	240047a0 	.word	0x240047a0

08007160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f103 0208 	add.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0208 	add.w	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0208 	add.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d103      	bne.n	8007222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e00c      	b.n	800723c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3308      	adds	r3, #8
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e002      	b.n	8007230 <vListInsert+0x2e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	d2f6      	bcs.n	800722a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6892      	ldr	r2, [r2, #8]
 800728a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6852      	ldr	r2, [r2, #4]
 8007294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d103      	bne.n	80072a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	1e5a      	subs	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b04      	subs	r3, #4
 80072d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072f8:	4a0c      	ldr	r2, [pc, #48]	; (800732c <pxPortInitialiseStack+0x64>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b14      	subs	r3, #20
 8007302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b04      	subs	r3, #4
 800730e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f06f 0202 	mvn.w	r2, #2
 8007316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3b20      	subs	r3, #32
 800731c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800731e:	68fb      	ldr	r3, [r7, #12]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	08007331 	.word	0x08007331

08007330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <prvTaskExitError+0x54>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d00a      	beq.n	800735a <prvTaskExitError+0x2a>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <prvTaskExitError+0x28>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60bb      	str	r3, [r7, #8]
}
 800736c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800736e:	bf00      	nop
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0fc      	beq.n	8007370 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	24000010 	.word	0x24000010
	...

08007390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <pxCurrentTCBConst2>)
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	6808      	ldr	r0, [r1, #0]
 8007396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739a:	f380 8809 	msr	PSP, r0
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8811 	msr	BASEPRI, r0
 80073aa:	4770      	bx	lr
 80073ac:	f3af 8000 	nop.w

080073b0 <pxCurrentTCBConst2>:
 80073b0:	24004800 	.word	0x24004800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop

080073b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073b8:	4808      	ldr	r0, [pc, #32]	; (80073dc <prvPortStartFirstTask+0x24>)
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	6800      	ldr	r0, [r0, #0]
 80073be:	f380 8808 	msr	MSP, r0
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8814 	msr	CONTROL, r0
 80073ca:	b662      	cpsie	i
 80073cc:	b661      	cpsie	f
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	df00      	svc	0
 80073d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073da:	bf00      	nop
 80073dc:	e000ed08 	.word	0xe000ed08

080073e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073e6:	4b46      	ldr	r3, [pc, #280]	; (8007500 <xPortStartScheduler+0x120>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a46      	ldr	r2, [pc, #280]	; (8007504 <xPortStartScheduler+0x124>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d10a      	bne.n	8007406 <xPortStartScheduler+0x26>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007406:	4b3e      	ldr	r3, [pc, #248]	; (8007500 <xPortStartScheduler+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3f      	ldr	r2, [pc, #252]	; (8007508 <xPortStartScheduler+0x128>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10a      	bne.n	8007426 <xPortStartScheduler+0x46>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <xPortStartScheduler+0x12c>)
 8007428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007448:	b2da      	uxtb	r2, r3
 800744a:	4b31      	ldr	r3, [pc, #196]	; (8007510 <xPortStartScheduler+0x130>)
 800744c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <xPortStartScheduler+0x134>)
 8007450:	2207      	movs	r2, #7
 8007452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007454:	e009      	b.n	800746a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007456:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <xPortStartScheduler+0x134>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3b01      	subs	r3, #1
 800745c:	4a2d      	ldr	r2, [pc, #180]	; (8007514 <xPortStartScheduler+0x134>)
 800745e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b80      	cmp	r3, #128	; 0x80
 8007474:	d0ef      	beq.n	8007456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007476:	4b27      	ldr	r3, [pc, #156]	; (8007514 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f1c3 0307 	rsb	r3, r3, #7
 800747e:	2b04      	cmp	r3, #4
 8007480:	d00a      	beq.n	8007498 <xPortStartScheduler+0xb8>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60bb      	str	r3, [r7, #8]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007498:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <xPortStartScheduler+0x134>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <xPortStartScheduler+0x134>)
 80074a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074a2:	4b1c      	ldr	r3, [pc, #112]	; (8007514 <xPortStartScheduler+0x134>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074aa:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <xPortStartScheduler+0x134>)
 80074ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074b6:	4b18      	ldr	r3, [pc, #96]	; (8007518 <xPortStartScheduler+0x138>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a17      	ldr	r2, [pc, #92]	; (8007518 <xPortStartScheduler+0x138>)
 80074bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <xPortStartScheduler+0x138>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a14      	ldr	r2, [pc, #80]	; (8007518 <xPortStartScheduler+0x138>)
 80074c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074ce:	f000 f8dd 	bl	800768c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074d2:	4b12      	ldr	r3, [pc, #72]	; (800751c <xPortStartScheduler+0x13c>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074d8:	f000 f8fc 	bl	80076d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <xPortStartScheduler+0x140>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a0f      	ldr	r2, [pc, #60]	; (8007520 <xPortStartScheduler+0x140>)
 80074e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074e8:	f7ff ff66 	bl	80073b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074ec:	f001 fa80 	bl	80089f0 <vTaskSwitchContext>
	prvTaskExitError();
 80074f0:	f7ff ff1e 	bl	8007330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	e000ed00 	.word	0xe000ed00
 8007504:	410fc271 	.word	0x410fc271
 8007508:	410fc270 	.word	0x410fc270
 800750c:	e000e400 	.word	0xe000e400
 8007510:	240047b8 	.word	0x240047b8
 8007514:	240047bc 	.word	0x240047bc
 8007518:	e000ed20 	.word	0xe000ed20
 800751c:	24000010 	.word	0x24000010
 8007520:	e000ef34 	.word	0xe000ef34

08007524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	607b      	str	r3, [r7, #4]
}
 800753c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <vPortEnterCritical+0x58>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <vPortEnterCritical+0x58>)
 8007546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007548:	4b0c      	ldr	r3, [pc, #48]	; (800757c <vPortEnterCritical+0x58>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10f      	bne.n	8007570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortEnterCritical+0x5c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <vPortEnterCritical+0x4c>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	603b      	str	r3, [r7, #0]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <vPortEnterCritical+0x4a>
	}
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	24000010 	.word	0x24000010
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800758a:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <vPortExitCritical+0x50>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <vPortExitCritical+0x24>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	607b      	str	r3, [r7, #4]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <vPortExitCritical+0x50>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <vPortExitCritical+0x50>)
 80075b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <vPortExitCritical+0x50>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <vPortExitCritical+0x42>
 80075ba:	2300      	movs	r3, #0
 80075bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	24000010 	.word	0x24000010
	...

080075e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075e0:	f3ef 8009 	mrs	r0, PSP
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	4b15      	ldr	r3, [pc, #84]	; (8007640 <pxCurrentTCBConst>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	f01e 0f10 	tst.w	lr, #16
 80075f0:	bf08      	it	eq
 80075f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	6010      	str	r0, [r2, #0]
 80075fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007604:	f380 8811 	msr	BASEPRI, r0
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f001 f9ee 	bl	80089f0 <vTaskSwitchContext>
 8007614:	f04f 0000 	mov.w	r0, #0
 8007618:	f380 8811 	msr	BASEPRI, r0
 800761c:	bc09      	pop	{r0, r3}
 800761e:	6819      	ldr	r1, [r3, #0]
 8007620:	6808      	ldr	r0, [r1, #0]
 8007622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007626:	f01e 0f10 	tst.w	lr, #16
 800762a:	bf08      	it	eq
 800762c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007630:	f380 8809 	msr	PSP, r0
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	f3af 8000 	nop.w

08007640 <pxCurrentTCBConst>:
 8007640:	24004800 	.word	0x24004800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop

08007648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007662:	f001 f90b 	bl	800887c <xTaskIncrementTick>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <xPortSysTickHandler+0x40>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f383 8811 	msr	BASEPRI, r3
}
 800767e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <vPortSetupTimerInterrupt+0x34>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <vPortSetupTimerInterrupt+0x38>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <vPortSetupTimerInterrupt+0x3c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <vPortSetupTimerInterrupt+0x40>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <vPortSetupTimerInterrupt+0x44>)
 80076aa:	3b01      	subs	r3, #1
 80076ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ae:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <vPortSetupTimerInterrupt+0x34>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	e000e010 	.word	0xe000e010
 80076c4:	e000e018 	.word	0xe000e018
 80076c8:	24000000 	.word	0x24000000
 80076cc:	10624dd3 	.word	0x10624dd3
 80076d0:	e000e014 	.word	0xe000e014

080076d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076e4 <vPortEnableVFP+0x10>
 80076d8:	6801      	ldr	r1, [r0, #0]
 80076da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076de:	6001      	str	r1, [r0, #0]
 80076e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076e2:	bf00      	nop
 80076e4:	e000ed88 	.word	0xe000ed88

080076e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ee:	f3ef 8305 	mrs	r3, IPSR
 80076f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d914      	bls.n	8007724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <vPortValidateInterruptPriority+0x70>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007704:	4b15      	ldr	r3, [pc, #84]	; (800775c <vPortValidateInterruptPriority+0x74>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	7afa      	ldrb	r2, [r7, #11]
 800770a:	429a      	cmp	r2, r3
 800770c:	d20a      	bcs.n	8007724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007724:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <vPortValidateInterruptPriority+0x78>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <vPortValidateInterruptPriority+0x7c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d90a      	bls.n	800774a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	603b      	str	r3, [r7, #0]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <vPortValidateInterruptPriority+0x60>
	}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	e000e3f0 	.word	0xe000e3f0
 800775c:	240047b8 	.word	0x240047b8
 8007760:	e000ed0c 	.word	0xe000ed0c
 8007764:	240047bc 	.word	0x240047bc

08007768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <xQueueGenericReset+0x2a>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60bb      	str	r3, [r7, #8]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007792:	f7ff fec7 	bl	8007524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	3b01      	subs	r3, #1
 80077c4:	68f9      	ldr	r1, [r7, #12]
 80077c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	441a      	add	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	22ff      	movs	r2, #255	; 0xff
 80077de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d114      	bne.n	8007812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01a      	beq.n	8007826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3310      	adds	r3, #16
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 f9af 	bl	8008b58 <xTaskRemoveFromEventList>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d012      	beq.n	8007826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007800:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <xQueueGenericReset+0xcc>)
 8007802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	e009      	b.n	8007826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3310      	adds	r3, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fca2 	bl	8007160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc9d 	bl	8007160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007826:	f7ff fead 	bl	8007584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800782a:	2301      	movs	r3, #1
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08e      	sub	sp, #56	; 0x38
 800783c:	af02      	add	r7, sp, #8
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <xQueueGenericCreateStatic+0x52>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <xQueueGenericCreateStatic+0x56>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <xQueueGenericCreateStatic+0x58>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	623b      	str	r3, [r7, #32]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <xQueueGenericCreateStatic+0x7e>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <xQueueGenericCreateStatic+0x82>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <xQueueGenericCreateStatic+0x84>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	61fb      	str	r3, [r7, #28]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078d6:	2350      	movs	r3, #80	; 0x50
 80078d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b50      	cmp	r3, #80	; 0x50
 80078de:	d00a      	beq.n	80078f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	61bb      	str	r3, [r7, #24]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800790a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4613      	mov	r3, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f83f 	bl	800799c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007920:	4618      	mov	r0, r3
 8007922:	3730      	adds	r7, #48	; 0x30
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <xQueueGenericCreate+0x2a>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	fb02 f303 	mul.w	r3, r2, r3
 800795a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	3350      	adds	r3, #80	; 0x50
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fa13 	bl	8006d8c <pvPortMalloc>
 8007966:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	3350      	adds	r3, #80	; 0x50
 8007976:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007980:	79fa      	ldrb	r2, [r7, #7]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f805 	bl	800799c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007992:	69bb      	ldr	r3, [r7, #24]
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e002      	b.n	80079be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079ca:	2101      	movs	r1, #1
 80079cc:	69b8      	ldr	r0, [r7, #24]
 80079ce:	f7ff fecb 	bl	8007768 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f837 	bl	8007a7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6939      	ldr	r1, [r7, #16]
 8007a2e:	6978      	ldr	r0, [r7, #20]
 8007a30:	f7ff ff7a 	bl	8007928 <xQueueGenericCreate>
 8007a34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff ffd3 	bl	80079e2 <prvInitialiseMutex>

		return xNewQueue;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b088      	sub	sp, #32
 8007a4a:	af02      	add	r7, sp, #8
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	6039      	str	r1, [r7, #0]
 8007a50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a52:	2301      	movs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2200      	movs	r2, #0
 8007a62:	6939      	ldr	r1, [r7, #16]
 8007a64:	6978      	ldr	r0, [r7, #20]
 8007a66:	f7ff fee7 	bl	8007838 <xQueueGenericCreateStatic>
 8007a6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff ffb8 	bl	80079e2 <prvInitialiseMutex>

		return xNewQueue;
 8007a72:	68fb      	ldr	r3, [r7, #12]
	}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	; 0x38
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <xQueueGenericSend+0x32>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <xQueueGenericSend+0x40>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <xQueueGenericSend+0x44>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <xQueueGenericSend+0x46>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <xQueueGenericSend+0x60>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x6e>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x72>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <xQueueGenericSend+0x74>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xQueueGenericSend+0x8e>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b0a:	f001 f9e7 	bl	8008edc <xTaskGetSchedulerState>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <xQueueGenericSend+0x9e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <xQueueGenericSend+0xa2>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <xQueueGenericSend+0xa4>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <xQueueGenericSend+0xbe>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61fb      	str	r3, [r7, #28]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b3a:	f7ff fcf3 	bl	8007524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <xQueueGenericSend+0xd4>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d129      	bne.n	8007ba4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b56:	f000 fa0b 	bl	8007f70 <prvCopyDataToQueue>
 8007b5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	3324      	adds	r3, #36	; 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fff5 	bl	8008b58 <xTaskRemoveFromEventList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b74:	4b3f      	ldr	r3, [pc, #252]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	e00a      	b.n	8007b9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b8c:	4b39      	ldr	r3, [pc, #228]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b9c:	f7ff fcf2 	bl	8007584 <vPortExitCritical>
				return pdPASS;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e063      	b.n	8007c6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007baa:	f7ff fceb 	bl	8007584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e05c      	b.n	8007c6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f82f 	bl	8008c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc6:	f7ff fcdd 	bl	8007584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bca:	f000 fd9b 	bl	8008704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bce:	f7ff fca9 	bl	8007524 <vPortEnterCritical>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSend+0x16c>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d103      	bne.n	8007bfe <xQueueGenericSend+0x182>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfe:	f7ff fcc1 	bl	8007584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c02:	1d3a      	adds	r2, r7, #4
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f81e 	bl	8008c4c <xTaskCheckForTimeOut>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d124      	bne.n	8007c60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c18:	f000 faa2 	bl	8008160 <prvIsQueueFull>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	3310      	adds	r3, #16
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 ff44 	bl	8008ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c32:	f000 fa2d 	bl	8008090 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c36:	f000 fd73 	bl	8008720 <xTaskResumeAll>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f af7c 	bne.w	8007b3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	e772      	b.n	8007b3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c56:	f000 fa1b 	bl	8008090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c5a:	f000 fd61 	bl	8008720 <xTaskResumeAll>
 8007c5e:	e76c      	b.n	8007b3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c62:	f000 fa15 	bl	8008090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c66:	f000 fd5b 	bl	8008720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3738      	adds	r7, #56	; 0x38
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b090      	sub	sp, #64	; 0x40
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d103      	bne.n	8007cb4 <xQueueGenericSendFromISR+0x3c>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueGenericSendFromISR+0x40>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <xQueueGenericSendFromISR+0x42>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSendFromISR+0x6a>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSendFromISR+0x6e>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSendFromISR+0x70>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	623b      	str	r3, [r7, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d02:	f7ff fcf1 	bl	80076e8 <vPortValidateInterruptPriority>
	__asm volatile
 8007d06:	f3ef 8211 	mrs	r2, BASEPRI
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	61fa      	str	r2, [r7, #28]
 8007d1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <xQueueGenericSendFromISR+0xbc>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d12f      	bne.n	8007d94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d4a:	f000 f911 	bl	8007f70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d112      	bne.n	8007d7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d016      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fef7 	bl	8008b58 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e007      	b.n	8007d8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	b25a      	sxtb	r2, r3
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d92:	e001      	b.n	8007d98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f383 8811 	msr	BASEPRI, r3
}
 8007da2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3740      	adds	r7, #64	; 0x40
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	; 0x30
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xQueueReceive+0x30>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	623b      	str	r3, [r7, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <xQueueReceive+0x3e>
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <xQueueReceive+0x42>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <xQueueReceive+0x44>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <xQueueReceive+0x5e>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	61fb      	str	r3, [r7, #28]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e0e:	f001 f865 	bl	8008edc <xTaskGetSchedulerState>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d102      	bne.n	8007e1e <xQueueReceive+0x6e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <xQueueReceive+0x72>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <xQueueReceive+0x74>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <xQueueReceive+0x8e>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	61bb      	str	r3, [r7, #24]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e3e:	f7ff fb71 	bl	8007524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01f      	beq.n	8007e8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e52:	f000 f8f7 	bl	8008044 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	3310      	adds	r3, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fe74 	bl	8008b58 <xTaskRemoveFromEventList>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e76:	4b3d      	ldr	r3, [pc, #244]	; (8007f6c <xQueueReceive+0x1bc>)
 8007e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e86:	f7ff fb7d 	bl	8007584 <vPortExitCritical>
				return pdPASS;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e069      	b.n	8007f62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e94:	f7ff fb76 	bl	8007584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e062      	b.n	8007f62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 feba 	bl	8008c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb0:	f7ff fb68 	bl	8007584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eb4:	f000 fc26 	bl	8008704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eb8:	f7ff fb34 	bl	8007524 <vPortEnterCritical>
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <xQueueReceive+0x122>
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <xQueueReceive+0x138>
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee8:	f7ff fb4c 	bl	8007584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eec:	1d3a      	adds	r2, r7, #4
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fea9 	bl	8008c4c <xTaskCheckForTimeOut>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d123      	bne.n	8007f48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f02:	f000 f917 	bl	8008134 <prvIsQueueEmpty>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d017      	beq.n	8007f3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fdcf 	bl	8008ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1c:	f000 f8b8 	bl	8008090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f20:	f000 fbfe 	bl	8008720 <xTaskResumeAll>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d189      	bne.n	8007e3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f2a:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <xQueueReceive+0x1bc>)
 8007f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	e780      	b.n	8007e3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f000 f8a7 	bl	8008090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f42:	f000 fbed 	bl	8008720 <xTaskResumeAll>
 8007f46:	e77a      	b.n	8007e3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f4a:	f000 f8a1 	bl	8008090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f4e:	f000 fbe7 	bl	8008720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f54:	f000 f8ee 	bl	8008134 <prvIsQueueEmpty>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f43f af6f 	beq.w	8007e3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3730      	adds	r7, #48	; 0x30
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d14d      	bne.n	8008032 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 ffbc 	bl	8008f18 <xTaskPriorityDisinherit>
 8007fa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	e043      	b.n	8008032 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d119      	bne.n	8007fe4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6858      	ldr	r0, [r3, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	f002 fa65 	bl	800a48a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	441a      	add	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d32b      	bcc.n	8008032 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	e026      	b.n	8008032 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68d8      	ldr	r0, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	461a      	mov	r2, r3
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	f002 fa4b 	bl	800a48a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d207      	bcs.n	8008020 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	425b      	negs	r3, r3
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d105      	bne.n	8008032 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3b01      	subs	r3, #1
 8008030:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800803a:	697b      	ldr	r3, [r7, #20]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	441a      	add	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d303      	bcc.n	8008078 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68d9      	ldr	r1, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	461a      	mov	r2, r3
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f002 fa01 	bl	800a48a <memcpy>
	}
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008098:	f7ff fa44 	bl	8007524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a4:	e011      	b.n	80080ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d012      	beq.n	80080d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3324      	adds	r3, #36	; 0x24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fd50 	bl	8008b58 <xTaskRemoveFromEventList>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080be:	f000 fe27 	bl	8008d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dce9      	bgt.n	80080a6 <prvUnlockQueue+0x16>
 80080d2:	e000      	b.n	80080d6 <prvUnlockQueue+0x46>
					break;
 80080d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080de:	f7ff fa51 	bl	8007584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080e2:	f7ff fa1f 	bl	8007524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ee:	e011      	b.n	8008114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d012      	beq.n	800811e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3310      	adds	r3, #16
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fd2b 	bl	8008b58 <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008108:	f000 fe02 	bl	8008d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	3b01      	subs	r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	dce9      	bgt.n	80080f0 <prvUnlockQueue+0x60>
 800811c:	e000      	b.n	8008120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800811e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	22ff      	movs	r2, #255	; 0xff
 8008124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008128:	f7ff fa2c 	bl	8007584 <vPortExitCritical>
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813c:	f7ff f9f2 	bl	8007524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e001      	b.n	8008152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008152:	f7ff fa17 	bl	8007584 <vPortExitCritical>

	return xReturn;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008168:	f7ff f9dc 	bl	8007524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	429a      	cmp	r2, r3
 8008176:	d102      	bne.n	800817e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e001      	b.n	8008182 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008182:	f7ff f9ff 	bl	8007584 <vPortExitCritical>

	return xReturn;
 8008186:	68fb      	ldr	r3, [r7, #12]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e014      	b.n	80081ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081a0:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081c2:	e006      	b.n	80081d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d9e7      	bls.n	80081a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	240047c0 	.word	0x240047c0

080081e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081f4:	f7ff f996 	bl	8007524 <vPortEnterCritical>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <vQueueWaitForMessageRestricted+0x2a>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008214:	b25b      	sxtb	r3, r3
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d103      	bne.n	8008224 <vQueueWaitForMessageRestricted+0x40>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008224:	f7ff f9ae 	bl	8007584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3324      	adds	r3, #36	; 0x24
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fc61 	bl	8008b00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f7ff ff26 	bl	8008090 <prvUnlockQueue>
	}
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08e      	sub	sp, #56	; 0x38
 8008250:	af04      	add	r7, sp, #16
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xTaskCreateStatic+0x46>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61fb      	str	r3, [r7, #28]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008292:	23a8      	movs	r3, #168	; 0xa8
 8008294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2ba8      	cmp	r3, #168	; 0xa8
 800829a:	d00a      	beq.n	80082b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	61bb      	str	r3, [r7, #24]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01e      	beq.n	80082f8 <xTaskCreateStatic+0xac>
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01b      	beq.n	80082f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082d2:	2300      	movs	r3, #0
 80082d4:	9303      	str	r3, [sp, #12]
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f850 	bl	8008390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082f2:	f000 f8f3 	bl	80084dc <prvAddNewTaskToReadyList>
 80082f6:	e001      	b.n	80082fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
	}
 80082fe:	4618      	mov	r0, r3
 8008300:	3728      	adds	r7, #40	; 0x28
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008306:	b580      	push	{r7, lr}
 8008308:	b08c      	sub	sp, #48	; 0x30
 800830a:	af04      	add	r7, sp, #16
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4613      	mov	r3, r2
 8008314:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fd36 	bl	8006d8c <pvPortMalloc>
 8008320:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008328:	20a8      	movs	r0, #168	; 0xa8
 800832a:	f7fe fd2f 	bl	8006d8c <pvPortMalloc>
 800832e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	631a      	str	r2, [r3, #48]	; 0x30
 800833c:	e005      	b.n	800834a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f7fe fdf0 	bl	8006f24 <vPortFree>
 8008344:	e001      	b.n	800834a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	2300      	movs	r3, #0
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	9302      	str	r3, [sp, #8]
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 f80e 	bl	8008390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008374:	69f8      	ldr	r0, [r7, #28]
 8008376:	f000 f8b1 	bl	80084dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e002      	b.n	8008386 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008380:	f04f 33ff 	mov.w	r3, #4294967295
 8008384:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008386:	69bb      	ldr	r3, [r7, #24]
	}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	461a      	mov	r2, r3
 80083a8:	21a5      	movs	r1, #165	; 0xa5
 80083aa:	f001 ff99 	bl	800a2e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80083b8:	440b      	add	r3, r1
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f023 0307 	bic.w	r3, r3, #7
 80083c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	617b      	str	r3, [r7, #20]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d01f      	beq.n	800842e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e012      	b.n	800841a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	7819      	ldrb	r1, [r3, #0]
 80083fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	3334      	adds	r3, #52	; 0x34
 8008404:	460a      	mov	r2, r1
 8008406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d006      	beq.n	8008422 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	2b0f      	cmp	r3, #15
 800841e:	d9e9      	bls.n	80083f4 <prvInitialiseNewTask+0x64>
 8008420:	e000      	b.n	8008424 <prvInitialiseNewTask+0x94>
			{
				break;
 8008422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800842c:	e003      	b.n	8008436 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	2b37      	cmp	r3, #55	; 0x37
 800843a:	d901      	bls.n	8008440 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800843c:	2337      	movs	r3, #55	; 0x37
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	2200      	movs	r2, #0
 8008450:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fea2 	bl	80071a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	3318      	adds	r3, #24
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fe9d 	bl	80071a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800846a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	3354      	adds	r3, #84	; 0x54
 8008490:	224c      	movs	r2, #76	; 0x4c
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f001 ff23 	bl	800a2e0 <memset>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <prvInitialiseNewTask+0x140>)
 800849e:	659a      	str	r2, [r3, #88]	; 0x58
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	4a0c      	ldr	r2, [pc, #48]	; (80084d4 <prvInitialiseNewTask+0x144>)
 80084a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <prvInitialiseNewTask+0x148>)
 80084aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	69b8      	ldr	r0, [r7, #24]
 80084b2:	f7fe ff09 	bl	80072c8 <pxPortInitialiseStack>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084c8:	bf00      	nop
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	24004e2c 	.word	0x24004e2c
 80084d4:	24004e94 	.word	0x24004e94
 80084d8:	24004efc 	.word	0x24004efc

080084dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084e4:	f7ff f81e 	bl	8007524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084e8:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a2c      	ldr	r2, [pc, #176]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 80084f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084f2:	4b2c      	ldr	r3, [pc, #176]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084fa:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d110      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008508:	f000 fc26 	bl	8008d58 <prvInitialiseTaskLists>
 800850c:	e00d      	b.n	800852a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <prvAddNewTaskToReadyList+0xcc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008516:	4b23      	ldr	r3, [pc, #140]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	429a      	cmp	r2, r3
 8008522:	d802      	bhi.n	800852a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008524:	4a1f      	ldr	r2, [pc, #124]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 8008532:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <prvAddNewTaskToReadyList+0xd4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d903      	bls.n	8008550 <prvAddNewTaskToReadyList+0x74>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <prvAddNewTaskToReadyList+0xd4>)
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4a15      	ldr	r2, [pc, #84]	; (80085b4 <prvAddNewTaskToReadyList+0xd8>)
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f7fe fe27 	bl	80071ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800856c:	f7ff f80a 	bl	8007584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008570:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <prvAddNewTaskToReadyList+0xcc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	429a      	cmp	r2, r3
 8008584:	d207      	bcs.n	8008596 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvAddNewTaskToReadyList+0xdc>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	24004cd4 	.word	0x24004cd4
 80085a4:	24004800 	.word	0x24004800
 80085a8:	24004ce0 	.word	0x24004ce0
 80085ac:	24004cf0 	.word	0x24004cf0
 80085b0:	24004cdc 	.word	0x24004cdc
 80085b4:	24004804 	.word	0x24004804
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d017      	beq.n	80085fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <vTaskDelay+0x60>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <vTaskDelay+0x30>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085ec:	f000 f88a 	bl	8008704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085f0:	2100      	movs	r1, #0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fcfe 	bl	8008ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085f8:	f000 f892 	bl	8008720 <xTaskResumeAll>
 80085fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d107      	bne.n	8008614 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <vTaskDelay+0x64>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	24004cfc 	.word	0x24004cfc
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008632:	463a      	mov	r2, r7
 8008634:	1d39      	adds	r1, r7, #4
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fb72 	bl	8006d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	9202      	str	r2, [sp, #8]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	460a      	mov	r2, r1
 8008652:	4924      	ldr	r1, [pc, #144]	; (80086e4 <vTaskStartScheduler+0xc0>)
 8008654:	4824      	ldr	r0, [pc, #144]	; (80086e8 <vTaskStartScheduler+0xc4>)
 8008656:	f7ff fdf9 	bl	800824c <xTaskCreateStatic>
 800865a:	4603      	mov	r3, r0
 800865c:	4a23      	ldr	r2, [pc, #140]	; (80086ec <vTaskStartScheduler+0xc8>)
 800865e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008660:	4b22      	ldr	r3, [pc, #136]	; (80086ec <vTaskStartScheduler+0xc8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e001      	b.n	8008672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d102      	bne.n	800867e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008678:	f000 fd10 	bl	800909c <xTimerCreateTimerTask>
 800867c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d11b      	bne.n	80086bc <vTaskStartScheduler+0x98>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	613b      	str	r3, [r7, #16]
}
 8008696:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <vTaskStartScheduler+0xcc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3354      	adds	r3, #84	; 0x54
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <vTaskStartScheduler+0xd0>)
 80086a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <vTaskStartScheduler+0xd4>)
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <vTaskStartScheduler+0xd8>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086b0:	4b13      	ldr	r3, [pc, #76]	; (8008700 <vTaskStartScheduler+0xdc>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086b6:	f7fe fe93 	bl	80073e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ba:	e00e      	b.n	80086da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d10a      	bne.n	80086da <vTaskStartScheduler+0xb6>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60fb      	str	r3, [r7, #12]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <vTaskStartScheduler+0xb4>
}
 80086da:	bf00      	nop
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	0800c100 	.word	0x0800c100
 80086e8:	08008d29 	.word	0x08008d29
 80086ec:	24004cf8 	.word	0x24004cf8
 80086f0:	24004800 	.word	0x24004800
 80086f4:	2400006c 	.word	0x2400006c
 80086f8:	24004cf4 	.word	0x24004cf4
 80086fc:	24004ce0 	.word	0x24004ce0
 8008700:	24004cd8 	.word	0x24004cd8

08008704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <vTaskSuspendAll+0x18>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	4a03      	ldr	r2, [pc, #12]	; (800871c <vTaskSuspendAll+0x18>)
 8008710:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008712:	bf00      	nop
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	24004cfc 	.word	0x24004cfc

08008720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800872e:	4b42      	ldr	r3, [pc, #264]	; (8008838 <xTaskResumeAll+0x118>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <xTaskResumeAll+0x2c>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800874c:	f7fe feea 	bl	8007524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008750:	4b39      	ldr	r3, [pc, #228]	; (8008838 <xTaskResumeAll+0x118>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	4a38      	ldr	r2, [pc, #224]	; (8008838 <xTaskResumeAll+0x118>)
 8008758:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800875a:	4b37      	ldr	r3, [pc, #220]	; (8008838 <xTaskResumeAll+0x118>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d162      	bne.n	8008828 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008762:	4b36      	ldr	r3, [pc, #216]	; (800883c <xTaskResumeAll+0x11c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d05e      	beq.n	8008828 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800876a:	e02f      	b.n	80087cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800876c:	4b34      	ldr	r3, [pc, #208]	; (8008840 <xTaskResumeAll+0x120>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3318      	adds	r3, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe fd7b 	bl	8007274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3304      	adds	r3, #4
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fd76 	bl	8007274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <xTaskResumeAll+0x124>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <xTaskResumeAll+0x7c>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <xTaskResumeAll+0x124>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a27      	ldr	r2, [pc, #156]	; (8008848 <xTaskResumeAll+0x128>)
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fe fd01 	bl	80071ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	4b23      	ldr	r3, [pc, #140]	; (800884c <xTaskResumeAll+0x12c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d302      	bcc.n	80087cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087c6:	4b22      	ldr	r3, [pc, #136]	; (8008850 <xTaskResumeAll+0x130>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087cc:	4b1c      	ldr	r3, [pc, #112]	; (8008840 <xTaskResumeAll+0x120>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1cb      	bne.n	800876c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087da:	f000 fb5f 	bl	8008e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087de:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <xTaskResumeAll+0x134>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d010      	beq.n	800880c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087ea:	f000 f847 	bl	800887c <xTaskIncrementTick>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80087f4:	4b16      	ldr	r3, [pc, #88]	; (8008850 <xTaskResumeAll+0x130>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f1      	bne.n	80087ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008806:	4b13      	ldr	r3, [pc, #76]	; (8008854 <xTaskResumeAll+0x134>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <xTaskResumeAll+0x130>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <xTaskResumeAll+0x138>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008828:	f7fe feac 	bl	8007584 <vPortExitCritical>

	return xAlreadyYielded;
 800882c:	68bb      	ldr	r3, [r7, #8]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	24004cfc 	.word	0x24004cfc
 800883c:	24004cd4 	.word	0x24004cd4
 8008840:	24004c94 	.word	0x24004c94
 8008844:	24004cdc 	.word	0x24004cdc
 8008848:	24004804 	.word	0x24004804
 800884c:	24004800 	.word	0x24004800
 8008850:	24004ce8 	.word	0x24004ce8
 8008854:	24004ce4 	.word	0x24004ce4
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <xTaskGetTickCount+0x1c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008868:	687b      	ldr	r3, [r7, #4]
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	24004cd8 	.word	0x24004cd8

0800887c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008886:	4b4f      	ldr	r3, [pc, #316]	; (80089c4 <xTaskIncrementTick+0x148>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 808f 	bne.w	80089ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008890:	4b4d      	ldr	r3, [pc, #308]	; (80089c8 <xTaskIncrementTick+0x14c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008898:	4a4b      	ldr	r2, [pc, #300]	; (80089c8 <xTaskIncrementTick+0x14c>)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d120      	bne.n	80088e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088a4:	4b49      	ldr	r3, [pc, #292]	; (80089cc <xTaskIncrementTick+0x150>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <xTaskIncrementTick+0x46>
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <xTaskIncrementTick+0x150>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a3f      	ldr	r2, [pc, #252]	; (80089cc <xTaskIncrementTick+0x150>)
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a3d      	ldr	r2, [pc, #244]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f000 fadb 	bl	8008e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088e6:	4b3c      	ldr	r3, [pc, #240]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d349      	bcc.n	8008984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f0:	4b36      	ldr	r3, [pc, #216]	; (80089cc <xTaskIncrementTick+0x150>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fa:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	601a      	str	r2, [r3, #0]
					break;
 8008902:	e03f      	b.n	8008984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <xTaskIncrementTick+0x150>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d203      	bcs.n	8008924 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800891c:	4a2e      	ldr	r2, [pc, #184]	; (80089d8 <xTaskIncrementTick+0x15c>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008922:	e02f      	b.n	8008984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fca3 	bl	8007274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3318      	adds	r3, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fc9a 	bl	8007274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4b25      	ldr	r3, [pc, #148]	; (80089dc <xTaskIncrementTick+0x160>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <xTaskIncrementTick+0xd8>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <xTaskIncrementTick+0x160>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <xTaskIncrementTick+0x164>)
 8008962:	441a      	add	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fc25 	bl	80071ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b8      	bcc.n	80088f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008982:	e7b5      	b.n	80088f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008984:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4915      	ldr	r1, [pc, #84]	; (80089e0 <xTaskIncrementTick+0x164>)
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d901      	bls.n	80089a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <xTaskIncrementTick+0x16c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e004      	b.n	80089b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <xTaskIncrementTick+0x170>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <xTaskIncrementTick+0x170>)
 80089b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089b8:	697b      	ldr	r3, [r7, #20]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	24004cfc 	.word	0x24004cfc
 80089c8:	24004cd8 	.word	0x24004cd8
 80089cc:	24004c8c 	.word	0x24004c8c
 80089d0:	24004c90 	.word	0x24004c90
 80089d4:	24004cec 	.word	0x24004cec
 80089d8:	24004cf4 	.word	0x24004cf4
 80089dc:	24004cdc 	.word	0x24004cdc
 80089e0:	24004804 	.word	0x24004804
 80089e4:	24004800 	.word	0x24004800
 80089e8:	24004ce8 	.word	0x24004ce8
 80089ec:	24004ce4 	.word	0x24004ce4

080089f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <vTaskSwitchContext+0xb0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089fe:	4b29      	ldr	r3, [pc, #164]	; (8008aa4 <vTaskSwitchContext+0xb4>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a04:	e046      	b.n	8008a94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a06:	4b27      	ldr	r3, [pc, #156]	; (8008aa4 <vTaskSwitchContext+0xb4>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0c:	4b26      	ldr	r3, [pc, #152]	; (8008aa8 <vTaskSwitchContext+0xb8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e010      	b.n	8008a36 <vTaskSwitchContext+0x46>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	607b      	str	r3, [r7, #4]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vTaskSwitchContext+0x3e>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	491d      	ldr	r1, [pc, #116]	; (8008aac <vTaskSwitchContext+0xbc>)
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0e4      	beq.n	8008a14 <vTaskSwitchContext+0x24>
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4a15      	ldr	r2, [pc, #84]	; (8008aac <vTaskSwitchContext+0xbc>)
 8008a56:	4413      	add	r3, r2
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	605a      	str	r2, [r3, #4]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d104      	bne.n	8008a7a <vTaskSwitchContext+0x8a>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <vTaskSwitchContext+0xc0>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <vTaskSwitchContext+0xb8>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <vTaskSwitchContext+0xc0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3354      	adds	r3, #84	; 0x54
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <vTaskSwitchContext+0xc4>)
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	24004cfc 	.word	0x24004cfc
 8008aa4:	24004ce8 	.word	0x24004ce8
 8008aa8:	24004cdc 	.word	0x24004cdc
 8008aac:	24004804 	.word	0x24004804
 8008ab0:	24004800 	.word	0x24004800
 8008ab4:	2400006c 	.word	0x2400006c

08008ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60fb      	str	r3, [r7, #12]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <vTaskPlaceOnEventList+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe fb8b 	bl	8007202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aec:	2101      	movs	r1, #1
 8008aee:	6838      	ldr	r0, [r7, #0]
 8008af0:	f000 fa80 	bl	8008ff4 <prvAddCurrentTaskToDelayedList>
}
 8008af4:	bf00      	nop
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	24004800 	.word	0x24004800

08008b00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	617b      	str	r3, [r7, #20]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b28:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3318      	adds	r3, #24
 8008b2e:	4619      	mov	r1, r3
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7fe fb42 	bl	80071ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	68b8      	ldr	r0, [r7, #8]
 8008b46:	f000 fa55 	bl	8008ff4 <prvAddCurrentTaskToDelayedList>
	}
 8008b4a:	bf00      	nop
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	24004800 	.word	0x24004800

08008b58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60fb      	str	r3, [r7, #12]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	3318      	adds	r3, #24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fb73 	bl	8007274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <xTaskRemoveFromEventList+0xb0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d11d      	bne.n	8008bd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fb6a 	bl	8007274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <xTaskRemoveFromEventList+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d903      	bls.n	8008bb4 <xTaskRemoveFromEventList+0x5c>
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	4a16      	ldr	r2, [pc, #88]	; (8008c0c <xTaskRemoveFromEventList+0xb4>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <xTaskRemoveFromEventList+0xb8>)
 8008bc2:	441a      	add	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7fe faf5 	bl	80071ba <vListInsertEnd>
 8008bd0:	e005      	b.n	8008bde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	480e      	ldr	r0, [pc, #56]	; (8008c14 <xTaskRemoveFromEventList+0xbc>)
 8008bda:	f7fe faee 	bl	80071ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <xTaskRemoveFromEventList+0xc0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d905      	bls.n	8008bf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <xTaskRemoveFromEventList+0xc4>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	e001      	b.n	8008bfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bfc:	697b      	ldr	r3, [r7, #20]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	24004cfc 	.word	0x24004cfc
 8008c0c:	24004cdc 	.word	0x24004cdc
 8008c10:	24004804 	.word	0x24004804
 8008c14:	24004c94 	.word	0x24004c94
 8008c18:	24004800 	.word	0x24004800
 8008c1c:	24004ce8 	.word	0x24004ce8

08008c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <vTaskInternalSetTimeOutState+0x24>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <vTaskInternalSetTimeOutState+0x28>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	605a      	str	r2, [r3, #4]
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	24004cec 	.word	0x24004cec
 8008c48:	24004cd8 	.word	0x24004cd8

08008c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	613b      	str	r3, [r7, #16]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c8e:	f7fe fc49 	bl	8007524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <xTaskCheckForTimeOut+0xbc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d102      	bne.n	8008cb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e023      	b.n	8008cfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <xTaskCheckForTimeOut+0xc0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d007      	beq.n	8008cce <xTaskCheckForTimeOut+0x82>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e015      	b.n	8008cfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d20b      	bcs.n	8008cf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff ff9b 	bl	8008c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e004      	b.n	8008cfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cfa:	f7fe fc43 	bl	8007584 <vPortExitCritical>

	return xReturn;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	24004cd8 	.word	0x24004cd8
 8008d0c:	24004cec 	.word	0x24004cec

08008d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d14:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <vTaskMissedYield+0x14>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	24004ce8 	.word	0x24004ce8

08008d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d30:	f000 f852 	bl	8008dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <prvIdleTask+0x28>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d9f9      	bls.n	8008d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <prvIdleTask+0x2c>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d4c:	e7f0      	b.n	8008d30 <prvIdleTask+0x8>
 8008d4e:	bf00      	nop
 8008d50:	24004804 	.word	0x24004804
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	e00c      	b.n	8008d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a12      	ldr	r2, [pc, #72]	; (8008db8 <prvInitialiseTaskLists+0x60>)
 8008d70:	4413      	add	r3, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe f9f4 	bl	8007160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b37      	cmp	r3, #55	; 0x37
 8008d82:	d9ef      	bls.n	8008d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d84:	480d      	ldr	r0, [pc, #52]	; (8008dbc <prvInitialiseTaskLists+0x64>)
 8008d86:	f7fe f9eb 	bl	8007160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d8a:	480d      	ldr	r0, [pc, #52]	; (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008d8c:	f7fe f9e8 	bl	8007160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d90:	480c      	ldr	r0, [pc, #48]	; (8008dc4 <prvInitialiseTaskLists+0x6c>)
 8008d92:	f7fe f9e5 	bl	8007160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d96:	480c      	ldr	r0, [pc, #48]	; (8008dc8 <prvInitialiseTaskLists+0x70>)
 8008d98:	f7fe f9e2 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d9c:	480b      	ldr	r0, [pc, #44]	; (8008dcc <prvInitialiseTaskLists+0x74>)
 8008d9e:	f7fe f9df 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <prvInitialiseTaskLists+0x78>)
 8008da4:	4a05      	ldr	r2, [pc, #20]	; (8008dbc <prvInitialiseTaskLists+0x64>)
 8008da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvInitialiseTaskLists+0x7c>)
 8008daa:	4a05      	ldr	r2, [pc, #20]	; (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008dac:	601a      	str	r2, [r3, #0]
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	24004804 	.word	0x24004804
 8008dbc:	24004c64 	.word	0x24004c64
 8008dc0:	24004c78 	.word	0x24004c78
 8008dc4:	24004c94 	.word	0x24004c94
 8008dc8:	24004ca8 	.word	0x24004ca8
 8008dcc:	24004cc0 	.word	0x24004cc0
 8008dd0:	24004c8c 	.word	0x24004c8c
 8008dd4:	24004c90 	.word	0x24004c90

08008dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dde:	e019      	b.n	8008e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008de0:	f7fe fba0 	bl	8007524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <prvCheckTasksWaitingTermination+0x50>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fa3f 	bl	8007274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008df6:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a0b      	ldr	r2, [pc, #44]	; (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4a0a      	ldr	r2, [pc, #40]	; (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e0a:	f7fe fbbb 	bl	8007584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f810 	bl	8008e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e1      	bne.n	8008de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	24004ca8 	.word	0x24004ca8
 8008e2c:	24004cd4 	.word	0x24004cd4
 8008e30:	24004cbc 	.word	0x24004cbc

08008e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3354      	adds	r3, #84	; 0x54
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 fa69 	bl	800a318 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d108      	bne.n	8008e62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe f865 	bl	8006f24 <vPortFree>
				vPortFree( pxTCB );
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fe f862 	bl	8006f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e60:	e018      	b.n	8008e94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d103      	bne.n	8008e74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7fe f859 	bl	8006f24 <vPortFree>
	}
 8008e72:	e00f      	b.n	8008e94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d00a      	beq.n	8008e94 <prvDeleteTCB+0x60>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60fb      	str	r3, [r7, #12]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <prvDeleteTCB+0x5e>
	}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea2:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <prvResetNextTaskUnblockTime+0x38>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eb4:	e008      	b.n	8008ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <prvResetNextTaskUnblockTime+0x38>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a04      	ldr	r2, [pc, #16]	; (8008ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ec6:	6013      	str	r3, [r2, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	24004c8c 	.word	0x24004c8c
 8008ed8:	24004cf4 	.word	0x24004cf4

08008edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <xTaskGetSchedulerState+0x34>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008eea:	2301      	movs	r3, #1
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	e008      	b.n	8008f02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef0:	4b08      	ldr	r3, [pc, #32]	; (8008f14 <xTaskGetSchedulerState+0x38>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	607b      	str	r3, [r7, #4]
 8008efc:	e001      	b.n	8008f02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f02:	687b      	ldr	r3, [r7, #4]
	}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	24004ce0 	.word	0x24004ce0
 8008f14:	24004cfc 	.word	0x24004cfc

08008f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d056      	beq.n	8008fdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f2e:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <xTaskPriorityDisinherit+0xd0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d00a      	beq.n	8008f4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	60fb      	str	r3, [r7, #12]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d02c      	beq.n	8008fdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d128      	bne.n	8008fdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe f970 	bl	8007274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <xTaskPriorityDisinherit+0xd4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d903      	bls.n	8008fbc <xTaskPriorityDisinherit+0xa4>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4a0c      	ldr	r2, [pc, #48]	; (8008fec <xTaskPriorityDisinherit+0xd4>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <xTaskPriorityDisinherit+0xd8>)
 8008fca:	441a      	add	r2, r3
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe f8f1 	bl	80071ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24004800 	.word	0x24004800
 8008fec:	24004cdc 	.word	0x24004cdc
 8008ff0:	24004804 	.word	0x24004804

08008ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ffe:	4b21      	ldr	r3, [pc, #132]	; (8009084 <prvAddCurrentTaskToDelayedList+0x90>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009004:	4b20      	ldr	r3, [pc, #128]	; (8009088 <prvAddCurrentTaskToDelayedList+0x94>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3304      	adds	r3, #4
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f932 	bl	8007274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d10a      	bne.n	800902e <prvAddCurrentTaskToDelayedList+0x3a>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901e:	4b1a      	ldr	r3, [pc, #104]	; (8009088 <prvAddCurrentTaskToDelayedList+0x94>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4819      	ldr	r0, [pc, #100]	; (800908c <prvAddCurrentTaskToDelayedList+0x98>)
 8009028:	f7fe f8c7 	bl	80071ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800902c:	e026      	b.n	800907c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4413      	add	r3, r2
 8009034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <prvAddCurrentTaskToDelayedList+0x94>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	429a      	cmp	r2, r3
 8009044:	d209      	bcs.n	800905a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7fe f8d5 	bl	8007202 <vListInsert>
}
 8009058:	e010      	b.n	800907c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <prvAddCurrentTaskToDelayedList+0x94>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fe f8cb 	bl	8007202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	d202      	bcs.n	800907c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009076:	4a08      	ldr	r2, [pc, #32]	; (8009098 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	24004cd8 	.word	0x24004cd8
 8009088:	24004800 	.word	0x24004800
 800908c:	24004cc0 	.word	0x24004cc0
 8009090:	24004c90 	.word	0x24004c90
 8009094:	24004c8c 	.word	0x24004c8c
 8009098:	24004cf4 	.word	0x24004cf4

0800909c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	; 0x28
 80090a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090a6:	f000 fb07 	bl	80096b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090aa:	4b1c      	ldr	r3, [pc, #112]	; (800911c <xTimerCreateTimerTask+0x80>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d021      	beq.n	80090f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ba:	1d3a      	adds	r2, r7, #4
 80090bc:	f107 0108 	add.w	r1, r7, #8
 80090c0:	f107 030c 	add.w	r3, r7, #12
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd fe47 	bl	8006d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	9202      	str	r2, [sp, #8]
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	2302      	movs	r3, #2
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2300      	movs	r3, #0
 80090da:	460a      	mov	r2, r1
 80090dc:	4910      	ldr	r1, [pc, #64]	; (8009120 <xTimerCreateTimerTask+0x84>)
 80090de:	4811      	ldr	r0, [pc, #68]	; (8009124 <xTimerCreateTimerTask+0x88>)
 80090e0:	f7ff f8b4 	bl	800824c <xTaskCreateStatic>
 80090e4:	4603      	mov	r3, r0
 80090e6:	4a10      	ldr	r2, [pc, #64]	; (8009128 <xTimerCreateTimerTask+0x8c>)
 80090e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090ea:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <xTimerCreateTimerTask+0x8c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090f2:	2301      	movs	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	613b      	str	r3, [r7, #16]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009112:	697b      	ldr	r3, [r7, #20]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	24004d30 	.word	0x24004d30
 8009120:	0800c108 	.word	0x0800c108
 8009124:	08009261 	.word	0x08009261
 8009128:	24004d34 	.word	0x24004d34

0800912c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08a      	sub	sp, #40	; 0x28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	623b      	str	r3, [r7, #32]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800915a:	4b1a      	ldr	r3, [pc, #104]	; (80091c4 <xTimerGenericCommand+0x98>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02a      	beq.n	80091b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b05      	cmp	r3, #5
 8009172:	dc18      	bgt.n	80091a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009174:	f7ff feb2 	bl	8008edc <xTaskGetSchedulerState>
 8009178:	4603      	mov	r3, r0
 800917a:	2b02      	cmp	r3, #2
 800917c:	d109      	bne.n	8009192 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <xTimerGenericCommand+0x98>)
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f107 0110 	add.w	r1, r7, #16
 8009186:	2300      	movs	r3, #0
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	f7fe fc77 	bl	8007a7c <xQueueGenericSend>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24
 8009190:	e012      	b.n	80091b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <xTimerGenericCommand+0x98>)
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f107 0110 	add.w	r1, r7, #16
 800919a:	2300      	movs	r3, #0
 800919c:	2200      	movs	r2, #0
 800919e:	f7fe fc6d 	bl	8007a7c <xQueueGenericSend>
 80091a2:	6278      	str	r0, [r7, #36]	; 0x24
 80091a4:	e008      	b.n	80091b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091a6:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <xTimerGenericCommand+0x98>)
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f107 0110 	add.w	r1, r7, #16
 80091ae:	2300      	movs	r3, #0
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	f7fe fd61 	bl	8007c78 <xQueueGenericSendFromISR>
 80091b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	24004d30 	.word	0x24004d30

080091c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b22      	ldr	r3, [pc, #136]	; (800925c <prvProcessExpiredTimer+0x94>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	3304      	adds	r3, #4
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe f847 	bl	8007274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d022      	beq.n	800923a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	18d1      	adds	r1, r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f000 f8d1 	bl	80093a8 <prvInsertTimerInActiveList>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01f      	beq.n	800924c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	2300      	movs	r3, #0
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	2100      	movs	r1, #0
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f7ff ff88 	bl	800912c <xTimerGenericCommand>
 800921c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d113      	bne.n	800924c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	b2da      	uxtb	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	6978      	ldr	r0, [r7, #20]
 8009252:	4798      	blx	r3
}
 8009254:	bf00      	nop
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	24004d28 	.word	0x24004d28

08009260 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f857 	bl	8009320 <prvGetNextExpireTime>
 8009272:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f803 	bl	8009284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800927e:	f000 f8d5 	bl	800942c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009282:	e7f1      	b.n	8009268 <prvTimerTask+0x8>

08009284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800928e:	f7ff fa39 	bl	8008704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4618      	mov	r0, r3
 8009298:	f000 f866 	bl	8009368 <prvSampleTimeNow>
 800929c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d130      	bne.n	8009306 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <prvProcessTimerOrBlockTask+0x3c>
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d806      	bhi.n	80092c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092b2:	f7ff fa35 	bl	8008720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff ff85 	bl	80091c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092be:	e024      	b.n	800930a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d008      	beq.n	80092d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092c6:	4b13      	ldr	r3, [pc, #76]	; (8009314 <prvProcessTimerOrBlockTask+0x90>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <prvProcessTimerOrBlockTask+0x50>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <prvProcessTimerOrBlockTask+0x52>
 80092d4:	2300      	movs	r3, #0
 80092d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092d8:	4b0f      	ldr	r3, [pc, #60]	; (8009318 <prvProcessTimerOrBlockTask+0x94>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f7fe ff7d 	bl	80081e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092ea:	f7ff fa19 	bl	8008720 <xTaskResumeAll>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092f4:	4b09      	ldr	r3, [pc, #36]	; (800931c <prvProcessTimerOrBlockTask+0x98>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
}
 8009304:	e001      	b.n	800930a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009306:	f7ff fa0b 	bl	8008720 <xTaskResumeAll>
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	24004d2c 	.word	0x24004d2c
 8009318:	24004d30 	.word	0x24004d30
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <prvGetNextExpireTime+0x44>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <prvGetNextExpireTime+0x16>
 8009332:	2201      	movs	r2, #1
 8009334:	e000      	b.n	8009338 <prvGetNextExpireTime+0x18>
 8009336:	2200      	movs	r2, #0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <prvGetNextExpireTime+0x44>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	e001      	b.n	8009354 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	24004d28 	.word	0x24004d28

08009368 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009370:	f7ff fa74 	bl	800885c <xTaskGetTickCount>
 8009374:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <prvSampleTimeNow+0x3c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	429a      	cmp	r2, r3
 800937e:	d205      	bcs.n	800938c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009380:	f000 f936 	bl	80095f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e002      	b.n	8009392 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009392:	4a04      	ldr	r2, [pc, #16]	; (80093a4 <prvSampleTimeNow+0x3c>)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	24004d38 	.word	0x24004d38

080093a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d812      	bhi.n	80093f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093dc:	2301      	movs	r3, #1
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	e01b      	b.n	800941a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <prvInsertTimerInActiveList+0x7c>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f7fd ff08 	bl	8007202 <vListInsert>
 80093f2:	e012      	b.n	800941a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d206      	bcs.n	800940a <prvInsertTimerInActiveList+0x62>
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d302      	bcc.n	800940a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e007      	b.n	800941a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800940a:	4b07      	ldr	r3, [pc, #28]	; (8009428 <prvInsertTimerInActiveList+0x80>)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fd fef4 	bl	8007202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800941a:	697b      	ldr	r3, [r7, #20]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	24004d2c 	.word	0x24004d2c
 8009428:	24004d28 	.word	0x24004d28

0800942c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08e      	sub	sp, #56	; 0x38
 8009430:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009432:	e0ca      	b.n	80095ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	da18      	bge.n	800946c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800943a:	1d3b      	adds	r3, r7, #4
 800943c:	3304      	adds	r3, #4
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	61fb      	str	r3, [r7, #28]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009462:	6850      	ldr	r0, [r2, #4]
 8009464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009466:	6892      	ldr	r2, [r2, #8]
 8009468:	4611      	mov	r1, r2
 800946a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f2c0 80ab 	blt.w	80095ca <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7fd fef5 	bl	8007274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800948a:	463b      	mov	r3, r7
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff ff6b 	bl	8009368 <prvSampleTimeNow>
 8009492:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b09      	cmp	r3, #9
 8009498:	f200 8096 	bhi.w	80095c8 <prvProcessReceivedCommands+0x19c>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <prvProcessReceivedCommands+0x78>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094cd 	.word	0x080094cd
 80094a8:	080094cd 	.word	0x080094cd
 80094ac:	080094cd 	.word	0x080094cd
 80094b0:	08009541 	.word	0x08009541
 80094b4:	08009555 	.word	0x08009555
 80094b8:	0800959f 	.word	0x0800959f
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	080094cd 	.word	0x080094cd
 80094c4:	08009541 	.word	0x08009541
 80094c8:	08009555 	.word	0x08009555
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d2:	f043 0301 	orr.w	r3, r3, #1
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	18d1      	adds	r1, r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ec:	f7ff ff5c 	bl	80093a8 <prvInsertTimerInActiveList>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d069      	beq.n	80095ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d05e      	beq.n	80095ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	441a      	add	r2, r3
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	2100      	movs	r1, #0
 800951c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951e:	f7ff fe05 	bl	800912c <xTimerGenericCommand>
 8009522:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d14f      	bne.n	80095ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	61bb      	str	r3, [r7, #24]
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009546:	f023 0301 	bic.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009552:	e03a      	b.n	80095ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	617b      	str	r3, [r7, #20]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	18d1      	adds	r1, r2, r3
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009598:	f7ff ff06 	bl	80093a8 <prvInsertTimerInActiveList>
					break;
 800959c:	e015      	b.n	80095ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ae:	f7fd fcb9 	bl	8006f24 <vPortFree>
 80095b2:	e00a      	b.n	80095ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095c6:	e000      	b.n	80095ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80095c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ca:	4b08      	ldr	r3, [pc, #32]	; (80095ec <prvProcessReceivedCommands+0x1c0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	1d39      	adds	r1, r7, #4
 80095d0:	2200      	movs	r2, #0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fbec 	bl	8007db0 <xQueueReceive>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f47f af2a 	bne.w	8009434 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	3730      	adds	r7, #48	; 0x30
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	24004d30 	.word	0x24004d30

080095f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095f6:	e048      	b.n	800968a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095f8:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009602:	4b2b      	ldr	r3, [pc, #172]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3304      	adds	r3, #4
 8009610:	4618      	mov	r0, r3
 8009612:	f7fd fe2f 	bl	8007274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d02e      	beq.n	800968a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4413      	add	r3, r2
 8009634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	429a      	cmp	r2, r3
 800963c:	d90e      	bls.n	800965c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800964a:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fd fdd4 	bl	8007202 <vListInsert>
 800965a:	e016      	b.n	800968a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	2100      	movs	r1, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7ff fd60 	bl	800912c <xTimerGenericCommand>
 800966c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	603b      	str	r3, [r7, #0]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1b1      	bne.n	80095f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009694:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <prvSwitchTimerLists+0xc4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a04      	ldr	r2, [pc, #16]	; (80096b0 <prvSwitchTimerLists+0xc0>)
 80096a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096a2:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <prvSwitchTimerLists+0xc4>)
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	6013      	str	r3, [r2, #0]
}
 80096a8:	bf00      	nop
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	24004d28 	.word	0x24004d28
 80096b4:	24004d2c 	.word	0x24004d2c

080096b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096be:	f7fd ff31 	bl	8007524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <prvCheckForValidListAndQueue+0x60>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d120      	bne.n	800970c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096ca:	4814      	ldr	r0, [pc, #80]	; (800971c <prvCheckForValidListAndQueue+0x64>)
 80096cc:	f7fd fd48 	bl	8007160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096d0:	4813      	ldr	r0, [pc, #76]	; (8009720 <prvCheckForValidListAndQueue+0x68>)
 80096d2:	f7fd fd45 	bl	8007160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <prvCheckForValidListAndQueue+0x6c>)
 80096d8:	4a10      	ldr	r2, [pc, #64]	; (800971c <prvCheckForValidListAndQueue+0x64>)
 80096da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096dc:	4b12      	ldr	r3, [pc, #72]	; (8009728 <prvCheckForValidListAndQueue+0x70>)
 80096de:	4a10      	ldr	r2, [pc, #64]	; (8009720 <prvCheckForValidListAndQueue+0x68>)
 80096e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096e2:	2300      	movs	r3, #0
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <prvCheckForValidListAndQueue+0x74>)
 80096e8:	4a11      	ldr	r2, [pc, #68]	; (8009730 <prvCheckForValidListAndQueue+0x78>)
 80096ea:	2110      	movs	r1, #16
 80096ec:	200a      	movs	r0, #10
 80096ee:	f7fe f8a3 	bl	8007838 <xQueueGenericCreateStatic>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4a08      	ldr	r2, [pc, #32]	; (8009718 <prvCheckForValidListAndQueue+0x60>)
 80096f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <prvCheckForValidListAndQueue+0x60>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <prvCheckForValidListAndQueue+0x60>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	490b      	ldr	r1, [pc, #44]	; (8009734 <prvCheckForValidListAndQueue+0x7c>)
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fd42 	bl	8008190 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800970c:	f7fd ff3a 	bl	8007584 <vPortExitCritical>
}
 8009710:	bf00      	nop
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	24004d30 	.word	0x24004d30
 800971c:	24004d00 	.word	0x24004d00
 8009720:	24004d14 	.word	0x24004d14
 8009724:	24004d28 	.word	0x24004d28
 8009728:	24004d2c 	.word	0x24004d2c
 800972c:	24004ddc 	.word	0x24004ddc
 8009730:	24004d3c 	.word	0x24004d3c
 8009734:	0800c110 	.word	0x0800c110

08009738 <__cvt>:
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	ed2d 8b02 	vpush	{d8}
 800973e:	eeb0 8b40 	vmov.f64	d8, d0
 8009742:	b085      	sub	sp, #20
 8009744:	4617      	mov	r7, r2
 8009746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009748:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800974a:	ee18 2a90 	vmov	r2, s17
 800974e:	f025 0520 	bic.w	r5, r5, #32
 8009752:	2a00      	cmp	r2, #0
 8009754:	bfb6      	itet	lt
 8009756:	222d      	movlt	r2, #45	; 0x2d
 8009758:	2200      	movge	r2, #0
 800975a:	eeb1 8b40 	vneglt.f64	d8, d0
 800975e:	2d46      	cmp	r5, #70	; 0x46
 8009760:	460c      	mov	r4, r1
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	d004      	beq.n	8009770 <__cvt+0x38>
 8009766:	2d45      	cmp	r5, #69	; 0x45
 8009768:	d100      	bne.n	800976c <__cvt+0x34>
 800976a:	3401      	adds	r4, #1
 800976c:	2102      	movs	r1, #2
 800976e:	e000      	b.n	8009772 <__cvt+0x3a>
 8009770:	2103      	movs	r1, #3
 8009772:	ab03      	add	r3, sp, #12
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	ab02      	add	r3, sp, #8
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	4622      	mov	r2, r4
 800977c:	4633      	mov	r3, r6
 800977e:	eeb0 0b48 	vmov.f64	d0, d8
 8009782:	f000 ff19 	bl	800a5b8 <_dtoa_r>
 8009786:	2d47      	cmp	r5, #71	; 0x47
 8009788:	d101      	bne.n	800978e <__cvt+0x56>
 800978a:	07fb      	lsls	r3, r7, #31
 800978c:	d51a      	bpl.n	80097c4 <__cvt+0x8c>
 800978e:	2d46      	cmp	r5, #70	; 0x46
 8009790:	eb00 0204 	add.w	r2, r0, r4
 8009794:	d10c      	bne.n	80097b0 <__cvt+0x78>
 8009796:	7803      	ldrb	r3, [r0, #0]
 8009798:	2b30      	cmp	r3, #48	; 0x30
 800979a:	d107      	bne.n	80097ac <__cvt+0x74>
 800979c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a4:	bf1c      	itt	ne
 80097a6:	f1c4 0401 	rsbne	r4, r4, #1
 80097aa:	6034      	strne	r4, [r6, #0]
 80097ac:	6833      	ldr	r3, [r6, #0]
 80097ae:	441a      	add	r2, r3
 80097b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	bf08      	it	eq
 80097ba:	9203      	streq	r2, [sp, #12]
 80097bc:	2130      	movs	r1, #48	; 0x30
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d307      	bcc.n	80097d4 <__cvt+0x9c>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097c8:	1a1b      	subs	r3, r3, r0
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	b005      	add	sp, #20
 80097ce:	ecbd 8b02 	vpop	{d8}
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	1c5c      	adds	r4, r3, #1
 80097d6:	9403      	str	r4, [sp, #12]
 80097d8:	7019      	strb	r1, [r3, #0]
 80097da:	e7f0      	b.n	80097be <__cvt+0x86>

080097dc <__exponent>:
 80097dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097de:	4603      	mov	r3, r0
 80097e0:	2900      	cmp	r1, #0
 80097e2:	bfb8      	it	lt
 80097e4:	4249      	neglt	r1, r1
 80097e6:	f803 2b02 	strb.w	r2, [r3], #2
 80097ea:	bfb4      	ite	lt
 80097ec:	222d      	movlt	r2, #45	; 0x2d
 80097ee:	222b      	movge	r2, #43	; 0x2b
 80097f0:	2909      	cmp	r1, #9
 80097f2:	7042      	strb	r2, [r0, #1]
 80097f4:	dd2a      	ble.n	800984c <__exponent+0x70>
 80097f6:	f10d 0207 	add.w	r2, sp, #7
 80097fa:	4617      	mov	r7, r2
 80097fc:	260a      	movs	r6, #10
 80097fe:	4694      	mov	ip, r2
 8009800:	fb91 f5f6 	sdiv	r5, r1, r6
 8009804:	fb06 1415 	mls	r4, r6, r5, r1
 8009808:	3430      	adds	r4, #48	; 0x30
 800980a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800980e:	460c      	mov	r4, r1
 8009810:	2c63      	cmp	r4, #99	; 0x63
 8009812:	f102 32ff 	add.w	r2, r2, #4294967295
 8009816:	4629      	mov	r1, r5
 8009818:	dcf1      	bgt.n	80097fe <__exponent+0x22>
 800981a:	3130      	adds	r1, #48	; 0x30
 800981c:	f1ac 0402 	sub.w	r4, ip, #2
 8009820:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009824:	1c41      	adds	r1, r0, #1
 8009826:	4622      	mov	r2, r4
 8009828:	42ba      	cmp	r2, r7
 800982a:	d30a      	bcc.n	8009842 <__exponent+0x66>
 800982c:	f10d 0209 	add.w	r2, sp, #9
 8009830:	eba2 020c 	sub.w	r2, r2, ip
 8009834:	42bc      	cmp	r4, r7
 8009836:	bf88      	it	hi
 8009838:	2200      	movhi	r2, #0
 800983a:	4413      	add	r3, r2
 800983c:	1a18      	subs	r0, r3, r0
 800983e:	b003      	add	sp, #12
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009842:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009846:	f801 5f01 	strb.w	r5, [r1, #1]!
 800984a:	e7ed      	b.n	8009828 <__exponent+0x4c>
 800984c:	2330      	movs	r3, #48	; 0x30
 800984e:	3130      	adds	r1, #48	; 0x30
 8009850:	7083      	strb	r3, [r0, #2]
 8009852:	70c1      	strb	r1, [r0, #3]
 8009854:	1d03      	adds	r3, r0, #4
 8009856:	e7f1      	b.n	800983c <__exponent+0x60>

08009858 <_printf_float>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	b08b      	sub	sp, #44	; 0x2c
 800985e:	460c      	mov	r4, r1
 8009860:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009864:	4616      	mov	r6, r2
 8009866:	461f      	mov	r7, r3
 8009868:	4605      	mov	r5, r0
 800986a:	f000 fd41 	bl	800a2f0 <_localeconv_r>
 800986e:	f8d0 b000 	ldr.w	fp, [r0]
 8009872:	4658      	mov	r0, fp
 8009874:	f7f6 fd84 	bl	8000380 <strlen>
 8009878:	2300      	movs	r3, #0
 800987a:	9308      	str	r3, [sp, #32]
 800987c:	f8d8 3000 	ldr.w	r3, [r8]
 8009880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	3307      	adds	r3, #7
 8009888:	f023 0307 	bic.w	r3, r3, #7
 800988c:	f103 0108 	add.w	r1, r3, #8
 8009890:	f8c8 1000 	str.w	r1, [r8]
 8009894:	ed93 0b00 	vldr	d0, [r3]
 8009898:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009af8 <_printf_float+0x2a0>
 800989c:	eeb0 7bc0 	vabs.f64	d7, d0
 80098a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80098a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80098ac:	4682      	mov	sl, r0
 80098ae:	dd24      	ble.n	80098fa <_printf_float+0xa2>
 80098b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80098b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b8:	d502      	bpl.n	80098c0 <_printf_float+0x68>
 80098ba:	232d      	movs	r3, #45	; 0x2d
 80098bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098c0:	498f      	ldr	r1, [pc, #572]	; (8009b00 <_printf_float+0x2a8>)
 80098c2:	4b90      	ldr	r3, [pc, #576]	; (8009b04 <_printf_float+0x2ac>)
 80098c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80098c8:	bf94      	ite	ls
 80098ca:	4688      	movls	r8, r1
 80098cc:	4698      	movhi	r8, r3
 80098ce:	2303      	movs	r3, #3
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	f022 0204 	bic.w	r2, r2, #4
 80098d6:	2300      	movs	r3, #0
 80098d8:	6022      	str	r2, [r4, #0]
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	9700      	str	r7, [sp, #0]
 80098de:	4633      	mov	r3, r6
 80098e0:	aa09      	add	r2, sp, #36	; 0x24
 80098e2:	4621      	mov	r1, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f9d1 	bl	8009c8c <_printf_common>
 80098ea:	3001      	adds	r0, #1
 80098ec:	f040 808a 	bne.w	8009a04 <_printf_float+0x1ac>
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	b00b      	add	sp, #44	; 0x2c
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80098fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009902:	d709      	bvc.n	8009918 <_printf_float+0xc0>
 8009904:	ee10 3a90 	vmov	r3, s1
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbc      	itt	lt
 800990c:	232d      	movlt	r3, #45	; 0x2d
 800990e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009912:	497d      	ldr	r1, [pc, #500]	; (8009b08 <_printf_float+0x2b0>)
 8009914:	4b7d      	ldr	r3, [pc, #500]	; (8009b0c <_printf_float+0x2b4>)
 8009916:	e7d5      	b.n	80098c4 <_printf_float+0x6c>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800991e:	9104      	str	r1, [sp, #16]
 8009920:	1c59      	adds	r1, r3, #1
 8009922:	d13c      	bne.n	800999e <_printf_float+0x146>
 8009924:	2306      	movs	r3, #6
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	2300      	movs	r3, #0
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	ab08      	add	r3, sp, #32
 800992e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009936:	ab07      	add	r3, sp, #28
 8009938:	6861      	ldr	r1, [r4, #4]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	f10d 031b 	add.w	r3, sp, #27
 8009942:	4628      	mov	r0, r5
 8009944:	f7ff fef8 	bl	8009738 <__cvt>
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	9907      	ldr	r1, [sp, #28]
 800994c:	2b47      	cmp	r3, #71	; 0x47
 800994e:	4680      	mov	r8, r0
 8009950:	d108      	bne.n	8009964 <_printf_float+0x10c>
 8009952:	1cc8      	adds	r0, r1, #3
 8009954:	db02      	blt.n	800995c <_printf_float+0x104>
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	4299      	cmp	r1, r3
 800995a:	dd41      	ble.n	80099e0 <_printf_float+0x188>
 800995c:	f1a9 0902 	sub.w	r9, r9, #2
 8009960:	fa5f f989 	uxtb.w	r9, r9
 8009964:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009968:	d820      	bhi.n	80099ac <_printf_float+0x154>
 800996a:	3901      	subs	r1, #1
 800996c:	464a      	mov	r2, r9
 800996e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009972:	9107      	str	r1, [sp, #28]
 8009974:	f7ff ff32 	bl	80097dc <__exponent>
 8009978:	9a08      	ldr	r2, [sp, #32]
 800997a:	9004      	str	r0, [sp, #16]
 800997c:	1813      	adds	r3, r2, r0
 800997e:	2a01      	cmp	r2, #1
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	dc02      	bgt.n	800998a <_printf_float+0x132>
 8009984:	6822      	ldr	r2, [r4, #0]
 8009986:	07d2      	lsls	r2, r2, #31
 8009988:	d501      	bpl.n	800998e <_printf_float+0x136>
 800998a:	3301      	adds	r3, #1
 800998c:	6123      	str	r3, [r4, #16]
 800998e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0a2      	beq.n	80098dc <_printf_float+0x84>
 8009996:	232d      	movs	r3, #45	; 0x2d
 8009998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800999c:	e79e      	b.n	80098dc <_printf_float+0x84>
 800999e:	9904      	ldr	r1, [sp, #16]
 80099a0:	2947      	cmp	r1, #71	; 0x47
 80099a2:	d1c1      	bne.n	8009928 <_printf_float+0xd0>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1bf      	bne.n	8009928 <_printf_float+0xd0>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e7bc      	b.n	8009926 <_printf_float+0xce>
 80099ac:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80099b0:	d118      	bne.n	80099e4 <_printf_float+0x18c>
 80099b2:	2900      	cmp	r1, #0
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	dd0b      	ble.n	80099d0 <_printf_float+0x178>
 80099b8:	6121      	str	r1, [r4, #16]
 80099ba:	b913      	cbnz	r3, 80099c2 <_printf_float+0x16a>
 80099bc:	6822      	ldr	r2, [r4, #0]
 80099be:	07d0      	lsls	r0, r2, #31
 80099c0:	d502      	bpl.n	80099c8 <_printf_float+0x170>
 80099c2:	3301      	adds	r3, #1
 80099c4:	440b      	add	r3, r1
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	2300      	movs	r3, #0
 80099ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	e7de      	b.n	800998e <_printf_float+0x136>
 80099d0:	b913      	cbnz	r3, 80099d8 <_printf_float+0x180>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	07d2      	lsls	r2, r2, #31
 80099d6:	d501      	bpl.n	80099dc <_printf_float+0x184>
 80099d8:	3302      	adds	r3, #2
 80099da:	e7f4      	b.n	80099c6 <_printf_float+0x16e>
 80099dc:	2301      	movs	r3, #1
 80099de:	e7f2      	b.n	80099c6 <_printf_float+0x16e>
 80099e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80099e4:	9b08      	ldr	r3, [sp, #32]
 80099e6:	4299      	cmp	r1, r3
 80099e8:	db05      	blt.n	80099f6 <_printf_float+0x19e>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	6121      	str	r1, [r4, #16]
 80099ee:	07d8      	lsls	r0, r3, #31
 80099f0:	d5ea      	bpl.n	80099c8 <_printf_float+0x170>
 80099f2:	1c4b      	adds	r3, r1, #1
 80099f4:	e7e7      	b.n	80099c6 <_printf_float+0x16e>
 80099f6:	2900      	cmp	r1, #0
 80099f8:	bfd4      	ite	le
 80099fa:	f1c1 0202 	rsble	r2, r1, #2
 80099fe:	2201      	movgt	r2, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	e7e0      	b.n	80099c6 <_printf_float+0x16e>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	055a      	lsls	r2, r3, #21
 8009a08:	d407      	bmi.n	8009a1a <_printf_float+0x1c2>
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	d12a      	bne.n	8009a6e <_printf_float+0x216>
 8009a18:	e76a      	b.n	80098f0 <_printf_float+0x98>
 8009a1a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a1e:	f240 80e0 	bls.w	8009be2 <_printf_float+0x38a>
 8009a22:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	d133      	bne.n	8009a98 <_printf_float+0x240>
 8009a30:	4a37      	ldr	r2, [pc, #220]	; (8009b10 <_printf_float+0x2b8>)
 8009a32:	2301      	movs	r3, #1
 8009a34:	4631      	mov	r1, r6
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f43f af58 	beq.w	80098f0 <_printf_float+0x98>
 8009a40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	db02      	blt.n	8009a4e <_printf_float+0x1f6>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	07d8      	lsls	r0, r3, #31
 8009a4c:	d50f      	bpl.n	8009a6e <_printf_float+0x216>
 8009a4e:	4653      	mov	r3, sl
 8009a50:	465a      	mov	r2, fp
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f af49 	beq.w	80098f0 <_printf_float+0x98>
 8009a5e:	f04f 0800 	mov.w	r8, #0
 8009a62:	f104 091a 	add.w	r9, r4, #26
 8009a66:	9b08      	ldr	r3, [sp, #32]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4543      	cmp	r3, r8
 8009a6c:	dc09      	bgt.n	8009a82 <_printf_float+0x22a>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	079b      	lsls	r3, r3, #30
 8009a72:	f100 8106 	bmi.w	8009c82 <_printf_float+0x42a>
 8009a76:	68e0      	ldr	r0, [r4, #12]
 8009a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7a:	4298      	cmp	r0, r3
 8009a7c:	bfb8      	it	lt
 8009a7e:	4618      	movlt	r0, r3
 8009a80:	e738      	b.n	80098f4 <_printf_float+0x9c>
 8009a82:	2301      	movs	r3, #1
 8009a84:	464a      	mov	r2, r9
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f af2f 	beq.w	80098f0 <_printf_float+0x98>
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	e7e6      	b.n	8009a66 <_printf_float+0x20e>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	dc3a      	bgt.n	8009b14 <_printf_float+0x2bc>
 8009a9e:	4a1c      	ldr	r2, [pc, #112]	; (8009b10 <_printf_float+0x2b8>)
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f af21 	beq.w	80098f0 <_printf_float+0x98>
 8009aae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	d102      	bne.n	8009abc <_printf_float+0x264>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	07d9      	lsls	r1, r3, #31
 8009aba:	d5d8      	bpl.n	8009a6e <_printf_float+0x216>
 8009abc:	4653      	mov	r3, sl
 8009abe:	465a      	mov	r2, fp
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f af12 	beq.w	80098f0 <_printf_float+0x98>
 8009acc:	f04f 0900 	mov.w	r9, #0
 8009ad0:	f104 0a1a 	add.w	sl, r4, #26
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	454b      	cmp	r3, r9
 8009ada:	dc01      	bgt.n	8009ae0 <_printf_float+0x288>
 8009adc:	9b08      	ldr	r3, [sp, #32]
 8009ade:	e795      	b.n	8009a0c <_printf_float+0x1b4>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	47b8      	blx	r7
 8009aea:	3001      	adds	r0, #1
 8009aec:	f43f af00 	beq.w	80098f0 <_printf_float+0x98>
 8009af0:	f109 0901 	add.w	r9, r9, #1
 8009af4:	e7ee      	b.n	8009ad4 <_printf_float+0x27c>
 8009af6:	bf00      	nop
 8009af8:	ffffffff 	.word	0xffffffff
 8009afc:	7fefffff 	.word	0x7fefffff
 8009b00:	0800c1a8 	.word	0x0800c1a8
 8009b04:	0800c1ac 	.word	0x0800c1ac
 8009b08:	0800c1b0 	.word	0x0800c1b0
 8009b0c:	0800c1b4 	.word	0x0800c1b4
 8009b10:	0800c1b8 	.word	0x0800c1b8
 8009b14:	9a08      	ldr	r2, [sp, #32]
 8009b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	bfa8      	it	ge
 8009b1c:	461a      	movge	r2, r3
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	4691      	mov	r9, r2
 8009b22:	dc38      	bgt.n	8009b96 <_printf_float+0x33e>
 8009b24:	2300      	movs	r3, #0
 8009b26:	9305      	str	r3, [sp, #20]
 8009b28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b2c:	f104 021a 	add.w	r2, r4, #26
 8009b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b32:	9905      	ldr	r1, [sp, #20]
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	eba3 0309 	sub.w	r3, r3, r9
 8009b3a:	428b      	cmp	r3, r1
 8009b3c:	dc33      	bgt.n	8009ba6 <_printf_float+0x34e>
 8009b3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	db3c      	blt.n	8009bc0 <_printf_float+0x368>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	07da      	lsls	r2, r3, #31
 8009b4a:	d439      	bmi.n	8009bc0 <_printf_float+0x368>
 8009b4c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009b50:	eba2 0903 	sub.w	r9, r2, r3
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	4591      	cmp	r9, r2
 8009b5a:	bfa8      	it	ge
 8009b5c:	4691      	movge	r9, r2
 8009b5e:	f1b9 0f00 	cmp.w	r9, #0
 8009b62:	dc35      	bgt.n	8009bd0 <_printf_float+0x378>
 8009b64:	f04f 0800 	mov.w	r8, #0
 8009b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b6c:	f104 0a1a 	add.w	sl, r4, #26
 8009b70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	eba3 0309 	sub.w	r3, r3, r9
 8009b7a:	4543      	cmp	r3, r8
 8009b7c:	f77f af77 	ble.w	8009a6e <_printf_float+0x216>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4652      	mov	r2, sl
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f aeb0 	beq.w	80098f0 <_printf_float+0x98>
 8009b90:	f108 0801 	add.w	r8, r8, #1
 8009b94:	e7ec      	b.n	8009b70 <_printf_float+0x318>
 8009b96:	4613      	mov	r3, r2
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4642      	mov	r2, r8
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1bf      	bne.n	8009b24 <_printf_float+0x2cc>
 8009ba4:	e6a4      	b.n	80098f0 <_printf_float+0x98>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	9204      	str	r2, [sp, #16]
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	f43f ae9d 	beq.w	80098f0 <_printf_float+0x98>
 8009bb6:	9b05      	ldr	r3, [sp, #20]
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	9305      	str	r3, [sp, #20]
 8009bbe:	e7b7      	b.n	8009b30 <_printf_float+0x2d8>
 8009bc0:	4653      	mov	r3, sl
 8009bc2:	465a      	mov	r2, fp
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	47b8      	blx	r7
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d1be      	bne.n	8009b4c <_printf_float+0x2f4>
 8009bce:	e68f      	b.n	80098f0 <_printf_float+0x98>
 8009bd0:	9a04      	ldr	r2, [sp, #16]
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	4442      	add	r2, r8
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b8      	blx	r7
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d1c1      	bne.n	8009b64 <_printf_float+0x30c>
 8009be0:	e686      	b.n	80098f0 <_printf_float+0x98>
 8009be2:	9a08      	ldr	r2, [sp, #32]
 8009be4:	2a01      	cmp	r2, #1
 8009be6:	dc01      	bgt.n	8009bec <_printf_float+0x394>
 8009be8:	07db      	lsls	r3, r3, #31
 8009bea:	d537      	bpl.n	8009c5c <_printf_float+0x404>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4642      	mov	r2, r8
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f43f ae7a 	beq.w	80098f0 <_printf_float+0x98>
 8009bfc:	4653      	mov	r3, sl
 8009bfe:	465a      	mov	r2, fp
 8009c00:	4631      	mov	r1, r6
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	f43f ae72 	beq.w	80098f0 <_printf_float+0x98>
 8009c0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009c10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	d01a      	beq.n	8009c52 <_printf_float+0x3fa>
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	f108 0201 	add.w	r2, r8, #1
 8009c22:	4631      	mov	r1, r6
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b8      	blx	r7
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d10e      	bne.n	8009c4a <_printf_float+0x3f2>
 8009c2c:	e660      	b.n	80098f0 <_printf_float+0x98>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	464a      	mov	r2, r9
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	f43f ae59 	beq.w	80098f0 <_printf_float+0x98>
 8009c3e:	f108 0801 	add.w	r8, r8, #1
 8009c42:	9b08      	ldr	r3, [sp, #32]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	4543      	cmp	r3, r8
 8009c48:	dcf1      	bgt.n	8009c2e <_printf_float+0x3d6>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c50:	e6dd      	b.n	8009a0e <_printf_float+0x1b6>
 8009c52:	f04f 0800 	mov.w	r8, #0
 8009c56:	f104 091a 	add.w	r9, r4, #26
 8009c5a:	e7f2      	b.n	8009c42 <_printf_float+0x3ea>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4642      	mov	r2, r8
 8009c60:	e7df      	b.n	8009c22 <_printf_float+0x3ca>
 8009c62:	2301      	movs	r3, #1
 8009c64:	464a      	mov	r2, r9
 8009c66:	4631      	mov	r1, r6
 8009c68:	4628      	mov	r0, r5
 8009c6a:	47b8      	blx	r7
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f43f ae3f 	beq.w	80098f0 <_printf_float+0x98>
 8009c72:	f108 0801 	add.w	r8, r8, #1
 8009c76:	68e3      	ldr	r3, [r4, #12]
 8009c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c7a:	1a5b      	subs	r3, r3, r1
 8009c7c:	4543      	cmp	r3, r8
 8009c7e:	dcf0      	bgt.n	8009c62 <_printf_float+0x40a>
 8009c80:	e6f9      	b.n	8009a76 <_printf_float+0x21e>
 8009c82:	f04f 0800 	mov.w	r8, #0
 8009c86:	f104 0919 	add.w	r9, r4, #25
 8009c8a:	e7f4      	b.n	8009c76 <_printf_float+0x41e>

08009c8c <_printf_common>:
 8009c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	4616      	mov	r6, r2
 8009c92:	4699      	mov	r9, r3
 8009c94:	688a      	ldr	r2, [r1, #8]
 8009c96:	690b      	ldr	r3, [r1, #16]
 8009c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	bfb8      	it	lt
 8009ca0:	4613      	movlt	r3, r2
 8009ca2:	6033      	str	r3, [r6, #0]
 8009ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ca8:	4607      	mov	r7, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	b10a      	cbz	r2, 8009cb2 <_printf_common+0x26>
 8009cae:	3301      	adds	r3, #1
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	0699      	lsls	r1, r3, #26
 8009cb6:	bf42      	ittt	mi
 8009cb8:	6833      	ldrmi	r3, [r6, #0]
 8009cba:	3302      	addmi	r3, #2
 8009cbc:	6033      	strmi	r3, [r6, #0]
 8009cbe:	6825      	ldr	r5, [r4, #0]
 8009cc0:	f015 0506 	ands.w	r5, r5, #6
 8009cc4:	d106      	bne.n	8009cd4 <_printf_common+0x48>
 8009cc6:	f104 0a19 	add.w	sl, r4, #25
 8009cca:	68e3      	ldr	r3, [r4, #12]
 8009ccc:	6832      	ldr	r2, [r6, #0]
 8009cce:	1a9b      	subs	r3, r3, r2
 8009cd0:	42ab      	cmp	r3, r5
 8009cd2:	dc26      	bgt.n	8009d22 <_printf_common+0x96>
 8009cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cd8:	1e13      	subs	r3, r2, #0
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	2301      	movne	r3, #1
 8009ce0:	0692      	lsls	r2, r2, #26
 8009ce2:	d42b      	bmi.n	8009d3c <_printf_common+0xb0>
 8009ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4638      	mov	r0, r7
 8009cec:	47c0      	blx	r8
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d01e      	beq.n	8009d30 <_printf_common+0xa4>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	6922      	ldr	r2, [r4, #16]
 8009cf6:	f003 0306 	and.w	r3, r3, #6
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	bf02      	ittt	eq
 8009cfe:	68e5      	ldreq	r5, [r4, #12]
 8009d00:	6833      	ldreq	r3, [r6, #0]
 8009d02:	1aed      	subeq	r5, r5, r3
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	bf0c      	ite	eq
 8009d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d0c:	2500      	movne	r5, #0
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	bfc4      	itt	gt
 8009d12:	1a9b      	subgt	r3, r3, r2
 8009d14:	18ed      	addgt	r5, r5, r3
 8009d16:	2600      	movs	r6, #0
 8009d18:	341a      	adds	r4, #26
 8009d1a:	42b5      	cmp	r5, r6
 8009d1c:	d11a      	bne.n	8009d54 <_printf_common+0xc8>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e008      	b.n	8009d34 <_printf_common+0xa8>
 8009d22:	2301      	movs	r3, #1
 8009d24:	4652      	mov	r2, sl
 8009d26:	4649      	mov	r1, r9
 8009d28:	4638      	mov	r0, r7
 8009d2a:	47c0      	blx	r8
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d103      	bne.n	8009d38 <_printf_common+0xac>
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d38:	3501      	adds	r5, #1
 8009d3a:	e7c6      	b.n	8009cca <_printf_common+0x3e>
 8009d3c:	18e1      	adds	r1, r4, r3
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	2030      	movs	r0, #48	; 0x30
 8009d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d46:	4422      	add	r2, r4
 8009d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d50:	3302      	adds	r3, #2
 8009d52:	e7c7      	b.n	8009ce4 <_printf_common+0x58>
 8009d54:	2301      	movs	r3, #1
 8009d56:	4622      	mov	r2, r4
 8009d58:	4649      	mov	r1, r9
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	47c0      	blx	r8
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d0e6      	beq.n	8009d30 <_printf_common+0xa4>
 8009d62:	3601      	adds	r6, #1
 8009d64:	e7d9      	b.n	8009d1a <_printf_common+0x8e>
	...

08009d68 <_printf_i>:
 8009d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	7e0f      	ldrb	r7, [r1, #24]
 8009d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d70:	2f78      	cmp	r7, #120	; 0x78
 8009d72:	4691      	mov	r9, r2
 8009d74:	4680      	mov	r8, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	469a      	mov	sl, r3
 8009d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d7e:	d807      	bhi.n	8009d90 <_printf_i+0x28>
 8009d80:	2f62      	cmp	r7, #98	; 0x62
 8009d82:	d80a      	bhi.n	8009d9a <_printf_i+0x32>
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	f000 80d4 	beq.w	8009f32 <_printf_i+0x1ca>
 8009d8a:	2f58      	cmp	r7, #88	; 0x58
 8009d8c:	f000 80c0 	beq.w	8009f10 <_printf_i+0x1a8>
 8009d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d98:	e03a      	b.n	8009e10 <_printf_i+0xa8>
 8009d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d9e:	2b15      	cmp	r3, #21
 8009da0:	d8f6      	bhi.n	8009d90 <_printf_i+0x28>
 8009da2:	a101      	add	r1, pc, #4	; (adr r1, 8009da8 <_printf_i+0x40>)
 8009da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009da8:	08009e01 	.word	0x08009e01
 8009dac:	08009e15 	.word	0x08009e15
 8009db0:	08009d91 	.word	0x08009d91
 8009db4:	08009d91 	.word	0x08009d91
 8009db8:	08009d91 	.word	0x08009d91
 8009dbc:	08009d91 	.word	0x08009d91
 8009dc0:	08009e15 	.word	0x08009e15
 8009dc4:	08009d91 	.word	0x08009d91
 8009dc8:	08009d91 	.word	0x08009d91
 8009dcc:	08009d91 	.word	0x08009d91
 8009dd0:	08009d91 	.word	0x08009d91
 8009dd4:	08009f19 	.word	0x08009f19
 8009dd8:	08009e41 	.word	0x08009e41
 8009ddc:	08009ed3 	.word	0x08009ed3
 8009de0:	08009d91 	.word	0x08009d91
 8009de4:	08009d91 	.word	0x08009d91
 8009de8:	08009f3b 	.word	0x08009f3b
 8009dec:	08009d91 	.word	0x08009d91
 8009df0:	08009e41 	.word	0x08009e41
 8009df4:	08009d91 	.word	0x08009d91
 8009df8:	08009d91 	.word	0x08009d91
 8009dfc:	08009edb 	.word	0x08009edb
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	1d1a      	adds	r2, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	602a      	str	r2, [r5, #0]
 8009e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e10:	2301      	movs	r3, #1
 8009e12:	e09f      	b.n	8009f54 <_printf_i+0x1ec>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	0607      	lsls	r7, r0, #24
 8009e1a:	f103 0104 	add.w	r1, r3, #4
 8009e1e:	6029      	str	r1, [r5, #0]
 8009e20:	d501      	bpl.n	8009e26 <_printf_i+0xbe>
 8009e22:	681e      	ldr	r6, [r3, #0]
 8009e24:	e003      	b.n	8009e2e <_printf_i+0xc6>
 8009e26:	0646      	lsls	r6, r0, #25
 8009e28:	d5fb      	bpl.n	8009e22 <_printf_i+0xba>
 8009e2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	da03      	bge.n	8009e3a <_printf_i+0xd2>
 8009e32:	232d      	movs	r3, #45	; 0x2d
 8009e34:	4276      	negs	r6, r6
 8009e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3a:	485a      	ldr	r0, [pc, #360]	; (8009fa4 <_printf_i+0x23c>)
 8009e3c:	230a      	movs	r3, #10
 8009e3e:	e012      	b.n	8009e66 <_printf_i+0xfe>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	1d19      	adds	r1, r3, #4
 8009e46:	6029      	str	r1, [r5, #0]
 8009e48:	0605      	lsls	r5, r0, #24
 8009e4a:	d501      	bpl.n	8009e50 <_printf_i+0xe8>
 8009e4c:	681e      	ldr	r6, [r3, #0]
 8009e4e:	e002      	b.n	8009e56 <_printf_i+0xee>
 8009e50:	0641      	lsls	r1, r0, #25
 8009e52:	d5fb      	bpl.n	8009e4c <_printf_i+0xe4>
 8009e54:	881e      	ldrh	r6, [r3, #0]
 8009e56:	4853      	ldr	r0, [pc, #332]	; (8009fa4 <_printf_i+0x23c>)
 8009e58:	2f6f      	cmp	r7, #111	; 0x6f
 8009e5a:	bf0c      	ite	eq
 8009e5c:	2308      	moveq	r3, #8
 8009e5e:	230a      	movne	r3, #10
 8009e60:	2100      	movs	r1, #0
 8009e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e66:	6865      	ldr	r5, [r4, #4]
 8009e68:	60a5      	str	r5, [r4, #8]
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	bfa2      	ittt	ge
 8009e6e:	6821      	ldrge	r1, [r4, #0]
 8009e70:	f021 0104 	bicge.w	r1, r1, #4
 8009e74:	6021      	strge	r1, [r4, #0]
 8009e76:	b90e      	cbnz	r6, 8009e7c <_printf_i+0x114>
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	d04b      	beq.n	8009f14 <_printf_i+0x1ac>
 8009e7c:	4615      	mov	r5, r2
 8009e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e82:	fb03 6711 	mls	r7, r3, r1, r6
 8009e86:	5dc7      	ldrb	r7, [r0, r7]
 8009e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e8c:	4637      	mov	r7, r6
 8009e8e:	42bb      	cmp	r3, r7
 8009e90:	460e      	mov	r6, r1
 8009e92:	d9f4      	bls.n	8009e7e <_printf_i+0x116>
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d10b      	bne.n	8009eb0 <_printf_i+0x148>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	07de      	lsls	r6, r3, #31
 8009e9c:	d508      	bpl.n	8009eb0 <_printf_i+0x148>
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	6861      	ldr	r1, [r4, #4]
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	bfde      	ittt	le
 8009ea6:	2330      	movle	r3, #48	; 0x30
 8009ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009eb0:	1b52      	subs	r2, r2, r5
 8009eb2:	6122      	str	r2, [r4, #16]
 8009eb4:	f8cd a000 	str.w	sl, [sp]
 8009eb8:	464b      	mov	r3, r9
 8009eba:	aa03      	add	r2, sp, #12
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	f7ff fee4 	bl	8009c8c <_printf_common>
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d14a      	bne.n	8009f5e <_printf_i+0x1f6>
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	b004      	add	sp, #16
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	f043 0320 	orr.w	r3, r3, #32
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	4833      	ldr	r0, [pc, #204]	; (8009fa8 <_printf_i+0x240>)
 8009edc:	2778      	movs	r7, #120	; 0x78
 8009ede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	6829      	ldr	r1, [r5, #0]
 8009ee6:	061f      	lsls	r7, r3, #24
 8009ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eec:	d402      	bmi.n	8009ef4 <_printf_i+0x18c>
 8009eee:	065f      	lsls	r7, r3, #25
 8009ef0:	bf48      	it	mi
 8009ef2:	b2b6      	uxthmi	r6, r6
 8009ef4:	07df      	lsls	r7, r3, #31
 8009ef6:	bf48      	it	mi
 8009ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8009efc:	6029      	str	r1, [r5, #0]
 8009efe:	bf48      	it	mi
 8009f00:	6023      	strmi	r3, [r4, #0]
 8009f02:	b91e      	cbnz	r6, 8009f0c <_printf_i+0x1a4>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	f023 0320 	bic.w	r3, r3, #32
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	e7a7      	b.n	8009e60 <_printf_i+0xf8>
 8009f10:	4824      	ldr	r0, [pc, #144]	; (8009fa4 <_printf_i+0x23c>)
 8009f12:	e7e4      	b.n	8009ede <_printf_i+0x176>
 8009f14:	4615      	mov	r5, r2
 8009f16:	e7bd      	b.n	8009e94 <_printf_i+0x12c>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	6826      	ldr	r6, [r4, #0]
 8009f1c:	6961      	ldr	r1, [r4, #20]
 8009f1e:	1d18      	adds	r0, r3, #4
 8009f20:	6028      	str	r0, [r5, #0]
 8009f22:	0635      	lsls	r5, r6, #24
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	d501      	bpl.n	8009f2c <_printf_i+0x1c4>
 8009f28:	6019      	str	r1, [r3, #0]
 8009f2a:	e002      	b.n	8009f32 <_printf_i+0x1ca>
 8009f2c:	0670      	lsls	r0, r6, #25
 8009f2e:	d5fb      	bpl.n	8009f28 <_printf_i+0x1c0>
 8009f30:	8019      	strh	r1, [r3, #0]
 8009f32:	2300      	movs	r3, #0
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	4615      	mov	r5, r2
 8009f38:	e7bc      	b.n	8009eb4 <_printf_i+0x14c>
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	1d1a      	adds	r2, r3, #4
 8009f3e:	602a      	str	r2, [r5, #0]
 8009f40:	681d      	ldr	r5, [r3, #0]
 8009f42:	6862      	ldr	r2, [r4, #4]
 8009f44:	2100      	movs	r1, #0
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7f6 f9ca 	bl	80002e0 <memchr>
 8009f4c:	b108      	cbz	r0, 8009f52 <_printf_i+0x1ea>
 8009f4e:	1b40      	subs	r0, r0, r5
 8009f50:	6060      	str	r0, [r4, #4]
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	6123      	str	r3, [r4, #16]
 8009f56:	2300      	movs	r3, #0
 8009f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f5c:	e7aa      	b.n	8009eb4 <_printf_i+0x14c>
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	462a      	mov	r2, r5
 8009f62:	4649      	mov	r1, r9
 8009f64:	4640      	mov	r0, r8
 8009f66:	47d0      	blx	sl
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d0ad      	beq.n	8009ec8 <_printf_i+0x160>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	079b      	lsls	r3, r3, #30
 8009f70:	d413      	bmi.n	8009f9a <_printf_i+0x232>
 8009f72:	68e0      	ldr	r0, [r4, #12]
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	4298      	cmp	r0, r3
 8009f78:	bfb8      	it	lt
 8009f7a:	4618      	movlt	r0, r3
 8009f7c:	e7a6      	b.n	8009ecc <_printf_i+0x164>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4632      	mov	r2, r6
 8009f82:	4649      	mov	r1, r9
 8009f84:	4640      	mov	r0, r8
 8009f86:	47d0      	blx	sl
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d09d      	beq.n	8009ec8 <_printf_i+0x160>
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	68e3      	ldr	r3, [r4, #12]
 8009f90:	9903      	ldr	r1, [sp, #12]
 8009f92:	1a5b      	subs	r3, r3, r1
 8009f94:	42ab      	cmp	r3, r5
 8009f96:	dcf2      	bgt.n	8009f7e <_printf_i+0x216>
 8009f98:	e7eb      	b.n	8009f72 <_printf_i+0x20a>
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	f104 0619 	add.w	r6, r4, #25
 8009fa0:	e7f5      	b.n	8009f8e <_printf_i+0x226>
 8009fa2:	bf00      	nop
 8009fa4:	0800c1ba 	.word	0x0800c1ba
 8009fa8:	0800c1cb 	.word	0x0800c1cb

08009fac <std>:
 8009fac:	2300      	movs	r3, #0
 8009fae:	b510      	push	{r4, lr}
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fba:	6083      	str	r3, [r0, #8]
 8009fbc:	8181      	strh	r1, [r0, #12]
 8009fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8009fc0:	81c2      	strh	r2, [r0, #14]
 8009fc2:	6183      	str	r3, [r0, #24]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	2208      	movs	r2, #8
 8009fc8:	305c      	adds	r0, #92	; 0x5c
 8009fca:	f000 f989 	bl	800a2e0 <memset>
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <std+0x58>)
 8009fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <std+0x5c>)
 8009fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fd6:	4b0d      	ldr	r3, [pc, #52]	; (800a00c <std+0x60>)
 8009fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <std+0x64>)
 8009fdc:	6323      	str	r3, [r4, #48]	; 0x30
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <std+0x68>)
 8009fe0:	6224      	str	r4, [r4, #32]
 8009fe2:	429c      	cmp	r4, r3
 8009fe4:	d006      	beq.n	8009ff4 <std+0x48>
 8009fe6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009fea:	4294      	cmp	r4, r2
 8009fec:	d002      	beq.n	8009ff4 <std+0x48>
 8009fee:	33d0      	adds	r3, #208	; 0xd0
 8009ff0:	429c      	cmp	r4, r3
 8009ff2:	d105      	bne.n	800a000 <std+0x54>
 8009ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ffc:	f000 ba42 	b.w	800a484 <__retarget_lock_init_recursive>
 800a000:	bd10      	pop	{r4, pc}
 800a002:	bf00      	nop
 800a004:	0800a131 	.word	0x0800a131
 800a008:	0800a153 	.word	0x0800a153
 800a00c:	0800a18b 	.word	0x0800a18b
 800a010:	0800a1af 	.word	0x0800a1af
 800a014:	24004e2c 	.word	0x24004e2c

0800a018 <stdio_exit_handler>:
 800a018:	4a02      	ldr	r2, [pc, #8]	; (800a024 <stdio_exit_handler+0xc>)
 800a01a:	4903      	ldr	r1, [pc, #12]	; (800a028 <stdio_exit_handler+0x10>)
 800a01c:	4803      	ldr	r0, [pc, #12]	; (800a02c <stdio_exit_handler+0x14>)
 800a01e:	f000 b869 	b.w	800a0f4 <_fwalk_sglue>
 800a022:	bf00      	nop
 800a024:	24000014 	.word	0x24000014
 800a028:	0800bd1d 	.word	0x0800bd1d
 800a02c:	24000020 	.word	0x24000020

0800a030 <cleanup_stdio>:
 800a030:	6841      	ldr	r1, [r0, #4]
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <cleanup_stdio+0x34>)
 800a034:	4299      	cmp	r1, r3
 800a036:	b510      	push	{r4, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	d001      	beq.n	800a040 <cleanup_stdio+0x10>
 800a03c:	f001 fe6e 	bl	800bd1c <_fflush_r>
 800a040:	68a1      	ldr	r1, [r4, #8]
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <cleanup_stdio+0x38>)
 800a044:	4299      	cmp	r1, r3
 800a046:	d002      	beq.n	800a04e <cleanup_stdio+0x1e>
 800a048:	4620      	mov	r0, r4
 800a04a:	f001 fe67 	bl	800bd1c <_fflush_r>
 800a04e:	68e1      	ldr	r1, [r4, #12]
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <cleanup_stdio+0x3c>)
 800a052:	4299      	cmp	r1, r3
 800a054:	d004      	beq.n	800a060 <cleanup_stdio+0x30>
 800a056:	4620      	mov	r0, r4
 800a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05c:	f001 be5e 	b.w	800bd1c <_fflush_r>
 800a060:	bd10      	pop	{r4, pc}
 800a062:	bf00      	nop
 800a064:	24004e2c 	.word	0x24004e2c
 800a068:	24004e94 	.word	0x24004e94
 800a06c:	24004efc 	.word	0x24004efc

0800a070 <global_stdio_init.part.0>:
 800a070:	b510      	push	{r4, lr}
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <global_stdio_init.part.0+0x30>)
 800a074:	4c0b      	ldr	r4, [pc, #44]	; (800a0a4 <global_stdio_init.part.0+0x34>)
 800a076:	4a0c      	ldr	r2, [pc, #48]	; (800a0a8 <global_stdio_init.part.0+0x38>)
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	4620      	mov	r0, r4
 800a07c:	2200      	movs	r2, #0
 800a07e:	2104      	movs	r1, #4
 800a080:	f7ff ff94 	bl	8009fac <std>
 800a084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a088:	2201      	movs	r2, #1
 800a08a:	2109      	movs	r1, #9
 800a08c:	f7ff ff8e 	bl	8009fac <std>
 800a090:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a094:	2202      	movs	r2, #2
 800a096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a09a:	2112      	movs	r1, #18
 800a09c:	f7ff bf86 	b.w	8009fac <std>
 800a0a0:	24004f64 	.word	0x24004f64
 800a0a4:	24004e2c 	.word	0x24004e2c
 800a0a8:	0800a019 	.word	0x0800a019

0800a0ac <__sfp_lock_acquire>:
 800a0ac:	4801      	ldr	r0, [pc, #4]	; (800a0b4 <__sfp_lock_acquire+0x8>)
 800a0ae:	f000 b9ea 	b.w	800a486 <__retarget_lock_acquire_recursive>
 800a0b2:	bf00      	nop
 800a0b4:	24004f6d 	.word	0x24004f6d

0800a0b8 <__sfp_lock_release>:
 800a0b8:	4801      	ldr	r0, [pc, #4]	; (800a0c0 <__sfp_lock_release+0x8>)
 800a0ba:	f000 b9e5 	b.w	800a488 <__retarget_lock_release_recursive>
 800a0be:	bf00      	nop
 800a0c0:	24004f6d 	.word	0x24004f6d

0800a0c4 <__sinit>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	f7ff fff0 	bl	800a0ac <__sfp_lock_acquire>
 800a0cc:	6a23      	ldr	r3, [r4, #32]
 800a0ce:	b11b      	cbz	r3, 800a0d8 <__sinit+0x14>
 800a0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d4:	f7ff bff0 	b.w	800a0b8 <__sfp_lock_release>
 800a0d8:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <__sinit+0x28>)
 800a0da:	6223      	str	r3, [r4, #32]
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__sinit+0x2c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1f5      	bne.n	800a0d0 <__sinit+0xc>
 800a0e4:	f7ff ffc4 	bl	800a070 <global_stdio_init.part.0>
 800a0e8:	e7f2      	b.n	800a0d0 <__sinit+0xc>
 800a0ea:	bf00      	nop
 800a0ec:	0800a031 	.word	0x0800a031
 800a0f0:	24004f64 	.word	0x24004f64

0800a0f4 <_fwalk_sglue>:
 800a0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	4688      	mov	r8, r1
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	2600      	movs	r6, #0
 800a100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a104:	f1b9 0901 	subs.w	r9, r9, #1
 800a108:	d505      	bpl.n	800a116 <_fwalk_sglue+0x22>
 800a10a:	6824      	ldr	r4, [r4, #0]
 800a10c:	2c00      	cmp	r4, #0
 800a10e:	d1f7      	bne.n	800a100 <_fwalk_sglue+0xc>
 800a110:	4630      	mov	r0, r6
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	89ab      	ldrh	r3, [r5, #12]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d907      	bls.n	800a12c <_fwalk_sglue+0x38>
 800a11c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a120:	3301      	adds	r3, #1
 800a122:	d003      	beq.n	800a12c <_fwalk_sglue+0x38>
 800a124:	4629      	mov	r1, r5
 800a126:	4638      	mov	r0, r7
 800a128:	47c0      	blx	r8
 800a12a:	4306      	orrs	r6, r0
 800a12c:	3568      	adds	r5, #104	; 0x68
 800a12e:	e7e9      	b.n	800a104 <_fwalk_sglue+0x10>

0800a130 <__sread>:
 800a130:	b510      	push	{r4, lr}
 800a132:	460c      	mov	r4, r1
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	f000 f956 	bl	800a3e8 <_read_r>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	bfab      	itete	ge
 800a140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a142:	89a3      	ldrhlt	r3, [r4, #12]
 800a144:	181b      	addge	r3, r3, r0
 800a146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a14a:	bfac      	ite	ge
 800a14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a14e:	81a3      	strhlt	r3, [r4, #12]
 800a150:	bd10      	pop	{r4, pc}

0800a152 <__swrite>:
 800a152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a156:	461f      	mov	r7, r3
 800a158:	898b      	ldrh	r3, [r1, #12]
 800a15a:	05db      	lsls	r3, r3, #23
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	4616      	mov	r6, r2
 800a162:	d505      	bpl.n	800a170 <__swrite+0x1e>
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	2302      	movs	r3, #2
 800a16a:	2200      	movs	r2, #0
 800a16c:	f000 f92a 	bl	800a3c4 <_lseek_r>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	4632      	mov	r2, r6
 800a17e:	463b      	mov	r3, r7
 800a180:	4628      	mov	r0, r5
 800a182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	f000 b941 	b.w	800a40c <_write_r>

0800a18a <__sseek>:
 800a18a:	b510      	push	{r4, lr}
 800a18c:	460c      	mov	r4, r1
 800a18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a192:	f000 f917 	bl	800a3c4 <_lseek_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	bf15      	itete	ne
 800a19c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a19e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1a6:	81a3      	strheq	r3, [r4, #12]
 800a1a8:	bf18      	it	ne
 800a1aa:	81a3      	strhne	r3, [r4, #12]
 800a1ac:	bd10      	pop	{r4, pc}

0800a1ae <__sclose>:
 800a1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b2:	f000 b8a1 	b.w	800a2f8 <_close_r>

0800a1b6 <__swbuf_r>:
 800a1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b118      	cbz	r0, 800a1c8 <__swbuf_r+0x12>
 800a1c0:	6a03      	ldr	r3, [r0, #32]
 800a1c2:	b90b      	cbnz	r3, 800a1c8 <__swbuf_r+0x12>
 800a1c4:	f7ff ff7e 	bl	800a0c4 <__sinit>
 800a1c8:	69a3      	ldr	r3, [r4, #24]
 800a1ca:	60a3      	str	r3, [r4, #8]
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	071a      	lsls	r2, r3, #28
 800a1d0:	d525      	bpl.n	800a21e <__swbuf_r+0x68>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	b31b      	cbz	r3, 800a21e <__swbuf_r+0x68>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	1a98      	subs	r0, r3, r2
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	b2f6      	uxtb	r6, r6
 800a1e0:	4283      	cmp	r3, r0
 800a1e2:	4637      	mov	r7, r6
 800a1e4:	dc04      	bgt.n	800a1f0 <__swbuf_r+0x3a>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f001 fd97 	bl	800bd1c <_fflush_r>
 800a1ee:	b9e0      	cbnz	r0, 800a22a <__swbuf_r+0x74>
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	701e      	strb	r6, [r3, #0]
 800a1fe:	6962      	ldr	r2, [r4, #20]
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	d004      	beq.n	800a210 <__swbuf_r+0x5a>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	07db      	lsls	r3, r3, #31
 800a20a:	d506      	bpl.n	800a21a <__swbuf_r+0x64>
 800a20c:	2e0a      	cmp	r6, #10
 800a20e:	d104      	bne.n	800a21a <__swbuf_r+0x64>
 800a210:	4621      	mov	r1, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f001 fd82 	bl	800bd1c <_fflush_r>
 800a218:	b938      	cbnz	r0, 800a22a <__swbuf_r+0x74>
 800a21a:	4638      	mov	r0, r7
 800a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f805 	bl	800a230 <__swsetup_r>
 800a226:	2800      	cmp	r0, #0
 800a228:	d0d5      	beq.n	800a1d6 <__swbuf_r+0x20>
 800a22a:	f04f 37ff 	mov.w	r7, #4294967295
 800a22e:	e7f4      	b.n	800a21a <__swbuf_r+0x64>

0800a230 <__swsetup_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4b2a      	ldr	r3, [pc, #168]	; (800a2dc <__swsetup_r+0xac>)
 800a234:	4605      	mov	r5, r0
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	460c      	mov	r4, r1
 800a23a:	b118      	cbz	r0, 800a244 <__swsetup_r+0x14>
 800a23c:	6a03      	ldr	r3, [r0, #32]
 800a23e:	b90b      	cbnz	r3, 800a244 <__swsetup_r+0x14>
 800a240:	f7ff ff40 	bl	800a0c4 <__sinit>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a24a:	0718      	lsls	r0, r3, #28
 800a24c:	d422      	bmi.n	800a294 <__swsetup_r+0x64>
 800a24e:	06d9      	lsls	r1, r3, #27
 800a250:	d407      	bmi.n	800a262 <__swsetup_r+0x32>
 800a252:	2309      	movs	r3, #9
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	e034      	b.n	800a2cc <__swsetup_r+0x9c>
 800a262:	0758      	lsls	r0, r3, #29
 800a264:	d512      	bpl.n	800a28c <__swsetup_r+0x5c>
 800a266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a268:	b141      	cbz	r1, 800a27c <__swsetup_r+0x4c>
 800a26a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a26e:	4299      	cmp	r1, r3
 800a270:	d002      	beq.n	800a278 <__swsetup_r+0x48>
 800a272:	4628      	mov	r0, r5
 800a274:	f000 ff0c 	bl	800b090 <_free_r>
 800a278:	2300      	movs	r3, #0
 800a27a:	6363      	str	r3, [r4, #52]	; 0x34
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	2300      	movs	r3, #0
 800a286:	6063      	str	r3, [r4, #4]
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f043 0308 	orr.w	r3, r3, #8
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	b94b      	cbnz	r3, 800a2ac <__swsetup_r+0x7c>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a29e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a2:	d003      	beq.n	800a2ac <__swsetup_r+0x7c>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f001 fd86 	bl	800bdb8 <__smakebuf_r>
 800a2ac:	89a0      	ldrh	r0, [r4, #12]
 800a2ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b2:	f010 0301 	ands.w	r3, r0, #1
 800a2b6:	d00a      	beq.n	800a2ce <__swsetup_r+0x9e>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60a3      	str	r3, [r4, #8]
 800a2bc:	6963      	ldr	r3, [r4, #20]
 800a2be:	425b      	negs	r3, r3
 800a2c0:	61a3      	str	r3, [r4, #24]
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	b943      	cbnz	r3, 800a2d8 <__swsetup_r+0xa8>
 800a2c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2ca:	d1c4      	bne.n	800a256 <__swsetup_r+0x26>
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	0781      	lsls	r1, r0, #30
 800a2d0:	bf58      	it	pl
 800a2d2:	6963      	ldrpl	r3, [r4, #20]
 800a2d4:	60a3      	str	r3, [r4, #8]
 800a2d6:	e7f4      	b.n	800a2c2 <__swsetup_r+0x92>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e7f7      	b.n	800a2cc <__swsetup_r+0x9c>
 800a2dc:	2400006c 	.word	0x2400006c

0800a2e0 <memset>:
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d100      	bne.n	800a2ea <memset+0xa>
 800a2e8:	4770      	bx	lr
 800a2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ee:	e7f9      	b.n	800a2e4 <memset+0x4>

0800a2f0 <_localeconv_r>:
 800a2f0:	4800      	ldr	r0, [pc, #0]	; (800a2f4 <_localeconv_r+0x4>)
 800a2f2:	4770      	bx	lr
 800a2f4:	24000160 	.word	0x24000160

0800a2f8 <_close_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d06      	ldr	r5, [pc, #24]	; (800a314 <_close_r+0x1c>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f6 fede 	bl	80010c4 <_close>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_close_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_close_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	24004f68 	.word	0x24004f68

0800a318 <_reclaim_reent>:
 800a318:	4b29      	ldr	r3, [pc, #164]	; (800a3c0 <_reclaim_reent+0xa8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4283      	cmp	r3, r0
 800a31e:	b570      	push	{r4, r5, r6, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	d04b      	beq.n	800a3bc <_reclaim_reent+0xa4>
 800a324:	69c3      	ldr	r3, [r0, #28]
 800a326:	b143      	cbz	r3, 800a33a <_reclaim_reent+0x22>
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d144      	bne.n	800a3b8 <_reclaim_reent+0xa0>
 800a32e:	69e3      	ldr	r3, [r4, #28]
 800a330:	6819      	ldr	r1, [r3, #0]
 800a332:	b111      	cbz	r1, 800a33a <_reclaim_reent+0x22>
 800a334:	4620      	mov	r0, r4
 800a336:	f000 feab 	bl	800b090 <_free_r>
 800a33a:	6961      	ldr	r1, [r4, #20]
 800a33c:	b111      	cbz	r1, 800a344 <_reclaim_reent+0x2c>
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fea6 	bl	800b090 <_free_r>
 800a344:	69e1      	ldr	r1, [r4, #28]
 800a346:	b111      	cbz	r1, 800a34e <_reclaim_reent+0x36>
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fea1 	bl	800b090 <_free_r>
 800a34e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a350:	b111      	cbz	r1, 800a358 <_reclaim_reent+0x40>
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fe9c 	bl	800b090 <_free_r>
 800a358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a35a:	b111      	cbz	r1, 800a362 <_reclaim_reent+0x4a>
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fe97 	bl	800b090 <_free_r>
 800a362:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a364:	b111      	cbz	r1, 800a36c <_reclaim_reent+0x54>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fe92 	bl	800b090 <_free_r>
 800a36c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a36e:	b111      	cbz	r1, 800a376 <_reclaim_reent+0x5e>
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fe8d 	bl	800b090 <_free_r>
 800a376:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a378:	b111      	cbz	r1, 800a380 <_reclaim_reent+0x68>
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fe88 	bl	800b090 <_free_r>
 800a380:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a382:	b111      	cbz	r1, 800a38a <_reclaim_reent+0x72>
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fe83 	bl	800b090 <_free_r>
 800a38a:	6a23      	ldr	r3, [r4, #32]
 800a38c:	b1b3      	cbz	r3, 800a3bc <_reclaim_reent+0xa4>
 800a38e:	4620      	mov	r0, r4
 800a390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a394:	4718      	bx	r3
 800a396:	5949      	ldr	r1, [r1, r5]
 800a398:	b941      	cbnz	r1, 800a3ac <_reclaim_reent+0x94>
 800a39a:	3504      	adds	r5, #4
 800a39c:	69e3      	ldr	r3, [r4, #28]
 800a39e:	2d80      	cmp	r5, #128	; 0x80
 800a3a0:	68d9      	ldr	r1, [r3, #12]
 800a3a2:	d1f8      	bne.n	800a396 <_reclaim_reent+0x7e>
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fe73 	bl	800b090 <_free_r>
 800a3aa:	e7c0      	b.n	800a32e <_reclaim_reent+0x16>
 800a3ac:	680e      	ldr	r6, [r1, #0]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fe6e 	bl	800b090 <_free_r>
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	e7ef      	b.n	800a398 <_reclaim_reent+0x80>
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	e7ef      	b.n	800a39c <_reclaim_reent+0x84>
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	bf00      	nop
 800a3c0:	2400006c 	.word	0x2400006c

0800a3c4 <_lseek_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_lseek_r+0x20>)
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	602a      	str	r2, [r5, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f7f6 fe9d 	bl	8001112 <_lseek>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_lseek_r+0x1e>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_lseek_r+0x1e>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	24004f68 	.word	0x24004f68

0800a3e8 <_read_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d07      	ldr	r5, [pc, #28]	; (800a408 <_read_r+0x20>)
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	4608      	mov	r0, r1
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	602a      	str	r2, [r5, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f7f6 fe2b 	bl	8001052 <_read>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_read_r+0x1e>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	b103      	cbz	r3, 800a406 <_read_r+0x1e>
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	24004f68 	.word	0x24004f68

0800a40c <_write_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d07      	ldr	r5, [pc, #28]	; (800a42c <_write_r+0x20>)
 800a410:	4604      	mov	r4, r0
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f7f6 fe36 	bl	800108c <_write>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_write_r+0x1e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_write_r+0x1e>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	24004f68 	.word	0x24004f68

0800a430 <__errno>:
 800a430:	4b01      	ldr	r3, [pc, #4]	; (800a438 <__errno+0x8>)
 800a432:	6818      	ldr	r0, [r3, #0]
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	2400006c 	.word	0x2400006c

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4d0d      	ldr	r5, [pc, #52]	; (800a474 <__libc_init_array+0x38>)
 800a440:	4c0d      	ldr	r4, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a442:	1b64      	subs	r4, r4, r5
 800a444:	10a4      	asrs	r4, r4, #2
 800a446:	2600      	movs	r6, #0
 800a448:	42a6      	cmp	r6, r4
 800a44a:	d109      	bne.n	800a460 <__libc_init_array+0x24>
 800a44c:	4d0b      	ldr	r5, [pc, #44]	; (800a47c <__libc_init_array+0x40>)
 800a44e:	4c0c      	ldr	r4, [pc, #48]	; (800a480 <__libc_init_array+0x44>)
 800a450:	f001 fdd2 	bl	800bff8 <_init>
 800a454:	1b64      	subs	r4, r4, r5
 800a456:	10a4      	asrs	r4, r4, #2
 800a458:	2600      	movs	r6, #0
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	d105      	bne.n	800a46a <__libc_init_array+0x2e>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	f855 3b04 	ldr.w	r3, [r5], #4
 800a464:	4798      	blx	r3
 800a466:	3601      	adds	r6, #1
 800a468:	e7ee      	b.n	800a448 <__libc_init_array+0xc>
 800a46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46e:	4798      	blx	r3
 800a470:	3601      	adds	r6, #1
 800a472:	e7f2      	b.n	800a45a <__libc_init_array+0x1e>
 800a474:	0800c524 	.word	0x0800c524
 800a478:	0800c524 	.word	0x0800c524
 800a47c:	0800c524 	.word	0x0800c524
 800a480:	0800c528 	.word	0x0800c528

0800a484 <__retarget_lock_init_recursive>:
 800a484:	4770      	bx	lr

0800a486 <__retarget_lock_acquire_recursive>:
 800a486:	4770      	bx	lr

0800a488 <__retarget_lock_release_recursive>:
 800a488:	4770      	bx	lr

0800a48a <memcpy>:
 800a48a:	440a      	add	r2, r1
 800a48c:	4291      	cmp	r1, r2
 800a48e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a492:	d100      	bne.n	800a496 <memcpy+0xc>
 800a494:	4770      	bx	lr
 800a496:	b510      	push	{r4, lr}
 800a498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a49c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a0:	4291      	cmp	r1, r2
 800a4a2:	d1f9      	bne.n	800a498 <memcpy+0xe>
 800a4a4:	bd10      	pop	{r4, pc}

0800a4a6 <quorem>:
 800a4a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4aa:	6903      	ldr	r3, [r0, #16]
 800a4ac:	690c      	ldr	r4, [r1, #16]
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	db7e      	blt.n	800a5b2 <quorem+0x10c>
 800a4b4:	3c01      	subs	r4, #1
 800a4b6:	f101 0814 	add.w	r8, r1, #20
 800a4ba:	f100 0514 	add.w	r5, r0, #20
 800a4be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4dc:	d331      	bcc.n	800a542 <quorem+0x9c>
 800a4de:	f04f 0e00 	mov.w	lr, #0
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	46ac      	mov	ip, r5
 800a4e6:	46f2      	mov	sl, lr
 800a4e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4ec:	b293      	uxth	r3, r2
 800a4ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a4f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4f6:	0c1a      	lsrs	r2, r3, #16
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	ebaa 0303 	sub.w	r3, sl, r3
 800a4fe:	f8dc a000 	ldr.w	sl, [ip]
 800a502:	fa13 f38a 	uxtah	r3, r3, sl
 800a506:	fb06 220e 	mla	r2, r6, lr, r2
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a512:	b292      	uxth	r2, r2
 800a514:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a51c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a520:	4581      	cmp	r9, r0
 800a522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a526:	f84c 3b04 	str.w	r3, [ip], #4
 800a52a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a52e:	d2db      	bcs.n	800a4e8 <quorem+0x42>
 800a530:	f855 300b 	ldr.w	r3, [r5, fp]
 800a534:	b92b      	cbnz	r3, 800a542 <quorem+0x9c>
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	3b04      	subs	r3, #4
 800a53a:	429d      	cmp	r5, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	d32c      	bcc.n	800a59a <quorem+0xf4>
 800a540:	613c      	str	r4, [r7, #16]
 800a542:	4638      	mov	r0, r7
 800a544:	f001 f920 	bl	800b788 <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	db22      	blt.n	800a592 <quorem+0xec>
 800a54c:	3601      	adds	r6, #1
 800a54e:	4629      	mov	r1, r5
 800a550:	2000      	movs	r0, #0
 800a552:	f858 2b04 	ldr.w	r2, [r8], #4
 800a556:	f8d1 c000 	ldr.w	ip, [r1]
 800a55a:	b293      	uxth	r3, r2
 800a55c:	1ac3      	subs	r3, r0, r3
 800a55e:	0c12      	lsrs	r2, r2, #16
 800a560:	fa13 f38c 	uxtah	r3, r3, ip
 800a564:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a572:	45c1      	cmp	r9, r8
 800a574:	f841 3b04 	str.w	r3, [r1], #4
 800a578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a57c:	d2e9      	bcs.n	800a552 <quorem+0xac>
 800a57e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a586:	b922      	cbnz	r2, 800a592 <quorem+0xec>
 800a588:	3b04      	subs	r3, #4
 800a58a:	429d      	cmp	r5, r3
 800a58c:	461a      	mov	r2, r3
 800a58e:	d30a      	bcc.n	800a5a6 <quorem+0x100>
 800a590:	613c      	str	r4, [r7, #16]
 800a592:	4630      	mov	r0, r6
 800a594:	b003      	add	sp, #12
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	3b04      	subs	r3, #4
 800a59e:	2a00      	cmp	r2, #0
 800a5a0:	d1ce      	bne.n	800a540 <quorem+0x9a>
 800a5a2:	3c01      	subs	r4, #1
 800a5a4:	e7c9      	b.n	800a53a <quorem+0x94>
 800a5a6:	6812      	ldr	r2, [r2, #0]
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	d1f0      	bne.n	800a590 <quorem+0xea>
 800a5ae:	3c01      	subs	r4, #1
 800a5b0:	e7eb      	b.n	800a58a <quorem+0xe4>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e7ee      	b.n	800a594 <quorem+0xee>
	...

0800a5b8 <_dtoa_r>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	ed2d 8b02 	vpush	{d8}
 800a5c0:	69c5      	ldr	r5, [r0, #28]
 800a5c2:	b091      	sub	sp, #68	; 0x44
 800a5c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5c8:	ec59 8b10 	vmov	r8, r9, d0
 800a5cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a5ce:	9106      	str	r1, [sp, #24]
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	9208      	str	r2, [sp, #32]
 800a5d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d6:	b975      	cbnz	r5, 800a5f6 <_dtoa_r+0x3e>
 800a5d8:	2010      	movs	r0, #16
 800a5da:	f000 fda5 	bl	800b128 <malloc>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	61f0      	str	r0, [r6, #28]
 800a5e2:	b920      	cbnz	r0, 800a5ee <_dtoa_r+0x36>
 800a5e4:	4ba6      	ldr	r3, [pc, #664]	; (800a880 <_dtoa_r+0x2c8>)
 800a5e6:	21ef      	movs	r1, #239	; 0xef
 800a5e8:	48a6      	ldr	r0, [pc, #664]	; (800a884 <_dtoa_r+0x2cc>)
 800a5ea:	f001 fc53 	bl	800be94 <__assert_func>
 800a5ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5f2:	6005      	str	r5, [r0, #0]
 800a5f4:	60c5      	str	r5, [r0, #12]
 800a5f6:	69f3      	ldr	r3, [r6, #28]
 800a5f8:	6819      	ldr	r1, [r3, #0]
 800a5fa:	b151      	cbz	r1, 800a612 <_dtoa_r+0x5a>
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	604a      	str	r2, [r1, #4]
 800a600:	2301      	movs	r3, #1
 800a602:	4093      	lsls	r3, r2
 800a604:	608b      	str	r3, [r1, #8]
 800a606:	4630      	mov	r0, r6
 800a608:	f000 fe82 	bl	800b310 <_Bfree>
 800a60c:	69f3      	ldr	r3, [r6, #28]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	f1b9 0300 	subs.w	r3, r9, #0
 800a616:	bfbb      	ittet	lt
 800a618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a61c:	9303      	strlt	r3, [sp, #12]
 800a61e:	2300      	movge	r3, #0
 800a620:	2201      	movlt	r2, #1
 800a622:	bfac      	ite	ge
 800a624:	6023      	strge	r3, [r4, #0]
 800a626:	6022      	strlt	r2, [r4, #0]
 800a628:	4b97      	ldr	r3, [pc, #604]	; (800a888 <_dtoa_r+0x2d0>)
 800a62a:	9c03      	ldr	r4, [sp, #12]
 800a62c:	43a3      	bics	r3, r4
 800a62e:	d11c      	bne.n	800a66a <_dtoa_r+0xb2>
 800a630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a632:	f242 730f 	movw	r3, #9999	; 0x270f
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a63c:	ea53 0308 	orrs.w	r3, r3, r8
 800a640:	f000 84fb 	beq.w	800b03a <_dtoa_r+0xa82>
 800a644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a646:	b963      	cbnz	r3, 800a662 <_dtoa_r+0xaa>
 800a648:	4b90      	ldr	r3, [pc, #576]	; (800a88c <_dtoa_r+0x2d4>)
 800a64a:	e020      	b.n	800a68e <_dtoa_r+0xd6>
 800a64c:	4b90      	ldr	r3, [pc, #576]	; (800a890 <_dtoa_r+0x2d8>)
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	3308      	adds	r3, #8
 800a652:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	9801      	ldr	r0, [sp, #4]
 800a658:	b011      	add	sp, #68	; 0x44
 800a65a:	ecbd 8b02 	vpop	{d8}
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	4b8a      	ldr	r3, [pc, #552]	; (800a88c <_dtoa_r+0x2d4>)
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	3303      	adds	r3, #3
 800a668:	e7f3      	b.n	800a652 <_dtoa_r+0x9a>
 800a66a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a66e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a676:	d10c      	bne.n	800a692 <_dtoa_r+0xda>
 800a678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a67a:	2301      	movs	r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 84d7 	beq.w	800b034 <_dtoa_r+0xa7c>
 800a686:	4b83      	ldr	r3, [pc, #524]	; (800a894 <_dtoa_r+0x2dc>)
 800a688:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	e7e1      	b.n	800a656 <_dtoa_r+0x9e>
 800a692:	aa0e      	add	r2, sp, #56	; 0x38
 800a694:	a90f      	add	r1, sp, #60	; 0x3c
 800a696:	4630      	mov	r0, r6
 800a698:	eeb0 0b48 	vmov.f64	d0, d8
 800a69c:	f001 f91a 	bl	800b8d4 <__d2b>
 800a6a0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a6a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d046      	beq.n	800a73a <_dtoa_r+0x182>
 800a6ac:	eeb0 7b48 	vmov.f64	d7, d8
 800a6b0:	ee18 1a90 	vmov	r1, s17
 800a6b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a6b8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a6bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a6c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	ee07 1a90 	vmov	s15, r1
 800a6ca:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a6ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a868 <_dtoa_r+0x2b0>
 800a6d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a6d6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a870 <_dtoa_r+0x2b8>
 800a6da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a6de:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a878 <_dtoa_r+0x2c0>
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a6ea:	eeb0 7b46 	vmov.f64	d7, d6
 800a6ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a6f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a6f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fe:	ee16 ba90 	vmov	fp, s13
 800a702:	9009      	str	r0, [sp, #36]	; 0x24
 800a704:	d508      	bpl.n	800a718 <_dtoa_r+0x160>
 800a706:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a70a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	bf18      	it	ne
 800a714:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a718:	f1bb 0f16 	cmp.w	fp, #22
 800a71c:	d82b      	bhi.n	800a776 <_dtoa_r+0x1be>
 800a71e:	495e      	ldr	r1, [pc, #376]	; (800a898 <_dtoa_r+0x2e0>)
 800a720:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a724:	ed91 7b00 	vldr	d7, [r1]
 800a728:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a730:	d501      	bpl.n	800a736 <_dtoa_r+0x17e>
 800a732:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a736:	2100      	movs	r1, #0
 800a738:	e01e      	b.n	800a778 <_dtoa_r+0x1c0>
 800a73a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a73c:	4413      	add	r3, r2
 800a73e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a742:	2920      	cmp	r1, #32
 800a744:	bfc1      	itttt	gt
 800a746:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a74a:	408c      	lslgt	r4, r1
 800a74c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a750:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a754:	bfd6      	itet	le
 800a756:	f1c1 0120 	rsble	r1, r1, #32
 800a75a:	4321      	orrgt	r1, r4
 800a75c:	fa08 f101 	lslle.w	r1, r8, r1
 800a760:	ee07 1a90 	vmov	s15, r1
 800a764:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a768:	3b01      	subs	r3, #1
 800a76a:	ee17 1a90 	vmov	r1, s15
 800a76e:	2001      	movs	r0, #1
 800a770:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a774:	e7a7      	b.n	800a6c6 <_dtoa_r+0x10e>
 800a776:	2101      	movs	r1, #1
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	1e53      	subs	r3, r2, #1
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	bf45      	ittet	mi
 800a780:	f1c2 0301 	rsbmi	r3, r2, #1
 800a784:	9304      	strmi	r3, [sp, #16]
 800a786:	2300      	movpl	r3, #0
 800a788:	2300      	movmi	r3, #0
 800a78a:	bf4c      	ite	mi
 800a78c:	9305      	strmi	r3, [sp, #20]
 800a78e:	9304      	strpl	r3, [sp, #16]
 800a790:	f1bb 0f00 	cmp.w	fp, #0
 800a794:	910b      	str	r1, [sp, #44]	; 0x2c
 800a796:	db18      	blt.n	800a7ca <_dtoa_r+0x212>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a79e:	445b      	add	r3, fp
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9a06      	ldr	r2, [sp, #24]
 800a7a6:	2a09      	cmp	r2, #9
 800a7a8:	d848      	bhi.n	800a83c <_dtoa_r+0x284>
 800a7aa:	2a05      	cmp	r2, #5
 800a7ac:	bfc4      	itt	gt
 800a7ae:	3a04      	subgt	r2, #4
 800a7b0:	9206      	strgt	r2, [sp, #24]
 800a7b2:	9a06      	ldr	r2, [sp, #24]
 800a7b4:	f1a2 0202 	sub.w	r2, r2, #2
 800a7b8:	bfcc      	ite	gt
 800a7ba:	2400      	movgt	r4, #0
 800a7bc:	2401      	movle	r4, #1
 800a7be:	2a03      	cmp	r2, #3
 800a7c0:	d847      	bhi.n	800a852 <_dtoa_r+0x29a>
 800a7c2:	e8df f002 	tbb	[pc, r2]
 800a7c6:	2d0b      	.short	0x2d0b
 800a7c8:	392b      	.short	0x392b
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	eba3 030b 	sub.w	r3, r3, fp
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a7d6:	f1cb 0300 	rsb	r3, fp, #0
 800a7da:	e7e3      	b.n	800a7a4 <_dtoa_r+0x1ec>
 800a7dc:	2200      	movs	r2, #0
 800a7de:	9207      	str	r2, [sp, #28]
 800a7e0:	9a08      	ldr	r2, [sp, #32]
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	dc38      	bgt.n	800a858 <_dtoa_r+0x2a0>
 800a7e6:	f04f 0a01 	mov.w	sl, #1
 800a7ea:	46d1      	mov	r9, sl
 800a7ec:	4652      	mov	r2, sl
 800a7ee:	f8cd a020 	str.w	sl, [sp, #32]
 800a7f2:	69f7      	ldr	r7, [r6, #28]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	2004      	movs	r0, #4
 800a7f8:	f100 0c14 	add.w	ip, r0, #20
 800a7fc:	4594      	cmp	ip, r2
 800a7fe:	d930      	bls.n	800a862 <_dtoa_r+0x2aa>
 800a800:	6079      	str	r1, [r7, #4]
 800a802:	4630      	mov	r0, r6
 800a804:	930d      	str	r3, [sp, #52]	; 0x34
 800a806:	f000 fd43 	bl	800b290 <_Balloc>
 800a80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a80c:	9001      	str	r0, [sp, #4]
 800a80e:	4602      	mov	r2, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d145      	bne.n	800a8a0 <_dtoa_r+0x2e8>
 800a814:	4b21      	ldr	r3, [pc, #132]	; (800a89c <_dtoa_r+0x2e4>)
 800a816:	f240 11af 	movw	r1, #431	; 0x1af
 800a81a:	e6e5      	b.n	800a5e8 <_dtoa_r+0x30>
 800a81c:	2201      	movs	r2, #1
 800a81e:	e7de      	b.n	800a7de <_dtoa_r+0x226>
 800a820:	2200      	movs	r2, #0
 800a822:	9207      	str	r2, [sp, #28]
 800a824:	9a08      	ldr	r2, [sp, #32]
 800a826:	eb0b 0a02 	add.w	sl, fp, r2
 800a82a:	f10a 0901 	add.w	r9, sl, #1
 800a82e:	464a      	mov	r2, r9
 800a830:	2a01      	cmp	r2, #1
 800a832:	bfb8      	it	lt
 800a834:	2201      	movlt	r2, #1
 800a836:	e7dc      	b.n	800a7f2 <_dtoa_r+0x23a>
 800a838:	2201      	movs	r2, #1
 800a83a:	e7f2      	b.n	800a822 <_dtoa_r+0x26a>
 800a83c:	2401      	movs	r4, #1
 800a83e:	2200      	movs	r2, #0
 800a840:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a844:	f04f 3aff 	mov.w	sl, #4294967295
 800a848:	2100      	movs	r1, #0
 800a84a:	46d1      	mov	r9, sl
 800a84c:	2212      	movs	r2, #18
 800a84e:	9108      	str	r1, [sp, #32]
 800a850:	e7cf      	b.n	800a7f2 <_dtoa_r+0x23a>
 800a852:	2201      	movs	r2, #1
 800a854:	9207      	str	r2, [sp, #28]
 800a856:	e7f5      	b.n	800a844 <_dtoa_r+0x28c>
 800a858:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a85c:	46d1      	mov	r9, sl
 800a85e:	4652      	mov	r2, sl
 800a860:	e7c7      	b.n	800a7f2 <_dtoa_r+0x23a>
 800a862:	3101      	adds	r1, #1
 800a864:	0040      	lsls	r0, r0, #1
 800a866:	e7c7      	b.n	800a7f8 <_dtoa_r+0x240>
 800a868:	636f4361 	.word	0x636f4361
 800a86c:	3fd287a7 	.word	0x3fd287a7
 800a870:	8b60c8b3 	.word	0x8b60c8b3
 800a874:	3fc68a28 	.word	0x3fc68a28
 800a878:	509f79fb 	.word	0x509f79fb
 800a87c:	3fd34413 	.word	0x3fd34413
 800a880:	0800c1e9 	.word	0x0800c1e9
 800a884:	0800c200 	.word	0x0800c200
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	0800c1e5 	.word	0x0800c1e5
 800a890:	0800c1dc 	.word	0x0800c1dc
 800a894:	0800c1b9 	.word	0x0800c1b9
 800a898:	0800c2f0 	.word	0x0800c2f0
 800a89c:	0800c258 	.word	0x0800c258
 800a8a0:	69f2      	ldr	r2, [r6, #28]
 800a8a2:	9901      	ldr	r1, [sp, #4]
 800a8a4:	6011      	str	r1, [r2, #0]
 800a8a6:	f1b9 0f0e 	cmp.w	r9, #14
 800a8aa:	d86c      	bhi.n	800a986 <_dtoa_r+0x3ce>
 800a8ac:	2c00      	cmp	r4, #0
 800a8ae:	d06a      	beq.n	800a986 <_dtoa_r+0x3ce>
 800a8b0:	f1bb 0f00 	cmp.w	fp, #0
 800a8b4:	f340 80a0 	ble.w	800a9f8 <_dtoa_r+0x440>
 800a8b8:	4ac1      	ldr	r2, [pc, #772]	; (800abc0 <_dtoa_r+0x608>)
 800a8ba:	f00b 010f 	and.w	r1, fp, #15
 800a8be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a8c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a8c6:	ed92 7b00 	vldr	d7, [r2]
 800a8ca:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a8ce:	f000 8087 	beq.w	800a9e0 <_dtoa_r+0x428>
 800a8d2:	49bc      	ldr	r1, [pc, #752]	; (800abc4 <_dtoa_r+0x60c>)
 800a8d4:	ed91 6b08 	vldr	d6, [r1, #32]
 800a8d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a8dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a8e0:	f002 020f 	and.w	r2, r2, #15
 800a8e4:	2103      	movs	r1, #3
 800a8e6:	48b7      	ldr	r0, [pc, #732]	; (800abc4 <_dtoa_r+0x60c>)
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d17b      	bne.n	800a9e4 <_dtoa_r+0x42c>
 800a8ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a8f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a8f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	f000 80a0 	beq.w	800aa44 <_dtoa_r+0x48c>
 800a904:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a908:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	f140 8098 	bpl.w	800aa44 <_dtoa_r+0x48c>
 800a914:	f1b9 0f00 	cmp.w	r9, #0
 800a918:	f000 8094 	beq.w	800aa44 <_dtoa_r+0x48c>
 800a91c:	f1ba 0f00 	cmp.w	sl, #0
 800a920:	dd2f      	ble.n	800a982 <_dtoa_r+0x3ca>
 800a922:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a92a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a92e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a932:	3101      	adds	r1, #1
 800a934:	4654      	mov	r4, sl
 800a936:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a93a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a93e:	ee07 1a90 	vmov	s15, r1
 800a942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a946:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a94a:	ee15 7a90 	vmov	r7, s11
 800a94e:	ec51 0b15 	vmov	r0, r1, d5
 800a952:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a956:	2c00      	cmp	r4, #0
 800a958:	d177      	bne.n	800aa4a <_dtoa_r+0x492>
 800a95a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a95e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a962:	ec41 0b17 	vmov	d7, r0, r1
 800a966:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96e:	f300 826a 	bgt.w	800ae46 <_dtoa_r+0x88e>
 800a972:	eeb1 7b47 	vneg.f64	d7, d7
 800a976:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97e:	f100 8260 	bmi.w	800ae42 <_dtoa_r+0x88a>
 800a982:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a988:	2a00      	cmp	r2, #0
 800a98a:	f2c0 811d 	blt.w	800abc8 <_dtoa_r+0x610>
 800a98e:	f1bb 0f0e 	cmp.w	fp, #14
 800a992:	f300 8119 	bgt.w	800abc8 <_dtoa_r+0x610>
 800a996:	4b8a      	ldr	r3, [pc, #552]	; (800abc0 <_dtoa_r+0x608>)
 800a998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a99c:	ed93 6b00 	vldr	d6, [r3]
 800a9a0:	9b08      	ldr	r3, [sp, #32]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f280 80b7 	bge.w	800ab16 <_dtoa_r+0x55e>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	f300 80b3 	bgt.w	800ab16 <_dtoa_r+0x55e>
 800a9b0:	f040 8246 	bne.w	800ae40 <_dtoa_r+0x888>
 800a9b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a9b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a9bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c8:	464c      	mov	r4, r9
 800a9ca:	464f      	mov	r7, r9
 800a9cc:	f280 821c 	bge.w	800ae08 <_dtoa_r+0x850>
 800a9d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9d4:	2331      	movs	r3, #49	; 0x31
 800a9d6:	f808 3b01 	strb.w	r3, [r8], #1
 800a9da:	f10b 0b01 	add.w	fp, fp, #1
 800a9de:	e218      	b.n	800ae12 <_dtoa_r+0x85a>
 800a9e0:	2102      	movs	r1, #2
 800a9e2:	e780      	b.n	800a8e6 <_dtoa_r+0x32e>
 800a9e4:	07d4      	lsls	r4, r2, #31
 800a9e6:	d504      	bpl.n	800a9f2 <_dtoa_r+0x43a>
 800a9e8:	ed90 6b00 	vldr	d6, [r0]
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9f2:	1052      	asrs	r2, r2, #1
 800a9f4:	3008      	adds	r0, #8
 800a9f6:	e777      	b.n	800a8e8 <_dtoa_r+0x330>
 800a9f8:	d022      	beq.n	800aa40 <_dtoa_r+0x488>
 800a9fa:	f1cb 0200 	rsb	r2, fp, #0
 800a9fe:	4970      	ldr	r1, [pc, #448]	; (800abc0 <_dtoa_r+0x608>)
 800aa00:	f002 000f 	and.w	r0, r2, #15
 800aa04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aa08:	ed91 7b00 	vldr	d7, [r1]
 800aa0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aa10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa14:	486b      	ldr	r0, [pc, #428]	; (800abc4 <_dtoa_r+0x60c>)
 800aa16:	1112      	asrs	r2, r2, #4
 800aa18:	2400      	movs	r4, #0
 800aa1a:	2102      	movs	r1, #2
 800aa1c:	b92a      	cbnz	r2, 800aa2a <_dtoa_r+0x472>
 800aa1e:	2c00      	cmp	r4, #0
 800aa20:	f43f af6a 	beq.w	800a8f8 <_dtoa_r+0x340>
 800aa24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa28:	e766      	b.n	800a8f8 <_dtoa_r+0x340>
 800aa2a:	07d7      	lsls	r7, r2, #31
 800aa2c:	d505      	bpl.n	800aa3a <_dtoa_r+0x482>
 800aa2e:	ed90 6b00 	vldr	d6, [r0]
 800aa32:	3101      	adds	r1, #1
 800aa34:	2401      	movs	r4, #1
 800aa36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa3a:	1052      	asrs	r2, r2, #1
 800aa3c:	3008      	adds	r0, #8
 800aa3e:	e7ed      	b.n	800aa1c <_dtoa_r+0x464>
 800aa40:	2102      	movs	r1, #2
 800aa42:	e759      	b.n	800a8f8 <_dtoa_r+0x340>
 800aa44:	465a      	mov	r2, fp
 800aa46:	464c      	mov	r4, r9
 800aa48:	e775      	b.n	800a936 <_dtoa_r+0x37e>
 800aa4a:	ec41 0b17 	vmov	d7, r0, r1
 800aa4e:	495c      	ldr	r1, [pc, #368]	; (800abc0 <_dtoa_r+0x608>)
 800aa50:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800aa54:	ed11 4b02 	vldr	d4, [r1, #-8]
 800aa58:	9901      	ldr	r1, [sp, #4]
 800aa5a:	440c      	add	r4, r1
 800aa5c:	9907      	ldr	r1, [sp, #28]
 800aa5e:	b351      	cbz	r1, 800aab6 <_dtoa_r+0x4fe>
 800aa60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800aa64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800aa68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aa70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa7c:	ee14 1a90 	vmov	r1, s9
 800aa80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa84:	3130      	adds	r1, #48	; 0x30
 800aa86:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	f808 1b01 	strb.w	r1, [r8], #1
 800aa96:	d439      	bmi.n	800ab0c <_dtoa_r+0x554>
 800aa98:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aa9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa4:	d472      	bmi.n	800ab8c <_dtoa_r+0x5d4>
 800aaa6:	45a0      	cmp	r8, r4
 800aaa8:	f43f af6b 	beq.w	800a982 <_dtoa_r+0x3ca>
 800aaac:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aab0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aab4:	e7e0      	b.n	800aa78 <_dtoa_r+0x4c0>
 800aab6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aaba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aabe:	4620      	mov	r0, r4
 800aac0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aac4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aac8:	ee14 1a90 	vmov	r1, s9
 800aacc:	3130      	adds	r1, #48	; 0x30
 800aace:	f808 1b01 	strb.w	r1, [r8], #1
 800aad2:	45a0      	cmp	r8, r4
 800aad4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aad8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aadc:	d118      	bne.n	800ab10 <_dtoa_r+0x558>
 800aade:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aae2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aae6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaee:	dc4d      	bgt.n	800ab8c <_dtoa_r+0x5d4>
 800aaf0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800aaf4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	f57f af41 	bpl.w	800a982 <_dtoa_r+0x3ca>
 800ab00:	4680      	mov	r8, r0
 800ab02:	3801      	subs	r0, #1
 800ab04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ab08:	2b30      	cmp	r3, #48	; 0x30
 800ab0a:	d0f9      	beq.n	800ab00 <_dtoa_r+0x548>
 800ab0c:	4693      	mov	fp, r2
 800ab0e:	e02a      	b.n	800ab66 <_dtoa_r+0x5ae>
 800ab10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab14:	e7d6      	b.n	800aac4 <_dtoa_r+0x50c>
 800ab16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ab1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ab26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ab2a:	ee15 3a10 	vmov	r3, s10
 800ab2e:	3330      	adds	r3, #48	; 0x30
 800ab30:	f808 3b01 	strb.w	r3, [r8], #1
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	eba8 0303 	sub.w	r3, r8, r3
 800ab3a:	4599      	cmp	r9, r3
 800ab3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ab40:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ab44:	d133      	bne.n	800abae <_dtoa_r+0x5f6>
 800ab46:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ab4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab52:	dc1a      	bgt.n	800ab8a <_dtoa_r+0x5d2>
 800ab54:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	d103      	bne.n	800ab66 <_dtoa_r+0x5ae>
 800ab5e:	ee15 3a10 	vmov	r3, s10
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	d411      	bmi.n	800ab8a <_dtoa_r+0x5d2>
 800ab66:	4629      	mov	r1, r5
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f000 fbd1 	bl	800b310 <_Bfree>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab72:	f888 3000 	strb.w	r3, [r8]
 800ab76:	f10b 0301 	add.w	r3, fp, #1
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f43f ad69 	beq.w	800a656 <_dtoa_r+0x9e>
 800ab84:	f8c3 8000 	str.w	r8, [r3]
 800ab88:	e565      	b.n	800a656 <_dtoa_r+0x9e>
 800ab8a:	465a      	mov	r2, fp
 800ab8c:	4643      	mov	r3, r8
 800ab8e:	4698      	mov	r8, r3
 800ab90:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ab94:	2939      	cmp	r1, #57	; 0x39
 800ab96:	d106      	bne.n	800aba6 <_dtoa_r+0x5ee>
 800ab98:	9901      	ldr	r1, [sp, #4]
 800ab9a:	4299      	cmp	r1, r3
 800ab9c:	d1f7      	bne.n	800ab8e <_dtoa_r+0x5d6>
 800ab9e:	9801      	ldr	r0, [sp, #4]
 800aba0:	2130      	movs	r1, #48	; 0x30
 800aba2:	3201      	adds	r2, #1
 800aba4:	7001      	strb	r1, [r0, #0]
 800aba6:	7819      	ldrb	r1, [r3, #0]
 800aba8:	3101      	adds	r1, #1
 800abaa:	7019      	strb	r1, [r3, #0]
 800abac:	e7ae      	b.n	800ab0c <_dtoa_r+0x554>
 800abae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abba:	d1b2      	bne.n	800ab22 <_dtoa_r+0x56a>
 800abbc:	e7d3      	b.n	800ab66 <_dtoa_r+0x5ae>
 800abbe:	bf00      	nop
 800abc0:	0800c2f0 	.word	0x0800c2f0
 800abc4:	0800c2c8 	.word	0x0800c2c8
 800abc8:	9907      	ldr	r1, [sp, #28]
 800abca:	2900      	cmp	r1, #0
 800abcc:	f000 80d0 	beq.w	800ad70 <_dtoa_r+0x7b8>
 800abd0:	9906      	ldr	r1, [sp, #24]
 800abd2:	2901      	cmp	r1, #1
 800abd4:	f300 80b4 	bgt.w	800ad40 <_dtoa_r+0x788>
 800abd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abda:	2900      	cmp	r1, #0
 800abdc:	f000 80ac 	beq.w	800ad38 <_dtoa_r+0x780>
 800abe0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abe4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abe8:	461c      	mov	r4, r3
 800abea:	9309      	str	r3, [sp, #36]	; 0x24
 800abec:	9b04      	ldr	r3, [sp, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	9b05      	ldr	r3, [sp, #20]
 800abf4:	2101      	movs	r1, #1
 800abf6:	4413      	add	r3, r2
 800abf8:	4630      	mov	r0, r6
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	f000 fc3e 	bl	800b47c <__i2b>
 800ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac02:	4607      	mov	r7, r0
 800ac04:	f1b8 0f00 	cmp.w	r8, #0
 800ac08:	d00d      	beq.n	800ac26 <_dtoa_r+0x66e>
 800ac0a:	9a05      	ldr	r2, [sp, #20]
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	dd0a      	ble.n	800ac26 <_dtoa_r+0x66e>
 800ac10:	4542      	cmp	r2, r8
 800ac12:	9904      	ldr	r1, [sp, #16]
 800ac14:	bfa8      	it	ge
 800ac16:	4642      	movge	r2, r8
 800ac18:	1a89      	subs	r1, r1, r2
 800ac1a:	9104      	str	r1, [sp, #16]
 800ac1c:	9905      	ldr	r1, [sp, #20]
 800ac1e:	eba8 0802 	sub.w	r8, r8, r2
 800ac22:	1a8a      	subs	r2, r1, r2
 800ac24:	9205      	str	r2, [sp, #20]
 800ac26:	b303      	cbz	r3, 800ac6a <_dtoa_r+0x6b2>
 800ac28:	9a07      	ldr	r2, [sp, #28]
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	f000 80a5 	beq.w	800ad7a <_dtoa_r+0x7c2>
 800ac30:	2c00      	cmp	r4, #0
 800ac32:	dd13      	ble.n	800ac5c <_dtoa_r+0x6a4>
 800ac34:	4639      	mov	r1, r7
 800ac36:	4622      	mov	r2, r4
 800ac38:	4630      	mov	r0, r6
 800ac3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac3c:	f000 fcde 	bl	800b5fc <__pow5mult>
 800ac40:	462a      	mov	r2, r5
 800ac42:	4601      	mov	r1, r0
 800ac44:	4607      	mov	r7, r0
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 fc2e 	bl	800b4a8 <__multiply>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	9009      	str	r0, [sp, #36]	; 0x24
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 fb5d 	bl	800b310 <_Bfree>
 800ac56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac5a:	4615      	mov	r5, r2
 800ac5c:	1b1a      	subs	r2, r3, r4
 800ac5e:	d004      	beq.n	800ac6a <_dtoa_r+0x6b2>
 800ac60:	4629      	mov	r1, r5
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 fcca 	bl	800b5fc <__pow5mult>
 800ac68:	4605      	mov	r5, r0
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 fc05 	bl	800b47c <__i2b>
 800ac72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	f340 8081 	ble.w	800ad7e <_dtoa_r+0x7c6>
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4601      	mov	r1, r0
 800ac80:	4630      	mov	r0, r6
 800ac82:	f000 fcbb 	bl	800b5fc <__pow5mult>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	dd7a      	ble.n	800ad84 <_dtoa_r+0x7cc>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9309      	str	r3, [sp, #36]	; 0x24
 800ac92:	6922      	ldr	r2, [r4, #16]
 800ac94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ac98:	6910      	ldr	r0, [r2, #16]
 800ac9a:	f000 fba1 	bl	800b3e0 <__hi0bits>
 800ac9e:	f1c0 0020 	rsb	r0, r0, #32
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	4418      	add	r0, r3
 800aca6:	f010 001f 	ands.w	r0, r0, #31
 800acaa:	f000 8093 	beq.w	800add4 <_dtoa_r+0x81c>
 800acae:	f1c0 0220 	rsb	r2, r0, #32
 800acb2:	2a04      	cmp	r2, #4
 800acb4:	f340 8085 	ble.w	800adc2 <_dtoa_r+0x80a>
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	f1c0 001c 	rsb	r0, r0, #28
 800acbe:	4403      	add	r3, r0
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	4480      	add	r8, r0
 800acc6:	4403      	add	r3, r0
 800acc8:	9305      	str	r3, [sp, #20]
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd05      	ble.n	800acdc <_dtoa_r+0x724>
 800acd0:	4629      	mov	r1, r5
 800acd2:	461a      	mov	r2, r3
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 fceb 	bl	800b6b0 <__lshift>
 800acda:	4605      	mov	r5, r0
 800acdc:	9b05      	ldr	r3, [sp, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dd05      	ble.n	800acee <_dtoa_r+0x736>
 800ace2:	4621      	mov	r1, r4
 800ace4:	461a      	mov	r2, r3
 800ace6:	4630      	mov	r0, r6
 800ace8:	f000 fce2 	bl	800b6b0 <__lshift>
 800acec:	4604      	mov	r4, r0
 800acee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d071      	beq.n	800add8 <_dtoa_r+0x820>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4628      	mov	r0, r5
 800acf8:	f000 fd46 	bl	800b788 <__mcmp>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	da6b      	bge.n	800add8 <_dtoa_r+0x820>
 800ad00:	2300      	movs	r3, #0
 800ad02:	4629      	mov	r1, r5
 800ad04:	220a      	movs	r2, #10
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 fb24 	bl	800b354 <__multadd>
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad12:	4605      	mov	r5, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 8197 	beq.w	800b048 <_dtoa_r+0xa90>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	220a      	movs	r2, #10
 800ad20:	4630      	mov	r0, r6
 800ad22:	f000 fb17 	bl	800b354 <__multadd>
 800ad26:	f1ba 0f00 	cmp.w	sl, #0
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	f300 8093 	bgt.w	800ae56 <_dtoa_r+0x89e>
 800ad30:	9b06      	ldr	r3, [sp, #24]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	dc57      	bgt.n	800ade6 <_dtoa_r+0x82e>
 800ad36:	e08e      	b.n	800ae56 <_dtoa_r+0x89e>
 800ad38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad3e:	e751      	b.n	800abe4 <_dtoa_r+0x62c>
 800ad40:	f109 34ff 	add.w	r4, r9, #4294967295
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	bfbf      	itttt	lt
 800ad48:	1ae2      	sublt	r2, r4, r3
 800ad4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ad4c:	189b      	addlt	r3, r3, r2
 800ad4e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ad50:	bfae      	itee	ge
 800ad52:	1b1c      	subge	r4, r3, r4
 800ad54:	4623      	movlt	r3, r4
 800ad56:	2400      	movlt	r4, #0
 800ad58:	f1b9 0f00 	cmp.w	r9, #0
 800ad5c:	bfb5      	itete	lt
 800ad5e:	9a04      	ldrlt	r2, [sp, #16]
 800ad60:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ad64:	eba2 0809 	sublt.w	r8, r2, r9
 800ad68:	464a      	movge	r2, r9
 800ad6a:	bfb8      	it	lt
 800ad6c:	2200      	movlt	r2, #0
 800ad6e:	e73c      	b.n	800abea <_dtoa_r+0x632>
 800ad70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad74:	9f07      	ldr	r7, [sp, #28]
 800ad76:	461c      	mov	r4, r3
 800ad78:	e744      	b.n	800ac04 <_dtoa_r+0x64c>
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	e770      	b.n	800ac60 <_dtoa_r+0x6a8>
 800ad7e:	9b06      	ldr	r3, [sp, #24]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	dc18      	bgt.n	800adb6 <_dtoa_r+0x7fe>
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	b9b3      	cbnz	r3, 800adb6 <_dtoa_r+0x7fe>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ad8e:	b9a2      	cbnz	r2, 800adba <_dtoa_r+0x802>
 800ad90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad94:	0d12      	lsrs	r2, r2, #20
 800ad96:	0512      	lsls	r2, r2, #20
 800ad98:	b18a      	cbz	r2, 800adbe <_dtoa_r+0x806>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	3301      	adds	r3, #1
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	2301      	movs	r3, #1
 800ada8:	9309      	str	r3, [sp, #36]	; 0x24
 800adaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adac:	2b00      	cmp	r3, #0
 800adae:	f47f af70 	bne.w	800ac92 <_dtoa_r+0x6da>
 800adb2:	2001      	movs	r0, #1
 800adb4:	e775      	b.n	800aca2 <_dtoa_r+0x6ea>
 800adb6:	2300      	movs	r3, #0
 800adb8:	e7f6      	b.n	800ada8 <_dtoa_r+0x7f0>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	e7f4      	b.n	800ada8 <_dtoa_r+0x7f0>
 800adbe:	9209      	str	r2, [sp, #36]	; 0x24
 800adc0:	e7f3      	b.n	800adaa <_dtoa_r+0x7f2>
 800adc2:	d082      	beq.n	800acca <_dtoa_r+0x712>
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	321c      	adds	r2, #28
 800adc8:	4413      	add	r3, r2
 800adca:	9304      	str	r3, [sp, #16]
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	4490      	add	r8, r2
 800add0:	4413      	add	r3, r2
 800add2:	e779      	b.n	800acc8 <_dtoa_r+0x710>
 800add4:	4602      	mov	r2, r0
 800add6:	e7f5      	b.n	800adc4 <_dtoa_r+0x80c>
 800add8:	f1b9 0f00 	cmp.w	r9, #0
 800addc:	dc36      	bgt.n	800ae4c <_dtoa_r+0x894>
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	dd33      	ble.n	800ae4c <_dtoa_r+0x894>
 800ade4:	46ca      	mov	sl, r9
 800ade6:	f1ba 0f00 	cmp.w	sl, #0
 800adea:	d10d      	bne.n	800ae08 <_dtoa_r+0x850>
 800adec:	4621      	mov	r1, r4
 800adee:	4653      	mov	r3, sl
 800adf0:	2205      	movs	r2, #5
 800adf2:	4630      	mov	r0, r6
 800adf4:	f000 faae 	bl	800b354 <__multadd>
 800adf8:	4601      	mov	r1, r0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4628      	mov	r0, r5
 800adfe:	f000 fcc3 	bl	800b788 <__mcmp>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f73f ade4 	bgt.w	800a9d0 <_dtoa_r+0x418>
 800ae08:	9b08      	ldr	r3, [sp, #32]
 800ae0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae0e:	ea6f 0b03 	mvn.w	fp, r3
 800ae12:	f04f 0900 	mov.w	r9, #0
 800ae16:	4621      	mov	r1, r4
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f000 fa79 	bl	800b310 <_Bfree>
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	f43f aea1 	beq.w	800ab66 <_dtoa_r+0x5ae>
 800ae24:	f1b9 0f00 	cmp.w	r9, #0
 800ae28:	d005      	beq.n	800ae36 <_dtoa_r+0x87e>
 800ae2a:	45b9      	cmp	r9, r7
 800ae2c:	d003      	beq.n	800ae36 <_dtoa_r+0x87e>
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4630      	mov	r0, r6
 800ae32:	f000 fa6d 	bl	800b310 <_Bfree>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 fa69 	bl	800b310 <_Bfree>
 800ae3e:	e692      	b.n	800ab66 <_dtoa_r+0x5ae>
 800ae40:	2400      	movs	r4, #0
 800ae42:	4627      	mov	r7, r4
 800ae44:	e7e0      	b.n	800ae08 <_dtoa_r+0x850>
 800ae46:	4693      	mov	fp, r2
 800ae48:	4627      	mov	r7, r4
 800ae4a:	e5c1      	b.n	800a9d0 <_dtoa_r+0x418>
 800ae4c:	9b07      	ldr	r3, [sp, #28]
 800ae4e:	46ca      	mov	sl, r9
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8100 	beq.w	800b056 <_dtoa_r+0xa9e>
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	dd05      	ble.n	800ae68 <_dtoa_r+0x8b0>
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4642      	mov	r2, r8
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 fc25 	bl	800b6b0 <__lshift>
 800ae66:	4607      	mov	r7, r0
 800ae68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d05d      	beq.n	800af2a <_dtoa_r+0x972>
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 fa0d 	bl	800b290 <_Balloc>
 800ae76:	4680      	mov	r8, r0
 800ae78:	b928      	cbnz	r0, 800ae86 <_dtoa_r+0x8ce>
 800ae7a:	4b82      	ldr	r3, [pc, #520]	; (800b084 <_dtoa_r+0xacc>)
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ae82:	f7ff bbb1 	b.w	800a5e8 <_dtoa_r+0x30>
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	3202      	adds	r2, #2
 800ae8a:	0092      	lsls	r2, r2, #2
 800ae8c:	f107 010c 	add.w	r1, r7, #12
 800ae90:	300c      	adds	r0, #12
 800ae92:	f7ff fafa 	bl	800a48a <memcpy>
 800ae96:	2201      	movs	r2, #1
 800ae98:	4641      	mov	r1, r8
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f000 fc08 	bl	800b6b0 <__lshift>
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	3301      	adds	r3, #1
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	4453      	add	r3, sl
 800aeaa:	9308      	str	r3, [sp, #32]
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	46b9      	mov	r9, r7
 800aeb4:	9307      	str	r3, [sp, #28]
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	4621      	mov	r1, r4
 800aebc:	3b01      	subs	r3, #1
 800aebe:	4628      	mov	r0, r5
 800aec0:	9302      	str	r3, [sp, #8]
 800aec2:	f7ff faf0 	bl	800a4a6 <quorem>
 800aec6:	4603      	mov	r3, r0
 800aec8:	3330      	adds	r3, #48	; 0x30
 800aeca:	9005      	str	r0, [sp, #20]
 800aecc:	4649      	mov	r1, r9
 800aece:	4628      	mov	r0, r5
 800aed0:	9309      	str	r3, [sp, #36]	; 0x24
 800aed2:	f000 fc59 	bl	800b788 <__mcmp>
 800aed6:	463a      	mov	r2, r7
 800aed8:	4682      	mov	sl, r0
 800aeda:	4621      	mov	r1, r4
 800aedc:	4630      	mov	r0, r6
 800aede:	f000 fc6f 	bl	800b7c0 <__mdiff>
 800aee2:	68c2      	ldr	r2, [r0, #12]
 800aee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee6:	4680      	mov	r8, r0
 800aee8:	bb0a      	cbnz	r2, 800af2e <_dtoa_r+0x976>
 800aeea:	4601      	mov	r1, r0
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 fc4b 	bl	800b788 <__mcmp>
 800aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef4:	4602      	mov	r2, r0
 800aef6:	4641      	mov	r1, r8
 800aef8:	4630      	mov	r0, r6
 800aefa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800aefe:	f000 fa07 	bl	800b310 <_Bfree>
 800af02:	9b06      	ldr	r3, [sp, #24]
 800af04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af06:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af0a:	ea43 0102 	orr.w	r1, r3, r2
 800af0e:	9b07      	ldr	r3, [sp, #28]
 800af10:	4319      	orrs	r1, r3
 800af12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af14:	d10d      	bne.n	800af32 <_dtoa_r+0x97a>
 800af16:	2b39      	cmp	r3, #57	; 0x39
 800af18:	d029      	beq.n	800af6e <_dtoa_r+0x9b6>
 800af1a:	f1ba 0f00 	cmp.w	sl, #0
 800af1e:	dd01      	ble.n	800af24 <_dtoa_r+0x96c>
 800af20:	9b05      	ldr	r3, [sp, #20]
 800af22:	3331      	adds	r3, #49	; 0x31
 800af24:	9a02      	ldr	r2, [sp, #8]
 800af26:	7013      	strb	r3, [r2, #0]
 800af28:	e775      	b.n	800ae16 <_dtoa_r+0x85e>
 800af2a:	4638      	mov	r0, r7
 800af2c:	e7b8      	b.n	800aea0 <_dtoa_r+0x8e8>
 800af2e:	2201      	movs	r2, #1
 800af30:	e7e1      	b.n	800aef6 <_dtoa_r+0x93e>
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	db06      	blt.n	800af46 <_dtoa_r+0x98e>
 800af38:	9906      	ldr	r1, [sp, #24]
 800af3a:	ea41 0a0a 	orr.w	sl, r1, sl
 800af3e:	9907      	ldr	r1, [sp, #28]
 800af40:	ea5a 0a01 	orrs.w	sl, sl, r1
 800af44:	d120      	bne.n	800af88 <_dtoa_r+0x9d0>
 800af46:	2a00      	cmp	r2, #0
 800af48:	ddec      	ble.n	800af24 <_dtoa_r+0x96c>
 800af4a:	4629      	mov	r1, r5
 800af4c:	2201      	movs	r2, #1
 800af4e:	4630      	mov	r0, r6
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	f000 fbad 	bl	800b6b0 <__lshift>
 800af56:	4621      	mov	r1, r4
 800af58:	4605      	mov	r5, r0
 800af5a:	f000 fc15 	bl	800b788 <__mcmp>
 800af5e:	2800      	cmp	r0, #0
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	dc02      	bgt.n	800af6a <_dtoa_r+0x9b2>
 800af64:	d1de      	bne.n	800af24 <_dtoa_r+0x96c>
 800af66:	07da      	lsls	r2, r3, #31
 800af68:	d5dc      	bpl.n	800af24 <_dtoa_r+0x96c>
 800af6a:	2b39      	cmp	r3, #57	; 0x39
 800af6c:	d1d8      	bne.n	800af20 <_dtoa_r+0x968>
 800af6e:	9a02      	ldr	r2, [sp, #8]
 800af70:	2339      	movs	r3, #57	; 0x39
 800af72:	7013      	strb	r3, [r2, #0]
 800af74:	4643      	mov	r3, r8
 800af76:	4698      	mov	r8, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800af7e:	2a39      	cmp	r2, #57	; 0x39
 800af80:	d051      	beq.n	800b026 <_dtoa_r+0xa6e>
 800af82:	3201      	adds	r2, #1
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	e746      	b.n	800ae16 <_dtoa_r+0x85e>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	dd03      	ble.n	800af94 <_dtoa_r+0x9dc>
 800af8c:	2b39      	cmp	r3, #57	; 0x39
 800af8e:	d0ee      	beq.n	800af6e <_dtoa_r+0x9b6>
 800af90:	3301      	adds	r3, #1
 800af92:	e7c7      	b.n	800af24 <_dtoa_r+0x96c>
 800af94:	9a04      	ldr	r2, [sp, #16]
 800af96:	9908      	ldr	r1, [sp, #32]
 800af98:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af9c:	428a      	cmp	r2, r1
 800af9e:	d02b      	beq.n	800aff8 <_dtoa_r+0xa40>
 800afa0:	4629      	mov	r1, r5
 800afa2:	2300      	movs	r3, #0
 800afa4:	220a      	movs	r2, #10
 800afa6:	4630      	mov	r0, r6
 800afa8:	f000 f9d4 	bl	800b354 <__multadd>
 800afac:	45b9      	cmp	r9, r7
 800afae:	4605      	mov	r5, r0
 800afb0:	f04f 0300 	mov.w	r3, #0
 800afb4:	f04f 020a 	mov.w	r2, #10
 800afb8:	4649      	mov	r1, r9
 800afba:	4630      	mov	r0, r6
 800afbc:	d107      	bne.n	800afce <_dtoa_r+0xa16>
 800afbe:	f000 f9c9 	bl	800b354 <__multadd>
 800afc2:	4681      	mov	r9, r0
 800afc4:	4607      	mov	r7, r0
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	3301      	adds	r3, #1
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	e774      	b.n	800aeb8 <_dtoa_r+0x900>
 800afce:	f000 f9c1 	bl	800b354 <__multadd>
 800afd2:	4639      	mov	r1, r7
 800afd4:	4681      	mov	r9, r0
 800afd6:	2300      	movs	r3, #0
 800afd8:	220a      	movs	r2, #10
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f9ba 	bl	800b354 <__multadd>
 800afe0:	4607      	mov	r7, r0
 800afe2:	e7f0      	b.n	800afc6 <_dtoa_r+0xa0e>
 800afe4:	f1ba 0f00 	cmp.w	sl, #0
 800afe8:	9a01      	ldr	r2, [sp, #4]
 800afea:	bfcc      	ite	gt
 800afec:	46d0      	movgt	r8, sl
 800afee:	f04f 0801 	movle.w	r8, #1
 800aff2:	4490      	add	r8, r2
 800aff4:	f04f 0900 	mov.w	r9, #0
 800aff8:	4629      	mov	r1, r5
 800affa:	2201      	movs	r2, #1
 800affc:	4630      	mov	r0, r6
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	f000 fb56 	bl	800b6b0 <__lshift>
 800b004:	4621      	mov	r1, r4
 800b006:	4605      	mov	r5, r0
 800b008:	f000 fbbe 	bl	800b788 <__mcmp>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dcb1      	bgt.n	800af74 <_dtoa_r+0x9bc>
 800b010:	d102      	bne.n	800b018 <_dtoa_r+0xa60>
 800b012:	9b02      	ldr	r3, [sp, #8]
 800b014:	07db      	lsls	r3, r3, #31
 800b016:	d4ad      	bmi.n	800af74 <_dtoa_r+0x9bc>
 800b018:	4643      	mov	r3, r8
 800b01a:	4698      	mov	r8, r3
 800b01c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b020:	2a30      	cmp	r2, #48	; 0x30
 800b022:	d0fa      	beq.n	800b01a <_dtoa_r+0xa62>
 800b024:	e6f7      	b.n	800ae16 <_dtoa_r+0x85e>
 800b026:	9a01      	ldr	r2, [sp, #4]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d1a4      	bne.n	800af76 <_dtoa_r+0x9be>
 800b02c:	f10b 0b01 	add.w	fp, fp, #1
 800b030:	2331      	movs	r3, #49	; 0x31
 800b032:	e778      	b.n	800af26 <_dtoa_r+0x96e>
 800b034:	4b14      	ldr	r3, [pc, #80]	; (800b088 <_dtoa_r+0xad0>)
 800b036:	f7ff bb2a 	b.w	800a68e <_dtoa_r+0xd6>
 800b03a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f47f ab05 	bne.w	800a64c <_dtoa_r+0x94>
 800b042:	4b12      	ldr	r3, [pc, #72]	; (800b08c <_dtoa_r+0xad4>)
 800b044:	f7ff bb23 	b.w	800a68e <_dtoa_r+0xd6>
 800b048:	f1ba 0f00 	cmp.w	sl, #0
 800b04c:	dc03      	bgt.n	800b056 <_dtoa_r+0xa9e>
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	2b02      	cmp	r3, #2
 800b052:	f73f aec8 	bgt.w	800ade6 <_dtoa_r+0x82e>
 800b056:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b05a:	4621      	mov	r1, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	f7ff fa22 	bl	800a4a6 <quorem>
 800b062:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b066:	f808 3b01 	strb.w	r3, [r8], #1
 800b06a:	9a01      	ldr	r2, [sp, #4]
 800b06c:	eba8 0202 	sub.w	r2, r8, r2
 800b070:	4592      	cmp	sl, r2
 800b072:	ddb7      	ble.n	800afe4 <_dtoa_r+0xa2c>
 800b074:	4629      	mov	r1, r5
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	4630      	mov	r0, r6
 800b07c:	f000 f96a 	bl	800b354 <__multadd>
 800b080:	4605      	mov	r5, r0
 800b082:	e7ea      	b.n	800b05a <_dtoa_r+0xaa2>
 800b084:	0800c258 	.word	0x0800c258
 800b088:	0800c1b8 	.word	0x0800c1b8
 800b08c:	0800c1dc 	.word	0x0800c1dc

0800b090 <_free_r>:
 800b090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b092:	2900      	cmp	r1, #0
 800b094:	d044      	beq.n	800b120 <_free_r+0x90>
 800b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09a:	9001      	str	r0, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a2:	bfb8      	it	lt
 800b0a4:	18e4      	addlt	r4, r4, r3
 800b0a6:	f000 f8e7 	bl	800b278 <__malloc_lock>
 800b0aa:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <_free_r+0x94>)
 800b0ac:	9801      	ldr	r0, [sp, #4]
 800b0ae:	6813      	ldr	r3, [r2, #0]
 800b0b0:	b933      	cbnz	r3, 800b0c0 <_free_r+0x30>
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	6014      	str	r4, [r2, #0]
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0bc:	f000 b8e2 	b.w	800b284 <__malloc_unlock>
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d908      	bls.n	800b0d6 <_free_r+0x46>
 800b0c4:	6825      	ldr	r5, [r4, #0]
 800b0c6:	1961      	adds	r1, r4, r5
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf01      	itttt	eq
 800b0cc:	6819      	ldreq	r1, [r3, #0]
 800b0ce:	685b      	ldreq	r3, [r3, #4]
 800b0d0:	1949      	addeq	r1, r1, r5
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	e7ed      	b.n	800b0b2 <_free_r+0x22>
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b10b      	cbz	r3, 800b0e0 <_free_r+0x50>
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d9fa      	bls.n	800b0d6 <_free_r+0x46>
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	1855      	adds	r5, r2, r1
 800b0e4:	42a5      	cmp	r5, r4
 800b0e6:	d10b      	bne.n	800b100 <_free_r+0x70>
 800b0e8:	6824      	ldr	r4, [r4, #0]
 800b0ea:	4421      	add	r1, r4
 800b0ec:	1854      	adds	r4, r2, r1
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	d1e0      	bne.n	800b0b6 <_free_r+0x26>
 800b0f4:	681c      	ldr	r4, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	6053      	str	r3, [r2, #4]
 800b0fa:	440c      	add	r4, r1
 800b0fc:	6014      	str	r4, [r2, #0]
 800b0fe:	e7da      	b.n	800b0b6 <_free_r+0x26>
 800b100:	d902      	bls.n	800b108 <_free_r+0x78>
 800b102:	230c      	movs	r3, #12
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	e7d6      	b.n	800b0b6 <_free_r+0x26>
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf04      	itt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	6063      	str	r3, [r4, #4]
 800b116:	bf04      	itt	eq
 800b118:	1949      	addeq	r1, r1, r5
 800b11a:	6021      	streq	r1, [r4, #0]
 800b11c:	6054      	str	r4, [r2, #4]
 800b11e:	e7ca      	b.n	800b0b6 <_free_r+0x26>
 800b120:	b003      	add	sp, #12
 800b122:	bd30      	pop	{r4, r5, pc}
 800b124:	24004f70 	.word	0x24004f70

0800b128 <malloc>:
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <malloc+0xc>)
 800b12a:	4601      	mov	r1, r0
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	f000 b823 	b.w	800b178 <_malloc_r>
 800b132:	bf00      	nop
 800b134:	2400006c 	.word	0x2400006c

0800b138 <sbrk_aligned>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	4e0e      	ldr	r6, [pc, #56]	; (800b174 <sbrk_aligned+0x3c>)
 800b13c:	460c      	mov	r4, r1
 800b13e:	6831      	ldr	r1, [r6, #0]
 800b140:	4605      	mov	r5, r0
 800b142:	b911      	cbnz	r1, 800b14a <sbrk_aligned+0x12>
 800b144:	f000 fe96 	bl	800be74 <_sbrk_r>
 800b148:	6030      	str	r0, [r6, #0]
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 fe91 	bl	800be74 <_sbrk_r>
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	d00a      	beq.n	800b16c <sbrk_aligned+0x34>
 800b156:	1cc4      	adds	r4, r0, #3
 800b158:	f024 0403 	bic.w	r4, r4, #3
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d007      	beq.n	800b170 <sbrk_aligned+0x38>
 800b160:	1a21      	subs	r1, r4, r0
 800b162:	4628      	mov	r0, r5
 800b164:	f000 fe86 	bl	800be74 <_sbrk_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d101      	bne.n	800b170 <sbrk_aligned+0x38>
 800b16c:	f04f 34ff 	mov.w	r4, #4294967295
 800b170:	4620      	mov	r0, r4
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	24004f74 	.word	0x24004f74

0800b178 <_malloc_r>:
 800b178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b17c:	1ccd      	adds	r5, r1, #3
 800b17e:	f025 0503 	bic.w	r5, r5, #3
 800b182:	3508      	adds	r5, #8
 800b184:	2d0c      	cmp	r5, #12
 800b186:	bf38      	it	cc
 800b188:	250c      	movcc	r5, #12
 800b18a:	2d00      	cmp	r5, #0
 800b18c:	4607      	mov	r7, r0
 800b18e:	db01      	blt.n	800b194 <_malloc_r+0x1c>
 800b190:	42a9      	cmp	r1, r5
 800b192:	d905      	bls.n	800b1a0 <_malloc_r+0x28>
 800b194:	230c      	movs	r3, #12
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2600      	movs	r6, #0
 800b19a:	4630      	mov	r0, r6
 800b19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b274 <_malloc_r+0xfc>
 800b1a4:	f000 f868 	bl	800b278 <__malloc_lock>
 800b1a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ac:	461c      	mov	r4, r3
 800b1ae:	bb5c      	cbnz	r4, 800b208 <_malloc_r+0x90>
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	f7ff ffc0 	bl	800b138 <sbrk_aligned>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	d155      	bne.n	800b26a <_malloc_r+0xf2>
 800b1be:	f8d8 4000 	ldr.w	r4, [r8]
 800b1c2:	4626      	mov	r6, r4
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	d145      	bne.n	800b254 <_malloc_r+0xdc>
 800b1c8:	2c00      	cmp	r4, #0
 800b1ca:	d048      	beq.n	800b25e <_malloc_r+0xe6>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	eb04 0903 	add.w	r9, r4, r3
 800b1d6:	f000 fe4d 	bl	800be74 <_sbrk_r>
 800b1da:	4581      	cmp	r9, r0
 800b1dc:	d13f      	bne.n	800b25e <_malloc_r+0xe6>
 800b1de:	6821      	ldr	r1, [r4, #0]
 800b1e0:	1a6d      	subs	r5, r5, r1
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7ff ffa7 	bl	800b138 <sbrk_aligned>
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d037      	beq.n	800b25e <_malloc_r+0xe6>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	442b      	add	r3, r5
 800b1f2:	6023      	str	r3, [r4, #0]
 800b1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d038      	beq.n	800b26e <_malloc_r+0xf6>
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	42a2      	cmp	r2, r4
 800b200:	d12b      	bne.n	800b25a <_malloc_r+0xe2>
 800b202:	2200      	movs	r2, #0
 800b204:	605a      	str	r2, [r3, #4]
 800b206:	e00f      	b.n	800b228 <_malloc_r+0xb0>
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	1b52      	subs	r2, r2, r5
 800b20c:	d41f      	bmi.n	800b24e <_malloc_r+0xd6>
 800b20e:	2a0b      	cmp	r2, #11
 800b210:	d917      	bls.n	800b242 <_malloc_r+0xca>
 800b212:	1961      	adds	r1, r4, r5
 800b214:	42a3      	cmp	r3, r4
 800b216:	6025      	str	r5, [r4, #0]
 800b218:	bf18      	it	ne
 800b21a:	6059      	strne	r1, [r3, #4]
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	bf08      	it	eq
 800b220:	f8c8 1000 	streq.w	r1, [r8]
 800b224:	5162      	str	r2, [r4, r5]
 800b226:	604b      	str	r3, [r1, #4]
 800b228:	4638      	mov	r0, r7
 800b22a:	f104 060b 	add.w	r6, r4, #11
 800b22e:	f000 f829 	bl	800b284 <__malloc_unlock>
 800b232:	f026 0607 	bic.w	r6, r6, #7
 800b236:	1d23      	adds	r3, r4, #4
 800b238:	1af2      	subs	r2, r6, r3
 800b23a:	d0ae      	beq.n	800b19a <_malloc_r+0x22>
 800b23c:	1b9b      	subs	r3, r3, r6
 800b23e:	50a3      	str	r3, [r4, r2]
 800b240:	e7ab      	b.n	800b19a <_malloc_r+0x22>
 800b242:	42a3      	cmp	r3, r4
 800b244:	6862      	ldr	r2, [r4, #4]
 800b246:	d1dd      	bne.n	800b204 <_malloc_r+0x8c>
 800b248:	f8c8 2000 	str.w	r2, [r8]
 800b24c:	e7ec      	b.n	800b228 <_malloc_r+0xb0>
 800b24e:	4623      	mov	r3, r4
 800b250:	6864      	ldr	r4, [r4, #4]
 800b252:	e7ac      	b.n	800b1ae <_malloc_r+0x36>
 800b254:	4634      	mov	r4, r6
 800b256:	6876      	ldr	r6, [r6, #4]
 800b258:	e7b4      	b.n	800b1c4 <_malloc_r+0x4c>
 800b25a:	4613      	mov	r3, r2
 800b25c:	e7cc      	b.n	800b1f8 <_malloc_r+0x80>
 800b25e:	230c      	movs	r3, #12
 800b260:	603b      	str	r3, [r7, #0]
 800b262:	4638      	mov	r0, r7
 800b264:	f000 f80e 	bl	800b284 <__malloc_unlock>
 800b268:	e797      	b.n	800b19a <_malloc_r+0x22>
 800b26a:	6025      	str	r5, [r4, #0]
 800b26c:	e7dc      	b.n	800b228 <_malloc_r+0xb0>
 800b26e:	605b      	str	r3, [r3, #4]
 800b270:	deff      	udf	#255	; 0xff
 800b272:	bf00      	nop
 800b274:	24004f70 	.word	0x24004f70

0800b278 <__malloc_lock>:
 800b278:	4801      	ldr	r0, [pc, #4]	; (800b280 <__malloc_lock+0x8>)
 800b27a:	f7ff b904 	b.w	800a486 <__retarget_lock_acquire_recursive>
 800b27e:	bf00      	nop
 800b280:	24004f6c 	.word	0x24004f6c

0800b284 <__malloc_unlock>:
 800b284:	4801      	ldr	r0, [pc, #4]	; (800b28c <__malloc_unlock+0x8>)
 800b286:	f7ff b8ff 	b.w	800a488 <__retarget_lock_release_recursive>
 800b28a:	bf00      	nop
 800b28c:	24004f6c 	.word	0x24004f6c

0800b290 <_Balloc>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	69c6      	ldr	r6, [r0, #28]
 800b294:	4604      	mov	r4, r0
 800b296:	460d      	mov	r5, r1
 800b298:	b976      	cbnz	r6, 800b2b8 <_Balloc+0x28>
 800b29a:	2010      	movs	r0, #16
 800b29c:	f7ff ff44 	bl	800b128 <malloc>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	61e0      	str	r0, [r4, #28]
 800b2a4:	b920      	cbnz	r0, 800b2b0 <_Balloc+0x20>
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <_Balloc+0x78>)
 800b2a8:	4818      	ldr	r0, [pc, #96]	; (800b30c <_Balloc+0x7c>)
 800b2aa:	216b      	movs	r1, #107	; 0x6b
 800b2ac:	f000 fdf2 	bl	800be94 <__assert_func>
 800b2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b4:	6006      	str	r6, [r0, #0]
 800b2b6:	60c6      	str	r6, [r0, #12]
 800b2b8:	69e6      	ldr	r6, [r4, #28]
 800b2ba:	68f3      	ldr	r3, [r6, #12]
 800b2bc:	b183      	cbz	r3, 800b2e0 <_Balloc+0x50>
 800b2be:	69e3      	ldr	r3, [r4, #28]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2c6:	b9b8      	cbnz	r0, 800b2f8 <_Balloc+0x68>
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ce:	1d72      	adds	r2, r6, #5
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fdfc 	bl	800bed0 <_calloc_r>
 800b2d8:	b160      	cbz	r0, 800b2f4 <_Balloc+0x64>
 800b2da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2de:	e00e      	b.n	800b2fe <_Balloc+0x6e>
 800b2e0:	2221      	movs	r2, #33	; 0x21
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fdf3 	bl	800bed0 <_calloc_r>
 800b2ea:	69e3      	ldr	r3, [r4, #28]
 800b2ec:	60f0      	str	r0, [r6, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e4      	bne.n	800b2be <_Balloc+0x2e>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	6802      	ldr	r2, [r0, #0]
 800b2fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2fe:	2300      	movs	r3, #0
 800b300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b304:	e7f7      	b.n	800b2f6 <_Balloc+0x66>
 800b306:	bf00      	nop
 800b308:	0800c1e9 	.word	0x0800c1e9
 800b30c:	0800c269 	.word	0x0800c269

0800b310 <_Bfree>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	69c6      	ldr	r6, [r0, #28]
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	b976      	cbnz	r6, 800b338 <_Bfree+0x28>
 800b31a:	2010      	movs	r0, #16
 800b31c:	f7ff ff04 	bl	800b128 <malloc>
 800b320:	4602      	mov	r2, r0
 800b322:	61e8      	str	r0, [r5, #28]
 800b324:	b920      	cbnz	r0, 800b330 <_Bfree+0x20>
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <_Bfree+0x3c>)
 800b328:	4809      	ldr	r0, [pc, #36]	; (800b350 <_Bfree+0x40>)
 800b32a:	218f      	movs	r1, #143	; 0x8f
 800b32c:	f000 fdb2 	bl	800be94 <__assert_func>
 800b330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b334:	6006      	str	r6, [r0, #0]
 800b336:	60c6      	str	r6, [r0, #12]
 800b338:	b13c      	cbz	r4, 800b34a <_Bfree+0x3a>
 800b33a:	69eb      	ldr	r3, [r5, #28]
 800b33c:	6862      	ldr	r2, [r4, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b344:	6021      	str	r1, [r4, #0]
 800b346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	0800c1e9 	.word	0x0800c1e9
 800b350:	0800c269 	.word	0x0800c269

0800b354 <__multadd>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	690d      	ldr	r5, [r1, #16]
 800b35a:	4607      	mov	r7, r0
 800b35c:	460c      	mov	r4, r1
 800b35e:	461e      	mov	r6, r3
 800b360:	f101 0c14 	add.w	ip, r1, #20
 800b364:	2000      	movs	r0, #0
 800b366:	f8dc 3000 	ldr.w	r3, [ip]
 800b36a:	b299      	uxth	r1, r3
 800b36c:	fb02 6101 	mla	r1, r2, r1, r6
 800b370:	0c1e      	lsrs	r6, r3, #16
 800b372:	0c0b      	lsrs	r3, r1, #16
 800b374:	fb02 3306 	mla	r3, r2, r6, r3
 800b378:	b289      	uxth	r1, r1
 800b37a:	3001      	adds	r0, #1
 800b37c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b380:	4285      	cmp	r5, r0
 800b382:	f84c 1b04 	str.w	r1, [ip], #4
 800b386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b38a:	dcec      	bgt.n	800b366 <__multadd+0x12>
 800b38c:	b30e      	cbz	r6, 800b3d2 <__multadd+0x7e>
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	42ab      	cmp	r3, r5
 800b392:	dc19      	bgt.n	800b3c8 <__multadd+0x74>
 800b394:	6861      	ldr	r1, [r4, #4]
 800b396:	4638      	mov	r0, r7
 800b398:	3101      	adds	r1, #1
 800b39a:	f7ff ff79 	bl	800b290 <_Balloc>
 800b39e:	4680      	mov	r8, r0
 800b3a0:	b928      	cbnz	r0, 800b3ae <__multadd+0x5a>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <__multadd+0x84>)
 800b3a6:	480d      	ldr	r0, [pc, #52]	; (800b3dc <__multadd+0x88>)
 800b3a8:	21ba      	movs	r1, #186	; 0xba
 800b3aa:	f000 fd73 	bl	800be94 <__assert_func>
 800b3ae:	6922      	ldr	r2, [r4, #16]
 800b3b0:	3202      	adds	r2, #2
 800b3b2:	f104 010c 	add.w	r1, r4, #12
 800b3b6:	0092      	lsls	r2, r2, #2
 800b3b8:	300c      	adds	r0, #12
 800b3ba:	f7ff f866 	bl	800a48a <memcpy>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff ffa5 	bl	800b310 <_Bfree>
 800b3c6:	4644      	mov	r4, r8
 800b3c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	615e      	str	r6, [r3, #20]
 800b3d0:	6125      	str	r5, [r4, #16]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	0800c258 	.word	0x0800c258
 800b3dc:	0800c269 	.word	0x0800c269

0800b3e0 <__hi0bits>:
 800b3e0:	0c03      	lsrs	r3, r0, #16
 800b3e2:	041b      	lsls	r3, r3, #16
 800b3e4:	b9d3      	cbnz	r3, 800b41c <__hi0bits+0x3c>
 800b3e6:	0400      	lsls	r0, r0, #16
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	0200      	lsleq	r0, r0, #8
 800b3f2:	3308      	addeq	r3, #8
 800b3f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3f8:	bf04      	itt	eq
 800b3fa:	0100      	lsleq	r0, r0, #4
 800b3fc:	3304      	addeq	r3, #4
 800b3fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b402:	bf04      	itt	eq
 800b404:	0080      	lsleq	r0, r0, #2
 800b406:	3302      	addeq	r3, #2
 800b408:	2800      	cmp	r0, #0
 800b40a:	db05      	blt.n	800b418 <__hi0bits+0x38>
 800b40c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b410:	f103 0301 	add.w	r3, r3, #1
 800b414:	bf08      	it	eq
 800b416:	2320      	moveq	r3, #32
 800b418:	4618      	mov	r0, r3
 800b41a:	4770      	bx	lr
 800b41c:	2300      	movs	r3, #0
 800b41e:	e7e4      	b.n	800b3ea <__hi0bits+0xa>

0800b420 <__lo0bits>:
 800b420:	6803      	ldr	r3, [r0, #0]
 800b422:	f013 0207 	ands.w	r2, r3, #7
 800b426:	d00c      	beq.n	800b442 <__lo0bits+0x22>
 800b428:	07d9      	lsls	r1, r3, #31
 800b42a:	d422      	bmi.n	800b472 <__lo0bits+0x52>
 800b42c:	079a      	lsls	r2, r3, #30
 800b42e:	bf49      	itett	mi
 800b430:	085b      	lsrmi	r3, r3, #1
 800b432:	089b      	lsrpl	r3, r3, #2
 800b434:	6003      	strmi	r3, [r0, #0]
 800b436:	2201      	movmi	r2, #1
 800b438:	bf5c      	itt	pl
 800b43a:	6003      	strpl	r3, [r0, #0]
 800b43c:	2202      	movpl	r2, #2
 800b43e:	4610      	mov	r0, r2
 800b440:	4770      	bx	lr
 800b442:	b299      	uxth	r1, r3
 800b444:	b909      	cbnz	r1, 800b44a <__lo0bits+0x2a>
 800b446:	0c1b      	lsrs	r3, r3, #16
 800b448:	2210      	movs	r2, #16
 800b44a:	b2d9      	uxtb	r1, r3
 800b44c:	b909      	cbnz	r1, 800b452 <__lo0bits+0x32>
 800b44e:	3208      	adds	r2, #8
 800b450:	0a1b      	lsrs	r3, r3, #8
 800b452:	0719      	lsls	r1, r3, #28
 800b454:	bf04      	itt	eq
 800b456:	091b      	lsreq	r3, r3, #4
 800b458:	3204      	addeq	r2, #4
 800b45a:	0799      	lsls	r1, r3, #30
 800b45c:	bf04      	itt	eq
 800b45e:	089b      	lsreq	r3, r3, #2
 800b460:	3202      	addeq	r2, #2
 800b462:	07d9      	lsls	r1, r3, #31
 800b464:	d403      	bmi.n	800b46e <__lo0bits+0x4e>
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	f102 0201 	add.w	r2, r2, #1
 800b46c:	d003      	beq.n	800b476 <__lo0bits+0x56>
 800b46e:	6003      	str	r3, [r0, #0]
 800b470:	e7e5      	b.n	800b43e <__lo0bits+0x1e>
 800b472:	2200      	movs	r2, #0
 800b474:	e7e3      	b.n	800b43e <__lo0bits+0x1e>
 800b476:	2220      	movs	r2, #32
 800b478:	e7e1      	b.n	800b43e <__lo0bits+0x1e>
	...

0800b47c <__i2b>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	460c      	mov	r4, r1
 800b480:	2101      	movs	r1, #1
 800b482:	f7ff ff05 	bl	800b290 <_Balloc>
 800b486:	4602      	mov	r2, r0
 800b488:	b928      	cbnz	r0, 800b496 <__i2b+0x1a>
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <__i2b+0x24>)
 800b48c:	4805      	ldr	r0, [pc, #20]	; (800b4a4 <__i2b+0x28>)
 800b48e:	f240 1145 	movw	r1, #325	; 0x145
 800b492:	f000 fcff 	bl	800be94 <__assert_func>
 800b496:	2301      	movs	r3, #1
 800b498:	6144      	str	r4, [r0, #20]
 800b49a:	6103      	str	r3, [r0, #16]
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	bf00      	nop
 800b4a0:	0800c258 	.word	0x0800c258
 800b4a4:	0800c269 	.word	0x0800c269

0800b4a8 <__multiply>:
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	4691      	mov	r9, r2
 800b4ae:	690a      	ldr	r2, [r1, #16]
 800b4b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	bfb8      	it	lt
 800b4b8:	460b      	movlt	r3, r1
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	bfbc      	itt	lt
 800b4be:	464c      	movlt	r4, r9
 800b4c0:	4699      	movlt	r9, r3
 800b4c2:	6927      	ldr	r7, [r4, #16]
 800b4c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	6861      	ldr	r1, [r4, #4]
 800b4cc:	eb07 060a 	add.w	r6, r7, sl
 800b4d0:	42b3      	cmp	r3, r6
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	bfb8      	it	lt
 800b4d6:	3101      	addlt	r1, #1
 800b4d8:	f7ff feda 	bl	800b290 <_Balloc>
 800b4dc:	b930      	cbnz	r0, 800b4ec <__multiply+0x44>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	4b44      	ldr	r3, [pc, #272]	; (800b5f4 <__multiply+0x14c>)
 800b4e2:	4845      	ldr	r0, [pc, #276]	; (800b5f8 <__multiply+0x150>)
 800b4e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b4e8:	f000 fcd4 	bl	800be94 <__assert_func>
 800b4ec:	f100 0514 	add.w	r5, r0, #20
 800b4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	4543      	cmp	r3, r8
 800b4fa:	d321      	bcc.n	800b540 <__multiply+0x98>
 800b4fc:	f104 0314 	add.w	r3, r4, #20
 800b500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b504:	f109 0314 	add.w	r3, r9, #20
 800b508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b50c:	9202      	str	r2, [sp, #8]
 800b50e:	1b3a      	subs	r2, r7, r4
 800b510:	3a15      	subs	r2, #21
 800b512:	f022 0203 	bic.w	r2, r2, #3
 800b516:	3204      	adds	r2, #4
 800b518:	f104 0115 	add.w	r1, r4, #21
 800b51c:	428f      	cmp	r7, r1
 800b51e:	bf38      	it	cc
 800b520:	2204      	movcc	r2, #4
 800b522:	9201      	str	r2, [sp, #4]
 800b524:	9a02      	ldr	r2, [sp, #8]
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d80c      	bhi.n	800b546 <__multiply+0x9e>
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	dd03      	ble.n	800b538 <__multiply+0x90>
 800b530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b534:	2b00      	cmp	r3, #0
 800b536:	d05b      	beq.n	800b5f0 <__multiply+0x148>
 800b538:	6106      	str	r6, [r0, #16]
 800b53a:	b005      	add	sp, #20
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	f843 2b04 	str.w	r2, [r3], #4
 800b544:	e7d8      	b.n	800b4f8 <__multiply+0x50>
 800b546:	f8b3 a000 	ldrh.w	sl, [r3]
 800b54a:	f1ba 0f00 	cmp.w	sl, #0
 800b54e:	d024      	beq.n	800b59a <__multiply+0xf2>
 800b550:	f104 0e14 	add.w	lr, r4, #20
 800b554:	46a9      	mov	r9, r5
 800b556:	f04f 0c00 	mov.w	ip, #0
 800b55a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b55e:	f8d9 1000 	ldr.w	r1, [r9]
 800b562:	fa1f fb82 	uxth.w	fp, r2
 800b566:	b289      	uxth	r1, r1
 800b568:	fb0a 110b 	mla	r1, sl, fp, r1
 800b56c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b570:	f8d9 2000 	ldr.w	r2, [r9]
 800b574:	4461      	add	r1, ip
 800b576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b57a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b57e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b582:	b289      	uxth	r1, r1
 800b584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b588:	4577      	cmp	r7, lr
 800b58a:	f849 1b04 	str.w	r1, [r9], #4
 800b58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b592:	d8e2      	bhi.n	800b55a <__multiply+0xb2>
 800b594:	9a01      	ldr	r2, [sp, #4]
 800b596:	f845 c002 	str.w	ip, [r5, r2]
 800b59a:	9a03      	ldr	r2, [sp, #12]
 800b59c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	d021      	beq.n	800b5ec <__multiply+0x144>
 800b5a8:	6829      	ldr	r1, [r5, #0]
 800b5aa:	f104 0c14 	add.w	ip, r4, #20
 800b5ae:	46ae      	mov	lr, r5
 800b5b0:	f04f 0a00 	mov.w	sl, #0
 800b5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800b5b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5bc:	fb09 220b 	mla	r2, r9, fp, r2
 800b5c0:	4452      	add	r2, sl
 800b5c2:	b289      	uxth	r1, r1
 800b5c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5c8:	f84e 1b04 	str.w	r1, [lr], #4
 800b5cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b5d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5d4:	f8be 1000 	ldrh.w	r1, [lr]
 800b5d8:	fb09 110a 	mla	r1, r9, sl, r1
 800b5dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b5e0:	4567      	cmp	r7, ip
 800b5e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5e6:	d8e5      	bhi.n	800b5b4 <__multiply+0x10c>
 800b5e8:	9a01      	ldr	r2, [sp, #4]
 800b5ea:	50a9      	str	r1, [r5, r2]
 800b5ec:	3504      	adds	r5, #4
 800b5ee:	e799      	b.n	800b524 <__multiply+0x7c>
 800b5f0:	3e01      	subs	r6, #1
 800b5f2:	e79b      	b.n	800b52c <__multiply+0x84>
 800b5f4:	0800c258 	.word	0x0800c258
 800b5f8:	0800c269 	.word	0x0800c269

0800b5fc <__pow5mult>:
 800b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b600:	4615      	mov	r5, r2
 800b602:	f012 0203 	ands.w	r2, r2, #3
 800b606:	4606      	mov	r6, r0
 800b608:	460f      	mov	r7, r1
 800b60a:	d007      	beq.n	800b61c <__pow5mult+0x20>
 800b60c:	4c25      	ldr	r4, [pc, #148]	; (800b6a4 <__pow5mult+0xa8>)
 800b60e:	3a01      	subs	r2, #1
 800b610:	2300      	movs	r3, #0
 800b612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b616:	f7ff fe9d 	bl	800b354 <__multadd>
 800b61a:	4607      	mov	r7, r0
 800b61c:	10ad      	asrs	r5, r5, #2
 800b61e:	d03d      	beq.n	800b69c <__pow5mult+0xa0>
 800b620:	69f4      	ldr	r4, [r6, #28]
 800b622:	b97c      	cbnz	r4, 800b644 <__pow5mult+0x48>
 800b624:	2010      	movs	r0, #16
 800b626:	f7ff fd7f 	bl	800b128 <malloc>
 800b62a:	4602      	mov	r2, r0
 800b62c:	61f0      	str	r0, [r6, #28]
 800b62e:	b928      	cbnz	r0, 800b63c <__pow5mult+0x40>
 800b630:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <__pow5mult+0xac>)
 800b632:	481e      	ldr	r0, [pc, #120]	; (800b6ac <__pow5mult+0xb0>)
 800b634:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b638:	f000 fc2c 	bl	800be94 <__assert_func>
 800b63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b640:	6004      	str	r4, [r0, #0]
 800b642:	60c4      	str	r4, [r0, #12]
 800b644:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b64c:	b94c      	cbnz	r4, 800b662 <__pow5mult+0x66>
 800b64e:	f240 2171 	movw	r1, #625	; 0x271
 800b652:	4630      	mov	r0, r6
 800b654:	f7ff ff12 	bl	800b47c <__i2b>
 800b658:	2300      	movs	r3, #0
 800b65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b65e:	4604      	mov	r4, r0
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	f04f 0900 	mov.w	r9, #0
 800b666:	07eb      	lsls	r3, r5, #31
 800b668:	d50a      	bpl.n	800b680 <__pow5mult+0x84>
 800b66a:	4639      	mov	r1, r7
 800b66c:	4622      	mov	r2, r4
 800b66e:	4630      	mov	r0, r6
 800b670:	f7ff ff1a 	bl	800b4a8 <__multiply>
 800b674:	4639      	mov	r1, r7
 800b676:	4680      	mov	r8, r0
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff fe49 	bl	800b310 <_Bfree>
 800b67e:	4647      	mov	r7, r8
 800b680:	106d      	asrs	r5, r5, #1
 800b682:	d00b      	beq.n	800b69c <__pow5mult+0xa0>
 800b684:	6820      	ldr	r0, [r4, #0]
 800b686:	b938      	cbnz	r0, 800b698 <__pow5mult+0x9c>
 800b688:	4622      	mov	r2, r4
 800b68a:	4621      	mov	r1, r4
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff ff0b 	bl	800b4a8 <__multiply>
 800b692:	6020      	str	r0, [r4, #0]
 800b694:	f8c0 9000 	str.w	r9, [r0]
 800b698:	4604      	mov	r4, r0
 800b69a:	e7e4      	b.n	800b666 <__pow5mult+0x6a>
 800b69c:	4638      	mov	r0, r7
 800b69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0800c3b8 	.word	0x0800c3b8
 800b6a8:	0800c1e9 	.word	0x0800c1e9
 800b6ac:	0800c269 	.word	0x0800c269

0800b6b0 <__lshift>:
 800b6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	6849      	ldr	r1, [r1, #4]
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	4691      	mov	r9, r2
 800b6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6c8:	f108 0601 	add.w	r6, r8, #1
 800b6cc:	42b3      	cmp	r3, r6
 800b6ce:	db0b      	blt.n	800b6e8 <__lshift+0x38>
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff fddd 	bl	800b290 <_Balloc>
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	b948      	cbnz	r0, 800b6ee <__lshift+0x3e>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b28      	ldr	r3, [pc, #160]	; (800b780 <__lshift+0xd0>)
 800b6de:	4829      	ldr	r0, [pc, #164]	; (800b784 <__lshift+0xd4>)
 800b6e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b6e4:	f000 fbd6 	bl	800be94 <__assert_func>
 800b6e8:	3101      	adds	r1, #1
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	e7ee      	b.n	800b6cc <__lshift+0x1c>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f100 0114 	add.w	r1, r0, #20
 800b6f4:	f100 0210 	add.w	r2, r0, #16
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	4553      	cmp	r3, sl
 800b6fc:	db33      	blt.n	800b766 <__lshift+0xb6>
 800b6fe:	6920      	ldr	r0, [r4, #16]
 800b700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b704:	f104 0314 	add.w	r3, r4, #20
 800b708:	f019 091f 	ands.w	r9, r9, #31
 800b70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b714:	d02b      	beq.n	800b76e <__lshift+0xbe>
 800b716:	f1c9 0e20 	rsb	lr, r9, #32
 800b71a:	468a      	mov	sl, r1
 800b71c:	2200      	movs	r2, #0
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	fa00 f009 	lsl.w	r0, r0, r9
 800b724:	4310      	orrs	r0, r2
 800b726:	f84a 0b04 	str.w	r0, [sl], #4
 800b72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72e:	459c      	cmp	ip, r3
 800b730:	fa22 f20e 	lsr.w	r2, r2, lr
 800b734:	d8f3      	bhi.n	800b71e <__lshift+0x6e>
 800b736:	ebac 0304 	sub.w	r3, ip, r4
 800b73a:	3b15      	subs	r3, #21
 800b73c:	f023 0303 	bic.w	r3, r3, #3
 800b740:	3304      	adds	r3, #4
 800b742:	f104 0015 	add.w	r0, r4, #21
 800b746:	4584      	cmp	ip, r0
 800b748:	bf38      	it	cc
 800b74a:	2304      	movcc	r3, #4
 800b74c:	50ca      	str	r2, [r1, r3]
 800b74e:	b10a      	cbz	r2, 800b754 <__lshift+0xa4>
 800b750:	f108 0602 	add.w	r6, r8, #2
 800b754:	3e01      	subs	r6, #1
 800b756:	4638      	mov	r0, r7
 800b758:	612e      	str	r6, [r5, #16]
 800b75a:	4621      	mov	r1, r4
 800b75c:	f7ff fdd8 	bl	800b310 <_Bfree>
 800b760:	4628      	mov	r0, r5
 800b762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b766:	f842 0f04 	str.w	r0, [r2, #4]!
 800b76a:	3301      	adds	r3, #1
 800b76c:	e7c5      	b.n	800b6fa <__lshift+0x4a>
 800b76e:	3904      	subs	r1, #4
 800b770:	f853 2b04 	ldr.w	r2, [r3], #4
 800b774:	f841 2f04 	str.w	r2, [r1, #4]!
 800b778:	459c      	cmp	ip, r3
 800b77a:	d8f9      	bhi.n	800b770 <__lshift+0xc0>
 800b77c:	e7ea      	b.n	800b754 <__lshift+0xa4>
 800b77e:	bf00      	nop
 800b780:	0800c258 	.word	0x0800c258
 800b784:	0800c269 	.word	0x0800c269

0800b788 <__mcmp>:
 800b788:	b530      	push	{r4, r5, lr}
 800b78a:	6902      	ldr	r2, [r0, #16]
 800b78c:	690c      	ldr	r4, [r1, #16]
 800b78e:	1b12      	subs	r2, r2, r4
 800b790:	d10e      	bne.n	800b7b0 <__mcmp+0x28>
 800b792:	f100 0314 	add.w	r3, r0, #20
 800b796:	3114      	adds	r1, #20
 800b798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b79c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7a8:	42a5      	cmp	r5, r4
 800b7aa:	d003      	beq.n	800b7b4 <__mcmp+0x2c>
 800b7ac:	d305      	bcc.n	800b7ba <__mcmp+0x32>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	bd30      	pop	{r4, r5, pc}
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	d3f3      	bcc.n	800b7a0 <__mcmp+0x18>
 800b7b8:	e7fa      	b.n	800b7b0 <__mcmp+0x28>
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b7be:	e7f7      	b.n	800b7b0 <__mcmp+0x28>

0800b7c0 <__mdiff>:
 800b7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	4690      	mov	r8, r2
 800b7ce:	f7ff ffdb 	bl	800b788 <__mcmp>
 800b7d2:	1e05      	subs	r5, r0, #0
 800b7d4:	d110      	bne.n	800b7f8 <__mdiff+0x38>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7ff fd59 	bl	800b290 <_Balloc>
 800b7de:	b930      	cbnz	r0, 800b7ee <__mdiff+0x2e>
 800b7e0:	4b3a      	ldr	r3, [pc, #232]	; (800b8cc <__mdiff+0x10c>)
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	f240 2137 	movw	r1, #567	; 0x237
 800b7e8:	4839      	ldr	r0, [pc, #228]	; (800b8d0 <__mdiff+0x110>)
 800b7ea:	f000 fb53 	bl	800be94 <__assert_func>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	bfa4      	itt	ge
 800b7fa:	4643      	movge	r3, r8
 800b7fc:	46a0      	movge	r8, r4
 800b7fe:	4630      	mov	r0, r6
 800b800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b804:	bfa6      	itte	ge
 800b806:	461c      	movge	r4, r3
 800b808:	2500      	movge	r5, #0
 800b80a:	2501      	movlt	r5, #1
 800b80c:	f7ff fd40 	bl	800b290 <_Balloc>
 800b810:	b920      	cbnz	r0, 800b81c <__mdiff+0x5c>
 800b812:	4b2e      	ldr	r3, [pc, #184]	; (800b8cc <__mdiff+0x10c>)
 800b814:	4602      	mov	r2, r0
 800b816:	f240 2145 	movw	r1, #581	; 0x245
 800b81a:	e7e5      	b.n	800b7e8 <__mdiff+0x28>
 800b81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b820:	6926      	ldr	r6, [r4, #16]
 800b822:	60c5      	str	r5, [r0, #12]
 800b824:	f104 0914 	add.w	r9, r4, #20
 800b828:	f108 0514 	add.w	r5, r8, #20
 800b82c:	f100 0e14 	add.w	lr, r0, #20
 800b830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b838:	f108 0210 	add.w	r2, r8, #16
 800b83c:	46f2      	mov	sl, lr
 800b83e:	2100      	movs	r1, #0
 800b840:	f859 3b04 	ldr.w	r3, [r9], #4
 800b844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b848:	fa11 f88b 	uxtah	r8, r1, fp
 800b84c:	b299      	uxth	r1, r3
 800b84e:	0c1b      	lsrs	r3, r3, #16
 800b850:	eba8 0801 	sub.w	r8, r8, r1
 800b854:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b858:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b85c:	fa1f f888 	uxth.w	r8, r8
 800b860:	1419      	asrs	r1, r3, #16
 800b862:	454e      	cmp	r6, r9
 800b864:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b868:	f84a 3b04 	str.w	r3, [sl], #4
 800b86c:	d8e8      	bhi.n	800b840 <__mdiff+0x80>
 800b86e:	1b33      	subs	r3, r6, r4
 800b870:	3b15      	subs	r3, #21
 800b872:	f023 0303 	bic.w	r3, r3, #3
 800b876:	3304      	adds	r3, #4
 800b878:	3415      	adds	r4, #21
 800b87a:	42a6      	cmp	r6, r4
 800b87c:	bf38      	it	cc
 800b87e:	2304      	movcc	r3, #4
 800b880:	441d      	add	r5, r3
 800b882:	4473      	add	r3, lr
 800b884:	469e      	mov	lr, r3
 800b886:	462e      	mov	r6, r5
 800b888:	4566      	cmp	r6, ip
 800b88a:	d30e      	bcc.n	800b8aa <__mdiff+0xea>
 800b88c:	f10c 0203 	add.w	r2, ip, #3
 800b890:	1b52      	subs	r2, r2, r5
 800b892:	f022 0203 	bic.w	r2, r2, #3
 800b896:	3d03      	subs	r5, #3
 800b898:	45ac      	cmp	ip, r5
 800b89a:	bf38      	it	cc
 800b89c:	2200      	movcc	r2, #0
 800b89e:	4413      	add	r3, r2
 800b8a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8a4:	b17a      	cbz	r2, 800b8c6 <__mdiff+0x106>
 800b8a6:	6107      	str	r7, [r0, #16]
 800b8a8:	e7a4      	b.n	800b7f4 <__mdiff+0x34>
 800b8aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8ae:	fa11 f288 	uxtah	r2, r1, r8
 800b8b2:	1414      	asrs	r4, r2, #16
 800b8b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8b8:	b292      	uxth	r2, r2
 800b8ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8be:	f84e 2b04 	str.w	r2, [lr], #4
 800b8c2:	1421      	asrs	r1, r4, #16
 800b8c4:	e7e0      	b.n	800b888 <__mdiff+0xc8>
 800b8c6:	3f01      	subs	r7, #1
 800b8c8:	e7ea      	b.n	800b8a0 <__mdiff+0xe0>
 800b8ca:	bf00      	nop
 800b8cc:	0800c258 	.word	0x0800c258
 800b8d0:	0800c269 	.word	0x0800c269

0800b8d4 <__d2b>:
 800b8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	460f      	mov	r7, r1
 800b8da:	2101      	movs	r1, #1
 800b8dc:	ec59 8b10 	vmov	r8, r9, d0
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	f7ff fcd5 	bl	800b290 <_Balloc>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	b930      	cbnz	r0, 800b8f8 <__d2b+0x24>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b24      	ldr	r3, [pc, #144]	; (800b980 <__d2b+0xac>)
 800b8ee:	4825      	ldr	r0, [pc, #148]	; (800b984 <__d2b+0xb0>)
 800b8f0:	f240 310f 	movw	r1, #783	; 0x30f
 800b8f4:	f000 face 	bl	800be94 <__assert_func>
 800b8f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b900:	bb2d      	cbnz	r5, 800b94e <__d2b+0x7a>
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	f1b8 0300 	subs.w	r3, r8, #0
 800b908:	d026      	beq.n	800b958 <__d2b+0x84>
 800b90a:	4668      	mov	r0, sp
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f7ff fd87 	bl	800b420 <__lo0bits>
 800b912:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b916:	b1e8      	cbz	r0, 800b954 <__d2b+0x80>
 800b918:	f1c0 0320 	rsb	r3, r0, #32
 800b91c:	fa02 f303 	lsl.w	r3, r2, r3
 800b920:	430b      	orrs	r3, r1
 800b922:	40c2      	lsrs	r2, r0
 800b924:	6163      	str	r3, [r4, #20]
 800b926:	9201      	str	r2, [sp, #4]
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	61a3      	str	r3, [r4, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bf14      	ite	ne
 800b930:	2202      	movne	r2, #2
 800b932:	2201      	moveq	r2, #1
 800b934:	6122      	str	r2, [r4, #16]
 800b936:	b1bd      	cbz	r5, 800b968 <__d2b+0x94>
 800b938:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b93c:	4405      	add	r5, r0
 800b93e:	603d      	str	r5, [r7, #0]
 800b940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b944:	6030      	str	r0, [r6, #0]
 800b946:	4620      	mov	r0, r4
 800b948:	b003      	add	sp, #12
 800b94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b94e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b952:	e7d6      	b.n	800b902 <__d2b+0x2e>
 800b954:	6161      	str	r1, [r4, #20]
 800b956:	e7e7      	b.n	800b928 <__d2b+0x54>
 800b958:	a801      	add	r0, sp, #4
 800b95a:	f7ff fd61 	bl	800b420 <__lo0bits>
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	6163      	str	r3, [r4, #20]
 800b962:	3020      	adds	r0, #32
 800b964:	2201      	movs	r2, #1
 800b966:	e7e5      	b.n	800b934 <__d2b+0x60>
 800b968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b96c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b970:	6038      	str	r0, [r7, #0]
 800b972:	6918      	ldr	r0, [r3, #16]
 800b974:	f7ff fd34 	bl	800b3e0 <__hi0bits>
 800b978:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97c:	e7e2      	b.n	800b944 <__d2b+0x70>
 800b97e:	bf00      	nop
 800b980:	0800c258 	.word	0x0800c258
 800b984:	0800c269 	.word	0x0800c269

0800b988 <__sfputc_r>:
 800b988:	6893      	ldr	r3, [r2, #8]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	b410      	push	{r4}
 800b990:	6093      	str	r3, [r2, #8]
 800b992:	da08      	bge.n	800b9a6 <__sfputc_r+0x1e>
 800b994:	6994      	ldr	r4, [r2, #24]
 800b996:	42a3      	cmp	r3, r4
 800b998:	db01      	blt.n	800b99e <__sfputc_r+0x16>
 800b99a:	290a      	cmp	r1, #10
 800b99c:	d103      	bne.n	800b9a6 <__sfputc_r+0x1e>
 800b99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a2:	f7fe bc08 	b.w	800a1b6 <__swbuf_r>
 800b9a6:	6813      	ldr	r3, [r2, #0]
 800b9a8:	1c58      	adds	r0, r3, #1
 800b9aa:	6010      	str	r0, [r2, #0]
 800b9ac:	7019      	strb	r1, [r3, #0]
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <__sfputs_r>:
 800b9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	460f      	mov	r7, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	18d5      	adds	r5, r2, r3
 800b9c0:	42ac      	cmp	r4, r5
 800b9c2:	d101      	bne.n	800b9c8 <__sfputs_r+0x12>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	e007      	b.n	800b9d8 <__sfputs_r+0x22>
 800b9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9cc:	463a      	mov	r2, r7
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ffda 	bl	800b988 <__sfputc_r>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d1f3      	bne.n	800b9c0 <__sfputs_r+0xa>
 800b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9dc <_vfiprintf_r>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	b09d      	sub	sp, #116	; 0x74
 800b9e4:	4614      	mov	r4, r2
 800b9e6:	4698      	mov	r8, r3
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	b118      	cbz	r0, 800b9f4 <_vfiprintf_r+0x18>
 800b9ec:	6a03      	ldr	r3, [r0, #32]
 800b9ee:	b90b      	cbnz	r3, 800b9f4 <_vfiprintf_r+0x18>
 800b9f0:	f7fe fb68 	bl	800a0c4 <__sinit>
 800b9f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9f6:	07d9      	lsls	r1, r3, #31
 800b9f8:	d405      	bmi.n	800ba06 <_vfiprintf_r+0x2a>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	059a      	lsls	r2, r3, #22
 800b9fe:	d402      	bmi.n	800ba06 <_vfiprintf_r+0x2a>
 800ba00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba02:	f7fe fd40 	bl	800a486 <__retarget_lock_acquire_recursive>
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	071b      	lsls	r3, r3, #28
 800ba0a:	d501      	bpl.n	800ba10 <_vfiprintf_r+0x34>
 800ba0c:	692b      	ldr	r3, [r5, #16]
 800ba0e:	b99b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x5c>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7fe fc0c 	bl	800a230 <__swsetup_r>
 800ba18:	b170      	cbz	r0, 800ba38 <_vfiprintf_r+0x5c>
 800ba1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba1c:	07dc      	lsls	r4, r3, #31
 800ba1e:	d504      	bpl.n	800ba2a <_vfiprintf_r+0x4e>
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	b01d      	add	sp, #116	; 0x74
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	0598      	lsls	r0, r3, #22
 800ba2e:	d4f7      	bmi.n	800ba20 <_vfiprintf_r+0x44>
 800ba30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba32:	f7fe fd29 	bl	800a488 <__retarget_lock_release_recursive>
 800ba36:	e7f3      	b.n	800ba20 <_vfiprintf_r+0x44>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3c:	2320      	movs	r3, #32
 800ba3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba46:	2330      	movs	r3, #48	; 0x30
 800ba48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bbfc <_vfiprintf_r+0x220>
 800ba4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba50:	f04f 0901 	mov.w	r9, #1
 800ba54:	4623      	mov	r3, r4
 800ba56:	469a      	mov	sl, r3
 800ba58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5c:	b10a      	cbz	r2, 800ba62 <_vfiprintf_r+0x86>
 800ba5e:	2a25      	cmp	r2, #37	; 0x25
 800ba60:	d1f9      	bne.n	800ba56 <_vfiprintf_r+0x7a>
 800ba62:	ebba 0b04 	subs.w	fp, sl, r4
 800ba66:	d00b      	beq.n	800ba80 <_vfiprintf_r+0xa4>
 800ba68:	465b      	mov	r3, fp
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ffa1 	bl	800b9b6 <__sfputs_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	f000 80a9 	beq.w	800bbcc <_vfiprintf_r+0x1f0>
 800ba7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7c:	445a      	add	r2, fp
 800ba7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba80:	f89a 3000 	ldrb.w	r3, [sl]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80a1 	beq.w	800bbcc <_vfiprintf_r+0x1f0>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba94:	f10a 0a01 	add.w	sl, sl, #1
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	9307      	str	r3, [sp, #28]
 800ba9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa0:	931a      	str	r3, [sp, #104]	; 0x68
 800baa2:	4654      	mov	r4, sl
 800baa4:	2205      	movs	r2, #5
 800baa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baaa:	4854      	ldr	r0, [pc, #336]	; (800bbfc <_vfiprintf_r+0x220>)
 800baac:	f7f4 fc18 	bl	80002e0 <memchr>
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	b9d8      	cbnz	r0, 800baec <_vfiprintf_r+0x110>
 800bab4:	06d1      	lsls	r1, r2, #27
 800bab6:	bf44      	itt	mi
 800bab8:	2320      	movmi	r3, #32
 800baba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800babe:	0713      	lsls	r3, r2, #28
 800bac0:	bf44      	itt	mi
 800bac2:	232b      	movmi	r3, #43	; 0x2b
 800bac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac8:	f89a 3000 	ldrb.w	r3, [sl]
 800bacc:	2b2a      	cmp	r3, #42	; 0x2a
 800bace:	d015      	beq.n	800bafc <_vfiprintf_r+0x120>
 800bad0:	9a07      	ldr	r2, [sp, #28]
 800bad2:	4654      	mov	r4, sl
 800bad4:	2000      	movs	r0, #0
 800bad6:	f04f 0c0a 	mov.w	ip, #10
 800bada:	4621      	mov	r1, r4
 800badc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae0:	3b30      	subs	r3, #48	; 0x30
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d94d      	bls.n	800bb82 <_vfiprintf_r+0x1a6>
 800bae6:	b1b0      	cbz	r0, 800bb16 <_vfiprintf_r+0x13a>
 800bae8:	9207      	str	r2, [sp, #28]
 800baea:	e014      	b.n	800bb16 <_vfiprintf_r+0x13a>
 800baec:	eba0 0308 	sub.w	r3, r0, r8
 800baf0:	fa09 f303 	lsl.w	r3, r9, r3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	9304      	str	r3, [sp, #16]
 800baf8:	46a2      	mov	sl, r4
 800bafa:	e7d2      	b.n	800baa2 <_vfiprintf_r+0xc6>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d19      	adds	r1, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9103      	str	r1, [sp, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bfbb      	ittet	lt
 800bb08:	425b      	neglt	r3, r3
 800bb0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0e:	9307      	strge	r3, [sp, #28]
 800bb10:	9307      	strlt	r3, [sp, #28]
 800bb12:	bfb8      	it	lt
 800bb14:	9204      	strlt	r2, [sp, #16]
 800bb16:	7823      	ldrb	r3, [r4, #0]
 800bb18:	2b2e      	cmp	r3, #46	; 0x2e
 800bb1a:	d10c      	bne.n	800bb36 <_vfiprintf_r+0x15a>
 800bb1c:	7863      	ldrb	r3, [r4, #1]
 800bb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb20:	d134      	bne.n	800bb8c <_vfiprintf_r+0x1b0>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	1d1a      	adds	r2, r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	9203      	str	r2, [sp, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfb8      	it	lt
 800bb2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb32:	3402      	adds	r4, #2
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc0c <_vfiprintf_r+0x230>
 800bb3a:	7821      	ldrb	r1, [r4, #0]
 800bb3c:	2203      	movs	r2, #3
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7f4 fbce 	bl	80002e0 <memchr>
 800bb44:	b138      	cbz	r0, 800bb56 <_vfiprintf_r+0x17a>
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	eba0 000a 	sub.w	r0, r0, sl
 800bb4c:	2240      	movs	r2, #64	; 0x40
 800bb4e:	4082      	lsls	r2, r0
 800bb50:	4313      	orrs	r3, r2
 800bb52:	3401      	adds	r4, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5a:	4829      	ldr	r0, [pc, #164]	; (800bc00 <_vfiprintf_r+0x224>)
 800bb5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb60:	2206      	movs	r2, #6
 800bb62:	f7f4 fbbd 	bl	80002e0 <memchr>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d03f      	beq.n	800bbea <_vfiprintf_r+0x20e>
 800bb6a:	4b26      	ldr	r3, [pc, #152]	; (800bc04 <_vfiprintf_r+0x228>)
 800bb6c:	bb1b      	cbnz	r3, 800bbb6 <_vfiprintf_r+0x1da>
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	f023 0307 	bic.w	r3, r3, #7
 800bb76:	3308      	adds	r3, #8
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7c:	443b      	add	r3, r7
 800bb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb80:	e768      	b.n	800ba54 <_vfiprintf_r+0x78>
 800bb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb86:	460c      	mov	r4, r1
 800bb88:	2001      	movs	r0, #1
 800bb8a:	e7a6      	b.n	800bada <_vfiprintf_r+0xfe>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	4619      	mov	r1, r3
 800bb94:	f04f 0c0a 	mov.w	ip, #10
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9e:	3a30      	subs	r2, #48	; 0x30
 800bba0:	2a09      	cmp	r2, #9
 800bba2:	d903      	bls.n	800bbac <_vfiprintf_r+0x1d0>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0c6      	beq.n	800bb36 <_vfiprintf_r+0x15a>
 800bba8:	9105      	str	r1, [sp, #20]
 800bbaa:	e7c4      	b.n	800bb36 <_vfiprintf_r+0x15a>
 800bbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e7f0      	b.n	800bb98 <_vfiprintf_r+0x1bc>
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <_vfiprintf_r+0x22c>)
 800bbbe:	a904      	add	r1, sp, #16
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f7fd fe49 	bl	8009858 <_printf_float>
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	1c78      	adds	r0, r7, #1
 800bbca:	d1d6      	bne.n	800bb7a <_vfiprintf_r+0x19e>
 800bbcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbce:	07d9      	lsls	r1, r3, #31
 800bbd0:	d405      	bmi.n	800bbde <_vfiprintf_r+0x202>
 800bbd2:	89ab      	ldrh	r3, [r5, #12]
 800bbd4:	059a      	lsls	r2, r3, #22
 800bbd6:	d402      	bmi.n	800bbde <_vfiprintf_r+0x202>
 800bbd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbda:	f7fe fc55 	bl	800a488 <__retarget_lock_release_recursive>
 800bbde:	89ab      	ldrh	r3, [r5, #12]
 800bbe0:	065b      	lsls	r3, r3, #25
 800bbe2:	f53f af1d 	bmi.w	800ba20 <_vfiprintf_r+0x44>
 800bbe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbe8:	e71c      	b.n	800ba24 <_vfiprintf_r+0x48>
 800bbea:	ab03      	add	r3, sp, #12
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <_vfiprintf_r+0x22c>)
 800bbf2:	a904      	add	r1, sp, #16
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7fe f8b7 	bl	8009d68 <_printf_i>
 800bbfa:	e7e4      	b.n	800bbc6 <_vfiprintf_r+0x1ea>
 800bbfc:	0800c3c4 	.word	0x0800c3c4
 800bc00:	0800c3ce 	.word	0x0800c3ce
 800bc04:	08009859 	.word	0x08009859
 800bc08:	0800b9b7 	.word	0x0800b9b7
 800bc0c:	0800c3ca 	.word	0x0800c3ca

0800bc10 <__sflush_r>:
 800bc10:	898a      	ldrh	r2, [r1, #12]
 800bc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc16:	4605      	mov	r5, r0
 800bc18:	0710      	lsls	r0, r2, #28
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	d458      	bmi.n	800bcd0 <__sflush_r+0xc0>
 800bc1e:	684b      	ldr	r3, [r1, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dc05      	bgt.n	800bc30 <__sflush_r+0x20>
 800bc24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dc02      	bgt.n	800bc30 <__sflush_r+0x20>
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d0f9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc3c:	682f      	ldr	r7, [r5, #0]
 800bc3e:	6a21      	ldr	r1, [r4, #32]
 800bc40:	602b      	str	r3, [r5, #0]
 800bc42:	d032      	beq.n	800bcaa <__sflush_r+0x9a>
 800bc44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	075a      	lsls	r2, r3, #29
 800bc4a:	d505      	bpl.n	800bc58 <__sflush_r+0x48>
 800bc4c:	6863      	ldr	r3, [r4, #4]
 800bc4e:	1ac0      	subs	r0, r0, r3
 800bc50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc52:	b10b      	cbz	r3, 800bc58 <__sflush_r+0x48>
 800bc54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc56:	1ac0      	subs	r0, r0, r3
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc5e:	6a21      	ldr	r1, [r4, #32]
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	d106      	bne.n	800bc78 <__sflush_r+0x68>
 800bc6a:	6829      	ldr	r1, [r5, #0]
 800bc6c:	291d      	cmp	r1, #29
 800bc6e:	d82b      	bhi.n	800bcc8 <__sflush_r+0xb8>
 800bc70:	4a29      	ldr	r2, [pc, #164]	; (800bd18 <__sflush_r+0x108>)
 800bc72:	410a      	asrs	r2, r1
 800bc74:	07d6      	lsls	r6, r2, #31
 800bc76:	d427      	bmi.n	800bcc8 <__sflush_r+0xb8>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	6062      	str	r2, [r4, #4]
 800bc7c:	04d9      	lsls	r1, r3, #19
 800bc7e:	6922      	ldr	r2, [r4, #16]
 800bc80:	6022      	str	r2, [r4, #0]
 800bc82:	d504      	bpl.n	800bc8e <__sflush_r+0x7e>
 800bc84:	1c42      	adds	r2, r0, #1
 800bc86:	d101      	bne.n	800bc8c <__sflush_r+0x7c>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b903      	cbnz	r3, 800bc8e <__sflush_r+0x7e>
 800bc8c:	6560      	str	r0, [r4, #84]	; 0x54
 800bc8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc90:	602f      	str	r7, [r5, #0]
 800bc92:	2900      	cmp	r1, #0
 800bc94:	d0c9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bc96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc9a:	4299      	cmp	r1, r3
 800bc9c:	d002      	beq.n	800bca4 <__sflush_r+0x94>
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f7ff f9f6 	bl	800b090 <_free_r>
 800bca4:	2000      	movs	r0, #0
 800bca6:	6360      	str	r0, [r4, #52]	; 0x34
 800bca8:	e7c0      	b.n	800bc2c <__sflush_r+0x1c>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b0      	blx	r6
 800bcb0:	1c41      	adds	r1, r0, #1
 800bcb2:	d1c8      	bne.n	800bc46 <__sflush_r+0x36>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0c5      	beq.n	800bc46 <__sflush_r+0x36>
 800bcba:	2b1d      	cmp	r3, #29
 800bcbc:	d001      	beq.n	800bcc2 <__sflush_r+0xb2>
 800bcbe:	2b16      	cmp	r3, #22
 800bcc0:	d101      	bne.n	800bcc6 <__sflush_r+0xb6>
 800bcc2:	602f      	str	r7, [r5, #0]
 800bcc4:	e7b1      	b.n	800bc2a <__sflush_r+0x1a>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	e7ad      	b.n	800bc2c <__sflush_r+0x1c>
 800bcd0:	690f      	ldr	r7, [r1, #16]
 800bcd2:	2f00      	cmp	r7, #0
 800bcd4:	d0a9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bcd6:	0793      	lsls	r3, r2, #30
 800bcd8:	680e      	ldr	r6, [r1, #0]
 800bcda:	bf08      	it	eq
 800bcdc:	694b      	ldreq	r3, [r1, #20]
 800bcde:	600f      	str	r7, [r1, #0]
 800bce0:	bf18      	it	ne
 800bce2:	2300      	movne	r3, #0
 800bce4:	eba6 0807 	sub.w	r8, r6, r7
 800bce8:	608b      	str	r3, [r1, #8]
 800bcea:	f1b8 0f00 	cmp.w	r8, #0
 800bcee:	dd9c      	ble.n	800bc2a <__sflush_r+0x1a>
 800bcf0:	6a21      	ldr	r1, [r4, #32]
 800bcf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcf4:	4643      	mov	r3, r8
 800bcf6:	463a      	mov	r2, r7
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b0      	blx	r6
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	dc06      	bgt.n	800bd0e <__sflush_r+0xfe>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0c:	e78e      	b.n	800bc2c <__sflush_r+0x1c>
 800bd0e:	4407      	add	r7, r0
 800bd10:	eba8 0800 	sub.w	r8, r8, r0
 800bd14:	e7e9      	b.n	800bcea <__sflush_r+0xda>
 800bd16:	bf00      	nop
 800bd18:	dfbffffe 	.word	0xdfbffffe

0800bd1c <_fflush_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	690b      	ldr	r3, [r1, #16]
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	b913      	cbnz	r3, 800bd2c <_fflush_r+0x10>
 800bd26:	2500      	movs	r5, #0
 800bd28:	4628      	mov	r0, r5
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	b118      	cbz	r0, 800bd36 <_fflush_r+0x1a>
 800bd2e:	6a03      	ldr	r3, [r0, #32]
 800bd30:	b90b      	cbnz	r3, 800bd36 <_fflush_r+0x1a>
 800bd32:	f7fe f9c7 	bl	800a0c4 <__sinit>
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0f3      	beq.n	800bd26 <_fflush_r+0xa>
 800bd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd40:	07d0      	lsls	r0, r2, #31
 800bd42:	d404      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd44:	0599      	lsls	r1, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd4a:	f7fe fb9c 	bl	800a486 <__retarget_lock_acquire_recursive>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	4621      	mov	r1, r4
 800bd52:	f7ff ff5d 	bl	800bc10 <__sflush_r>
 800bd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd58:	07da      	lsls	r2, r3, #31
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	d4e4      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	059b      	lsls	r3, r3, #22
 800bd62:	d4e1      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd66:	f7fe fb8f 	bl	800a488 <__retarget_lock_release_recursive>
 800bd6a:	e7dd      	b.n	800bd28 <_fflush_r+0xc>

0800bd6c <__swhatbuf_r>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	460c      	mov	r4, r1
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	2900      	cmp	r1, #0
 800bd76:	b096      	sub	sp, #88	; 0x58
 800bd78:	4615      	mov	r5, r2
 800bd7a:	461e      	mov	r6, r3
 800bd7c:	da0d      	bge.n	800bd9a <__swhatbuf_r+0x2e>
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd84:	f04f 0100 	mov.w	r1, #0
 800bd88:	bf0c      	ite	eq
 800bd8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd8e:	2340      	movne	r3, #64	; 0x40
 800bd90:	2000      	movs	r0, #0
 800bd92:	6031      	str	r1, [r6, #0]
 800bd94:	602b      	str	r3, [r5, #0]
 800bd96:	b016      	add	sp, #88	; 0x58
 800bd98:	bd70      	pop	{r4, r5, r6, pc}
 800bd9a:	466a      	mov	r2, sp
 800bd9c:	f000 f848 	bl	800be30 <_fstat_r>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	dbec      	blt.n	800bd7e <__swhatbuf_r+0x12>
 800bda4:	9901      	ldr	r1, [sp, #4]
 800bda6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bdaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bdae:	4259      	negs	r1, r3
 800bdb0:	4159      	adcs	r1, r3
 800bdb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdb6:	e7eb      	b.n	800bd90 <__swhatbuf_r+0x24>

0800bdb8 <__smakebuf_r>:
 800bdb8:	898b      	ldrh	r3, [r1, #12]
 800bdba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdbc:	079d      	lsls	r5, r3, #30
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	d507      	bpl.n	800bdd4 <__smakebuf_r+0x1c>
 800bdc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	6123      	str	r3, [r4, #16]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	6163      	str	r3, [r4, #20]
 800bdd0:	b002      	add	sp, #8
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	ab01      	add	r3, sp, #4
 800bdd6:	466a      	mov	r2, sp
 800bdd8:	f7ff ffc8 	bl	800bd6c <__swhatbuf_r>
 800bddc:	9900      	ldr	r1, [sp, #0]
 800bdde:	4605      	mov	r5, r0
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff f9c9 	bl	800b178 <_malloc_r>
 800bde6:	b948      	cbnz	r0, 800bdfc <__smakebuf_r+0x44>
 800bde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d4ef      	bmi.n	800bdd0 <__smakebuf_r+0x18>
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	f043 0302 	orr.w	r3, r3, #2
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	e7e3      	b.n	800bdc4 <__smakebuf_r+0xc>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	6020      	str	r0, [r4, #0]
 800be00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	9b00      	ldr	r3, [sp, #0]
 800be08:	6163      	str	r3, [r4, #20]
 800be0a:	9b01      	ldr	r3, [sp, #4]
 800be0c:	6120      	str	r0, [r4, #16]
 800be0e:	b15b      	cbz	r3, 800be28 <__smakebuf_r+0x70>
 800be10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be14:	4630      	mov	r0, r6
 800be16:	f000 f81d 	bl	800be54 <_isatty_r>
 800be1a:	b128      	cbz	r0, 800be28 <__smakebuf_r+0x70>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	f043 0301 	orr.w	r3, r3, #1
 800be26:	81a3      	strh	r3, [r4, #12]
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	431d      	orrs	r5, r3
 800be2c:	81a5      	strh	r5, [r4, #12]
 800be2e:	e7cf      	b.n	800bdd0 <__smakebuf_r+0x18>

0800be30 <_fstat_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_fstat_r+0x20>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f7f5 f94d 	bl	80010dc <_fstat>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	d102      	bne.n	800be4c <_fstat_r+0x1c>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	b103      	cbz	r3, 800be4c <_fstat_r+0x1c>
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop
 800be50:	24004f68 	.word	0x24004f68

0800be54 <_isatty_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d06      	ldr	r5, [pc, #24]	; (800be70 <_isatty_r+0x1c>)
 800be58:	2300      	movs	r3, #0
 800be5a:	4604      	mov	r4, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	602b      	str	r3, [r5, #0]
 800be60:	f7f5 f94c 	bl	80010fc <_isatty>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_isatty_r+0x1a>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_isatty_r+0x1a>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	24004f68 	.word	0x24004f68

0800be74 <_sbrk_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4d06      	ldr	r5, [pc, #24]	; (800be90 <_sbrk_r+0x1c>)
 800be78:	2300      	movs	r3, #0
 800be7a:	4604      	mov	r4, r0
 800be7c:	4608      	mov	r0, r1
 800be7e:	602b      	str	r3, [r5, #0]
 800be80:	f7f5 f954 	bl	800112c <_sbrk>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_sbrk_r+0x1a>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_sbrk_r+0x1a>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	24004f68 	.word	0x24004f68

0800be94 <__assert_func>:
 800be94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be96:	4614      	mov	r4, r2
 800be98:	461a      	mov	r2, r3
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <__assert_func+0x2c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4605      	mov	r5, r0
 800bea0:	68d8      	ldr	r0, [r3, #12]
 800bea2:	b14c      	cbz	r4, 800beb8 <__assert_func+0x24>
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <__assert_func+0x30>)
 800bea6:	9100      	str	r1, [sp, #0]
 800bea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beac:	4906      	ldr	r1, [pc, #24]	; (800bec8 <__assert_func+0x34>)
 800beae:	462b      	mov	r3, r5
 800beb0:	f000 f844 	bl	800bf3c <fiprintf>
 800beb4:	f000 f854 	bl	800bf60 <abort>
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <__assert_func+0x38>)
 800beba:	461c      	mov	r4, r3
 800bebc:	e7f3      	b.n	800bea6 <__assert_func+0x12>
 800bebe:	bf00      	nop
 800bec0:	2400006c 	.word	0x2400006c
 800bec4:	0800c3df 	.word	0x0800c3df
 800bec8:	0800c3ec 	.word	0x0800c3ec
 800becc:	0800c41a 	.word	0x0800c41a

0800bed0 <_calloc_r>:
 800bed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bed2:	fba1 2402 	umull	r2, r4, r1, r2
 800bed6:	b94c      	cbnz	r4, 800beec <_calloc_r+0x1c>
 800bed8:	4611      	mov	r1, r2
 800beda:	9201      	str	r2, [sp, #4]
 800bedc:	f7ff f94c 	bl	800b178 <_malloc_r>
 800bee0:	9a01      	ldr	r2, [sp, #4]
 800bee2:	4605      	mov	r5, r0
 800bee4:	b930      	cbnz	r0, 800bef4 <_calloc_r+0x24>
 800bee6:	4628      	mov	r0, r5
 800bee8:	b003      	add	sp, #12
 800beea:	bd30      	pop	{r4, r5, pc}
 800beec:	220c      	movs	r2, #12
 800beee:	6002      	str	r2, [r0, #0]
 800bef0:	2500      	movs	r5, #0
 800bef2:	e7f8      	b.n	800bee6 <_calloc_r+0x16>
 800bef4:	4621      	mov	r1, r4
 800bef6:	f7fe f9f3 	bl	800a2e0 <memset>
 800befa:	e7f4      	b.n	800bee6 <_calloc_r+0x16>

0800befc <__ascii_mbtowc>:
 800befc:	b082      	sub	sp, #8
 800befe:	b901      	cbnz	r1, 800bf02 <__ascii_mbtowc+0x6>
 800bf00:	a901      	add	r1, sp, #4
 800bf02:	b142      	cbz	r2, 800bf16 <__ascii_mbtowc+0x1a>
 800bf04:	b14b      	cbz	r3, 800bf1a <__ascii_mbtowc+0x1e>
 800bf06:	7813      	ldrb	r3, [r2, #0]
 800bf08:	600b      	str	r3, [r1, #0]
 800bf0a:	7812      	ldrb	r2, [r2, #0]
 800bf0c:	1e10      	subs	r0, r2, #0
 800bf0e:	bf18      	it	ne
 800bf10:	2001      	movne	r0, #1
 800bf12:	b002      	add	sp, #8
 800bf14:	4770      	bx	lr
 800bf16:	4610      	mov	r0, r2
 800bf18:	e7fb      	b.n	800bf12 <__ascii_mbtowc+0x16>
 800bf1a:	f06f 0001 	mvn.w	r0, #1
 800bf1e:	e7f8      	b.n	800bf12 <__ascii_mbtowc+0x16>

0800bf20 <__ascii_wctomb>:
 800bf20:	b149      	cbz	r1, 800bf36 <__ascii_wctomb+0x16>
 800bf22:	2aff      	cmp	r2, #255	; 0xff
 800bf24:	bf85      	ittet	hi
 800bf26:	238a      	movhi	r3, #138	; 0x8a
 800bf28:	6003      	strhi	r3, [r0, #0]
 800bf2a:	700a      	strbls	r2, [r1, #0]
 800bf2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf30:	bf98      	it	ls
 800bf32:	2001      	movls	r0, #1
 800bf34:	4770      	bx	lr
 800bf36:	4608      	mov	r0, r1
 800bf38:	4770      	bx	lr
	...

0800bf3c <fiprintf>:
 800bf3c:	b40e      	push	{r1, r2, r3}
 800bf3e:	b503      	push	{r0, r1, lr}
 800bf40:	4601      	mov	r1, r0
 800bf42:	ab03      	add	r3, sp, #12
 800bf44:	4805      	ldr	r0, [pc, #20]	; (800bf5c <fiprintf+0x20>)
 800bf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	f7ff fd45 	bl	800b9dc <_vfiprintf_r>
 800bf52:	b002      	add	sp, #8
 800bf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf58:	b003      	add	sp, #12
 800bf5a:	4770      	bx	lr
 800bf5c:	2400006c 	.word	0x2400006c

0800bf60 <abort>:
 800bf60:	b508      	push	{r3, lr}
 800bf62:	2006      	movs	r0, #6
 800bf64:	f000 f82c 	bl	800bfc0 <raise>
 800bf68:	2001      	movs	r0, #1
 800bf6a:	f7f5 f868 	bl	800103e <_exit>

0800bf6e <_raise_r>:
 800bf6e:	291f      	cmp	r1, #31
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	d904      	bls.n	800bf82 <_raise_r+0x14>
 800bf78:	2316      	movs	r3, #22
 800bf7a:	6003      	str	r3, [r0, #0]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
 800bf82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf84:	b112      	cbz	r2, 800bf8c <_raise_r+0x1e>
 800bf86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf8a:	b94b      	cbnz	r3, 800bfa0 <_raise_r+0x32>
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 f831 	bl	800bff4 <_getpid_r>
 800bf92:	462a      	mov	r2, r5
 800bf94:	4601      	mov	r1, r0
 800bf96:	4620      	mov	r0, r4
 800bf98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf9c:	f000 b818 	b.w	800bfd0 <_kill_r>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d00a      	beq.n	800bfba <_raise_r+0x4c>
 800bfa4:	1c59      	adds	r1, r3, #1
 800bfa6:	d103      	bne.n	800bfb0 <_raise_r+0x42>
 800bfa8:	2316      	movs	r3, #22
 800bfaa:	6003      	str	r3, [r0, #0]
 800bfac:	2001      	movs	r0, #1
 800bfae:	e7e7      	b.n	800bf80 <_raise_r+0x12>
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	4798      	blx	r3
 800bfba:	2000      	movs	r0, #0
 800bfbc:	e7e0      	b.n	800bf80 <_raise_r+0x12>
	...

0800bfc0 <raise>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <raise+0xc>)
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	f7ff bfd2 	b.w	800bf6e <_raise_r>
 800bfca:	bf00      	nop
 800bfcc:	2400006c 	.word	0x2400006c

0800bfd0 <_kill_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d07      	ldr	r5, [pc, #28]	; (800bff0 <_kill_r+0x20>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	4611      	mov	r1, r2
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	f7f5 f81e 	bl	800101e <_kill>
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	d102      	bne.n	800bfec <_kill_r+0x1c>
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	b103      	cbz	r3, 800bfec <_kill_r+0x1c>
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	bf00      	nop
 800bff0:	24004f68 	.word	0x24004f68

0800bff4 <_getpid_r>:
 800bff4:	f7f5 b80b 	b.w	800100e <_getpid>

0800bff8 <_init>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	bf00      	nop
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr

0800c004 <_fini>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	bf00      	nop
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr
