
stm32h7_ParallelConstantPi_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800ae18  0800ae18  0001ae18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b4  0800b2b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2bc  0800b2bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c0  0800b2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800b2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005200  240001e4  0800b4a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240053e4  0800b4a8  000253e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023838  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f38  00000000  00000000  00043a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00047988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  00049328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c980  00000000  00000000  0004ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb5f  00000000  00000000  000874d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019091a  00000000  00000000  000a602f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00236949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac8  00000000  00000000  0023699c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800adfc 	.word	0x0800adfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800adfc 	.word	0x0800adfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	*acum = 0;
 80007c6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80007ca:	f04f 0200 	mov.w	r2, #0
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fccf 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f847 	bl	800086c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <main+0x9c>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <main+0x9c>)
 80007e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <main+0x9c>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 ffe7 	bl	80017d0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000802:	2100      	movs	r1, #0
 8000804:	2000      	movs	r0, #0
 8000806:	f000 fffd 	bl	8001804 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <main+0x9c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d104      	bne.n	8000828 <main+0x68>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0x52>
if ( timeout < 0 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x72>
{
Error_Handler();
 800082e:	f000 fa1f 	bl	8000c70 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f957 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000836:	f000 f909 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f8b9 	bl	80009b0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800083e:	f000 f88f 	bl	8000960 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000842:	f004 ffcb 	bl	80057dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000846:	4a06      	ldr	r2, [pc, #24]	; (8000860 <main+0xa0>)
 8000848:	2100      	movs	r1, #0
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <main+0xa4>)
 800084c:	f005 f810 	bl	8005870 <osThreadNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <main+0xa8>)
 8000854:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000856:	f004 ffe5 	bl	8005824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	e7fe      	b.n	800085a <main+0x9a>
 800085c:	58024400 	.word	0x58024400
 8000860:	0800ae90 	.word	0x0800ae90
 8000864:	08000bd1 	.word	0x08000bd1
 8000868:	2400036c 	.word	0x2400036c

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	; 0x70
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	224c      	movs	r2, #76	; 0x4c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fe57 	bl	800852e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f007 fe51 	bl	800852e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800088c:	2004      	movs	r0, #4
 800088e:	f000 ffcd 	bl	800182c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <SystemClock_Config+0xec>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <SystemClock_Config+0xec>)
 800089c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <SystemClock_Config+0xec>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <SystemClock_Config+0xf0>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	4a2a      	ldr	r2, [pc, #168]	; (800095c <SystemClock_Config+0xf0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xf0>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <SystemClock_Config+0xec>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ea:	23f0      	movs	r3, #240	; 0xf0
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fa:	2308      	movs	r3, #8
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ffe8 	bl	80018e0 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000916:	f000 f9ab 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	233f      	movs	r3, #63	; 0x3f
 800091c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000926:	2308      	movs	r3, #8
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fbfb 	bl	800213c <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800094c:	f000 f990 	bl	8000c70 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	; 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024800 	.word	0x58024800
 800095c:	58000400 	.word	0x58000400

08000960 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_TIM17_Init+0x48>)
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <MX_TIM17_Init+0x4c>)
 8000968:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_TIM17_Init+0x48>)
 800096c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000970:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_TIM17_Init+0x48>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_TIM17_Init+0x48>)
 800097a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_TIM17_Init+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_TIM17_Init+0x48>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_TIM17_Init+0x48>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM17_Init+0x48>)
 8000994:	f003 fb08 	bl	8003fa8 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800099e:	f000 f967 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000200 	.word	0x24000200
 80009ac:	40014800 	.word	0x40014800

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <MX_USART2_UART_Init+0x98>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009d8:	220c      	movs	r2, #12
 80009da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 80009fc:	f003 fda4 	bl	8004548 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a06:	f000 f933 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 8000a0e:	f004 fdd7 	bl	80055c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a18:	f000 f92a 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 8000a20:	f004 fe0c 	bl	800563c <HAL_UARTEx_SetRxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f000 f921 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x94>)
 8000a30:	f004 fd8d 	bl	800554e <HAL_UARTEx_DisableFifoMode>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f000 f919 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2400024c 	.word	0x2400024c
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_USART3_UART_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a96:	f003 fd57 	bl	8004548 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 f8e6 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aa8:	f004 fd8a 	bl	80055c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 f8dd 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aba:	f004 fdbf 	bl	800563c <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 f8d4 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aca:	f004 fd40 	bl	800554e <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 f8cc 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	240002dc 	.word	0x240002dc
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0xdc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b7a:	f000 fdf5 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b94:	f000 fc38 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b98:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_GPIO_Init+0xe0>)
 8000bb2:	f000 fc29 	bl	8001408 <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58020800 	.word	0x58020800
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
//		acum = acum + ( fdx * baseIntervalo );
//		x = x + baseIntervalo;
//	}
//	uint16_t end_t = __HAL_TIM_GET_COUNTER(&htim17);
//	uint16_t total_t = end_t - start_t;
	uint16_t total_t = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	82fb      	strh	r3, [r7, #22]
	double acum = 0;
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	xStreamBufferReceive(*xStreamBuffer, &total_t, sizeof(total_t), HAL_MAX_DELAY);

	printf("Result_CM4=%f (%f seconds)\r\n", acum, ((float)total_t * 65535.0)/240000000.0);
 8000be8:	8afb      	ldrh	r3, [r7, #22]
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000c30 <StartDefaultTask+0x60>
 8000bfa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bfe:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000c38 <StartDefaultTask+0x68>
 8000c02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c06:	ed8d 7b00 	vstr	d7, [sp]
 8000c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <StartDefaultTask+0x70>)
 8000c10:	f008 f96c 	bl	8008eec <iprintf>

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000c14:	2101      	movs	r1, #1
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <StartDefaultTask+0x74>)
 8000c18:	f000 fdbf 	bl	800179a <HAL_GPIO_TogglePin>
    printf("Hallo from FreeRTOS STM32H7 world!\r\n");
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <StartDefaultTask+0x78>)
 8000c1e:	f008 f9eb 	bl	8008ff8 <puts>
    osDelay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f004 feb6 	bl	8005996 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000c2a:	e7f3      	b.n	8000c14 <StartDefaultTask+0x44>
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000000 	.word	0x00000000
 8000c34:	40efffe0 	.word	0x40efffe0
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	41ac9c38 	.word	0x41ac9c38
 8000c40:	0800ae24 	.word	0x0800ae24
 8000c44:	58020400 	.word	0x58020400
 8000c48:	0800ae44 	.word	0x0800ae44

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f000 fac7 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40001400 	.word	0x40001400

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c84:	1d39      	adds	r1, r7, #4
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <__io_putchar+0x20>)
 8000c8e:	f003 fcab 	bl	80045e8 <HAL_UART_Transmit>
  return ch;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	240002dc 	.word	0x240002dc

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x38>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_MspInit+0x38>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x38>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f06f 0001 	mvn.w	r0, #1
 8000ccc:	f000 fb74 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10e      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40014800 	.word	0x40014800
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0ba      	sub	sp, #232	; 0xe8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	22bc      	movs	r2, #188	; 0xbc
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fbf4 	bl	800852e <memset>
  if(huart->Instance==USART2)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <HAL_UART_MspInit+0x150>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d142      	bne.n	8000dd6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fdba 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6a:	f7ff ff81 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d74:	4a3f      	ldr	r2, [pc, #252]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000daa:	2360      	movs	r3, #96	; 0x60
 8000dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482a      	ldr	r0, [pc, #168]	; (8000e78 <HAL_UART_MspInit+0x158>)
 8000dd0:	f000 fb1a 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd4:	e047      	b.n	8000e66 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <HAL_UART_MspInit+0x15c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d142      	bne.n	8000e66 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd72 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000dfa:	f7ff ff39 	bl	8000c70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0x154>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0x158>)
 8000e62:	f000 fad1 	bl	8001408 <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	37e8      	adds	r7, #232	; 0xe8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020c00 	.word	0x58020c00
 8000e7c:	40004800 	.word	0x40004800

08000e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	; 0x40
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d827      	bhi.n	8000ede <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	2037      	movs	r0, #55	; 0x37
 8000e94:	f000 fa90 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e98:	2037      	movs	r0, #55	; 0x37
 8000e9a:	f000 faa7 	bl	80013ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e9e:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <HAL_InitTick+0xc4>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <HAL_InitTick+0xc8>)
 8000ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_InitTick+0xc8>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <HAL_InitTick+0xc8>)
 8000eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec2:	f107 0210 	add.w	r2, r7, #16
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fcc1 	bl	8002854 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <HAL_InitTick+0x6a>
 8000edc:	e001      	b.n	8000ee2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e02b      	b.n	8000f3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee2:	f001 fc8b 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ee8:	e004      	b.n	8000ef4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eea:	f001 fc87 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_InitTick+0xcc>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0c9b      	lsrs	r3, r3, #18
 8000efe:	3b01      	subs	r3, #1
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_InitTick+0xd4>)
 8000f06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f0e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f24:	f003 f840 	bl	8003fa8 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d104      	bne.n	8000f38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <HAL_InitTick+0xd0>)
 8000f30:	f003 f892 	bl	8004058 <HAL_TIM_Base_Start_IT>
 8000f34:	4603      	mov	r3, r0
 8000f36:	e000      	b.n	8000f3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000008 	.word	0x24000008
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	24000370 	.word	0x24000370
 8000f54:	40001400 	.word	0x40001400

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <TIM7_IRQHandler+0x10>)
 8000f8a:	f003 f8dd 	bl	8004148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	24000370 	.word	0x24000370

08000f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_kill>:

int _kill(int pid, int sig)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fb2:	f007 f98b 	bl	80082cc <__errno>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2216      	movs	r2, #22
 8000fba:	601a      	str	r2, [r3, #0]
	return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_exit>:

void _exit (int status)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffe7 	bl	8000fa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fda:	e7fe      	b.n	8000fda <_exit+0x12>

08000fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00a      	b.n	8001004 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fee:	f3af 8000 	nop.w
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf0      	blt.n	8000fee <_read+0x12>
	}

return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e009      	b.n	800103c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe23 	bl	8000c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf1      	blt.n	8001028 <_write+0x12>
	}
	return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_close>:

int _close(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001076:	605a      	str	r2, [r3, #4]
	return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_isatty>:

int _isatty(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	return 1;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f007 f8f0 	bl	80082cc <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	24080000 	.word	0x24080000
 8001118:	00000400 	.word	0x00000400
 800111c:	240003bc 	.word	0x240003bc
 8001120:	240053e8 	.word	0x240053e8

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001128:	f7ff fab4 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f007 f9b7 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fb33 	bl	80007c0 <main>
  bx  lr
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001160:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001164:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001168:	0800b2c4 	.word	0x0800b2c4
  ldr r2, =_sbss
 800116c:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001170:	240053e4 	.word	0x240053e4

08001174 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC3_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f90f 	bl	80013a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001184:	f001 f990 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8001188:	4602      	mov	r2, r0
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_Init+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	4913      	ldr	r1, [pc, #76]	; (80011e4 <HAL_Init+0x6c>)
 8001196:	5ccb      	ldrb	r3, [r1, r3]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_Init+0x6c>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_Init+0x70>)
 80011ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_Init+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	200f      	movs	r0, #15
 80011c4:	f7ff fe5c 	bl	8000e80 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e002      	b.n	80011d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d2:	f7ff fd65 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58024400 	.word	0x58024400
 80011e4:	0800ae80 	.word	0x0800ae80
 80011e8:	24000004 	.word	0x24000004
 80011ec:	24000000 	.word	0x24000000

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2400000c 	.word	0x2400000c
 8001214:	240003c0 	.word	0x240003c0

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	240003c0 	.word	0x240003c0

08001230 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetREVID+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0c1b      	lsrs	r3, r3, #16
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	5c001000 	.word	0x5c001000

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	4313      	orrs	r3, r2
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	05fa0000 	.word	0x05fa0000

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff4c 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c6:	f7ff ff63 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff ffb3 	bl	800133c <NVIC_EncodePriority>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff82 	bl	80012e8 <__NVIC_SetPriority>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff56 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001416:	4b89      	ldr	r3, [pc, #548]	; (800163c <HAL_GPIO_Init+0x234>)
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800141a:	e194      	b.n	8001746 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8186 	beq.w	8001740 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <HAL_GPIO_Init+0x44>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d130      	bne.n	80014ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001482:	2201      	movs	r2, #1
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d123      	bne.n	800153e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0203 	and.w	r2, r3, #3
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80e0 	beq.w	8001740 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_GPIO_Init+0x238>)
 8001582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <HAL_GPIO_Init+0x238>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_GPIO_Init+0x238>)
 8001592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_GPIO_Init+0x23c>)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_GPIO_Init+0x240>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d052      	beq.n	8001670 <HAL_GPIO_Init+0x268>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_GPIO_Init+0x244>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d031      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_GPIO_Init+0x248>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d02b      	beq.n	8001632 <HAL_GPIO_Init+0x22a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_GPIO_Init+0x24c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d025      	beq.n	800162e <HAL_GPIO_Init+0x226>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_GPIO_Init+0x250>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01f      	beq.n	800162a <HAL_GPIO_Init+0x222>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_GPIO_Init+0x254>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x258>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x21a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_GPIO_Init+0x25c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x216>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_GPIO_Init+0x260>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x212>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_GPIO_Init+0x264>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x20e>
 8001612:	2309      	movs	r3, #9
 8001614:	e02d      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 8001616:	230a      	movs	r3, #10
 8001618:	e02b      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 800161a:	2308      	movs	r3, #8
 800161c:	e029      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 800161e:	2307      	movs	r3, #7
 8001620:	e027      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 8001622:	2306      	movs	r3, #6
 8001624:	e025      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 8001626:	2305      	movs	r3, #5
 8001628:	e023      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 800162a:	2304      	movs	r3, #4
 800162c:	e021      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 800162e:	2303      	movs	r3, #3
 8001630:	e01f      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 8001632:	2302      	movs	r3, #2
 8001634:	e01d      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 8001636:	2301      	movs	r3, #1
 8001638:	e01b      	b.n	8001672 <HAL_GPIO_Init+0x26a>
 800163a:	bf00      	nop
 800163c:	58000080 	.word	0x58000080
 8001640:	58024400 	.word	0x58024400
 8001644:	58000400 	.word	0x58000400
 8001648:	58020000 	.word	0x58020000
 800164c:	58020400 	.word	0x58020400
 8001650:	58020800 	.word	0x58020800
 8001654:	58020c00 	.word	0x58020c00
 8001658:	58021000 	.word	0x58021000
 800165c:	58021400 	.word	0x58021400
 8001660:	58021800 	.word	0x58021800
 8001664:	58021c00 	.word	0x58021c00
 8001668:	58022000 	.word	0x58022000
 800166c:	58022400 	.word	0x58022400
 8001670:	2300      	movs	r3, #0
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001682:	4938      	ldr	r1, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x35c>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3301      	adds	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae63 	bne.w	800141c <HAL_GPIO_Init+0x14>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	; 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	58000400 	.word	0x58000400

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001784:	e003      	b.n	800178e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	041a      	lsls	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	041a      	lsls	r2, r3, #16
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	400b      	ands	r3, r1
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	619a      	str	r2, [r3, #24]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_HSEM_FastTake+0x2c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3320      	adds	r3, #32
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_HSEM_FastTake+0x30>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	58026400 	.word	0x58026400
 8001800:	80000300 	.word	0x80000300

08001804 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800180e:	4906      	ldr	r1, [pc, #24]	; (8001828 <HAL_HSEM_Release+0x24>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	58026400 	.word	0x58026400

0800182c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	2b06      	cmp	r3, #6
 800183e:	d00a      	beq.n	8001856 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e040      	b.n	80018d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e03e      	b.n	80018d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001866:	f7ff fcd7 	bl	8001218 <HAL_GetTick>
 800186a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800186c:	e009      	b.n	8001882 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800186e:	f7ff fcd3 	bl	8001218 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187c:	d901      	bls.n	8001882 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e028      	b.n	80018d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d1ee      	bne.n	800186e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b1e      	cmp	r3, #30
 8001894:	d008      	beq.n	80018a8 <HAL_PWREx_ConfigSupply+0x7c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b2e      	cmp	r3, #46	; 0x2e
 800189a:	d005      	beq.n	80018a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b1d      	cmp	r3, #29
 80018a0:	d002      	beq.n	80018a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b2d      	cmp	r3, #45	; 0x2d
 80018a6:	d114      	bne.n	80018d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018a8:	f7ff fcb6 	bl	8001218 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ae:	e009      	b.n	80018c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018b0:	f7ff fcb2 	bl	8001218 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018be:	d901      	bls.n	80018c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e007      	b.n	80018d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_PWREx_ConfigSupply+0xb0>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d1ee      	bne.n	80018b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	58024800 	.word	0x58024800

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f000 bc1d 	b.w	800212e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8087 	beq.w	8001a10 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001902:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800190c:	4b96      	ldr	r3, [pc, #600]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	2b10      	cmp	r3, #16
 8001916:	d007      	beq.n	8001928 <HAL_RCC_OscConfig+0x48>
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	2b18      	cmp	r3, #24
 800191c:	d110      	bne.n	8001940 <HAL_RCC_OscConfig+0x60>
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d06c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x12e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d168      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e3f6      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x78>
 800194a:	4b87      	ldr	r3, [pc, #540]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a86      	ldr	r2, [pc, #536]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e02e      	b.n	80019b6 <HAL_RCC_OscConfig+0xd6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10c      	bne.n	800197a <HAL_RCC_OscConfig+0x9a>
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7d      	ldr	r2, [pc, #500]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e01d      	b.n	80019b6 <HAL_RCC_OscConfig+0xd6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0xbe>
 8001984:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 800198a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a74      	ldr	r2, [pc, #464]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0xd6>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a71      	ldr	r2, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d013      	beq.n	80019e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fc2b 	bl	8001218 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c6:	f7ff fc27 	bl	8001218 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e3aa      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d8:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0xe6>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fc17 	bl	8001218 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff fc13 	bl	8001218 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e396      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x10e>
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80cb 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1e:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_RCC_OscConfig+0x164>
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2b18      	cmp	r3, #24
 8001a38:	d156      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x208>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d151      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x17c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e368      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0219 	bic.w	r2, r3, #25
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	493f      	ldr	r1, [pc, #252]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6e:	f7ff fbd3 	bl	8001218 <HAL_GetTick>
 8001a72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fbcf 	bl	8001218 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e352      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	f7ff fbcc 	bl	8001230 <HAL_GetREVID>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d817      	bhi.n	8001ad2 <HAL_RCC_OscConfig+0x1f2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x1dc>
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aba:	e07b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	031b      	lsls	r3, r3, #12
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	e070      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	4921      	ldr	r1, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae6:	e065      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d048      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 0219 	bic.w	r2, r3, #25
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	491a      	ldr	r1, [pc, #104]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb89 	bl	8001218 <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fb85 	bl	8001218 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e308      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	f7ff fb82 	bl	8001230 <HAL_GetREVID>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d81a      	bhi.n	8001b6c <HAL_RCC_OscConfig+0x28c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x270>
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6053      	str	r3, [r2, #4]
 8001b4e:	e031      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	4902      	ldr	r1, [pc, #8]	; (8001b68 <HAL_RCC_OscConfig+0x288>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e026      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
 8001b66:	bf00      	nop
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	4b9a      	ldr	r3, [pc, #616]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	4997      	ldr	r1, [pc, #604]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e018      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a94      	ldr	r2, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb43 	bl	8001218 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff fb3f 	bl	8001218 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e2c2      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba8:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a9 	beq.w	8001d14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bcc:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d007      	beq.n	8001be8 <HAL_RCC_OscConfig+0x308>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b18      	cmp	r3, #24
 8001bdc:	d13a      	bne.n	8001c54 <HAL_RCC_OscConfig+0x374>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d135      	bne.n	8001c54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be8:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_OscConfig+0x320>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e296      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c00:	f7ff fb16 	bl	8001230 <HAL_GetREVID>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d817      	bhi.n	8001c3e <HAL_RCC_OscConfig+0x35e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x348>
 8001c16:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c1e:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c26:	e075      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c28:	4b6b      	ldr	r3, [pc, #428]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	4968      	ldr	r1, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3c:	e06a      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c3e:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	061b      	lsls	r3, r3, #24
 8001c4c:	4962      	ldr	r1, [pc, #392]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c52:	e05f      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d042      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fad6 	bl	8001218 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c70:	f7ff fad2 	bl	8001218 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e255      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c82:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8e:	f7ff facf 	bl	8001230 <HAL_GetREVID>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d817      	bhi.n	8001ccc <HAL_RCC_OscConfig+0x3ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d108      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3d6>
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cac:	4a4a      	ldr	r2, [pc, #296]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	4944      	ldr	r1, [pc, #272]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
 8001cca:	e023      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	493f      	ldr	r1, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff fa93 	bl	8001218 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fa8f 	bl	8001218 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e212      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d036      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d019      	beq.n	8001d5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	4a2a      	ldr	r2, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff fa70 	bl	8001218 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fa6c 	bl	8001218 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1ef      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x45c>
 8001d5a:	e018      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa56 	bl	8001218 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fa52 	bl	8001218 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1d5      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d039      	beq.n	8001e0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fa33 	bl	8001218 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001db6:	f7ff fa2f 	bl	8001218 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1b2      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4d6>
 8001dd4:	e01b      	b.n	8001e0e <HAL_RCC_OscConfig+0x52e>
 8001dd6:	bf00      	nop
 8001dd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ddc:	4b9b      	ldr	r3, [pc, #620]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a9a      	ldr	r2, [pc, #616]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa16 	bl	8001218 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001df0:	f7ff fa12 	bl	8001218 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e195      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e02:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8081 	beq.w	8001f1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x770>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8b      	ldr	r2, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x770>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f9f6 	bl	8001218 <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7ff f9f2 	bl	8001218 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e175      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e42:	4b83      	ldr	r3, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x770>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x584>
 8001e56:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	e02d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5e0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5a6>
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	4b74      	ldr	r3, [pc, #464]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a73      	ldr	r2, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5e0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c8>
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	4a6b      	ldr	r2, [pc, #428]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5e0>
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a67      	ldr	r2, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a64      	ldr	r2, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f9a6 	bl	8001218 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f9a2 	bl	8001218 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e123      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee6:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x5f0>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff f990 	bl	8001218 <HAL_GetTick>
 8001ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff f98c 	bl	8001218 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e10d      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8102 	beq.w	800212c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f28:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f30:	2b18      	cmp	r3, #24
 8001f32:	f000 80bd 	beq.w	80020b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	f040 809e 	bne.w	800207c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a41      	ldr	r2, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f964 	bl	8001218 <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f960 	bl	8001218 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0e3      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x774>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	430a      	orrs	r2, r1
 8001f86:	4931      	ldr	r1, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	628b      	str	r3, [r1, #40]	; 0x28
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	3b01      	subs	r3, #1
 8001f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fbc:	4923      	ldr	r1, [pc, #140]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fda:	00d2      	lsls	r2, r2, #3
 8001fdc:	491b      	ldr	r1, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f023 0202 	bic.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	4912      	ldr	r1, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 800203c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f8e9 	bl	8001218 <HAL_GetTick>
 8002046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002048:	e011      	b.n	800206e <HAL_RCC_OscConfig+0x78e>
 800204a:	bf00      	nop
 800204c:	58024400 	.word	0x58024400
 8002050:	58024800 	.word	0x58024800
 8002054:	fffffc0c 	.word	0xfffffc0c
 8002058:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff f8dc 	bl	8001218 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e05f      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x77c>
 800207a:	e057      	b.n	800212c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 8002082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f8c6 	bl	8001218 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f8c2 	bl	8001218 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e045      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x7b0>
 80020ae:	e03d      	b.n	800212c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x858>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d031      	beq.n	8002128 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d12a      	bne.n	8002128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d122      	bne.n	8002128 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d11a      	bne.n	8002128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0a5b      	lsrs	r3, r3, #9
 80020f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d111      	bne.n	8002128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3730      	adds	r7, #48	; 0x30
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58024400 	.word	0x58024400

0800213c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e19c      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b8a      	ldr	r3, [pc, #552]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	4985      	ldr	r1, [pc, #532]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e184      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	496a      	ldr	r1, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	495e      	ldr	r1, [pc, #376]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002222:	429a      	cmp	r2, r3
 8002224:	d908      	bls.n	8002238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4953      	ldr	r1, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4947      	ldr	r1, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002262:	4313      	orrs	r3, r2
 8002264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d055      	beq.n	800231e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002280:	4313      	orrs	r3, r2
 8002282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d121      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ea      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0de      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f023 0207 	bic.w	r2, r3, #7
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4925      	ldr	r1, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe ff93 	bl	8001218 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fe ff8f 	bl	8001218 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0be      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002348:	4313      	orrs	r3, r2
 800234a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d214      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e086      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
 800237c:	52002000 	.word	0x52002000
 8002380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d208      	bcs.n	800240e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800240a:	4313      	orrs	r3, r2
 800240c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d010      	beq.n	800243c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002426:	429a      	cmp	r2, r3
 8002428:	d208      	bcs.n	800243c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002438:	4313      	orrs	r3, r2
 800243a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800243c:	f000 f834 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	4912      	ldr	r1, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x360>)
 8002472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x364>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x368>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fcfe 	bl	8000e80 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	0800ae80 	.word	0x0800ae80
 800249c:	24000004 	.word	0x24000004
 80024a0:	24000000 	.word	0x24000000
 80024a4:	24000008 	.word	0x24000008

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ae:	4bb3      	ldr	r3, [pc, #716]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b6:	2b18      	cmp	r3, #24
 80024b8:	f200 8155 	bhi.w	8002766 <HAL_RCC_GetSysClockFreq+0x2be>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	08002529 	.word	0x08002529
 80024c8:	08002767 	.word	0x08002767
 80024cc:	08002767 	.word	0x08002767
 80024d0:	08002767 	.word	0x08002767
 80024d4:	08002767 	.word	0x08002767
 80024d8:	08002767 	.word	0x08002767
 80024dc:	08002767 	.word	0x08002767
 80024e0:	08002767 	.word	0x08002767
 80024e4:	0800254f 	.word	0x0800254f
 80024e8:	08002767 	.word	0x08002767
 80024ec:	08002767 	.word	0x08002767
 80024f0:	08002767 	.word	0x08002767
 80024f4:	08002767 	.word	0x08002767
 80024f8:	08002767 	.word	0x08002767
 80024fc:	08002767 	.word	0x08002767
 8002500:	08002767 	.word	0x08002767
 8002504:	08002555 	.word	0x08002555
 8002508:	08002767 	.word	0x08002767
 800250c:	08002767 	.word	0x08002767
 8002510:	08002767 	.word	0x08002767
 8002514:	08002767 	.word	0x08002767
 8002518:	08002767 	.word	0x08002767
 800251c:	08002767 	.word	0x08002767
 8002520:	08002767 	.word	0x08002767
 8002524:	0800255b 	.word	0x0800255b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002534:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	4a90      	ldr	r2, [pc, #576]	; (8002780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002546:	e111      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002548:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800254a:	61bb      	str	r3, [r7, #24]
    break;
 800254c:	e10e      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800254e:	4b8d      	ldr	r3, [pc, #564]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002550:	61bb      	str	r3, [r7, #24]
    break;
 8002552:	e10b      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002556:	61bb      	str	r3, [r7, #24]
    break;
 8002558:	e108      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002564:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002570:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800257a:	4b80      	ldr	r3, [pc, #512]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80e1 	beq.w	8002760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f000 8083 	beq.w	80026ac <HAL_RCC_GetSysClockFreq+0x204>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	f200 80a1 	bhi.w	80026f0 <HAL_RCC_GetSysClockFreq+0x248>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x114>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d056      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025ba:	e099      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02d      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	4a6b      	ldr	r2, [pc, #428]	; (8002780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f2:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002602:	ed97 6a02 	vldr	s12, [r7, #8]
 8002606:	eddf 5a61 	vldr	s11, [pc, #388]	; 800278c <HAL_RCC_GetSysClockFreq+0x2e4>
 800260a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002622:	e087      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002790 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002646:	ed97 6a02 	vldr	s12, [r7, #8]
 800264a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800278c <HAL_RCC_GetSysClockFreq+0x2e4>
 800264e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800265a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800265e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002666:	e065      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002672:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002794 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267a:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268a:	ed97 6a02 	vldr	s12, [r7, #8]
 800268e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800278c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800269e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026aa:	e043      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800278c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026ee:	e021      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002794 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002712:	ed97 6a02 	vldr	s12, [r7, #8]
 8002716:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800278c <HAL_RCC_GetSysClockFreq+0x2e4>
 800271a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800271e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002732:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	0a5b      	lsrs	r3, r3, #9
 800273a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273e:	3301      	adds	r3, #1
 8002740:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800274c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002758:	ee17 3a90 	vmov	r3, s15
 800275c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800275e:	e005      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    break;
 8002764:	e002      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002768:	61bb      	str	r3, [r7, #24]
    break;
 800276a:	bf00      	nop
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	58024400 	.word	0x58024400
 8002780:	03d09000 	.word	0x03d09000
 8002784:	003d0900 	.word	0x003d0900
 8002788:	007a1200 	.word	0x007a1200
 800278c:	46000000 	.word	0x46000000
 8002790:	4c742400 	.word	0x4c742400
 8002794:	4a742400 	.word	0x4a742400
 8002798:	4af42400 	.word	0x4af42400

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80027a2:	f7ff fe81 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_GetHCLKFreq+0x50>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490f      	ldr	r1, [pc, #60]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_RCC_GetHCLKFreq+0x50>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027da:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	58024400 	.word	0x58024400
 80027f0:	0800ae80 	.word	0x0800ae80
 80027f4:	24000004 	.word	0x24000004
 80027f8:	24000000 	.word	0x24000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002800:	f7ff ffcc 	bl	800279c <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4904      	ldr	r1, [pc, #16]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024400 	.word	0x58024400
 8002824:	0800ae80 	.word	0x0800ae80

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800282c:	f7ff ffb6 	bl	800279c <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4904      	ldr	r1, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	0800ae80 	.word	0x0800ae80

08002854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223f      	movs	r2, #63	; 0x3f
 8002862:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0207 	and.w	r2, r3, #7
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_GetClockConfig+0x7c>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetClockConfig+0x80>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	601a      	str	r2, [r3, #0]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	58024400 	.word	0x58024400
 80028d4:	52002000 	.word	0x52002000

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e4:	2300      	movs	r3, #0
 80028e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03f      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028fc:	d02a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002902:	d824      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002908:	d018      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800290a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290e:	d81e      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002918:	d007      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4ba3      	ldr	r3, [pc, #652]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4aa2      	ldr	r2, [pc, #648]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f9d5 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3324      	adds	r3, #36	; 0x24
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fa7e 	bl	8003e44 <RCCEx_PLL3_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800294c:	e003      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
      break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800295c:	4b93      	ldr	r3, [pc, #588]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002968:	4990      	ldr	r1, [pc, #576]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	650b      	str	r3, [r1, #80]	; 0x50
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	2b04      	cmp	r3, #4
 8002986:	d826      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029a5 	.word	0x080029a5
 8002994:	080029b3 	.word	0x080029b3
 8002998:	080029c5 	.word	0x080029c5
 800299c:	080029dd 	.word	0x080029dd
 80029a0:	080029dd 	.word	0x080029dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a4:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	4a80      	ldr	r2, [pc, #512]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f991 	bl	8003ce0 <RCCEx_PLL2_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fa3a 	bl	8003e44 <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	496e      	ldr	r1, [pc, #440]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	650b      	str	r3, [r1, #80]	; 0x50
 80029f6:	e001      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d042      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d02b      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a16:	d825      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a18:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1a:	d028      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1e:	d821      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d016      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d81d      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d007      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a30:	e018      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a32:	4b5e      	ldr	r3, [pc, #376]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a5d      	ldr	r2, [pc, #372]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e017      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f94a 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a50:	e00e      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f9f3 	bl	8003e44 <RCCEx_PLL3_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a62:	e005      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a76:	4b4d      	ldr	r3, [pc, #308]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	494a      	ldr	r1, [pc, #296]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	650b      	str	r3, [r1, #80]	; 0x50
 8002a88:	e001      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d049      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aa4:	d030      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aaa:	d82a      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab0:	d02c      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ab2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab6:	d824      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d018      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac2:	d81e      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002acc:	d007      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ace:	e018      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	4a35      	ldr	r2, [pc, #212]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002adc:	e017      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 f8fb 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aee:	e00e      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f9a4 	bl	8003e44 <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b00:	e005      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b22:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	658b      	str	r3, [r1, #88]	; 0x58
 8002b28:	e001      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04b      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b44:	d030      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4a:	d82a      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b50:	d02e      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b56:	d824      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5c:	d018      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b62:	d81e      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e019      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f8ab 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e010      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3324      	adds	r3, #36	; 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f954 	bl	8003e44 <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e007      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba6:	e004      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e002      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bac:	58024400 	.word	0x58024400
      break;
 8002bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bb8:	4b99      	ldr	r3, [pc, #612]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bc6:	4996      	ldr	r1, [pc, #600]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	658b      	str	r3, [r1, #88]	; 0x58
 8002bcc:	e001      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d032      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d01c      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002be6:	2b30      	cmp	r3, #48	; 0x30
 8002be8:	d817      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d00c      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d813      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d10f      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	4a88      	ldr	r2, [pc, #544]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c06:	e00e      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f866 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c18:	e005      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c2c:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	4979      	ldr	r1, [pc, #484]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d047      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c58:	d030      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c5e:	d82a      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c64:	d02c      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c6a:	d824      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d018      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	d81e      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d007      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002c82:	e018      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c90:	e017      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f001 f821 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ca2:	e00e      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3324      	adds	r3, #36	; 0x24
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f8ca 	bl	8003e44 <RCCEx_PLL3_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cc8:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	4952      	ldr	r1, [pc, #328]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8002cda:	e001      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d049      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d02e      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfa:	d828      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d06:	d822      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d0c:	d026      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d12:	d81c      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d18:	d010      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1e:	d816      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01d      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d111      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 ffd5 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d3a:	e012      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 f87e 	bl	8003e44 <RCCEx_PLL3_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d4c:	e009      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
      break;
 8002d52:	e006      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d54:	bf00      	nop
 8002d56:	e004      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d58:	bf00      	nop
 8002d5a:	e002      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d74:	492a      	ldr	r1, [pc, #168]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	650b      	str	r3, [r1, #80]	; 0x50
 8002d7a:	e001      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d04d      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d96:	d02e      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d828      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d02a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d822      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dae:	d026      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db4:	d81c      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dba:	d010      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc0:	d816      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01d      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dca:	d111      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ff84 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ddc:	e012      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3324      	adds	r3, #36	; 0x24
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 f82d 	bl	8003e44 <RCCEx_PLL3_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002dee:	e009      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
      break;
 8002df4:	e006      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002df6:	bf00      	nop
 8002df8:	e004      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e18:	4901      	ldr	r1, [pc, #4]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e1e:	e003      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d02f      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d00e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e42:	d814      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d015      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e4c:	d10f      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4e:	4baf      	ldr	r3, [pc, #700]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	4aae      	ldr	r2, [pc, #696]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e5a:	e00c      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ff3c 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e6c:	e003      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
      break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e7c:	4ba3      	ldr	r3, [pc, #652]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	49a0      	ldr	r1, [pc, #640]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d032      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d81b      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee7 	.word	0x08002ee7
 8002eb4:	08002ec1 	.word	0x08002ec1
 8002eb8:	08002ecf 	.word	0x08002ecf
 8002ebc:	08002ee7 	.word	0x08002ee7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4a91      	ldr	r2, [pc, #580]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 ff03 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002eee:	4b87      	ldr	r3, [pc, #540]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4984      	ldr	r1, [pc, #528]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f00:	e001      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8086 	beq.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7d      	ldr	r2, [pc, #500]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f20:	f7fe f97a 	bl	8001218 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f26:	e009      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe f976 	bl	8001218 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d902      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	75fb      	strb	r3, [r7, #23]
        break;
 8002f3a:	e005      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3c:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ef      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d166      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f4e:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f58:	4053      	eors	r3, r2
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d013      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f84:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d115      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe f93f 	bl	8001218 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f93b 	bl	8001218 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ed      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d126      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002fd8:	4b4c      	ldr	r3, [pc, #304]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe6:	0919      	lsrs	r1, r3, #4
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	4947      	ldr	r1, [pc, #284]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]
 8002ff2:	e005      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4a44      	ldr	r2, [pc, #272]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ffe:	6113      	str	r3, [r2, #16]
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	493f      	ldr	r1, [pc, #252]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003010:	4313      	orrs	r3, r2
 8003012:	670b      	str	r3, [r1, #112]	; 0x70
 8003014:	e004      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	75bb      	strb	r3, [r7, #22]
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8085 	beq.w	8003138 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003032:	2b28      	cmp	r3, #40	; 0x28
 8003034:	d866      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003119 	.word	0x08003119
 8003040:	08003105 	.word	0x08003105
 8003044:	08003105 	.word	0x08003105
 8003048:	08003105 	.word	0x08003105
 800304c:	08003105 	.word	0x08003105
 8003050:	08003105 	.word	0x08003105
 8003054:	08003105 	.word	0x08003105
 8003058:	08003105 	.word	0x08003105
 800305c:	080030e1 	.word	0x080030e1
 8003060:	08003105 	.word	0x08003105
 8003064:	08003105 	.word	0x08003105
 8003068:	08003105 	.word	0x08003105
 800306c:	08003105 	.word	0x08003105
 8003070:	08003105 	.word	0x08003105
 8003074:	08003105 	.word	0x08003105
 8003078:	08003105 	.word	0x08003105
 800307c:	080030f3 	.word	0x080030f3
 8003080:	08003105 	.word	0x08003105
 8003084:	08003105 	.word	0x08003105
 8003088:	08003105 	.word	0x08003105
 800308c:	08003105 	.word	0x08003105
 8003090:	08003105 	.word	0x08003105
 8003094:	08003105 	.word	0x08003105
 8003098:	08003105 	.word	0x08003105
 800309c:	08003119 	.word	0x08003119
 80030a0:	08003105 	.word	0x08003105
 80030a4:	08003105 	.word	0x08003105
 80030a8:	08003105 	.word	0x08003105
 80030ac:	08003105 	.word	0x08003105
 80030b0:	08003105 	.word	0x08003105
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003105 	.word	0x08003105
 80030bc:	08003119 	.word	0x08003119
 80030c0:	08003105 	.word	0x08003105
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
 80030d0:	08003105 	.word	0x08003105
 80030d4:	08003105 	.word	0x08003105
 80030d8:	08003105 	.word	0x08003105
 80030dc:	08003119 	.word	0x08003119
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fdfa 	bl	8003ce0 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030f0:	e013      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fea3 	bl	8003e44 <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003102:	e00a      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
      break;
 8003108:	e007      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
 8003110:	58024800 	.word	0x58024800
 8003114:	00ffffcf 	.word	0x00ffffcf
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003120:	4b96      	ldr	r3, [pc, #600]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312c:	4993      	ldr	r1, [pc, #588]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	654b      	str	r3, [r1, #84]	; 0x54
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d038      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	2b05      	cmp	r3, #5
 800314a:	d821      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003197 	.word	0x08003197
 8003158:	0800316d 	.word	0x0800316d
 800315c:	0800317f 	.word	0x0800317f
 8003160:	08003197 	.word	0x08003197
 8003164:	08003197 	.word	0x08003197
 8003168:	08003197 	.word	0x08003197
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fdb4 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800317c:	e00c      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3324      	adds	r3, #36	; 0x24
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fe5d 	bl	8003e44 <RCCEx_PLL3_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800319e:	4b77      	ldr	r3, [pc, #476]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	4974      	ldr	r1, [pc, #464]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	654b      	str	r3, [r1, #84]	; 0x54
 80031b0:	e001      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d03a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d821      	bhi.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	08003217 	.word	0x08003217
 80031d8:	080031ed 	.word	0x080031ed
 80031dc:	080031ff 	.word	0x080031ff
 80031e0:	08003217 	.word	0x08003217
 80031e4:	08003217 	.word	0x08003217
 80031e8:	08003217 	.word	0x08003217
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fd74 	bl	8003ce0 <RCCEx_PLL2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031fc:	e00c      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3324      	adds	r3, #36	; 0x24
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fe1d 	bl	8003e44 <RCCEx_PLL3_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
      break;
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800321e:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4953      	ldr	r1, [pc, #332]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	658b      	str	r3, [r1, #88]	; 0x58
 8003232:	e001      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d04b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d02e      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003254:	d828      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d02a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d822      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003266:	d026      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326c:	d81c      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003272:	d010      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d816      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01d      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800327e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003282:	d111      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fd28 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003294:	e012      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	2102      	movs	r1, #2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fdd1 	bl	8003e44 <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032a6:	e009      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	e006      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032ae:	bf00      	nop
 80032b0:	e004      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032b2:	bf00      	nop
 80032b4:	e002      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d0:	492a      	ldr	r1, [pc, #168]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	654b      	str	r3, [r1, #84]	; 0x54
 80032d6:	e001      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d04d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032f2:	d02e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80032f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032f8:	d828      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d02a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003304:	d822      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800330a:	d026      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800330c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003310:	d81c      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003316:	d010      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331c:	d816      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01d      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d111      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fcd6 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003338:	e012      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd7f 	bl	8003e44 <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800334a:	e009      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003352:	bf00      	nop
 8003354:	e004      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800335e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003374:	4901      	ldr	r1, [pc, #4]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	658b      	str	r3, [r1, #88]	; 0x58
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d04b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003396:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800339a:	d02e      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800339c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a0:	d828      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a6:	d02a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d822      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033b2:	d026      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80033b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033b8:	d81c      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033be:	d010      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d816      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01d      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	d111      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fc82 	bl	8003ce0 <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033e0:	e012      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3324      	adds	r3, #36	; 0x24
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fd2b 	bl	8003e44 <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033f2:	e009      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
      break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800340e:	4b9d      	ldr	r3, [pc, #628]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800341c:	4999      	ldr	r1, [pc, #612]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800341e:	4313      	orrs	r3, r2
 8003420:	658b      	str	r3, [r1, #88]	; 0x58
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fcfc 	bl	8003e44 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003456:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003464:	4987      	ldr	r1, [pc, #540]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003466:	4313      	orrs	r3, r2
 8003468:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3324      	adds	r3, #36	; 0x24
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fcdb 	bl	8003e44 <RCCEx_PLL3_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003498:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	4977      	ldr	r1, [pc, #476]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d034      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d01d      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80034c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c8:	d817      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d009      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80034d4:	e011      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fbff 	bl	8003ce0 <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034e6:	e00c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fca8 	bl	8003e44 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003508:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003516:	495b      	ldr	r1, [pc, #364]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003518:	4313      	orrs	r3, r2
 800351a:	658b      	str	r3, [r1, #88]	; 0x58
 800351c:	e001      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d033      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003538:	d01c      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800353a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353e:	d816      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354a:	d007      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800354c:	e00f      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3324      	adds	r3, #36	; 0x24
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fc6e 	bl	8003e44 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	493e      	ldr	r1, [pc, #248]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800358c:	4313      	orrs	r3, r2
 800358e:	654b      	str	r3, [r1, #84]	; 0x54
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d029      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ae:	d007      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80035b0:	e00f      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	4a33      	ldr	r2, [pc, #204]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035be:	e00b      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb8a 	bl	8003ce0 <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	4926      	ldr	r1, [pc, #152]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3324      	adds	r3, #36	; 0x24
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fc1b 	bl	8003e44 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d033      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362c:	d017      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800362e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003632:	d811      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d013      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800363a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363e:	d80b      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003648:	d106      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003656:	e007      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
      break;
 800365c:	e004      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367a:	4902      	ldr	r1, [pc, #8]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800367c:	4313      	orrs	r3, r2
 800367e:	654b      	str	r3, [r1, #84]	; 0x54
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003682:	bf00      	nop
 8003684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	492e      	ldr	r1, [pc, #184]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036c4:	4926      	ldr	r1, [pc, #152]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e2:	491f      	ldr	r1, [pc, #124]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036fe:	6113      	str	r3, [r2, #16]
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800370a:	4915      	ldr	r1, [pc, #84]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da08      	bge.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003726:	4313      	orrs	r3, r2
 8003728:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	4906      	ldr	r1, [pc, #24]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003746:	4313      	orrs	r3, r2
 8003748:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800374a:	7dbb      	ldrb	r3, [r7, #22]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400

08003764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003768:	f7ff f818 	bl	800279c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	58024400 	.word	0x58024400
 800378c:	0800ae80 	.word	0x0800ae80

08003790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003798:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037a2:	4b9f      	ldr	r3, [pc, #636]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	0b1b      	lsrs	r3, r3, #12
 80037a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037ae:	4b9c      	ldr	r3, [pc, #624]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037ba:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8111 	beq.w	8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f000 8083 	beq.w	80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f200 80a1 	bhi.w	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d056      	beq.n	80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037fa:	e099      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b7b      	ldr	r3, [pc, #492]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a03 	vldr	s12, [r7, #12]
 8003846:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003862:	e087      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a03 	vldr	s12, [r7, #12]
 800388a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038a6:	e065      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ea:	e043      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800392e:	e021      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c8:	ee17 2a90 	vmov	r2, s15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	03d09000 	.word	0x03d09000
 8003a28:	46000000 	.word	0x46000000
 8003a2c:	4c742400 	.word	0x4c742400
 8003a30:	4a742400 	.word	0x4a742400
 8003a34:	4af42400 	.word	0x4af42400

08003a38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a40:	4ba1      	ldr	r3, [pc, #644]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a4a:	4b9f      	ldr	r3, [pc, #636]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	0d1b      	lsrs	r3, r3, #20
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a56:	4b9c      	ldr	r3, [pc, #624]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a62:	4b99      	ldr	r3, [pc, #612]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8111 	beq.w	8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f000 8083 	beq.w	8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f200 80a1 	bhi.w	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d056      	beq.n	8003b50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003aa2:	e099      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa4:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02d      	beq.n	8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ab0:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	4a84      	ldr	r2, [pc, #528]	; (8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ada:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b0a:	e087      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b4e:	e065      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b92:	e043      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bd6:	e021      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c42:	ee17 2a90 	vmov	r2, s15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c70:	ee17 2a90 	vmov	r2, s15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9e:	ee17 2a90 	vmov	r2, s15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ca6:	e008      	b.n	8003cba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	03d09000 	.word	0x03d09000
 8003cd0:	46000000 	.word	0x46000000
 8003cd4:	4c742400 	.word	0x4c742400
 8003cd8:	4a742400 	.word	0x4a742400
 8003cdc:	4af42400 	.word	0x4af42400

08003ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d101      	bne.n	8003cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e099      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cfe:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fa85 	bl	8001218 <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d12:	f7fd fa81 	bl	8001218 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e086      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d30:	4b42      	ldr	r3, [pc, #264]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	493f      	ldr	r1, [pc, #252]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	628b      	str	r3, [r1, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d74:	4931      	ldr	r1, [pc, #196]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	492d      	ldr	r1, [pc, #180]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f023 0220 	bic.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4928      	ldr	r1, [pc, #160]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <RCCEx_PLL2_Config+0x160>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	69d2      	ldr	r2, [r2, #28]
 8003db6:	00d2      	lsls	r2, r2, #3
 8003db8:	4920      	ldr	r1, [pc, #128]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ddc:	e00f      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df0:	e005      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a11      	ldr	r2, [pc, #68]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fa05 	bl	8001218 <HAL_GetTick>
 8003e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e10:	e008      	b.n	8003e24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e12:	f7fd fa01 	bl	8001218 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e006      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	ffff0007 	.word	0xffff0007

08003e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d101      	bne.n	8003e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e099      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e62:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fd f9d3 	bl	8001218 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e76:	f7fd f9cf 	bl	8001218 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e086      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	051b      	lsls	r3, r3, #20
 8003ea2:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed8:	4931      	ldr	r1, [pc, #196]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <RCCEx_PLL3_Config+0x160>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	69d2      	ldr	r2, [r2, #28]
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	4920      	ldr	r1, [pc, #128]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f40:	e00f      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f54:	e005      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fd f953 	bl	8001218 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f76:	f7fd f94f 	bl	8001218 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e006      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	ffff0007 	.word	0xffff0007

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e049      	b.n	800404e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc fe84 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 f9f6 	bl	80043d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e054      	b.n	800411a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a26      	ldr	r2, [pc, #152]	; (8004128 <HAL_TIM_Base_Start_IT+0xd0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d01d      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a22      	ldr	r2, [pc, #136]	; (800412c <HAL_TIM_Base_Start_IT+0xd4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_TIM_Base_Start_IT+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_TIM_Base_Start_IT+0xe0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_TIM_Base_Start_IT+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <HAL_TIM_Base_Start_IT+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d115      	bne.n	8004104 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_TIM_Base_Start_IT+0xec>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d015      	beq.n	8004116 <HAL_TIM_Base_Start_IT+0xbe>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d011      	beq.n	8004116 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004102:	e008      	b.n	8004116 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e000      	b.n	8004118 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40001800 	.word	0x40001800
 8004140:	40014000 	.word	0x40014000
 8004144:	00010007 	.word	0x00010007

08004148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0202 	mvn.w	r2, #2
 8004174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f905 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8f7 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f908 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0204 	mvn.w	r2, #4
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8db 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8cd 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8de 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0208 	mvn.w	r2, #8
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8b1 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8a3 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8b4 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f887 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f879 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f88a 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0201 	mvn.w	r2, #1
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc fcc0 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f914 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d10e      	bne.n	8004326 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d107      	bne.n	8004326 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f907 	bl	8004534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d10e      	bne.n	8004352 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d107      	bne.n	8004352 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f838 	bl	80043c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b20      	cmp	r3, #32
 800435e:	d10e      	bne.n	800437e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b20      	cmp	r3, #32
 800436c:	d107      	bne.n	800437e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f06f 0220 	mvn.w	r2, #32
 8004376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8c7 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <TIM_Base_SetConfig+0x114>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d00f      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3d      	ldr	r2, [pc, #244]	; (80044f0 <TIM_Base_SetConfig+0x118>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <TIM_Base_SetConfig+0x11c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <TIM_Base_SetConfig+0x120>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3a      	ldr	r2, [pc, #232]	; (80044fc <TIM_Base_SetConfig+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <TIM_Base_SetConfig+0x114>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01f      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d01b      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <TIM_Base_SetConfig+0x118>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d017      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2b      	ldr	r2, [pc, #172]	; (80044f4 <TIM_Base_SetConfig+0x11c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <TIM_Base_SetConfig+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <TIM_Base_SetConfig+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <TIM_Base_SetConfig+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <TIM_Base_SetConfig+0x12c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_Base_SetConfig+0x9a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <TIM_Base_SetConfig+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <TIM_Base_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <TIM_Base_SetConfig+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a11      	ldr	r2, [pc, #68]	; (8004500 <TIM_Base_SetConfig+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <TIM_Base_SetConfig+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <TIM_Base_SetConfig+0x130>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	615a      	str	r2, [r3, #20]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40010400 	.word	0x40010400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc fbd7 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	; 0x24
 8004576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8c2 	bl	8004714 <UART_SetConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e022      	b.n	80045e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fe1e 	bl	80051e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fea5 	bl	8005328 <UART_CheckIdleState>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	2b20      	cmp	r3, #32
 8004600:	f040 8083 	bne.w	800470a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Transmit+0x28>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e07b      	b.n	800470c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit+0x3a>
 800461e:	2302      	movs	r3, #2
 8004620:	e074      	b.n	800470c <HAL_UART_Transmit+0x124>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2221      	movs	r2, #33	; 0x21
 8004636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463a:	f7fc fded 	bl	8001218 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d108      	bne.n	800466c <HAL_UART_Transmit+0x84>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e003      	b.n	8004674 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800467c:	e02c      	b.n	80046d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fe98 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e039      	b.n	800470c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3302      	adds	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e007      	b.n	80046c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1cc      	bne.n	800467e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fe65 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e006      	b.n	800470c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b092      	sub	sp, #72	; 0x48
 800471a:	af00      	add	r7, sp, #0
 800471c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	431a      	orrs	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4bbe      	ldr	r3, [pc, #760]	; (8004a3c <UART_SetConfig+0x328>)
 8004744:	4013      	ands	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800474c:	430b      	orrs	r3, r1
 800474e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4ab3      	ldr	r2, [pc, #716]	; (8004a40 <UART_SetConfig+0x32c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477c:	4313      	orrs	r3, r2
 800477e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	4baf      	ldr	r3, [pc, #700]	; (8004a44 <UART_SetConfig+0x330>)
 8004788:	4013      	ands	r3, r2
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004790:	430b      	orrs	r3, r1
 8004792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f023 010f 	bic.w	r1, r3, #15
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4aa6      	ldr	r2, [pc, #664]	; (8004a48 <UART_SetConfig+0x334>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d177      	bne.n	80048a4 <UART_SetConfig+0x190>
 80047b4:	4ba5      	ldr	r3, [pc, #660]	; (8004a4c <UART_SetConfig+0x338>)
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d86d      	bhi.n	800489c <UART_SetConfig+0x188>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0xb4>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	0800486d 	.word	0x0800486d
 80047cc:	0800489d 	.word	0x0800489d
 80047d0:	0800489d 	.word	0x0800489d
 80047d4:	0800489d 	.word	0x0800489d
 80047d8:	0800489d 	.word	0x0800489d
 80047dc:	0800489d 	.word	0x0800489d
 80047e0:	0800489d 	.word	0x0800489d
 80047e4:	0800489d 	.word	0x0800489d
 80047e8:	08004875 	.word	0x08004875
 80047ec:	0800489d 	.word	0x0800489d
 80047f0:	0800489d 	.word	0x0800489d
 80047f4:	0800489d 	.word	0x0800489d
 80047f8:	0800489d 	.word	0x0800489d
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	0800489d 	.word	0x0800489d
 8004804:	0800489d 	.word	0x0800489d
 8004808:	0800487d 	.word	0x0800487d
 800480c:	0800489d 	.word	0x0800489d
 8004810:	0800489d 	.word	0x0800489d
 8004814:	0800489d 	.word	0x0800489d
 8004818:	0800489d 	.word	0x0800489d
 800481c:	0800489d 	.word	0x0800489d
 8004820:	0800489d 	.word	0x0800489d
 8004824:	0800489d 	.word	0x0800489d
 8004828:	08004885 	.word	0x08004885
 800482c:	0800489d 	.word	0x0800489d
 8004830:	0800489d 	.word	0x0800489d
 8004834:	0800489d 	.word	0x0800489d
 8004838:	0800489d 	.word	0x0800489d
 800483c:	0800489d 	.word	0x0800489d
 8004840:	0800489d 	.word	0x0800489d
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800488d 	.word	0x0800488d
 800484c:	0800489d 	.word	0x0800489d
 8004850:	0800489d 	.word	0x0800489d
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	08004895 	.word	0x08004895
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004872:	e222      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487a:	e21e      	b.n	8004cba <UART_SetConfig+0x5a6>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004882:	e21a      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e216      	b.n	8004cba <UART_SetConfig+0x5a6>
 800488c:	2320      	movs	r3, #32
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e212      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e20e      	b.n	8004cba <UART_SetConfig+0x5a6>
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e20a      	b.n	8004cba <UART_SetConfig+0x5a6>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a69      	ldr	r2, [pc, #420]	; (8004a50 <UART_SetConfig+0x33c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d130      	bne.n	8004910 <UART_SetConfig+0x1fc>
 80048ae:	4b67      	ldr	r3, [pc, #412]	; (8004a4c <UART_SetConfig+0x338>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d826      	bhi.n	8004908 <UART_SetConfig+0x1f4>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x1ac>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048e9 	.word	0x080048e9
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048de:	e1ec      	b.n	8004cba <UART_SetConfig+0x5a6>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048e6:	e1e8      	b.n	8004cba <UART_SetConfig+0x5a6>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e1e4      	b.n	8004cba <UART_SetConfig+0x5a6>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e1e0      	b.n	8004cba <UART_SetConfig+0x5a6>
 80048f8:	2320      	movs	r3, #32
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fe:	e1dc      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004906:	e1d8      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490e:	e1d4      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a4f      	ldr	r2, [pc, #316]	; (8004a54 <UART_SetConfig+0x340>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d130      	bne.n	800497c <UART_SetConfig+0x268>
 800491a:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <UART_SetConfig+0x338>)
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b05      	cmp	r3, #5
 8004924:	d826      	bhi.n	8004974 <UART_SetConfig+0x260>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x218>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	08004945 	.word	0x08004945
 8004930:	0800494d 	.word	0x0800494d
 8004934:	08004955 	.word	0x08004955
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494a:	e1b6      	b.n	8004cba <UART_SetConfig+0x5a6>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004952:	e1b2      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495a:	e1ae      	b.n	8004cba <UART_SetConfig+0x5a6>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e1aa      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004964:	2320      	movs	r3, #32
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496a:	e1a6      	b.n	8004cba <UART_SetConfig+0x5a6>
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e1a2      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e19e      	b.n	8004cba <UART_SetConfig+0x5a6>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <UART_SetConfig+0x344>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d130      	bne.n	80049e8 <UART_SetConfig+0x2d4>
 8004986:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <UART_SetConfig+0x338>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b05      	cmp	r3, #5
 8004990:	d826      	bhi.n	80049e0 <UART_SetConfig+0x2cc>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x284>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e180      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049be:	e17c      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e178      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e174      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049d0:	2320      	movs	r3, #32
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d6:	e170      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049de:	e16c      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e168      	b.n	8004cba <UART_SetConfig+0x5a6>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <UART_SetConfig+0x348>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d142      	bne.n	8004a78 <UART_SetConfig+0x364>
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <UART_SetConfig+0x338>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d838      	bhi.n	8004a70 <UART_SetConfig+0x35c>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x2f0>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a1d 	.word	0x08004a1d
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	08004a2d 	.word	0x08004a2d
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a61 	.word	0x08004a61
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e14a      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e146      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e142      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e13e      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a3c:	cfff69f3 	.word	0xcfff69f3
 8004a40:	58000c00 	.word	0x58000c00
 8004a44:	11fff4ff 	.word	0x11fff4ff
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40004800 	.word	0x40004800
 8004a58:	40004c00 	.word	0x40004c00
 8004a5c:	40005000 	.word	0x40005000
 8004a60:	2320      	movs	r3, #32
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e128      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a68:	2340      	movs	r3, #64	; 0x40
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e124      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e120      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4acb      	ldr	r2, [pc, #812]	; (8004dac <UART_SetConfig+0x698>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d176      	bne.n	8004b70 <UART_SetConfig+0x45c>
 8004a82:	4bcb      	ldr	r3, [pc, #812]	; (8004db0 <UART_SetConfig+0x69c>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8a:	2b28      	cmp	r3, #40	; 0x28
 8004a8c:	d86c      	bhi.n	8004b68 <UART_SetConfig+0x454>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x380>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004b39 	.word	0x08004b39
 8004a98:	08004b69 	.word	0x08004b69
 8004a9c:	08004b69 	.word	0x08004b69
 8004aa0:	08004b69 	.word	0x08004b69
 8004aa4:	08004b69 	.word	0x08004b69
 8004aa8:	08004b69 	.word	0x08004b69
 8004aac:	08004b69 	.word	0x08004b69
 8004ab0:	08004b69 	.word	0x08004b69
 8004ab4:	08004b41 	.word	0x08004b41
 8004ab8:	08004b69 	.word	0x08004b69
 8004abc:	08004b69 	.word	0x08004b69
 8004ac0:	08004b69 	.word	0x08004b69
 8004ac4:	08004b69 	.word	0x08004b69
 8004ac8:	08004b69 	.word	0x08004b69
 8004acc:	08004b69 	.word	0x08004b69
 8004ad0:	08004b69 	.word	0x08004b69
 8004ad4:	08004b49 	.word	0x08004b49
 8004ad8:	08004b69 	.word	0x08004b69
 8004adc:	08004b69 	.word	0x08004b69
 8004ae0:	08004b69 	.word	0x08004b69
 8004ae4:	08004b69 	.word	0x08004b69
 8004ae8:	08004b69 	.word	0x08004b69
 8004aec:	08004b69 	.word	0x08004b69
 8004af0:	08004b69 	.word	0x08004b69
 8004af4:	08004b51 	.word	0x08004b51
 8004af8:	08004b69 	.word	0x08004b69
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004b69 	.word	0x08004b69
 8004b08:	08004b69 	.word	0x08004b69
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b69 	.word	0x08004b69
 8004b14:	08004b59 	.word	0x08004b59
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b69 	.word	0x08004b69
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b69 	.word	0x08004b69
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3e:	e0bc      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b46:	e0b8      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4e:	e0b4      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b56:	e0b0      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5e:	e0ac      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b66:	e0a8      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6e:	e0a4      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a8f      	ldr	r2, [pc, #572]	; (8004db4 <UART_SetConfig+0x6a0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d130      	bne.n	8004bdc <UART_SetConfig+0x4c8>
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	; (8004db0 <UART_SetConfig+0x69c>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d826      	bhi.n	8004bd4 <UART_SetConfig+0x4c0>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x478>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	08004bb5 	.word	0x08004bb5
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004baa:	e086      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb2:	e082      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bba:	e07e      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bc2:	e07a      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bca:	e076      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bcc:	2340      	movs	r3, #64	; 0x40
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd2:	e072      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bda:	e06e      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a75      	ldr	r2, [pc, #468]	; (8004db8 <UART_SetConfig+0x6a4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d130      	bne.n	8004c48 <UART_SetConfig+0x534>
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <UART_SetConfig+0x69c>)
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d826      	bhi.n	8004c40 <UART_SetConfig+0x52c>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x4e4>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c11 	.word	0x08004c11
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e050      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1e:	e04c      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c26:	e048      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2e:	e044      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c30:	2320      	movs	r3, #32
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c36:	e040      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3e:	e03c      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c46:	e038      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5b      	ldr	r2, [pc, #364]	; (8004dbc <UART_SetConfig+0x6a8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d130      	bne.n	8004cb4 <UART_SetConfig+0x5a0>
 8004c52:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <UART_SetConfig+0x69c>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b05      	cmp	r3, #5
 8004c5c:	d826      	bhi.n	8004cac <UART_SetConfig+0x598>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x550>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c7d 	.word	0x08004c7d
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	08004c8d 	.word	0x08004c8d
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e01a      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e016      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e012      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e00e      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e00a      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004caa:	e006      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb2:	e002      	b.n	8004cba <UART_SetConfig+0x5a6>
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3f      	ldr	r2, [pc, #252]	; (8004dbc <UART_SetConfig+0x6a8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	f040 80f8 	bne.w	8004eb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	dc46      	bgt.n	8004d5c <UART_SetConfig+0x648>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	f2c0 8082 	blt.w	8004dd8 <UART_SetConfig+0x6c4>
 8004cd4:	3b02      	subs	r3, #2
 8004cd6:	2b1e      	cmp	r3, #30
 8004cd8:	d87e      	bhi.n	8004dd8 <UART_SetConfig+0x6c4>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x5cc>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d63 	.word	0x08004d63
 8004ce4:	08004dd9 	.word	0x08004dd9
 8004ce8:	08004d6b 	.word	0x08004d6b
 8004cec:	08004dd9 	.word	0x08004dd9
 8004cf0:	08004dd9 	.word	0x08004dd9
 8004cf4:	08004dd9 	.word	0x08004dd9
 8004cf8:	08004d7b 	.word	0x08004d7b
 8004cfc:	08004dd9 	.word	0x08004dd9
 8004d00:	08004dd9 	.word	0x08004dd9
 8004d04:	08004dd9 	.word	0x08004dd9
 8004d08:	08004dd9 	.word	0x08004dd9
 8004d0c:	08004dd9 	.word	0x08004dd9
 8004d10:	08004dd9 	.word	0x08004dd9
 8004d14:	08004dd9 	.word	0x08004dd9
 8004d18:	08004d8b 	.word	0x08004d8b
 8004d1c:	08004dd9 	.word	0x08004dd9
 8004d20:	08004dd9 	.word	0x08004dd9
 8004d24:	08004dd9 	.word	0x08004dd9
 8004d28:	08004dd9 	.word	0x08004dd9
 8004d2c:	08004dd9 	.word	0x08004dd9
 8004d30:	08004dd9 	.word	0x08004dd9
 8004d34:	08004dd9 	.word	0x08004dd9
 8004d38:	08004dd9 	.word	0x08004dd9
 8004d3c:	08004dd9 	.word	0x08004dd9
 8004d40:	08004dd9 	.word	0x08004dd9
 8004d44:	08004dd9 	.word	0x08004dd9
 8004d48:	08004dd9 	.word	0x08004dd9
 8004d4c:	08004dd9 	.word	0x08004dd9
 8004d50:	08004dd9 	.word	0x08004dd9
 8004d54:	08004dd9 	.word	0x08004dd9
 8004d58:	08004dcb 	.word	0x08004dcb
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d037      	beq.n	8004dd0 <UART_SetConfig+0x6bc>
 8004d60:	e03a      	b.n	8004dd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d62:	f7fe fcff 	bl	8003764 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d68:	e03c      	b.n	8004de4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fd0e 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d78:	e034      	b.n	8004de4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d7a:	f107 0318 	add.w	r3, r7, #24
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fe5a 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d88:	e02c      	b.n	8004de4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <UART_SetConfig+0x69c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <UART_SetConfig+0x69c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	08db      	lsrs	r3, r3, #3
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <UART_SetConfig+0x6ac>)
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004da8:	e01c      	b.n	8004de4 <UART_SetConfig+0x6d0>
 8004daa:	bf00      	nop
 8004dac:	40011400 	.word	0x40011400
 8004db0:	58024400 	.word	0x58024400
 8004db4:	40007800 	.word	0x40007800
 8004db8:	40007c00 	.word	0x40007c00
 8004dbc:	58000c00 	.word	0x58000c00
 8004dc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b9d      	ldr	r3, [pc, #628]	; (800503c <UART_SetConfig+0x928>)
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc8:	e00c      	b.n	8004de4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dca:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <UART_SetConfig+0x92c>)
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dce:	e009      	b.n	8004de4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd6:	e005      	b.n	8004de4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004de2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 81de 	beq.w	80051a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	4a94      	ldr	r2, [pc, #592]	; (8005044 <UART_SetConfig+0x930>)
 8004df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d305      	bcc.n	8004e1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d903      	bls.n	8004e24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e22:	e1c1      	b.n	80051a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e26:	2200      	movs	r2, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	60fa      	str	r2, [r7, #12]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a84      	ldr	r2, [pc, #528]	; (8005044 <UART_SetConfig+0x930>)
 8004e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e46:	f7fb faa3 	bl	8000390 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	020b      	lsls	r3, r1, #8
 8004e5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e60:	0202      	lsls	r2, r0, #8
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	6849      	ldr	r1, [r1, #4]
 8004e66:	0849      	lsrs	r1, r1, #1
 8004e68:	2000      	movs	r0, #0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	eb12 0804 	adds.w	r8, r2, r4
 8004e72:	eb43 0905 	adc.w	r9, r3, r5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	469a      	mov	sl, r3
 8004e7e:	4693      	mov	fp, r2
 8004e80:	4652      	mov	r2, sl
 8004e82:	465b      	mov	r3, fp
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb fa82 	bl	8000390 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9a:	d308      	bcc.n	8004eae <UART_SetConfig+0x79a>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d204      	bcs.n	8004eae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e17c      	b.n	80051a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004eb4:	e178      	b.n	80051a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ebe:	f040 80c5 	bne.w	800504c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	dc48      	bgt.n	8004f5c <UART_SetConfig+0x848>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db7b      	blt.n	8004fc6 <UART_SetConfig+0x8b2>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d879      	bhi.n	8004fc6 <UART_SetConfig+0x8b2>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x7c4>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f63 	.word	0x08004f63
 8004edc:	08004f6b 	.word	0x08004f6b
 8004ee0:	08004fc7 	.word	0x08004fc7
 8004ee4:	08004fc7 	.word	0x08004fc7
 8004ee8:	08004f73 	.word	0x08004f73
 8004eec:	08004fc7 	.word	0x08004fc7
 8004ef0:	08004fc7 	.word	0x08004fc7
 8004ef4:	08004fc7 	.word	0x08004fc7
 8004ef8:	08004f83 	.word	0x08004f83
 8004efc:	08004fc7 	.word	0x08004fc7
 8004f00:	08004fc7 	.word	0x08004fc7
 8004f04:	08004fc7 	.word	0x08004fc7
 8004f08:	08004fc7 	.word	0x08004fc7
 8004f0c:	08004fc7 	.word	0x08004fc7
 8004f10:	08004fc7 	.word	0x08004fc7
 8004f14:	08004fc7 	.word	0x08004fc7
 8004f18:	08004f93 	.word	0x08004f93
 8004f1c:	08004fc7 	.word	0x08004fc7
 8004f20:	08004fc7 	.word	0x08004fc7
 8004f24:	08004fc7 	.word	0x08004fc7
 8004f28:	08004fc7 	.word	0x08004fc7
 8004f2c:	08004fc7 	.word	0x08004fc7
 8004f30:	08004fc7 	.word	0x08004fc7
 8004f34:	08004fc7 	.word	0x08004fc7
 8004f38:	08004fc7 	.word	0x08004fc7
 8004f3c:	08004fc7 	.word	0x08004fc7
 8004f40:	08004fc7 	.word	0x08004fc7
 8004f44:	08004fc7 	.word	0x08004fc7
 8004f48:	08004fc7 	.word	0x08004fc7
 8004f4c:	08004fc7 	.word	0x08004fc7
 8004f50:	08004fc7 	.word	0x08004fc7
 8004f54:	08004fc7 	.word	0x08004fc7
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d02e      	beq.n	8004fbe <UART_SetConfig+0x8aa>
 8004f60:	e031      	b.n	8004fc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f62:	f7fd fc4b 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004f66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f68:	e033      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6a:	f7fd fc5d 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8004f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f70:	e02f      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fe fc0a 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f80:	e027      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f82:	f107 0318 	add.w	r3, r7, #24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fd56 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f90:	e01f      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f92:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <UART_SetConfig+0x934>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <UART_SetConfig+0x934>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <UART_SetConfig+0x928>)
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fb0:	e00f      	b.n	8004fd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004fb2:	4b22      	ldr	r3, [pc, #136]	; (800503c <UART_SetConfig+0x928>)
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb6:	e00c      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <UART_SetConfig+0x92c>)
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80e7 	beq.w	80051a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	4a19      	ldr	r2, [pc, #100]	; (8005044 <UART_SetConfig+0x930>)
 8004fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fec:	005a      	lsls	r2, r3, #1
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	441a      	add	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d916      	bls.n	8005034 <UART_SetConfig+0x920>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d212      	bcs.n	8005034 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	b29b      	uxth	r3, r3
 8005012:	f023 030f 	bic.w	r3, r3, #15
 8005016:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	b29a      	uxth	r2, r3
 8005024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005026:	4313      	orrs	r3, r2
 8005028:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e0b9      	b.n	80051a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800503a:	e0b5      	b.n	80051a8 <UART_SetConfig+0xa94>
 800503c:	03d09000 	.word	0x03d09000
 8005040:	003d0900 	.word	0x003d0900
 8005044:	0800aeb4 	.word	0x0800aeb4
 8005048:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800504c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005050:	2b20      	cmp	r3, #32
 8005052:	dc49      	bgt.n	80050e8 <UART_SetConfig+0x9d4>
 8005054:	2b00      	cmp	r3, #0
 8005056:	db7c      	blt.n	8005152 <UART_SetConfig+0xa3e>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d87a      	bhi.n	8005152 <UART_SetConfig+0xa3e>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x950>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	080050ef 	.word	0x080050ef
 8005068:	080050f7 	.word	0x080050f7
 800506c:	08005153 	.word	0x08005153
 8005070:	08005153 	.word	0x08005153
 8005074:	080050ff 	.word	0x080050ff
 8005078:	08005153 	.word	0x08005153
 800507c:	08005153 	.word	0x08005153
 8005080:	08005153 	.word	0x08005153
 8005084:	0800510f 	.word	0x0800510f
 8005088:	08005153 	.word	0x08005153
 800508c:	08005153 	.word	0x08005153
 8005090:	08005153 	.word	0x08005153
 8005094:	08005153 	.word	0x08005153
 8005098:	08005153 	.word	0x08005153
 800509c:	08005153 	.word	0x08005153
 80050a0:	08005153 	.word	0x08005153
 80050a4:	0800511f 	.word	0x0800511f
 80050a8:	08005153 	.word	0x08005153
 80050ac:	08005153 	.word	0x08005153
 80050b0:	08005153 	.word	0x08005153
 80050b4:	08005153 	.word	0x08005153
 80050b8:	08005153 	.word	0x08005153
 80050bc:	08005153 	.word	0x08005153
 80050c0:	08005153 	.word	0x08005153
 80050c4:	08005153 	.word	0x08005153
 80050c8:	08005153 	.word	0x08005153
 80050cc:	08005153 	.word	0x08005153
 80050d0:	08005153 	.word	0x08005153
 80050d4:	08005153 	.word	0x08005153
 80050d8:	08005153 	.word	0x08005153
 80050dc:	08005153 	.word	0x08005153
 80050e0:	08005153 	.word	0x08005153
 80050e4:	08005145 	.word	0x08005145
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d02e      	beq.n	800514a <UART_SetConfig+0xa36>
 80050ec:	e031      	b.n	8005152 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ee:	f7fd fb85 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80050f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050f4:	e033      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f6:	f7fd fb97 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 80050fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050fc:	e02f      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fb44 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510c:	e027      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800510e:	f107 0318 	add.w	r3, r7, #24
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fc90 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800511c:	e01f      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800511e:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <UART_SetConfig+0xac0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800512a:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <UART_SetConfig+0xac0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	4a28      	ldr	r2, [pc, #160]	; (80051d8 <UART_SetConfig+0xac4>)
 8005136:	fa22 f303 	lsr.w	r3, r2, r3
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800513c:	e00f      	b.n	800515e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800513e:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <UART_SetConfig+0xac4>)
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005142:	e00c      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005144:	4b25      	ldr	r3, [pc, #148]	; (80051dc <UART_SetConfig+0xac8>)
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800515c:	bf00      	nop
    }

    if (pclk != 0U)
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d021      	beq.n	80051a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <UART_SetConfig+0xacc>)
 800516a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516e:	461a      	mov	r2, r3
 8005170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005172:	fbb3 f2f2 	udiv	r2, r3, r2
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	441a      	add	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d909      	bls.n	80051a2 <UART_SetConfig+0xa8e>
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d205      	bcs.n	80051a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	b29a      	uxth	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e002      	b.n	80051a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3748      	adds	r7, #72	; 0x48
 80051cc:	46bd      	mov	sp, r7
 80051ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	03d09000 	.word	0x03d09000
 80051dc:	003d0900 	.word	0x003d0900
 80051e0:	0800aeb4 	.word	0x0800aeb4

080051e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e2:	d10a      	bne.n	80052fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]
  }
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005338:	f7fb ff6e 	bl	8001218 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10e      	bne.n	800536a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f82f 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e025      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d10e      	bne.n	8005396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f819 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b09c      	sub	sp, #112	; 0x70
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4613      	mov	r3, r2
 80053cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ce:	e0a9      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	f000 80a5 	beq.w	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fb ff1d 	bl	8001218 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d140      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005404:	667b      	str	r3, [r7, #100]	; 0x64
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005410:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800541c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e6      	bne.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	663b      	str	r3, [r7, #96]	; 0x60
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005442:	64ba      	str	r2, [r7, #72]	; 0x48
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e069      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d051      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d149      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	613b      	str	r3, [r7, #16]
   return(result);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054ec:	623a      	str	r2, [r7, #32]
 80054ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69f9      	ldr	r1, [r7, #28]
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e010      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	429a      	cmp	r2, r3
 8005540:	f43f af46 	beq.w	80053d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3770      	adds	r7, #112	; 0x70
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UARTEx_DisableFifoMode+0x16>
 8005560:	2302      	movs	r3, #2
 8005562:	e027      	b.n	80055b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e02d      	b.n	8005634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f84f 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e02d      	b.n	80056b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f811 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056d8:	e031      	b.n	800573e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056da:	2310      	movs	r3, #16
 80056dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056de:	2310      	movs	r3, #16
 80056e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	0e5b      	lsrs	r3, r3, #25
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	0f5b      	lsrs	r3, r3, #29
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	7b3a      	ldrb	r2, [r7, #12]
 8005706:	4911      	ldr	r1, [pc, #68]	; (800574c <UARTEx_SetNbDataToProcess+0x94>)
 8005708:	5c8a      	ldrb	r2, [r1, r2]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800570e:	7b3a      	ldrb	r2, [r7, #12]
 8005710:	490f      	ldr	r1, [pc, #60]	; (8005750 <UARTEx_SetNbDataToProcess+0x98>)
 8005712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005714:	fb93 f3f2 	sdiv	r3, r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	7b7a      	ldrb	r2, [r7, #13]
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <UARTEx_SetNbDataToProcess+0x94>)
 8005726:	5c8a      	ldrb	r2, [r1, r2]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800572c:	7b7a      	ldrb	r2, [r7, #13]
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <UARTEx_SetNbDataToProcess+0x98>)
 8005730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005732:	fb93 f3f2 	sdiv	r3, r3, r2
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	0800aecc 	.word	0x0800aecc
 8005750:	0800aed4 	.word	0x0800aed4

08005754 <__NVIC_SetPriority>:
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	6039      	str	r1, [r7, #0]
 800575e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005764:	2b00      	cmp	r3, #0
 8005766:	db0a      	blt.n	800577e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	490c      	ldr	r1, [pc, #48]	; (80057a0 <__NVIC_SetPriority+0x4c>)
 800576e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005772:	0112      	lsls	r2, r2, #4
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	440b      	add	r3, r1
 8005778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800577c:	e00a      	b.n	8005794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4908      	ldr	r1, [pc, #32]	; (80057a4 <__NVIC_SetPriority+0x50>)
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	3b04      	subs	r3, #4
 800578c:	0112      	lsls	r2, r2, #4
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	440b      	add	r3, r1
 8005792:	761a      	strb	r2, [r3, #24]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000e100 	.word	0xe000e100
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <SysTick_Handler+0x1c>)
 80057ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057b0:	f002 f95e 	bl	8007a70 <xTaskGetSchedulerState>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ba:	f000 fd95 	bl	80062e8 <xPortSysTickHandler>
  }
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000e010 	.word	0xe000e010

080057c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057cc:	2100      	movs	r1, #0
 80057ce:	f06f 0004 	mvn.w	r0, #4
 80057d2:	f7ff ffbf 	bl	8005754 <__NVIC_SetPriority>
#endif
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e2:	f3ef 8305 	mrs	r3, IPSR
 80057e6:	603b      	str	r3, [r7, #0]
  return(result);
 80057e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057ee:	f06f 0305 	mvn.w	r3, #5
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	e00c      	b.n	8005810 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <osKernelInitialize+0x44>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d105      	bne.n	800580a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <osKernelInitialize+0x44>)
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e002      	b.n	8005810 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005810:	687b      	ldr	r3, [r7, #4]
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	240003c4 	.word	0x240003c4

08005824 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800582a:	f3ef 8305 	mrs	r3, IPSR
 800582e:	603b      	str	r3, [r7, #0]
  return(result);
 8005830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005836:	f06f 0305 	mvn.w	r3, #5
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	e010      	b.n	8005860 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <osKernelStart+0x48>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d109      	bne.n	800585a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005846:	f7ff ffbf 	bl	80057c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <osKernelStart+0x48>)
 800584c:	2202      	movs	r2, #2
 800584e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005850:	f001 fcb2 	bl	80071b8 <vTaskStartScheduler>
      stat = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	e002      	b.n	8005860 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295
 800585e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005860:	687b      	ldr	r3, [r7, #4]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	240003c4 	.word	0x240003c4

08005870 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af04      	add	r7, sp, #16
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005880:	f3ef 8305 	mrs	r3, IPSR
 8005884:	617b      	str	r3, [r7, #20]
  return(result);
 8005886:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005888:	2b00      	cmp	r3, #0
 800588a:	d17f      	bne.n	800598c <osThreadNew+0x11c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d07c      	beq.n	800598c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005896:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005898:	2318      	movs	r3, #24
 800589a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d045      	beq.n	8005938 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <osThreadNew+0x4a>
        name = attr->name;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <osThreadNew+0x70>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b38      	cmp	r3, #56	; 0x38
 80058d2:	d805      	bhi.n	80058e0 <osThreadNew+0x70>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <osThreadNew+0x74>
        return (NULL);
 80058e0:	2300      	movs	r3, #0
 80058e2:	e054      	b.n	800598e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <osThreadNew+0xaa>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2bbb      	cmp	r3, #187	; 0xbb
 8005902:	d90a      	bls.n	800591a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <osThreadNew+0xaa>
        mem = 1;
 8005914:	2301      	movs	r3, #1
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e010      	b.n	800593c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <osThreadNew+0xcc>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <osThreadNew+0xcc>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <osThreadNew+0xcc>
          mem = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e001      	b.n	800593c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d110      	bne.n	8005964 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800594a:	9202      	str	r2, [sp, #8]
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f001 fa41 	bl	8006de0 <xTaskCreateStatic>
 800595e:	4603      	mov	r3, r0
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e013      	b.n	800598c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d110      	bne.n	800598c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	b29a      	uxth	r2, r3
 800596e:	f107 0310 	add.w	r3, r7, #16
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f001 fa8c 	bl	8006e9a <xTaskCreate>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d001      	beq.n	800598c <osThreadNew+0x11c>
            hTask = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800598c:	693b      	ldr	r3, [r7, #16]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3728      	adds	r7, #40	; 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80059a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <osDelay+0x1c>
    stat = osErrorISR;
 80059aa:	f06f 0305 	mvn.w	r3, #5
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e007      	b.n	80059c2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fbc7 	bl	8007150 <vTaskDelay>
    }
  }

  return (stat);
 80059c2:	68fb      	ldr	r3, [r7, #12]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80059dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4a06      	ldr	r2, [pc, #24]	; (80059fc <vApplicationGetIdleTaskMemory+0x30>)
 80059e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ea:	601a      	str	r2, [r3, #0]
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	240003c8 	.word	0x240003c8
 80059fc:	24000484 	.word	0x24000484

08005a00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a06      	ldr	r2, [pc, #24]	; (8005a30 <vApplicationGetTimerTaskMemory+0x30>)
 8005a16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	24000884 	.word	0x24000884
 8005a30:	24000940 	.word	0x24000940

08005a34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a40:	f001 fc2a 	bl	8007298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a44:	4b5b      	ldr	r3, [pc, #364]	; (8005bb4 <pvPortMalloc+0x180>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a4c:	f000 f920 	bl	8005c90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <pvPortMalloc+0x184>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8093 	bne.w	8005b84 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01d      	beq.n	8005aa0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a64:	2208      	movs	r2, #8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d014      	beq.n	8005aa0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f023 0307 	bic.w	r3, r3, #7
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d06e      	beq.n	8005b84 <pvPortMalloc+0x150>
 8005aa6:	4b45      	ldr	r3, [pc, #276]	; (8005bbc <pvPortMalloc+0x188>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d869      	bhi.n	8005b84 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ab0:	4b43      	ldr	r3, [pc, #268]	; (8005bc0 <pvPortMalloc+0x18c>)
 8005ab2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ab4:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <pvPortMalloc+0x18c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aba:	e004      	b.n	8005ac6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d903      	bls.n	8005ad8 <pvPortMalloc+0xa4>
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f1      	bne.n	8005abc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ad8:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <pvPortMalloc+0x180>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d050      	beq.n	8005b84 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	4413      	add	r3, r2
 8005aea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	2308      	movs	r3, #8
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d91f      	bls.n	8005b44 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <pvPortMalloc+0xf8>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	613b      	str	r3, [r7, #16]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b3e:	69b8      	ldr	r0, [r7, #24]
 8005b40:	f000 f908 	bl	8005d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <pvPortMalloc+0x188>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <pvPortMalloc+0x188>)
 8005b50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b52:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <pvPortMalloc+0x188>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <pvPortMalloc+0x190>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d203      	bcs.n	8005b66 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <pvPortMalloc+0x188>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <pvPortMalloc+0x190>)
 8005b64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <pvPortMalloc+0x184>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <pvPortMalloc+0x194>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <pvPortMalloc+0x194>)
 8005b82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b84:	f001 fb96 	bl	80072b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <pvPortMalloc+0x174>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60fb      	str	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <pvPortMalloc+0x172>
	return pvReturn;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	24004d48 	.word	0x24004d48
 8005bb8:	24004d5c 	.word	0x24004d5c
 8005bbc:	24004d4c 	.word	0x24004d4c
 8005bc0:	24004d40 	.word	0x24004d40
 8005bc4:	24004d50 	.word	0x24004d50
 8005bc8:	24004d54 	.word	0x24004d54

08005bcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04d      	beq.n	8005c7a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bde:	2308      	movs	r3, #8
 8005be0:	425b      	negs	r3, r3
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <vPortFree+0xb8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <vPortFree+0x44>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60fb      	str	r3, [r7, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <vPortFree+0x62>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60bb      	str	r3, [r7, #8]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <vPortFree+0xb8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01e      	beq.n	8005c7a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11a      	bne.n	8005c7a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <vPortFree+0xb8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c54:	f001 fb20 	bl	8007298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <vPortFree+0xbc>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <vPortFree+0xbc>)
 8005c64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f000 f874 	bl	8005d54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c6c:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <vPortFree+0xc0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	4a06      	ldr	r2, [pc, #24]	; (8005c8c <vPortFree+0xc0>)
 8005c74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c76:	f001 fb1d 	bl	80072b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	24004d5c 	.word	0x24004d5c
 8005c88:	24004d4c 	.word	0x24004d4c
 8005c8c:	24004d58 	.word	0x24004d58

08005c90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c96:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c9c:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <prvHeapInit+0xac>)
 8005c9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3307      	adds	r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <prvHeapInit+0xac>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <prvHeapInit+0xb0>)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <prvHeapInit+0xb0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cdc:	2208      	movs	r2, #8
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <prvHeapInit+0xb4>)
 8005cf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <prvHeapInit+0xb4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <prvHeapInit+0xb4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	1ad2      	subs	r2, r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <prvHeapInit+0xb4>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <prvHeapInit+0xb8>)
 8005d1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <prvHeapInit+0xbc>)
 8005d26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <prvHeapInit+0xc0>)
 8005d2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	24001140 	.word	0x24001140
 8005d40:	24004d40 	.word	0x24004d40
 8005d44:	24004d48 	.word	0x24004d48
 8005d48:	24004d50 	.word	0x24004d50
 8005d4c:	24004d4c 	.word	0x24004d4c
 8005d50:	24004d5c 	.word	0x24004d5c

08005d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d5c:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <prvInsertBlockIntoFreeList+0xac>)
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e002      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x14>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d8f7      	bhi.n	8005d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d108      	bne.n	8005d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d118      	bne.n	8005ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <prvInsertBlockIntoFreeList+0xb0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d00d      	beq.n	8005dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e008      	b.n	8005de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e003      	b.n	8005de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d002      	beq.n	8005df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	24004d40 	.word	0x24004d40
 8005e04:	24004d48 	.word	0x24004d48

08005e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f103 0208 	add.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f103 0208 	add.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e00c      	b.n	8005ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e002      	b.n	8005ed8 <vListInsert+0x2e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d2f6      	bcs.n	8005ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6892      	ldr	r2, [r2, #8]
 8005f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d103      	bne.n	8005f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1e5a      	subs	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <pxPortInitialiseStack+0x64>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b14      	subs	r3, #20
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f06f 0202 	mvn.w	r2, #2
 8005fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b20      	subs	r3, #32
 8005fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	08005fd9 	.word	0x08005fd9

08005fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <prvTaskExitError+0x54>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d00a      	beq.n	8006002 <prvTaskExitError+0x2a>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60fb      	str	r3, [r7, #12]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <prvTaskExitError+0x28>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006016:	bf00      	nop
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0fc      	beq.n	8006018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	24000010 	.word	0x24000010

08006030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	24004da8 	.word	0x24004da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006058:	4808      	ldr	r0, [pc, #32]	; (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a46      	ldr	r2, [pc, #280]	; (80061a4 <xPortStartScheduler+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <xPortStartScheduler+0x128>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x46>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <xPortStartScheduler+0x12c>)
 80060c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <xPortStartScheduler+0x130>)
 80060ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f4:	e009      	b.n	800610a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <xPortStartScheduler+0x134>)
 80060fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d0ef      	beq.n	80060f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00a      	beq.n	8006138 <xPortStartScheduler+0xb8>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <xPortStartScheduler+0x134>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <xPortStartScheduler+0x134>)
 8006140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xPortStartScheduler+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <xPortStartScheduler+0x134>)
 800614c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <xPortStartScheduler+0x138>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <xPortStartScheduler+0x138>)
 800615c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xPortStartScheduler+0x138>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <xPortStartScheduler+0x138>)
 8006168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800616c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800616e:	f000 f8dd 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <xPortStartScheduler+0x13c>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006178:	f000 f8fc 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <xPortStartScheduler+0x140>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <xPortStartScheduler+0x140>)
 8006182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006188:	f7ff ff66 	bl	8006058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800618c:	f001 f9fa 	bl	8007584 <vTaskSwitchContext>
	prvTaskExitError();
 8006190:	f7ff ff22 	bl	8005fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00
 80061a4:	410fc271 	.word	0x410fc271
 80061a8:	410fc270 	.word	0x410fc270
 80061ac:	e000e400 	.word	0xe000e400
 80061b0:	24004d60 	.word	0x24004d60
 80061b4:	24004d64 	.word	0x24004d64
 80061b8:	e000ed20 	.word	0xe000ed20
 80061bc:	24000010 	.word	0x24000010
 80061c0:	e000ef34 	.word	0xe000ef34

080061c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <vPortEnterCritical+0x58>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <vPortEnterCritical+0x58>)
 80061e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <vPortEnterCritical+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortEnterCritical+0x5c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <vPortEnterCritical+0x4c>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortEnterCritical+0x4a>
	}
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	24000010 	.word	0x24000010
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <vPortExitCritical+0x50>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <vPortExitCritical+0x24>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <vPortExitCritical+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <vPortExitCritical+0x50>)
 8006250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <vPortExitCritical+0x42>
 800625a:	2300      	movs	r3, #0
 800625c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	24000010 	.word	0x24000010
	...

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f001 f968 	bl	8007584 <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	24004da8 	.word	0x24004da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f001 f885 	bl	8007410 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <xPortSysTickHandler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	24000000 	.word	0x24000000
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d914      	bls.n	80063c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <vPortValidateInterruptPriority+0x70>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <vPortValidateInterruptPriority+0x74>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20a      	bcs.n	80063c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <vPortValidateInterruptPriority+0x78>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d90a      	bls.n	80063ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	603b      	str	r3, [r7, #0]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <vPortValidateInterruptPriority+0x60>
	}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e000e3f0 	.word	0xe000e3f0
 80063fc:	24004d60 	.word	0x24004d60
 8006400:	e000ed0c 	.word	0xe000ed0c
 8006404:	24004d64 	.word	0x24004d64

08006408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xQueueGenericReset+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60bb      	str	r3, [r7, #8]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006432:	f7ff fec7 	bl	80061c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	3b01      	subs	r3, #1
 8006464:	68f9      	ldr	r1, [r7, #12]
 8006466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	441a      	add	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	22ff      	movs	r2, #255	; 0xff
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d114      	bne.n	80064b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3310      	adds	r3, #16
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f929 	bl	80076ec <xTaskRemoveFromEventList>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <xQueueGenericReset+0xcc>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	e009      	b.n	80064c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3310      	adds	r3, #16
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fca6 	bl	8005e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3324      	adds	r3, #36	; 0x24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fca1 	bl	8005e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064c6:	f7ff fead 	bl	8006224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ca:	2301      	movs	r3, #1
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08e      	sub	sp, #56	; 0x38
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <xQueueGenericCreateStatic+0x52>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <xQueueGenericCreateStatic+0x56>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <xQueueGenericCreateStatic+0x58>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	623b      	str	r3, [r7, #32]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <xQueueGenericCreateStatic+0x7e>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <xQueueGenericCreateStatic+0x82>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueGenericCreateStatic+0x84>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61fb      	str	r3, [r7, #28]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006576:	2350      	movs	r3, #80	; 0x50
 8006578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b50      	cmp	r3, #80	; 0x50
 800657e:	d00a      	beq.n	8006596 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61bb      	str	r3, [r7, #24]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006596:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00d      	beq.n	80065be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f805 	bl	80065c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3730      	adds	r7, #48	; 0x30
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e002      	b.n	80065ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f6:	2101      	movs	r1, #1
 80065f8:	69b8      	ldr	r0, [r7, #24]
 80065fa:	f7ff ff05 	bl	8006408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	; 0x38
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800661e:	2300      	movs	r3, #0
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xQueueGenericSend+0x32>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <xQueueGenericSend+0x40>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <xQueueGenericSend+0x44>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <xQueueGenericSend+0x46>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <xQueueGenericSend+0x60>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d103      	bne.n	800667e <xQueueGenericSend+0x6e>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <xQueueGenericSend+0x72>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueGenericSend+0x74>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueGenericSend+0x8e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	623b      	str	r3, [r7, #32]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800669e:	f001 f9e7 	bl	8007a70 <xTaskGetSchedulerState>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <xQueueGenericSend+0x9e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <xQueueGenericSend+0xa2>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <xQueueGenericSend+0xa4>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xQueueGenericSend+0xbe>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61fb      	str	r3, [r7, #28]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ce:	f7ff fd79 	bl	80061c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <xQueueGenericSend+0xd4>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d129      	bne.n	8006738 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ea:	f000 fa0b 	bl	8006b04 <prvCopyDataToQueue>
 80066ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fff5 	bl	80076ec <xTaskRemoveFromEventList>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <xQueueGenericSend+0x1f8>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	e00a      	b.n	8006730 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006720:	4b39      	ldr	r3, [pc, #228]	; (8006808 <xQueueGenericSend+0x1f8>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006730:	f7ff fd78 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	e063      	b.n	8006800 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800673e:	f7ff fd71 	bl	8006224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006742:	2300      	movs	r3, #0
 8006744:	e05c      	b.n	8006800 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4618      	mov	r0, r3
 8006752:	f001 f82f 	bl	80077b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675a:	f7ff fd63 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800675e:	f000 fd9b 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006762:	f7ff fd2f 	bl	80061c4 <vPortEnterCritical>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d103      	bne.n	800677c <xQueueGenericSend+0x16c>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006782:	b25b      	sxtb	r3, r3
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d103      	bne.n	8006792 <xQueueGenericSend+0x182>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006792:	f7ff fd47 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006796:	1d3a      	adds	r2, r7, #4
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 f81e 	bl	80077e0 <xTaskCheckForTimeOut>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d124      	bne.n	80067f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ac:	f000 faa2 	bl	8006cf4 <prvIsQueueFull>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	3310      	adds	r3, #16
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 ff44 	bl	800764c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c6:	f000 fa2d 	bl	8006c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f000 fd73 	bl	80072b4 <xTaskResumeAll>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f af7c 	bne.w	80066ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <xQueueGenericSend+0x1f8>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	e772      	b.n	80066ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ea:	f000 fa1b 	bl	8006c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ee:	f000 fd61 	bl	80072b4 <xTaskResumeAll>
 80067f2:	e76c      	b.n	80066ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f6:	f000 fa15 	bl	8006c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fa:	f000 fd5b 	bl	80072b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006800:	4618      	mov	r0, r3
 8006802:	3738      	adds	r7, #56	; 0x38
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b090      	sub	sp, #64	; 0x40
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <xQueueGenericSendFromISR+0x3c>
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xQueueGenericSendFromISR+0x40>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <xQueueGenericSendFromISR+0x42>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d103      	bne.n	8006876 <xQueueGenericSendFromISR+0x6a>
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <xQueueGenericSendFromISR+0x6e>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGenericSendFromISR+0x70>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	623b      	str	r3, [r7, #32]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f7ff fd77 	bl	8006388 <vPortValidateInterruptPriority>
	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61fa      	str	r2, [r7, #28]
 80068b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80068b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <xQueueGenericSendFromISR+0xbc>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d12f      	bne.n	8006928 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068de:	f000 f911 	bl	8006b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d112      	bne.n	8006912 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fef7 	bl	80076ec <xTaskRemoveFromEventList>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e007      	b.n	8006922 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006916:	3301      	adds	r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	b25a      	sxtb	r2, r3
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006922:	2301      	movs	r3, #1
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006926:	e001      	b.n	800692c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006928:	2300      	movs	r3, #0
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f383 8811 	msr	BASEPRI, r3
}
 8006936:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800693a:	4618      	mov	r0, r3
 800693c:	3740      	adds	r7, #64	; 0x40
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	; 0x30
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <xQueueReceive+0x30>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	623b      	str	r3, [r7, #32]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <xQueueReceive+0x3e>
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <xQueueReceive+0x42>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <xQueueReceive+0x44>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueReceive+0x5e>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	61fb      	str	r3, [r7, #28]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a2:	f001 f865 	bl	8007a70 <xTaskGetSchedulerState>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xQueueReceive+0x6e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <xQueueReceive+0x72>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <xQueueReceive+0x74>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xQueueReceive+0x8e>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069d2:	f7ff fbf7 	bl	80061c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01f      	beq.n	8006a22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e6:	f000 f8f7 	bl	8006bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	3310      	adds	r3, #16
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fe74 	bl	80076ec <xTaskRemoveFromEventList>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <xQueueReceive+0x1bc>)
 8006a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a1a:	f7ff fc03 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e069      	b.n	8006af6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d103      	bne.n	8006a30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a28:	f7ff fbfc 	bl	8006224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e062      	b.n	8006af6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a36:	f107 0310 	add.w	r3, r7, #16
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 feba 	bl	80077b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a44:	f7ff fbee 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a48:	f000 fc26 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a4c:	f7ff fbba 	bl	80061c4 <vPortEnterCritical>
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d103      	bne.n	8006a66 <xQueueReceive+0x122>
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d103      	bne.n	8006a7c <xQueueReceive+0x138>
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a7c:	f7ff fbd2 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a80:	1d3a      	adds	r2, r7, #4
 8006a82:	f107 0310 	add.w	r3, r7, #16
 8006a86:	4611      	mov	r1, r2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fea9 	bl	80077e0 <xTaskCheckForTimeOut>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d123      	bne.n	8006adc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a96:	f000 f917 	bl	8006cc8 <prvIsQueueEmpty>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fdcf 	bl	800764c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab0:	f000 f8b8 	bl	8006c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ab4:	f000 fbfe 	bl	80072b4 <xTaskResumeAll>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d189      	bne.n	80069d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <xQueueReceive+0x1bc>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	e780      	b.n	80069d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad2:	f000 f8a7 	bl	8006c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad6:	f000 fbed 	bl	80072b4 <xTaskResumeAll>
 8006ada:	e77a      	b.n	80069d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ade:	f000 f8a1 	bl	8006c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae2:	f000 fbe7 	bl	80072b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae8:	f000 f8ee 	bl	8006cc8 <prvIsQueueEmpty>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f43f af6f 	beq.w	80069d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3730      	adds	r7, #48	; 0x30
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10d      	bne.n	8006b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d14d      	bne.n	8006bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 ffbc 	bl	8007aac <xTaskPriorityDisinherit>
 8006b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	e043      	b.n	8006bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d119      	bne.n	8006b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6858      	ldr	r0, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	f001 fcdf 	bl	8008512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	441a      	add	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d32b      	bcc.n	8006bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	e026      	b.n	8006bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68d8      	ldr	r0, [r3, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	461a      	mov	r2, r3
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	f001 fcc5 	bl	8008512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	425b      	negs	r3, r3
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d207      	bcs.n	8006bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	425b      	negs	r3, r3
 8006bae:	441a      	add	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d105      	bne.n	8006bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bce:	697b      	ldr	r3, [r7, #20]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	441a      	add	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d303      	bcc.n	8006c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68d9      	ldr	r1, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	461a      	mov	r2, r3
 8006c16:	6838      	ldr	r0, [r7, #0]
 8006c18:	f001 fc7b 	bl	8008512 <memcpy>
	}
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c2c:	f7ff faca 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c38:	e011      	b.n	8006c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d012      	beq.n	8006c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fd50 	bl	80076ec <xTaskRemoveFromEventList>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c52:	f000 fe27 	bl	80078a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dce9      	bgt.n	8006c3a <prvUnlockQueue+0x16>
 8006c66:	e000      	b.n	8006c6a <prvUnlockQueue+0x46>
					break;
 8006c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	22ff      	movs	r2, #255	; 0xff
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c72:	f7ff fad7 	bl	8006224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c76:	f7ff faa5 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c82:	e011      	b.n	8006ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d012      	beq.n	8006cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3310      	adds	r3, #16
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fd2b 	bl	80076ec <xTaskRemoveFromEventList>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c9c:	f000 fe02 	bl	80078a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dce9      	bgt.n	8006c84 <prvUnlockQueue+0x60>
 8006cb0:	e000      	b.n	8006cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cbc:	f7ff fab2 	bl	8006224 <vPortExitCritical>
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cd0:	f7ff fa78 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	e001      	b.n	8006ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ce6:	f7ff fa9d 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8006cea:	68fb      	ldr	r3, [r7, #12]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cfc:	f7ff fa62 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d102      	bne.n	8006d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e001      	b.n	8006d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d16:	f7ff fa85 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e014      	b.n	8006d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d34:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d40:	490c      	ldr	r1, [pc, #48]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d56:	e006      	b.n	8006d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b07      	cmp	r3, #7
 8006d62:	d9e7      	bls.n	8006d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	24004d68 	.word	0x24004d68

08006d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d88:	f7ff fa1c 	bl	80061c4 <vPortEnterCritical>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d92:	b25b      	sxtb	r3, r3
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d103      	bne.n	8006da2 <vQueueWaitForMessageRestricted+0x2a>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d103      	bne.n	8006db8 <vQueueWaitForMessageRestricted+0x40>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db8:	f7ff fa34 	bl	8006224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fc61 	bl	8007694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f7ff ff26 	bl	8006c24 <prvUnlockQueue>
	}
 8006dd8:	bf00      	nop
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08e      	sub	sp, #56	; 0x38
 8006de4:	af04      	add	r7, sp, #16
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	623b      	str	r3, [r7, #32]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xTaskCreateStatic+0x46>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	61fb      	str	r3, [r7, #28]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e26:	23bc      	movs	r3, #188	; 0xbc
 8006e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2bbc      	cmp	r3, #188	; 0xbc
 8006e2e:	d00a      	beq.n	8006e46 <xTaskCreateStatic+0x66>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	61bb      	str	r3, [r7, #24]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01e      	beq.n	8006e8c <xTaskCreateStatic+0xac>
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01b      	beq.n	8006e8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e66:	2300      	movs	r3, #0
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	9302      	str	r3, [sp, #8]
 8006e6e:	f107 0314 	add.w	r3, r7, #20
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f850 	bl	8006f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e86:	f000 f8f3 	bl	8007070 <prvAddNewTaskToReadyList>
 8006e8a:	e001      	b.n	8006e90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e90:	697b      	ldr	r3, [r7, #20]
	}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b08c      	sub	sp, #48	; 0x30
 8006e9e:	af04      	add	r7, sp, #16
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fdc0 	bl	8005a34 <pvPortMalloc>
 8006eb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ebc:	20bc      	movs	r0, #188	; 0xbc
 8006ebe:	f7fe fdb9 	bl	8005a34 <pvPortMalloc>
 8006ec2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed0:	e005      	b.n	8006ede <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7fe fe7a 	bl	8005bcc <vPortFree>
 8006ed8:	e001      	b.n	8006ede <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d017      	beq.n	8006f14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f80e 	bl	8006f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f08:	69f8      	ldr	r0, [r7, #28]
 8006f0a:	f000 f8b1 	bl	8007070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e002      	b.n	8006f1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295
 8006f18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	21a5      	movs	r1, #165	; 0xa5
 8006f3e:	f001 faf6 	bl	800852e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006f4c:	440b      	add	r3, r1
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	617b      	str	r3, [r7, #20]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01f      	beq.n	8006fc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	e012      	b.n	8006fae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	7819      	ldrb	r1, [r3, #0]
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	3334      	adds	r3, #52	; 0x34
 8006f98:	460a      	mov	r2, r1
 8006f9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b0f      	cmp	r3, #15
 8006fb2:	d9e9      	bls.n	8006f88 <prvInitialiseNewTask+0x64>
 8006fb4:	e000      	b.n	8006fb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006fb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc0:	e003      	b.n	8006fca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2b37      	cmp	r3, #55	; 0x37
 8006fce:	d901      	bls.n	8006fd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fd0:	2337      	movs	r3, #55	; 0x37
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe ff2c 	bl	8005e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	3318      	adds	r3, #24
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe ff27 	bl	8005e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2200      	movs	r2, #0
 800701c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	3354      	adds	r3, #84	; 0x54
 8007024:	2260      	movs	r2, #96	; 0x60
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fa80 	bl	800852e <memset>
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <prvInitialiseNewTask+0x140>)
 8007032:	659a      	str	r2, [r3, #88]	; 0x58
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	4a0c      	ldr	r2, [pc, #48]	; (8007068 <prvInitialiseNewTask+0x144>)
 8007038:	65da      	str	r2, [r3, #92]	; 0x5c
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	4a0b      	ldr	r2, [pc, #44]	; (800706c <prvInitialiseNewTask+0x148>)
 800703e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f7fe ff93 	bl	8005f70 <pxPortInitialiseStack>
 800704a:	4602      	mov	r2, r0
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800705c:	bf00      	nop
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	0800aefc 	.word	0x0800aefc
 8007068:	0800af1c 	.word	0x0800af1c
 800706c:	0800aedc 	.word	0x0800aedc

08007070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007078:	f7ff f8a4 	bl	80061c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800707c:	4b2d      	ldr	r3, [pc, #180]	; (8007134 <prvAddNewTaskToReadyList+0xc4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	4a2c      	ldr	r2, [pc, #176]	; (8007134 <prvAddNewTaskToReadyList+0xc4>)
 8007084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007086:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <prvAddNewTaskToReadyList+0xc8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800708e:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <prvAddNewTaskToReadyList+0xc8>)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007094:	4b27      	ldr	r3, [pc, #156]	; (8007134 <prvAddNewTaskToReadyList+0xc4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d110      	bne.n	80070be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800709c:	f000 fc26 	bl	80078ec <prvInitialiseTaskLists>
 80070a0:	e00d      	b.n	80070be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <prvAddNewTaskToReadyList+0xcc>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070aa:	4b23      	ldr	r3, [pc, #140]	; (8007138 <prvAddNewTaskToReadyList+0xc8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d802      	bhi.n	80070be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070b8:	4a1f      	ldr	r2, [pc, #124]	; (8007138 <prvAddNewTaskToReadyList+0xc8>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <prvAddNewTaskToReadyList+0xd0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <prvAddNewTaskToReadyList+0xd0>)
 80070c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070c8:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <prvAddNewTaskToReadyList+0xd0>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <prvAddNewTaskToReadyList+0xd4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d903      	bls.n	80070e4 <prvAddNewTaskToReadyList+0x74>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	4a18      	ldr	r2, [pc, #96]	; (8007144 <prvAddNewTaskToReadyList+0xd4>)
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4a15      	ldr	r2, [pc, #84]	; (8007148 <prvAddNewTaskToReadyList+0xd8>)
 80070f2:	441a      	add	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7fe feb1 	bl	8005e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007100:	f7ff f890 	bl	8006224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <prvAddNewTaskToReadyList+0xcc>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <prvAddNewTaskToReadyList+0xc8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	429a      	cmp	r2, r3
 8007118:	d207      	bcs.n	800712a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <prvAddNewTaskToReadyList+0xdc>)
 800711c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2400527c 	.word	0x2400527c
 8007138:	24004da8 	.word	0x24004da8
 800713c:	24005288 	.word	0x24005288
 8007140:	24005298 	.word	0x24005298
 8007144:	24005284 	.word	0x24005284
 8007148:	24004dac 	.word	0x24004dac
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d017      	beq.n	8007192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <vTaskDelay+0x60>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <vTaskDelay+0x30>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	60bb      	str	r3, [r7, #8]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007180:	f000 f88a 	bl	8007298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fcfe 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800718c:	f000 f892 	bl	80072b4 <xTaskResumeAll>
 8007190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d107      	bne.n	80071a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <vTaskDelay+0x64>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071a8:	bf00      	nop
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	240052a4 	.word	0x240052a4
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071c6:	463a      	mov	r2, r7
 80071c8:	1d39      	adds	r1, r7, #4
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fbfc 	bl	80059cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	2300      	movs	r3, #0
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	460a      	mov	r2, r1
 80071e6:	4924      	ldr	r1, [pc, #144]	; (8007278 <vTaskStartScheduler+0xc0>)
 80071e8:	4824      	ldr	r0, [pc, #144]	; (800727c <vTaskStartScheduler+0xc4>)
 80071ea:	f7ff fdf9 	bl	8006de0 <xTaskCreateStatic>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a23      	ldr	r2, [pc, #140]	; (8007280 <vTaskStartScheduler+0xc8>)
 80071f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071f4:	4b22      	ldr	r3, [pc, #136]	; (8007280 <vTaskStartScheduler+0xc8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e001      	b.n	8007206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d102      	bne.n	8007212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800720c:	f000 fd10 	bl	8007c30 <xTimerCreateTimerTask>
 8007210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d11b      	bne.n	8007250 <vTaskStartScheduler+0x98>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	613b      	str	r3, [r7, #16]
}
 800722a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800722c:	4b15      	ldr	r3, [pc, #84]	; (8007284 <vTaskStartScheduler+0xcc>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3354      	adds	r3, #84	; 0x54
 8007232:	4a15      	ldr	r2, [pc, #84]	; (8007288 <vTaskStartScheduler+0xd0>)
 8007234:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <vTaskStartScheduler+0xd4>)
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800723e:	4b14      	ldr	r3, [pc, #80]	; (8007290 <vTaskStartScheduler+0xd8>)
 8007240:	2201      	movs	r2, #1
 8007242:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <vTaskStartScheduler+0xdc>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800724a:	f7fe ff19 	bl	8006080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800724e:	e00e      	b.n	800726e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d10a      	bne.n	800726e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <vTaskStartScheduler+0xb4>
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	0800ae68 	.word	0x0800ae68
 800727c:	080078bd 	.word	0x080078bd
 8007280:	240052a0 	.word	0x240052a0
 8007284:	24004da8 	.word	0x24004da8
 8007288:	24000014 	.word	0x24000014
 800728c:	2400529c 	.word	0x2400529c
 8007290:	24005288 	.word	0x24005288
 8007294:	24005280 	.word	0x24005280

08007298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vTaskSuspendAll+0x18>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	4a03      	ldr	r2, [pc, #12]	; (80072b0 <vTaskSuspendAll+0x18>)
 80072a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	240052a4 	.word	0x240052a4

080072b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072c2:	4b42      	ldr	r3, [pc, #264]	; (80073cc <xTaskResumeAll+0x118>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072e0:	f7fe ff70 	bl	80061c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e4:	4b39      	ldr	r3, [pc, #228]	; (80073cc <xTaskResumeAll+0x118>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	4a38      	ldr	r2, [pc, #224]	; (80073cc <xTaskResumeAll+0x118>)
 80072ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ee:	4b37      	ldr	r3, [pc, #220]	; (80073cc <xTaskResumeAll+0x118>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d162      	bne.n	80073bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <xTaskResumeAll+0x11c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d05e      	beq.n	80073bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fe:	e02f      	b.n	8007360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007300:	4b34      	ldr	r3, [pc, #208]	; (80073d4 <xTaskResumeAll+0x120>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3318      	adds	r3, #24
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fe05 	bl	8005f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3304      	adds	r3, #4
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fe00 	bl	8005f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <xTaskResumeAll+0x124>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <xTaskResumeAll+0x7c>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <xTaskResumeAll+0x124>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a27      	ldr	r2, [pc, #156]	; (80073dc <xTaskResumeAll+0x128>)
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fe fd8b 	bl	8005e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <xTaskResumeAll+0x12c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800735a:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <xTaskResumeAll+0x130>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <xTaskResumeAll+0x120>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1cb      	bne.n	8007300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736e:	f000 fb5f 	bl	8007a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <xTaskResumeAll+0x134>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737e:	f000 f847 	bl	8007410 <xTaskIncrementTick>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007388:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <xTaskResumeAll+0x130>)
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3b01      	subs	r3, #1
 8007392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f1      	bne.n	800737e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800739a:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <xTaskResumeAll+0x134>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073a0:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <xTaskResumeAll+0x130>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <xTaskResumeAll+0x138>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073bc:	f7fe ff32 	bl	8006224 <vPortExitCritical>

	return xAlreadyYielded;
 80073c0:	68bb      	ldr	r3, [r7, #8]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	240052a4 	.word	0x240052a4
 80073d0:	2400527c 	.word	0x2400527c
 80073d4:	2400523c 	.word	0x2400523c
 80073d8:	24005284 	.word	0x24005284
 80073dc:	24004dac 	.word	0x24004dac
 80073e0:	24004da8 	.word	0x24004da8
 80073e4:	24005290 	.word	0x24005290
 80073e8:	2400528c 	.word	0x2400528c
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <xTaskGetTickCount+0x1c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	24005280 	.word	0x24005280

08007410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741a:	4b4f      	ldr	r3, [pc, #316]	; (8007558 <xTaskIncrementTick+0x148>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 808f 	bne.w	8007542 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007424:	4b4d      	ldr	r3, [pc, #308]	; (800755c <xTaskIncrementTick+0x14c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800742c:	4a4b      	ldr	r2, [pc, #300]	; (800755c <xTaskIncrementTick+0x14c>)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d120      	bne.n	800747a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007438:	4b49      	ldr	r3, [pc, #292]	; (8007560 <xTaskIncrementTick+0x150>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <xTaskIncrementTick+0x48>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	603b      	str	r3, [r7, #0]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xTaskIncrementTick+0x46>
 8007458:	4b41      	ldr	r3, [pc, #260]	; (8007560 <xTaskIncrementTick+0x150>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	4b41      	ldr	r3, [pc, #260]	; (8007564 <xTaskIncrementTick+0x154>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <xTaskIncrementTick+0x150>)
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	4a3f      	ldr	r2, [pc, #252]	; (8007564 <xTaskIncrementTick+0x154>)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4b3e      	ldr	r3, [pc, #248]	; (8007568 <xTaskIncrementTick+0x158>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a3d      	ldr	r2, [pc, #244]	; (8007568 <xTaskIncrementTick+0x158>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	f000 fadb 	bl	8007a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800747a:	4b3c      	ldr	r3, [pc, #240]	; (800756c <xTaskIncrementTick+0x15c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d349      	bcc.n	8007518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007484:	4b36      	ldr	r3, [pc, #216]	; (8007560 <xTaskIncrementTick+0x150>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748e:	4b37      	ldr	r3, [pc, #220]	; (800756c <xTaskIncrementTick+0x15c>)
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	601a      	str	r2, [r3, #0]
					break;
 8007496:	e03f      	b.n	8007518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b31      	ldr	r3, [pc, #196]	; (8007560 <xTaskIncrementTick+0x150>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d203      	bcs.n	80074b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074b0:	4a2e      	ldr	r2, [pc, #184]	; (800756c <xTaskIncrementTick+0x15c>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074b6:	e02f      	b.n	8007518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe fd2d 	bl	8005f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	3318      	adds	r3, #24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fd24 	bl	8005f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <xTaskIncrementTick+0x160>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d903      	bls.n	80074e8 <xTaskIncrementTick+0xd8>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a22      	ldr	r2, [pc, #136]	; (8007570 <xTaskIncrementTick+0x160>)
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4a1f      	ldr	r2, [pc, #124]	; (8007574 <xTaskIncrementTick+0x164>)
 80074f6:	441a      	add	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fe fcaf 	bl	8005e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <xTaskIncrementTick+0x168>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	429a      	cmp	r2, r3
 8007510:	d3b8      	bcc.n	8007484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007512:	2301      	movs	r3, #1
 8007514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007516:	e7b5      	b.n	8007484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007518:	4b17      	ldr	r3, [pc, #92]	; (8007578 <xTaskIncrementTick+0x168>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	4915      	ldr	r1, [pc, #84]	; (8007574 <xTaskIncrementTick+0x164>)
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d901      	bls.n	8007534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007530:	2301      	movs	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <xTaskIncrementTick+0x16c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e004      	b.n	800754c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <xTaskIncrementTick+0x170>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a0d      	ldr	r2, [pc, #52]	; (8007580 <xTaskIncrementTick+0x170>)
 800754a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	240052a4 	.word	0x240052a4
 800755c:	24005280 	.word	0x24005280
 8007560:	24005234 	.word	0x24005234
 8007564:	24005238 	.word	0x24005238
 8007568:	24005294 	.word	0x24005294
 800756c:	2400529c 	.word	0x2400529c
 8007570:	24005284 	.word	0x24005284
 8007574:	24004dac 	.word	0x24004dac
 8007578:	24004da8 	.word	0x24004da8
 800757c:	24005290 	.word	0x24005290
 8007580:	2400528c 	.word	0x2400528c

08007584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800758a:	4b2a      	ldr	r3, [pc, #168]	; (8007634 <vTaskSwitchContext+0xb0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007592:	4b29      	ldr	r3, [pc, #164]	; (8007638 <vTaskSwitchContext+0xb4>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007598:	e046      	b.n	8007628 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800759a:	4b27      	ldr	r3, [pc, #156]	; (8007638 <vTaskSwitchContext+0xb4>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <vTaskSwitchContext+0xb8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e010      	b.n	80075ca <vTaskSwitchContext+0x46>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <vTaskSwitchContext+0x3e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	491d      	ldr	r1, [pc, #116]	; (8007640 <vTaskSwitchContext+0xbc>)
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0e4      	beq.n	80075a8 <vTaskSwitchContext+0x24>
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <vTaskSwitchContext+0xbc>)
 80075ea:	4413      	add	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	605a      	str	r2, [r3, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3308      	adds	r3, #8
 8007600:	429a      	cmp	r2, r3
 8007602:	d104      	bne.n	800760e <vTaskSwitchContext+0x8a>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a0b      	ldr	r2, [pc, #44]	; (8007644 <vTaskSwitchContext+0xc0>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <vTaskSwitchContext+0xb8>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <vTaskSwitchContext+0xc0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3354      	adds	r3, #84	; 0x54
 8007624:	4a08      	ldr	r2, [pc, #32]	; (8007648 <vTaskSwitchContext+0xc4>)
 8007626:	6013      	str	r3, [r2, #0]
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	240052a4 	.word	0x240052a4
 8007638:	24005290 	.word	0x24005290
 800763c:	24005284 	.word	0x24005284
 8007640:	24004dac 	.word	0x24004dac
 8007644:	24004da8 	.word	0x24004da8
 8007648:	24000014 	.word	0x24000014

0800764c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007672:	4b07      	ldr	r3, [pc, #28]	; (8007690 <vTaskPlaceOnEventList+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3318      	adds	r3, #24
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fe fc15 	bl	8005eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007680:	2101      	movs	r1, #1
 8007682:	6838      	ldr	r0, [r7, #0]
 8007684:	f000 fa80 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	24004da8 	.word	0x24004da8

08007694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	617b      	str	r3, [r7, #20]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3318      	adds	r3, #24
 80076c2:	4619      	mov	r1, r3
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7fe fbcc 	bl	8005e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	68b8      	ldr	r0, [r7, #8]
 80076da:	f000 fa55 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
	}
 80076de:	bf00      	nop
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	24004da8 	.word	0x24004da8

080076ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60fb      	str	r3, [r7, #12]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3318      	adds	r3, #24
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fbfd 	bl	8005f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <xTaskRemoveFromEventList+0xb0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11d      	bne.n	8007766 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fbf4 	bl	8005f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <xTaskRemoveFromEventList+0xb4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d903      	bls.n	8007748 <xTaskRemoveFromEventList+0x5c>
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <xTaskRemoveFromEventList+0xb4>)
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <xTaskRemoveFromEventList+0xb8>)
 8007756:	441a      	add	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f7fe fb7f 	bl	8005e62 <vListInsertEnd>
 8007764:	e005      	b.n	8007772 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3318      	adds	r3, #24
 800776a:	4619      	mov	r1, r3
 800776c:	480e      	ldr	r0, [pc, #56]	; (80077a8 <xTaskRemoveFromEventList+0xbc>)
 800776e:	f7fe fb78 	bl	8005e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <xTaskRemoveFromEventList+0xc0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d905      	bls.n	800778c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007784:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <xTaskRemoveFromEventList+0xc4>)
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e001      	b.n	8007790 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007790:	697b      	ldr	r3, [r7, #20]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	240052a4 	.word	0x240052a4
 80077a0:	24005284 	.word	0x24005284
 80077a4:	24004dac 	.word	0x24004dac
 80077a8:	2400523c 	.word	0x2400523c
 80077ac:	24004da8 	.word	0x24004da8
 80077b0:	24005290 	.word	0x24005290

080077b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <vTaskInternalSetTimeOutState+0x24>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <vTaskInternalSetTimeOutState+0x28>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	605a      	str	r2, [r3, #4]
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	24005294 	.word	0x24005294
 80077dc:	24005280 	.word	0x24005280

080077e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007822:	f7fe fccf 	bl	80061c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007826:	4b1d      	ldr	r3, [pc, #116]	; (800789c <xTaskCheckForTimeOut+0xbc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d102      	bne.n	8007846 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	e023      	b.n	800788e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <xTaskCheckForTimeOut+0xc0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d007      	beq.n	8007862 <xTaskCheckForTimeOut+0x82>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	429a      	cmp	r2, r3
 800785a:	d302      	bcc.n	8007862 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e015      	b.n	800788e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	429a      	cmp	r2, r3
 800786a:	d20b      	bcs.n	8007884 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff9b 	bl	80077b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	e004      	b.n	800788e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800788e:	f7fe fcc9 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8007892:	69fb      	ldr	r3, [r7, #28]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3720      	adds	r7, #32
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	24005280 	.word	0x24005280
 80078a0:	24005294 	.word	0x24005294

080078a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <vTaskMissedYield+0x14>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	24005290 	.word	0x24005290

080078bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078c4:	f000 f852 	bl	800796c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078c8:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <prvIdleTask+0x28>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d9f9      	bls.n	80078c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <prvIdleTask+0x2c>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078e0:	e7f0      	b.n	80078c4 <prvIdleTask+0x8>
 80078e2:	bf00      	nop
 80078e4:	24004dac 	.word	0x24004dac
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	e00c      	b.n	8007912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4a12      	ldr	r2, [pc, #72]	; (800794c <prvInitialiseTaskLists+0x60>)
 8007904:	4413      	add	r3, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fa7e 	bl	8005e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3301      	adds	r3, #1
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b37      	cmp	r3, #55	; 0x37
 8007916:	d9ef      	bls.n	80078f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007918:	480d      	ldr	r0, [pc, #52]	; (8007950 <prvInitialiseTaskLists+0x64>)
 800791a:	f7fe fa75 	bl	8005e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800791e:	480d      	ldr	r0, [pc, #52]	; (8007954 <prvInitialiseTaskLists+0x68>)
 8007920:	f7fe fa72 	bl	8005e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <prvInitialiseTaskLists+0x6c>)
 8007926:	f7fe fa6f 	bl	8005e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800792a:	480c      	ldr	r0, [pc, #48]	; (800795c <prvInitialiseTaskLists+0x70>)
 800792c:	f7fe fa6c 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007930:	480b      	ldr	r0, [pc, #44]	; (8007960 <prvInitialiseTaskLists+0x74>)
 8007932:	f7fe fa69 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <prvInitialiseTaskLists+0x78>)
 8007938:	4a05      	ldr	r2, [pc, #20]	; (8007950 <prvInitialiseTaskLists+0x64>)
 800793a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <prvInitialiseTaskLists+0x7c>)
 800793e:	4a05      	ldr	r2, [pc, #20]	; (8007954 <prvInitialiseTaskLists+0x68>)
 8007940:	601a      	str	r2, [r3, #0]
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	24004dac 	.word	0x24004dac
 8007950:	2400520c 	.word	0x2400520c
 8007954:	24005220 	.word	0x24005220
 8007958:	2400523c 	.word	0x2400523c
 800795c:	24005250 	.word	0x24005250
 8007960:	24005268 	.word	0x24005268
 8007964:	24005234 	.word	0x24005234
 8007968:	24005238 	.word	0x24005238

0800796c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007972:	e019      	b.n	80079a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007974:	f7fe fc26 	bl	80061c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <prvCheckTasksWaitingTermination+0x50>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fac9 	bl	8005f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800798a:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <prvCheckTasksWaitingTermination+0x54>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3b01      	subs	r3, #1
 8007990:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <prvCheckTasksWaitingTermination+0x54>)
 8007992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007994:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <prvCheckTasksWaitingTermination+0x58>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3b01      	subs	r3, #1
 800799a:	4a0a      	ldr	r2, [pc, #40]	; (80079c4 <prvCheckTasksWaitingTermination+0x58>)
 800799c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800799e:	f7fe fc41 	bl	8006224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f810 	bl	80079c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <prvCheckTasksWaitingTermination+0x58>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e1      	bne.n	8007974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	24005250 	.word	0x24005250
 80079c0:	2400527c 	.word	0x2400527c
 80079c4:	24005264 	.word	0x24005264

080079c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3354      	adds	r3, #84	; 0x54
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fb25 	bl	8009024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d108      	bne.n	80079f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe f8ef 	bl	8005bcc <vPortFree>
				vPortFree( pxTCB );
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fe f8ec 	bl	8005bcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079f4:	e018      	b.n	8007a28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d103      	bne.n	8007a08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fe f8e3 	bl	8005bcc <vPortFree>
	}
 8007a06:	e00f      	b.n	8007a28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d00a      	beq.n	8007a28 <prvDeleteTCB+0x60>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <prvDeleteTCB+0x5e>
	}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a36:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvResetNextTaskUnblockTime+0x38>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <prvResetNextTaskUnblockTime+0x3c>)
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295
 8007a46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a48:	e008      	b.n	8007a5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4a:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <prvResetNextTaskUnblockTime+0x38>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <prvResetNextTaskUnblockTime+0x3c>)
 8007a5a:	6013      	str	r3, [r2, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	24005234 	.word	0x24005234
 8007a6c:	2400529c 	.word	0x2400529c

08007a70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <xTaskGetSchedulerState+0x34>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d102      	bne.n	8007a84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	e008      	b.n	8007a96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a84:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <xTaskGetSchedulerState+0x38>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	e001      	b.n	8007a96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a92:	2300      	movs	r3, #0
 8007a94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a96:	687b      	ldr	r3, [r7, #4]
	}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	24005288 	.word	0x24005288
 8007aa8:	240052a4 	.word	0x240052a4

08007aac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d056      	beq.n	8007b70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ac2:	4b2e      	ldr	r3, [pc, #184]	; (8007b7c <xTaskPriorityDisinherit+0xd0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d00a      	beq.n	8007ae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	60bb      	str	r3, [r7, #8]
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d02c      	beq.n	8007b70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d128      	bne.n	8007b70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	3304      	adds	r3, #4
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe f9fa 	bl	8005f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <xTaskPriorityDisinherit+0xd4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d903      	bls.n	8007b50 <xTaskPriorityDisinherit+0xa4>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <xTaskPriorityDisinherit+0xd4>)
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <xTaskPriorityDisinherit+0xd8>)
 8007b5e:	441a      	add	r2, r3
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7fe f97b 	bl	8005e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b70:	697b      	ldr	r3, [r7, #20]
	}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	24004da8 	.word	0x24004da8
 8007b80:	24005284 	.word	0x24005284
 8007b84:	24004dac 	.word	0x24004dac

08007b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b92:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe f9bc 	bl	8005f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d10a      	bne.n	8007bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb2:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4819      	ldr	r0, [pc, #100]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bbc:	f7fe f951 	bl	8005e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bc0:	e026      	b.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bca:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d209      	bcs.n	8007bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fe f95f 	bl	8005eaa <vListInsert>
}
 8007bec:	e010      	b.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fe f955 	bl	8005eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d202      	bcs.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c0a:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6013      	str	r3, [r2, #0]
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	24005280 	.word	0x24005280
 8007c1c:	24004da8 	.word	0x24004da8
 8007c20:	24005268 	.word	0x24005268
 8007c24:	24005238 	.word	0x24005238
 8007c28:	24005234 	.word	0x24005234
 8007c2c:	2400529c 	.word	0x2400529c

08007c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	; 0x28
 8007c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c3a:	f000 fb07 	bl	800824c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c3e:	4b1c      	ldr	r3, [pc, #112]	; (8007cb0 <xTimerCreateTimerTask+0x80>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d021      	beq.n	8007c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c4e:	1d3a      	adds	r2, r7, #4
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	f107 030c 	add.w	r3, r7, #12
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd fed1 	bl	8005a00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	2302      	movs	r3, #2
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	460a      	mov	r2, r1
 8007c70:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <xTimerCreateTimerTask+0x84>)
 8007c72:	4811      	ldr	r0, [pc, #68]	; (8007cb8 <xTimerCreateTimerTask+0x88>)
 8007c74:	f7ff f8b4 	bl	8006de0 <xTaskCreateStatic>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4a10      	ldr	r2, [pc, #64]	; (8007cbc <xTimerCreateTimerTask+0x8c>)
 8007c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <xTimerCreateTimerTask+0x8c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c86:	2301      	movs	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	240052d8 	.word	0x240052d8
 8007cb4:	0800ae70 	.word	0x0800ae70
 8007cb8:	08007df5 	.word	0x08007df5
 8007cbc:	240052dc 	.word	0x240052dc

08007cc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xTimerGenericCommand+0x2e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	623b      	str	r3, [r7, #32]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cee:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <xTimerGenericCommand+0x98>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d02a      	beq.n	8007d4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b05      	cmp	r3, #5
 8007d06:	dc18      	bgt.n	8007d3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d08:	f7ff feb2 	bl	8007a70 <xTaskGetSchedulerState>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d109      	bne.n	8007d26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <xTimerGenericCommand+0x98>)
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	f107 0110 	add.w	r1, r7, #16
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	f7fe fc77 	bl	8006610 <xQueueGenericSend>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24
 8007d24:	e012      	b.n	8007d4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <xTimerGenericCommand+0x98>)
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	f107 0110 	add.w	r1, r7, #16
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7fe fc6d 	bl	8006610 <xQueueGenericSend>
 8007d36:	6278      	str	r0, [r7, #36]	; 0x24
 8007d38:	e008      	b.n	8007d4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <xTimerGenericCommand+0x98>)
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f107 0110 	add.w	r1, r7, #16
 8007d42:	2300      	movs	r3, #0
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	f7fe fd61 	bl	800680c <xQueueGenericSendFromISR>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3728      	adds	r7, #40	; 0x28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	240052d8 	.word	0x240052d8

08007d5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <prvProcessExpiredTimer+0x94>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe f8d1 	bl	8005f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d022      	beq.n	8007dce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	18d1      	adds	r1, r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f000 f8d1 	bl	8007f3c <prvInsertTimerInActiveList>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01f      	beq.n	8007de0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	2100      	movs	r1, #0
 8007daa:	6978      	ldr	r0, [r7, #20]
 8007dac:	f7ff ff88 	bl	8007cc0 <xTimerGenericCommand>
 8007db0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d113      	bne.n	8007de0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	60fb      	str	r3, [r7, #12]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd4:	f023 0301 	bic.w	r3, r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	6978      	ldr	r0, [r7, #20]
 8007de6:	4798      	blx	r3
}
 8007de8:	bf00      	nop
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	240052d0 	.word	0x240052d0

08007df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dfc:	f107 0308 	add.w	r3, r7, #8
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f857 	bl	8007eb4 <prvGetNextExpireTime>
 8007e06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f803 	bl	8007e18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e12:	f000 f8d5 	bl	8007fc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e16:	e7f1      	b.n	8007dfc <prvTimerTask+0x8>

08007e18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e22:	f7ff fa39 	bl	8007298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f866 	bl	8007efc <prvSampleTimeNow>
 8007e30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d130      	bne.n	8007e9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <prvProcessTimerOrBlockTask+0x3c>
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d806      	bhi.n	8007e54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e46:	f7ff fa35 	bl	80072b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff ff85 	bl	8007d5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e52:	e024      	b.n	8007e9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e5a:	4b13      	ldr	r3, [pc, #76]	; (8007ea8 <prvProcessTimerOrBlockTask+0x90>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <prvProcessTimerOrBlockTask+0x50>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <prvProcessTimerOrBlockTask+0x52>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e6c:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <prvProcessTimerOrBlockTask+0x94>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	f7fe ff7d 	bl	8006d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e7e:	f7ff fa19 	bl	80072b4 <xTaskResumeAll>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <prvProcessTimerOrBlockTask+0x98>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
}
 8007e98:	e001      	b.n	8007e9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e9a:	f7ff fa0b 	bl	80072b4 <xTaskResumeAll>
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	240052d4 	.word	0x240052d4
 8007eac:	240052d8 	.word	0x240052d8
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <prvGetNextExpireTime+0x44>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <prvGetNextExpireTime+0x16>
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	e000      	b.n	8007ecc <prvGetNextExpireTime+0x18>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <prvGetNextExpireTime+0x44>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e001      	b.n	8007ee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	240052d0 	.word	0x240052d0

08007efc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f04:	f7ff fa74 	bl	80073f0 <xTaskGetTickCount>
 8007f08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <prvSampleTimeNow+0x3c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d205      	bcs.n	8007f20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f14:	f000 f936 	bl	8008184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e002      	b.n	8007f26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f26:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <prvSampleTimeNow+0x3c>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	240052e0 	.word	0x240052e0

08007f3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d812      	bhi.n	8007f88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	1ad2      	subs	r2, r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d302      	bcc.n	8007f76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e01b      	b.n	8007fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f76:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <prvInsertTimerInActiveList+0x7c>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7fd ff92 	bl	8005eaa <vListInsert>
 8007f86:	e012      	b.n	8007fae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d206      	bcs.n	8007f9e <prvInsertTimerInActiveList+0x62>
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d302      	bcc.n	8007f9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	e007      	b.n	8007fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <prvInsertTimerInActiveList+0x80>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4610      	mov	r0, r2
 8007faa:	f7fd ff7e 	bl	8005eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fae:	697b      	ldr	r3, [r7, #20]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	240052d4 	.word	0x240052d4
 8007fbc:	240052d0 	.word	0x240052d0

08007fc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fc6:	e0ca      	b.n	800815e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	da18      	bge.n	8008000 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fce:	1d3b      	adds	r3, r7, #4
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	61fb      	str	r3, [r7, #28]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff6:	6850      	ldr	r0, [r2, #4]
 8007ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffa:	6892      	ldr	r2, [r2, #8]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f2c0 80aa 	blt.w	800815c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd ff7f 	bl	8005f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800801e:	463b      	mov	r3, r7
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff6b 	bl	8007efc <prvSampleTimeNow>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b09      	cmp	r3, #9
 800802c:	f200 8097 	bhi.w	800815e <prvProcessReceivedCommands+0x19e>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <prvProcessReceivedCommands+0x78>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	08008061 	.word	0x08008061
 800803c:	08008061 	.word	0x08008061
 8008040:	08008061 	.word	0x08008061
 8008044:	080080d5 	.word	0x080080d5
 8008048:	080080e9 	.word	0x080080e9
 800804c:	08008133 	.word	0x08008133
 8008050:	08008061 	.word	0x08008061
 8008054:	08008061 	.word	0x08008061
 8008058:	080080d5 	.word	0x080080d5
 800805c:	080080e9 	.word	0x080080e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	18d1      	adds	r1, r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008080:	f7ff ff5c 	bl	8007f3c <prvInsertTimerInActiveList>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d069      	beq.n	800815e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d05e      	beq.n	800815e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	441a      	add	r2, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	2300      	movs	r3, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b2:	f7ff fe05 	bl	8007cc0 <xTimerGenericCommand>
 80080b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d14f      	bne.n	800815e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	61bb      	str	r3, [r7, #24]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080e6:	e03a      	b.n	800815e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	617b      	str	r3, [r7, #20]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	18d1      	adds	r1, r2, r3
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812c:	f7ff ff06 	bl	8007f3c <prvInsertTimerInActiveList>
					break;
 8008130:	e015      	b.n	800815e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008142:	f7fd fd43 	bl	8005bcc <vPortFree>
 8008146:	e00a      	b.n	800815e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814e:	f023 0301 	bic.w	r3, r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800815a:	e000      	b.n	800815e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800815c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800815e:	4b08      	ldr	r3, [pc, #32]	; (8008180 <prvProcessReceivedCommands+0x1c0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	1d39      	adds	r1, r7, #4
 8008164:	2200      	movs	r2, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fbec 	bl	8006944 <xQueueReceive>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	f47f af2a 	bne.w	8007fc8 <prvProcessReceivedCommands+0x8>
	}
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	3730      	adds	r7, #48	; 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	240052d8 	.word	0x240052d8

08008184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800818a:	e048      	b.n	800821e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800818c:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <prvSwitchTimerLists+0xc0>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008196:	4b2b      	ldr	r3, [pc, #172]	; (8008244 <prvSwitchTimerLists+0xc0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd feb9 	bl	8005f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02e      	beq.n	800821e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d90e      	bls.n	80081f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081de:	4b19      	ldr	r3, [pc, #100]	; (8008244 <prvSwitchTimerLists+0xc0>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f7fd fe5e 	bl	8005eaa <vListInsert>
 80081ee:	e016      	b.n	800821e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fd60 	bl	8007cc0 <xTimerGenericCommand>
 8008200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	603b      	str	r3, [r7, #0]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800821e:	4b09      	ldr	r3, [pc, #36]	; (8008244 <prvSwitchTimerLists+0xc0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1b1      	bne.n	800818c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008228:	4b06      	ldr	r3, [pc, #24]	; (8008244 <prvSwitchTimerLists+0xc0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <prvSwitchTimerLists+0xc4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a04      	ldr	r2, [pc, #16]	; (8008244 <prvSwitchTimerLists+0xc0>)
 8008234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008236:	4a04      	ldr	r2, [pc, #16]	; (8008248 <prvSwitchTimerLists+0xc4>)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	6013      	str	r3, [r2, #0]
}
 800823c:	bf00      	nop
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	240052d0 	.word	0x240052d0
 8008248:	240052d4 	.word	0x240052d4

0800824c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008252:	f7fd ffb7 	bl	80061c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008256:	4b15      	ldr	r3, [pc, #84]	; (80082ac <prvCheckForValidListAndQueue+0x60>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d120      	bne.n	80082a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800825e:	4814      	ldr	r0, [pc, #80]	; (80082b0 <prvCheckForValidListAndQueue+0x64>)
 8008260:	f7fd fdd2 	bl	8005e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008264:	4813      	ldr	r0, [pc, #76]	; (80082b4 <prvCheckForValidListAndQueue+0x68>)
 8008266:	f7fd fdcf 	bl	8005e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <prvCheckForValidListAndQueue+0x6c>)
 800826c:	4a10      	ldr	r2, [pc, #64]	; (80082b0 <prvCheckForValidListAndQueue+0x64>)
 800826e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008270:	4b12      	ldr	r3, [pc, #72]	; (80082bc <prvCheckForValidListAndQueue+0x70>)
 8008272:	4a10      	ldr	r2, [pc, #64]	; (80082b4 <prvCheckForValidListAndQueue+0x68>)
 8008274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008276:	2300      	movs	r3, #0
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <prvCheckForValidListAndQueue+0x74>)
 800827c:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <prvCheckForValidListAndQueue+0x78>)
 800827e:	2110      	movs	r1, #16
 8008280:	200a      	movs	r0, #10
 8008282:	f7fe f929 	bl	80064d8 <xQueueGenericCreateStatic>
 8008286:	4603      	mov	r3, r0
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <prvCheckForValidListAndQueue+0x60>)
 800828a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <prvCheckForValidListAndQueue+0x60>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <prvCheckForValidListAndQueue+0x60>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	490b      	ldr	r1, [pc, #44]	; (80082c8 <prvCheckForValidListAndQueue+0x7c>)
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fd42 	bl	8006d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082a0:	f7fd ffc0 	bl	8006224 <vPortExitCritical>
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	240052d8 	.word	0x240052d8
 80082b0:	240052a8 	.word	0x240052a8
 80082b4:	240052bc 	.word	0x240052bc
 80082b8:	240052d0 	.word	0x240052d0
 80082bc:	240052d4 	.word	0x240052d4
 80082c0:	24005384 	.word	0x24005384
 80082c4:	240052e4 	.word	0x240052e4
 80082c8:	0800ae78 	.word	0x0800ae78

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	24000014 	.word	0x24000014

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f000 f91a 	bl	800852e <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6263      	str	r3, [r4, #36]	; 0x24
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x3c>)
 8008300:	62a3      	str	r3, [r4, #40]	; 0x28
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x40>)
 8008304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x44>)
 8008308:	6224      	str	r4, [r4, #32]
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	080090fd 	.word	0x080090fd
 8008314:	0800911f 	.word	0x0800911f
 8008318:	08009157 	.word	0x08009157
 800831c:	0800917b 	.word	0x0800917b

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	0800a049 	.word	0x0800a049

0800832c <__sfmoreglue>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2268      	movs	r2, #104	; 0x68
 8008330:	1e4d      	subs	r5, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f000 f921 	bl	8008580 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f000 f8ed 	bl	800852e <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8d8 	b.w	800850e <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	240053d5 	.word	0x240053d5

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8d3 	b.w	8008510 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	240053d5 	.word	0x240053d5

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8cc 	b.w	800850e <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	240053d6 	.word	0x240053d6

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8c7 	b.w	8008510 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	240053d6 	.word	0x240053d6

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf04      	itt	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	61a3      	streq	r3, [r4, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f820 	bl	80083f8 <__sfp>
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f81c 	bl	80083f8 <__sfp>
 80083c0:	60a0      	str	r0, [r4, #8]
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f818 	bl	80083f8 <__sfp>
 80083c8:	2200      	movs	r2, #0
 80083ca:	60e0      	str	r0, [r4, #12]
 80083cc:	2104      	movs	r1, #4
 80083ce:	6860      	ldr	r0, [r4, #4]
 80083d0:	f7ff ff82 	bl	80082d8 <std>
 80083d4:	68a0      	ldr	r0, [r4, #8]
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	f7ff ff7d 	bl	80082d8 <std>
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	f7ff ff78 	bl	80082d8 <std>
 80083e8:	2301      	movs	r3, #1
 80083ea:	61a3      	str	r3, [r4, #24]
 80083ec:	e7d2      	b.n	8008394 <__sinit+0xc>
 80083ee:	bf00      	nop
 80083f0:	0800af3c 	.word	0x0800af3c
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	60e3      	str	r3, [r4, #12]
 800842a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f86c 	bl	800850c <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800843c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008440:	6025      	str	r5, [r4, #0]
 8008442:	61a5      	str	r5, [r4, #24]
 8008444:	2208      	movs	r2, #8
 8008446:	4629      	mov	r1, r5
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f000 f86f 	bl	800852e <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	0800af3c 	.word	0x0800af3c
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008490:	2700      	movs	r7, #0
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>
	...

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f002 fc90 	bl	800adfc <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	0800b2bc 	.word	0x0800b2bc
 8008500:	0800b2bc 	.word	0x0800b2bc
 8008504:	0800b2bc 	.word	0x0800b2bc
 8008508:	0800b2c0 	.word	0x0800b2c0

0800850c <__retarget_lock_init_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_acquire_recursive>:
 800850e:	4770      	bx	lr

08008510 <__retarget_lock_release_recursive>:
 8008510:	4770      	bx	lr

08008512 <memcpy>:
 8008512:	440a      	add	r2, r1
 8008514:	4291      	cmp	r1, r2
 8008516:	f100 33ff 	add.w	r3, r0, #4294967295
 800851a:	d100      	bne.n	800851e <memcpy+0xc>
 800851c:	4770      	bx	lr
 800851e:	b510      	push	{r4, lr}
 8008520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008528:	4291      	cmp	r1, r2
 800852a:	d1f9      	bne.n	8008520 <memcpy+0xe>
 800852c:	bd10      	pop	{r4, pc}

0800852e <memset>:
 800852e:	4402      	add	r2, r0
 8008530:	4603      	mov	r3, r0
 8008532:	4293      	cmp	r3, r2
 8008534:	d100      	bne.n	8008538 <memset+0xa>
 8008536:	4770      	bx	lr
 8008538:	f803 1b01 	strb.w	r1, [r3], #1
 800853c:	e7f9      	b.n	8008532 <memset+0x4>
	...

08008540 <sbrk_aligned>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4e0e      	ldr	r6, [pc, #56]	; (800857c <sbrk_aligned+0x3c>)
 8008544:	460c      	mov	r4, r1
 8008546:	6831      	ldr	r1, [r6, #0]
 8008548:	4605      	mov	r5, r0
 800854a:	b911      	cbnz	r1, 8008552 <sbrk_aligned+0x12>
 800854c:	f000 fdc6 	bl	80090dc <_sbrk_r>
 8008550:	6030      	str	r0, [r6, #0]
 8008552:	4621      	mov	r1, r4
 8008554:	4628      	mov	r0, r5
 8008556:	f000 fdc1 	bl	80090dc <_sbrk_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d00a      	beq.n	8008574 <sbrk_aligned+0x34>
 800855e:	1cc4      	adds	r4, r0, #3
 8008560:	f024 0403 	bic.w	r4, r4, #3
 8008564:	42a0      	cmp	r0, r4
 8008566:	d007      	beq.n	8008578 <sbrk_aligned+0x38>
 8008568:	1a21      	subs	r1, r4, r0
 800856a:	4628      	mov	r0, r5
 800856c:	f000 fdb6 	bl	80090dc <_sbrk_r>
 8008570:	3001      	adds	r0, #1
 8008572:	d101      	bne.n	8008578 <sbrk_aligned+0x38>
 8008574:	f04f 34ff 	mov.w	r4, #4294967295
 8008578:	4620      	mov	r0, r4
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	240053dc 	.word	0x240053dc

08008580 <_malloc_r>:
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	1ccd      	adds	r5, r1, #3
 8008586:	f025 0503 	bic.w	r5, r5, #3
 800858a:	3508      	adds	r5, #8
 800858c:	2d0c      	cmp	r5, #12
 800858e:	bf38      	it	cc
 8008590:	250c      	movcc	r5, #12
 8008592:	2d00      	cmp	r5, #0
 8008594:	4607      	mov	r7, r0
 8008596:	db01      	blt.n	800859c <_malloc_r+0x1c>
 8008598:	42a9      	cmp	r1, r5
 800859a:	d905      	bls.n	80085a8 <_malloc_r+0x28>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	2600      	movs	r6, #0
 80085a2:	4630      	mov	r0, r6
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	4e2e      	ldr	r6, [pc, #184]	; (8008664 <_malloc_r+0xe4>)
 80085aa:	f001 fe0d 	bl	800a1c8 <__malloc_lock>
 80085ae:	6833      	ldr	r3, [r6, #0]
 80085b0:	461c      	mov	r4, r3
 80085b2:	bb34      	cbnz	r4, 8008602 <_malloc_r+0x82>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4638      	mov	r0, r7
 80085b8:	f7ff ffc2 	bl	8008540 <sbrk_aligned>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	4604      	mov	r4, r0
 80085c0:	d14d      	bne.n	800865e <_malloc_r+0xde>
 80085c2:	6834      	ldr	r4, [r6, #0]
 80085c4:	4626      	mov	r6, r4
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d140      	bne.n	800864c <_malloc_r+0xcc>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	4631      	mov	r1, r6
 80085ce:	4638      	mov	r0, r7
 80085d0:	eb04 0803 	add.w	r8, r4, r3
 80085d4:	f000 fd82 	bl	80090dc <_sbrk_r>
 80085d8:	4580      	cmp	r8, r0
 80085da:	d13a      	bne.n	8008652 <_malloc_r+0xd2>
 80085dc:	6821      	ldr	r1, [r4, #0]
 80085de:	3503      	adds	r5, #3
 80085e0:	1a6d      	subs	r5, r5, r1
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa5 	bl	8008540 <sbrk_aligned>
 80085f6:	3001      	adds	r0, #1
 80085f8:	d02b      	beq.n	8008652 <_malloc_r+0xd2>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	442b      	add	r3, r5
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	e00e      	b.n	8008620 <_malloc_r+0xa0>
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	1b52      	subs	r2, r2, r5
 8008606:	d41e      	bmi.n	8008646 <_malloc_r+0xc6>
 8008608:	2a0b      	cmp	r2, #11
 800860a:	d916      	bls.n	800863a <_malloc_r+0xba>
 800860c:	1961      	adds	r1, r4, r5
 800860e:	42a3      	cmp	r3, r4
 8008610:	6025      	str	r5, [r4, #0]
 8008612:	bf18      	it	ne
 8008614:	6059      	strne	r1, [r3, #4]
 8008616:	6863      	ldr	r3, [r4, #4]
 8008618:	bf08      	it	eq
 800861a:	6031      	streq	r1, [r6, #0]
 800861c:	5162      	str	r2, [r4, r5]
 800861e:	604b      	str	r3, [r1, #4]
 8008620:	4638      	mov	r0, r7
 8008622:	f104 060b 	add.w	r6, r4, #11
 8008626:	f001 fdd5 	bl	800a1d4 <__malloc_unlock>
 800862a:	f026 0607 	bic.w	r6, r6, #7
 800862e:	1d23      	adds	r3, r4, #4
 8008630:	1af2      	subs	r2, r6, r3
 8008632:	d0b6      	beq.n	80085a2 <_malloc_r+0x22>
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	50a3      	str	r3, [r4, r2]
 8008638:	e7b3      	b.n	80085a2 <_malloc_r+0x22>
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	42a3      	cmp	r3, r4
 800863e:	bf0c      	ite	eq
 8008640:	6032      	streq	r2, [r6, #0]
 8008642:	605a      	strne	r2, [r3, #4]
 8008644:	e7ec      	b.n	8008620 <_malloc_r+0xa0>
 8008646:	4623      	mov	r3, r4
 8008648:	6864      	ldr	r4, [r4, #4]
 800864a:	e7b2      	b.n	80085b2 <_malloc_r+0x32>
 800864c:	4634      	mov	r4, r6
 800864e:	6876      	ldr	r6, [r6, #4]
 8008650:	e7b9      	b.n	80085c6 <_malloc_r+0x46>
 8008652:	230c      	movs	r3, #12
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	4638      	mov	r0, r7
 8008658:	f001 fdbc 	bl	800a1d4 <__malloc_unlock>
 800865c:	e7a1      	b.n	80085a2 <_malloc_r+0x22>
 800865e:	6025      	str	r5, [r4, #0]
 8008660:	e7de      	b.n	8008620 <_malloc_r+0xa0>
 8008662:	bf00      	nop
 8008664:	240053d8 	.word	0x240053d8

08008668 <__cvt>:
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	ed2d 8b02 	vpush	{d8}
 800866e:	eeb0 8b40 	vmov.f64	d8, d0
 8008672:	b085      	sub	sp, #20
 8008674:	4617      	mov	r7, r2
 8008676:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008678:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800867a:	ee18 2a90 	vmov	r2, s17
 800867e:	f025 0520 	bic.w	r5, r5, #32
 8008682:	2a00      	cmp	r2, #0
 8008684:	bfb6      	itet	lt
 8008686:	222d      	movlt	r2, #45	; 0x2d
 8008688:	2200      	movge	r2, #0
 800868a:	eeb1 8b40 	vneglt.f64	d8, d0
 800868e:	2d46      	cmp	r5, #70	; 0x46
 8008690:	460c      	mov	r4, r1
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	d004      	beq.n	80086a0 <__cvt+0x38>
 8008696:	2d45      	cmp	r5, #69	; 0x45
 8008698:	d100      	bne.n	800869c <__cvt+0x34>
 800869a:	3401      	adds	r4, #1
 800869c:	2102      	movs	r1, #2
 800869e:	e000      	b.n	80086a2 <__cvt+0x3a>
 80086a0:	2103      	movs	r1, #3
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	ab02      	add	r3, sp, #8
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4622      	mov	r2, r4
 80086ac:	4633      	mov	r3, r6
 80086ae:	eeb0 0b48 	vmov.f64	d0, d8
 80086b2:	f000 fed5 	bl	8009460 <_dtoa_r>
 80086b6:	2d47      	cmp	r5, #71	; 0x47
 80086b8:	d101      	bne.n	80086be <__cvt+0x56>
 80086ba:	07fb      	lsls	r3, r7, #31
 80086bc:	d51a      	bpl.n	80086f4 <__cvt+0x8c>
 80086be:	2d46      	cmp	r5, #70	; 0x46
 80086c0:	eb00 0204 	add.w	r2, r0, r4
 80086c4:	d10c      	bne.n	80086e0 <__cvt+0x78>
 80086c6:	7803      	ldrb	r3, [r0, #0]
 80086c8:	2b30      	cmp	r3, #48	; 0x30
 80086ca:	d107      	bne.n	80086dc <__cvt+0x74>
 80086cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	bf1c      	itt	ne
 80086d6:	f1c4 0401 	rsbne	r4, r4, #1
 80086da:	6034      	strne	r4, [r6, #0]
 80086dc:	6833      	ldr	r3, [r6, #0]
 80086de:	441a      	add	r2, r3
 80086e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	bf08      	it	eq
 80086ea:	9203      	streq	r2, [sp, #12]
 80086ec:	2130      	movs	r1, #48	; 0x30
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d307      	bcc.n	8008704 <__cvt+0x9c>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f8:	1a1b      	subs	r3, r3, r0
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	b005      	add	sp, #20
 80086fe:	ecbd 8b02 	vpop	{d8}
 8008702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008704:	1c5c      	adds	r4, r3, #1
 8008706:	9403      	str	r4, [sp, #12]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	e7f0      	b.n	80086ee <__cvt+0x86>

0800870c <__exponent>:
 800870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870e:	4603      	mov	r3, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	bfb8      	it	lt
 8008714:	4249      	neglt	r1, r1
 8008716:	f803 2b02 	strb.w	r2, [r3], #2
 800871a:	bfb4      	ite	lt
 800871c:	222d      	movlt	r2, #45	; 0x2d
 800871e:	222b      	movge	r2, #43	; 0x2b
 8008720:	2909      	cmp	r1, #9
 8008722:	7042      	strb	r2, [r0, #1]
 8008724:	dd2a      	ble.n	800877c <__exponent+0x70>
 8008726:	f10d 0407 	add.w	r4, sp, #7
 800872a:	46a4      	mov	ip, r4
 800872c:	270a      	movs	r7, #10
 800872e:	46a6      	mov	lr, r4
 8008730:	460a      	mov	r2, r1
 8008732:	fb91 f6f7 	sdiv	r6, r1, r7
 8008736:	fb07 1516 	mls	r5, r7, r6, r1
 800873a:	3530      	adds	r5, #48	; 0x30
 800873c:	2a63      	cmp	r2, #99	; 0x63
 800873e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008746:	4631      	mov	r1, r6
 8008748:	dcf1      	bgt.n	800872e <__exponent+0x22>
 800874a:	3130      	adds	r1, #48	; 0x30
 800874c:	f1ae 0502 	sub.w	r5, lr, #2
 8008750:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008754:	1c44      	adds	r4, r0, #1
 8008756:	4629      	mov	r1, r5
 8008758:	4561      	cmp	r1, ip
 800875a:	d30a      	bcc.n	8008772 <__exponent+0x66>
 800875c:	f10d 0209 	add.w	r2, sp, #9
 8008760:	eba2 020e 	sub.w	r2, r2, lr
 8008764:	4565      	cmp	r5, ip
 8008766:	bf88      	it	hi
 8008768:	2200      	movhi	r2, #0
 800876a:	4413      	add	r3, r2
 800876c:	1a18      	subs	r0, r3, r0
 800876e:	b003      	add	sp, #12
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800877a:	e7ed      	b.n	8008758 <__exponent+0x4c>
 800877c:	2330      	movs	r3, #48	; 0x30
 800877e:	3130      	adds	r1, #48	; 0x30
 8008780:	7083      	strb	r3, [r0, #2]
 8008782:	70c1      	strb	r1, [r0, #3]
 8008784:	1d03      	adds	r3, r0, #4
 8008786:	e7f1      	b.n	800876c <__exponent+0x60>

08008788 <_printf_float>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b08b      	sub	sp, #44	; 0x2c
 800878e:	460c      	mov	r4, r1
 8008790:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008794:	4616      	mov	r6, r2
 8008796:	461f      	mov	r7, r3
 8008798:	4605      	mov	r5, r0
 800879a:	f001 fc91 	bl	800a0c0 <_localeconv_r>
 800879e:	f8d0 b000 	ldr.w	fp, [r0]
 80087a2:	4658      	mov	r0, fp
 80087a4:	f7f7 fd9c 	bl	80002e0 <strlen>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	f8d8 3000 	ldr.w	r3, [r8]
 80087b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3307      	adds	r3, #7
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	f103 0108 	add.w	r1, r3, #8
 80087c0:	f8c8 1000 	str.w	r1, [r8]
 80087c4:	4682      	mov	sl, r0
 80087c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80087ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008a30 <_printf_float+0x2a8>
 80087d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80087d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80087da:	eeb4 6b47 	vcmp.f64	d6, d7
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	dd24      	ble.n	800882e <_printf_float+0xa6>
 80087e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d502      	bpl.n	80087f4 <_printf_float+0x6c>
 80087ee:	232d      	movs	r3, #45	; 0x2d
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <_printf_float+0x2b0>)
 80087f6:	4891      	ldr	r0, [pc, #580]	; (8008a3c <_printf_float+0x2b4>)
 80087f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087fc:	bf94      	ite	ls
 80087fe:	4698      	movls	r8, r3
 8008800:	4680      	movhi	r8, r0
 8008802:	2303      	movs	r3, #3
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	2300      	movs	r3, #0
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	9700      	str	r7, [sp, #0]
 8008812:	4633      	mov	r3, r6
 8008814:	aa09      	add	r2, sp, #36	; 0x24
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f9d3 	bl	8008bc4 <_printf_common>
 800881e:	3001      	adds	r0, #1
 8008820:	f040 808a 	bne.w	8008938 <_printf_float+0x1b0>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b00b      	add	sp, #44	; 0x2c
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	d709      	bvc.n	800884c <_printf_float+0xc4>
 8008838:	ee10 3a90 	vmov	r3, s1
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfbc      	itt	lt
 8008840:	232d      	movlt	r3, #45	; 0x2d
 8008842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008846:	487e      	ldr	r0, [pc, #504]	; (8008a40 <_printf_float+0x2b8>)
 8008848:	4b7e      	ldr	r3, [pc, #504]	; (8008a44 <_printf_float+0x2bc>)
 800884a:	e7d5      	b.n	80087f8 <_printf_float+0x70>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008852:	9104      	str	r1, [sp, #16]
 8008854:	1c59      	adds	r1, r3, #1
 8008856:	d13c      	bne.n	80088d2 <_printf_float+0x14a>
 8008858:	2306      	movs	r3, #6
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	2300      	movs	r3, #0
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	ab08      	add	r3, sp, #32
 8008862:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800886a:	ab07      	add	r3, sp, #28
 800886c:	6861      	ldr	r1, [r4, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	f10d 031b 	add.w	r3, sp, #27
 8008876:	4628      	mov	r0, r5
 8008878:	f7ff fef6 	bl	8008668 <__cvt>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	2b47      	cmp	r3, #71	; 0x47
 8008882:	4680      	mov	r8, r0
 8008884:	d108      	bne.n	8008898 <_printf_float+0x110>
 8008886:	1cc8      	adds	r0, r1, #3
 8008888:	db02      	blt.n	8008890 <_printf_float+0x108>
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	4299      	cmp	r1, r3
 800888e:	dd41      	ble.n	8008914 <_printf_float+0x18c>
 8008890:	f1a9 0902 	sub.w	r9, r9, #2
 8008894:	fa5f f989 	uxtb.w	r9, r9
 8008898:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800889c:	d820      	bhi.n	80088e0 <_printf_float+0x158>
 800889e:	3901      	subs	r1, #1
 80088a0:	464a      	mov	r2, r9
 80088a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	f7ff ff30 	bl	800870c <__exponent>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	9004      	str	r0, [sp, #16]
 80088b0:	1813      	adds	r3, r2, r0
 80088b2:	2a01      	cmp	r2, #1
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	dc02      	bgt.n	80088be <_printf_float+0x136>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d501      	bpl.n	80088c2 <_printf_float+0x13a>
 80088be:	3301      	adds	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0a2      	beq.n	8008810 <_printf_float+0x88>
 80088ca:	232d      	movs	r3, #45	; 0x2d
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e79e      	b.n	8008810 <_printf_float+0x88>
 80088d2:	9904      	ldr	r1, [sp, #16]
 80088d4:	2947      	cmp	r1, #71	; 0x47
 80088d6:	d1c1      	bne.n	800885c <_printf_float+0xd4>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1bf      	bne.n	800885c <_printf_float+0xd4>
 80088dc:	2301      	movs	r3, #1
 80088de:	e7bc      	b.n	800885a <_printf_float+0xd2>
 80088e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088e4:	d118      	bne.n	8008918 <_printf_float+0x190>
 80088e6:	2900      	cmp	r1, #0
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	dd0b      	ble.n	8008904 <_printf_float+0x17c>
 80088ec:	6121      	str	r1, [r4, #16]
 80088ee:	b913      	cbnz	r3, 80088f6 <_printf_float+0x16e>
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	07d0      	lsls	r0, r2, #31
 80088f4:	d502      	bpl.n	80088fc <_printf_float+0x174>
 80088f6:	3301      	adds	r3, #1
 80088f8:	440b      	add	r3, r1
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	2300      	movs	r3, #0
 80088fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	e7de      	b.n	80088c2 <_printf_float+0x13a>
 8008904:	b913      	cbnz	r3, 800890c <_printf_float+0x184>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d2      	lsls	r2, r2, #31
 800890a:	d501      	bpl.n	8008910 <_printf_float+0x188>
 800890c:	3302      	adds	r3, #2
 800890e:	e7f4      	b.n	80088fa <_printf_float+0x172>
 8008910:	2301      	movs	r3, #1
 8008912:	e7f2      	b.n	80088fa <_printf_float+0x172>
 8008914:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	4299      	cmp	r1, r3
 800891c:	db05      	blt.n	800892a <_printf_float+0x1a2>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	6121      	str	r1, [r4, #16]
 8008922:	07d8      	lsls	r0, r3, #31
 8008924:	d5ea      	bpl.n	80088fc <_printf_float+0x174>
 8008926:	1c4b      	adds	r3, r1, #1
 8008928:	e7e7      	b.n	80088fa <_printf_float+0x172>
 800892a:	2900      	cmp	r1, #0
 800892c:	bfd4      	ite	le
 800892e:	f1c1 0202 	rsble	r2, r1, #2
 8008932:	2201      	movgt	r2, #1
 8008934:	4413      	add	r3, r2
 8008936:	e7e0      	b.n	80088fa <_printf_float+0x172>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	055a      	lsls	r2, r3, #21
 800893c:	d407      	bmi.n	800894e <_printf_float+0x1c6>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	4642      	mov	r2, r8
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	d12a      	bne.n	80089a2 <_printf_float+0x21a>
 800894c:	e76a      	b.n	8008824 <_printf_float+0x9c>
 800894e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008952:	f240 80e2 	bls.w	8008b1a <_printf_float+0x392>
 8008956:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800895a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	d133      	bne.n	80089cc <_printf_float+0x244>
 8008964:	4a38      	ldr	r2, [pc, #224]	; (8008a48 <_printf_float+0x2c0>)
 8008966:	2301      	movs	r3, #1
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af58 	beq.w	8008824 <_printf_float+0x9c>
 8008974:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008978:	429a      	cmp	r2, r3
 800897a:	db02      	blt.n	8008982 <_printf_float+0x1fa>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07d8      	lsls	r0, r3, #31
 8008980:	d50f      	bpl.n	80089a2 <_printf_float+0x21a>
 8008982:	4653      	mov	r3, sl
 8008984:	465a      	mov	r2, fp
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f af49 	beq.w	8008824 <_printf_float+0x9c>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 091a 	add.w	r9, r4, #26
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	3b01      	subs	r3, #1
 800899e:	4543      	cmp	r3, r8
 80089a0:	dc09      	bgt.n	80089b6 <_printf_float+0x22e>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	079b      	lsls	r3, r3, #30
 80089a6:	f100 8108 	bmi.w	8008bba <_printf_float+0x432>
 80089aa:	68e0      	ldr	r0, [r4, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	e738      	b.n	8008828 <_printf_float+0xa0>
 80089b6:	2301      	movs	r3, #1
 80089b8:	464a      	mov	r2, r9
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f af2f 	beq.w	8008824 <_printf_float+0x9c>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7e6      	b.n	800899a <_printf_float+0x212>
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc3c      	bgt.n	8008a4c <_printf_float+0x2c4>
 80089d2:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <_printf_float+0x2c0>)
 80089d4:	2301      	movs	r3, #1
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f af21 	beq.w	8008824 <_printf_float+0x9c>
 80089e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d102      	bne.n	80089f0 <_printf_float+0x268>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d5d8      	bpl.n	80089a2 <_printf_float+0x21a>
 80089f0:	4653      	mov	r3, sl
 80089f2:	465a      	mov	r2, fp
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af12 	beq.w	8008824 <_printf_float+0x9c>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	f104 0a1a 	add.w	sl, r4, #26
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	454b      	cmp	r3, r9
 8008a0e:	dc01      	bgt.n	8008a14 <_printf_float+0x28c>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	e795      	b.n	8008940 <_printf_float+0x1b8>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af00 	beq.w	8008824 <_printf_float+0x9c>
 8008a24:	f109 0901 	add.w	r9, r9, #1
 8008a28:	e7ee      	b.n	8008a08 <_printf_float+0x280>
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w
 8008a30:	ffffffff 	.word	0xffffffff
 8008a34:	7fefffff 	.word	0x7fefffff
 8008a38:	0800af40 	.word	0x0800af40
 8008a3c:	0800af44 	.word	0x0800af44
 8008a40:	0800af4c 	.word	0x0800af4c
 8008a44:	0800af48 	.word	0x0800af48
 8008a48:	0800af50 	.word	0x0800af50
 8008a4c:	9a08      	ldr	r2, [sp, #32]
 8008a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfa8      	it	ge
 8008a54:	461a      	movge	r2, r3
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	4691      	mov	r9, r2
 8008a5a:	dc38      	bgt.n	8008ace <_printf_float+0x346>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a64:	f104 021a 	add.w	r2, r4, #26
 8008a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a6a:	9905      	ldr	r1, [sp, #20]
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	eba3 0309 	sub.w	r3, r3, r9
 8008a72:	428b      	cmp	r3, r1
 8008a74:	dc33      	bgt.n	8008ade <_printf_float+0x356>
 8008a76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	db3c      	blt.n	8008af8 <_printf_float+0x370>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07da      	lsls	r2, r3, #31
 8008a82:	d439      	bmi.n	8008af8 <_printf_float+0x370>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	9a04      	ldr	r2, [sp, #16]
 8008a88:	9907      	ldr	r1, [sp, #28]
 8008a8a:	1a9a      	subs	r2, r3, r2
 8008a8c:	eba3 0901 	sub.w	r9, r3, r1
 8008a90:	4591      	cmp	r9, r2
 8008a92:	bfa8      	it	ge
 8008a94:	4691      	movge	r9, r2
 8008a96:	f1b9 0f00 	cmp.w	r9, #0
 8008a9a:	dc35      	bgt.n	8008b08 <_printf_float+0x380>
 8008a9c:	f04f 0800 	mov.w	r8, #0
 8008aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aa4:	f104 0a1a 	add.w	sl, r4, #26
 8008aa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	eba3 0309 	sub.w	r3, r3, r9
 8008ab2:	4543      	cmp	r3, r8
 8008ab4:	f77f af75 	ble.w	80089a2 <_printf_float+0x21a>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4652      	mov	r2, sl
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f aeae 	beq.w	8008824 <_printf_float+0x9c>
 8008ac8:	f108 0801 	add.w	r8, r8, #1
 8008acc:	e7ec      	b.n	8008aa8 <_printf_float+0x320>
 8008ace:	4613      	mov	r3, r2
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4642      	mov	r2, r8
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d1bf      	bne.n	8008a5c <_printf_float+0x2d4>
 8008adc:	e6a2      	b.n	8008824 <_printf_float+0x9c>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	9204      	str	r2, [sp, #16]
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f ae9b 	beq.w	8008824 <_printf_float+0x9c>
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	e7b7      	b.n	8008a68 <_printf_float+0x2e0>
 8008af8:	4653      	mov	r3, sl
 8008afa:	465a      	mov	r2, fp
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	d1be      	bne.n	8008a84 <_printf_float+0x2fc>
 8008b06:	e68d      	b.n	8008824 <_printf_float+0x9c>
 8008b08:	9a04      	ldr	r2, [sp, #16]
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	4442      	add	r2, r8
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1c1      	bne.n	8008a9c <_printf_float+0x314>
 8008b18:	e684      	b.n	8008824 <_printf_float+0x9c>
 8008b1a:	9a08      	ldr	r2, [sp, #32]
 8008b1c:	2a01      	cmp	r2, #1
 8008b1e:	dc01      	bgt.n	8008b24 <_printf_float+0x39c>
 8008b20:	07db      	lsls	r3, r3, #31
 8008b22:	d537      	bpl.n	8008b94 <_printf_float+0x40c>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4642      	mov	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f ae78 	beq.w	8008824 <_printf_float+0x9c>
 8008b34:	4653      	mov	r3, sl
 8008b36:	465a      	mov	r2, fp
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f ae70 	beq.w	8008824 <_printf_float+0x9c>
 8008b44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	d01b      	beq.n	8008b8a <_printf_float+0x402>
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	f108 0201 	add.w	r2, r8, #1
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	d10e      	bne.n	8008b82 <_printf_float+0x3fa>
 8008b64:	e65e      	b.n	8008824 <_printf_float+0x9c>
 8008b66:	2301      	movs	r3, #1
 8008b68:	464a      	mov	r2, r9
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	f43f ae57 	beq.w	8008824 <_printf_float+0x9c>
 8008b76:	f108 0801 	add.w	r8, r8, #1
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4543      	cmp	r3, r8
 8008b80:	dcf1      	bgt.n	8008b66 <_printf_float+0x3de>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b88:	e6db      	b.n	8008942 <_printf_float+0x1ba>
 8008b8a:	f04f 0800 	mov.w	r8, #0
 8008b8e:	f104 091a 	add.w	r9, r4, #26
 8008b92:	e7f2      	b.n	8008b7a <_printf_float+0x3f2>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4642      	mov	r2, r8
 8008b98:	e7df      	b.n	8008b5a <_printf_float+0x3d2>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae3d 	beq.w	8008824 <_printf_float+0x9c>
 8008baa:	f108 0801 	add.w	r8, r8, #1
 8008bae:	68e3      	ldr	r3, [r4, #12]
 8008bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb2:	1a5b      	subs	r3, r3, r1
 8008bb4:	4543      	cmp	r3, r8
 8008bb6:	dcf0      	bgt.n	8008b9a <_printf_float+0x412>
 8008bb8:	e6f7      	b.n	80089aa <_printf_float+0x222>
 8008bba:	f04f 0800 	mov.w	r8, #0
 8008bbe:	f104 0919 	add.w	r9, r4, #25
 8008bc2:	e7f4      	b.n	8008bae <_printf_float+0x426>

08008bc4 <_printf_common>:
 8008bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	4616      	mov	r6, r2
 8008bca:	4699      	mov	r9, r3
 8008bcc:	688a      	ldr	r2, [r1, #8]
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bfb8      	it	lt
 8008bd8:	4613      	movlt	r3, r2
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be0:	4607      	mov	r7, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b10a      	cbz	r2, 8008bea <_printf_common+0x26>
 8008be6:	3301      	adds	r3, #1
 8008be8:	6033      	str	r3, [r6, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	0699      	lsls	r1, r3, #26
 8008bee:	bf42      	ittt	mi
 8008bf0:	6833      	ldrmi	r3, [r6, #0]
 8008bf2:	3302      	addmi	r3, #2
 8008bf4:	6033      	strmi	r3, [r6, #0]
 8008bf6:	6825      	ldr	r5, [r4, #0]
 8008bf8:	f015 0506 	ands.w	r5, r5, #6
 8008bfc:	d106      	bne.n	8008c0c <_printf_common+0x48>
 8008bfe:	f104 0a19 	add.w	sl, r4, #25
 8008c02:	68e3      	ldr	r3, [r4, #12]
 8008c04:	6832      	ldr	r2, [r6, #0]
 8008c06:	1a9b      	subs	r3, r3, r2
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	dc26      	bgt.n	8008c5a <_printf_common+0x96>
 8008c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c10:	1e13      	subs	r3, r2, #0
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	bf18      	it	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	0692      	lsls	r2, r2, #26
 8008c1a:	d42b      	bmi.n	8008c74 <_printf_common+0xb0>
 8008c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d01e      	beq.n	8008c68 <_printf_common+0xa4>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	68e5      	ldr	r5, [r4, #12]
 8008c2e:	6832      	ldr	r2, [r6, #0]
 8008c30:	f003 0306 	and.w	r3, r3, #6
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	bf08      	it	eq
 8008c38:	1aad      	subeq	r5, r5, r2
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	bf0c      	ite	eq
 8008c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c44:	2500      	movne	r5, #0
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bfc4      	itt	gt
 8008c4a:	1a9b      	subgt	r3, r3, r2
 8008c4c:	18ed      	addgt	r5, r5, r3
 8008c4e:	2600      	movs	r6, #0
 8008c50:	341a      	adds	r4, #26
 8008c52:	42b5      	cmp	r5, r6
 8008c54:	d11a      	bne.n	8008c8c <_printf_common+0xc8>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e008      	b.n	8008c6c <_printf_common+0xa8>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4638      	mov	r0, r7
 8008c62:	47c0      	blx	r8
 8008c64:	3001      	adds	r0, #1
 8008c66:	d103      	bne.n	8008c70 <_printf_common+0xac>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	3501      	adds	r5, #1
 8008c72:	e7c6      	b.n	8008c02 <_printf_common+0x3e>
 8008c74:	18e1      	adds	r1, r4, r3
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	2030      	movs	r0, #48	; 0x30
 8008c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c7e:	4422      	add	r2, r4
 8008c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c88:	3302      	adds	r3, #2
 8008c8a:	e7c7      	b.n	8008c1c <_printf_common+0x58>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4649      	mov	r1, r9
 8008c92:	4638      	mov	r0, r7
 8008c94:	47c0      	blx	r8
 8008c96:	3001      	adds	r0, #1
 8008c98:	d0e6      	beq.n	8008c68 <_printf_common+0xa4>
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7d9      	b.n	8008c52 <_printf_common+0x8e>
	...

08008ca0 <_printf_i>:
 8008ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	7e0f      	ldrb	r7, [r1, #24]
 8008ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ca8:	2f78      	cmp	r7, #120	; 0x78
 8008caa:	4691      	mov	r9, r2
 8008cac:	4680      	mov	r8, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cb6:	d807      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cb8:	2f62      	cmp	r7, #98	; 0x62
 8008cba:	d80a      	bhi.n	8008cd2 <_printf_i+0x32>
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	f000 80d8 	beq.w	8008e72 <_printf_i+0x1d2>
 8008cc2:	2f58      	cmp	r7, #88	; 0x58
 8008cc4:	f000 80a3 	beq.w	8008e0e <_printf_i+0x16e>
 8008cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd0:	e03a      	b.n	8008d48 <_printf_i+0xa8>
 8008cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd6:	2b15      	cmp	r3, #21
 8008cd8:	d8f6      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cda:	a101      	add	r1, pc, #4	; (adr r1, 8008ce0 <_printf_i+0x40>)
 8008cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008cc9 	.word	0x08008cc9
 8008cec:	08008cc9 	.word	0x08008cc9
 8008cf0:	08008cc9 	.word	0x08008cc9
 8008cf4:	08008cc9 	.word	0x08008cc9
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008cc9 	.word	0x08008cc9
 8008d00:	08008cc9 	.word	0x08008cc9
 8008d04:	08008cc9 	.word	0x08008cc9
 8008d08:	08008cc9 	.word	0x08008cc9
 8008d0c:	08008e59 	.word	0x08008e59
 8008d10:	08008d7d 	.word	0x08008d7d
 8008d14:	08008e3b 	.word	0x08008e3b
 8008d18:	08008cc9 	.word	0x08008cc9
 8008d1c:	08008cc9 	.word	0x08008cc9
 8008d20:	08008e7b 	.word	0x08008e7b
 8008d24:	08008cc9 	.word	0x08008cc9
 8008d28:	08008d7d 	.word	0x08008d7d
 8008d2c:	08008cc9 	.word	0x08008cc9
 8008d30:	08008cc9 	.word	0x08008cc9
 8008d34:	08008e43 	.word	0x08008e43
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0a3      	b.n	8008e94 <_printf_i+0x1f4>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	6829      	ldr	r1, [r5, #0]
 8008d50:	0606      	lsls	r6, r0, #24
 8008d52:	f101 0304 	add.w	r3, r1, #4
 8008d56:	d50a      	bpl.n	8008d6e <_printf_i+0xce>
 8008d58:	680e      	ldr	r6, [r1, #0]
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	da03      	bge.n	8008d68 <_printf_i+0xc8>
 8008d60:	232d      	movs	r3, #45	; 0x2d
 8008d62:	4276      	negs	r6, r6
 8008d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d68:	485e      	ldr	r0, [pc, #376]	; (8008ee4 <_printf_i+0x244>)
 8008d6a:	230a      	movs	r3, #10
 8008d6c:	e019      	b.n	8008da2 <_printf_i+0x102>
 8008d6e:	680e      	ldr	r6, [r1, #0]
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d76:	bf18      	it	ne
 8008d78:	b236      	sxthne	r6, r6
 8008d7a:	e7ef      	b.n	8008d5c <_printf_i+0xbc>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	6029      	str	r1, [r5, #0]
 8008d84:	0601      	lsls	r1, r0, #24
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0xec>
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0xf2>
 8008d8c:	0646      	lsls	r6, r0, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0xe8>
 8008d90:	881e      	ldrh	r6, [r3, #0]
 8008d92:	4854      	ldr	r0, [pc, #336]	; (8008ee4 <_printf_i+0x244>)
 8008d94:	2f6f      	cmp	r7, #111	; 0x6f
 8008d96:	bf0c      	ite	eq
 8008d98:	2308      	moveq	r3, #8
 8008d9a:	230a      	movne	r3, #10
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008da2:	6865      	ldr	r5, [r4, #4]
 8008da4:	60a5      	str	r5, [r4, #8]
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	bfa2      	ittt	ge
 8008daa:	6821      	ldrge	r1, [r4, #0]
 8008dac:	f021 0104 	bicge.w	r1, r1, #4
 8008db0:	6021      	strge	r1, [r4, #0]
 8008db2:	b90e      	cbnz	r6, 8008db8 <_printf_i+0x118>
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	d04d      	beq.n	8008e54 <_printf_i+0x1b4>
 8008db8:	4615      	mov	r5, r2
 8008dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008dc2:	5dc7      	ldrb	r7, [r0, r7]
 8008dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc8:	4637      	mov	r7, r6
 8008dca:	42bb      	cmp	r3, r7
 8008dcc:	460e      	mov	r6, r1
 8008dce:	d9f4      	bls.n	8008dba <_printf_i+0x11a>
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d10b      	bne.n	8008dec <_printf_i+0x14c>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	07de      	lsls	r6, r3, #31
 8008dd8:	d508      	bpl.n	8008dec <_printf_i+0x14c>
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	4299      	cmp	r1, r3
 8008de0:	bfde      	ittt	le
 8008de2:	2330      	movle	r3, #48	; 0x30
 8008de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dec:	1b52      	subs	r2, r2, r5
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	f8cd a000 	str.w	sl, [sp]
 8008df4:	464b      	mov	r3, r9
 8008df6:	aa03      	add	r2, sp, #12
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fee2 	bl	8008bc4 <_printf_common>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d14c      	bne.n	8008e9e <_printf_i+0x1fe>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b004      	add	sp, #16
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	4835      	ldr	r0, [pc, #212]	; (8008ee4 <_printf_i+0x244>)
 8008e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e14:	6829      	ldr	r1, [r5, #0]
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e1c:	6029      	str	r1, [r5, #0]
 8008e1e:	061d      	lsls	r5, r3, #24
 8008e20:	d514      	bpl.n	8008e4c <_printf_i+0x1ac>
 8008e22:	07df      	lsls	r7, r3, #31
 8008e24:	bf44      	itt	mi
 8008e26:	f043 0320 	orrmi.w	r3, r3, #32
 8008e2a:	6023      	strmi	r3, [r4, #0]
 8008e2c:	b91e      	cbnz	r6, 8008e36 <_printf_i+0x196>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f023 0320 	bic.w	r3, r3, #32
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	2310      	movs	r3, #16
 8008e38:	e7b0      	b.n	8008d9c <_printf_i+0xfc>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	f043 0320 	orr.w	r3, r3, #32
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	2378      	movs	r3, #120	; 0x78
 8008e44:	4828      	ldr	r0, [pc, #160]	; (8008ee8 <_printf_i+0x248>)
 8008e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e4a:	e7e3      	b.n	8008e14 <_printf_i+0x174>
 8008e4c:	0659      	lsls	r1, r3, #25
 8008e4e:	bf48      	it	mi
 8008e50:	b2b6      	uxthmi	r6, r6
 8008e52:	e7e6      	b.n	8008e22 <_printf_i+0x182>
 8008e54:	4615      	mov	r5, r2
 8008e56:	e7bb      	b.n	8008dd0 <_printf_i+0x130>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	6826      	ldr	r6, [r4, #0]
 8008e5c:	6961      	ldr	r1, [r4, #20]
 8008e5e:	1d18      	adds	r0, r3, #4
 8008e60:	6028      	str	r0, [r5, #0]
 8008e62:	0635      	lsls	r5, r6, #24
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	d501      	bpl.n	8008e6c <_printf_i+0x1cc>
 8008e68:	6019      	str	r1, [r3, #0]
 8008e6a:	e002      	b.n	8008e72 <_printf_i+0x1d2>
 8008e6c:	0670      	lsls	r0, r6, #25
 8008e6e:	d5fb      	bpl.n	8008e68 <_printf_i+0x1c8>
 8008e70:	8019      	strh	r1, [r3, #0]
 8008e72:	2300      	movs	r3, #0
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	4615      	mov	r5, r2
 8008e78:	e7ba      	b.n	8008df0 <_printf_i+0x150>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	2100      	movs	r1, #0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7f7 fa32 	bl	80002f0 <memchr>
 8008e8c:	b108      	cbz	r0, 8008e92 <_printf_i+0x1f2>
 8008e8e:	1b40      	subs	r0, r0, r5
 8008e90:	6060      	str	r0, [r4, #4]
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	2300      	movs	r3, #0
 8008e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9c:	e7a8      	b.n	8008df0 <_printf_i+0x150>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	47d0      	blx	sl
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d0ab      	beq.n	8008e04 <_printf_i+0x164>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	079b      	lsls	r3, r3, #30
 8008eb0:	d413      	bmi.n	8008eda <_printf_i+0x23a>
 8008eb2:	68e0      	ldr	r0, [r4, #12]
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	bfb8      	it	lt
 8008eba:	4618      	movlt	r0, r3
 8008ebc:	e7a4      	b.n	8008e08 <_printf_i+0x168>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	47d0      	blx	sl
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d09b      	beq.n	8008e04 <_printf_i+0x164>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	9903      	ldr	r1, [sp, #12]
 8008ed2:	1a5b      	subs	r3, r3, r1
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	dcf2      	bgt.n	8008ebe <_printf_i+0x21e>
 8008ed8:	e7eb      	b.n	8008eb2 <_printf_i+0x212>
 8008eda:	2500      	movs	r5, #0
 8008edc:	f104 0619 	add.w	r6, r4, #25
 8008ee0:	e7f5      	b.n	8008ece <_printf_i+0x22e>
 8008ee2:	bf00      	nop
 8008ee4:	0800af52 	.word	0x0800af52
 8008ee8:	0800af63 	.word	0x0800af63

08008eec <iprintf>:
 8008eec:	b40f      	push	{r0, r1, r2, r3}
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <iprintf+0x2c>)
 8008ef0:	b513      	push	{r0, r1, r4, lr}
 8008ef2:	681c      	ldr	r4, [r3, #0]
 8008ef4:	b124      	cbz	r4, 8008f00 <iprintf+0x14>
 8008ef6:	69a3      	ldr	r3, [r4, #24]
 8008ef8:	b913      	cbnz	r3, 8008f00 <iprintf+0x14>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff fa44 	bl	8008388 <__sinit>
 8008f00:	ab05      	add	r3, sp, #20
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	68a1      	ldr	r1, [r4, #8]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f001 fd79 	bl	800aa00 <_vfiprintf_r>
 8008f0e:	b002      	add	sp, #8
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f14:	b004      	add	sp, #16
 8008f16:	4770      	bx	lr
 8008f18:	24000014 	.word	0x24000014

08008f1c <_puts_r>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	460e      	mov	r6, r1
 8008f20:	4605      	mov	r5, r0
 8008f22:	b118      	cbz	r0, 8008f2c <_puts_r+0x10>
 8008f24:	6983      	ldr	r3, [r0, #24]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_puts_r+0x10>
 8008f28:	f7ff fa2e 	bl	8008388 <__sinit>
 8008f2c:	69ab      	ldr	r3, [r5, #24]
 8008f2e:	68ac      	ldr	r4, [r5, #8]
 8008f30:	b913      	cbnz	r3, 8008f38 <_puts_r+0x1c>
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7ff fa28 	bl	8008388 <__sinit>
 8008f38:	4b2c      	ldr	r3, [pc, #176]	; (8008fec <_puts_r+0xd0>)
 8008f3a:	429c      	cmp	r4, r3
 8008f3c:	d120      	bne.n	8008f80 <_puts_r+0x64>
 8008f3e:	686c      	ldr	r4, [r5, #4]
 8008f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f42:	07db      	lsls	r3, r3, #31
 8008f44:	d405      	bmi.n	8008f52 <_puts_r+0x36>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	0598      	lsls	r0, r3, #22
 8008f4a:	d402      	bmi.n	8008f52 <_puts_r+0x36>
 8008f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4e:	f7ff fade 	bl	800850e <__retarget_lock_acquire_recursive>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	0719      	lsls	r1, r3, #28
 8008f56:	d51d      	bpl.n	8008f94 <_puts_r+0x78>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	b1db      	cbz	r3, 8008f94 <_puts_r+0x78>
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f64:	3b01      	subs	r3, #1
 8008f66:	60a3      	str	r3, [r4, #8]
 8008f68:	bb39      	cbnz	r1, 8008fba <_puts_r+0x9e>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da38      	bge.n	8008fe0 <_puts_r+0xc4>
 8008f6e:	4622      	mov	r2, r4
 8008f70:	210a      	movs	r1, #10
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f906 	bl	8009184 <__swbuf_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d011      	beq.n	8008fa0 <_puts_r+0x84>
 8008f7c:	250a      	movs	r5, #10
 8008f7e:	e011      	b.n	8008fa4 <_puts_r+0x88>
 8008f80:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <_puts_r+0xd4>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	d101      	bne.n	8008f8a <_puts_r+0x6e>
 8008f86:	68ac      	ldr	r4, [r5, #8]
 8008f88:	e7da      	b.n	8008f40 <_puts_r+0x24>
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <_puts_r+0xd8>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	bf08      	it	eq
 8008f90:	68ec      	ldreq	r4, [r5, #12]
 8008f92:	e7d5      	b.n	8008f40 <_puts_r+0x24>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 f958 	bl	800924c <__swsetup_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d0dd      	beq.n	8008f5c <_puts_r+0x40>
 8008fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8008fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa6:	07da      	lsls	r2, r3, #31
 8008fa8:	d405      	bmi.n	8008fb6 <_puts_r+0x9a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	059b      	lsls	r3, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_puts_r+0x9a>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f7ff faad 	bl	8008510 <__retarget_lock_release_recursive>
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da04      	bge.n	8008fc8 <_puts_r+0xac>
 8008fbe:	69a2      	ldr	r2, [r4, #24]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	dc06      	bgt.n	8008fd2 <_puts_r+0xb6>
 8008fc4:	290a      	cmp	r1, #10
 8008fc6:	d004      	beq.n	8008fd2 <_puts_r+0xb6>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	7019      	strb	r1, [r3, #0]
 8008fd0:	e7c5      	b.n	8008f5e <_puts_r+0x42>
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f000 f8d5 	bl	8009184 <__swbuf_r>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d1bf      	bne.n	8008f5e <_puts_r+0x42>
 8008fde:	e7df      	b.n	8008fa0 <_puts_r+0x84>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	250a      	movs	r5, #10
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	701d      	strb	r5, [r3, #0]
 8008fea:	e7db      	b.n	8008fa4 <_puts_r+0x88>
 8008fec:	0800aefc 	.word	0x0800aefc
 8008ff0:	0800af1c 	.word	0x0800af1c
 8008ff4:	0800aedc 	.word	0x0800aedc

08008ff8 <puts>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <puts+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7ff bf8d 	b.w	8008f1c <_puts_r>
 8009002:	bf00      	nop
 8009004:	24000014 	.word	0x24000014

08009008 <cleanup_glue>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	460c      	mov	r4, r1
 800900c:	6809      	ldr	r1, [r1, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	b109      	cbz	r1, 8009016 <cleanup_glue+0xe>
 8009012:	f7ff fff9 	bl	8009008 <cleanup_glue>
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800901e:	f001 bc79 	b.w	800a914 <_free_r>
	...

08009024 <_reclaim_reent>:
 8009024:	4b2c      	ldr	r3, [pc, #176]	; (80090d8 <_reclaim_reent+0xb4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4283      	cmp	r3, r0
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	d051      	beq.n	80090d4 <_reclaim_reent+0xb0>
 8009030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009032:	b143      	cbz	r3, 8009046 <_reclaim_reent+0x22>
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d14a      	bne.n	80090d0 <_reclaim_reent+0xac>
 800903a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903c:	6819      	ldr	r1, [r3, #0]
 800903e:	b111      	cbz	r1, 8009046 <_reclaim_reent+0x22>
 8009040:	4620      	mov	r0, r4
 8009042:	f001 fc67 	bl	800a914 <_free_r>
 8009046:	6961      	ldr	r1, [r4, #20]
 8009048:	b111      	cbz	r1, 8009050 <_reclaim_reent+0x2c>
 800904a:	4620      	mov	r0, r4
 800904c:	f001 fc62 	bl	800a914 <_free_r>
 8009050:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009052:	b111      	cbz	r1, 800905a <_reclaim_reent+0x36>
 8009054:	4620      	mov	r0, r4
 8009056:	f001 fc5d 	bl	800a914 <_free_r>
 800905a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800905c:	b111      	cbz	r1, 8009064 <_reclaim_reent+0x40>
 800905e:	4620      	mov	r0, r4
 8009060:	f001 fc58 	bl	800a914 <_free_r>
 8009064:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009066:	b111      	cbz	r1, 800906e <_reclaim_reent+0x4a>
 8009068:	4620      	mov	r0, r4
 800906a:	f001 fc53 	bl	800a914 <_free_r>
 800906e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009070:	b111      	cbz	r1, 8009078 <_reclaim_reent+0x54>
 8009072:	4620      	mov	r0, r4
 8009074:	f001 fc4e 	bl	800a914 <_free_r>
 8009078:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800907a:	b111      	cbz	r1, 8009082 <_reclaim_reent+0x5e>
 800907c:	4620      	mov	r0, r4
 800907e:	f001 fc49 	bl	800a914 <_free_r>
 8009082:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009084:	b111      	cbz	r1, 800908c <_reclaim_reent+0x68>
 8009086:	4620      	mov	r0, r4
 8009088:	f001 fc44 	bl	800a914 <_free_r>
 800908c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908e:	b111      	cbz	r1, 8009096 <_reclaim_reent+0x72>
 8009090:	4620      	mov	r0, r4
 8009092:	f001 fc3f 	bl	800a914 <_free_r>
 8009096:	69a3      	ldr	r3, [r4, #24]
 8009098:	b1e3      	cbz	r3, 80090d4 <_reclaim_reent+0xb0>
 800909a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800909c:	4620      	mov	r0, r4
 800909e:	4798      	blx	r3
 80090a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80090a2:	b1b9      	cbz	r1, 80090d4 <_reclaim_reent+0xb0>
 80090a4:	4620      	mov	r0, r4
 80090a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090aa:	f7ff bfad 	b.w	8009008 <cleanup_glue>
 80090ae:	5949      	ldr	r1, [r1, r5]
 80090b0:	b941      	cbnz	r1, 80090c4 <_reclaim_reent+0xa0>
 80090b2:	3504      	adds	r5, #4
 80090b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b6:	2d80      	cmp	r5, #128	; 0x80
 80090b8:	68d9      	ldr	r1, [r3, #12]
 80090ba:	d1f8      	bne.n	80090ae <_reclaim_reent+0x8a>
 80090bc:	4620      	mov	r0, r4
 80090be:	f001 fc29 	bl	800a914 <_free_r>
 80090c2:	e7ba      	b.n	800903a <_reclaim_reent+0x16>
 80090c4:	680e      	ldr	r6, [r1, #0]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f001 fc24 	bl	800a914 <_free_r>
 80090cc:	4631      	mov	r1, r6
 80090ce:	e7ef      	b.n	80090b0 <_reclaim_reent+0x8c>
 80090d0:	2500      	movs	r5, #0
 80090d2:	e7ef      	b.n	80090b4 <_reclaim_reent+0x90>
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	bf00      	nop
 80090d8:	24000014 	.word	0x24000014

080090dc <_sbrk_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d06      	ldr	r5, [pc, #24]	; (80090f8 <_sbrk_r+0x1c>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	f7f7 ffe6 	bl	80010b8 <_sbrk>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_sbrk_r+0x1a>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_sbrk_r+0x1a>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	240053e0 	.word	0x240053e0

080090fc <__sread>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	460c      	mov	r4, r1
 8009100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009104:	f001 fdac 	bl	800ac60 <_read_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	bfab      	itete	ge
 800910c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800910e:	89a3      	ldrhlt	r3, [r4, #12]
 8009110:	181b      	addge	r3, r3, r0
 8009112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009116:	bfac      	ite	ge
 8009118:	6563      	strge	r3, [r4, #84]	; 0x54
 800911a:	81a3      	strhlt	r3, [r4, #12]
 800911c:	bd10      	pop	{r4, pc}

0800911e <__swrite>:
 800911e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	461f      	mov	r7, r3
 8009124:	898b      	ldrh	r3, [r1, #12]
 8009126:	05db      	lsls	r3, r3, #23
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4616      	mov	r6, r2
 800912e:	d505      	bpl.n	800913c <__swrite+0x1e>
 8009130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009134:	2302      	movs	r3, #2
 8009136:	2200      	movs	r2, #0
 8009138:	f000 ffc6 	bl	800a0c8 <_lseek_r>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	4628      	mov	r0, r5
 800914e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	f000 b869 	b.w	8009228 <_write_r>

08009156 <__sseek>:
 8009156:	b510      	push	{r4, lr}
 8009158:	460c      	mov	r4, r1
 800915a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915e:	f000 ffb3 	bl	800a0c8 <_lseek_r>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	bf15      	itete	ne
 8009168:	6560      	strne	r0, [r4, #84]	; 0x54
 800916a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800916e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009172:	81a3      	strheq	r3, [r4, #12]
 8009174:	bf18      	it	ne
 8009176:	81a3      	strhne	r3, [r4, #12]
 8009178:	bd10      	pop	{r4, pc}

0800917a <__sclose>:
 800917a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917e:	f000 b8d3 	b.w	8009328 <_close_r>
	...

08009184 <__swbuf_r>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	460e      	mov	r6, r1
 8009188:	4614      	mov	r4, r2
 800918a:	4605      	mov	r5, r0
 800918c:	b118      	cbz	r0, 8009196 <__swbuf_r+0x12>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <__swbuf_r+0x12>
 8009192:	f7ff f8f9 	bl	8008388 <__sinit>
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <__swbuf_r+0x98>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d12b      	bne.n	80091f4 <__swbuf_r+0x70>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	69a3      	ldr	r3, [r4, #24]
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	071a      	lsls	r2, r3, #28
 80091a6:	d52f      	bpl.n	8009208 <__swbuf_r+0x84>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	b36b      	cbz	r3, 8009208 <__swbuf_r+0x84>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1ac0      	subs	r0, r0, r3
 80091b2:	6963      	ldr	r3, [r4, #20]
 80091b4:	b2f6      	uxtb	r6, r6
 80091b6:	4283      	cmp	r3, r0
 80091b8:	4637      	mov	r7, r6
 80091ba:	dc04      	bgt.n	80091c6 <__swbuf_r+0x42>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 ff42 	bl	800a048 <_fflush_r>
 80091c4:	bb30      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	701e      	strb	r6, [r3, #0]
 80091d4:	6963      	ldr	r3, [r4, #20]
 80091d6:	3001      	adds	r0, #1
 80091d8:	4283      	cmp	r3, r0
 80091da:	d004      	beq.n	80091e6 <__swbuf_r+0x62>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d506      	bpl.n	80091f0 <__swbuf_r+0x6c>
 80091e2:	2e0a      	cmp	r6, #10
 80091e4:	d104      	bne.n	80091f0 <__swbuf_r+0x6c>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f000 ff2d 	bl	800a048 <_fflush_r>
 80091ee:	b988      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091f0:	4638      	mov	r0, r7
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <__swbuf_r+0x9c>)
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d101      	bne.n	80091fe <__swbuf_r+0x7a>
 80091fa:	68ac      	ldr	r4, [r5, #8]
 80091fc:	e7cf      	b.n	800919e <__swbuf_r+0x1a>
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <__swbuf_r+0xa0>)
 8009200:	429c      	cmp	r4, r3
 8009202:	bf08      	it	eq
 8009204:	68ec      	ldreq	r4, [r5, #12]
 8009206:	e7ca      	b.n	800919e <__swbuf_r+0x1a>
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f000 f81e 	bl	800924c <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d0cb      	beq.n	80091ac <__swbuf_r+0x28>
 8009214:	f04f 37ff 	mov.w	r7, #4294967295
 8009218:	e7ea      	b.n	80091f0 <__swbuf_r+0x6c>
 800921a:	bf00      	nop
 800921c:	0800aefc 	.word	0x0800aefc
 8009220:	0800af1c 	.word	0x0800af1c
 8009224:	0800aedc 	.word	0x0800aedc

08009228 <_write_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_write_r+0x20>)
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	2200      	movs	r2, #0
 8009234:	602a      	str	r2, [r5, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	f7f7 feed 	bl	8001016 <_write>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_write_r+0x1e>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_write_r+0x1e>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	240053e0 	.word	0x240053e0

0800924c <__swsetup_r>:
 800924c:	4b32      	ldr	r3, [pc, #200]	; (8009318 <__swsetup_r+0xcc>)
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	681d      	ldr	r5, [r3, #0]
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	b125      	cbz	r5, 8009262 <__swsetup_r+0x16>
 8009258:	69ab      	ldr	r3, [r5, #24]
 800925a:	b913      	cbnz	r3, 8009262 <__swsetup_r+0x16>
 800925c:	4628      	mov	r0, r5
 800925e:	f7ff f893 	bl	8008388 <__sinit>
 8009262:	4b2e      	ldr	r3, [pc, #184]	; (800931c <__swsetup_r+0xd0>)
 8009264:	429c      	cmp	r4, r3
 8009266:	d10f      	bne.n	8009288 <__swsetup_r+0x3c>
 8009268:	686c      	ldr	r4, [r5, #4]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009270:	0719      	lsls	r1, r3, #28
 8009272:	d42c      	bmi.n	80092ce <__swsetup_r+0x82>
 8009274:	06dd      	lsls	r5, r3, #27
 8009276:	d411      	bmi.n	800929c <__swsetup_r+0x50>
 8009278:	2309      	movs	r3, #9
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	e03e      	b.n	8009306 <__swsetup_r+0xba>
 8009288:	4b25      	ldr	r3, [pc, #148]	; (8009320 <__swsetup_r+0xd4>)
 800928a:	429c      	cmp	r4, r3
 800928c:	d101      	bne.n	8009292 <__swsetup_r+0x46>
 800928e:	68ac      	ldr	r4, [r5, #8]
 8009290:	e7eb      	b.n	800926a <__swsetup_r+0x1e>
 8009292:	4b24      	ldr	r3, [pc, #144]	; (8009324 <__swsetup_r+0xd8>)
 8009294:	429c      	cmp	r4, r3
 8009296:	bf08      	it	eq
 8009298:	68ec      	ldreq	r4, [r5, #12]
 800929a:	e7e6      	b.n	800926a <__swsetup_r+0x1e>
 800929c:	0758      	lsls	r0, r3, #29
 800929e:	d512      	bpl.n	80092c6 <__swsetup_r+0x7a>
 80092a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092a2:	b141      	cbz	r1, 80092b6 <__swsetup_r+0x6a>
 80092a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a8:	4299      	cmp	r1, r3
 80092aa:	d002      	beq.n	80092b2 <__swsetup_r+0x66>
 80092ac:	4630      	mov	r0, r6
 80092ae:	f001 fb31 	bl	800a914 <_free_r>
 80092b2:	2300      	movs	r3, #0
 80092b4:	6363      	str	r3, [r4, #52]	; 0x34
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	2300      	movs	r3, #0
 80092c0:	6063      	str	r3, [r4, #4]
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f043 0308 	orr.w	r3, r3, #8
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	b94b      	cbnz	r3, 80092e6 <__swsetup_r+0x9a>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092dc:	d003      	beq.n	80092e6 <__swsetup_r+0x9a>
 80092de:	4621      	mov	r1, r4
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 ff29 	bl	800a138 <__smakebuf_r>
 80092e6:	89a0      	ldrh	r0, [r4, #12]
 80092e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ec:	f010 0301 	ands.w	r3, r0, #1
 80092f0:	d00a      	beq.n	8009308 <__swsetup_r+0xbc>
 80092f2:	2300      	movs	r3, #0
 80092f4:	60a3      	str	r3, [r4, #8]
 80092f6:	6963      	ldr	r3, [r4, #20]
 80092f8:	425b      	negs	r3, r3
 80092fa:	61a3      	str	r3, [r4, #24]
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	b943      	cbnz	r3, 8009312 <__swsetup_r+0xc6>
 8009300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009304:	d1ba      	bne.n	800927c <__swsetup_r+0x30>
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	0781      	lsls	r1, r0, #30
 800930a:	bf58      	it	pl
 800930c:	6963      	ldrpl	r3, [r4, #20]
 800930e:	60a3      	str	r3, [r4, #8]
 8009310:	e7f4      	b.n	80092fc <__swsetup_r+0xb0>
 8009312:	2000      	movs	r0, #0
 8009314:	e7f7      	b.n	8009306 <__swsetup_r+0xba>
 8009316:	bf00      	nop
 8009318:	24000014 	.word	0x24000014
 800931c:	0800aefc 	.word	0x0800aefc
 8009320:	0800af1c 	.word	0x0800af1c
 8009324:	0800aedc 	.word	0x0800aedc

08009328 <_close_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4d06      	ldr	r5, [pc, #24]	; (8009344 <_close_r+0x1c>)
 800932c:	2300      	movs	r3, #0
 800932e:	4604      	mov	r4, r0
 8009330:	4608      	mov	r0, r1
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	f7f7 fe8b 	bl	800104e <_close>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_close_r+0x1a>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_close_r+0x1a>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	240053e0 	.word	0x240053e0

08009348 <quorem>:
 8009348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	6903      	ldr	r3, [r0, #16]
 800934e:	690c      	ldr	r4, [r1, #16]
 8009350:	42a3      	cmp	r3, r4
 8009352:	4607      	mov	r7, r0
 8009354:	f2c0 8081 	blt.w	800945a <quorem+0x112>
 8009358:	3c01      	subs	r4, #1
 800935a:	f101 0814 	add.w	r8, r1, #20
 800935e:	f100 0514 	add.w	r5, r0, #20
 8009362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800936c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009370:	3301      	adds	r3, #1
 8009372:	429a      	cmp	r2, r3
 8009374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800937c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009380:	d331      	bcc.n	80093e6 <quorem+0x9e>
 8009382:	f04f 0e00 	mov.w	lr, #0
 8009386:	4640      	mov	r0, r8
 8009388:	46ac      	mov	ip, r5
 800938a:	46f2      	mov	sl, lr
 800938c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009390:	b293      	uxth	r3, r2
 8009392:	fb06 e303 	mla	r3, r6, r3, lr
 8009396:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800939a:	b29b      	uxth	r3, r3
 800939c:	ebaa 0303 	sub.w	r3, sl, r3
 80093a0:	f8dc a000 	ldr.w	sl, [ip]
 80093a4:	0c12      	lsrs	r2, r2, #16
 80093a6:	fa13 f38a 	uxtah	r3, r3, sl
 80093aa:	fb06 e202 	mla	r2, r6, r2, lr
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	9b00      	ldr	r3, [sp, #0]
 80093b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093b6:	b292      	uxth	r2, r2
 80093b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80093c4:	4581      	cmp	r9, r0
 80093c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ca:	f84c 3b04 	str.w	r3, [ip], #4
 80093ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093d2:	d2db      	bcs.n	800938c <quorem+0x44>
 80093d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80093d8:	b92b      	cbnz	r3, 80093e6 <quorem+0x9e>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	3b04      	subs	r3, #4
 80093de:	429d      	cmp	r5, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	d32e      	bcc.n	8009442 <quorem+0xfa>
 80093e4:	613c      	str	r4, [r7, #16]
 80093e6:	4638      	mov	r0, r7
 80093e8:	f001 f97c 	bl	800a6e4 <__mcmp>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	db24      	blt.n	800943a <quorem+0xf2>
 80093f0:	3601      	adds	r6, #1
 80093f2:	4628      	mov	r0, r5
 80093f4:	f04f 0c00 	mov.w	ip, #0
 80093f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093fc:	f8d0 e000 	ldr.w	lr, [r0]
 8009400:	b293      	uxth	r3, r2
 8009402:	ebac 0303 	sub.w	r3, ip, r3
 8009406:	0c12      	lsrs	r2, r2, #16
 8009408:	fa13 f38e 	uxtah	r3, r3, lr
 800940c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009414:	b29b      	uxth	r3, r3
 8009416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800941a:	45c1      	cmp	r9, r8
 800941c:	f840 3b04 	str.w	r3, [r0], #4
 8009420:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009424:	d2e8      	bcs.n	80093f8 <quorem+0xb0>
 8009426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800942a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800942e:	b922      	cbnz	r2, 800943a <quorem+0xf2>
 8009430:	3b04      	subs	r3, #4
 8009432:	429d      	cmp	r5, r3
 8009434:	461a      	mov	r2, r3
 8009436:	d30a      	bcc.n	800944e <quorem+0x106>
 8009438:	613c      	str	r4, [r7, #16]
 800943a:	4630      	mov	r0, r6
 800943c:	b003      	add	sp, #12
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	3b04      	subs	r3, #4
 8009446:	2a00      	cmp	r2, #0
 8009448:	d1cc      	bne.n	80093e4 <quorem+0x9c>
 800944a:	3c01      	subs	r4, #1
 800944c:	e7c7      	b.n	80093de <quorem+0x96>
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	3b04      	subs	r3, #4
 8009452:	2a00      	cmp	r2, #0
 8009454:	d1f0      	bne.n	8009438 <quorem+0xf0>
 8009456:	3c01      	subs	r4, #1
 8009458:	e7eb      	b.n	8009432 <quorem+0xea>
 800945a:	2000      	movs	r0, #0
 800945c:	e7ee      	b.n	800943c <quorem+0xf4>
	...

08009460 <_dtoa_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	ed2d 8b02 	vpush	{d8}
 8009468:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800946a:	b091      	sub	sp, #68	; 0x44
 800946c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009470:	ec59 8b10 	vmov	r8, r9, d0
 8009474:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009476:	9106      	str	r1, [sp, #24]
 8009478:	4606      	mov	r6, r0
 800947a:	9208      	str	r2, [sp, #32]
 800947c:	930c      	str	r3, [sp, #48]	; 0x30
 800947e:	b975      	cbnz	r5, 800949e <_dtoa_r+0x3e>
 8009480:	2010      	movs	r0, #16
 8009482:	f000 fe99 	bl	800a1b8 <malloc>
 8009486:	4602      	mov	r2, r0
 8009488:	6270      	str	r0, [r6, #36]	; 0x24
 800948a:	b920      	cbnz	r0, 8009496 <_dtoa_r+0x36>
 800948c:	4baa      	ldr	r3, [pc, #680]	; (8009738 <_dtoa_r+0x2d8>)
 800948e:	21ea      	movs	r1, #234	; 0xea
 8009490:	48aa      	ldr	r0, [pc, #680]	; (800973c <_dtoa_r+0x2dc>)
 8009492:	f001 fbf7 	bl	800ac84 <__assert_func>
 8009496:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800949a:	6005      	str	r5, [r0, #0]
 800949c:	60c5      	str	r5, [r0, #12]
 800949e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	b151      	cbz	r1, 80094ba <_dtoa_r+0x5a>
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	604a      	str	r2, [r1, #4]
 80094a8:	2301      	movs	r3, #1
 80094aa:	4093      	lsls	r3, r2
 80094ac:	608b      	str	r3, [r1, #8]
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 fed6 	bl	800a260 <_Bfree>
 80094b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f1b9 0300 	subs.w	r3, r9, #0
 80094be:	bfbb      	ittet	lt
 80094c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094c4:	9303      	strlt	r3, [sp, #12]
 80094c6:	2300      	movge	r3, #0
 80094c8:	2201      	movlt	r2, #1
 80094ca:	bfac      	ite	ge
 80094cc:	6023      	strge	r3, [r4, #0]
 80094ce:	6022      	strlt	r2, [r4, #0]
 80094d0:	4b9b      	ldr	r3, [pc, #620]	; (8009740 <_dtoa_r+0x2e0>)
 80094d2:	9c03      	ldr	r4, [sp, #12]
 80094d4:	43a3      	bics	r3, r4
 80094d6:	d11c      	bne.n	8009512 <_dtoa_r+0xb2>
 80094d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094da:	f242 730f 	movw	r3, #9999	; 0x270f
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80094e4:	ea53 0308 	orrs.w	r3, r3, r8
 80094e8:	f000 84fd 	beq.w	8009ee6 <_dtoa_r+0xa86>
 80094ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ee:	b963      	cbnz	r3, 800950a <_dtoa_r+0xaa>
 80094f0:	4b94      	ldr	r3, [pc, #592]	; (8009744 <_dtoa_r+0x2e4>)
 80094f2:	e01f      	b.n	8009534 <_dtoa_r+0xd4>
 80094f4:	4b94      	ldr	r3, [pc, #592]	; (8009748 <_dtoa_r+0x2e8>)
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	3308      	adds	r3, #8
 80094fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	9801      	ldr	r0, [sp, #4]
 8009500:	b011      	add	sp, #68	; 0x44
 8009502:	ecbd 8b02 	vpop	{d8}
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	4b8e      	ldr	r3, [pc, #568]	; (8009744 <_dtoa_r+0x2e4>)
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	3303      	adds	r3, #3
 8009510:	e7f3      	b.n	80094fa <_dtoa_r+0x9a>
 8009512:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009516:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800951a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951e:	d10b      	bne.n	8009538 <_dtoa_r+0xd8>
 8009520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009522:	2301      	movs	r3, #1
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 84d9 	beq.w	8009ee0 <_dtoa_r+0xa80>
 800952e:	4887      	ldr	r0, [pc, #540]	; (800974c <_dtoa_r+0x2ec>)
 8009530:	6018      	str	r0, [r3, #0]
 8009532:	1e43      	subs	r3, r0, #1
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	e7e2      	b.n	80094fe <_dtoa_r+0x9e>
 8009538:	a90f      	add	r1, sp, #60	; 0x3c
 800953a:	aa0e      	add	r2, sp, #56	; 0x38
 800953c:	4630      	mov	r0, r6
 800953e:	eeb0 0b48 	vmov.f64	d0, d8
 8009542:	f001 f975 	bl	800a830 <__d2b>
 8009546:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800954a:	4605      	mov	r5, r0
 800954c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800954e:	2900      	cmp	r1, #0
 8009550:	d046      	beq.n	80095e0 <_dtoa_r+0x180>
 8009552:	ee18 4a90 	vmov	r4, s17
 8009556:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800955a:	ec53 2b18 	vmov	r2, r3, d8
 800955e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009566:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800956a:	2400      	movs	r4, #0
 800956c:	ec43 2b16 	vmov	d6, r2, r3
 8009570:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009574:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009720 <_dtoa_r+0x2c0>
 8009578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800957c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009728 <_dtoa_r+0x2c8>
 8009580:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009584:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009730 <_dtoa_r+0x2d0>
 8009588:	ee07 1a90 	vmov	s15, r1
 800958c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009590:	eeb0 7b46 	vmov.f64	d7, d6
 8009594:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009598:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800959c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80095a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a4:	ee16 ba90 	vmov	fp, s13
 80095a8:	940a      	str	r4, [sp, #40]	; 0x28
 80095aa:	d508      	bpl.n	80095be <_dtoa_r+0x15e>
 80095ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80095b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	bf18      	it	ne
 80095ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80095be:	f1bb 0f16 	cmp.w	fp, #22
 80095c2:	d82f      	bhi.n	8009624 <_dtoa_r+0x1c4>
 80095c4:	4b62      	ldr	r3, [pc, #392]	; (8009750 <_dtoa_r+0x2f0>)
 80095c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095ca:	ed93 7b00 	vldr	d7, [r3]
 80095ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	d501      	bpl.n	80095dc <_dtoa_r+0x17c>
 80095d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095dc:	2300      	movs	r3, #0
 80095de:	e022      	b.n	8009626 <_dtoa_r+0x1c6>
 80095e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095e2:	4401      	add	r1, r0
 80095e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	bfc1      	itttt	gt
 80095ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095f0:	fa04 f303 	lslgt.w	r3, r4, r3
 80095f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80095f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80095fc:	bfd6      	itet	le
 80095fe:	f1c3 0320 	rsble	r3, r3, #32
 8009602:	ea43 0808 	orrgt.w	r8, r3, r8
 8009606:	fa08 f803 	lslle.w	r8, r8, r3
 800960a:	ee07 8a90 	vmov	s15, r8
 800960e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009612:	3901      	subs	r1, #1
 8009614:	ee17 4a90 	vmov	r4, s15
 8009618:	ec53 2b17 	vmov	r2, r3, d7
 800961c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009620:	2401      	movs	r4, #1
 8009622:	e7a3      	b.n	800956c <_dtoa_r+0x10c>
 8009624:	2301      	movs	r3, #1
 8009626:	930b      	str	r3, [sp, #44]	; 0x2c
 8009628:	1a43      	subs	r3, r0, r1
 800962a:	1e5a      	subs	r2, r3, #1
 800962c:	bf45      	ittet	mi
 800962e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009632:	9304      	strmi	r3, [sp, #16]
 8009634:	2300      	movpl	r3, #0
 8009636:	2300      	movmi	r3, #0
 8009638:	9205      	str	r2, [sp, #20]
 800963a:	bf54      	ite	pl
 800963c:	9304      	strpl	r3, [sp, #16]
 800963e:	9305      	strmi	r3, [sp, #20]
 8009640:	f1bb 0f00 	cmp.w	fp, #0
 8009644:	db18      	blt.n	8009678 <_dtoa_r+0x218>
 8009646:	9b05      	ldr	r3, [sp, #20]
 8009648:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800964c:	445b      	add	r3, fp
 800964e:	9305      	str	r3, [sp, #20]
 8009650:	2300      	movs	r3, #0
 8009652:	9a06      	ldr	r2, [sp, #24]
 8009654:	2a09      	cmp	r2, #9
 8009656:	d849      	bhi.n	80096ec <_dtoa_r+0x28c>
 8009658:	2a05      	cmp	r2, #5
 800965a:	bfc4      	itt	gt
 800965c:	3a04      	subgt	r2, #4
 800965e:	9206      	strgt	r2, [sp, #24]
 8009660:	9a06      	ldr	r2, [sp, #24]
 8009662:	f1a2 0202 	sub.w	r2, r2, #2
 8009666:	bfcc      	ite	gt
 8009668:	2400      	movgt	r4, #0
 800966a:	2401      	movle	r4, #1
 800966c:	2a03      	cmp	r2, #3
 800966e:	d848      	bhi.n	8009702 <_dtoa_r+0x2a2>
 8009670:	e8df f002 	tbb	[pc, r2]
 8009674:	3a2c2e0b 	.word	0x3a2c2e0b
 8009678:	9b04      	ldr	r3, [sp, #16]
 800967a:	2200      	movs	r2, #0
 800967c:	eba3 030b 	sub.w	r3, r3, fp
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f1cb 0300 	rsb	r3, fp, #0
 8009688:	e7e3      	b.n	8009652 <_dtoa_r+0x1f2>
 800968a:	2200      	movs	r2, #0
 800968c:	9207      	str	r2, [sp, #28]
 800968e:	9a08      	ldr	r2, [sp, #32]
 8009690:	2a00      	cmp	r2, #0
 8009692:	dc39      	bgt.n	8009708 <_dtoa_r+0x2a8>
 8009694:	f04f 0a01 	mov.w	sl, #1
 8009698:	46d1      	mov	r9, sl
 800969a:	4652      	mov	r2, sl
 800969c:	f8cd a020 	str.w	sl, [sp, #32]
 80096a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80096a2:	2100      	movs	r1, #0
 80096a4:	6079      	str	r1, [r7, #4]
 80096a6:	2004      	movs	r0, #4
 80096a8:	f100 0c14 	add.w	ip, r0, #20
 80096ac:	4594      	cmp	ip, r2
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	d92f      	bls.n	8009712 <_dtoa_r+0x2b2>
 80096b2:	4630      	mov	r0, r6
 80096b4:	930d      	str	r3, [sp, #52]	; 0x34
 80096b6:	f000 fd93 	bl	800a1e0 <_Balloc>
 80096ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096bc:	9001      	str	r0, [sp, #4]
 80096be:	4602      	mov	r2, r0
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d149      	bne.n	8009758 <_dtoa_r+0x2f8>
 80096c4:	4b23      	ldr	r3, [pc, #140]	; (8009754 <_dtoa_r+0x2f4>)
 80096c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096ca:	e6e1      	b.n	8009490 <_dtoa_r+0x30>
 80096cc:	2201      	movs	r2, #1
 80096ce:	e7dd      	b.n	800968c <_dtoa_r+0x22c>
 80096d0:	2200      	movs	r2, #0
 80096d2:	9207      	str	r2, [sp, #28]
 80096d4:	9a08      	ldr	r2, [sp, #32]
 80096d6:	eb0b 0a02 	add.w	sl, fp, r2
 80096da:	f10a 0901 	add.w	r9, sl, #1
 80096de:	464a      	mov	r2, r9
 80096e0:	2a01      	cmp	r2, #1
 80096e2:	bfb8      	it	lt
 80096e4:	2201      	movlt	r2, #1
 80096e6:	e7db      	b.n	80096a0 <_dtoa_r+0x240>
 80096e8:	2201      	movs	r2, #1
 80096ea:	e7f2      	b.n	80096d2 <_dtoa_r+0x272>
 80096ec:	2401      	movs	r4, #1
 80096ee:	2200      	movs	r2, #0
 80096f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80096f4:	f04f 3aff 	mov.w	sl, #4294967295
 80096f8:	2100      	movs	r1, #0
 80096fa:	46d1      	mov	r9, sl
 80096fc:	2212      	movs	r2, #18
 80096fe:	9108      	str	r1, [sp, #32]
 8009700:	e7ce      	b.n	80096a0 <_dtoa_r+0x240>
 8009702:	2201      	movs	r2, #1
 8009704:	9207      	str	r2, [sp, #28]
 8009706:	e7f5      	b.n	80096f4 <_dtoa_r+0x294>
 8009708:	f8dd a020 	ldr.w	sl, [sp, #32]
 800970c:	46d1      	mov	r9, sl
 800970e:	4652      	mov	r2, sl
 8009710:	e7c6      	b.n	80096a0 <_dtoa_r+0x240>
 8009712:	3101      	adds	r1, #1
 8009714:	6079      	str	r1, [r7, #4]
 8009716:	0040      	lsls	r0, r0, #1
 8009718:	e7c6      	b.n	80096a8 <_dtoa_r+0x248>
 800971a:	bf00      	nop
 800971c:	f3af 8000 	nop.w
 8009720:	636f4361 	.word	0x636f4361
 8009724:	3fd287a7 	.word	0x3fd287a7
 8009728:	8b60c8b3 	.word	0x8b60c8b3
 800972c:	3fc68a28 	.word	0x3fc68a28
 8009730:	509f79fb 	.word	0x509f79fb
 8009734:	3fd34413 	.word	0x3fd34413
 8009738:	0800af81 	.word	0x0800af81
 800973c:	0800af98 	.word	0x0800af98
 8009740:	7ff00000 	.word	0x7ff00000
 8009744:	0800af7d 	.word	0x0800af7d
 8009748:	0800af74 	.word	0x0800af74
 800974c:	0800af51 	.word	0x0800af51
 8009750:	0800b088 	.word	0x0800b088
 8009754:	0800aff3 	.word	0x0800aff3
 8009758:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800975a:	9901      	ldr	r1, [sp, #4]
 800975c:	6011      	str	r1, [r2, #0]
 800975e:	f1b9 0f0e 	cmp.w	r9, #14
 8009762:	d86c      	bhi.n	800983e <_dtoa_r+0x3de>
 8009764:	2c00      	cmp	r4, #0
 8009766:	d06a      	beq.n	800983e <_dtoa_r+0x3de>
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	f340 80a0 	ble.w	80098b0 <_dtoa_r+0x450>
 8009770:	49c1      	ldr	r1, [pc, #772]	; (8009a78 <_dtoa_r+0x618>)
 8009772:	f00b 020f 	and.w	r2, fp, #15
 8009776:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800977a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800977e:	ed92 7b00 	vldr	d7, [r2]
 8009782:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009786:	f000 8087 	beq.w	8009898 <_dtoa_r+0x438>
 800978a:	4abc      	ldr	r2, [pc, #752]	; (8009a7c <_dtoa_r+0x61c>)
 800978c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009790:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009794:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009798:	f001 010f 	and.w	r1, r1, #15
 800979c:	2203      	movs	r2, #3
 800979e:	48b7      	ldr	r0, [pc, #732]	; (8009a7c <_dtoa_r+0x61c>)
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d17b      	bne.n	800989c <_dtoa_r+0x43c>
 80097a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80097a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80097ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b2:	2900      	cmp	r1, #0
 80097b4:	f000 80a2 	beq.w	80098fc <_dtoa_r+0x49c>
 80097b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80097bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	f140 8098 	bpl.w	80098fc <_dtoa_r+0x49c>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	f000 8094 	beq.w	80098fc <_dtoa_r+0x49c>
 80097d4:	f1ba 0f00 	cmp.w	sl, #0
 80097d8:	dd2f      	ble.n	800983a <_dtoa_r+0x3da>
 80097da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80097de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80097ea:	3201      	adds	r2, #1
 80097ec:	4650      	mov	r0, sl
 80097ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80097f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80097f6:	ee07 2a90 	vmov	s15, r2
 80097fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80097fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009802:	ee15 4a90 	vmov	r4, s11
 8009806:	ec52 1b15 	vmov	r1, r2, d5
 800980a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800980e:	2800      	cmp	r0, #0
 8009810:	d177      	bne.n	8009902 <_dtoa_r+0x4a2>
 8009812:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009816:	ee36 6b47 	vsub.f64	d6, d6, d7
 800981a:	ec42 1b17 	vmov	d7, r1, r2
 800981e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009826:	f300 8263 	bgt.w	8009cf0 <_dtoa_r+0x890>
 800982a:	eeb1 7b47 	vneg.f64	d7, d7
 800982e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009836:	f100 8258 	bmi.w	8009cea <_dtoa_r+0x88a>
 800983a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800983e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009840:	2a00      	cmp	r2, #0
 8009842:	f2c0 811d 	blt.w	8009a80 <_dtoa_r+0x620>
 8009846:	f1bb 0f0e 	cmp.w	fp, #14
 800984a:	f300 8119 	bgt.w	8009a80 <_dtoa_r+0x620>
 800984e:	4b8a      	ldr	r3, [pc, #552]	; (8009a78 <_dtoa_r+0x618>)
 8009850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009854:	ed93 6b00 	vldr	d6, [r3]
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f280 80b7 	bge.w	80099ce <_dtoa_r+0x56e>
 8009860:	f1b9 0f00 	cmp.w	r9, #0
 8009864:	f300 80b3 	bgt.w	80099ce <_dtoa_r+0x56e>
 8009868:	f040 823f 	bne.w	8009cea <_dtoa_r+0x88a>
 800986c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009870:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009874:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009878:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	464c      	mov	r4, r9
 8009882:	464f      	mov	r7, r9
 8009884:	f280 8215 	bge.w	8009cb2 <_dtoa_r+0x852>
 8009888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800988c:	2331      	movs	r3, #49	; 0x31
 800988e:	f808 3b01 	strb.w	r3, [r8], #1
 8009892:	f10b 0b01 	add.w	fp, fp, #1
 8009896:	e211      	b.n	8009cbc <_dtoa_r+0x85c>
 8009898:	2202      	movs	r2, #2
 800989a:	e780      	b.n	800979e <_dtoa_r+0x33e>
 800989c:	07cc      	lsls	r4, r1, #31
 800989e:	d504      	bpl.n	80098aa <_dtoa_r+0x44a>
 80098a0:	ed90 6b00 	vldr	d6, [r0]
 80098a4:	3201      	adds	r2, #1
 80098a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098aa:	1049      	asrs	r1, r1, #1
 80098ac:	3008      	adds	r0, #8
 80098ae:	e777      	b.n	80097a0 <_dtoa_r+0x340>
 80098b0:	d022      	beq.n	80098f8 <_dtoa_r+0x498>
 80098b2:	f1cb 0100 	rsb	r1, fp, #0
 80098b6:	4a70      	ldr	r2, [pc, #448]	; (8009a78 <_dtoa_r+0x618>)
 80098b8:	f001 000f 	and.w	r0, r1, #15
 80098bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80098c0:	ed92 7b00 	vldr	d7, [r2]
 80098c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80098c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098cc:	486b      	ldr	r0, [pc, #428]	; (8009a7c <_dtoa_r+0x61c>)
 80098ce:	1109      	asrs	r1, r1, #4
 80098d0:	2400      	movs	r4, #0
 80098d2:	2202      	movs	r2, #2
 80098d4:	b929      	cbnz	r1, 80098e2 <_dtoa_r+0x482>
 80098d6:	2c00      	cmp	r4, #0
 80098d8:	f43f af6a 	beq.w	80097b0 <_dtoa_r+0x350>
 80098dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098e0:	e766      	b.n	80097b0 <_dtoa_r+0x350>
 80098e2:	07cf      	lsls	r7, r1, #31
 80098e4:	d505      	bpl.n	80098f2 <_dtoa_r+0x492>
 80098e6:	ed90 6b00 	vldr	d6, [r0]
 80098ea:	3201      	adds	r2, #1
 80098ec:	2401      	movs	r4, #1
 80098ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098f2:	1049      	asrs	r1, r1, #1
 80098f4:	3008      	adds	r0, #8
 80098f6:	e7ed      	b.n	80098d4 <_dtoa_r+0x474>
 80098f8:	2202      	movs	r2, #2
 80098fa:	e759      	b.n	80097b0 <_dtoa_r+0x350>
 80098fc:	465f      	mov	r7, fp
 80098fe:	4648      	mov	r0, r9
 8009900:	e775      	b.n	80097ee <_dtoa_r+0x38e>
 8009902:	ec42 1b17 	vmov	d7, r1, r2
 8009906:	4a5c      	ldr	r2, [pc, #368]	; (8009a78 <_dtoa_r+0x618>)
 8009908:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800990c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009910:	9a01      	ldr	r2, [sp, #4]
 8009912:	1814      	adds	r4, r2, r0
 8009914:	9a07      	ldr	r2, [sp, #28]
 8009916:	b352      	cbz	r2, 800996e <_dtoa_r+0x50e>
 8009918:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800991c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009920:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009924:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009928:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800992c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009930:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009934:	ee14 2a90 	vmov	r2, s9
 8009938:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800993c:	3230      	adds	r2, #48	; 0x30
 800993e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009942:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994a:	f808 2b01 	strb.w	r2, [r8], #1
 800994e:	d439      	bmi.n	80099c4 <_dtoa_r+0x564>
 8009950:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009954:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995c:	d472      	bmi.n	8009a44 <_dtoa_r+0x5e4>
 800995e:	45a0      	cmp	r8, r4
 8009960:	f43f af6b 	beq.w	800983a <_dtoa_r+0x3da>
 8009964:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009968:	ee26 6b03 	vmul.f64	d6, d6, d3
 800996c:	e7e0      	b.n	8009930 <_dtoa_r+0x4d0>
 800996e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009972:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009976:	4621      	mov	r1, r4
 8009978:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800997c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009980:	ee14 2a90 	vmov	r2, s9
 8009984:	3230      	adds	r2, #48	; 0x30
 8009986:	f808 2b01 	strb.w	r2, [r8], #1
 800998a:	45a0      	cmp	r8, r4
 800998c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009990:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009994:	d118      	bne.n	80099c8 <_dtoa_r+0x568>
 8009996:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800999a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800999e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a6:	dc4d      	bgt.n	8009a44 <_dtoa_r+0x5e4>
 80099a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	f57f af41 	bpl.w	800983a <_dtoa_r+0x3da>
 80099b8:	4688      	mov	r8, r1
 80099ba:	3901      	subs	r1, #1
 80099bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80099c0:	2b30      	cmp	r3, #48	; 0x30
 80099c2:	d0f9      	beq.n	80099b8 <_dtoa_r+0x558>
 80099c4:	46bb      	mov	fp, r7
 80099c6:	e02a      	b.n	8009a1e <_dtoa_r+0x5be>
 80099c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80099cc:	e7d6      	b.n	800997c <_dtoa_r+0x51c>
 80099ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80099d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80099de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80099e2:	ee15 3a10 	vmov	r3, s10
 80099e6:	3330      	adds	r3, #48	; 0x30
 80099e8:	f808 3b01 	strb.w	r3, [r8], #1
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	eba8 0303 	sub.w	r3, r8, r3
 80099f2:	4599      	cmp	r9, r3
 80099f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80099f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80099fc:	d133      	bne.n	8009a66 <_dtoa_r+0x606>
 80099fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0a:	dc1a      	bgt.n	8009a42 <_dtoa_r+0x5e2>
 8009a0c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	d103      	bne.n	8009a1e <_dtoa_r+0x5be>
 8009a16:	ee15 3a10 	vmov	r3, s10
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	d411      	bmi.n	8009a42 <_dtoa_r+0x5e2>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 fc1d 	bl	800a260 <_Bfree>
 8009a26:	2300      	movs	r3, #0
 8009a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a2a:	f888 3000 	strb.w	r3, [r8]
 8009a2e:	f10b 0301 	add.w	r3, fp, #1
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f43f ad61 	beq.w	80094fe <_dtoa_r+0x9e>
 8009a3c:	f8c3 8000 	str.w	r8, [r3]
 8009a40:	e55d      	b.n	80094fe <_dtoa_r+0x9e>
 8009a42:	465f      	mov	r7, fp
 8009a44:	4643      	mov	r3, r8
 8009a46:	4698      	mov	r8, r3
 8009a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a4c:	2a39      	cmp	r2, #57	; 0x39
 8009a4e:	d106      	bne.n	8009a5e <_dtoa_r+0x5fe>
 8009a50:	9a01      	ldr	r2, [sp, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d1f7      	bne.n	8009a46 <_dtoa_r+0x5e6>
 8009a56:	9901      	ldr	r1, [sp, #4]
 8009a58:	2230      	movs	r2, #48	; 0x30
 8009a5a:	3701      	adds	r7, #1
 8009a5c:	700a      	strb	r2, [r1, #0]
 8009a5e:	781a      	ldrb	r2, [r3, #0]
 8009a60:	3201      	adds	r2, #1
 8009a62:	701a      	strb	r2, [r3, #0]
 8009a64:	e7ae      	b.n	80099c4 <_dtoa_r+0x564>
 8009a66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a72:	d1b2      	bne.n	80099da <_dtoa_r+0x57a>
 8009a74:	e7d3      	b.n	8009a1e <_dtoa_r+0x5be>
 8009a76:	bf00      	nop
 8009a78:	0800b088 	.word	0x0800b088
 8009a7c:	0800b060 	.word	0x0800b060
 8009a80:	9907      	ldr	r1, [sp, #28]
 8009a82:	2900      	cmp	r1, #0
 8009a84:	f000 80d0 	beq.w	8009c28 <_dtoa_r+0x7c8>
 8009a88:	9906      	ldr	r1, [sp, #24]
 8009a8a:	2901      	cmp	r1, #1
 8009a8c:	f300 80b4 	bgt.w	8009bf8 <_dtoa_r+0x798>
 8009a90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a92:	2900      	cmp	r1, #0
 8009a94:	f000 80ac 	beq.w	8009bf0 <_dtoa_r+0x790>
 8009a98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009aa0:	461c      	mov	r4, r3
 8009aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa4:	9b04      	ldr	r3, [sp, #16]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	9b05      	ldr	r3, [sp, #20]
 8009aac:	2101      	movs	r1, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	f000 fc8c 	bl	800a3d0 <__i2b>
 8009ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aba:	4607      	mov	r7, r0
 8009abc:	f1b8 0f00 	cmp.w	r8, #0
 8009ac0:	dd0d      	ble.n	8009ade <_dtoa_r+0x67e>
 8009ac2:	9a05      	ldr	r2, [sp, #20]
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	dd0a      	ble.n	8009ade <_dtoa_r+0x67e>
 8009ac8:	4542      	cmp	r2, r8
 8009aca:	9904      	ldr	r1, [sp, #16]
 8009acc:	bfa8      	it	ge
 8009ace:	4642      	movge	r2, r8
 8009ad0:	1a89      	subs	r1, r1, r2
 8009ad2:	9104      	str	r1, [sp, #16]
 8009ad4:	9905      	ldr	r1, [sp, #20]
 8009ad6:	eba8 0802 	sub.w	r8, r8, r2
 8009ada:	1a8a      	subs	r2, r1, r2
 8009adc:	9205      	str	r2, [sp, #20]
 8009ade:	b303      	cbz	r3, 8009b22 <_dtoa_r+0x6c2>
 8009ae0:	9a07      	ldr	r2, [sp, #28]
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	f000 80a5 	beq.w	8009c32 <_dtoa_r+0x7d2>
 8009ae8:	2c00      	cmp	r4, #0
 8009aea:	dd13      	ble.n	8009b14 <_dtoa_r+0x6b4>
 8009aec:	4639      	mov	r1, r7
 8009aee:	4622      	mov	r2, r4
 8009af0:	4630      	mov	r0, r6
 8009af2:	930d      	str	r3, [sp, #52]	; 0x34
 8009af4:	f000 fd2c 	bl	800a550 <__pow5mult>
 8009af8:	462a      	mov	r2, r5
 8009afa:	4601      	mov	r1, r0
 8009afc:	4607      	mov	r7, r0
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 fc7c 	bl	800a3fc <__multiply>
 8009b04:	4629      	mov	r1, r5
 8009b06:	900a      	str	r0, [sp, #40]	; 0x28
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 fba9 	bl	800a260 <_Bfree>
 8009b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b12:	4615      	mov	r5, r2
 8009b14:	1b1a      	subs	r2, r3, r4
 8009b16:	d004      	beq.n	8009b22 <_dtoa_r+0x6c2>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 fd18 	bl	800a550 <__pow5mult>
 8009b20:	4605      	mov	r5, r0
 8009b22:	2101      	movs	r1, #1
 8009b24:	4630      	mov	r0, r6
 8009b26:	f000 fc53 	bl	800a3d0 <__i2b>
 8009b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	f340 8081 	ble.w	8009c36 <_dtoa_r+0x7d6>
 8009b34:	461a      	mov	r2, r3
 8009b36:	4601      	mov	r1, r0
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f000 fd09 	bl	800a550 <__pow5mult>
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	4604      	mov	r4, r0
 8009b44:	dd7a      	ble.n	8009c3c <_dtoa_r+0x7dc>
 8009b46:	2300      	movs	r3, #0
 8009b48:	930a      	str	r3, [sp, #40]	; 0x28
 8009b4a:	6922      	ldr	r2, [r4, #16]
 8009b4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b50:	6910      	ldr	r0, [r2, #16]
 8009b52:	f000 fbed 	bl	800a330 <__hi0bits>
 8009b56:	f1c0 0020 	rsb	r0, r0, #32
 8009b5a:	9b05      	ldr	r3, [sp, #20]
 8009b5c:	4418      	add	r0, r3
 8009b5e:	f010 001f 	ands.w	r0, r0, #31
 8009b62:	f000 808c 	beq.w	8009c7e <_dtoa_r+0x81e>
 8009b66:	f1c0 0220 	rsb	r2, r0, #32
 8009b6a:	2a04      	cmp	r2, #4
 8009b6c:	f340 8085 	ble.w	8009c7a <_dtoa_r+0x81a>
 8009b70:	f1c0 001c 	rsb	r0, r0, #28
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	4403      	add	r3, r0
 8009b78:	9304      	str	r3, [sp, #16]
 8009b7a:	9b05      	ldr	r3, [sp, #20]
 8009b7c:	4403      	add	r3, r0
 8009b7e:	4480      	add	r8, r0
 8009b80:	9305      	str	r3, [sp, #20]
 8009b82:	9b04      	ldr	r3, [sp, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd05      	ble.n	8009b94 <_dtoa_r+0x734>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 fd39 	bl	800a604 <__lshift>
 8009b92:	4605      	mov	r5, r0
 8009b94:	9b05      	ldr	r3, [sp, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd05      	ble.n	8009ba6 <_dtoa_r+0x746>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f000 fd30 	bl	800a604 <__lshift>
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d06a      	beq.n	8009c82 <_dtoa_r+0x822>
 8009bac:	4621      	mov	r1, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 fd98 	bl	800a6e4 <__mcmp>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	da64      	bge.n	8009c82 <_dtoa_r+0x822>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4629      	mov	r1, r5
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 fb70 	bl	800a2a4 <__multadd>
 8009bc4:	9b07      	ldr	r3, [sp, #28]
 8009bc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bca:	4605      	mov	r5, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8191 	beq.w	8009ef4 <_dtoa_r+0xa94>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	220a      	movs	r2, #10
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 fb63 	bl	800a2a4 <__multadd>
 8009bde:	f1ba 0f00 	cmp.w	sl, #0
 8009be2:	4607      	mov	r7, r0
 8009be4:	f300 808d 	bgt.w	8009d02 <_dtoa_r+0x8a2>
 8009be8:	9b06      	ldr	r3, [sp, #24]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	dc50      	bgt.n	8009c90 <_dtoa_r+0x830>
 8009bee:	e088      	b.n	8009d02 <_dtoa_r+0x8a2>
 8009bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009bf6:	e751      	b.n	8009a9c <_dtoa_r+0x63c>
 8009bf8:	f109 34ff 	add.w	r4, r9, #4294967295
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	bfbf      	itttt	lt
 8009c00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009c02:	1ae3      	sublt	r3, r4, r3
 8009c04:	18d2      	addlt	r2, r2, r3
 8009c06:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009c08:	bfb6      	itet	lt
 8009c0a:	4623      	movlt	r3, r4
 8009c0c:	1b1c      	subge	r4, r3, r4
 8009c0e:	2400      	movlt	r4, #0
 8009c10:	f1b9 0f00 	cmp.w	r9, #0
 8009c14:	bfb5      	itete	lt
 8009c16:	9a04      	ldrlt	r2, [sp, #16]
 8009c18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009c1c:	eba2 0809 	sublt.w	r8, r2, r9
 8009c20:	464a      	movge	r2, r9
 8009c22:	bfb8      	it	lt
 8009c24:	2200      	movlt	r2, #0
 8009c26:	e73c      	b.n	8009aa2 <_dtoa_r+0x642>
 8009c28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c2c:	9f07      	ldr	r7, [sp, #28]
 8009c2e:	461c      	mov	r4, r3
 8009c30:	e744      	b.n	8009abc <_dtoa_r+0x65c>
 8009c32:	461a      	mov	r2, r3
 8009c34:	e770      	b.n	8009b18 <_dtoa_r+0x6b8>
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	dc18      	bgt.n	8009c6e <_dtoa_r+0x80e>
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	b9b3      	cbnz	r3, 8009c6e <_dtoa_r+0x80e>
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009c46:	b9a2      	cbnz	r2, 8009c72 <_dtoa_r+0x812>
 8009c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c4c:	0d12      	lsrs	r2, r2, #20
 8009c4e:	0512      	lsls	r2, r2, #20
 8009c50:	b18a      	cbz	r2, 8009c76 <_dtoa_r+0x816>
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	3301      	adds	r3, #1
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	9b05      	ldr	r3, [sp, #20]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	9305      	str	r3, [sp, #20]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	930a      	str	r3, [sp, #40]	; 0x28
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f47f af70 	bne.w	8009b4a <_dtoa_r+0x6ea>
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	e775      	b.n	8009b5a <_dtoa_r+0x6fa>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e7f6      	b.n	8009c60 <_dtoa_r+0x800>
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	e7f4      	b.n	8009c60 <_dtoa_r+0x800>
 8009c76:	920a      	str	r2, [sp, #40]	; 0x28
 8009c78:	e7f3      	b.n	8009c62 <_dtoa_r+0x802>
 8009c7a:	d082      	beq.n	8009b82 <_dtoa_r+0x722>
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	301c      	adds	r0, #28
 8009c80:	e778      	b.n	8009b74 <_dtoa_r+0x714>
 8009c82:	f1b9 0f00 	cmp.w	r9, #0
 8009c86:	dc37      	bgt.n	8009cf8 <_dtoa_r+0x898>
 8009c88:	9b06      	ldr	r3, [sp, #24]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	dd34      	ble.n	8009cf8 <_dtoa_r+0x898>
 8009c8e:	46ca      	mov	sl, r9
 8009c90:	f1ba 0f00 	cmp.w	sl, #0
 8009c94:	d10d      	bne.n	8009cb2 <_dtoa_r+0x852>
 8009c96:	4621      	mov	r1, r4
 8009c98:	4653      	mov	r3, sl
 8009c9a:	2205      	movs	r2, #5
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 fb01 	bl	800a2a4 <__multadd>
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 fd1c 	bl	800a6e4 <__mcmp>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f73f adeb 	bgt.w	8009888 <_dtoa_r+0x428>
 8009cb2:	9b08      	ldr	r3, [sp, #32]
 8009cb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cb8:	ea6f 0b03 	mvn.w	fp, r3
 8009cbc:	f04f 0900 	mov.w	r9, #0
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f000 facc 	bl	800a260 <_Bfree>
 8009cc8:	2f00      	cmp	r7, #0
 8009cca:	f43f aea8 	beq.w	8009a1e <_dtoa_r+0x5be>
 8009cce:	f1b9 0f00 	cmp.w	r9, #0
 8009cd2:	d005      	beq.n	8009ce0 <_dtoa_r+0x880>
 8009cd4:	45b9      	cmp	r9, r7
 8009cd6:	d003      	beq.n	8009ce0 <_dtoa_r+0x880>
 8009cd8:	4649      	mov	r1, r9
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f000 fac0 	bl	800a260 <_Bfree>
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f000 fabc 	bl	800a260 <_Bfree>
 8009ce8:	e699      	b.n	8009a1e <_dtoa_r+0x5be>
 8009cea:	2400      	movs	r4, #0
 8009cec:	4627      	mov	r7, r4
 8009cee:	e7e0      	b.n	8009cb2 <_dtoa_r+0x852>
 8009cf0:	46bb      	mov	fp, r7
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	e5c7      	b.n	8009888 <_dtoa_r+0x428>
 8009cf8:	9b07      	ldr	r3, [sp, #28]
 8009cfa:	46ca      	mov	sl, r9
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 8100 	beq.w	8009f02 <_dtoa_r+0xaa2>
 8009d02:	f1b8 0f00 	cmp.w	r8, #0
 8009d06:	dd05      	ble.n	8009d14 <_dtoa_r+0x8b4>
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f000 fc79 	bl	800a604 <__lshift>
 8009d12:	4607      	mov	r7, r0
 8009d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d05d      	beq.n	8009dd6 <_dtoa_r+0x976>
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 fa5f 	bl	800a1e0 <_Balloc>
 8009d22:	4680      	mov	r8, r0
 8009d24:	b928      	cbnz	r0, 8009d32 <_dtoa_r+0x8d2>
 8009d26:	4b82      	ldr	r3, [pc, #520]	; (8009f30 <_dtoa_r+0xad0>)
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d2e:	f7ff bbaf 	b.w	8009490 <_dtoa_r+0x30>
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	3202      	adds	r2, #2
 8009d36:	0092      	lsls	r2, r2, #2
 8009d38:	f107 010c 	add.w	r1, r7, #12
 8009d3c:	300c      	adds	r0, #12
 8009d3e:	f7fe fbe8 	bl	8008512 <memcpy>
 8009d42:	2201      	movs	r2, #1
 8009d44:	4641      	mov	r1, r8
 8009d46:	4630      	mov	r0, r6
 8009d48:	f000 fc5c 	bl	800a604 <__lshift>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	4453      	add	r3, sl
 8009d56:	9308      	str	r3, [sp, #32]
 8009d58:	9b02      	ldr	r3, [sp, #8]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	46b9      	mov	r9, r7
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	4607      	mov	r7, r0
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	4621      	mov	r1, r4
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	f7ff faeb 	bl	8009348 <quorem>
 8009d72:	4603      	mov	r3, r0
 8009d74:	3330      	adds	r3, #48	; 0x30
 8009d76:	9005      	str	r0, [sp, #20]
 8009d78:	4649      	mov	r1, r9
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	f000 fcb1 	bl	800a6e4 <__mcmp>
 8009d82:	463a      	mov	r2, r7
 8009d84:	4682      	mov	sl, r0
 8009d86:	4621      	mov	r1, r4
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f000 fcc7 	bl	800a71c <__mdiff>
 8009d8e:	68c2      	ldr	r2, [r0, #12]
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	4680      	mov	r8, r0
 8009d94:	bb0a      	cbnz	r2, 8009dda <_dtoa_r+0x97a>
 8009d96:	4601      	mov	r1, r0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 fca3 	bl	800a6e4 <__mcmp>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da0:	4602      	mov	r2, r0
 8009da2:	4641      	mov	r1, r8
 8009da4:	4630      	mov	r0, r6
 8009da6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009daa:	f000 fa59 	bl	800a260 <_Bfree>
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009db2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009db6:	ea43 0102 	orr.w	r1, r3, r2
 8009dba:	9b07      	ldr	r3, [sp, #28]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	d10d      	bne.n	8009dde <_dtoa_r+0x97e>
 8009dc2:	2b39      	cmp	r3, #57	; 0x39
 8009dc4:	d029      	beq.n	8009e1a <_dtoa_r+0x9ba>
 8009dc6:	f1ba 0f00 	cmp.w	sl, #0
 8009dca:	dd01      	ble.n	8009dd0 <_dtoa_r+0x970>
 8009dcc:	9b05      	ldr	r3, [sp, #20]
 8009dce:	3331      	adds	r3, #49	; 0x31
 8009dd0:	9a02      	ldr	r2, [sp, #8]
 8009dd2:	7013      	strb	r3, [r2, #0]
 8009dd4:	e774      	b.n	8009cc0 <_dtoa_r+0x860>
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	e7b8      	b.n	8009d4c <_dtoa_r+0x8ec>
 8009dda:	2201      	movs	r2, #1
 8009ddc:	e7e1      	b.n	8009da2 <_dtoa_r+0x942>
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	db06      	blt.n	8009df2 <_dtoa_r+0x992>
 8009de4:	9906      	ldr	r1, [sp, #24]
 8009de6:	ea41 0a0a 	orr.w	sl, r1, sl
 8009dea:	9907      	ldr	r1, [sp, #28]
 8009dec:	ea5a 0101 	orrs.w	r1, sl, r1
 8009df0:	d120      	bne.n	8009e34 <_dtoa_r+0x9d4>
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	ddec      	ble.n	8009dd0 <_dtoa_r+0x970>
 8009df6:	4629      	mov	r1, r5
 8009df8:	2201      	movs	r2, #1
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	f000 fc01 	bl	800a604 <__lshift>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4605      	mov	r5, r0
 8009e06:	f000 fc6d 	bl	800a6e4 <__mcmp>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	9b04      	ldr	r3, [sp, #16]
 8009e0e:	dc02      	bgt.n	8009e16 <_dtoa_r+0x9b6>
 8009e10:	d1de      	bne.n	8009dd0 <_dtoa_r+0x970>
 8009e12:	07da      	lsls	r2, r3, #31
 8009e14:	d5dc      	bpl.n	8009dd0 <_dtoa_r+0x970>
 8009e16:	2b39      	cmp	r3, #57	; 0x39
 8009e18:	d1d8      	bne.n	8009dcc <_dtoa_r+0x96c>
 8009e1a:	9a02      	ldr	r2, [sp, #8]
 8009e1c:	2339      	movs	r3, #57	; 0x39
 8009e1e:	7013      	strb	r3, [r2, #0]
 8009e20:	4643      	mov	r3, r8
 8009e22:	4698      	mov	r8, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009e2a:	2a39      	cmp	r2, #57	; 0x39
 8009e2c:	d051      	beq.n	8009ed2 <_dtoa_r+0xa72>
 8009e2e:	3201      	adds	r2, #1
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	e745      	b.n	8009cc0 <_dtoa_r+0x860>
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	dd03      	ble.n	8009e40 <_dtoa_r+0x9e0>
 8009e38:	2b39      	cmp	r3, #57	; 0x39
 8009e3a:	d0ee      	beq.n	8009e1a <_dtoa_r+0x9ba>
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	e7c7      	b.n	8009dd0 <_dtoa_r+0x970>
 8009e40:	9a04      	ldr	r2, [sp, #16]
 8009e42:	9908      	ldr	r1, [sp, #32]
 8009e44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e48:	428a      	cmp	r2, r1
 8009e4a:	d02b      	beq.n	8009ea4 <_dtoa_r+0xa44>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	2300      	movs	r3, #0
 8009e50:	220a      	movs	r2, #10
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 fa26 	bl	800a2a4 <__multadd>
 8009e58:	45b9      	cmp	r9, r7
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	f04f 020a 	mov.w	r2, #10
 8009e64:	4649      	mov	r1, r9
 8009e66:	4630      	mov	r0, r6
 8009e68:	d107      	bne.n	8009e7a <_dtoa_r+0xa1a>
 8009e6a:	f000 fa1b 	bl	800a2a4 <__multadd>
 8009e6e:	4681      	mov	r9, r0
 8009e70:	4607      	mov	r7, r0
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	3301      	adds	r3, #1
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	e774      	b.n	8009d64 <_dtoa_r+0x904>
 8009e7a:	f000 fa13 	bl	800a2a4 <__multadd>
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4681      	mov	r9, r0
 8009e82:	2300      	movs	r3, #0
 8009e84:	220a      	movs	r2, #10
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 fa0c 	bl	800a2a4 <__multadd>
 8009e8c:	4607      	mov	r7, r0
 8009e8e:	e7f0      	b.n	8009e72 <_dtoa_r+0xa12>
 8009e90:	f1ba 0f00 	cmp.w	sl, #0
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	bfcc      	ite	gt
 8009e98:	46d0      	movgt	r8, sl
 8009e9a:	f04f 0801 	movle.w	r8, #1
 8009e9e:	4490      	add	r8, r2
 8009ea0:	f04f 0900 	mov.w	r9, #0
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	9302      	str	r3, [sp, #8]
 8009eac:	f000 fbaa 	bl	800a604 <__lshift>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	f000 fc16 	bl	800a6e4 <__mcmp>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	dcb1      	bgt.n	8009e20 <_dtoa_r+0x9c0>
 8009ebc:	d102      	bne.n	8009ec4 <_dtoa_r+0xa64>
 8009ebe:	9b02      	ldr	r3, [sp, #8]
 8009ec0:	07db      	lsls	r3, r3, #31
 8009ec2:	d4ad      	bmi.n	8009e20 <_dtoa_r+0x9c0>
 8009ec4:	4643      	mov	r3, r8
 8009ec6:	4698      	mov	r8, r3
 8009ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ecc:	2a30      	cmp	r2, #48	; 0x30
 8009ece:	d0fa      	beq.n	8009ec6 <_dtoa_r+0xa66>
 8009ed0:	e6f6      	b.n	8009cc0 <_dtoa_r+0x860>
 8009ed2:	9a01      	ldr	r2, [sp, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d1a4      	bne.n	8009e22 <_dtoa_r+0x9c2>
 8009ed8:	f10b 0b01 	add.w	fp, fp, #1
 8009edc:	2331      	movs	r3, #49	; 0x31
 8009ede:	e778      	b.n	8009dd2 <_dtoa_r+0x972>
 8009ee0:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <_dtoa_r+0xad4>)
 8009ee2:	f7ff bb27 	b.w	8009534 <_dtoa_r+0xd4>
 8009ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f47f ab03 	bne.w	80094f4 <_dtoa_r+0x94>
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <_dtoa_r+0xad8>)
 8009ef0:	f7ff bb20 	b.w	8009534 <_dtoa_r+0xd4>
 8009ef4:	f1ba 0f00 	cmp.w	sl, #0
 8009ef8:	dc03      	bgt.n	8009f02 <_dtoa_r+0xaa2>
 8009efa:	9b06      	ldr	r3, [sp, #24]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	f73f aec7 	bgt.w	8009c90 <_dtoa_r+0x830>
 8009f02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f06:	4621      	mov	r1, r4
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7ff fa1d 	bl	8009348 <quorem>
 8009f0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f12:	f808 3b01 	strb.w	r3, [r8], #1
 8009f16:	9a01      	ldr	r2, [sp, #4]
 8009f18:	eba8 0202 	sub.w	r2, r8, r2
 8009f1c:	4592      	cmp	sl, r2
 8009f1e:	ddb7      	ble.n	8009e90 <_dtoa_r+0xa30>
 8009f20:	4629      	mov	r1, r5
 8009f22:	2300      	movs	r3, #0
 8009f24:	220a      	movs	r2, #10
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f9bc 	bl	800a2a4 <__multadd>
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	e7ea      	b.n	8009f06 <_dtoa_r+0xaa6>
 8009f30:	0800aff3 	.word	0x0800aff3
 8009f34:	0800af50 	.word	0x0800af50
 8009f38:	0800af74 	.word	0x0800af74

08009f3c <__sflush_r>:
 8009f3c:	898a      	ldrh	r2, [r1, #12]
 8009f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	0710      	lsls	r0, r2, #28
 8009f46:	460c      	mov	r4, r1
 8009f48:	d458      	bmi.n	8009ffc <__sflush_r+0xc0>
 8009f4a:	684b      	ldr	r3, [r1, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dc05      	bgt.n	8009f5c <__sflush_r+0x20>
 8009f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	dc02      	bgt.n	8009f5c <__sflush_r+0x20>
 8009f56:	2000      	movs	r0, #0
 8009f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d0f9      	beq.n	8009f56 <__sflush_r+0x1a>
 8009f62:	2300      	movs	r3, #0
 8009f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f68:	682f      	ldr	r7, [r5, #0]
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	d032      	beq.n	8009fd4 <__sflush_r+0x98>
 8009f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	075a      	lsls	r2, r3, #29
 8009f74:	d505      	bpl.n	8009f82 <__sflush_r+0x46>
 8009f76:	6863      	ldr	r3, [r4, #4]
 8009f78:	1ac0      	subs	r0, r0, r3
 8009f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f7c:	b10b      	cbz	r3, 8009f82 <__sflush_r+0x46>
 8009f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f80:	1ac0      	subs	r0, r0, r3
 8009f82:	2300      	movs	r3, #0
 8009f84:	4602      	mov	r2, r0
 8009f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f88:	6a21      	ldr	r1, [r4, #32]
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b0      	blx	r6
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	d106      	bne.n	8009fa2 <__sflush_r+0x66>
 8009f94:	6829      	ldr	r1, [r5, #0]
 8009f96:	291d      	cmp	r1, #29
 8009f98:	d82c      	bhi.n	8009ff4 <__sflush_r+0xb8>
 8009f9a:	4a2a      	ldr	r2, [pc, #168]	; (800a044 <__sflush_r+0x108>)
 8009f9c:	40ca      	lsrs	r2, r1
 8009f9e:	07d6      	lsls	r6, r2, #31
 8009fa0:	d528      	bpl.n	8009ff4 <__sflush_r+0xb8>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	6062      	str	r2, [r4, #4]
 8009fa6:	04d9      	lsls	r1, r3, #19
 8009fa8:	6922      	ldr	r2, [r4, #16]
 8009faa:	6022      	str	r2, [r4, #0]
 8009fac:	d504      	bpl.n	8009fb8 <__sflush_r+0x7c>
 8009fae:	1c42      	adds	r2, r0, #1
 8009fb0:	d101      	bne.n	8009fb6 <__sflush_r+0x7a>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b903      	cbnz	r3, 8009fb8 <__sflush_r+0x7c>
 8009fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8009fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fba:	602f      	str	r7, [r5, #0]
 8009fbc:	2900      	cmp	r1, #0
 8009fbe:	d0ca      	beq.n	8009f56 <__sflush_r+0x1a>
 8009fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <__sflush_r+0x92>
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 fca3 	bl	800a914 <_free_r>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8009fd2:	e7c1      	b.n	8009f58 <__sflush_r+0x1c>
 8009fd4:	6a21      	ldr	r1, [r4, #32]
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	1c41      	adds	r1, r0, #1
 8009fde:	d1c7      	bne.n	8009f70 <__sflush_r+0x34>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0c4      	beq.n	8009f70 <__sflush_r+0x34>
 8009fe6:	2b1d      	cmp	r3, #29
 8009fe8:	d001      	beq.n	8009fee <__sflush_r+0xb2>
 8009fea:	2b16      	cmp	r3, #22
 8009fec:	d101      	bne.n	8009ff2 <__sflush_r+0xb6>
 8009fee:	602f      	str	r7, [r5, #0]
 8009ff0:	e7b1      	b.n	8009f56 <__sflush_r+0x1a>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff8:	81a3      	strh	r3, [r4, #12]
 8009ffa:	e7ad      	b.n	8009f58 <__sflush_r+0x1c>
 8009ffc:	690f      	ldr	r7, [r1, #16]
 8009ffe:	2f00      	cmp	r7, #0
 800a000:	d0a9      	beq.n	8009f56 <__sflush_r+0x1a>
 800a002:	0793      	lsls	r3, r2, #30
 800a004:	680e      	ldr	r6, [r1, #0]
 800a006:	bf08      	it	eq
 800a008:	694b      	ldreq	r3, [r1, #20]
 800a00a:	600f      	str	r7, [r1, #0]
 800a00c:	bf18      	it	ne
 800a00e:	2300      	movne	r3, #0
 800a010:	eba6 0807 	sub.w	r8, r6, r7
 800a014:	608b      	str	r3, [r1, #8]
 800a016:	f1b8 0f00 	cmp.w	r8, #0
 800a01a:	dd9c      	ble.n	8009f56 <__sflush_r+0x1a>
 800a01c:	6a21      	ldr	r1, [r4, #32]
 800a01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a020:	4643      	mov	r3, r8
 800a022:	463a      	mov	r2, r7
 800a024:	4628      	mov	r0, r5
 800a026:	47b0      	blx	r6
 800a028:	2800      	cmp	r0, #0
 800a02a:	dc06      	bgt.n	800a03a <__sflush_r+0xfe>
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	e78e      	b.n	8009f58 <__sflush_r+0x1c>
 800a03a:	4407      	add	r7, r0
 800a03c:	eba8 0800 	sub.w	r8, r8, r0
 800a040:	e7e9      	b.n	800a016 <__sflush_r+0xda>
 800a042:	bf00      	nop
 800a044:	20400001 	.word	0x20400001

0800a048 <_fflush_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	690b      	ldr	r3, [r1, #16]
 800a04c:	4605      	mov	r5, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	b913      	cbnz	r3, 800a058 <_fflush_r+0x10>
 800a052:	2500      	movs	r5, #0
 800a054:	4628      	mov	r0, r5
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	b118      	cbz	r0, 800a062 <_fflush_r+0x1a>
 800a05a:	6983      	ldr	r3, [r0, #24]
 800a05c:	b90b      	cbnz	r3, 800a062 <_fflush_r+0x1a>
 800a05e:	f7fe f993 	bl	8008388 <__sinit>
 800a062:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <_fflush_r+0x6c>)
 800a064:	429c      	cmp	r4, r3
 800a066:	d11b      	bne.n	800a0a0 <_fflush_r+0x58>
 800a068:	686c      	ldr	r4, [r5, #4]
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0ef      	beq.n	800a052 <_fflush_r+0xa>
 800a072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a074:	07d0      	lsls	r0, r2, #31
 800a076:	d404      	bmi.n	800a082 <_fflush_r+0x3a>
 800a078:	0599      	lsls	r1, r3, #22
 800a07a:	d402      	bmi.n	800a082 <_fflush_r+0x3a>
 800a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a07e:	f7fe fa46 	bl	800850e <__retarget_lock_acquire_recursive>
 800a082:	4628      	mov	r0, r5
 800a084:	4621      	mov	r1, r4
 800a086:	f7ff ff59 	bl	8009f3c <__sflush_r>
 800a08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a08c:	07da      	lsls	r2, r3, #31
 800a08e:	4605      	mov	r5, r0
 800a090:	d4e0      	bmi.n	800a054 <_fflush_r+0xc>
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	059b      	lsls	r3, r3, #22
 800a096:	d4dd      	bmi.n	800a054 <_fflush_r+0xc>
 800a098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a09a:	f7fe fa39 	bl	8008510 <__retarget_lock_release_recursive>
 800a09e:	e7d9      	b.n	800a054 <_fflush_r+0xc>
 800a0a0:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <_fflush_r+0x70>)
 800a0a2:	429c      	cmp	r4, r3
 800a0a4:	d101      	bne.n	800a0aa <_fflush_r+0x62>
 800a0a6:	68ac      	ldr	r4, [r5, #8]
 800a0a8:	e7df      	b.n	800a06a <_fflush_r+0x22>
 800a0aa:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <_fflush_r+0x74>)
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	bf08      	it	eq
 800a0b0:	68ec      	ldreq	r4, [r5, #12]
 800a0b2:	e7da      	b.n	800a06a <_fflush_r+0x22>
 800a0b4:	0800aefc 	.word	0x0800aefc
 800a0b8:	0800af1c 	.word	0x0800af1c
 800a0bc:	0800aedc 	.word	0x0800aedc

0800a0c0 <_localeconv_r>:
 800a0c0:	4800      	ldr	r0, [pc, #0]	; (800a0c4 <_localeconv_r+0x4>)
 800a0c2:	4770      	bx	lr
 800a0c4:	24000168 	.word	0x24000168

0800a0c8 <_lseek_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	; (800a0e8 <_lseek_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f6 ffe0 	bl	800109c <_lseek>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_lseek_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_lseek_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	240053e0 	.word	0x240053e0

0800a0ec <__swhatbuf_r>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	460e      	mov	r6, r1
 800a0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	b096      	sub	sp, #88	; 0x58
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	461d      	mov	r5, r3
 800a0fc:	da08      	bge.n	800a110 <__swhatbuf_r+0x24>
 800a0fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	061a      	lsls	r2, r3, #24
 800a108:	d410      	bmi.n	800a12c <__swhatbuf_r+0x40>
 800a10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10e:	e00e      	b.n	800a12e <__swhatbuf_r+0x42>
 800a110:	466a      	mov	r2, sp
 800a112:	f000 fde7 	bl	800ace4 <_fstat_r>
 800a116:	2800      	cmp	r0, #0
 800a118:	dbf1      	blt.n	800a0fe <__swhatbuf_r+0x12>
 800a11a:	9a01      	ldr	r2, [sp, #4]
 800a11c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a124:	425a      	negs	r2, r3
 800a126:	415a      	adcs	r2, r3
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	e7ee      	b.n	800a10a <__swhatbuf_r+0x1e>
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	2000      	movs	r0, #0
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	b016      	add	sp, #88	; 0x58
 800a134:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a138 <__smakebuf_r>:
 800a138:	898b      	ldrh	r3, [r1, #12]
 800a13a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a13c:	079d      	lsls	r5, r3, #30
 800a13e:	4606      	mov	r6, r0
 800a140:	460c      	mov	r4, r1
 800a142:	d507      	bpl.n	800a154 <__smakebuf_r+0x1c>
 800a144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	2301      	movs	r3, #1
 800a14e:	6163      	str	r3, [r4, #20]
 800a150:	b002      	add	sp, #8
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	ab01      	add	r3, sp, #4
 800a156:	466a      	mov	r2, sp
 800a158:	f7ff ffc8 	bl	800a0ec <__swhatbuf_r>
 800a15c:	9900      	ldr	r1, [sp, #0]
 800a15e:	4605      	mov	r5, r0
 800a160:	4630      	mov	r0, r6
 800a162:	f7fe fa0d 	bl	8008580 <_malloc_r>
 800a166:	b948      	cbnz	r0, 800a17c <__smakebuf_r+0x44>
 800a168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16c:	059a      	lsls	r2, r3, #22
 800a16e:	d4ef      	bmi.n	800a150 <__smakebuf_r+0x18>
 800a170:	f023 0303 	bic.w	r3, r3, #3
 800a174:	f043 0302 	orr.w	r3, r3, #2
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	e7e3      	b.n	800a144 <__smakebuf_r+0xc>
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <__smakebuf_r+0x7c>)
 800a17e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	9b00      	ldr	r3, [sp, #0]
 800a18c:	6163      	str	r3, [r4, #20]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	6120      	str	r0, [r4, #16]
 800a192:	b15b      	cbz	r3, 800a1ac <__smakebuf_r+0x74>
 800a194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 fdb5 	bl	800ad08 <_isatty_r>
 800a19e:	b128      	cbz	r0, 800a1ac <__smakebuf_r+0x74>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	89a0      	ldrh	r0, [r4, #12]
 800a1ae:	4305      	orrs	r5, r0
 800a1b0:	81a5      	strh	r5, [r4, #12]
 800a1b2:	e7cd      	b.n	800a150 <__smakebuf_r+0x18>
 800a1b4:	08008321 	.word	0x08008321

0800a1b8 <malloc>:
 800a1b8:	4b02      	ldr	r3, [pc, #8]	; (800a1c4 <malloc+0xc>)
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f7fe b9df 	b.w	8008580 <_malloc_r>
 800a1c2:	bf00      	nop
 800a1c4:	24000014 	.word	0x24000014

0800a1c8 <__malloc_lock>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__malloc_lock+0x8>)
 800a1ca:	f7fe b9a0 	b.w	800850e <__retarget_lock_acquire_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	240053d4 	.word	0x240053d4

0800a1d4 <__malloc_unlock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__malloc_unlock+0x8>)
 800a1d6:	f7fe b99b 	b.w	8008510 <__retarget_lock_release_recursive>
 800a1da:	bf00      	nop
 800a1dc:	240053d4 	.word	0x240053d4

0800a1e0 <_Balloc>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	b976      	cbnz	r6, 800a208 <_Balloc+0x28>
 800a1ea:	2010      	movs	r0, #16
 800a1ec:	f7ff ffe4 	bl	800a1b8 <malloc>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1f4:	b920      	cbnz	r0, 800a200 <_Balloc+0x20>
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <_Balloc+0x78>)
 800a1f8:	4818      	ldr	r0, [pc, #96]	; (800a25c <_Balloc+0x7c>)
 800a1fa:	2166      	movs	r1, #102	; 0x66
 800a1fc:	f000 fd42 	bl	800ac84 <__assert_func>
 800a200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a204:	6006      	str	r6, [r0, #0]
 800a206:	60c6      	str	r6, [r0, #12]
 800a208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a20a:	68f3      	ldr	r3, [r6, #12]
 800a20c:	b183      	cbz	r3, 800a230 <_Balloc+0x50>
 800a20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a216:	b9b8      	cbnz	r0, 800a248 <_Balloc+0x68>
 800a218:	2101      	movs	r1, #1
 800a21a:	fa01 f605 	lsl.w	r6, r1, r5
 800a21e:	1d72      	adds	r2, r6, #5
 800a220:	0092      	lsls	r2, r2, #2
 800a222:	4620      	mov	r0, r4
 800a224:	f000 fb60 	bl	800a8e8 <_calloc_r>
 800a228:	b160      	cbz	r0, 800a244 <_Balloc+0x64>
 800a22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a22e:	e00e      	b.n	800a24e <_Balloc+0x6e>
 800a230:	2221      	movs	r2, #33	; 0x21
 800a232:	2104      	movs	r1, #4
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fb57 	bl	800a8e8 <_calloc_r>
 800a23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a23c:	60f0      	str	r0, [r6, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e4      	bne.n	800a20e <_Balloc+0x2e>
 800a244:	2000      	movs	r0, #0
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	6802      	ldr	r2, [r0, #0]
 800a24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a24e:	2300      	movs	r3, #0
 800a250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a254:	e7f7      	b.n	800a246 <_Balloc+0x66>
 800a256:	bf00      	nop
 800a258:	0800af81 	.word	0x0800af81
 800a25c:	0800b004 	.word	0x0800b004

0800a260 <_Bfree>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a264:	4605      	mov	r5, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b976      	cbnz	r6, 800a288 <_Bfree+0x28>
 800a26a:	2010      	movs	r0, #16
 800a26c:	f7ff ffa4 	bl	800a1b8 <malloc>
 800a270:	4602      	mov	r2, r0
 800a272:	6268      	str	r0, [r5, #36]	; 0x24
 800a274:	b920      	cbnz	r0, 800a280 <_Bfree+0x20>
 800a276:	4b09      	ldr	r3, [pc, #36]	; (800a29c <_Bfree+0x3c>)
 800a278:	4809      	ldr	r0, [pc, #36]	; (800a2a0 <_Bfree+0x40>)
 800a27a:	218a      	movs	r1, #138	; 0x8a
 800a27c:	f000 fd02 	bl	800ac84 <__assert_func>
 800a280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a284:	6006      	str	r6, [r0, #0]
 800a286:	60c6      	str	r6, [r0, #12]
 800a288:	b13c      	cbz	r4, 800a29a <_Bfree+0x3a>
 800a28a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a294:	6021      	str	r1, [r4, #0]
 800a296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	0800af81 	.word	0x0800af81
 800a2a0:	0800b004 	.word	0x0800b004

0800a2a4 <__multadd>:
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	690d      	ldr	r5, [r1, #16]
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	461e      	mov	r6, r3
 800a2b0:	f101 0c14 	add.w	ip, r1, #20
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ba:	b299      	uxth	r1, r3
 800a2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a2c0:	0c1e      	lsrs	r6, r3, #16
 800a2c2:	0c0b      	lsrs	r3, r1, #16
 800a2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2c8:	b289      	uxth	r1, r1
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2d0:	4285      	cmp	r5, r0
 800a2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2da:	dcec      	bgt.n	800a2b6 <__multadd+0x12>
 800a2dc:	b30e      	cbz	r6, 800a322 <__multadd+0x7e>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc19      	bgt.n	800a318 <__multadd+0x74>
 800a2e4:	6861      	ldr	r1, [r4, #4]
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	3101      	adds	r1, #1
 800a2ea:	f7ff ff79 	bl	800a1e0 <_Balloc>
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	b928      	cbnz	r0, 800a2fe <__multadd+0x5a>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <__multadd+0x84>)
 800a2f6:	480d      	ldr	r0, [pc, #52]	; (800a32c <__multadd+0x88>)
 800a2f8:	21b5      	movs	r1, #181	; 0xb5
 800a2fa:	f000 fcc3 	bl	800ac84 <__assert_func>
 800a2fe:	6922      	ldr	r2, [r4, #16]
 800a300:	3202      	adds	r2, #2
 800a302:	f104 010c 	add.w	r1, r4, #12
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	300c      	adds	r0, #12
 800a30a:	f7fe f902 	bl	8008512 <memcpy>
 800a30e:	4621      	mov	r1, r4
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff ffa5 	bl	800a260 <_Bfree>
 800a316:	4644      	mov	r4, r8
 800a318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a31c:	3501      	adds	r5, #1
 800a31e:	615e      	str	r6, [r3, #20]
 800a320:	6125      	str	r5, [r4, #16]
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a328:	0800aff3 	.word	0x0800aff3
 800a32c:	0800b004 	.word	0x0800b004

0800a330 <__hi0bits>:
 800a330:	0c03      	lsrs	r3, r0, #16
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	b9d3      	cbnz	r3, 800a36c <__hi0bits+0x3c>
 800a336:	0400      	lsls	r0, r0, #16
 800a338:	2310      	movs	r3, #16
 800a33a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a33e:	bf04      	itt	eq
 800a340:	0200      	lsleq	r0, r0, #8
 800a342:	3308      	addeq	r3, #8
 800a344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a348:	bf04      	itt	eq
 800a34a:	0100      	lsleq	r0, r0, #4
 800a34c:	3304      	addeq	r3, #4
 800a34e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a352:	bf04      	itt	eq
 800a354:	0080      	lsleq	r0, r0, #2
 800a356:	3302      	addeq	r3, #2
 800a358:	2800      	cmp	r0, #0
 800a35a:	db05      	blt.n	800a368 <__hi0bits+0x38>
 800a35c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a360:	f103 0301 	add.w	r3, r3, #1
 800a364:	bf08      	it	eq
 800a366:	2320      	moveq	r3, #32
 800a368:	4618      	mov	r0, r3
 800a36a:	4770      	bx	lr
 800a36c:	2300      	movs	r3, #0
 800a36e:	e7e4      	b.n	800a33a <__hi0bits+0xa>

0800a370 <__lo0bits>:
 800a370:	6803      	ldr	r3, [r0, #0]
 800a372:	f013 0207 	ands.w	r2, r3, #7
 800a376:	4601      	mov	r1, r0
 800a378:	d00b      	beq.n	800a392 <__lo0bits+0x22>
 800a37a:	07da      	lsls	r2, r3, #31
 800a37c:	d423      	bmi.n	800a3c6 <__lo0bits+0x56>
 800a37e:	0798      	lsls	r0, r3, #30
 800a380:	bf49      	itett	mi
 800a382:	085b      	lsrmi	r3, r3, #1
 800a384:	089b      	lsrpl	r3, r3, #2
 800a386:	2001      	movmi	r0, #1
 800a388:	600b      	strmi	r3, [r1, #0]
 800a38a:	bf5c      	itt	pl
 800a38c:	600b      	strpl	r3, [r1, #0]
 800a38e:	2002      	movpl	r0, #2
 800a390:	4770      	bx	lr
 800a392:	b298      	uxth	r0, r3
 800a394:	b9a8      	cbnz	r0, 800a3c2 <__lo0bits+0x52>
 800a396:	0c1b      	lsrs	r3, r3, #16
 800a398:	2010      	movs	r0, #16
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	b90a      	cbnz	r2, 800a3a2 <__lo0bits+0x32>
 800a39e:	3008      	adds	r0, #8
 800a3a0:	0a1b      	lsrs	r3, r3, #8
 800a3a2:	071a      	lsls	r2, r3, #28
 800a3a4:	bf04      	itt	eq
 800a3a6:	091b      	lsreq	r3, r3, #4
 800a3a8:	3004      	addeq	r0, #4
 800a3aa:	079a      	lsls	r2, r3, #30
 800a3ac:	bf04      	itt	eq
 800a3ae:	089b      	lsreq	r3, r3, #2
 800a3b0:	3002      	addeq	r0, #2
 800a3b2:	07da      	lsls	r2, r3, #31
 800a3b4:	d403      	bmi.n	800a3be <__lo0bits+0x4e>
 800a3b6:	085b      	lsrs	r3, r3, #1
 800a3b8:	f100 0001 	add.w	r0, r0, #1
 800a3bc:	d005      	beq.n	800a3ca <__lo0bits+0x5a>
 800a3be:	600b      	str	r3, [r1, #0]
 800a3c0:	4770      	bx	lr
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	e7e9      	b.n	800a39a <__lo0bits+0x2a>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	4770      	bx	lr
 800a3ca:	2020      	movs	r0, #32
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <__i2b>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	f7ff ff03 	bl	800a1e0 <_Balloc>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	b928      	cbnz	r0, 800a3ea <__i2b+0x1a>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <__i2b+0x24>)
 800a3e0:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <__i2b+0x28>)
 800a3e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3e6:	f000 fc4d 	bl	800ac84 <__assert_func>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	6144      	str	r4, [r0, #20]
 800a3ee:	6103      	str	r3, [r0, #16]
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800aff3 	.word	0x0800aff3
 800a3f8:	0800b004 	.word	0x0800b004

0800a3fc <__multiply>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4691      	mov	r9, r2
 800a402:	690a      	ldr	r2, [r1, #16]
 800a404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a408:	429a      	cmp	r2, r3
 800a40a:	bfb8      	it	lt
 800a40c:	460b      	movlt	r3, r1
 800a40e:	460c      	mov	r4, r1
 800a410:	bfbc      	itt	lt
 800a412:	464c      	movlt	r4, r9
 800a414:	4699      	movlt	r9, r3
 800a416:	6927      	ldr	r7, [r4, #16]
 800a418:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	6861      	ldr	r1, [r4, #4]
 800a420:	eb07 060a 	add.w	r6, r7, sl
 800a424:	42b3      	cmp	r3, r6
 800a426:	b085      	sub	sp, #20
 800a428:	bfb8      	it	lt
 800a42a:	3101      	addlt	r1, #1
 800a42c:	f7ff fed8 	bl	800a1e0 <_Balloc>
 800a430:	b930      	cbnz	r0, 800a440 <__multiply+0x44>
 800a432:	4602      	mov	r2, r0
 800a434:	4b44      	ldr	r3, [pc, #272]	; (800a548 <__multiply+0x14c>)
 800a436:	4845      	ldr	r0, [pc, #276]	; (800a54c <__multiply+0x150>)
 800a438:	f240 115d 	movw	r1, #349	; 0x15d
 800a43c:	f000 fc22 	bl	800ac84 <__assert_func>
 800a440:	f100 0514 	add.w	r5, r0, #20
 800a444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a448:	462b      	mov	r3, r5
 800a44a:	2200      	movs	r2, #0
 800a44c:	4543      	cmp	r3, r8
 800a44e:	d321      	bcc.n	800a494 <__multiply+0x98>
 800a450:	f104 0314 	add.w	r3, r4, #20
 800a454:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a458:	f109 0314 	add.w	r3, r9, #20
 800a45c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a460:	9202      	str	r2, [sp, #8]
 800a462:	1b3a      	subs	r2, r7, r4
 800a464:	3a15      	subs	r2, #21
 800a466:	f022 0203 	bic.w	r2, r2, #3
 800a46a:	3204      	adds	r2, #4
 800a46c:	f104 0115 	add.w	r1, r4, #21
 800a470:	428f      	cmp	r7, r1
 800a472:	bf38      	it	cc
 800a474:	2204      	movcc	r2, #4
 800a476:	9201      	str	r2, [sp, #4]
 800a478:	9a02      	ldr	r2, [sp, #8]
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d80c      	bhi.n	800a49a <__multiply+0x9e>
 800a480:	2e00      	cmp	r6, #0
 800a482:	dd03      	ble.n	800a48c <__multiply+0x90>
 800a484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d05a      	beq.n	800a542 <__multiply+0x146>
 800a48c:	6106      	str	r6, [r0, #16]
 800a48e:	b005      	add	sp, #20
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	f843 2b04 	str.w	r2, [r3], #4
 800a498:	e7d8      	b.n	800a44c <__multiply+0x50>
 800a49a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a49e:	f1ba 0f00 	cmp.w	sl, #0
 800a4a2:	d024      	beq.n	800a4ee <__multiply+0xf2>
 800a4a4:	f104 0e14 	add.w	lr, r4, #20
 800a4a8:	46a9      	mov	r9, r5
 800a4aa:	f04f 0c00 	mov.w	ip, #0
 800a4ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4b2:	f8d9 1000 	ldr.w	r1, [r9]
 800a4b6:	fa1f fb82 	uxth.w	fp, r2
 800a4ba:	b289      	uxth	r1, r1
 800a4bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4c4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4c8:	4461      	add	r1, ip
 800a4ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4d6:	b289      	uxth	r1, r1
 800a4d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4dc:	4577      	cmp	r7, lr
 800a4de:	f849 1b04 	str.w	r1, [r9], #4
 800a4e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4e6:	d8e2      	bhi.n	800a4ae <__multiply+0xb2>
 800a4e8:	9a01      	ldr	r2, [sp, #4]
 800a4ea:	f845 c002 	str.w	ip, [r5, r2]
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	f1b9 0f00 	cmp.w	r9, #0
 800a4fa:	d020      	beq.n	800a53e <__multiply+0x142>
 800a4fc:	6829      	ldr	r1, [r5, #0]
 800a4fe:	f104 0c14 	add.w	ip, r4, #20
 800a502:	46ae      	mov	lr, r5
 800a504:	f04f 0a00 	mov.w	sl, #0
 800a508:	f8bc b000 	ldrh.w	fp, [ip]
 800a50c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a510:	fb09 220b 	mla	r2, r9, fp, r2
 800a514:	4492      	add	sl, r2
 800a516:	b289      	uxth	r1, r1
 800a518:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a51c:	f84e 1b04 	str.w	r1, [lr], #4
 800a520:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a524:	f8be 1000 	ldrh.w	r1, [lr]
 800a528:	0c12      	lsrs	r2, r2, #16
 800a52a:	fb09 1102 	mla	r1, r9, r2, r1
 800a52e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a532:	4567      	cmp	r7, ip
 800a534:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a538:	d8e6      	bhi.n	800a508 <__multiply+0x10c>
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	50a9      	str	r1, [r5, r2]
 800a53e:	3504      	adds	r5, #4
 800a540:	e79a      	b.n	800a478 <__multiply+0x7c>
 800a542:	3e01      	subs	r6, #1
 800a544:	e79c      	b.n	800a480 <__multiply+0x84>
 800a546:	bf00      	nop
 800a548:	0800aff3 	.word	0x0800aff3
 800a54c:	0800b004 	.word	0x0800b004

0800a550 <__pow5mult>:
 800a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4615      	mov	r5, r2
 800a556:	f012 0203 	ands.w	r2, r2, #3
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	d007      	beq.n	800a570 <__pow5mult+0x20>
 800a560:	4c25      	ldr	r4, [pc, #148]	; (800a5f8 <__pow5mult+0xa8>)
 800a562:	3a01      	subs	r2, #1
 800a564:	2300      	movs	r3, #0
 800a566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a56a:	f7ff fe9b 	bl	800a2a4 <__multadd>
 800a56e:	4607      	mov	r7, r0
 800a570:	10ad      	asrs	r5, r5, #2
 800a572:	d03d      	beq.n	800a5f0 <__pow5mult+0xa0>
 800a574:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a576:	b97c      	cbnz	r4, 800a598 <__pow5mult+0x48>
 800a578:	2010      	movs	r0, #16
 800a57a:	f7ff fe1d 	bl	800a1b8 <malloc>
 800a57e:	4602      	mov	r2, r0
 800a580:	6270      	str	r0, [r6, #36]	; 0x24
 800a582:	b928      	cbnz	r0, 800a590 <__pow5mult+0x40>
 800a584:	4b1d      	ldr	r3, [pc, #116]	; (800a5fc <__pow5mult+0xac>)
 800a586:	481e      	ldr	r0, [pc, #120]	; (800a600 <__pow5mult+0xb0>)
 800a588:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a58c:	f000 fb7a 	bl	800ac84 <__assert_func>
 800a590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a594:	6004      	str	r4, [r0, #0]
 800a596:	60c4      	str	r4, [r0, #12]
 800a598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a59c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5a0:	b94c      	cbnz	r4, 800a5b6 <__pow5mult+0x66>
 800a5a2:	f240 2171 	movw	r1, #625	; 0x271
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ff12 	bl	800a3d0 <__i2b>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	6003      	str	r3, [r0, #0]
 800a5b6:	f04f 0900 	mov.w	r9, #0
 800a5ba:	07eb      	lsls	r3, r5, #31
 800a5bc:	d50a      	bpl.n	800a5d4 <__pow5mult+0x84>
 800a5be:	4639      	mov	r1, r7
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ff1a 	bl	800a3fc <__multiply>
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4680      	mov	r8, r0
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff fe47 	bl	800a260 <_Bfree>
 800a5d2:	4647      	mov	r7, r8
 800a5d4:	106d      	asrs	r5, r5, #1
 800a5d6:	d00b      	beq.n	800a5f0 <__pow5mult+0xa0>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	b938      	cbnz	r0, 800a5ec <__pow5mult+0x9c>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff ff0b 	bl	800a3fc <__multiply>
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	f8c0 9000 	str.w	r9, [r0]
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e7e4      	b.n	800a5ba <__pow5mult+0x6a>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800b150 	.word	0x0800b150
 800a5fc:	0800af81 	.word	0x0800af81
 800a600:	0800b004 	.word	0x0800b004

0800a604 <__lshift>:
 800a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	6849      	ldr	r1, [r1, #4]
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a612:	68a3      	ldr	r3, [r4, #8]
 800a614:	4607      	mov	r7, r0
 800a616:	4691      	mov	r9, r2
 800a618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a61c:	f108 0601 	add.w	r6, r8, #1
 800a620:	42b3      	cmp	r3, r6
 800a622:	db0b      	blt.n	800a63c <__lshift+0x38>
 800a624:	4638      	mov	r0, r7
 800a626:	f7ff fddb 	bl	800a1e0 <_Balloc>
 800a62a:	4605      	mov	r5, r0
 800a62c:	b948      	cbnz	r0, 800a642 <__lshift+0x3e>
 800a62e:	4602      	mov	r2, r0
 800a630:	4b2a      	ldr	r3, [pc, #168]	; (800a6dc <__lshift+0xd8>)
 800a632:	482b      	ldr	r0, [pc, #172]	; (800a6e0 <__lshift+0xdc>)
 800a634:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a638:	f000 fb24 	bl	800ac84 <__assert_func>
 800a63c:	3101      	adds	r1, #1
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	e7ee      	b.n	800a620 <__lshift+0x1c>
 800a642:	2300      	movs	r3, #0
 800a644:	f100 0114 	add.w	r1, r0, #20
 800a648:	f100 0210 	add.w	r2, r0, #16
 800a64c:	4618      	mov	r0, r3
 800a64e:	4553      	cmp	r3, sl
 800a650:	db37      	blt.n	800a6c2 <__lshift+0xbe>
 800a652:	6920      	ldr	r0, [r4, #16]
 800a654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a658:	f104 0314 	add.w	r3, r4, #20
 800a65c:	f019 091f 	ands.w	r9, r9, #31
 800a660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a668:	d02f      	beq.n	800a6ca <__lshift+0xc6>
 800a66a:	f1c9 0e20 	rsb	lr, r9, #32
 800a66e:	468a      	mov	sl, r1
 800a670:	f04f 0c00 	mov.w	ip, #0
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	fa02 f209 	lsl.w	r2, r2, r9
 800a67a:	ea42 020c 	orr.w	r2, r2, ip
 800a67e:	f84a 2b04 	str.w	r2, [sl], #4
 800a682:	f853 2b04 	ldr.w	r2, [r3], #4
 800a686:	4298      	cmp	r0, r3
 800a688:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a68c:	d8f2      	bhi.n	800a674 <__lshift+0x70>
 800a68e:	1b03      	subs	r3, r0, r4
 800a690:	3b15      	subs	r3, #21
 800a692:	f023 0303 	bic.w	r3, r3, #3
 800a696:	3304      	adds	r3, #4
 800a698:	f104 0215 	add.w	r2, r4, #21
 800a69c:	4290      	cmp	r0, r2
 800a69e:	bf38      	it	cc
 800a6a0:	2304      	movcc	r3, #4
 800a6a2:	f841 c003 	str.w	ip, [r1, r3]
 800a6a6:	f1bc 0f00 	cmp.w	ip, #0
 800a6aa:	d001      	beq.n	800a6b0 <__lshift+0xac>
 800a6ac:	f108 0602 	add.w	r6, r8, #2
 800a6b0:	3e01      	subs	r6, #1
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	612e      	str	r6, [r5, #16]
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	f7ff fdd2 	bl	800a260 <_Bfree>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	e7c1      	b.n	800a64e <__lshift+0x4a>
 800a6ca:	3904      	subs	r1, #4
 800a6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d4:	4298      	cmp	r0, r3
 800a6d6:	d8f9      	bhi.n	800a6cc <__lshift+0xc8>
 800a6d8:	e7ea      	b.n	800a6b0 <__lshift+0xac>
 800a6da:	bf00      	nop
 800a6dc:	0800aff3 	.word	0x0800aff3
 800a6e0:	0800b004 	.word	0x0800b004

0800a6e4 <__mcmp>:
 800a6e4:	b530      	push	{r4, r5, lr}
 800a6e6:	6902      	ldr	r2, [r0, #16]
 800a6e8:	690c      	ldr	r4, [r1, #16]
 800a6ea:	1b12      	subs	r2, r2, r4
 800a6ec:	d10e      	bne.n	800a70c <__mcmp+0x28>
 800a6ee:	f100 0314 	add.w	r3, r0, #20
 800a6f2:	3114      	adds	r1, #20
 800a6f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a700:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a704:	42a5      	cmp	r5, r4
 800a706:	d003      	beq.n	800a710 <__mcmp+0x2c>
 800a708:	d305      	bcc.n	800a716 <__mcmp+0x32>
 800a70a:	2201      	movs	r2, #1
 800a70c:	4610      	mov	r0, r2
 800a70e:	bd30      	pop	{r4, r5, pc}
 800a710:	4283      	cmp	r3, r0
 800a712:	d3f3      	bcc.n	800a6fc <__mcmp+0x18>
 800a714:	e7fa      	b.n	800a70c <__mcmp+0x28>
 800a716:	f04f 32ff 	mov.w	r2, #4294967295
 800a71a:	e7f7      	b.n	800a70c <__mcmp+0x28>

0800a71c <__mdiff>:
 800a71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	460c      	mov	r4, r1
 800a722:	4606      	mov	r6, r0
 800a724:	4611      	mov	r1, r2
 800a726:	4620      	mov	r0, r4
 800a728:	4690      	mov	r8, r2
 800a72a:	f7ff ffdb 	bl	800a6e4 <__mcmp>
 800a72e:	1e05      	subs	r5, r0, #0
 800a730:	d110      	bne.n	800a754 <__mdiff+0x38>
 800a732:	4629      	mov	r1, r5
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff fd53 	bl	800a1e0 <_Balloc>
 800a73a:	b930      	cbnz	r0, 800a74a <__mdiff+0x2e>
 800a73c:	4b3a      	ldr	r3, [pc, #232]	; (800a828 <__mdiff+0x10c>)
 800a73e:	4602      	mov	r2, r0
 800a740:	f240 2132 	movw	r1, #562	; 0x232
 800a744:	4839      	ldr	r0, [pc, #228]	; (800a82c <__mdiff+0x110>)
 800a746:	f000 fa9d 	bl	800ac84 <__assert_func>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	bfa4      	itt	ge
 800a756:	4643      	movge	r3, r8
 800a758:	46a0      	movge	r8, r4
 800a75a:	4630      	mov	r0, r6
 800a75c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a760:	bfa6      	itte	ge
 800a762:	461c      	movge	r4, r3
 800a764:	2500      	movge	r5, #0
 800a766:	2501      	movlt	r5, #1
 800a768:	f7ff fd3a 	bl	800a1e0 <_Balloc>
 800a76c:	b920      	cbnz	r0, 800a778 <__mdiff+0x5c>
 800a76e:	4b2e      	ldr	r3, [pc, #184]	; (800a828 <__mdiff+0x10c>)
 800a770:	4602      	mov	r2, r0
 800a772:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a776:	e7e5      	b.n	800a744 <__mdiff+0x28>
 800a778:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a77c:	6926      	ldr	r6, [r4, #16]
 800a77e:	60c5      	str	r5, [r0, #12]
 800a780:	f104 0914 	add.w	r9, r4, #20
 800a784:	f108 0514 	add.w	r5, r8, #20
 800a788:	f100 0e14 	add.w	lr, r0, #20
 800a78c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a790:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a794:	f108 0210 	add.w	r2, r8, #16
 800a798:	46f2      	mov	sl, lr
 800a79a:	2100      	movs	r1, #0
 800a79c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7a4:	fa1f f883 	uxth.w	r8, r3
 800a7a8:	fa11 f18b 	uxtah	r1, r1, fp
 800a7ac:	0c1b      	lsrs	r3, r3, #16
 800a7ae:	eba1 0808 	sub.w	r8, r1, r8
 800a7b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7ba:	fa1f f888 	uxth.w	r8, r8
 800a7be:	1419      	asrs	r1, r3, #16
 800a7c0:	454e      	cmp	r6, r9
 800a7c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7c6:	f84a 3b04 	str.w	r3, [sl], #4
 800a7ca:	d8e7      	bhi.n	800a79c <__mdiff+0x80>
 800a7cc:	1b33      	subs	r3, r6, r4
 800a7ce:	3b15      	subs	r3, #21
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	3415      	adds	r4, #21
 800a7d8:	42a6      	cmp	r6, r4
 800a7da:	bf38      	it	cc
 800a7dc:	2304      	movcc	r3, #4
 800a7de:	441d      	add	r5, r3
 800a7e0:	4473      	add	r3, lr
 800a7e2:	469e      	mov	lr, r3
 800a7e4:	462e      	mov	r6, r5
 800a7e6:	4566      	cmp	r6, ip
 800a7e8:	d30e      	bcc.n	800a808 <__mdiff+0xec>
 800a7ea:	f10c 0203 	add.w	r2, ip, #3
 800a7ee:	1b52      	subs	r2, r2, r5
 800a7f0:	f022 0203 	bic.w	r2, r2, #3
 800a7f4:	3d03      	subs	r5, #3
 800a7f6:	45ac      	cmp	ip, r5
 800a7f8:	bf38      	it	cc
 800a7fa:	2200      	movcc	r2, #0
 800a7fc:	441a      	add	r2, r3
 800a7fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a802:	b17b      	cbz	r3, 800a824 <__mdiff+0x108>
 800a804:	6107      	str	r7, [r0, #16]
 800a806:	e7a3      	b.n	800a750 <__mdiff+0x34>
 800a808:	f856 8b04 	ldr.w	r8, [r6], #4
 800a80c:	fa11 f288 	uxtah	r2, r1, r8
 800a810:	1414      	asrs	r4, r2, #16
 800a812:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a816:	b292      	uxth	r2, r2
 800a818:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a81c:	f84e 2b04 	str.w	r2, [lr], #4
 800a820:	1421      	asrs	r1, r4, #16
 800a822:	e7e0      	b.n	800a7e6 <__mdiff+0xca>
 800a824:	3f01      	subs	r7, #1
 800a826:	e7ea      	b.n	800a7fe <__mdiff+0xe2>
 800a828:	0800aff3 	.word	0x0800aff3
 800a82c:	0800b004 	.word	0x0800b004

0800a830 <__d2b>:
 800a830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a834:	4689      	mov	r9, r1
 800a836:	2101      	movs	r1, #1
 800a838:	ec57 6b10 	vmov	r6, r7, d0
 800a83c:	4690      	mov	r8, r2
 800a83e:	f7ff fccf 	bl	800a1e0 <_Balloc>
 800a842:	4604      	mov	r4, r0
 800a844:	b930      	cbnz	r0, 800a854 <__d2b+0x24>
 800a846:	4602      	mov	r2, r0
 800a848:	4b25      	ldr	r3, [pc, #148]	; (800a8e0 <__d2b+0xb0>)
 800a84a:	4826      	ldr	r0, [pc, #152]	; (800a8e4 <__d2b+0xb4>)
 800a84c:	f240 310a 	movw	r1, #778	; 0x30a
 800a850:	f000 fa18 	bl	800ac84 <__assert_func>
 800a854:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a85c:	bb35      	cbnz	r5, 800a8ac <__d2b+0x7c>
 800a85e:	2e00      	cmp	r6, #0
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	d028      	beq.n	800a8b6 <__d2b+0x86>
 800a864:	4668      	mov	r0, sp
 800a866:	9600      	str	r6, [sp, #0]
 800a868:	f7ff fd82 	bl	800a370 <__lo0bits>
 800a86c:	9900      	ldr	r1, [sp, #0]
 800a86e:	b300      	cbz	r0, 800a8b2 <__d2b+0x82>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	f1c0 0320 	rsb	r3, r0, #32
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	430b      	orrs	r3, r1
 800a87c:	40c2      	lsrs	r2, r0
 800a87e:	6163      	str	r3, [r4, #20]
 800a880:	9201      	str	r2, [sp, #4]
 800a882:	9b01      	ldr	r3, [sp, #4]
 800a884:	61a3      	str	r3, [r4, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bf14      	ite	ne
 800a88a:	2202      	movne	r2, #2
 800a88c:	2201      	moveq	r2, #1
 800a88e:	6122      	str	r2, [r4, #16]
 800a890:	b1d5      	cbz	r5, 800a8c8 <__d2b+0x98>
 800a892:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a896:	4405      	add	r5, r0
 800a898:	f8c9 5000 	str.w	r5, [r9]
 800a89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8a0:	f8c8 0000 	str.w	r0, [r8]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8b0:	e7d5      	b.n	800a85e <__d2b+0x2e>
 800a8b2:	6161      	str	r1, [r4, #20]
 800a8b4:	e7e5      	b.n	800a882 <__d2b+0x52>
 800a8b6:	a801      	add	r0, sp, #4
 800a8b8:	f7ff fd5a 	bl	800a370 <__lo0bits>
 800a8bc:	9b01      	ldr	r3, [sp, #4]
 800a8be:	6163      	str	r3, [r4, #20]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	6122      	str	r2, [r4, #16]
 800a8c4:	3020      	adds	r0, #32
 800a8c6:	e7e3      	b.n	800a890 <__d2b+0x60>
 800a8c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8d0:	f8c9 0000 	str.w	r0, [r9]
 800a8d4:	6918      	ldr	r0, [r3, #16]
 800a8d6:	f7ff fd2b 	bl	800a330 <__hi0bits>
 800a8da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8de:	e7df      	b.n	800a8a0 <__d2b+0x70>
 800a8e0:	0800aff3 	.word	0x0800aff3
 800a8e4:	0800b004 	.word	0x0800b004

0800a8e8 <_calloc_r>:
 800a8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ea:	fba1 2402 	umull	r2, r4, r1, r2
 800a8ee:	b94c      	cbnz	r4, 800a904 <_calloc_r+0x1c>
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	f7fd fe44 	bl	8008580 <_malloc_r>
 800a8f8:	9a01      	ldr	r2, [sp, #4]
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	b930      	cbnz	r0, 800a90c <_calloc_r+0x24>
 800a8fe:	4628      	mov	r0, r5
 800a900:	b003      	add	sp, #12
 800a902:	bd30      	pop	{r4, r5, pc}
 800a904:	220c      	movs	r2, #12
 800a906:	6002      	str	r2, [r0, #0]
 800a908:	2500      	movs	r5, #0
 800a90a:	e7f8      	b.n	800a8fe <_calloc_r+0x16>
 800a90c:	4621      	mov	r1, r4
 800a90e:	f7fd fe0e 	bl	800852e <memset>
 800a912:	e7f4      	b.n	800a8fe <_calloc_r+0x16>

0800a914 <_free_r>:
 800a914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a916:	2900      	cmp	r1, #0
 800a918:	d044      	beq.n	800a9a4 <_free_r+0x90>
 800a91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91e:	9001      	str	r0, [sp, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f1a1 0404 	sub.w	r4, r1, #4
 800a926:	bfb8      	it	lt
 800a928:	18e4      	addlt	r4, r4, r3
 800a92a:	f7ff fc4d 	bl	800a1c8 <__malloc_lock>
 800a92e:	4a1e      	ldr	r2, [pc, #120]	; (800a9a8 <_free_r+0x94>)
 800a930:	9801      	ldr	r0, [sp, #4]
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	b933      	cbnz	r3, 800a944 <_free_r+0x30>
 800a936:	6063      	str	r3, [r4, #4]
 800a938:	6014      	str	r4, [r2, #0]
 800a93a:	b003      	add	sp, #12
 800a93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a940:	f7ff bc48 	b.w	800a1d4 <__malloc_unlock>
 800a944:	42a3      	cmp	r3, r4
 800a946:	d908      	bls.n	800a95a <_free_r+0x46>
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	1961      	adds	r1, r4, r5
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf01      	itttt	eq
 800a950:	6819      	ldreq	r1, [r3, #0]
 800a952:	685b      	ldreq	r3, [r3, #4]
 800a954:	1949      	addeq	r1, r1, r5
 800a956:	6021      	streq	r1, [r4, #0]
 800a958:	e7ed      	b.n	800a936 <_free_r+0x22>
 800a95a:	461a      	mov	r2, r3
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	b10b      	cbz	r3, 800a964 <_free_r+0x50>
 800a960:	42a3      	cmp	r3, r4
 800a962:	d9fa      	bls.n	800a95a <_free_r+0x46>
 800a964:	6811      	ldr	r1, [r2, #0]
 800a966:	1855      	adds	r5, r2, r1
 800a968:	42a5      	cmp	r5, r4
 800a96a:	d10b      	bne.n	800a984 <_free_r+0x70>
 800a96c:	6824      	ldr	r4, [r4, #0]
 800a96e:	4421      	add	r1, r4
 800a970:	1854      	adds	r4, r2, r1
 800a972:	42a3      	cmp	r3, r4
 800a974:	6011      	str	r1, [r2, #0]
 800a976:	d1e0      	bne.n	800a93a <_free_r+0x26>
 800a978:	681c      	ldr	r4, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	6053      	str	r3, [r2, #4]
 800a97e:	4421      	add	r1, r4
 800a980:	6011      	str	r1, [r2, #0]
 800a982:	e7da      	b.n	800a93a <_free_r+0x26>
 800a984:	d902      	bls.n	800a98c <_free_r+0x78>
 800a986:	230c      	movs	r3, #12
 800a988:	6003      	str	r3, [r0, #0]
 800a98a:	e7d6      	b.n	800a93a <_free_r+0x26>
 800a98c:	6825      	ldr	r5, [r4, #0]
 800a98e:	1961      	adds	r1, r4, r5
 800a990:	428b      	cmp	r3, r1
 800a992:	bf04      	itt	eq
 800a994:	6819      	ldreq	r1, [r3, #0]
 800a996:	685b      	ldreq	r3, [r3, #4]
 800a998:	6063      	str	r3, [r4, #4]
 800a99a:	bf04      	itt	eq
 800a99c:	1949      	addeq	r1, r1, r5
 800a99e:	6021      	streq	r1, [r4, #0]
 800a9a0:	6054      	str	r4, [r2, #4]
 800a9a2:	e7ca      	b.n	800a93a <_free_r+0x26>
 800a9a4:	b003      	add	sp, #12
 800a9a6:	bd30      	pop	{r4, r5, pc}
 800a9a8:	240053d8 	.word	0x240053d8

0800a9ac <__sfputc_r>:
 800a9ac:	6893      	ldr	r3, [r2, #8]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	b410      	push	{r4}
 800a9b4:	6093      	str	r3, [r2, #8]
 800a9b6:	da08      	bge.n	800a9ca <__sfputc_r+0x1e>
 800a9b8:	6994      	ldr	r4, [r2, #24]
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	db01      	blt.n	800a9c2 <__sfputc_r+0x16>
 800a9be:	290a      	cmp	r1, #10
 800a9c0:	d103      	bne.n	800a9ca <__sfputc_r+0x1e>
 800a9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9c6:	f7fe bbdd 	b.w	8009184 <__swbuf_r>
 800a9ca:	6813      	ldr	r3, [r2, #0]
 800a9cc:	1c58      	adds	r0, r3, #1
 800a9ce:	6010      	str	r0, [r2, #0]
 800a9d0:	7019      	strb	r1, [r3, #0]
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <__sfputs_r>:
 800a9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	18d5      	adds	r5, r2, r3
 800a9e4:	42ac      	cmp	r4, r5
 800a9e6:	d101      	bne.n	800a9ec <__sfputs_r+0x12>
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e007      	b.n	800a9fc <__sfputs_r+0x22>
 800a9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f0:	463a      	mov	r2, r7
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff ffda 	bl	800a9ac <__sfputc_r>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d1f3      	bne.n	800a9e4 <__sfputs_r+0xa>
 800a9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa00 <_vfiprintf_r>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	460d      	mov	r5, r1
 800aa06:	b09d      	sub	sp, #116	; 0x74
 800aa08:	4614      	mov	r4, r2
 800aa0a:	4698      	mov	r8, r3
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	b118      	cbz	r0, 800aa18 <_vfiprintf_r+0x18>
 800aa10:	6983      	ldr	r3, [r0, #24]
 800aa12:	b90b      	cbnz	r3, 800aa18 <_vfiprintf_r+0x18>
 800aa14:	f7fd fcb8 	bl	8008388 <__sinit>
 800aa18:	4b89      	ldr	r3, [pc, #548]	; (800ac40 <_vfiprintf_r+0x240>)
 800aa1a:	429d      	cmp	r5, r3
 800aa1c:	d11b      	bne.n	800aa56 <_vfiprintf_r+0x56>
 800aa1e:	6875      	ldr	r5, [r6, #4]
 800aa20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa22:	07d9      	lsls	r1, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_vfiprintf_r+0x32>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	059a      	lsls	r2, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_vfiprintf_r+0x32>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2e:	f7fd fd6e 	bl	800850e <__retarget_lock_acquire_recursive>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	071b      	lsls	r3, r3, #28
 800aa36:	d501      	bpl.n	800aa3c <_vfiprintf_r+0x3c>
 800aa38:	692b      	ldr	r3, [r5, #16]
 800aa3a:	b9eb      	cbnz	r3, 800aa78 <_vfiprintf_r+0x78>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7fe fc04 	bl	800924c <__swsetup_r>
 800aa44:	b1c0      	cbz	r0, 800aa78 <_vfiprintf_r+0x78>
 800aa46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa48:	07dc      	lsls	r4, r3, #31
 800aa4a:	d50e      	bpl.n	800aa6a <_vfiprintf_r+0x6a>
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	b01d      	add	sp, #116	; 0x74
 800aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa56:	4b7b      	ldr	r3, [pc, #492]	; (800ac44 <_vfiprintf_r+0x244>)
 800aa58:	429d      	cmp	r5, r3
 800aa5a:	d101      	bne.n	800aa60 <_vfiprintf_r+0x60>
 800aa5c:	68b5      	ldr	r5, [r6, #8]
 800aa5e:	e7df      	b.n	800aa20 <_vfiprintf_r+0x20>
 800aa60:	4b79      	ldr	r3, [pc, #484]	; (800ac48 <_vfiprintf_r+0x248>)
 800aa62:	429d      	cmp	r5, r3
 800aa64:	bf08      	it	eq
 800aa66:	68f5      	ldreq	r5, [r6, #12]
 800aa68:	e7da      	b.n	800aa20 <_vfiprintf_r+0x20>
 800aa6a:	89ab      	ldrh	r3, [r5, #12]
 800aa6c:	0598      	lsls	r0, r3, #22
 800aa6e:	d4ed      	bmi.n	800aa4c <_vfiprintf_r+0x4c>
 800aa70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa72:	f7fd fd4d 	bl	8008510 <__retarget_lock_release_recursive>
 800aa76:	e7e9      	b.n	800aa4c <_vfiprintf_r+0x4c>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa82:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa86:	2330      	movs	r3, #48	; 0x30
 800aa88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac4c <_vfiprintf_r+0x24c>
 800aa8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa90:	f04f 0901 	mov.w	r9, #1
 800aa94:	4623      	mov	r3, r4
 800aa96:	469a      	mov	sl, r3
 800aa98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9c:	b10a      	cbz	r2, 800aaa2 <_vfiprintf_r+0xa2>
 800aa9e:	2a25      	cmp	r2, #37	; 0x25
 800aaa0:	d1f9      	bne.n	800aa96 <_vfiprintf_r+0x96>
 800aaa2:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa6:	d00b      	beq.n	800aac0 <_vfiprintf_r+0xc0>
 800aaa8:	465b      	mov	r3, fp
 800aaaa:	4622      	mov	r2, r4
 800aaac:	4629      	mov	r1, r5
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff ff93 	bl	800a9da <__sfputs_r>
 800aab4:	3001      	adds	r0, #1
 800aab6:	f000 80aa 	beq.w	800ac0e <_vfiprintf_r+0x20e>
 800aaba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aabc:	445a      	add	r2, fp
 800aabe:	9209      	str	r2, [sp, #36]	; 0x24
 800aac0:	f89a 3000 	ldrb.w	r3, [sl]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 80a2 	beq.w	800ac0e <_vfiprintf_r+0x20e>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad4:	f10a 0a01 	add.w	sl, sl, #1
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aae0:	931a      	str	r3, [sp, #104]	; 0x68
 800aae2:	4654      	mov	r4, sl
 800aae4:	2205      	movs	r2, #5
 800aae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaea:	4858      	ldr	r0, [pc, #352]	; (800ac4c <_vfiprintf_r+0x24c>)
 800aaec:	f7f5 fc00 	bl	80002f0 <memchr>
 800aaf0:	9a04      	ldr	r2, [sp, #16]
 800aaf2:	b9d8      	cbnz	r0, 800ab2c <_vfiprintf_r+0x12c>
 800aaf4:	06d1      	lsls	r1, r2, #27
 800aaf6:	bf44      	itt	mi
 800aaf8:	2320      	movmi	r3, #32
 800aafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafe:	0713      	lsls	r3, r2, #28
 800ab00:	bf44      	itt	mi
 800ab02:	232b      	movmi	r3, #43	; 0x2b
 800ab04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab08:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0e:	d015      	beq.n	800ab3c <_vfiprintf_r+0x13c>
 800ab10:	9a07      	ldr	r2, [sp, #28]
 800ab12:	4654      	mov	r4, sl
 800ab14:	2000      	movs	r0, #0
 800ab16:	f04f 0c0a 	mov.w	ip, #10
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab20:	3b30      	subs	r3, #48	; 0x30
 800ab22:	2b09      	cmp	r3, #9
 800ab24:	d94e      	bls.n	800abc4 <_vfiprintf_r+0x1c4>
 800ab26:	b1b0      	cbz	r0, 800ab56 <_vfiprintf_r+0x156>
 800ab28:	9207      	str	r2, [sp, #28]
 800ab2a:	e014      	b.n	800ab56 <_vfiprintf_r+0x156>
 800ab2c:	eba0 0308 	sub.w	r3, r0, r8
 800ab30:	fa09 f303 	lsl.w	r3, r9, r3
 800ab34:	4313      	orrs	r3, r2
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	46a2      	mov	sl, r4
 800ab3a:	e7d2      	b.n	800aae2 <_vfiprintf_r+0xe2>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	1d19      	adds	r1, r3, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	9103      	str	r1, [sp, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfbb      	ittet	lt
 800ab48:	425b      	neglt	r3, r3
 800ab4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4e:	9307      	strge	r3, [sp, #28]
 800ab50:	9307      	strlt	r3, [sp, #28]
 800ab52:	bfb8      	it	lt
 800ab54:	9204      	strlt	r2, [sp, #16]
 800ab56:	7823      	ldrb	r3, [r4, #0]
 800ab58:	2b2e      	cmp	r3, #46	; 0x2e
 800ab5a:	d10c      	bne.n	800ab76 <_vfiprintf_r+0x176>
 800ab5c:	7863      	ldrb	r3, [r4, #1]
 800ab5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab60:	d135      	bne.n	800abce <_vfiprintf_r+0x1ce>
 800ab62:	9b03      	ldr	r3, [sp, #12]
 800ab64:	1d1a      	adds	r2, r3, #4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	9203      	str	r2, [sp, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bfb8      	it	lt
 800ab6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab72:	3402      	adds	r4, #2
 800ab74:	9305      	str	r3, [sp, #20]
 800ab76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac5c <_vfiprintf_r+0x25c>
 800ab7a:	7821      	ldrb	r1, [r4, #0]
 800ab7c:	2203      	movs	r2, #3
 800ab7e:	4650      	mov	r0, sl
 800ab80:	f7f5 fbb6 	bl	80002f0 <memchr>
 800ab84:	b140      	cbz	r0, 800ab98 <_vfiprintf_r+0x198>
 800ab86:	2340      	movs	r3, #64	; 0x40
 800ab88:	eba0 000a 	sub.w	r0, r0, sl
 800ab8c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab90:	9b04      	ldr	r3, [sp, #16]
 800ab92:	4303      	orrs	r3, r0
 800ab94:	3401      	adds	r4, #1
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9c:	482c      	ldr	r0, [pc, #176]	; (800ac50 <_vfiprintf_r+0x250>)
 800ab9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba2:	2206      	movs	r2, #6
 800aba4:	f7f5 fba4 	bl	80002f0 <memchr>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d03f      	beq.n	800ac2c <_vfiprintf_r+0x22c>
 800abac:	4b29      	ldr	r3, [pc, #164]	; (800ac54 <_vfiprintf_r+0x254>)
 800abae:	bb1b      	cbnz	r3, 800abf8 <_vfiprintf_r+0x1f8>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	3307      	adds	r3, #7
 800abb4:	f023 0307 	bic.w	r3, r3, #7
 800abb8:	3308      	adds	r3, #8
 800abba:	9303      	str	r3, [sp, #12]
 800abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbe:	443b      	add	r3, r7
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
 800abc2:	e767      	b.n	800aa94 <_vfiprintf_r+0x94>
 800abc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc8:	460c      	mov	r4, r1
 800abca:	2001      	movs	r0, #1
 800abcc:	e7a5      	b.n	800ab1a <_vfiprintf_r+0x11a>
 800abce:	2300      	movs	r3, #0
 800abd0:	3401      	adds	r4, #1
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f04f 0c0a 	mov.w	ip, #10
 800abda:	4620      	mov	r0, r4
 800abdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe0:	3a30      	subs	r2, #48	; 0x30
 800abe2:	2a09      	cmp	r2, #9
 800abe4:	d903      	bls.n	800abee <_vfiprintf_r+0x1ee>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c5      	beq.n	800ab76 <_vfiprintf_r+0x176>
 800abea:	9105      	str	r1, [sp, #20]
 800abec:	e7c3      	b.n	800ab76 <_vfiprintf_r+0x176>
 800abee:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf2:	4604      	mov	r4, r0
 800abf4:	2301      	movs	r3, #1
 800abf6:	e7f0      	b.n	800abda <_vfiprintf_r+0x1da>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	462a      	mov	r2, r5
 800abfe:	4b16      	ldr	r3, [pc, #88]	; (800ac58 <_vfiprintf_r+0x258>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7fd fdc0 	bl	8008788 <_printf_float>
 800ac08:	4607      	mov	r7, r0
 800ac0a:	1c78      	adds	r0, r7, #1
 800ac0c:	d1d6      	bne.n	800abbc <_vfiprintf_r+0x1bc>
 800ac0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac10:	07d9      	lsls	r1, r3, #31
 800ac12:	d405      	bmi.n	800ac20 <_vfiprintf_r+0x220>
 800ac14:	89ab      	ldrh	r3, [r5, #12]
 800ac16:	059a      	lsls	r2, r3, #22
 800ac18:	d402      	bmi.n	800ac20 <_vfiprintf_r+0x220>
 800ac1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac1c:	f7fd fc78 	bl	8008510 <__retarget_lock_release_recursive>
 800ac20:	89ab      	ldrh	r3, [r5, #12]
 800ac22:	065b      	lsls	r3, r3, #25
 800ac24:	f53f af12 	bmi.w	800aa4c <_vfiprintf_r+0x4c>
 800ac28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac2a:	e711      	b.n	800aa50 <_vfiprintf_r+0x50>
 800ac2c:	ab03      	add	r3, sp, #12
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	462a      	mov	r2, r5
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <_vfiprintf_r+0x258>)
 800ac34:	a904      	add	r1, sp, #16
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7fe f832 	bl	8008ca0 <_printf_i>
 800ac3c:	e7e4      	b.n	800ac08 <_vfiprintf_r+0x208>
 800ac3e:	bf00      	nop
 800ac40:	0800aefc 	.word	0x0800aefc
 800ac44:	0800af1c 	.word	0x0800af1c
 800ac48:	0800aedc 	.word	0x0800aedc
 800ac4c:	0800b15c 	.word	0x0800b15c
 800ac50:	0800b166 	.word	0x0800b166
 800ac54:	08008789 	.word	0x08008789
 800ac58:	0800a9db 	.word	0x0800a9db
 800ac5c:	0800b162 	.word	0x0800b162

0800ac60 <_read_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_read_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f6 f9b4 	bl	8000fdc <_read>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_read_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_read_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	240053e0 	.word	0x240053e0

0800ac84 <__assert_func>:
 800ac84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac86:	4614      	mov	r4, r2
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <__assert_func+0x2c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4605      	mov	r5, r0
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	b14c      	cbz	r4, 800aca8 <__assert_func+0x24>
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <__assert_func+0x30>)
 800ac96:	9100      	str	r1, [sp, #0]
 800ac98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac9c:	4906      	ldr	r1, [pc, #24]	; (800acb8 <__assert_func+0x34>)
 800ac9e:	462b      	mov	r3, r5
 800aca0:	f000 f80e 	bl	800acc0 <fiprintf>
 800aca4:	f000 f85f 	bl	800ad66 <abort>
 800aca8:	4b04      	ldr	r3, [pc, #16]	; (800acbc <__assert_func+0x38>)
 800acaa:	461c      	mov	r4, r3
 800acac:	e7f3      	b.n	800ac96 <__assert_func+0x12>
 800acae:	bf00      	nop
 800acb0:	24000014 	.word	0x24000014
 800acb4:	0800b16d 	.word	0x0800b16d
 800acb8:	0800b17a 	.word	0x0800b17a
 800acbc:	0800b1a8 	.word	0x0800b1a8

0800acc0 <fiprintf>:
 800acc0:	b40e      	push	{r1, r2, r3}
 800acc2:	b503      	push	{r0, r1, lr}
 800acc4:	4601      	mov	r1, r0
 800acc6:	ab03      	add	r3, sp, #12
 800acc8:	4805      	ldr	r0, [pc, #20]	; (800ace0 <fiprintf+0x20>)
 800acca:	f853 2b04 	ldr.w	r2, [r3], #4
 800acce:	6800      	ldr	r0, [r0, #0]
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	f7ff fe95 	bl	800aa00 <_vfiprintf_r>
 800acd6:	b002      	add	sp, #8
 800acd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acdc:	b003      	add	sp, #12
 800acde:	4770      	bx	lr
 800ace0:	24000014 	.word	0x24000014

0800ace4 <_fstat_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	; (800ad04 <_fstat_r+0x20>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	4611      	mov	r1, r2
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	f7f6 f9b8 	bl	8001066 <_fstat>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	d102      	bne.n	800ad00 <_fstat_r+0x1c>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	b103      	cbz	r3, 800ad00 <_fstat_r+0x1c>
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	240053e0 	.word	0x240053e0

0800ad08 <_isatty_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d06      	ldr	r5, [pc, #24]	; (800ad24 <_isatty_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f6 f9b7 	bl	8001086 <_isatty>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_isatty_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_isatty_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	240053e0 	.word	0x240053e0

0800ad28 <__ascii_mbtowc>:
 800ad28:	b082      	sub	sp, #8
 800ad2a:	b901      	cbnz	r1, 800ad2e <__ascii_mbtowc+0x6>
 800ad2c:	a901      	add	r1, sp, #4
 800ad2e:	b142      	cbz	r2, 800ad42 <__ascii_mbtowc+0x1a>
 800ad30:	b14b      	cbz	r3, 800ad46 <__ascii_mbtowc+0x1e>
 800ad32:	7813      	ldrb	r3, [r2, #0]
 800ad34:	600b      	str	r3, [r1, #0]
 800ad36:	7812      	ldrb	r2, [r2, #0]
 800ad38:	1e10      	subs	r0, r2, #0
 800ad3a:	bf18      	it	ne
 800ad3c:	2001      	movne	r0, #1
 800ad3e:	b002      	add	sp, #8
 800ad40:	4770      	bx	lr
 800ad42:	4610      	mov	r0, r2
 800ad44:	e7fb      	b.n	800ad3e <__ascii_mbtowc+0x16>
 800ad46:	f06f 0001 	mvn.w	r0, #1
 800ad4a:	e7f8      	b.n	800ad3e <__ascii_mbtowc+0x16>

0800ad4c <__ascii_wctomb>:
 800ad4c:	b149      	cbz	r1, 800ad62 <__ascii_wctomb+0x16>
 800ad4e:	2aff      	cmp	r2, #255	; 0xff
 800ad50:	bf85      	ittet	hi
 800ad52:	238a      	movhi	r3, #138	; 0x8a
 800ad54:	6003      	strhi	r3, [r0, #0]
 800ad56:	700a      	strbls	r2, [r1, #0]
 800ad58:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad5c:	bf98      	it	ls
 800ad5e:	2001      	movls	r0, #1
 800ad60:	4770      	bx	lr
 800ad62:	4608      	mov	r0, r1
 800ad64:	4770      	bx	lr

0800ad66 <abort>:
 800ad66:	b508      	push	{r3, lr}
 800ad68:	2006      	movs	r0, #6
 800ad6a:	f000 f82b 	bl	800adc4 <raise>
 800ad6e:	2001      	movs	r0, #1
 800ad70:	f7f6 f92a 	bl	8000fc8 <_exit>

0800ad74 <_raise_r>:
 800ad74:	291f      	cmp	r1, #31
 800ad76:	b538      	push	{r3, r4, r5, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	d904      	bls.n	800ad88 <_raise_r+0x14>
 800ad7e:	2316      	movs	r3, #22
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	f04f 30ff 	mov.w	r0, #4294967295
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad8a:	b112      	cbz	r2, 800ad92 <_raise_r+0x1e>
 800ad8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad90:	b94b      	cbnz	r3, 800ada6 <_raise_r+0x32>
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 f830 	bl	800adf8 <_getpid_r>
 800ad98:	462a      	mov	r2, r5
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ada2:	f000 b817 	b.w	800add4 <_kill_r>
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d00a      	beq.n	800adc0 <_raise_r+0x4c>
 800adaa:	1c59      	adds	r1, r3, #1
 800adac:	d103      	bne.n	800adb6 <_raise_r+0x42>
 800adae:	2316      	movs	r3, #22
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	2001      	movs	r0, #1
 800adb4:	e7e7      	b.n	800ad86 <_raise_r+0x12>
 800adb6:	2400      	movs	r4, #0
 800adb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adbc:	4628      	mov	r0, r5
 800adbe:	4798      	blx	r3
 800adc0:	2000      	movs	r0, #0
 800adc2:	e7e0      	b.n	800ad86 <_raise_r+0x12>

0800adc4 <raise>:
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <raise+0xc>)
 800adc6:	4601      	mov	r1, r0
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f7ff bfd3 	b.w	800ad74 <_raise_r>
 800adce:	bf00      	nop
 800add0:	24000014 	.word	0x24000014

0800add4 <_kill_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_kill_r+0x20>)
 800add8:	2300      	movs	r3, #0
 800adda:	4604      	mov	r4, r0
 800addc:	4608      	mov	r0, r1
 800adde:	4611      	mov	r1, r2
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	f7f6 f8e1 	bl	8000fa8 <_kill>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d102      	bne.n	800adf0 <_kill_r+0x1c>
 800adea:	682b      	ldr	r3, [r5, #0]
 800adec:	b103      	cbz	r3, 800adf0 <_kill_r+0x1c>
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	bd38      	pop	{r3, r4, r5, pc}
 800adf2:	bf00      	nop
 800adf4:	240053e0 	.word	0x240053e0

0800adf8 <_getpid_r>:
 800adf8:	f7f6 b8ce 	b.w	8000f98 <_getpid>

0800adfc <_init>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr

0800ae08 <_fini>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	bf00      	nop
 800ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0e:	bc08      	pop	{r3}
 800ae10:	469e      	mov	lr, r3
 800ae12:	4770      	bx	lr
