
stm32_h7_i2sFullDuplex_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b7c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e54  08005e54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  24000010  08005e6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000194  08005e6c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a20  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe3  00000000  00000000  00031a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00034690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038aaa  00000000  00000000  00035220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001020c  00000000  00000000  0006dcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178c08  00000000  00000000  0007ded6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f6ade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  001f6b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005dfc 	.word	0x08005dfc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005dfc 	.word	0x08005dfc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <main+0xac>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9c3 	bl	8000abc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb61 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f841 	bl	80007c0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0xac>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <main+0xac>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <main+0xac>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe99 	bl	8001494 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 feaf 	bl	80014c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <main+0xac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f995 	bl	8000abc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f911 	bl	80009b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f8c3 	bl	8000920 <MX_USART3_UART_Init>
  MX_I2S3_Init();
 800079a:	f000 f88b 	bl	80008b4 <MX_I2S3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_I2SEx_TransmitReceive(&hi2s3, txbuff, txbuff, 1, HAL_MAX_DELAY);
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <main+0xb0>)
 80007a8:	4903      	ldr	r1, [pc, #12]	; (80007b8 <main+0xb0>)
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <main+0xb4>)
 80007ac:	f000 ffc0 	bl	8001730 <HAL_I2SEx_TransmitReceive>
 80007b0:	e7f5      	b.n	800079e <main+0x96>
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400
 80007b8:	24000110 	.word	0x24000110
 80007bc:	2400002c 	.word	0x2400002c

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	; 0x70
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	224c      	movs	r2, #76	; 0x4c
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fb0c 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2220      	movs	r2, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 fb06 	bl	8005dec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e0:	2004      	movs	r0, #4
 80007e2:	f001 f8cf 	bl	8001984 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <SystemClock_Config+0xec>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <SystemClock_Config+0xec>)
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <SystemClock_Config+0xec>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <SystemClock_Config+0xf0>)
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <SystemClock_Config+0xf0>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <SystemClock_Config+0xf0>)
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000818:	bf00      	nop
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <SystemClock_Config+0xec>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000826:	d1f8      	bne.n	800081a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800083e:	2378      	movs	r3, #120	; 0x78
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000846:	230a      	movs	r3, #10
 8000848:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084e:	230c      	movs	r3, #12
 8000850:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f8ea 	bl	8001a38 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086a:	f000 f927 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087a:	2308      	movs	r3, #8
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fcfd 	bl	8002294 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a0:	f000 f90c 	bl	8000abc <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58000400 	.word	0x58000400

080008b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_I2S3_Init+0x60>)
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <MX_I2S3_Init+0x64>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2S3_Init+0x60>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_I2S3_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2S3_Init+0x60>)
 80008cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_I2S3_Init+0x60>)
 80008d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_I2S3_Init+0x60>)
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <MX_I2S3_Init+0x68>)
 80008de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_I2S3_Init+0x60>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_I2S3_Init+0x60>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_I2S3_Init+0x60>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_I2S3_Init+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_I2S3_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2S3_Init+0x60>)
 8000900:	f000 fdf6 	bl	80014f0 <HAL_I2S_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2S3_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 f8d7 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2400002c 	.word	0x2400002c
 8000918:	40003c00 	.word	0x40003c00
 800091c:	00017700 	.word	0x00017700

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_USART3_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800096a:	f004 f9ab 	bl	8004cc4 <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f8a2 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800097c:	f005 f948 	bl	8005c10 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 f899 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 f97d 	bl	8005c8c <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f890 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 f8fe 	bl	8005b9e <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f888 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000080 	.word	0x24000080
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xfc>)
 8000a6c:	f000 fcf8 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0x100>)
 8000a86:	f000 fb3b 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000a8a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xfc>)
 8000aa4:	f000 fb2c 	bl	8001100 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58020400 	.word	0x58020400
 8000ab8:	58020800 	.word	0x58020800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x30>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x30>)
 8000ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0ba      	sub	sp, #232	; 0xe8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	22bc      	movs	r2, #188	; 0xbc
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f005 f965 	bl	8005dec <memset>
  if(hi2s->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a53      	ldr	r2, [pc, #332]	; (8000c74 <HAL_I2S_MspInit+0x178>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f040 809f 	bne.w	8000c6c <HAL_I2S_MspInit+0x170>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 ff35 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b48:	f7ff ffb8 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b52:	4a49      	ldr	r2, [pc, #292]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b5c:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a41      	ldr	r2, [pc, #260]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_I2S_MspInit+0x17c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PB3 (JTDO/TRACESWO)     ------> I2S3_CK
    PB4 (NJTRST)     ------> I2S3_SDI
    PB5     ------> I2S3_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4824      	ldr	r0, [pc, #144]	; (8000c7c <HAL_I2S_MspInit+0x180>)
 8000bea:	f000 fa89 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c10:	4619      	mov	r1, r3
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <HAL_I2S_MspInit+0x184>)
 8000c14:	f000 fa74 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c18:	2318      	movs	r3, #24
 8000c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c30:	2306      	movs	r3, #6
 8000c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <HAL_I2S_MspInit+0x188>)
 8000c3e:	f000 fa5f 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c42:	2320      	movs	r3, #32
 8000c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <HAL_I2S_MspInit+0x188>)
 8000c68:	f000 fa4a 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37e8      	adds	r7, #232	; 0xe8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020800 	.word	0x58020800
 8000c84:	58020400 	.word	0x58020400

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0b8      	sub	sp, #224	; 0xe0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	22bc      	movs	r2, #188	; 0xbc
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 f89f 	bl	8005dec <memset>
  if(huart->Instance==USART3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <HAL_UART_MspInit+0xc0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d142      	bne.n	8000d3e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fe70 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd2:	f7ff fef3 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0xc8>)
 8000d3a:	f000 f9e1 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	37e0      	adds	r7, #224	; 0xe0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020c00 	.word	0x58020c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f89e 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dac:	f7ff fc16 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 ffe5 	bl	8005da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fc95 	bl	8000708 <main>
  bx  lr
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000de4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dec:	08005e5c 	.word	0x08005e5c
  ldr r2, =_sbss
 8000df0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000df4:	24000194 	.word	0x24000194

08000df8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC3_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f94a 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e08:	f001 fbfa 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_Init+0x68>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	f003 030f 	and.w	r3, r3, #15
 8000e18:	4913      	ldr	r1, [pc, #76]	; (8000e68 <HAL_Init+0x6c>)
 8000e1a:	5ccb      	ldrb	r3, [r1, r3]
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_Init+0x68>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_Init+0x6c>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x70>)
 8000e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_Init+0x74>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f814 	bl	8000e74 <HAL_InitTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e002      	b.n	8000e5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fe37 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	58024400 	.word	0x58024400
 8000e68:	08005e14 	.word	0x08005e14
 8000e6c:	24000004 	.word	0x24000004
 8000e70:	24000000 	.word	0x24000000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_InitTick+0x60>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e021      	b.n	8000ecc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_InitTick+0x64>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_InitTick+0x60>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f921 	bl	80010e6 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f8f9 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x68>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2400000c 	.word	0x2400000c
 8000ed8:	24000000 	.word	0x24000000
 8000edc:	24000008 	.word	0x24000008

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2400000c 	.word	0x2400000c
 8000f04:	24000190 	.word	0x24000190

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	24000190 	.word	0x24000190

08000f20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetREVID+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	0c1b      	lsrs	r3, r3, #16
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	5c001000 	.word	0x5c001000

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <__NVIC_SetPriorityGrouping+0x40>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x40>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	05fa0000 	.word	0x05fa0000

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff47 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb2 	bl	8001058 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_GPIO_Init+0x234>)
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001112:	e194      	b.n	800143e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8186 	beq.w	8001438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x44>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	69b9      	ldr	r1, [r7, #24]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80e0 	beq.w	8001438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x238>)
 800127a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127e:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <HAL_GPIO_Init+0x238>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_GPIO_Init+0x238>)
 800128a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_GPIO_Init+0x23c>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <HAL_GPIO_Init+0x240>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d052      	beq.n	8001368 <HAL_GPIO_Init+0x268>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x244>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d031      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x22a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_GPIO_Init+0x24c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_GPIO_Init+0x250>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x254>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <HAL_GPIO_Init+0x258>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_GPIO_Init+0x25c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x260>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_GPIO_Init+0x264>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20e>
 800130a:	2309      	movs	r3, #9
 800130c:	e02d      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800130e:	230a      	movs	r3, #10
 8001310:	e02b      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001312:	2308      	movs	r3, #8
 8001314:	e029      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001316:	2307      	movs	r3, #7
 8001318:	e027      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800131a:	2306      	movs	r3, #6
 800131c:	e025      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800131e:	2305      	movs	r3, #5
 8001320:	e023      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001322:	2304      	movs	r3, #4
 8001324:	e021      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001326:	2303      	movs	r3, #3
 8001328:	e01f      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800132a:	2302      	movs	r3, #2
 800132c:	e01d      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800132e:	2301      	movs	r3, #1
 8001330:	e01b      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001332:	bf00      	nop
 8001334:	58000080 	.word	0x58000080
 8001338:	58024400 	.word	0x58024400
 800133c:	58000400 	.word	0x58000400
 8001340:	58020000 	.word	0x58020000
 8001344:	58020400 	.word	0x58020400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020c00 	.word	0x58020c00
 8001350:	58021000 	.word	0x58021000
 8001354:	58021400 	.word	0x58021400
 8001358:	58021800 	.word	0x58021800
 800135c:	58021c00 	.word	0x58021c00
 8001360:	58022000 	.word	0x58022000
 8001364:	58022400 	.word	0x58022400
 8001368:	2300      	movs	r3, #0
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137a:	4938      	ldr	r1, [pc, #224]	; (800145c <HAL_GPIO_Init+0x35c>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f ae63 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	; 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58000400 	.word	0x58000400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_HSEM_FastTake+0x2c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3320      	adds	r3, #32
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_HSEM_FastTake+0x30>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	58026400 	.word	0x58026400
 80014c4:	80000300 	.word	0x80000300

080014c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014d2:	4906      	ldr	r1, [pc, #24]	; (80014ec <HAL_HSEM_Release+0x24>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58026400 	.word	0x58026400

080014f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e10b      	b.n	800171a <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff faf0 	bl	8000afc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b04      	cmp	r3, #4
 8001550:	d008      	beq.n	8001564 <HAL_I2S_Init+0x74>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d004      	beq.n	8001564 <HAL_I2S_Init+0x74>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b0a      	cmp	r3, #10
 8001560:	f040 8085 	bne.w	800166e <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d058      	beq.n	800161e <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8001574:	2302      	movs	r3, #2
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e001      	b.n	800157e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b30      	cmp	r3, #48	; 0x30
 8001584:	d003      	beq.n	800158e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800158a:	2bb0      	cmp	r3, #176	; 0xb0
 800158c:	d102      	bne.n	8001594 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800158e:	2301      	movs	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e001      	b.n	8001598 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001598:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800159c:	f002 f94c 	bl	8003838 <HAL_RCCEx_GetPeriphCLKFreq>
 80015a0:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015aa:	d113      	bne.n	80015d4 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	3305      	adds	r3, #5
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	e014      	b.n	80015fe <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80015d4:	2220      	movs	r2, #32
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	461a      	mov	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	3305      	adds	r3, #5
 80015fc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4a48      	ldr	r2, [pc, #288]	; (8001724 <HAL_I2S_Init+0x234>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e003      	b.n	8001626 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_I2S_Init+0x142>
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d002      	beq.n	8001638 <HAL_I2S_Init+0x148>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d907      	bls.n	8001648 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163c:	f043 0210 	orr.w	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e068      	b.n	800171a <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_I2S_Init+0x238>)
 800165a:	4013      	ands	r3, r2
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	0411      	lsls	r1, r2, #16
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	0612      	lsls	r2, r2, #24
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	430b      	orrs	r3, r1
 800166c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_I2S_Init+0x23c>)
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6851      	ldr	r1, [r2, #4]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6892      	ldr	r2, [r2, #8]
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68d2      	ldr	r2, [r2, #12]
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6992      	ldr	r2, [r2, #24]
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6a12      	ldr	r2, [r2, #32]
 8001692:	4311      	orrs	r1, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6912      	ldr	r2, [r2, #16]
 800169e:	430a      	orrs	r2, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f640 72f8 	movw	r2, #4088	; 0xff8
 80016b4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016c4:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d007      	beq.n	80016f4 <HAL_I2S_Init+0x204>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d003      	beq.n	80016f4 <HAL_I2S_Init+0x204>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b0a      	cmp	r3, #10
 80016f2:	d10a      	bne.n	800170a <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	fe00ffff 	.word	0xfe00ffff
 800172c:	fdff9040 	.word	0xfdff9040

08001730 <HAL_I2SEx_TransmitReceive>:
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2SEx_TransmitReceive(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                            uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
  uint32_t tmp_RxXferCount;
  uint32_t tickstart;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3320      	adds	r3, #32
 8001744:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->RXDR));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3330      	adds	r3, #48	; 0x30
 800174c:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_I2SEx_TransmitReceive+0x30>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_I2SEx_TransmitReceive+0x30>
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_I2SEx_TransmitReceive+0x34>
  {
    return  HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e10a      	b.n	800197a <HAL_I2SEx_TransmitReceive+0x24a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d001      	beq.n	8001774 <HAL_I2SEx_TransmitReceive+0x44>
  {
    return HAL_BUSY;
 8001770:	2302      	movs	r3, #2
 8001772:	e102      	b.n	800197a <HAL_I2SEx_TransmitReceive+0x24a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_I2SEx_TransmitReceive+0x54>
 8001780:	2302      	movs	r3, #2
 8001782:	e0fa      	b.n	800197a <HAL_I2SEx_TransmitReceive+0x24a>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800178c:	f7ff fbbc 	bl	8000f08 <HAL_GetTick>
 8001790:	6178      	str	r0, [r7, #20]

  hi2s->TxXferSize  = Size;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->pTxBuffPtr  = pTxData;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferSize  = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  hi2s->pRxBuffPtr  = pRxData;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34

  tmp_TxXferCount = hi2s->TxXferCount;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_RxXferCount = hi2s->RxXferCount;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	623b      	str	r3, [r7, #32]

  /* Set state and reset error code */
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State = HAL_I2S_STATE_BUSY_TX_RX;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2205      	movs	r2, #5
 80017d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d007      	beq.n	80017f2 <HAL_I2SEx_TransmitReceive+0xc2>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001800:	601a      	str	r2, [r3, #0]

  while ((tmp_TxXferCount > 0UL) || (tmp_RxXferCount > 0UL))
 8001802:	e0a9      	b.n	8001958 <HAL_I2SEx_TransmitReceive+0x228>
  {
    if ((__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_TXP) == SET) && (tmp_TxXferCount != 0UL))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d13d      	bne.n	800188e <HAL_I2SEx_TransmitReceive+0x15e>
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	d03a      	beq.n	800188e <HAL_I2SEx_TransmitReceive+0x15e>
    {
      if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001820:	d004      	beq.n	800182c <HAL_I2SEx_TransmitReceive+0xfc>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182a:	d10e      	bne.n	800184a <HAL_I2SEx_TransmitReceive+0x11a>
      {
        /* Transmit data in 32 Bit mode */
        hi2s->Instance->TXDR = *((uint32_t *)hi2s->pTxBuffPtr);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	621a      	str	r2, [r3, #32]
        hi2s->pTxBuffPtr += 2;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	1d1a      	adds	r2, r3, #4
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
        tmp_TxXferCount--;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3b01      	subs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
 8001848:	e00c      	b.n	8001864 <HAL_I2SEx_TransmitReceive+0x134>
      }
      else
      {
        /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hi2s->pTxBuffPtr);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

        hi2s->pTxBuffPtr++;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	1c9a      	adds	r2, r3, #2
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
        tmp_TxXferCount--;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3b01      	subs	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
      }

      /* Check if an underrun occurs */
      if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b20      	cmp	r3, #32
 8001870:	d10d      	bne.n	800188e <HAL_I2SEx_TransmitReceive+0x15e>
      {
        /* Clear underrun flag */
        __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	619a      	str	r2, [r3, #24]

        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	f043 0204 	orr.w	r2, r3, #4
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }

    if ((__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_RXP) == SET) && (tmp_RxXferCount != 0UL))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d13e      	bne.n	800191a <HAL_I2SEx_TransmitReceive+0x1ea>
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03b      	beq.n	800191a <HAL_I2SEx_TransmitReceive+0x1ea>
    {
      if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018aa:	d004      	beq.n	80018b6 <HAL_I2SEx_TransmitReceive+0x186>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d10e      	bne.n	80018d4 <HAL_I2SEx_TransmitReceive+0x1a4>
      {
        /* Receive data in 32 Bit mode */
        *((uint32_t *)hi2s->pRxBuffPtr) = hi2s->Instance->RXDR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018c0:	601a      	str	r2, [r3, #0]
        hi2s->pRxBuffPtr += 2;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	1d1a      	adds	r2, r3, #4
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
        tmp_RxXferCount--;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	e00d      	b.n	80018f0 <HAL_I2SEx_TransmitReceive+0x1c0>
      }
      else
      {
        /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
        *((uint16_t *)hi2s->pRxBuffPtr) = *prxdr_16bits;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	b292      	uxth	r2, r2
 80018de:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hi2s->pRxBuffPtr) = *((__IO uint16_t *)&hi2s->Instance->RXDR);
#endif /* __GNUC__ */
        hi2s->pRxBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	1c9a      	adds	r2, r3, #2
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
        tmp_RxXferCount--;
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
      }

      /* Check if an overrun occurs */
      if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b40      	cmp	r3, #64	; 0x40
 80018fc:	d10d      	bne.n	800191a <HAL_I2SEx_TransmitReceive+0x1ea>
      {
        /* Clear overrun flag */
        __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190c:	619a      	str	r2, [r3, #24]

        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800191a:	f7ff faf5 	bl	8000f08 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001926:	429a      	cmp	r2, r3
 8001928:	d803      	bhi.n	8001932 <HAL_I2SEx_TransmitReceive+0x202>
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d102      	bne.n	8001938 <HAL_I2SEx_TransmitReceive+0x208>
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10f      	bne.n	8001958 <HAL_I2SEx_TransmitReceive+0x228>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e010      	b.n	800197a <HAL_I2SEx_TransmitReceive+0x24a>
  while ((tmp_TxXferCount > 0UL) || (tmp_RxXferCount > 0UL))
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f af52 	bne.w	8001804 <HAL_I2SEx_TransmitReceive+0xd4>
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f af4e 	bne.w	8001804 <HAL_I2SEx_TransmitReceive+0xd4>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	2b06      	cmp	r3, #6
 8001996:	d00a      	beq.n	80019ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e040      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e03e      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019b6:	491f      	ldr	r1, [pc, #124]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019be:	f7ff faa3 	bl	8000f08 <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019c4:	e009      	b.n	80019da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019c6:	f7ff fa9f 	bl	8000f08 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019d4:	d901      	bls.n	80019da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e028      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e6:	d1ee      	bne.n	80019c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b1e      	cmp	r3, #30
 80019ec:	d008      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b2e      	cmp	r3, #46	; 0x2e
 80019f2:	d005      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b1d      	cmp	r3, #29
 80019f8:	d002      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b2d      	cmp	r3, #45	; 0x2d
 80019fe:	d114      	bne.n	8001a2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a00:	f7ff fa82 	bl	8000f08 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a06:	e009      	b.n	8001a1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a08:	f7ff fa7e 	bl	8000f08 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a16:	d901      	bls.n	8001a1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d1ee      	bne.n	8001a08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	58024800 	.word	0x58024800

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc1d 	b.w	8002286 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8087 	beq.w	8001b68 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5a:	4b99      	ldr	r3, [pc, #612]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a64:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_OscConfig+0x48>
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	2b18      	cmp	r3, #24
 8001a74:	d110      	bne.n	8001a98 <HAL_RCC_OscConfig+0x60>
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x12e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d168      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e3f6      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x78>
 8001aa2:	4b87      	ldr	r3, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a86      	ldr	r2, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e02e      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x9a>
 8001ab8:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7d      	ldr	r2, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e01d      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0xbe>
 8001adc:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a71      	ldr	r2, [pc, #452]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f9f7 	bl	8000f08 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7ff f9f3 	bl	8000f08 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e3aa      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0xe6>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f9e3 	bl	8000f08 <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b46:	f7ff f9df 	bl	8000f08 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e396      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x10e>
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80cb 	beq.w	8001d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_OscConfig+0x164>
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	d156      	bne.n	8001c40 <HAL_RCC_OscConfig+0x208>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d151      	bne.n	8001c40 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e368      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bb4:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0219 	bic.w	r2, r3, #25
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	493f      	ldr	r1, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc6:	f7ff f99f 	bl	8000f08 <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff f99b 	bl	8000f08 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e352      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	f7ff f998 	bl	8000f20 <HAL_GetREVID>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d817      	bhi.n	8001c2a <HAL_RCC_OscConfig+0x1f2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1dc>
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c12:	e07b      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	031b      	lsls	r3, r3, #12
 8001c22:	4927      	ldr	r1, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	e070      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3e:	e065      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d048      	beq.n	8001cda <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0219 	bic.w	r2, r3, #25
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f955 	bl	8000f08 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f951 	bl	8000f08 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e308      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	f7ff f94e 	bl	8000f20 <HAL_GetREVID>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d81a      	bhi.n	8001cc4 <HAL_RCC_OscConfig+0x28c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x270>
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6053      	str	r3, [r2, #4]
 8001ca6:	e031      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	4902      	ldr	r1, [pc, #8]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001cbe:	bf00      	nop
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4997      	ldr	r1, [pc, #604]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f90f 	bl	8000f08 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff f90b 	bl	8000f08 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e2c2      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a9 	beq.w	8001e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d007      	beq.n	8001d40 <HAL_RCC_OscConfig+0x308>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d13a      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d135      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d40:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e296      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d58:	f7ff f8e2 	bl	8000f20 <HAL_GetREVID>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d817      	bhi.n	8001d96 <HAL_RCC_OscConfig+0x35e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d108      	bne.n	8001d80 <HAL_RCC_OscConfig+0x348>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	e075      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	4968      	ldr	r1, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d94:	e06a      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d96:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4962      	ldr	r1, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001daa:	e05f      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d042      	beq.n	8001e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f8a2 	bl	8000f08 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f89e 	bl	8000f08 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e255      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	f7ff f89b 	bl	8000f20 <HAL_GetREVID>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d817      	bhi.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d108      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3d6>
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e0a:	6053      	str	r3, [r2, #4]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	069b      	lsls	r3, r3, #26
 8001e1c:	4944      	ldr	r1, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e023      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f85f 	bl	8000f08 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f85b 	bl	8000f08 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e212      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d036      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f83c 	bl	8000f08 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f838 	bl	8000f08 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ef      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x45c>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f822 	bl	8000f08 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f81e 	bl	8000f08 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1d5      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d039      	beq.n	8001f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f06:	f7fe ffff 	bl	8000f08 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7fe fffb 	bl	8000f08 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1b2      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
 8001f2c:	e01b      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f34:	4b9b      	ldr	r3, [pc, #620]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f40:	f7fe ffe2 	bl	8000f08 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f48:	f7fe ffde 	bl	8000f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e195      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f5a:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8b      	ldr	r2, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f80:	f7fe ffc2 	bl	8000f08 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7fe ffbe 	bl	8000f08 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e175      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x584>
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e02d      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x5a6>
 8001fc4:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a76      	ldr	r2, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	f023 0304 	bic.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c8>
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe ff72 	bl	8000f08 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe ff6e 	bl	8000f08 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e123      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x5f0>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe ff5c 	bl	8000f08 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe ff58 	bl	8000f08 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e10d      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8102 	beq.w	8002284 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002088:	2b18      	cmp	r3, #24
 800208a:	f000 80bd 	beq.w	8002208 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b02      	cmp	r3, #2
 8002094:	f040 809e 	bne.w	80021d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff30 	bl	8000f08 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe ff2c 	bl	8000f08 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0e3      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_OscConfig+0x774>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	430a      	orrs	r2, r1
 80020de:	4931      	ldr	r1, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	628b      	str	r3, [r1, #40]	; 0x28
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	3b01      	subs	r3, #1
 80020ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	3b01      	subs	r3, #1
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	3b01      	subs	r3, #1
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002132:	00d2      	lsls	r2, r2, #3
 8002134:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f023 0202 	bic.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe feb5 	bl	8000f08 <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x78e>
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58024800 	.word	0x58024800
 80021ac:	fffffc0c 	.word	0xfffffc0c
 80021b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fea8 	bl	8000f08 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e05f      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x77c>
 80021d2:	e057      	b.n	8002284 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe92 	bl	8000f08 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fe8e 	bl	8000f08 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x7b0>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d031      	beq.n	8002280 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d12a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0a5b      	lsrs	r3, r3, #9
 800224e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d111      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0e1b      	lsrs	r3, r3, #24
 8002272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400

08002294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e19c      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b8a      	ldr	r3, [pc, #552]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d910      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 020f 	bic.w	r2, r3, #15
 80022be:	4985      	ldr	r1, [pc, #532]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e184      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4975      	ldr	r1, [pc, #468]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002302:	4313      	orrs	r3, r2
 8002304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231e:	429a      	cmp	r2, r3
 8002320:	d908      	bls.n	8002334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	496a      	ldr	r1, [pc, #424]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002330:	4313      	orrs	r3, r2
 8002332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800234c:	429a      	cmp	r2, r3
 800234e:	d908      	bls.n	8002362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	495e      	ldr	r1, [pc, #376]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 800235e:	4313      	orrs	r3, r2
 8002360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800237a:	429a      	cmp	r2, r3
 800237c:	d908      	bls.n	8002390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4953      	ldr	r1, [pc, #332]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 800238c:	4313      	orrs	r3, r2
 800238e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d908      	bls.n	80023be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f023 020f 	bic.w	r2, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4947      	ldr	r1, [pc, #284]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d055      	beq.n	8002476 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d121      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0f6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d115      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0ea      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0de      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f023 0207 	bic.w	r2, r3, #7
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4925      	ldr	r1, [pc, #148]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002442:	4313      	orrs	r3, r2
 8002444:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fd5f 	bl	8000f08 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	e00a      	b.n	8002464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7fe fd5b 	bl	8000f08 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0be      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	429a      	cmp	r2, r3
 8002474:	d1eb      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	429a      	cmp	r2, r3
 8002490:	d208      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f023 020f 	bic.w	r2, r3, #15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d214      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	4906      	ldr	r1, [pc, #24]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e086      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
 80024d4:	52002000 	.word	0x52002000
 80024d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d208      	bcs.n	800250a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f8:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002506:	4313      	orrs	r3, r2
 8002508:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002522:	429a      	cmp	r2, r3
 8002524:	d208      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	492e      	ldr	r1, [pc, #184]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002550:	429a      	cmp	r2, r3
 8002552:	d208      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002562:	4313      	orrs	r3, r2
 8002564:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257e:	429a      	cmp	r2, r3
 8002580:	d208      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4917      	ldr	r1, [pc, #92]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002590:	4313      	orrs	r3, r2
 8002592:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002594:	f000 f834 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4912      	ldr	r1, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x35c>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_RCC_ClockConfig+0x35c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x360>)
 80025ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x364>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x368>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fc4c 	bl	8000e74 <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58024400 	.word	0x58024400
 80025f0:	08005e14 	.word	0x08005e14
 80025f4:	24000004 	.word	0x24000004
 80025f8:	24000000 	.word	0x24000000
 80025fc:	24000008 	.word	0x24000008

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4bb3      	ldr	r3, [pc, #716]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800260e:	2b18      	cmp	r3, #24
 8002610:	f200 8155 	bhi.w	80028be <HAL_RCC_GetSysClockFreq+0x2be>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002681 	.word	0x08002681
 8002620:	080028bf 	.word	0x080028bf
 8002624:	080028bf 	.word	0x080028bf
 8002628:	080028bf 	.word	0x080028bf
 800262c:	080028bf 	.word	0x080028bf
 8002630:	080028bf 	.word	0x080028bf
 8002634:	080028bf 	.word	0x080028bf
 8002638:	080028bf 	.word	0x080028bf
 800263c:	080026a7 	.word	0x080026a7
 8002640:	080028bf 	.word	0x080028bf
 8002644:	080028bf 	.word	0x080028bf
 8002648:	080028bf 	.word	0x080028bf
 800264c:	080028bf 	.word	0x080028bf
 8002650:	080028bf 	.word	0x080028bf
 8002654:	080028bf 	.word	0x080028bf
 8002658:	080028bf 	.word	0x080028bf
 800265c:	080026ad 	.word	0x080026ad
 8002660:	080028bf 	.word	0x080028bf
 8002664:	080028bf 	.word	0x080028bf
 8002668:	080028bf 	.word	0x080028bf
 800266c:	080028bf 	.word	0x080028bf
 8002670:	080028bf 	.word	0x080028bf
 8002674:	080028bf 	.word	0x080028bf
 8002678:	080028bf 	.word	0x080028bf
 800267c:	080026b3 	.word	0x080026b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002680:	4b94      	ldr	r3, [pc, #592]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800268c:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800269e:	e111      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026a0:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a2:	61bb      	str	r3, [r7, #24]
    break;
 80026a4:	e10e      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026a6:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026a8:	61bb      	str	r3, [r7, #24]
    break;
 80026aa:	e10b      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026ac:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026ae:	61bb      	str	r3, [r7, #24]
    break;
 80026b0:	e108      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026bc:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c8:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026d2:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80e1 	beq.w	80028b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f000 8083 	beq.w	8002804 <HAL_RCC_GetSysClockFreq+0x204>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b02      	cmp	r3, #2
 8002702:	f200 80a1 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x248>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x114>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d056      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002712:	e099      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02d      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274a:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275a:	ed97 6a02 	vldr	s12, [r7, #8]
 800275e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800277a:	e087      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279e:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027be:	e065      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002802:	e043      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002826:	ed97 6a02 	vldr	s12, [r7, #8]
 800282a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002846:	e021      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286a:	ed97 6a02 	vldr	s12, [r7, #8]
 800286e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800287e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800288a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	0a5b      	lsrs	r3, r3, #9
 8002892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002896:	3301      	adds	r3, #1
 8002898:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b0:	ee17 3a90 	vmov	r3, s15
 80028b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    break;
 80028bc:	e002      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028c0:	61bb      	str	r3, [r7, #24]
    break;
 80028c2:	bf00      	nop
  }

  return sysclockfreq;
 80028c4:	69bb      	ldr	r3, [r7, #24]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	03d09000 	.word	0x03d09000
 80028dc:	003d0900 	.word	0x003d0900
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	46000000 	.word	0x46000000
 80028e8:	4c742400 	.word	0x4c742400
 80028ec:	4a742400 	.word	0x4a742400
 80028f0:	4af42400 	.word	0x4af42400

080028f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028fa:	f7ff fe81 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_GetHCLKFreq+0x50>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490f      	ldr	r1, [pc, #60]	; (8002948 <HAL_RCC_GetHCLKFreq+0x54>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_RCC_GetHCLKFreq+0x50>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_RCC_GetHCLKFreq+0x54>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_RCC_GetHCLKFreq+0x58>)
 8002930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetHCLKFreq+0x58>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024400 	.word	0x58024400
 8002948:	08005e14 	.word	0x08005e14
 800294c:	24000004 	.word	0x24000004
 8002950:	24000000 	.word	0x24000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002958:	f7ff ffcc 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCC_GetPCLK1Freq+0x28>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024400 	.word	0x58024400
 800297c:	08005e14 	.word	0x08005e14

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002984:	f7ff ffb6 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58024400 	.word	0x58024400
 80029a8:	08005e14 	.word	0x08005e14

080029ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b8:	2300      	movs	r3, #0
 80029ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029d0:	d02a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029d6:	d824      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029dc:	d018      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e2:	d81e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ec:	d007      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029ee:	e018      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f0:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	4aa2      	ldr	r2, [pc, #648]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029fc:	e015      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fff9 	bl	80049fc <RCCEx_PLL2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a0e:	e00c      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3324      	adds	r3, #36	; 0x24
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f8a2 	bl	8004b60 <RCCEx_PLL3_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a20:	e003      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a30:	4b93      	ldr	r3, [pc, #588]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3c:	4990      	ldr	r1, [pc, #576]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	650b      	str	r3, [r1, #80]	; 0x50
 8002a42:	e001      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d826      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a87 	.word	0x08002a87
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002ab1 	.word	0x08002ab1
 8002a74:	08002ab1 	.word	0x08002ab1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a84:	e015      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 ffb5 	bl	80049fc <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3324      	adds	r3, #36	; 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 f85e 	bl	8004b60 <RCCEx_PLL3_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab8:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	496e      	ldr	r1, [pc, #440]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d042      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d02b      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d825      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002aec:	2bc0      	cmp	r3, #192	; 0xc0
 8002aee:	d028      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002af0:	2bc0      	cmp	r3, #192	; 0xc0
 8002af2:	d821      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d016      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d81d      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d007      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b04:	e018      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b12:	e017      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 ff6e 	bl	80049fc <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b24:	e00e      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 f817 	bl	8004b60 <RCCEx_PLL3_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3c:	e002      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	494a      	ldr	r1, [pc, #296]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	650b      	str	r3, [r1, #80]	; 0x50
 8002b5c:	e001      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d049      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b78:	d030      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d82a      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b84:	d02c      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b8a:	d824      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d018      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d81e      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba0:	d007      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb0:	e017      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 ff1f 	bl	80049fc <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bc2:	e00e      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 ffc8 	bl	8004b60 <RCCEx_PLL3_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bd4:	e005      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	658b      	str	r3, [r1, #88]	; 0x58
 8002bfc:	e001      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04b      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c18:	d030      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1e:	d82a      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c24:	d02e      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c2a:	d824      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c30:	d018      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c36:	d81e      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c40:	d007      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c42:	e018      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c50:	e019      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fecf 	bl	80049fc <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c62:	e010      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 ff78 	bl	8004b60 <RCCEx_PLL3_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c74:	e007      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c80:	58024400 	.word	0x58024400
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c8c:	4b99      	ldr	r3, [pc, #612]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c9a:	4996      	ldr	r1, [pc, #600]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d032      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b30      	cmp	r3, #48	; 0x30
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cba:	2b30      	cmp	r3, #48	; 0x30
 8002cbc:	d817      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d813      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d10f      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4a88      	ldr	r2, [pc, #544]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cda:	e00e      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fe8a 	bl	80049fc <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cec:	e005      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d00:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	4979      	ldr	r1, [pc, #484]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d047      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d030      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d32:	d82a      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d38:	d02c      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d3e:	d824      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d44:	d018      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d81e      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d007      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d56:	e018      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d64:	e017      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fe45 	bl	80049fc <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d76:	e00e      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3324      	adds	r3, #36	; 0x24
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 feee 	bl	8004b60 <RCCEx_PLL3_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d88:	e005      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	4952      	ldr	r1, [pc, #328]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	650b      	str	r3, [r1, #80]	; 0x50
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d049      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d02e      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d828      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd4:	d02a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dda:	d822      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ddc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de0:	d026      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de6:	d81c      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dec:	d010      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002df2:	d816      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01d      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d111      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fdf9 	bl	80049fc <RCCEx_PLL2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e0e:	e012      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fea2 	bl	8004b60 <RCCEx_PLL3_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e20:	e009      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
      break;
 8002e26:	e006      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	492a      	ldr	r1, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d04d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e6a:	d02e      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e70:	d828      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d02a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d822      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e82:	d026      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e88:	d81c      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e94:	d816      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fda8 	bl	80049fc <RCCEx_PLL2_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fe51 	bl	8004b60 <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002eec:	4901      	ldr	r1, [pc, #4]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ef2:	e003      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02f      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f10:	d00e      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f16:	d814      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f22:	4baf      	ldr	r3, [pc, #700]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	4aae      	ldr	r2, [pc, #696]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f2e:	e00c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 fd60 	bl	80049fc <RCCEx_PLL2_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f40:	e003      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
      break;
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f50:	4ba3      	ldr	r3, [pc, #652]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5c:	49a0      	ldr	r1, [pc, #640]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	650b      	str	r3, [r1, #80]	; 0x50
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d032      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d81b      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fbb 	.word	0x08002fbb
 8002f88:	08002f95 	.word	0x08002f95
 8002f8c:	08002fa3 	.word	0x08002fa3
 8002f90:	08002fbb 	.word	0x08002fbb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f94:	4b92      	ldr	r3, [pc, #584]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a91      	ldr	r2, [pc, #580]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fd27 	bl	80049fc <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fc2:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4984      	ldr	r1, [pc, #528]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fd4:	e001      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8086 	beq.w	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff4:	f7fd ff88 	bl	8000f08 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fd ff84 	bl	8000f08 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d902      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	75fb      	strb	r3, [r7, #23]
        break;
 800300e:	e005      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d166      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003022:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800302c:	4053      	eors	r3, r2
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003036:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003058:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d115      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd ff4d 	bl	8000f08 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003070:	e00b      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fd ff49 	bl	8000f08 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d902      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	75fb      	strb	r3, [r7, #23]
            break;
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ed      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d126      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ba:	0919      	lsrs	r1, r3, #4
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030be:	400b      	ands	r3, r1
 80030c0:	4947      	ldr	r1, [pc, #284]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4a44      	ldr	r2, [pc, #272]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030d2:	6113      	str	r3, [r2, #16]
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	493f      	ldr	r1, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	670b      	str	r3, [r1, #112]	; 0x70
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	75bb      	strb	r3, [r7, #22]
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8085 	beq.w	800320c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003106:	2b28      	cmp	r3, #40	; 0x28
 8003108:	d866      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	080031ed 	.word	0x080031ed
 8003114:	080031d9 	.word	0x080031d9
 8003118:	080031d9 	.word	0x080031d9
 800311c:	080031d9 	.word	0x080031d9
 8003120:	080031d9 	.word	0x080031d9
 8003124:	080031d9 	.word	0x080031d9
 8003128:	080031d9 	.word	0x080031d9
 800312c:	080031d9 	.word	0x080031d9
 8003130:	080031b5 	.word	0x080031b5
 8003134:	080031d9 	.word	0x080031d9
 8003138:	080031d9 	.word	0x080031d9
 800313c:	080031d9 	.word	0x080031d9
 8003140:	080031d9 	.word	0x080031d9
 8003144:	080031d9 	.word	0x080031d9
 8003148:	080031d9 	.word	0x080031d9
 800314c:	080031d9 	.word	0x080031d9
 8003150:	080031c7 	.word	0x080031c7
 8003154:	080031d9 	.word	0x080031d9
 8003158:	080031d9 	.word	0x080031d9
 800315c:	080031d9 	.word	0x080031d9
 8003160:	080031d9 	.word	0x080031d9
 8003164:	080031d9 	.word	0x080031d9
 8003168:	080031d9 	.word	0x080031d9
 800316c:	080031d9 	.word	0x080031d9
 8003170:	080031ed 	.word	0x080031ed
 8003174:	080031d9 	.word	0x080031d9
 8003178:	080031d9 	.word	0x080031d9
 800317c:	080031d9 	.word	0x080031d9
 8003180:	080031d9 	.word	0x080031d9
 8003184:	080031d9 	.word	0x080031d9
 8003188:	080031d9 	.word	0x080031d9
 800318c:	080031d9 	.word	0x080031d9
 8003190:	080031ed 	.word	0x080031ed
 8003194:	080031d9 	.word	0x080031d9
 8003198:	080031d9 	.word	0x080031d9
 800319c:	080031d9 	.word	0x080031d9
 80031a0:	080031d9 	.word	0x080031d9
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031d9 	.word	0x080031d9
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ed 	.word	0x080031ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 fc1e 	bl	80049fc <RCCEx_PLL2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031c4:	e013      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3324      	adds	r3, #36	; 0x24
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 fcc7 	bl	8004b60 <RCCEx_PLL3_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031d6:	e00a      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	e007      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
 80031e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031f4:	4b96      	ldr	r3, [pc, #600]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003200:	4993      	ldr	r1, [pc, #588]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	654b      	str	r3, [r1, #84]	; 0x54
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d038      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	2b05      	cmp	r3, #5
 800321e:	d821      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800326b 	.word	0x0800326b
 800322c:	08003241 	.word	0x08003241
 8003230:	08003253 	.word	0x08003253
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f001 fbd8 	bl	80049fc <RCCEx_PLL2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003250:	e00c      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3324      	adds	r3, #36	; 0x24
 8003256:	2101      	movs	r1, #1
 8003258:	4618      	mov	r0, r3
 800325a:	f001 fc81 	bl	8004b60 <RCCEx_PLL3_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003272:	4b77      	ldr	r3, [pc, #476]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	4974      	ldr	r1, [pc, #464]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	654b      	str	r3, [r1, #84]	; 0x54
 8003284:	e001      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	2b05      	cmp	r3, #5
 800329e:	d821      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032eb 	.word	0x080032eb
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032d3 	.word	0x080032d3
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fb98 	bl	80049fc <RCCEx_PLL2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3324      	adds	r3, #36	; 0x24
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc41 	bl	8004b60 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80032ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f2:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	4953      	ldr	r1, [pc, #332]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	658b      	str	r3, [r1, #88]	; 0x58
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d04b      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d02e      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003328:	d828      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d02a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d822      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800333a:	d026      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800333c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003340:	d81c      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003346:	d010      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334c:	d816      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01d      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003356:	d111      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fb4c 	bl	80049fc <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003368:	e012      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3324      	adds	r3, #36	; 0x24
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f001 fbf5 	bl	8004b60 <RCCEx_PLL3_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003382:	bf00      	nop
 8003384:	e004      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	492a      	ldr	r1, [pc, #168]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	654b      	str	r3, [r1, #84]	; 0x54
 80033aa:	e001      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d04d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c6:	d02e      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033cc:	d828      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	d02a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d822      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033de:	d026      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80033e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e4:	d81c      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ea:	d010      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80033ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f0:	d816      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d111      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fafa 	bl	80049fc <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800340c:	e012      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3324      	adds	r3, #36	; 0x24
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fba3 	bl	8004b60 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003426:	bf00      	nop
 8003428:	e004      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003448:	4901      	ldr	r1, [pc, #4]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	658b      	str	r3, [r1, #88]	; 0x58
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d04b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003470:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003474:	d828      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347a:	d02a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003480:	d822      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003482:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003486:	d026      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003488:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800348c:	d81c      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800348e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003492:	d010      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d816      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	d111      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 faa6 	bl	80049fc <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034b4:	e012      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3324      	adds	r3, #36	; 0x24
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fb4f 	bl	8004b60 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034c6:	e009      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
      break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ce:	bf00      	nop
 80034d0:	e004      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034e2:	4b9d      	ldr	r3, [pc, #628]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f0:	4999      	ldr	r1, [pc, #612]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	658b      	str	r3, [r1, #88]	; 0x58
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d10a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fb20 	bl	8004b60 <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800352a:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003538:	4987      	ldr	r1, [pc, #540]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003554:	d10a      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3324      	adds	r3, #36	; 0x24
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 faff 	bl	8004b60 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800356c:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4977      	ldr	r1, [pc, #476]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800357c:	4313      	orrs	r3, r2
 800357e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d034      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003596:	d01d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800359c:	d817      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d009      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035a8:	e011      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fa23 	bl	80049fc <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035ba:	e00c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 facc 	bl	8004b60 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	658b      	str	r3, [r1, #88]	; 0x58
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d033      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360c:	d01c      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d816      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003620:	e00f      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fa92 	bl	8004b60 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365e:	493e      	ldr	r1, [pc, #248]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003660:	4313      	orrs	r3, r2
 8003662:	654b      	str	r3, [r1, #84]	; 0x54
 8003664:	e001      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d029      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d007      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003684:	e00f      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003692:	e00b      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f9ae 	bl	80049fc <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
      break;
 80036aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4926      	ldr	r1, [pc, #152]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036c4:	e001      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fa3f 	bl	8004b60 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d033      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d811      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d013      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800370e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003712:	d80b      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371c:	d106      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800372a:	e007      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e004      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800373a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	4902      	ldr	r1, [pc, #8]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003750:	4313      	orrs	r3, r2
 8003752:	654b      	str	r3, [r1, #84]	; 0x54
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800376c:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	492e      	ldr	r1, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800377a:	4313      	orrs	r3, r2
 800377c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003798:	4926      	ldr	r1, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b6:	491f      	ldr	r1, [pc, #124]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037d2:	6113      	str	r3, [r2, #16]
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037de:	4915      	ldr	r1, [pc, #84]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da08      	bge.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800381a:	4313      	orrs	r3, r2
 800381c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800381e:	7dbb      	ldrb	r3, [r7, #22]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400

08003838 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b090      	sub	sp, #64	; 0x40
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003846:	f040 8095 	bne.w	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800384a:	4b97      	ldr	r3, [pc, #604]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	2b04      	cmp	r3, #4
 8003858:	f200 8088 	bhi.w	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003879 	.word	0x08003879
 8003868:	080038a1 	.word	0x080038a1
 800386c:	080038c9 	.word	0x080038c9
 8003870:	08003965 	.word	0x08003965
 8003874:	080038f1 	.word	0x080038f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003878:	4b8b      	ldr	r3, [pc, #556]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003884:	d108      	bne.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	4618      	mov	r0, r3
 800388c:	f000 ff64 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003894:	f000 bc94 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800389c:	f000 bc90 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80038a0:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ac:	d108      	bne.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fca8 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038bc:	f000 bc80 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038c4:	f000 bc7c 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80038c8:	4b77      	ldr	r3, [pc, #476]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d108      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fde8 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038e4:	f000 bc6c 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038ec:	f000 bc68 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80038f0:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038fa:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	4a65      	ldr	r2, [pc, #404]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	e01f      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003920:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003934:	d102      	bne.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003936:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800393c:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003948:	d106      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003950:	d102      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003952:	4b58      	ldr	r3, [pc, #352]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800395c:	f000 bc30 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003960:	f000 bc2e 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003964:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003968:	f000 bc2a 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003970:	f000 bc26 	b.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397a:	f040 809f 	bne.w	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003986:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d04d      	beq.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	f200 8084 	bhi.w	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2bc0      	cmp	r3, #192	; 0xc0
 800399e:	d07d      	beq.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2bc0      	cmp	r3, #192	; 0xc0
 80039a4:	d87d      	bhi.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d02d      	beq.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d877      	bhi.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d012      	beq.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80039be:	e070      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039c0:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039cc:	d107      	bne.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fec0 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039dc:	e3f0      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039e2:	e3ed      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d107      	bne.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f2:	f107 0318 	add.w	r3, r7, #24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc06 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a00:	e3de      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a06:	e3db      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d107      	bne.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fd48 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a24:	e3cc      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a2a:	e3c9      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5a:	e01e      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d106      	bne.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a70:	d102      	bne.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a76:	e010      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a92:	e002      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003a98:	e392      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003a9a:	e391      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aa0:	e38e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aa6:	e38b      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	03d09000 	.word	0x03d09000
 8003ab0:	003d0900 	.word	0x003d0900
 8003ab4:	007a1200 	.word	0x007a1200
 8003ab8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	f040 809c 	bne.w	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003ac6:	4b9d      	ldr	r3, [pc, #628]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad6:	d054      	beq.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ade:	f200 808b 	bhi.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae8:	f000 8083 	beq.w	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003af2:	f200 8081 	bhi.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d02f      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b04:	d878      	bhi.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b12:	d012      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003b14:	e070      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b22:	d107      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fe15 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b32:	e345      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b38:	e342      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b3a:	4b80      	ldr	r3, [pc, #512]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b46:	d107      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b48:	f107 0318 	add.w	r3, r7, #24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fb5b 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b56:	e333      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b5c:	e330      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fc9d 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b7a:	e321      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b80:	e31e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b82:	4b6e      	ldr	r3, [pc, #440]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b8c:	4b6b      	ldr	r3, [pc, #428]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	08db      	lsrs	r3, r3, #3
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb0:	e01e      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003bb2:	4b62      	ldr	r3, [pc, #392]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d106      	bne.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc6:	d102      	bne.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bcc:	e010      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bce:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bda:	d106      	bne.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be2:	d102      	bne.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003be4:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003bee:	e2e7      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003bf0:	e2e6      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bf2:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bf6:	e2e3      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bfc:	e2e0      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c04:	f040 80a7 	bne.w	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c18:	d055      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c20:	f200 8096 	bhi.w	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2a:	f000 8084 	beq.w	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c34:	f200 808c 	bhi.w	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3e:	d030      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c46:	f200 8083 	bhi.w	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c56:	d012      	beq.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003c58:	e07a      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c5a:	4b38      	ldr	r3, [pc, #224]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c66:	d107      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd73 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c76:	e2a3      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c7c:	e2a0      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c7e:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c8c:	f107 0318 	add.w	r3, r7, #24
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fab9 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003c9a:	e291      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ca0:	e28e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cb0:	f107 030c 	add.w	r3, r7, #12
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fbfb 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cbe:	e27f      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cc4:	e27c      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	e01e      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d106      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d10:	e010      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d26:	d102      	bne.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d2c:	e002      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003d32:	e245      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d34:	e244      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d3a:	e241      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	03d09000 	.word	0x03d09000
 8003d44:	003d0900 	.word	0x003d0900
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d54:	e234      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	f040 809c 	bne.w	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003d60:	4b9b      	ldr	r3, [pc, #620]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d70:	d054      	beq.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d78:	f200 808b 	bhi.w	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d82:	f000 8083 	beq.w	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d8c:	f200 8081 	bhi.w	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d02f      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	d878      	bhi.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d012      	beq.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003dae:	e070      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003db0:	4b87      	ldr	r3, [pc, #540]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dbc:	d107      	bne.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fcc8 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dcc:	e1f8      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dd2:	e1f5      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de0:	d107      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003de2:	f107 0318 	add.w	r3, r7, #24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fa0e 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003df0:	e1e6      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003df6:	e1e3      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003df8:	4b75      	ldr	r3, [pc, #468]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e04:	d107      	bne.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fb50 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e14:	e1d4      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e1a:	e1d1      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e1c:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e26:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e38:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	4a64      	ldr	r2, [pc, #400]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4a:	e01e      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e4c:	4b60      	ldr	r3, [pc, #384]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d106      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e60:	d102      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e62:	4b5d      	ldr	r3, [pc, #372]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	e010      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e68:	4b59      	ldr	r3, [pc, #356]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e74:	d106      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003e7e:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003e88:	e19a      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e8a:	e199      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e8c:	4b54      	ldr	r3, [pc, #336]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e90:	e196      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e96:	e193      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e9e:	d173      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb0:	d02f      	beq.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb8:	d863      	bhi.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d012      	beq.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003ec8:	e05b      	b.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ed8:	f107 0318 	add.w	r3, r7, #24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f993 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003ee6:	e16b      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003eec:	e168      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efa:	d107      	bne.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fad5 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f0a:	e159      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f10:	e156      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f2e:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	e01e      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f56:	d102      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5c:	e010      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d102      	bne.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003f7e:	e11f      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003f80:	e11e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f86:	e11b      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d13e      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003fa8:	e02e      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fbcb 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003fc6:	e0fb      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fcc:	e0f8      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003fce:	bf00      	nop
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	03d09000 	.word	0x03d09000
 8003fd8:	003d0900 	.word	0x003d0900
 8003fdc:	007a1200 	.word	0x007a1200
 8003fe0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fe4:	4b79      	ldr	r3, [pc, #484]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff0:	d107      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ff2:	f107 0318 	add.w	r3, r7, #24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f906 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004000:	e0de      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004006:	e0db      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800400c:	e0d8      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004014:	f040 8085 	bne.w	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004018:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004028:	d06b      	beq.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004030:	d874      	bhi.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d056      	beq.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d86c      	bhi.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004048:	d03b      	beq.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004050:	d864      	bhi.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004058:	d021      	beq.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d85c      	bhi.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	d004      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004070:	e054      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004072:	f000 f8b3 	bl	80041dc <HAL_RCCEx_GetD3PCLK1Freq>
 8004076:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004078:	e0a2      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800407a:	4b54      	ldr	r3, [pc, #336]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004086:	d107      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004088:	f107 0318 	add.w	r3, r7, #24
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f8bb 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004096:	e093      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800409c:	e090      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040aa:	d107      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f9fd 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80040ba:	e081      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040c0:	e07e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040c2:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d109      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	08db      	lsrs	r3, r3, #3
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80040e0:	e06e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040e6:	e06b      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80040e8:	4b38      	ldr	r3, [pc, #224]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d102      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80040fa:	e061      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004100:	e05e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004102:	4b32      	ldr	r3, [pc, #200]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410e:	d102      	bne.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004114:	e054      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800411a:	e051      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004120:	e04e      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004128:	d148      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800412a:	4b28      	ldr	r3, [pc, #160]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800412c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d02a      	beq.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004142:	d838      	bhi.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004150:	d00d      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004152:	e030      	b.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004160:	d102      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004166:	e02b      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800416c:	e028      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800417a:	d107      	bne.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800417c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fae9 	bl	8004758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800418a:	e019      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004190:	e016      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004192:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800419a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419e:	d107      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041a0:	f107 0318 	add.w	r3, r7, #24
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f82f 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041ae:	e007      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3740      	adds	r7, #64	; 0x40
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	03d09000 	.word	0x03d09000
 80041d4:	003d0900 	.word	0x003d0900
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041e0:	f7fe fb88 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4904      	ldr	r1, [pc, #16]	; (8004204 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	58024400 	.word	0x58024400
 8004204:	08005e14 	.word	0x08005e14

08004208 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004210:	4ba1      	ldr	r3, [pc, #644]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800421a:	4b9f      	ldr	r3, [pc, #636]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	0b1b      	lsrs	r3, r3, #12
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004226:	4b9c      	ldr	r3, [pc, #624]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004232:	4b99      	ldr	r3, [pc, #612]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	08db      	lsrs	r3, r3, #3
 8004238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8111 	beq.w	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	f000 8083 	beq.w	8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	f200 80a1 	bhi.w	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d056      	beq.n	8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004272:	e099      	b.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004274:	4b88      	ldr	r3, [pc, #544]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d02d      	beq.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004280:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	4a84      	ldr	r2, [pc, #528]	; (800449c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80042be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042da:	e087      	b.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ee:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004302:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800431e:	e065      	b.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b59      	ldr	r3, [pc, #356]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a03 	vldr	s12, [r7, #12]
 8004346:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004362:	e043      	b.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b48      	ldr	r3, [pc, #288]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a03 	vldr	s12, [r7, #12]
 800438a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043a6:	e021      	b.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b37      	ldr	r3, [pc, #220]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004406:	edd7 6a07 	vldr	s13, [r7, #28]
 800440a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004412:	ee17 2a90 	vmov	r2, s15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004434:	edd7 6a07 	vldr	s13, [r7, #28]
 8004438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004440:	ee17 2a90 	vmov	r2, s15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	0e1b      	lsrs	r3, r3, #24
 800444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800445e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004462:	edd7 6a07 	vldr	s13, [r7, #28]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	ee17 2a90 	vmov	r2, s15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004476:	e008      	b.n	800448a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	bf00      	nop
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
 800449c:	03d09000 	.word	0x03d09000
 80044a0:	46000000 	.word	0x46000000
 80044a4:	4c742400 	.word	0x4c742400
 80044a8:	4a742400 	.word	0x4a742400
 80044ac:	4af42400 	.word	0x4af42400

080044b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b8:	4ba1      	ldr	r3, [pc, #644]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044c2:	4b9f      	ldr	r3, [pc, #636]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	0d1b      	lsrs	r3, r3, #20
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044ce:	4b9c      	ldr	r3, [pc, #624]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044da:	4b99      	ldr	r3, [pc, #612]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	08db      	lsrs	r3, r3, #3
 80044e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8111 	beq.w	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b02      	cmp	r3, #2
 8004502:	f000 8083 	beq.w	800460c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b02      	cmp	r3, #2
 800450a:	f200 80a1 	bhi.w	8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d056      	beq.n	80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800451a:	e099      	b.n	8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02d      	beq.n	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004528:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	4a84      	ldr	r2, [pc, #528]	; (8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a03 	vldr	s12, [r7, #12]
 8004566:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004582:	e087      	b.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800474c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b6a      	ldr	r3, [pc, #424]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045c6:	e065      	b.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b59      	ldr	r3, [pc, #356]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800460a:	e043      	b.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800464e:	e021      	b.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b37      	ldr	r3, [pc, #220]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004692:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	0a5b      	lsrs	r3, r3, #9
 800469a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ba:	ee17 2a90 	vmov	r2, s15
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046c2:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	ee17 2a90 	vmov	r2, s15
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	0e1b      	lsrs	r3, r3, #24
 80046f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800470a:	edd7 6a07 	vldr	s13, [r7, #28]
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004716:	ee17 2a90 	vmov	r2, s15
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	58024400 	.word	0x58024400
 8004744:	03d09000 	.word	0x03d09000
 8004748:	46000000 	.word	0x46000000
 800474c:	4c742400 	.word	0x4c742400
 8004750:	4a742400 	.word	0x4a742400
 8004754:	4af42400 	.word	0x4af42400

08004758 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004760:	4ba0      	ldr	r3, [pc, #640]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800476a:	4b9e      	ldr	r3, [pc, #632]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004774:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004776:	4b9b      	ldr	r3, [pc, #620]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004780:	4b98      	ldr	r3, [pc, #608]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004798:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8111 	beq.w	80049c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	f000 8083 	beq.w	80048b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	f200 80a1 	bhi.w	80048f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d056      	beq.n	800486e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80047c0:	e099      	b.n	80048f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c2:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02d      	beq.n	800482a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ce:	4b85      	ldr	r3, [pc, #532]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	4a83      	ldr	r2, [pc, #524]	; (80049e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f8:	4b7a      	ldr	r3, [pc, #488]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004808:	ed97 6a03 	vldr	s12, [r7, #12]
 800480c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004824:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004828:	e087      	b.n	800493a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80049f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483c:	4b69      	ldr	r3, [pc, #420]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004850:	eddf 5a66 	vldr	s11, [pc, #408]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800486c:	e065      	b.n	800493a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80049f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	4b58      	ldr	r3, [pc, #352]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004890:	ed97 6a03 	vldr	s12, [r7, #12]
 8004894:	eddf 5a55 	vldr	s11, [pc, #340]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048b0:	e043      	b.n	800493a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80049f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80048c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c4:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80048dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f4:	e021      	b.n	800493a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80049f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004918:	ed97 6a03 	vldr	s12, [r7, #12]
 800491c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004938:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	0a5b      	lsrs	r3, r3, #9
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004954:	edd7 6a07 	vldr	s13, [r7, #28]
 8004958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004960:	ee17 2a90 	vmov	r2, s15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004982:	edd7 6a07 	vldr	s13, [r7, #28]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	0e1b      	lsrs	r3, r3, #24
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049bc:	ee17 2a90 	vmov	r2, s15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	3724      	adds	r7, #36	; 0x24
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	58024400 	.word	0x58024400
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	46000000 	.word	0x46000000
 80049f0:	4c742400 	.word	0x4c742400
 80049f4:	4a742400 	.word	0x4a742400
 80049f8:	4af42400 	.word	0x4af42400

080049fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0a:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d101      	bne.n	8004a1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e099      	b.n	8004b4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a1a:	4b4f      	ldr	r3, [pc, #316]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a4e      	ldr	r2, [pc, #312]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a26:	f7fc fa6f 	bl	8000f08 <HAL_GetTick>
 8004a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a2c:	e008      	b.n	8004a40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a2e:	f7fc fa6b 	bl	8000f08 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e086      	b.n	8004b4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a40:	4b45      	ldr	r3, [pc, #276]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f0      	bne.n	8004a2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	493f      	ldr	r1, [pc, #252]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	025b      	lsls	r3, r3, #9
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a90:	4931      	ldr	r1, [pc, #196]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	492d      	ldr	r1, [pc, #180]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f023 0220 	bic.w	r2, r3, #32
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	4928      	ldr	r1, [pc, #160]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aba:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a26      	ldr	r2, [pc, #152]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <RCCEx_PLL2_Config+0x160>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	69d2      	ldr	r2, [r2, #28]
 8004ad2:	00d2      	lsls	r2, r2, #3
 8004ad4:	4920      	ldr	r1, [pc, #128]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ada:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f043 0310 	orr.w	r3, r3, #16
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004af2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004af8:	e00f      	b.n	8004b1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b0c:	e005      	b.n	8004b1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b26:	f7fc f9ef 	bl	8000f08 <HAL_GetTick>
 8004b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b2e:	f7fc f9eb 	bl	8000f08 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e006      	b.n	8004b4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	ffff0007 	.word	0xffff0007

08004b60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b6e:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d101      	bne.n	8004b7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e099      	b.n	8004cb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a4e      	ldr	r2, [pc, #312]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8a:	f7fc f9bd 	bl	8000f08 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b92:	f7fc f9b9 	bl	8000f08 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e086      	b.n	8004cb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ba4:	4b45      	ldr	r3, [pc, #276]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bb0:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	051b      	lsls	r3, r3, #20
 8004bbe:	493f      	ldr	r1, [pc, #252]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	025b      	lsls	r3, r3, #9
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bf4:	4931      	ldr	r1, [pc, #196]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bfa:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	492d      	ldr	r1, [pc, #180]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	4928      	ldr	r1, [pc, #160]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <RCCEx_PLL3_Config+0x160>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	69d2      	ldr	r2, [r2, #28]
 8004c36:	00d2      	lsls	r2, r2, #3
 8004c38:	4920      	ldr	r1, [pc, #128]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c5c:	e00f      	b.n	8004c7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c64:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c70:	e005      	b.n	8004c7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8a:	f7fc f93d 	bl	8000f08 <HAL_GetTick>
 8004c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c92:	f7fc f939 	bl	8000f08 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	ffff0007 	.word	0xffff0007

08004cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e042      	b.n	8004d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fb ffcd 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2224      	movs	r2, #36	; 0x24
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f82c 	bl	8004d64 <UART_SetConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fd88 	bl	8005834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fe0f 	bl	8005978 <UART_CheckIdleState>
 8004d5a:	4603      	mov	r3, r0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d68:	b092      	sub	sp, #72	; 0x48
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4bbe      	ldr	r3, [pc, #760]	; (800508c <UART_SetConfig+0x328>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4ab3      	ldr	r2, [pc, #716]	; (8005090 <UART_SetConfig+0x32c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	4baf      	ldr	r3, [pc, #700]	; (8005094 <UART_SetConfig+0x330>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f023 010f 	bic.w	r1, r3, #15
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4aa6      	ldr	r2, [pc, #664]	; (8005098 <UART_SetConfig+0x334>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d177      	bne.n	8004ef4 <UART_SetConfig+0x190>
 8004e04:	4ba5      	ldr	r3, [pc, #660]	; (800509c <UART_SetConfig+0x338>)
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0c:	2b28      	cmp	r3, #40	; 0x28
 8004e0e:	d86d      	bhi.n	8004eec <UART_SetConfig+0x188>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0xb4>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004ebd 	.word	0x08004ebd
 8004e1c:	08004eed 	.word	0x08004eed
 8004e20:	08004eed 	.word	0x08004eed
 8004e24:	08004eed 	.word	0x08004eed
 8004e28:	08004eed 	.word	0x08004eed
 8004e2c:	08004eed 	.word	0x08004eed
 8004e30:	08004eed 	.word	0x08004eed
 8004e34:	08004eed 	.word	0x08004eed
 8004e38:	08004ec5 	.word	0x08004ec5
 8004e3c:	08004eed 	.word	0x08004eed
 8004e40:	08004eed 	.word	0x08004eed
 8004e44:	08004eed 	.word	0x08004eed
 8004e48:	08004eed 	.word	0x08004eed
 8004e4c:	08004eed 	.word	0x08004eed
 8004e50:	08004eed 	.word	0x08004eed
 8004e54:	08004eed 	.word	0x08004eed
 8004e58:	08004ecd 	.word	0x08004ecd
 8004e5c:	08004eed 	.word	0x08004eed
 8004e60:	08004eed 	.word	0x08004eed
 8004e64:	08004eed 	.word	0x08004eed
 8004e68:	08004eed 	.word	0x08004eed
 8004e6c:	08004eed 	.word	0x08004eed
 8004e70:	08004eed 	.word	0x08004eed
 8004e74:	08004eed 	.word	0x08004eed
 8004e78:	08004ed5 	.word	0x08004ed5
 8004e7c:	08004eed 	.word	0x08004eed
 8004e80:	08004eed 	.word	0x08004eed
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004eed 	.word	0x08004eed
 8004e8c:	08004eed 	.word	0x08004eed
 8004e90:	08004eed 	.word	0x08004eed
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004edd 	.word	0x08004edd
 8004e9c:	08004eed 	.word	0x08004eed
 8004ea0:	08004eed 	.word	0x08004eed
 8004ea4:	08004eed 	.word	0x08004eed
 8004ea8:	08004eed 	.word	0x08004eed
 8004eac:	08004eed 	.word	0x08004eed
 8004eb0:	08004eed 	.word	0x08004eed
 8004eb4:	08004eed 	.word	0x08004eed
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e222      	b.n	800530a <UART_SetConfig+0x5a6>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e21e      	b.n	800530a <UART_SetConfig+0x5a6>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e21a      	b.n	800530a <UART_SetConfig+0x5a6>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e216      	b.n	800530a <UART_SetConfig+0x5a6>
 8004edc:	2320      	movs	r3, #32
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e212      	b.n	800530a <UART_SetConfig+0x5a6>
 8004ee4:	2340      	movs	r3, #64	; 0x40
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e20e      	b.n	800530a <UART_SetConfig+0x5a6>
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e20a      	b.n	800530a <UART_SetConfig+0x5a6>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <UART_SetConfig+0x33c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d130      	bne.n	8004f60 <UART_SetConfig+0x1fc>
 8004efe:	4b67      	ldr	r3, [pc, #412]	; (800509c <UART_SetConfig+0x338>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d826      	bhi.n	8004f58 <UART_SetConfig+0x1f4>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x1ac>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	08004f39 	.word	0x08004f39
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e1ec      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f30:	2304      	movs	r3, #4
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e1e8      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e1e4      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e1e0      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e1dc      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e1d8      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e1d4      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4f      	ldr	r2, [pc, #316]	; (80050a4 <UART_SetConfig+0x340>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d130      	bne.n	8004fcc <UART_SetConfig+0x268>
 8004f6a:	4b4c      	ldr	r3, [pc, #304]	; (800509c <UART_SetConfig+0x338>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d826      	bhi.n	8004fc4 <UART_SetConfig+0x260>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x218>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f95 	.word	0x08004f95
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e1b6      	b.n	800530a <UART_SetConfig+0x5a6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e1b2      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e1ae      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e1aa      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e1a6      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e1a2      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e19e      	b.n	800530a <UART_SetConfig+0x5a6>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a35      	ldr	r2, [pc, #212]	; (80050a8 <UART_SetConfig+0x344>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d130      	bne.n	8005038 <UART_SetConfig+0x2d4>
 8004fd6:	4b31      	ldr	r3, [pc, #196]	; (800509c <UART_SetConfig+0x338>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d826      	bhi.n	8005030 <UART_SetConfig+0x2cc>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x284>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e180      	b.n	800530a <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e17c      	b.n	800530a <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e178      	b.n	800530a <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e174      	b.n	800530a <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e170      	b.n	800530a <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e16c      	b.n	800530a <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e168      	b.n	800530a <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <UART_SetConfig+0x348>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d142      	bne.n	80050c8 <UART_SetConfig+0x364>
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <UART_SetConfig+0x338>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d838      	bhi.n	80050c0 <UART_SetConfig+0x35c>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x2f0>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	080050b1 	.word	0x080050b1
 8005068:	080050b9 	.word	0x080050b9
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e14a      	b.n	800530a <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e146      	b.n	800530a <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e142      	b.n	800530a <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e13e      	b.n	800530a <UART_SetConfig+0x5a6>
 800508c:	cfff69f3 	.word	0xcfff69f3
 8005090:	58000c00 	.word	0x58000c00
 8005094:	11fff4ff 	.word	0x11fff4ff
 8005098:	40011000 	.word	0x40011000
 800509c:	58024400 	.word	0x58024400
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40004c00 	.word	0x40004c00
 80050ac:	40005000 	.word	0x40005000
 80050b0:	2320      	movs	r3, #32
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e128      	b.n	800530a <UART_SetConfig+0x5a6>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e124      	b.n	800530a <UART_SetConfig+0x5a6>
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e120      	b.n	800530a <UART_SetConfig+0x5a6>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4acb      	ldr	r2, [pc, #812]	; (80053fc <UART_SetConfig+0x698>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d176      	bne.n	80051c0 <UART_SetConfig+0x45c>
 80050d2:	4bcb      	ldr	r3, [pc, #812]	; (8005400 <UART_SetConfig+0x69c>)
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050da:	2b28      	cmp	r3, #40	; 0x28
 80050dc:	d86c      	bhi.n	80051b8 <UART_SetConfig+0x454>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x380>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005189 	.word	0x08005189
 80050e8:	080051b9 	.word	0x080051b9
 80050ec:	080051b9 	.word	0x080051b9
 80050f0:	080051b9 	.word	0x080051b9
 80050f4:	080051b9 	.word	0x080051b9
 80050f8:	080051b9 	.word	0x080051b9
 80050fc:	080051b9 	.word	0x080051b9
 8005100:	080051b9 	.word	0x080051b9
 8005104:	08005191 	.word	0x08005191
 8005108:	080051b9 	.word	0x080051b9
 800510c:	080051b9 	.word	0x080051b9
 8005110:	080051b9 	.word	0x080051b9
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051b9 	.word	0x080051b9
 800511c:	080051b9 	.word	0x080051b9
 8005120:	080051b9 	.word	0x080051b9
 8005124:	08005199 	.word	0x08005199
 8005128:	080051b9 	.word	0x080051b9
 800512c:	080051b9 	.word	0x080051b9
 8005130:	080051b9 	.word	0x080051b9
 8005134:	080051b9 	.word	0x080051b9
 8005138:	080051b9 	.word	0x080051b9
 800513c:	080051b9 	.word	0x080051b9
 8005140:	080051b9 	.word	0x080051b9
 8005144:	080051a1 	.word	0x080051a1
 8005148:	080051b9 	.word	0x080051b9
 800514c:	080051b9 	.word	0x080051b9
 8005150:	080051b9 	.word	0x080051b9
 8005154:	080051b9 	.word	0x080051b9
 8005158:	080051b9 	.word	0x080051b9
 800515c:	080051b9 	.word	0x080051b9
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051a9 	.word	0x080051a9
 8005168:	080051b9 	.word	0x080051b9
 800516c:	080051b9 	.word	0x080051b9
 8005170:	080051b9 	.word	0x080051b9
 8005174:	080051b9 	.word	0x080051b9
 8005178:	080051b9 	.word	0x080051b9
 800517c:	080051b9 	.word	0x080051b9
 8005180:	080051b9 	.word	0x080051b9
 8005184:	080051b1 	.word	0x080051b1
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e0bc      	b.n	800530a <UART_SetConfig+0x5a6>
 8005190:	2304      	movs	r3, #4
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e0b8      	b.n	800530a <UART_SetConfig+0x5a6>
 8005198:	2308      	movs	r3, #8
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e0b4      	b.n	800530a <UART_SetConfig+0x5a6>
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e0b0      	b.n	800530a <UART_SetConfig+0x5a6>
 80051a8:	2320      	movs	r3, #32
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e0ac      	b.n	800530a <UART_SetConfig+0x5a6>
 80051b0:	2340      	movs	r3, #64	; 0x40
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e0a8      	b.n	800530a <UART_SetConfig+0x5a6>
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e0a4      	b.n	800530a <UART_SetConfig+0x5a6>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a8f      	ldr	r2, [pc, #572]	; (8005404 <UART_SetConfig+0x6a0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d130      	bne.n	800522c <UART_SetConfig+0x4c8>
 80051ca:	4b8d      	ldr	r3, [pc, #564]	; (8005400 <UART_SetConfig+0x69c>)
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	d826      	bhi.n	8005224 <UART_SetConfig+0x4c0>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x478>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051f5 	.word	0x080051f5
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	08005205 	.word	0x08005205
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e086      	b.n	800530a <UART_SetConfig+0x5a6>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e082      	b.n	800530a <UART_SetConfig+0x5a6>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e07e      	b.n	800530a <UART_SetConfig+0x5a6>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e07a      	b.n	800530a <UART_SetConfig+0x5a6>
 8005214:	2320      	movs	r3, #32
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e076      	b.n	800530a <UART_SetConfig+0x5a6>
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e072      	b.n	800530a <UART_SetConfig+0x5a6>
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e06e      	b.n	800530a <UART_SetConfig+0x5a6>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a75      	ldr	r2, [pc, #468]	; (8005408 <UART_SetConfig+0x6a4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d130      	bne.n	8005298 <UART_SetConfig+0x534>
 8005236:	4b72      	ldr	r3, [pc, #456]	; (8005400 <UART_SetConfig+0x69c>)
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	2b05      	cmp	r3, #5
 8005240:	d826      	bhi.n	8005290 <UART_SetConfig+0x52c>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x4e4>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	08005261 	.word	0x08005261
 800524c:	08005269 	.word	0x08005269
 8005250:	08005271 	.word	0x08005271
 8005254:	08005279 	.word	0x08005279
 8005258:	08005281 	.word	0x08005281
 800525c:	08005289 	.word	0x08005289
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e050      	b.n	800530a <UART_SetConfig+0x5a6>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e04c      	b.n	800530a <UART_SetConfig+0x5a6>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e048      	b.n	800530a <UART_SetConfig+0x5a6>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e044      	b.n	800530a <UART_SetConfig+0x5a6>
 8005280:	2320      	movs	r3, #32
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e040      	b.n	800530a <UART_SetConfig+0x5a6>
 8005288:	2340      	movs	r3, #64	; 0x40
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e03c      	b.n	800530a <UART_SetConfig+0x5a6>
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e038      	b.n	800530a <UART_SetConfig+0x5a6>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5b      	ldr	r2, [pc, #364]	; (800540c <UART_SetConfig+0x6a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d130      	bne.n	8005304 <UART_SetConfig+0x5a0>
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <UART_SetConfig+0x69c>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d826      	bhi.n	80052fc <UART_SetConfig+0x598>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x550>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e01a      	b.n	800530a <UART_SetConfig+0x5a6>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e016      	b.n	800530a <UART_SetConfig+0x5a6>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e012      	b.n	800530a <UART_SetConfig+0x5a6>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e00e      	b.n	800530a <UART_SetConfig+0x5a6>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e00a      	b.n	800530a <UART_SetConfig+0x5a6>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e006      	b.n	800530a <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e002      	b.n	800530a <UART_SetConfig+0x5a6>
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3f      	ldr	r2, [pc, #252]	; (800540c <UART_SetConfig+0x6a8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	f040 80f8 	bne.w	8005506 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005316:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800531a:	2b20      	cmp	r3, #32
 800531c:	dc46      	bgt.n	80053ac <UART_SetConfig+0x648>
 800531e:	2b02      	cmp	r3, #2
 8005320:	f2c0 8082 	blt.w	8005428 <UART_SetConfig+0x6c4>
 8005324:	3b02      	subs	r3, #2
 8005326:	2b1e      	cmp	r3, #30
 8005328:	d87e      	bhi.n	8005428 <UART_SetConfig+0x6c4>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x5cc>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	080053b3 	.word	0x080053b3
 8005334:	08005429 	.word	0x08005429
 8005338:	080053bb 	.word	0x080053bb
 800533c:	08005429 	.word	0x08005429
 8005340:	08005429 	.word	0x08005429
 8005344:	08005429 	.word	0x08005429
 8005348:	080053cb 	.word	0x080053cb
 800534c:	08005429 	.word	0x08005429
 8005350:	08005429 	.word	0x08005429
 8005354:	08005429 	.word	0x08005429
 8005358:	08005429 	.word	0x08005429
 800535c:	08005429 	.word	0x08005429
 8005360:	08005429 	.word	0x08005429
 8005364:	08005429 	.word	0x08005429
 8005368:	080053db 	.word	0x080053db
 800536c:	08005429 	.word	0x08005429
 8005370:	08005429 	.word	0x08005429
 8005374:	08005429 	.word	0x08005429
 8005378:	08005429 	.word	0x08005429
 800537c:	08005429 	.word	0x08005429
 8005380:	08005429 	.word	0x08005429
 8005384:	08005429 	.word	0x08005429
 8005388:	08005429 	.word	0x08005429
 800538c:	08005429 	.word	0x08005429
 8005390:	08005429 	.word	0x08005429
 8005394:	08005429 	.word	0x08005429
 8005398:	08005429 	.word	0x08005429
 800539c:	08005429 	.word	0x08005429
 80053a0:	08005429 	.word	0x08005429
 80053a4:	08005429 	.word	0x08005429
 80053a8:	0800541b 	.word	0x0800541b
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d037      	beq.n	8005420 <UART_SetConfig+0x6bc>
 80053b0:	e03a      	b.n	8005428 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053b2:	f7fe ff13 	bl	80041dc <HAL_RCCEx_GetD3PCLK1Freq>
 80053b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053b8:	e03c      	b.n	8005434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe ff22 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c8:	e034      	b.n	8005434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff f86e 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d8:	e02c      	b.n	8005434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <UART_SetConfig+0x69c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <UART_SetConfig+0x69c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	4a07      	ldr	r2, [pc, #28]	; (8005410 <UART_SetConfig+0x6ac>)
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f8:	e01c      	b.n	8005434 <UART_SetConfig+0x6d0>
 80053fa:	bf00      	nop
 80053fc:	40011400 	.word	0x40011400
 8005400:	58024400 	.word	0x58024400
 8005404:	40007800 	.word	0x40007800
 8005408:	40007c00 	.word	0x40007c00
 800540c:	58000c00 	.word	0x58000c00
 8005410:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005414:	4b9d      	ldr	r3, [pc, #628]	; (800568c <UART_SetConfig+0x928>)
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005418:	e00c      	b.n	8005434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800541a:	4b9d      	ldr	r3, [pc, #628]	; (8005690 <UART_SetConfig+0x92c>)
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541e:	e009      	b.n	8005434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005426:	e005      	b.n	8005434 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005432:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 81de 	beq.w	80057f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	4a94      	ldr	r2, [pc, #592]	; (8005694 <UART_SetConfig+0x930>)
 8005442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005446:	461a      	mov	r2, r3
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	fbb3 f3f2 	udiv	r3, r3, r2
 800544e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545c:	429a      	cmp	r2, r3
 800545e:	d305      	bcc.n	800546c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005468:	429a      	cmp	r2, r3
 800546a:	d903      	bls.n	8005474 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005472:	e1c1      	b.n	80057f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005476:	2200      	movs	r2, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	60fa      	str	r2, [r7, #12]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	4a84      	ldr	r2, [pc, #528]	; (8005694 <UART_SetConfig+0x930>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	b29b      	uxth	r3, r3
 8005488:	2200      	movs	r2, #0
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005496:	f7fa ff1f 	bl	80002d8 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	020b      	lsls	r3, r1, #8
 80054ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054b0:	0202      	lsls	r2, r0, #8
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	6849      	ldr	r1, [r1, #4]
 80054b6:	0849      	lsrs	r1, r1, #1
 80054b8:	2000      	movs	r0, #0
 80054ba:	460c      	mov	r4, r1
 80054bc:	4605      	mov	r5, r0
 80054be:	eb12 0804 	adds.w	r8, r2, r4
 80054c2:	eb43 0905 	adc.w	r9, r3, r5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	469a      	mov	sl, r3
 80054ce:	4693      	mov	fp, r2
 80054d0:	4652      	mov	r2, sl
 80054d2:	465b      	mov	r3, fp
 80054d4:	4640      	mov	r0, r8
 80054d6:	4649      	mov	r1, r9
 80054d8:	f7fa fefe 	bl	80002d8 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ea:	d308      	bcc.n	80054fe <UART_SetConfig+0x79a>
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f2:	d204      	bcs.n	80054fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fa:	60da      	str	r2, [r3, #12]
 80054fc:	e17c      	b.n	80057f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005504:	e178      	b.n	80057f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	f040 80c5 	bne.w	800569c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005512:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005516:	2b20      	cmp	r3, #32
 8005518:	dc48      	bgt.n	80055ac <UART_SetConfig+0x848>
 800551a:	2b00      	cmp	r3, #0
 800551c:	db7b      	blt.n	8005616 <UART_SetConfig+0x8b2>
 800551e:	2b20      	cmp	r3, #32
 8005520:	d879      	bhi.n	8005616 <UART_SetConfig+0x8b2>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x7c4>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055bb 	.word	0x080055bb
 8005530:	08005617 	.word	0x08005617
 8005534:	08005617 	.word	0x08005617
 8005538:	080055c3 	.word	0x080055c3
 800553c:	08005617 	.word	0x08005617
 8005540:	08005617 	.word	0x08005617
 8005544:	08005617 	.word	0x08005617
 8005548:	080055d3 	.word	0x080055d3
 800554c:	08005617 	.word	0x08005617
 8005550:	08005617 	.word	0x08005617
 8005554:	08005617 	.word	0x08005617
 8005558:	08005617 	.word	0x08005617
 800555c:	08005617 	.word	0x08005617
 8005560:	08005617 	.word	0x08005617
 8005564:	08005617 	.word	0x08005617
 8005568:	080055e3 	.word	0x080055e3
 800556c:	08005617 	.word	0x08005617
 8005570:	08005617 	.word	0x08005617
 8005574:	08005617 	.word	0x08005617
 8005578:	08005617 	.word	0x08005617
 800557c:	08005617 	.word	0x08005617
 8005580:	08005617 	.word	0x08005617
 8005584:	08005617 	.word	0x08005617
 8005588:	08005617 	.word	0x08005617
 800558c:	08005617 	.word	0x08005617
 8005590:	08005617 	.word	0x08005617
 8005594:	08005617 	.word	0x08005617
 8005598:	08005617 	.word	0x08005617
 800559c:	08005617 	.word	0x08005617
 80055a0:	08005617 	.word	0x08005617
 80055a4:	08005617 	.word	0x08005617
 80055a8:	08005609 	.word	0x08005609
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d02e      	beq.n	800560e <UART_SetConfig+0x8aa>
 80055b0:	e031      	b.n	8005616 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b2:	f7fd f9cf 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 80055b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b8:	e033      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ba:	f7fd f9e1 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 80055be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055c0:	e02f      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fe1e 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d0:	e027      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d2:	f107 0318 	add.w	r3, r7, #24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe ff6a 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e0:	e01f      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e2:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <UART_SetConfig+0x934>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <UART_SetConfig+0x934>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <UART_SetConfig+0x928>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005600:	e00f      	b.n	8005622 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <UART_SetConfig+0x928>)
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005606:	e00c      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005608:	4b21      	ldr	r3, [pc, #132]	; (8005690 <UART_SetConfig+0x92c>)
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e009      	b.n	8005622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005614:	e005      	b.n	8005622 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80e7 	beq.w	80057f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <UART_SetConfig+0x930>)
 8005630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005634:	461a      	mov	r2, r3
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	fbb3 f3f2 	udiv	r3, r3, r2
 800563c:	005a      	lsls	r2, r3, #1
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	441a      	add	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b0f      	cmp	r3, #15
 8005654:	d916      	bls.n	8005684 <UART_SetConfig+0x920>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d212      	bcs.n	8005684 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	b29b      	uxth	r3, r3
 8005662:	f023 030f 	bic.w	r3, r3, #15
 8005666:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	b29a      	uxth	r2, r3
 8005674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005676:	4313      	orrs	r3, r2
 8005678:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	e0b9      	b.n	80057f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800568a:	e0b5      	b.n	80057f8 <UART_SetConfig+0xa94>
 800568c:	03d09000 	.word	0x03d09000
 8005690:	003d0900 	.word	0x003d0900
 8005694:	08005e24 	.word	0x08005e24
 8005698:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800569c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	dc49      	bgt.n	8005738 <UART_SetConfig+0x9d4>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db7c      	blt.n	80057a2 <UART_SetConfig+0xa3e>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d87a      	bhi.n	80057a2 <UART_SetConfig+0xa3e>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x950>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	08005747 	.word	0x08005747
 80056bc:	080057a3 	.word	0x080057a3
 80056c0:	080057a3 	.word	0x080057a3
 80056c4:	0800574f 	.word	0x0800574f
 80056c8:	080057a3 	.word	0x080057a3
 80056cc:	080057a3 	.word	0x080057a3
 80056d0:	080057a3 	.word	0x080057a3
 80056d4:	0800575f 	.word	0x0800575f
 80056d8:	080057a3 	.word	0x080057a3
 80056dc:	080057a3 	.word	0x080057a3
 80056e0:	080057a3 	.word	0x080057a3
 80056e4:	080057a3 	.word	0x080057a3
 80056e8:	080057a3 	.word	0x080057a3
 80056ec:	080057a3 	.word	0x080057a3
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	0800576f 	.word	0x0800576f
 80056f8:	080057a3 	.word	0x080057a3
 80056fc:	080057a3 	.word	0x080057a3
 8005700:	080057a3 	.word	0x080057a3
 8005704:	080057a3 	.word	0x080057a3
 8005708:	080057a3 	.word	0x080057a3
 800570c:	080057a3 	.word	0x080057a3
 8005710:	080057a3 	.word	0x080057a3
 8005714:	080057a3 	.word	0x080057a3
 8005718:	080057a3 	.word	0x080057a3
 800571c:	080057a3 	.word	0x080057a3
 8005720:	080057a3 	.word	0x080057a3
 8005724:	080057a3 	.word	0x080057a3
 8005728:	080057a3 	.word	0x080057a3
 800572c:	080057a3 	.word	0x080057a3
 8005730:	080057a3 	.word	0x080057a3
 8005734:	08005795 	.word	0x08005795
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d02e      	beq.n	800579a <UART_SetConfig+0xa36>
 800573c:	e031      	b.n	80057a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573e:	f7fd f909 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8005742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005744:	e033      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005746:	f7fd f91b 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 800574a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800574c:	e02f      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fd58 	bl	8004208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800575c:	e027      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575e:	f107 0318 	add.w	r3, r7, #24
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fea4 	bl	80044b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800576c:	e01f      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576e:	4b2d      	ldr	r3, [pc, #180]	; (8005824 <UART_SetConfig+0xac0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800577a:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <UART_SetConfig+0xac0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	4a28      	ldr	r2, [pc, #160]	; (8005828 <UART_SetConfig+0xac4>)
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800578c:	e00f      	b.n	80057ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <UART_SetConfig+0xac4>)
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005792:	e00c      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <UART_SetConfig+0xac8>)
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005798:	e009      	b.n	80057ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a0:	e005      	b.n	80057ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057ac:	bf00      	nop
    }

    if (pclk != 0U)
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d021      	beq.n	80057f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <UART_SetConfig+0xacc>)
 80057ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057be:	461a      	mov	r2, r3
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	441a      	add	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d909      	bls.n	80057f2 <UART_SetConfig+0xa8e>
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d205      	bcs.n	80057f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	e002      	b.n	80057f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2201      	movs	r2, #1
 8005804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005814:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005818:	4618      	mov	r0, r3
 800581a:	3748      	adds	r7, #72	; 0x48
 800581c:	46bd      	mov	sp, r7
 800581e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	08005e24 	.word	0x08005e24

08005834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01a      	beq.n	800594a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005932:	d10a      	bne.n	800594a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005988:	f7fb fabe 	bl	8000f08 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d10e      	bne.n	80059ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f82f 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e025      	b.n	8005a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d10e      	bne.n	80059e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f819 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e00f      	b.n	8005a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	e0a9      	b.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	f000 80a5 	beq.w	8005b74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fb fa6d 	bl	8000f08 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d140      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a54:	667b      	str	r3, [r7, #100]	; 0x64
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e6      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e069      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d051      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ade:	d149      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b3c:	623a      	str	r2, [r7, #32]
 8005b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e010      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	f43f af46 	beq.w	8005a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3770      	adds	r7, #112	; 0x70
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e027      	b.n	8005c04 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005be2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e02d      	b.n	8005c84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f84f 	bl	8005d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e02d      	b.n	8005d00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	; 0x24
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f811 	bl	8005d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d108      	bne.n	8005d2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d28:	e031      	b.n	8005d8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d2e:	2310      	movs	r3, #16
 8005d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	0e5b      	lsrs	r3, r3, #25
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	0f5b      	lsrs	r3, r3, #29
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	7b3a      	ldrb	r2, [r7, #12]
 8005d56:	4911      	ldr	r1, [pc, #68]	; (8005d9c <UARTEx_SetNbDataToProcess+0x94>)
 8005d58:	5c8a      	ldrb	r2, [r1, r2]
 8005d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d5e:	7b3a      	ldrb	r2, [r7, #12]
 8005d60:	490f      	ldr	r1, [pc, #60]	; (8005da0 <UARTEx_SetNbDataToProcess+0x98>)
 8005d62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	7b7a      	ldrb	r2, [r7, #13]
 8005d74:	4909      	ldr	r1, [pc, #36]	; (8005d9c <UARTEx_SetNbDataToProcess+0x94>)
 8005d76:	5c8a      	ldrb	r2, [r1, r2]
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d7c:	7b7a      	ldrb	r2, [r7, #13]
 8005d7e:	4908      	ldr	r1, [pc, #32]	; (8005da0 <UARTEx_SetNbDataToProcess+0x98>)
 8005d80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	08005e3c 	.word	0x08005e3c
 8005da0:	08005e44 	.word	0x08005e44

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4d0d      	ldr	r5, [pc, #52]	; (8005ddc <__libc_init_array+0x38>)
 8005da8:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005daa:	1b64      	subs	r4, r4, r5
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	2600      	movs	r6, #0
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	4d0b      	ldr	r5, [pc, #44]	; (8005de4 <__libc_init_array+0x40>)
 8005db6:	4c0c      	ldr	r4, [pc, #48]	; (8005de8 <__libc_init_array+0x44>)
 8005db8:	f000 f820 	bl	8005dfc <_init>
 8005dbc:	1b64      	subs	r4, r4, r5
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dcc:	4798      	blx	r3
 8005dce:	3601      	adds	r6, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd6:	4798      	blx	r3
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	08005e54 	.word	0x08005e54
 8005de0:	08005e54 	.word	0x08005e54
 8005de4:	08005e54 	.word	0x08005e54
 8005de8:	08005e58 	.word	0x08005e58

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <_init>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr

08005e08 <_fini>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr
