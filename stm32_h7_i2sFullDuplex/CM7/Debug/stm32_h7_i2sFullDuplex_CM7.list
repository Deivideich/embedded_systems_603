
stm32_h7_i2sFullDuplex_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e44  08005e44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e4c  08005e4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  24000010  08005e64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000194  08005e64  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fa5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a0  00000000  00000000  00031026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000973  00000000  00000000  00033d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038b82  00000000  00000000  00034683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001095f  00000000  00000000  0006d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00178f48  00000000  00000000  0007db64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003284  00000000  00000000  001f6aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001f9d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005df4 	.word	0x08005df4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005df4 	.word	0x08005df4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <main+0xac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 f9c3 	bl	8000ab4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fb61 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f841 	bl	80007b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <main+0xac>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <main+0xac>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0xac>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fe99 	bl	800148c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f000 feaf 	bl	80014c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <main+0xac>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f995 	bl	8000ab4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f911 	bl	80009b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800078e:	f000 f8c3 	bl	8000918 <MX_USART3_UART_Init>
  MX_I2S3_Init();
 8000792:	f000 f88b 	bl	80008ac <MX_I2S3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_I2SEx_TransmitReceive(&hi2s3, txbuff, txbuff, 2, HAL_MAX_DELAY);
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <main+0xb0>)
 80007a0:	4903      	ldr	r1, [pc, #12]	; (80007b0 <main+0xb0>)
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <main+0xb4>)
 80007a4:	f000 ffc0 	bl	8001728 <HAL_I2SEx_TransmitReceive>
 80007a8:	e7f5      	b.n	8000796 <main+0x96>
 80007aa:	bf00      	nop
 80007ac:	58024400 	.word	0x58024400
 80007b0:	24000110 	.word	0x24000110
 80007b4:	2400002c 	.word	0x2400002c

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	224c      	movs	r2, #76	; 0x4c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 fae8 	bl	8005d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fae2 	bl	8005d9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d8:	2004      	movs	r0, #4
 80007da:	f001 f8cf 	bl	800197c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <SystemClock_Config+0xec>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <SystemClock_Config+0xec>)
 80007e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ec:	6193      	str	r3, [r2, #24]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <SystemClock_Config+0xec>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SystemClock_Config+0xf0>)
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <SystemClock_Config+0xf0>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0xf0>)
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000810:	bf00      	nop
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <SystemClock_Config+0xec>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081e:	d1f8      	bne.n	8000812 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000836:	2378      	movs	r3, #120	; 0x78
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000846:	230c      	movs	r3, #12
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084a:	2300      	movs	r3, #0
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f8ea 	bl	8001a30 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000862:	f000 f927 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	233f      	movs	r3, #63	; 0x3f
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000872:	2308      	movs	r3, #8
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2104      	movs	r1, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fcfd 	bl	800228c <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000898:	f000 f90c 	bl	8000ab4 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024800 	.word	0x58024800
 80008a8:	58000400 	.word	0x58000400

080008ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_I2S3_Init+0x60>)
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_I2S3_Init+0x64>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_I2S3_Init+0x60>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_I2S3_Init+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2S3_Init+0x60>)
 80008c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_I2S3_Init+0x60>)
 80008cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2S3_Init+0x60>)
 80008d4:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_I2S3_Init+0x68>)
 80008d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_I2S3_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_I2S3_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2S3_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_I2S3_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_I2S3_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2S3_Init+0x60>)
 80008f8:	f000 fdf6 	bl	80014e8 <HAL_I2S_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2S3_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 f8d7 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2400002c 	.word	0x2400002c
 8000910:	40003c00 	.word	0x40003c00
 8000914:	00017700 	.word	0x00017700

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <MX_USART3_UART_Init+0x94>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000962:	f004 f9ab 	bl	8004cbc <HAL_UART_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800096c:	f000 f8a2 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000974:	f005 f948 	bl	8005c08 <HAL_UARTEx_SetTxFifoThreshold>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800097e:	f000 f899 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000986:	f005 f97d 	bl	8005c84 <HAL_UARTEx_SetRxFifoThreshold>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 f890 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000996:	f005 f8fe 	bl	8005b96 <HAL_UARTEx_DisableFifoMode>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f000 f888 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	24000080 	.word	0x24000080
 80009ac:	40004800 	.word	0x40004800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a64:	f000 fcf8 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a7e:	f000 fb3b 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000a82:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a9c:	f000 fb2c 	bl	80010f8 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020400 	.word	0x58020400
 8000ab0:	58020800 	.word	0x58020800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x30>)
 8000ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x30>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	58024400 	.word	0x58024400

08000af4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ba      	sub	sp, #232	; 0xe8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	22bc      	movs	r2, #188	; 0xbc
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 f941 	bl	8005d9c <memset>
  if(hi2s->Instance==SPI3)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a53      	ldr	r2, [pc, #332]	; (8000c6c <HAL_I2S_MspInit+0x178>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	f040 809f 	bne.w	8000c64 <HAL_I2S_MspInit+0x170>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 ff35 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b40:	f7ff ffb8 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b44:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b4a:	4a49      	ldr	r2, [pc, #292]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a41      	ldr	r2, [pc, #260]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a3a      	ldr	r2, [pc, #232]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_I2S_MspInit+0x17c>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PB3 (JTDO/TRACESWO)     ------> I2S3_CK
    PB4 (NJTRST)     ------> I2S3_SDI
    PB5     ------> I2S3_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4824      	ldr	r0, [pc, #144]	; (8000c74 <HAL_I2S_MspInit+0x180>)
 8000be2:	f000 fa89 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481b      	ldr	r0, [pc, #108]	; (8000c78 <HAL_I2S_MspInit+0x184>)
 8000c0c:	f000 fa74 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c10:	2318      	movs	r3, #24
 8000c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <HAL_I2S_MspInit+0x188>)
 8000c36:	f000 fa5f 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000c52:	2307      	movs	r3, #7
 8000c54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <HAL_I2S_MspInit+0x188>)
 8000c60:	f000 fa4a 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	37e8      	adds	r7, #232	; 0xe8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40003c00 	.word	0x40003c00
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020000 	.word	0x58020000
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020400 	.word	0x58020400

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b8      	sub	sp, #224	; 0xe0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	22bc      	movs	r2, #188	; 0xbc
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 f87b 	bl	8005d9c <memset>
  if(huart->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <HAL_UART_MspInit+0xc0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d142      	bne.n	8000d36 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fe70 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff fef3 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0xc8>)
 8000d32:	f000 f9e1 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	37e0      	adds	r7, #224	; 0xe0
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004800 	.word	0x40004800
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020c00 	.word	0x58020c00

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f89e 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f7ff fc16 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 ffed 	bl	8005dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc95 	bl	8000700 <main>
  bx  lr
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ddc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000de4:	08005e54 	.word	0x08005e54
  ldr r2, =_sbss
 8000de8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dec:	24000194 	.word	0x24000194

08000df0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC3_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f94a 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e00:	f001 fbfa 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	4913      	ldr	r1, [pc, #76]	; (8000e60 <HAL_Init+0x6c>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_Init+0x6c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_Init+0x70>)
 8000e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_Init+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f814 	bl	8000e6c <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e002      	b.n	8000e54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4e:	f7ff fe37 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	08005e0c 	.word	0x08005e0c
 8000e64:	24000004 	.word	0x24000004
 8000e68:	24000000 	.word	0x24000000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e021      	b.n	8000ec4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_InitTick+0x64>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f921 	bl	80010de <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f8f9 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x68>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400000c 	.word	0x2400000c
 8000ed0:	24000000 	.word	0x24000000
 8000ed4:	24000008 	.word	0x24000008

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2400000c 	.word	0x2400000c
 8000efc:	24000190 	.word	0x24000190

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	24000190 	.word	0x24000190

08000f18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetREVID+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0c1b      	lsrs	r3, r3, #16
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	5c001000 	.word	0x5c001000

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	05fa0000 	.word	0x05fa0000

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb2 	bl	8001050 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001106:	4b89      	ldr	r3, [pc, #548]	; (800132c <HAL_GPIO_Init+0x234>)
 8001108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800110a:	e194      	b.n	8001436 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8186 	beq.w	8001430 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_GPIO_Init+0x44>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d130      	bne.n	800119e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001172:	2201      	movs	r2, #1
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 0201 	and.w	r2, r3, #1
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d017      	beq.n	80011da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	69b9      	ldr	r1, [r7, #24]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0203 	and.w	r2, r3, #3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80e0 	beq.w	8001430 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_GPIO_Init+0x238>)
 8001272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <HAL_GPIO_Init+0x238>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_GPIO_Init+0x238>)
 8001282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_GPIO_Init+0x23c>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <HAL_GPIO_Init+0x240>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d052      	beq.n	8001360 <HAL_GPIO_Init+0x268>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_GPIO_Init+0x244>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d031      	beq.n	8001326 <HAL_GPIO_Init+0x22e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x248>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x22a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_GPIO_Init+0x24c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x250>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <HAL_GPIO_Init+0x254>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <HAL_GPIO_Init+0x258>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x25c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <HAL_GPIO_Init+0x260>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_GPIO_Init+0x264>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x20e>
 8001302:	2309      	movs	r3, #9
 8001304:	e02d      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 8001306:	230a      	movs	r3, #10
 8001308:	e02b      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 800130a:	2308      	movs	r3, #8
 800130c:	e029      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 800130e:	2307      	movs	r3, #7
 8001310:	e027      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 8001312:	2306      	movs	r3, #6
 8001314:	e025      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 8001316:	2305      	movs	r3, #5
 8001318:	e023      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 800131a:	2304      	movs	r3, #4
 800131c:	e021      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 800131e:	2303      	movs	r3, #3
 8001320:	e01f      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 8001322:	2302      	movs	r3, #2
 8001324:	e01d      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 8001326:	2301      	movs	r3, #1
 8001328:	e01b      	b.n	8001362 <HAL_GPIO_Init+0x26a>
 800132a:	bf00      	nop
 800132c:	58000080 	.word	0x58000080
 8001330:	58024400 	.word	0x58024400
 8001334:	58000400 	.word	0x58000400
 8001338:	58020000 	.word	0x58020000
 800133c:	58020400 	.word	0x58020400
 8001340:	58020800 	.word	0x58020800
 8001344:	58020c00 	.word	0x58020c00
 8001348:	58021000 	.word	0x58021000
 800134c:	58021400 	.word	0x58021400
 8001350:	58021800 	.word	0x58021800
 8001354:	58021c00 	.word	0x58021c00
 8001358:	58022000 	.word	0x58022000
 800135c:	58022400 	.word	0x58022400
 8001360:	2300      	movs	r3, #0
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001372:	4938      	ldr	r1, [pc, #224]	; (8001454 <HAL_GPIO_Init+0x35c>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	3301      	adds	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f ae63 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3724      	adds	r7, #36	; 0x24
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	58000400 	.word	0x58000400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_HSEM_FastTake+0x2c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3320      	adds	r3, #32
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_HSEM_FastTake+0x30>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e000      	b.n	80014aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	58026400 	.word	0x58026400
 80014bc:	80000300 	.word	0x80000300

080014c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014ca:	4906      	ldr	r1, [pc, #24]	; (80014e4 <HAL_HSEM_Release+0x24>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58026400 	.word	0x58026400

080014e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e10b      	b.n	8001712 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff faf0 	bl	8000af4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d008      	beq.n	800155c <HAL_I2S_Init+0x74>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d004      	beq.n	800155c <HAL_I2S_Init+0x74>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	f040 8085 	bne.w	8001666 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d058      	beq.n	8001616 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800156c:	2302      	movs	r3, #2
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e001      	b.n	8001576 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b30      	cmp	r3, #48	; 0x30
 800157c:	d003      	beq.n	8001586 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001582:	2bb0      	cmp	r3, #176	; 0xb0
 8001584:	d102      	bne.n	800158c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e001      	b.n	8001590 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001590:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001594:	f002 f94c 	bl	8003830 <HAL_RCCEx_GetPeriphCLKFreq>
 8001598:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015a2:	d113      	bne.n	80015cc <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80015a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	3305      	adds	r3, #5
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	e014      	b.n	80015f6 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80015cc:	2220      	movs	r2, #32
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	3305      	adds	r3, #5
 80015f4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_I2S_Init+0x234>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	e003      	b.n	800161e <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_I2S_Init+0x142>
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <HAL_I2S_Init+0x148>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2bff      	cmp	r3, #255	; 0xff
 800162e:	d907      	bls.n	8001640 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001634:	f043 0210 	orr.w	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e068      	b.n	8001712 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_I2S_Init+0x238>)
 8001652:	4013      	ands	r3, r2
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	0411      	lsls	r1, r2, #16
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	0612      	lsls	r2, r2, #24
 800165c:	4311      	orrs	r1, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	430b      	orrs	r3, r1
 8001664:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_I2S_Init+0x23c>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6851      	ldr	r1, [r2, #4]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6892      	ldr	r2, [r2, #8]
 8001678:	4311      	orrs	r1, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	4311      	orrs	r1, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6992      	ldr	r2, [r2, #24]
 8001684:	4311      	orrs	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a12      	ldr	r2, [r2, #32]
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6912      	ldr	r2, [r2, #16]
 8001696:	430a      	orrs	r2, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f640 72f8 	movw	r2, #4088	; 0xff8
 80016ac:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016bc:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d007      	beq.n	80016ec <HAL_I2S_Init+0x204>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d003      	beq.n	80016ec <HAL_I2S_Init+0x204>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b0a      	cmp	r3, #10
 80016ea:	d10a      	bne.n	8001702 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	cccccccd 	.word	0xcccccccd
 8001720:	fe00ffff 	.word	0xfe00ffff
 8001724:	fdff9040 	.word	0xfdff9040

08001728 <HAL_I2SEx_TransmitReceive>:
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2SEx_TransmitReceive(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                            uint16_t Size, uint32_t Timeout)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
  uint32_t tmp_RxXferCount;
  uint32_t tickstart;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3320      	adds	r3, #32
 800173c:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->RXDR));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3330      	adds	r3, #48	; 0x30
 8001744:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_I2SEx_TransmitReceive+0x30>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_I2SEx_TransmitReceive+0x30>
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_I2SEx_TransmitReceive+0x34>
  {
    return  HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e10a      	b.n	8001972 <HAL_I2SEx_TransmitReceive+0x24a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d001      	beq.n	800176c <HAL_I2SEx_TransmitReceive+0x44>
  {
    return HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	e102      	b.n	8001972 <HAL_I2SEx_TransmitReceive+0x24a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2SEx_TransmitReceive+0x54>
 8001778:	2302      	movs	r3, #2
 800177a:	e0fa      	b.n	8001972 <HAL_I2SEx_TransmitReceive+0x24a>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001784:	f7ff fbbc 	bl	8000f00 <HAL_GetTick>
 8001788:	6178      	str	r0, [r7, #20]

  hi2s->TxXferSize  = Size;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	887a      	ldrh	r2, [r7, #2]
 800178e:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->pTxBuffPtr  = pTxData;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferSize  = Size;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	875a      	strh	r2, [r3, #58]	; 0x3a
  hi2s->pRxBuffPtr  = pRxData;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34

  tmp_TxXferCount = hi2s->TxXferCount;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_RxXferCount = hi2s->RxXferCount;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	623b      	str	r3, [r7, #32]

  /* Set state and reset error code */
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State = HAL_I2S_STATE_BUSY_TX_RX;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2205      	movs	r2, #5
 80017c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d007      	beq.n	80017ea <HAL_I2SEx_TransmitReceive+0xc2>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f8:	601a      	str	r2, [r3, #0]

  while ((tmp_TxXferCount > 0UL) || (tmp_RxXferCount > 0UL))
 80017fa:	e0a9      	b.n	8001950 <HAL_I2SEx_TransmitReceive+0x228>
  {
    if ((__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_TXP) == SET) && (tmp_TxXferCount != 0UL))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d13d      	bne.n	8001886 <HAL_I2SEx_TransmitReceive+0x15e>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03a      	beq.n	8001886 <HAL_I2SEx_TransmitReceive+0x15e>
    {
      if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001818:	d004      	beq.n	8001824 <HAL_I2SEx_TransmitReceive+0xfc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001822:	d10e      	bne.n	8001842 <HAL_I2SEx_TransmitReceive+0x11a>
      {
        /* Transmit data in 32 Bit mode */
        hi2s->Instance->TXDR = *((uint32_t *)hi2s->pTxBuffPtr);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	621a      	str	r2, [r3, #32]
        hi2s->pTxBuffPtr += 2;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	1d1a      	adds	r2, r3, #4
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
        tmp_TxXferCount--;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	3b01      	subs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e00c      	b.n	800185c <HAL_I2SEx_TransmitReceive+0x134>
      }
      else
      {
        /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hi2s->pTxBuffPtr);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

        hi2s->pTxBuffPtr++;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	1c9a      	adds	r2, r3, #2
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
        tmp_TxXferCount--;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	3b01      	subs	r3, #1
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      /* Check if an underrun occurs */
      if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b20      	cmp	r3, #32
 8001868:	d10d      	bne.n	8001886 <HAL_I2SEx_TransmitReceive+0x15e>
      {
        /* Clear underrun flag */
        __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0220 	orr.w	r2, r2, #32
 8001878:	619a      	str	r2, [r3, #24]

        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187e:	f043 0204 	orr.w	r2, r3, #4
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }

    if ((__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_RXP) == SET) && (tmp_RxXferCount != 0UL))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d13e      	bne.n	8001912 <HAL_I2SEx_TransmitReceive+0x1ea>
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03b      	beq.n	8001912 <HAL_I2SEx_TransmitReceive+0x1ea>
    {
      if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a2:	d004      	beq.n	80018ae <HAL_I2SEx_TransmitReceive+0x186>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ac:	d10e      	bne.n	80018cc <HAL_I2SEx_TransmitReceive+0x1a4>
      {
        /* Receive data in 32 Bit mode */
        *((uint32_t *)hi2s->pRxBuffPtr) = hi2s->Instance->RXDR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018b8:	601a      	str	r2, [r3, #0]
        hi2s->pRxBuffPtr += 2;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	1d1a      	adds	r2, r3, #4
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
        tmp_RxXferCount--;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	e00d      	b.n	80018e8 <HAL_I2SEx_TransmitReceive+0x1c0>
      }
      else
      {
        /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
        *((uint16_t *)hi2s->pRxBuffPtr) = *prxdr_16bits;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	8812      	ldrh	r2, [r2, #0]
 80018d4:	b292      	uxth	r2, r2
 80018d6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hi2s->pRxBuffPtr) = *((__IO uint16_t *)&hi2s->Instance->RXDR);
#endif /* __GNUC__ */
        hi2s->pRxBuffPtr++;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	1c9a      	adds	r2, r3, #2
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
        tmp_RxXferCount--;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
      }

      /* Check if an overrun occurs */
      if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d10d      	bne.n	8001912 <HAL_I2SEx_TransmitReceive+0x1ea>
      {
        /* Clear overrun flag */
        __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001904:	619a      	str	r2, [r3, #24]

        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	f043 0202 	orr.w	r2, r3, #2
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001912:	f7ff faf5 	bl	8000f00 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191e:	429a      	cmp	r2, r3
 8001920:	d803      	bhi.n	800192a <HAL_I2SEx_TransmitReceive+0x202>
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d102      	bne.n	8001930 <HAL_I2SEx_TransmitReceive+0x208>
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10f      	bne.n	8001950 <HAL_I2SEx_TransmitReceive+0x228>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e010      	b.n	8001972 <HAL_I2SEx_TransmitReceive+0x24a>
  while ((tmp_TxXferCount > 0UL) || (tmp_RxXferCount > 0UL))
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f af52 	bne.w	80017fc <HAL_I2SEx_TransmitReceive+0xd4>
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f af4e 	bne.w	80017fc <HAL_I2SEx_TransmitReceive+0xd4>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b06      	cmp	r3, #6
 800198e:	d00a      	beq.n	80019a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e040      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e03e      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019ae:	491f      	ldr	r1, [pc, #124]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019b6:	f7ff faa3 	bl	8000f00 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019bc:	e009      	b.n	80019d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019be:	f7ff fa9f 	bl	8000f00 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019cc:	d901      	bls.n	80019d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e028      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	d1ee      	bne.n	80019be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b1e      	cmp	r3, #30
 80019e4:	d008      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b2e      	cmp	r3, #46	; 0x2e
 80019ea:	d005      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b1d      	cmp	r3, #29
 80019f0:	d002      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b2d      	cmp	r3, #45	; 0x2d
 80019f6:	d114      	bne.n	8001a22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019f8:	f7ff fa82 	bl	8000f00 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019fe:	e009      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a00:	f7ff fa7e 	bl	8000f00 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a0e:	d901      	bls.n	8001a14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e007      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d1ee      	bne.n	8001a00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	58024800 	.word	0x58024800

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f000 bc1d 	b.w	800227e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8087 	beq.w	8001b60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b99      	ldr	r3, [pc, #612]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a5c:	4b96      	ldr	r3, [pc, #600]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x48>
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	2b18      	cmp	r3, #24
 8001a6c:	d110      	bne.n	8001a90 <HAL_RCC_OscConfig+0x60>
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4b8f      	ldr	r3, [pc, #572]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d06c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x12e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d168      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e3f6      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x78>
 8001a9a:	4b87      	ldr	r3, [pc, #540]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a86      	ldr	r2, [pc, #536]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e02e      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x9a>
 8001ab0:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a80      	ldr	r2, [pc, #512]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e01d      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0xbe>
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a77      	ldr	r2, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a74      	ldr	r2, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a71      	ldr	r2, [pc, #452]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f9f7 	bl	8000f00 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff f9f3 	bl	8000f00 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e3aa      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b28:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0xe6>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f9e3 	bl	8000f00 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9df 	bl	8000f00 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e396      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x10e>
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80cb 	beq.w	8001d04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6e:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b78:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_RCC_OscConfig+0x164>
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	d156      	bne.n	8001c38 <HAL_RCC_OscConfig+0x208>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d151      	bne.n	8001c38 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x17c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e368      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 0219 	bic.w	r2, r3, #25
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	493f      	ldr	r1, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bbe:	f7ff f99f 	bl	8000f00 <HAL_GetTick>
 8001bc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f99b 	bl	8000f00 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e352      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	f7ff f998 	bl	8000f18 <HAL_GetREVID>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d817      	bhi.n	8001c22 <HAL_RCC_OscConfig+0x1f2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1dc>
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0a:	e07b      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	031b      	lsls	r3, r3, #12
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	e070      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4921      	ldr	r1, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c36:	e065      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d048      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0219 	bic.w	r2, r3, #25
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f955 	bl	8000f00 <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f951 	bl	8000f00 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e308      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	f7ff f94e 	bl	8000f18 <HAL_GetREVID>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d81a      	bhi.n	8001cbc <HAL_RCC_OscConfig+0x28c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x270>
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6053      	str	r3, [r2, #4]
 8001c9e:	e031      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	031b      	lsls	r3, r3, #12
 8001cae:	4902      	ldr	r1, [pc, #8]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e026      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	4b9a      	ldr	r3, [pc, #616]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	4997      	ldr	r1, [pc, #604]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a94      	ldr	r2, [pc, #592]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f90f 	bl	8000f00 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f90b 	bl	8000f00 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e2c2      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf8:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a9 	beq.w	8001e64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d1c:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d007      	beq.n	8001d38 <HAL_RCC_OscConfig+0x308>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b18      	cmp	r3, #24
 8001d2c:	d13a      	bne.n	8001da4 <HAL_RCC_OscConfig+0x374>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d135      	bne.n	8001da4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x320>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e296      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d50:	f7ff f8e2 	bl	8000f18 <HAL_GetREVID>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d817      	bhi.n	8001d8e <HAL_RCC_OscConfig+0x35e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x348>
 8001d66:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d76:	e075      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d78:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	069b      	lsls	r3, r3, #26
 8001d86:	4968      	ldr	r1, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d8c:	e06a      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	061b      	lsls	r3, r3, #24
 8001d9c:	4962      	ldr	r1, [pc, #392]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001da2:	e05f      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d042      	beq.n	8001e32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8a2 	bl	8000f00 <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f89e 	bl	8000f00 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e255      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dde:	f7ff f89b 	bl	8000f18 <HAL_GetREVID>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d817      	bhi.n	8001e1c <HAL_RCC_OscConfig+0x3ec>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d108      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3d6>
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	6053      	str	r3, [r2, #4]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	4944      	ldr	r1, [pc, #272]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
 8001e1a:	e023      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	493f      	ldr	r1, [pc, #252]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f85f 	bl	8000f00 <HAL_GetTick>
 8001e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e46:	f7ff f85b 	bl	8000f00 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e212      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d036      	beq.n	8001ede <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d019      	beq.n	8001eac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f83c 	bl	8000f00 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f838 	bl	8000f00 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1ef      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x45c>
 8001eaa:	e018      	b.n	8001ede <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f822 	bl	8000f00 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f81e 	bl	8000f00 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1d5      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d039      	beq.n	8001f5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001efc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001efe:	f7fe ffff 	bl	8000f00 <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f06:	f7fe fffb 	bl	8000f00 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1b2      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4d6>
 8001f24:	e01b      	b.n	8001f5e <HAL_RCC_OscConfig+0x52e>
 8001f26:	bf00      	nop
 8001f28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a9a      	ldr	r2, [pc, #616]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f38:	f7fe ffe2 	bl	8000f00 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f40:	f7fe ffde 	bl	8000f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e195      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f52:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8081 	beq.w	800206e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a8b      	ldr	r2, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f78:	f7fe ffc2 	bl	8000f00 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe ffbe 	bl	8000f00 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e175      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f92:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x584>
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a7c      	ldr	r2, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	e02d      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5a6>
 8001fbc:	4b77      	ldr	r3, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a76      	ldr	r2, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a73      	ldr	r2, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c8>
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a6b      	ldr	r2, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a67      	ldr	r2, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a64      	ldr	r2, [pc, #400]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe ff72 	bl	8000f00 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe ff6e 	bl	8000f00 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e123      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002036:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ee      	beq.n	8002020 <HAL_RCC_OscConfig+0x5f0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe ff5c 	bl	8000f00 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe ff58 	bl	8000f00 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e10d      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ee      	bne.n	800204c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8102 	beq.w	800227c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002080:	2b18      	cmp	r3, #24
 8002082:	f000 80bd 	beq.w	8002200 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b02      	cmp	r3, #2
 800208c:	f040 809e 	bne.w	80021cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a41      	ldr	r2, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff30 	bl	8000f00 <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe ff2c 	bl	8000f00 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0e3      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x774>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	430a      	orrs	r2, r1
 80020d6:	4931      	ldr	r1, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	628b      	str	r3, [r1, #40]	; 0x28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	3b01      	subs	r3, #1
 80020e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	3b01      	subs	r3, #1
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	3b01      	subs	r3, #1
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800210c:	4923      	ldr	r1, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x778>)
 8002124:	4013      	ands	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212a:	00d2      	lsls	r2, r2, #3
 800212c:	491b      	ldr	r1, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f023 020c 	bic.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4917      	ldr	r1, [pc, #92]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	f023 0202 	bic.w	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	4912      	ldr	r1, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe feb5 	bl	8000f00 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002198:	e011      	b.n	80021be <HAL_RCC_OscConfig+0x78e>
 800219a:	bf00      	nop
 800219c:	58024400 	.word	0x58024400
 80021a0:	58024800 	.word	0x58024800
 80021a4:	fffffc0c 	.word	0xfffffc0c
 80021a8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fea8 	bl	8000f00 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e05f      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x77c>
 80021ca:	e057      	b.n	800227c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe92 	bl	8000f00 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fe8e 	bl	8000f00 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x7b0>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2b01      	cmp	r3, #1
 8002212:	d031      	beq.n	8002278 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d12a      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d122      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0a5b      	lsrs	r3, r3, #9
 8002246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3730      	adds	r7, #48	; 0x30
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	58024400 	.word	0x58024400

0800228c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e19c      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b87      	ldr	r3, [pc, #540]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4985      	ldr	r1, [pc, #532]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b83      	ldr	r3, [pc, #524]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e184      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d908      	bls.n	80022fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4975      	ldr	r1, [pc, #468]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002316:	429a      	cmp	r2, r3
 8002318:	d908      	bls.n	800232c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	496a      	ldr	r1, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002328:	4313      	orrs	r3, r2
 800232a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	4b64      	ldr	r3, [pc, #400]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	495e      	ldr	r1, [pc, #376]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002356:	4313      	orrs	r3, r2
 8002358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002372:	429a      	cmp	r2, r3
 8002374:	d908      	bls.n	8002388 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4953      	ldr	r1, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002384:	4313      	orrs	r3, r2
 8002386:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d908      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f023 020f 	bic.w	r2, r3, #15
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4947      	ldr	r1, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d055      	beq.n	800246e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4940      	ldr	r1, [pc, #256]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d121      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0f6      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023f4:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d115      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0ea      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0de      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d6      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f023 0207 	bic.w	r2, r3, #7
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800243a:	4313      	orrs	r3, r2
 800243c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fd5f 	bl	8000f00 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e00a      	b.n	800245c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe fd5b 	bl	8000f00 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0be      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	429a      	cmp	r2, r3
 800246c:	d1eb      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	429a      	cmp	r2, r3
 8002488:	d208      	bcs.n	800249c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002498:	4313      	orrs	r3, r2
 800249a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d214      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 020f 	bic.w	r2, r3, #15
 80024b2:	4906      	ldr	r1, [pc, #24]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e086      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
 80024cc:	52002000 	.word	0x52002000
 80024d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d208      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4939      	ldr	r1, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d208      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	492e      	ldr	r1, [pc, #184]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002548:	429a      	cmp	r2, r3
 800254a:	d208      	bcs.n	800255e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800255a:	4313      	orrs	r3, r2
 800255c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800258c:	f000 f834 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4912      	ldr	r1, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x35c>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_ClockConfig+0x35c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x360>)
 80025c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x364>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x368>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fc4c 	bl	8000e6c <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
 80025e8:	08005e0c 	.word	0x08005e0c
 80025ec:	24000004 	.word	0x24000004
 80025f0:	24000000 	.word	0x24000000
 80025f4:	24000008 	.word	0x24000008

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fe:	4bb3      	ldr	r3, [pc, #716]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002606:	2b18      	cmp	r3, #24
 8002608:	f200 8155 	bhi.w	80028b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <HAL_RCC_GetSysClockFreq+0x1c>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002679 	.word	0x08002679
 8002618:	080028b7 	.word	0x080028b7
 800261c:	080028b7 	.word	0x080028b7
 8002620:	080028b7 	.word	0x080028b7
 8002624:	080028b7 	.word	0x080028b7
 8002628:	080028b7 	.word	0x080028b7
 800262c:	080028b7 	.word	0x080028b7
 8002630:	080028b7 	.word	0x080028b7
 8002634:	0800269f 	.word	0x0800269f
 8002638:	080028b7 	.word	0x080028b7
 800263c:	080028b7 	.word	0x080028b7
 8002640:	080028b7 	.word	0x080028b7
 8002644:	080028b7 	.word	0x080028b7
 8002648:	080028b7 	.word	0x080028b7
 800264c:	080028b7 	.word	0x080028b7
 8002650:	080028b7 	.word	0x080028b7
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080028b7 	.word	0x080028b7
 800265c:	080028b7 	.word	0x080028b7
 8002660:	080028b7 	.word	0x080028b7
 8002664:	080028b7 	.word	0x080028b7
 8002668:	080028b7 	.word	0x080028b7
 800266c:	080028b7 	.word	0x080028b7
 8002670:	080028b7 	.word	0x080028b7
 8002674:	080026ab 	.word	0x080026ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002678:	4b94      	ldr	r3, [pc, #592]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	4a90      	ldr	r2, [pc, #576]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002696:	e111      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002698:	4b8d      	ldr	r3, [pc, #564]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800269a:	61bb      	str	r3, [r7, #24]
    break;
 800269c:	e10e      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800269e:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026a0:	61bb      	str	r3, [r7, #24]
    break;
 80026a2:	e10b      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026a4:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026a6:	61bb      	str	r3, [r7, #24]
    break;
 80026a8:	e108      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026b4:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c0:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026ca:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80e1 	beq.w	80028b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f000 8083 	beq.w	80027fc <HAL_RCC_GetSysClockFreq+0x204>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f200 80a1 	bhi.w	8002840 <HAL_RCC_GetSysClockFreq+0x248>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x114>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d056      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800270a:	e099      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d02d      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002718:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002752:	ed97 6a02 	vldr	s12, [r7, #8]
 8002756:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800275a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002772:	e087      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002786:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	ed97 6a02 	vldr	s12, [r7, #8]
 800279a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800279e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027b6:	e065      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027fa:	e043      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800283e:	e021      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800284e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002862:	ed97 6a02 	vldr	s12, [r7, #8]
 8002866:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800286a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002882:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	0a5b      	lsrs	r3, r3, #9
 800288a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288e:	3301      	adds	r3, #1
 8002890:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289c:	edd7 6a07 	vldr	s13, [r7, #28]
 80028a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 3a90 	vmov	r3, s15
 80028ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028ae:	e005      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    break;
 80028b4:	e002      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028b8:	61bb      	str	r3, [r7, #24]
    break;
 80028ba:	bf00      	nop
  }

  return sysclockfreq;
 80028bc:	69bb      	ldr	r3, [r7, #24]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	03d09000 	.word	0x03d09000
 80028d4:	003d0900 	.word	0x003d0900
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	46000000 	.word	0x46000000
 80028e0:	4c742400 	.word	0x4c742400
 80028e4:	4a742400 	.word	0x4a742400
 80028e8:	4af42400 	.word	0x4af42400

080028ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028f2:	f7ff fe81 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_GetHCLKFreq+0x50>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490f      	ldr	r1, [pc, #60]	; (8002940 <HAL_RCC_GetHCLKFreq+0x54>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_GetHCLKFreq+0x50>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_RCC_GetHCLKFreq+0x54>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <HAL_RCC_GetHCLKFreq+0x58>)
 8002928:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_RCC_GetHCLKFreq+0x5c>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_RCC_GetHCLKFreq+0x58>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	08005e0c 	.word	0x08005e0c
 8002944:	24000004 	.word	0x24000004
 8002948:	24000000 	.word	0x24000000

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002950:	f7ff ffcc 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4904      	ldr	r1, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024400 	.word	0x58024400
 8002974:	08005e0c 	.word	0x08005e0c

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800297c:	f7ff ffb6 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024400 	.word	0x58024400
 80029a0:	08005e0c 	.word	0x08005e0c

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029c8:	d02a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029ce:	d824      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d4:	d018      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029da:	d81e      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e4:	d007      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029e6:	e018      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4ba3      	ldr	r3, [pc, #652]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4aa2      	ldr	r2, [pc, #648]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029f4:	e015      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2102      	movs	r1, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fff9 	bl	80049f4 <RCCEx_PLL2_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a06:	e00c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3324      	adds	r3, #36	; 0x24
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 f8a2 	bl	8004b58 <RCCEx_PLL3_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a18:	e003      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a28:	4b93      	ldr	r3, [pc, #588]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a34:	4990      	ldr	r1, [pc, #576]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	650b      	str	r3, [r1, #80]	; 0x50
 8002a3a:	e001      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d826      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a7f 	.word	0x08002a7f
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002aa9 	.word	0x08002aa9
 8002a6c:	08002aa9 	.word	0x08002aa9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a7c:	e015      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 ffb5 	bl	80049f4 <RCCEx_PLL2_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3324      	adds	r3, #36	; 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 f85e 	bl	8004b58 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e003      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa6:	e000      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	f023 0207 	bic.w	r2, r3, #7
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	496e      	ldr	r1, [pc, #440]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d042      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002adc:	d02b      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d825      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ae4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ae6:	d028      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ae8:	2bc0      	cmp	r3, #192	; 0xc0
 8002aea:	d821      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d016      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d81d      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d007      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002afc:	e018      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e017      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 ff6e 	bl	80049f4 <RCCEx_PLL2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 f817 	bl	8004b58 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b42:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	494a      	ldr	r1, [pc, #296]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	650b      	str	r3, [r1, #80]	; 0x50
 8002b54:	e001      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d049      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b70:	d030      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b76:	d82a      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b82:	d824      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b88:	d018      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d81e      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b98:	d007      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b9a:	e018      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e017      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 ff1f 	bl	80049f4 <RCCEx_PLL2_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bba:	e00e      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 ffc8 	bl	8004b58 <RCCEx_PLL3_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e005      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bee:	4922      	ldr	r1, [pc, #136]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	658b      	str	r3, [r1, #88]	; 0x58
 8002bf4:	e001      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c10:	d030      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c16:	d82a      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c1c:	d02e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c22:	d824      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c28:	d018      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c2e:	d81e      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d007      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c48:	e019      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fecf 	bl	80049f4 <RCCEx_PLL2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e010      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3324      	adds	r3, #36	; 0x24
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 ff78 	bl	8004b58 <RCCEx_PLL3_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c6c:	e007      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
      break;
 8002c72:	e004      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c78:	58024400 	.word	0x58024400
      break;
 8002c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c84:	4b99      	ldr	r3, [pc, #612]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c92:	4996      	ldr	r1, [pc, #600]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	658b      	str	r3, [r1, #88]	; 0x58
 8002c98:	e001      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d032      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	2b30      	cmp	r3, #48	; 0x30
 8002cb0:	d01c      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cb2:	2b30      	cmp	r3, #48	; 0x30
 8002cb4:	d817      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d813      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a88      	ldr	r2, [pc, #544]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cd2:	e00e      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fe8a 	bl	80049f4 <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	4979      	ldr	r1, [pc, #484]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d0a:	e001      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d047      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d24:	d030      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2a:	d82a      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d30:	d02c      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3c:	d018      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d007      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e017      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 fe45 	bl	80049f4 <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e00e      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 feee 	bl	8004b58 <RCCEx_PLL3_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d80:	e005      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	4952      	ldr	r1, [pc, #328]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	650b      	str	r3, [r1, #80]	; 0x50
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d049      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d02e      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc6:	d828      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dcc:	d02a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd2:	d822      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd8:	d026      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dde:	d81c      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de4:	d010      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dea:	d816      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01d      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d111      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fdf9 	bl	80049f4 <RCCEx_PLL2_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e06:	e012      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3324      	adds	r3, #36	; 0x24
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fea2 	bl	8004b58 <RCCEx_PLL3_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e18:	e009      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1e:	e006      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e20:	bf00      	nop
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e24:	bf00      	nop
 8002e26:	e002      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	492a      	ldr	r1, [pc, #168]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	650b      	str	r3, [r1, #80]	; 0x50
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d04d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e62:	d02e      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e68:	d828      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d02a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d822      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e7a:	d026      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e80:	d81c      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e86:	d010      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d816      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e96:	d111      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fda8 	bl	80049f4 <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ea8:	e012      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3324      	adds	r3, #36	; 0x24
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fe51 	bl	8004b58 <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02f      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f08:	d00e      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0e:	d814      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1a:	4baf      	ldr	r3, [pc, #700]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4aae      	ldr	r2, [pc, #696]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f26:	e00c      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fd60 	bl	80049f4 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f48:	4ba3      	ldr	r3, [pc, #652]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	49a0      	ldr	r1, [pc, #640]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	650b      	str	r3, [r1, #80]	; 0x50
 8002f5a:	e001      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d81b      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002f8d 	.word	0x08002f8d
 8002f84:	08002f9b 	.word	0x08002f9b
 8002f88:	08002fb3 	.word	0x08002fb3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4a91      	ldr	r2, [pc, #580]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f98:	e00c      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 fd27 	bl	80049f4 <RCCEx_PLL2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fba:	4b87      	ldr	r3, [pc, #540]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4984      	ldr	r1, [pc, #528]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8086 	beq.w	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fec:	f7fd ff88 	bl	8000f00 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	e009      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fd ff84 	bl	8000f00 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d902      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	75fb      	strb	r3, [r7, #23]
        break;
 8003006:	e005      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003008:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d166      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800301a:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800301c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003024:	4053      	eors	r3, r2
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d013      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003050:	4a61      	ldr	r2, [pc, #388]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d115      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fd ff4d 	bl	8000f00 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003068:	e00b      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fd ff49 	bl	8000f00 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d902      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	75fb      	strb	r3, [r7, #23]
            break;
 8003080:	e005      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ed      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d126      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030b2:	0919      	lsrs	r1, r3, #4
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030b6:	400b      	ands	r3, r1
 80030b8:	4947      	ldr	r1, [pc, #284]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	610b      	str	r3, [r1, #16]
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030ca:	6113      	str	r3, [r2, #16]
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030da:	493f      	ldr	r1, [pc, #252]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	670b      	str	r3, [r1, #112]	; 0x70
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	75bb      	strb	r3, [r7, #22]
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8085 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fe:	2b28      	cmp	r3, #40	; 0x28
 8003100:	d866      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	080031e5 	.word	0x080031e5
 800310c:	080031d1 	.word	0x080031d1
 8003110:	080031d1 	.word	0x080031d1
 8003114:	080031d1 	.word	0x080031d1
 8003118:	080031d1 	.word	0x080031d1
 800311c:	080031d1 	.word	0x080031d1
 8003120:	080031d1 	.word	0x080031d1
 8003124:	080031d1 	.word	0x080031d1
 8003128:	080031ad 	.word	0x080031ad
 800312c:	080031d1 	.word	0x080031d1
 8003130:	080031d1 	.word	0x080031d1
 8003134:	080031d1 	.word	0x080031d1
 8003138:	080031d1 	.word	0x080031d1
 800313c:	080031d1 	.word	0x080031d1
 8003140:	080031d1 	.word	0x080031d1
 8003144:	080031d1 	.word	0x080031d1
 8003148:	080031bf 	.word	0x080031bf
 800314c:	080031d1 	.word	0x080031d1
 8003150:	080031d1 	.word	0x080031d1
 8003154:	080031d1 	.word	0x080031d1
 8003158:	080031d1 	.word	0x080031d1
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031d1 	.word	0x080031d1
 8003164:	080031d1 	.word	0x080031d1
 8003168:	080031e5 	.word	0x080031e5
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031e5 	.word	0x080031e5
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080031d1 	.word	0x080031d1
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e5 	.word	0x080031e5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 fc1e 	bl	80049f4 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031bc:	e013      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3324      	adds	r3, #36	; 0x24
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 fcc7 	bl	8004b58 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	e007      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400
 80031dc:	58024800 	.word	0x58024800
 80031e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80031e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f8:	4993      	ldr	r1, [pc, #588]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	654b      	str	r3, [r1, #84]	; 0x54
 80031fe:	e001      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d038      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	2b05      	cmp	r3, #5
 8003216:	d821      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003263 	.word	0x08003263
 8003224:	08003239 	.word	0x08003239
 8003228:	0800324b 	.word	0x0800324b
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fbd8 	bl	80049f4 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003248:	e00c      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fc81 	bl	8004b58 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	4974      	ldr	r1, [pc, #464]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	654b      	str	r3, [r1, #84]	; 0x54
 800327c:	e001      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	2b05      	cmp	r3, #5
 8003296:	d821      	bhi.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032e3 	.word	0x080032e3
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032cb 	.word	0x080032cb
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032e3 	.word	0x080032e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fb98 	bl	80049f4 <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032c8:	e00c      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3324      	adds	r3, #36	; 0x24
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 fc41 	bl	8004b58 <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032da:	e003      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
      break;
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80032e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4953      	ldr	r1, [pc, #332]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	658b      	str	r3, [r1, #88]	; 0x58
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331a:	d02e      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800331c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003320:	d828      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d02a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d822      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800332e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003332:	d026      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003338:	d81c      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333e:	d010      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003344:	d816      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800334a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800334e:	d111      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f001 fb4c 	bl	80049f4 <RCCEx_PLL2_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003360:	e012      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fbf5 	bl	8004b58 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003372:	e009      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
      break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339c:	492a      	ldr	r1, [pc, #168]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	654b      	str	r3, [r1, #84]	; 0x54
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d04d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033be:	d02e      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c4:	d828      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d02a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d822      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d6:	d026      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80033d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033dc:	d81c      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e2:	d010      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d816      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01d      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d111      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 fafa 	bl	80049f4 <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003404:	e012      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3324      	adds	r3, #36	; 0x24
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fba3 	bl	8004b58 <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
      break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003440:	4901      	ldr	r1, [pc, #4]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	658b      	str	r3, [r1, #88]	; 0x58
 8003446:	e003      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d04b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003462:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003466:	d02e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003468:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800346c:	d828      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d02a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d822      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800347a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800347e:	d026      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003480:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003484:	d81c      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348a:	d010      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800348c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003490:	d816      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	d111      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 faa6 	bl	80049f4 <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034ac:	e012      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3324      	adds	r3, #36	; 0x24
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fb4f 	bl	8004b58 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034be:	e009      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      break;
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034da:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e8:	4999      	ldr	r1, [pc, #612]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	658b      	str	r3, [r1, #88]	; 0x58
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fb20 	bl	8004b58 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003530:	4987      	ldr	r1, [pc, #540]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d10a      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3324      	adds	r3, #36	; 0x24
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f001 faff 	bl	8004b58 <RCCEx_PLL3_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003564:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	4977      	ldr	r1, [pc, #476]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d034      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800358a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358e:	d01d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003594:	d817      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359e:	d009      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035a0:	e011      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fa23 	bl	80049f4 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 facc 	bl	8004b58 <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d4:	4b5e      	ldr	r3, [pc, #376]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035e2:	495b      	ldr	r1, [pc, #364]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	658b      	str	r3, [r1, #88]	; 0x58
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d033      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003604:	d01c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360a:	d816      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003616:	d007      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003618:	e00f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361a:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fa92 	bl	8004b58 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	493e      	ldr	r1, [pc, #248]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003658:	4313      	orrs	r3, r2
 800365a:	654b      	str	r3, [r1, #84]	; 0x54
 800365c:	e001      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d029      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d007      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800367c:	e00f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	4a33      	ldr	r2, [pc, #204]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800368a:	e00b      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 f9ae 	bl	80049f4 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4926      	ldr	r1, [pc, #152]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036bc:	e001      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3324      	adds	r3, #36	; 0x24
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fa3f 	bl	8004b58 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d033      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d017      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80036fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fe:	d811      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d013      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370a:	d80b      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003714:	d106      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003722:	e007      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e004      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	654b      	str	r3, [r1, #84]	; 0x54
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	492e      	ldr	r1, [pc, #184]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003772:	4313      	orrs	r3, r2
 8003774:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003790:	4926      	ldr	r1, [pc, #152]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003792:	4313      	orrs	r3, r2
 8003794:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ae:	491f      	ldr	r1, [pc, #124]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ca:	6113      	str	r3, [r2, #16]
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037d6:	4915      	ldr	r1, [pc, #84]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da08      	bge.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	4906      	ldr	r1, [pc, #24]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003812:	4313      	orrs	r3, r2
 8003814:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003816:	7dbb      	ldrb	r3, [r7, #22]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400

08003830 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b090      	sub	sp, #64	; 0x40
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	f040 8095 	bne.w	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003842:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2b04      	cmp	r3, #4
 8003850:	f200 8088 	bhi.w	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003871 	.word	0x08003871
 8003860:	08003899 	.word	0x08003899
 8003864:	080038c1 	.word	0x080038c1
 8003868:	0800395d 	.word	0x0800395d
 800386c:	080038e9 	.word	0x080038e9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387c:	d108      	bne.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800387e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ff64 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800388c:	f000 bc94 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003894:	f000 bc90 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003898:	4b81      	ldr	r3, [pc, #516]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a4:	d108      	bne.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038a6:	f107 0318 	add.w	r3, r7, #24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fca8 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038b4:	f000 bc80 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038bc:	f000 bc7c 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80038c0:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038cc:	d108      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fde8 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038dc:	f000 bc6c 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038e4:	f000 bc68 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80038e8:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038f2:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	4a65      	ldr	r2, [pc, #404]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	e01f      	b.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003918:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d106      	bne.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392c:	d102      	bne.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800392e:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003934:	4b5a      	ldr	r3, [pc, #360]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003940:	d106      	bne.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003948:	d102      	bne.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394e:	e003      	b.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003954:	f000 bc30 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003958:	f000 bc2e 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003960:	f000 bc2a 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003968:	f000 bc26 	b.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003972:	f040 809f 	bne.w	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003976:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800397e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003986:	d04d      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	f200 8084 	bhi.w	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	2bc0      	cmp	r3, #192	; 0xc0
 8003996:	d07d      	beq.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2bc0      	cmp	r3, #192	; 0xc0
 800399c:	d87d      	bhi.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d02d      	beq.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d877      	bhi.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d012      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80039b6:	e070      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c4:	d107      	bne.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fec0 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039d4:	e3f0      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039da:	e3ed      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039dc:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e8:	d107      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039ea:	f107 0318 	add.w	r3, r7, #24
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fc06 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039f8:	e3de      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039fe:	e3db      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fd48 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a1c:	e3cc      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a22:	e3c9      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a52:	e01e      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a68:	d102      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	e010      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a84:	d102      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8a:	e002      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003a90:	e392      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003a92:	e391      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a98:	e38e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a9e:	e38b      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	03d09000 	.word	0x03d09000
 8003aa8:	003d0900 	.word	0x003d0900
 8003aac:	007a1200 	.word	0x007a1200
 8003ab0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	f040 809c 	bne.w	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003abe:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ace:	d054      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad6:	f200 808b 	bhi.w	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae0:	f000 8083 	beq.w	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aea:	f200 8081 	bhi.w	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af4:	d02f      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d878      	bhi.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b0a:	d012      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003b0c:	e070      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b0e:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fe15 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b2a:	e345      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b30:	e342      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b32:	4b80      	ldr	r3, [pc, #512]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b40:	f107 0318 	add.w	r3, r7, #24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fb5b 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b4e:	e333      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b54:	e330      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b56:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d107      	bne.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fc9d 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b72:	e321      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b78:	e31e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b84:	4b6b      	ldr	r3, [pc, #428]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b96:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	08db      	lsrs	r3, r3, #3
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	e01e      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	e010      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d102      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003bdc:	4b58      	ldr	r3, [pc, #352]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003be6:	e2e7      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003be8:	e2e6      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bea:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bee:	e2e3      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bf4:	e2e0      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfc:	f040 80a7 	bne.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c10:	d055      	beq.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c18:	f200 8096 	bhi.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c22:	f000 8084 	beq.w	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2c:	f200 808c 	bhi.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c36:	d030      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3e:	f200 8083 	bhi.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4e:	d012      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003c50:	e07a      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c52:	4b38      	ldr	r3, [pc, #224]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fd73 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c6e:	e2a3      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c74:	e2a0      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c82:	d107      	bne.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c84:	f107 0318 	add.w	r3, r7, #24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fab9 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003c92:	e291      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c98:	e28e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fbfb 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cb6:	e27f      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cbc:	e27c      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cec:	e01e      	b.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d102      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	e010      	b.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d16:	d106      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003d2a:	e245      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d2c:	e244      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d32:	e241      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d34:	58024400 	.word	0x58024400
 8003d38:	03d09000 	.word	0x03d09000
 8003d3c:	003d0900 	.word	0x003d0900
 8003d40:	007a1200 	.word	0x007a1200
 8003d44:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d4c:	e234      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	f040 809c 	bne.w	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003d58:	4b9b      	ldr	r3, [pc, #620]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d68:	d054      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d70:	f200 808b 	bhi.w	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d7a:	f000 8083 	beq.w	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d84:	f200 8081 	bhi.w	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	d02f      	beq.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d878      	bhi.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d012      	beq.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003da6:	e070      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003da8:	4b87      	ldr	r3, [pc, #540]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fcc8 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dc4:	e1f8      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dca:	e1f5      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dcc:	4b7e      	ldr	r3, [pc, #504]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd8:	d107      	bne.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003dda:	f107 0318 	add.w	r3, r7, #24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fa0e 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003de8:	e1e6      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dee:	e1e3      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003df0:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fb50 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e0c:	e1d4      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e12:	e1d1      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e14:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e1e:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e30:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	4a64      	ldr	r2, [pc, #400]	; (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e42:	e01e      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e44:	4b60      	ldr	r3, [pc, #384]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	d106      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e58:	d102      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5e:	e010      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e74:	d102      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003e76:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003e80:	e19a      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e82:	e199      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e84:	4b54      	ldr	r3, [pc, #336]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e88:	e196      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e8e:	e193      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e96:	d173      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003e98:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea8:	d02f      	beq.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb0:	d863      	bhi.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d012      	beq.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003ec0:	e05b      	b.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ed0:	f107 0318 	add.w	r3, r7, #24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f993 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003ede:	e16b      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ee4:	e168      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ee6:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fad5 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f02:	e159      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f08:	e156      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d10c      	bne.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	08db      	lsrs	r3, r3, #3
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f38:	e01e      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d106      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f54:	e010      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003f76:	e11f      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003f78:	e11e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f7e:	e11b      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d13e      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9e:	d01d      	beq.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003fa0:	e02e      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fbcb 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003fbe:	e0fb      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fc4:	e0f8      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	03d09000 	.word	0x03d09000
 8003fd0:	003d0900 	.word	0x003d0900
 8003fd4:	007a1200 	.word	0x007a1200
 8003fd8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fdc:	4b79      	ldr	r3, [pc, #484]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fea:	f107 0318 	add.w	r3, r7, #24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f906 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003ff8:	e0de      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004004:	e0d8      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400c:	f040 8085 	bne.w	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004020:	d06b      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004028:	d874      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d056      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d86c      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004040:	d03b      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004048:	d864      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004050:	d021      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004058:	d85c      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004068:	e054      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800406a:	f000 f8b3 	bl	80041d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800406e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004070:	e0a2      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004072:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d107      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004080:	f107 0318 	add.w	r3, r7, #24
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f8bb 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800408e:	e093      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004094:	e090      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004096:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800409e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a2:	d107      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f9fd 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80040b2:	e081      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040b8:	e07e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d109      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	08db      	lsrs	r3, r3, #3
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	4a3d      	ldr	r2, [pc, #244]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80040d8:	e06e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040de:	e06b      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ec:	d102      	bne.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80040f2:	e061      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040f8:	e05e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040fa:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004106:	d102      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800410c:	e054      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004112:	e051      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004118:	e04e      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d148      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d02a      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d838      	bhi.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004148:	d00d      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800414a:	e030      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004158:	d102      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800415e:	e02b      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004164:	e028      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004172:	d107      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fae9 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004182:	e019      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004188:	e016      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004196:	d107      	bne.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004198:	f107 0318 	add.w	r3, r7, #24
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f82f 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041a6:	e007      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80041b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3740      	adds	r7, #64	; 0x40
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
 80041c8:	03d09000 	.word	0x03d09000
 80041cc:	003d0900 	.word	0x003d0900
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041d8:	f7fe fb88 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4904      	ldr	r1, [pc, #16]	; (80041fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	58024400 	.word	0x58024400
 80041fc:	08005e0c 	.word	0x08005e0c

08004200 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	; 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004208:	4ba1      	ldr	r3, [pc, #644]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004212:	4b9f      	ldr	r3, [pc, #636]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	0b1b      	lsrs	r3, r3, #12
 8004218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800421c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800421e:	4b9c      	ldr	r3, [pc, #624]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800422a:	4b99      	ldr	r3, [pc, #612]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	08db      	lsrs	r3, r3, #3
 8004230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8111 	beq.w	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b02      	cmp	r3, #2
 8004252:	f000 8083 	beq.w	800435c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	f200 80a1 	bhi.w	80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d056      	beq.n	8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800426a:	e099      	b.n	80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800426c:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02d      	beq.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004278:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	4a84      	ldr	r2, [pc, #528]	; (8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
 8004288:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042d2:	e087      	b.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800449c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004316:	e065      	b.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433a:	ed97 6a03 	vldr	s12, [r7, #12]
 800433e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800434e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800435a:	e043      	b.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800436a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436e:	4b48      	ldr	r3, [pc, #288]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004382:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800439e:	e021      	b.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	0a5b      	lsrs	r3, r3, #9
 80043ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440a:	ee17 2a90 	vmov	r2, s15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800442c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	ee17 2a90 	vmov	r2, s15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	0e1b      	lsrs	r3, r3, #24
 8004446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445a:	edd7 6a07 	vldr	s13, [r7, #28]
 800445e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004466:	ee17 2a90 	vmov	r2, s15
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800446e:	e008      	b.n	8004482 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
}
 8004482:	bf00      	nop
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	58024400 	.word	0x58024400
 8004494:	03d09000 	.word	0x03d09000
 8004498:	46000000 	.word	0x46000000
 800449c:	4c742400 	.word	0x4c742400
 80044a0:	4a742400 	.word	0x4a742400
 80044a4:	4af42400 	.word	0x4af42400

080044a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b0:	4ba1      	ldr	r3, [pc, #644]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044ba:	4b9f      	ldr	r3, [pc, #636]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	0d1b      	lsrs	r3, r3, #20
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044c6:	4b9c      	ldr	r3, [pc, #624]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044d2:	4b99      	ldr	r3, [pc, #612]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8111 	beq.w	8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f000 8083 	beq.w	8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b02      	cmp	r3, #2
 8004502:	f200 80a1 	bhi.w	8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d056      	beq.n	80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004512:	e099      	b.n	8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004514:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02d      	beq.n	800457c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004520:	4b85      	ldr	r3, [pc, #532]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	4a84      	ldr	r2, [pc, #528]	; (800473c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	ed97 6a03 	vldr	s12, [r7, #12]
 800455e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800457a:	e087      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458e:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459e:	ed97 6a03 	vldr	s12, [r7, #12]
 80045a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045be:	e065      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d2:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004602:	e043      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800474c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004616:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004626:	ed97 6a03 	vldr	s12, [r7, #12]
 800462a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800462e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004646:	e021      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466a:	ed97 6a03 	vldr	s12, [r7, #12]
 800466e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800468a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	0a5b      	lsrs	r3, r3, #9
 8004692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b2:	ee17 2a90 	vmov	r2, s15
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	ee17 2a90 	vmov	r2, s15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	0e1b      	lsrs	r3, r3, #24
 80046ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004702:	edd7 6a07 	vldr	s13, [r7, #28]
 8004706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470e:	ee17 2a90 	vmov	r2, s15
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004716:	e008      	b.n	800472a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
}
 800472a:	bf00      	nop
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	58024400 	.word	0x58024400
 800473c:	03d09000 	.word	0x03d09000
 8004740:	46000000 	.word	0x46000000
 8004744:	4c742400 	.word	0x4c742400
 8004748:	4a742400 	.word	0x4a742400
 800474c:	4af42400 	.word	0x4af42400

08004750 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004758:	4ba0      	ldr	r3, [pc, #640]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004762:	4b9e      	ldr	r3, [pc, #632]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800476e:	4b9b      	ldr	r3, [pc, #620]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004778:	4b98      	ldr	r3, [pc, #608]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004790:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8111 	beq.w	80049be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	f000 8083 	beq.w	80048aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	f200 80a1 	bhi.w	80048ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d056      	beq.n	8004866 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80047b8:	e099      	b.n	80048ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02d      	beq.n	8004822 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047c6:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	4a83      	ldr	r2, [pc, #524]	; (80049e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f0:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004800:	ed97 6a03 	vldr	s12, [r7, #12]
 8004804:	eddf 5a77 	vldr	s11, [pc, #476]	; 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004820:	e087      	b.n	8004932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80049e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004844:	ed97 6a03 	vldr	s12, [r7, #12]
 8004848:	eddf 5a66 	vldr	s11, [pc, #408]	; 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800484c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004864:	e065      	b.n	8004932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004878:	4b58      	ldr	r3, [pc, #352]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004888:	ed97 6a03 	vldr	s12, [r7, #12]
 800488c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a8:	e043      	b.n	8004932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80049f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80048b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80048d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ec:	e021      	b.n	8004932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80049e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80048fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004910:	ed97 6a03 	vldr	s12, [r7, #12]
 8004914:	eddf 5a33 	vldr	s11, [pc, #204]	; 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004930:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004932:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	0a5b      	lsrs	r3, r3, #9
 8004938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004958:	ee17 2a90 	vmov	r2, s15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004960:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497a:	edd7 6a07 	vldr	s13, [r7, #28]
 800497e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 2a90 	vmov	r2, s15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	0e1b      	lsrs	r3, r3, #24
 8004994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b4:	ee17 2a90 	vmov	r2, s15
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	3724      	adds	r7, #36	; 0x24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	58024400 	.word	0x58024400
 80049e0:	03d09000 	.word	0x03d09000
 80049e4:	46000000 	.word	0x46000000
 80049e8:	4c742400 	.word	0x4c742400
 80049ec:	4a742400 	.word	0x4a742400
 80049f0:	4af42400 	.word	0x4af42400

080049f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a02:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d101      	bne.n	8004a12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e099      	b.n	8004b46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a12:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a4e      	ldr	r2, [pc, #312]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fc fa6f 	bl	8000f00 <HAL_GetTick>
 8004a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a24:	e008      	b.n	8004a38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a26:	f7fc fa6b 	bl	8000f00 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e086      	b.n	8004b46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a44:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	493f      	ldr	r1, [pc, #252]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	628b      	str	r3, [r1, #40]	; 0x28
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	025b      	lsls	r3, r3, #9
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a88:	4931      	ldr	r1, [pc, #196]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	492d      	ldr	r1, [pc, #180]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f023 0220 	bic.w	r2, r3, #32
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	4928      	ldr	r1, [pc, #160]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <RCCEx_PLL2_Config+0x160>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	69d2      	ldr	r2, [r2, #28]
 8004aca:	00d2      	lsls	r2, r2, #3
 8004acc:	4920      	ldr	r1, [pc, #128]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004af0:	e00f      	b.n	8004b12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b04:	e005      	b.n	8004b12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1e:	f7fc f9ef 	bl	8000f00 <HAL_GetTick>
 8004b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b24:	e008      	b.n	8004b38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b26:	f7fc f9eb 	bl	8000f00 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e006      	b.n	8004b46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
 8004b54:	ffff0007 	.word	0xffff0007

08004b58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b66:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d101      	bne.n	8004b76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e099      	b.n	8004caa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b76:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4e      	ldr	r2, [pc, #312]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fc f9bd 	bl	8000f00 <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b88:	e008      	b.n	8004b9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b8a:	f7fc f9b9 	bl	8000f00 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e086      	b.n	8004caa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b9c:	4b45      	ldr	r3, [pc, #276]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f0      	bne.n	8004b8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	051b      	lsls	r3, r3, #20
 8004bb6:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	628b      	str	r3, [r1, #40]	; 0x28
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	025b      	lsls	r3, r3, #9
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bec:	4931      	ldr	r1, [pc, #196]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bf2:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	492d      	ldr	r1, [pc, #180]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	4928      	ldr	r1, [pc, #160]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a26      	ldr	r2, [pc, #152]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <RCCEx_PLL3_Config+0x160>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	69d2      	ldr	r2, [r2, #28]
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	4920      	ldr	r1, [pc, #128]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c54:	e00f      	b.n	8004c76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d106      	bne.n	8004c6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c68:	e005      	b.n	8004c76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fc f93d 	bl	8000f00 <HAL_GetTick>
 8004c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c8a:	f7fc f939 	bl	8000f00 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e006      	b.n	8004caa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	ffff0007 	.word	0xffff0007

08004cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e042      	b.n	8004d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fb ffcd 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	; 0x24
 8004cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f82c 	bl	8004d5c <UART_SetConfig>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fd88 	bl	800582c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fe0f 	bl	8005970 <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b092      	sub	sp, #72	; 0x48
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4bbe      	ldr	r3, [pc, #760]	; (8005084 <UART_SetConfig+0x328>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4ab3      	ldr	r2, [pc, #716]	; (8005088 <UART_SetConfig+0x32c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	4baf      	ldr	r3, [pc, #700]	; (800508c <UART_SetConfig+0x330>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f023 010f 	bic.w	r1, r3, #15
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4aa6      	ldr	r2, [pc, #664]	; (8005090 <UART_SetConfig+0x334>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d177      	bne.n	8004eec <UART_SetConfig+0x190>
 8004dfc:	4ba5      	ldr	r3, [pc, #660]	; (8005094 <UART_SetConfig+0x338>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e04:	2b28      	cmp	r3, #40	; 0x28
 8004e06:	d86d      	bhi.n	8004ee4 <UART_SetConfig+0x188>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0xb4>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004eb5 	.word	0x08004eb5
 8004e14:	08004ee5 	.word	0x08004ee5
 8004e18:	08004ee5 	.word	0x08004ee5
 8004e1c:	08004ee5 	.word	0x08004ee5
 8004e20:	08004ee5 	.word	0x08004ee5
 8004e24:	08004ee5 	.word	0x08004ee5
 8004e28:	08004ee5 	.word	0x08004ee5
 8004e2c:	08004ee5 	.word	0x08004ee5
 8004e30:	08004ebd 	.word	0x08004ebd
 8004e34:	08004ee5 	.word	0x08004ee5
 8004e38:	08004ee5 	.word	0x08004ee5
 8004e3c:	08004ee5 	.word	0x08004ee5
 8004e40:	08004ee5 	.word	0x08004ee5
 8004e44:	08004ee5 	.word	0x08004ee5
 8004e48:	08004ee5 	.word	0x08004ee5
 8004e4c:	08004ee5 	.word	0x08004ee5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ee5 	.word	0x08004ee5
 8004e58:	08004ee5 	.word	0x08004ee5
 8004e5c:	08004ee5 	.word	0x08004ee5
 8004e60:	08004ee5 	.word	0x08004ee5
 8004e64:	08004ee5 	.word	0x08004ee5
 8004e68:	08004ee5 	.word	0x08004ee5
 8004e6c:	08004ee5 	.word	0x08004ee5
 8004e70:	08004ecd 	.word	0x08004ecd
 8004e74:	08004ee5 	.word	0x08004ee5
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e222      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e21e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e21a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e216      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e212      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e20e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e20a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a69      	ldr	r2, [pc, #420]	; (8005098 <UART_SetConfig+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d130      	bne.n	8004f58 <UART_SetConfig+0x1fc>
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <UART_SetConfig+0x338>)
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b05      	cmp	r3, #5
 8004f00:	d826      	bhi.n	8004f50 <UART_SetConfig+0x1f4>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x1ac>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	08004f31 	.word	0x08004f31
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e1ec      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e1e8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e1e4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e1e0      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f40:	2320      	movs	r3, #32
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e1dc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e1d8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e1d4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4f      	ldr	r2, [pc, #316]	; (800509c <UART_SetConfig+0x340>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d130      	bne.n	8004fc4 <UART_SetConfig+0x268>
 8004f62:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <UART_SetConfig+0x338>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d826      	bhi.n	8004fbc <UART_SetConfig+0x260>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0x218>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e1b6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e1b2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e1ae      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e1aa      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fac:	2320      	movs	r3, #32
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e1a6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e1a2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e19e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a35      	ldr	r2, [pc, #212]	; (80050a0 <UART_SetConfig+0x344>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d130      	bne.n	8005030 <UART_SetConfig+0x2d4>
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <UART_SetConfig+0x338>)
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d826      	bhi.n	8005028 <UART_SetConfig+0x2cc>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x284>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e180      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e17c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e178      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e174      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e170      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e16c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e168      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <UART_SetConfig+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d142      	bne.n	80050c0 <UART_SetConfig+0x364>
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <UART_SetConfig+0x338>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b05      	cmp	r3, #5
 8005044:	d838      	bhi.n	80050b8 <UART_SetConfig+0x35c>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x2f0>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005065 	.word	0x08005065
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005075 	.word	0x08005075
 8005058:	0800507d 	.word	0x0800507d
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050b1 	.word	0x080050b1
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e14a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e146      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e142      	b.n	8005302 <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e13e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005084:	cfff69f3 	.word	0xcfff69f3
 8005088:	58000c00 	.word	0x58000c00
 800508c:	11fff4ff 	.word	0x11fff4ff
 8005090:	40011000 	.word	0x40011000
 8005094:	58024400 	.word	0x58024400
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800
 80050a0:	40004c00 	.word	0x40004c00
 80050a4:	40005000 	.word	0x40005000
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e128      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e124      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e120      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4acb      	ldr	r2, [pc, #812]	; (80053f4 <UART_SetConfig+0x698>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d176      	bne.n	80051b8 <UART_SetConfig+0x45c>
 80050ca:	4bcb      	ldr	r3, [pc, #812]	; (80053f8 <UART_SetConfig+0x69c>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d2:	2b28      	cmp	r3, #40	; 0x28
 80050d4:	d86c      	bhi.n	80051b0 <UART_SetConfig+0x454>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x380>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005181 	.word	0x08005181
 80050e0:	080051b1 	.word	0x080051b1
 80050e4:	080051b1 	.word	0x080051b1
 80050e8:	080051b1 	.word	0x080051b1
 80050ec:	080051b1 	.word	0x080051b1
 80050f0:	080051b1 	.word	0x080051b1
 80050f4:	080051b1 	.word	0x080051b1
 80050f8:	080051b1 	.word	0x080051b1
 80050fc:	08005189 	.word	0x08005189
 8005100:	080051b1 	.word	0x080051b1
 8005104:	080051b1 	.word	0x080051b1
 8005108:	080051b1 	.word	0x080051b1
 800510c:	080051b1 	.word	0x080051b1
 8005110:	080051b1 	.word	0x080051b1
 8005114:	080051b1 	.word	0x080051b1
 8005118:	080051b1 	.word	0x080051b1
 800511c:	08005191 	.word	0x08005191
 8005120:	080051b1 	.word	0x080051b1
 8005124:	080051b1 	.word	0x080051b1
 8005128:	080051b1 	.word	0x080051b1
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080051b1 	.word	0x080051b1
 8005134:	080051b1 	.word	0x080051b1
 8005138:	080051b1 	.word	0x080051b1
 800513c:	08005199 	.word	0x08005199
 8005140:	080051b1 	.word	0x080051b1
 8005144:	080051b1 	.word	0x080051b1
 8005148:	080051b1 	.word	0x080051b1
 800514c:	080051b1 	.word	0x080051b1
 8005150:	080051b1 	.word	0x080051b1
 8005154:	080051b1 	.word	0x080051b1
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b1 	.word	0x080051b1
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e0bc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e0b8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e0b4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e0b0      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a0:	2320      	movs	r3, #32
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e0ac      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e0a8      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e0a4      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a8f      	ldr	r2, [pc, #572]	; (80053fc <UART_SetConfig+0x6a0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d130      	bne.n	8005224 <UART_SetConfig+0x4c8>
 80051c2:	4b8d      	ldr	r3, [pc, #564]	; (80053f8 <UART_SetConfig+0x69c>)
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d826      	bhi.n	800521c <UART_SetConfig+0x4c0>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0x478>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051fd 	.word	0x080051fd
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e086      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e082      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e07e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e07a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e076      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e072      	b.n	8005302 <UART_SetConfig+0x5a6>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e06e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a75      	ldr	r2, [pc, #468]	; (8005400 <UART_SetConfig+0x6a4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d130      	bne.n	8005290 <UART_SetConfig+0x534>
 800522e:	4b72      	ldr	r3, [pc, #456]	; (80053f8 <UART_SetConfig+0x69c>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d826      	bhi.n	8005288 <UART_SetConfig+0x52c>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x4e4>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e050      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e04c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e048      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e044      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e040      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e03c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e038      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5b      	ldr	r2, [pc, #364]	; (8005404 <UART_SetConfig+0x6a8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x5a0>
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <UART_SetConfig+0x69c>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x598>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x550>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e01a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e016      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e012      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e00e      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e00a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e006      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e002      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3f      	ldr	r2, [pc, #252]	; (8005404 <UART_SetConfig+0x6a8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	f040 80f8 	bne.w	80054fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800530e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005312:	2b20      	cmp	r3, #32
 8005314:	dc46      	bgt.n	80053a4 <UART_SetConfig+0x648>
 8005316:	2b02      	cmp	r3, #2
 8005318:	f2c0 8082 	blt.w	8005420 <UART_SetConfig+0x6c4>
 800531c:	3b02      	subs	r3, #2
 800531e:	2b1e      	cmp	r3, #30
 8005320:	d87e      	bhi.n	8005420 <UART_SetConfig+0x6c4>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x5cc>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	080053ab 	.word	0x080053ab
 800532c:	08005421 	.word	0x08005421
 8005330:	080053b3 	.word	0x080053b3
 8005334:	08005421 	.word	0x08005421
 8005338:	08005421 	.word	0x08005421
 800533c:	08005421 	.word	0x08005421
 8005340:	080053c3 	.word	0x080053c3
 8005344:	08005421 	.word	0x08005421
 8005348:	08005421 	.word	0x08005421
 800534c:	08005421 	.word	0x08005421
 8005350:	08005421 	.word	0x08005421
 8005354:	08005421 	.word	0x08005421
 8005358:	08005421 	.word	0x08005421
 800535c:	08005421 	.word	0x08005421
 8005360:	080053d3 	.word	0x080053d3
 8005364:	08005421 	.word	0x08005421
 8005368:	08005421 	.word	0x08005421
 800536c:	08005421 	.word	0x08005421
 8005370:	08005421 	.word	0x08005421
 8005374:	08005421 	.word	0x08005421
 8005378:	08005421 	.word	0x08005421
 800537c:	08005421 	.word	0x08005421
 8005380:	08005421 	.word	0x08005421
 8005384:	08005421 	.word	0x08005421
 8005388:	08005421 	.word	0x08005421
 800538c:	08005421 	.word	0x08005421
 8005390:	08005421 	.word	0x08005421
 8005394:	08005421 	.word	0x08005421
 8005398:	08005421 	.word	0x08005421
 800539c:	08005421 	.word	0x08005421
 80053a0:	08005413 	.word	0x08005413
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d037      	beq.n	8005418 <UART_SetConfig+0x6bc>
 80053a8:	e03a      	b.n	8005420 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053aa:	f7fe ff13 	bl	80041d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80053ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053b0:	e03c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe ff22 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c0:	e034      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f86e 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d0:	e02c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <UART_SetConfig+0x69c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <UART_SetConfig+0x69c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <UART_SetConfig+0x6ac>)
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f0:	e01c      	b.n	800542c <UART_SetConfig+0x6d0>
 80053f2:	bf00      	nop
 80053f4:	40011400 	.word	0x40011400
 80053f8:	58024400 	.word	0x58024400
 80053fc:	40007800 	.word	0x40007800
 8005400:	40007c00 	.word	0x40007c00
 8005404:	58000c00 	.word	0x58000c00
 8005408:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800540c:	4b9d      	ldr	r3, [pc, #628]	; (8005684 <UART_SetConfig+0x928>)
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005410:	e00c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005412:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <UART_SetConfig+0x92c>)
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005416:	e009      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541e:	e005      	b.n	800542c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800542a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 81de 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	4a94      	ldr	r2, [pc, #592]	; (800568c <UART_SetConfig+0x930>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	fbb3 f3f2 	udiv	r3, r3, r2
 8005446:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005454:	429a      	cmp	r2, r3
 8005456:	d305      	bcc.n	8005464 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005460:	429a      	cmp	r2, r3
 8005462:	d903      	bls.n	800546c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800546a:	e1c1      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	2200      	movs	r2, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	4a84      	ldr	r2, [pc, #528]	; (800568c <UART_SetConfig+0x930>)
 800547a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547e:	b29b      	uxth	r3, r3
 8005480:	2200      	movs	r2, #0
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800548e:	f7fa ff23 	bl	80002d8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	020b      	lsls	r3, r1, #8
 80054a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054a8:	0202      	lsls	r2, r0, #8
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	6849      	ldr	r1, [r1, #4]
 80054ae:	0849      	lsrs	r1, r1, #1
 80054b0:	2000      	movs	r0, #0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4605      	mov	r5, r0
 80054b6:	eb12 0804 	adds.w	r8, r2, r4
 80054ba:	eb43 0905 	adc.w	r9, r3, r5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	469a      	mov	sl, r3
 80054c6:	4693      	mov	fp, r2
 80054c8:	4652      	mov	r2, sl
 80054ca:	465b      	mov	r3, fp
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fa ff02 	bl	80002d8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e2:	d308      	bcc.n	80054f6 <UART_SetConfig+0x79a>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d204      	bcs.n	80054f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e17c      	b.n	80057f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054fc:	e178      	b.n	80057f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005506:	f040 80c5 	bne.w	8005694 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800550a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800550e:	2b20      	cmp	r3, #32
 8005510:	dc48      	bgt.n	80055a4 <UART_SetConfig+0x848>
 8005512:	2b00      	cmp	r3, #0
 8005514:	db7b      	blt.n	800560e <UART_SetConfig+0x8b2>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d879      	bhi.n	800560e <UART_SetConfig+0x8b2>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x7c4>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	080055ab 	.word	0x080055ab
 8005524:	080055b3 	.word	0x080055b3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	0800560f 	.word	0x0800560f
 8005530:	080055bb 	.word	0x080055bb
 8005534:	0800560f 	.word	0x0800560f
 8005538:	0800560f 	.word	0x0800560f
 800553c:	0800560f 	.word	0x0800560f
 8005540:	080055cb 	.word	0x080055cb
 8005544:	0800560f 	.word	0x0800560f
 8005548:	0800560f 	.word	0x0800560f
 800554c:	0800560f 	.word	0x0800560f
 8005550:	0800560f 	.word	0x0800560f
 8005554:	0800560f 	.word	0x0800560f
 8005558:	0800560f 	.word	0x0800560f
 800555c:	0800560f 	.word	0x0800560f
 8005560:	080055db 	.word	0x080055db
 8005564:	0800560f 	.word	0x0800560f
 8005568:	0800560f 	.word	0x0800560f
 800556c:	0800560f 	.word	0x0800560f
 8005570:	0800560f 	.word	0x0800560f
 8005574:	0800560f 	.word	0x0800560f
 8005578:	0800560f 	.word	0x0800560f
 800557c:	0800560f 	.word	0x0800560f
 8005580:	0800560f 	.word	0x0800560f
 8005584:	0800560f 	.word	0x0800560f
 8005588:	0800560f 	.word	0x0800560f
 800558c:	0800560f 	.word	0x0800560f
 8005590:	0800560f 	.word	0x0800560f
 8005594:	0800560f 	.word	0x0800560f
 8005598:	0800560f 	.word	0x0800560f
 800559c:	0800560f 	.word	0x0800560f
 80055a0:	08005601 	.word	0x08005601
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d02e      	beq.n	8005606 <UART_SetConfig+0x8aa>
 80055a8:	e031      	b.n	800560e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7fd f9cf 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 80055ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b0:	e033      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b2:	f7fd f9e1 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 80055b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b8:	e02f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fe1e 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	e027      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ca:	f107 0318 	add.w	r3, r7, #24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe ff6a 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d8:	e01f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055da:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <UART_SetConfig+0x934>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055e6:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <UART_SetConfig+0x934>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	4a24      	ldr	r2, [pc, #144]	; (8005684 <UART_SetConfig+0x928>)
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055f8:	e00f      	b.n	800561a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <UART_SetConfig+0x928>)
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055fe:	e00c      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <UART_SetConfig+0x92c>)
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80e7 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	4a19      	ldr	r2, [pc, #100]	; (800568c <UART_SetConfig+0x930>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	fbb3 f3f2 	udiv	r3, r3, r2
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d916      	bls.n	800567c <UART_SetConfig+0x920>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d212      	bcs.n	800567c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	b29b      	uxth	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	b29a      	uxth	r2, r3
 800566c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566e:	4313      	orrs	r3, r2
 8005670:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e0b9      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005682:	e0b5      	b.n	80057f0 <UART_SetConfig+0xa94>
 8005684:	03d09000 	.word	0x03d09000
 8005688:	003d0900 	.word	0x003d0900
 800568c:	08005e1c 	.word	0x08005e1c
 8005690:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005694:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005698:	2b20      	cmp	r3, #32
 800569a:	dc49      	bgt.n	8005730 <UART_SetConfig+0x9d4>
 800569c:	2b00      	cmp	r3, #0
 800569e:	db7c      	blt.n	800579a <UART_SetConfig+0xa3e>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d87a      	bhi.n	800579a <UART_SetConfig+0xa3e>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x950>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800579b 	.word	0x0800579b
 80056b8:	0800579b 	.word	0x0800579b
 80056bc:	08005747 	.word	0x08005747
 80056c0:	0800579b 	.word	0x0800579b
 80056c4:	0800579b 	.word	0x0800579b
 80056c8:	0800579b 	.word	0x0800579b
 80056cc:	08005757 	.word	0x08005757
 80056d0:	0800579b 	.word	0x0800579b
 80056d4:	0800579b 	.word	0x0800579b
 80056d8:	0800579b 	.word	0x0800579b
 80056dc:	0800579b 	.word	0x0800579b
 80056e0:	0800579b 	.word	0x0800579b
 80056e4:	0800579b 	.word	0x0800579b
 80056e8:	0800579b 	.word	0x0800579b
 80056ec:	08005767 	.word	0x08005767
 80056f0:	0800579b 	.word	0x0800579b
 80056f4:	0800579b 	.word	0x0800579b
 80056f8:	0800579b 	.word	0x0800579b
 80056fc:	0800579b 	.word	0x0800579b
 8005700:	0800579b 	.word	0x0800579b
 8005704:	0800579b 	.word	0x0800579b
 8005708:	0800579b 	.word	0x0800579b
 800570c:	0800579b 	.word	0x0800579b
 8005710:	0800579b 	.word	0x0800579b
 8005714:	0800579b 	.word	0x0800579b
 8005718:	0800579b 	.word	0x0800579b
 800571c:	0800579b 	.word	0x0800579b
 8005720:	0800579b 	.word	0x0800579b
 8005724:	0800579b 	.word	0x0800579b
 8005728:	0800579b 	.word	0x0800579b
 800572c:	0800578d 	.word	0x0800578d
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d02e      	beq.n	8005792 <UART_SetConfig+0xa36>
 8005734:	e031      	b.n	800579a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005736:	f7fd f909 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 800573a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800573c:	e033      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7fd f91b 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8005742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005744:	e02f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fd58 	bl	8004200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005754:	e027      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005756:	f107 0318 	add.w	r3, r7, #24
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fea4 	bl	80044a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005764:	e01f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005766:	4b2d      	ldr	r3, [pc, #180]	; (800581c <UART_SetConfig+0xac0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <UART_SetConfig+0xac0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <UART_SetConfig+0xac4>)
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005784:	e00f      	b.n	80057a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <UART_SetConfig+0xac4>)
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578a:	e00c      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <UART_SetConfig+0xac8>)
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005798:	e005      	b.n	80057a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057a4:	bf00      	nop
    }

    if (pclk != 0U)
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d021      	beq.n	80057f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <UART_SetConfig+0xacc>)
 80057b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	441a      	add	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d909      	bls.n	80057ea <UART_SetConfig+0xa8e>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057dc:	d205      	bcs.n	80057ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800580c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005810:	4618      	mov	r0, r3
 8005812:	3748      	adds	r7, #72	; 0x48
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	003d0900 	.word	0x003d0900
 8005828:	08005e1c 	.word	0x08005e1c

0800582c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01a      	beq.n	8005942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592a:	d10a      	bne.n	8005942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af02      	add	r7, sp, #8
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005980:	f7fb fabe 	bl	8000f00 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b08      	cmp	r3, #8
 8005992:	d10e      	bne.n	80059b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f82f 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e025      	b.n	80059fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d10e      	bne.n	80059de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f819 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e00f      	b.n	80059fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	e0a9      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	f000 80a5 	beq.w	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fb fa6d 	bl	8000f00 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d140      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e069      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d051      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d149      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
 8005b02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	613b      	str	r3, [r7, #16]
   return(result);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b34:	623a      	str	r2, [r7, #32]
 8005b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e010      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2301      	moveq	r3, #1
 8005b7e:	2300      	movne	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	f43f af46 	beq.w	8005a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3770      	adds	r7, #112	; 0x70
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_UARTEx_DisableFifoMode+0x16>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e027      	b.n	8005bfc <HAL_UARTEx_DisableFifoMode+0x66>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e02d      	b.n	8005c7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f84f 	bl	8005d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e02d      	b.n	8005cf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f811 	bl	8005d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d20:	e031      	b.n	8005d86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d22:	2310      	movs	r3, #16
 8005d24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d26:	2310      	movs	r3, #16
 8005d28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	0e5b      	lsrs	r3, r3, #25
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	0f5b      	lsrs	r3, r3, #29
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	7b3a      	ldrb	r2, [r7, #12]
 8005d4e:	4911      	ldr	r1, [pc, #68]	; (8005d94 <UARTEx_SetNbDataToProcess+0x94>)
 8005d50:	5c8a      	ldrb	r2, [r1, r2]
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d56:	7b3a      	ldrb	r2, [r7, #12]
 8005d58:	490f      	ldr	r1, [pc, #60]	; (8005d98 <UARTEx_SetNbDataToProcess+0x98>)
 8005d5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	7b7a      	ldrb	r2, [r7, #13]
 8005d6c:	4909      	ldr	r1, [pc, #36]	; (8005d94 <UARTEx_SetNbDataToProcess+0x94>)
 8005d6e:	5c8a      	ldrb	r2, [r1, r2]
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d74:	7b7a      	ldrb	r2, [r7, #13]
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <UARTEx_SetNbDataToProcess+0x98>)
 8005d78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	08005e34 	.word	0x08005e34
 8005d98:	08005e3c 	.word	0x08005e3c

08005d9c <memset>:
 8005d9c:	4402      	add	r2, r0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d100      	bne.n	8005da6 <memset+0xa>
 8005da4:	4770      	bx	lr
 8005da6:	f803 1b01 	strb.w	r1, [r3], #1
 8005daa:	e7f9      	b.n	8005da0 <memset+0x4>

08005dac <__libc_init_array>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	4d0d      	ldr	r5, [pc, #52]	; (8005de4 <__libc_init_array+0x38>)
 8005db0:	4c0d      	ldr	r4, [pc, #52]	; (8005de8 <__libc_init_array+0x3c>)
 8005db2:	1b64      	subs	r4, r4, r5
 8005db4:	10a4      	asrs	r4, r4, #2
 8005db6:	2600      	movs	r6, #0
 8005db8:	42a6      	cmp	r6, r4
 8005dba:	d109      	bne.n	8005dd0 <__libc_init_array+0x24>
 8005dbc:	4d0b      	ldr	r5, [pc, #44]	; (8005dec <__libc_init_array+0x40>)
 8005dbe:	4c0c      	ldr	r4, [pc, #48]	; (8005df0 <__libc_init_array+0x44>)
 8005dc0:	f000 f818 	bl	8005df4 <_init>
 8005dc4:	1b64      	subs	r4, r4, r5
 8005dc6:	10a4      	asrs	r4, r4, #2
 8005dc8:	2600      	movs	r6, #0
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	d105      	bne.n	8005dda <__libc_init_array+0x2e>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd4:	4798      	blx	r3
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7ee      	b.n	8005db8 <__libc_init_array+0xc>
 8005dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dde:	4798      	blx	r3
 8005de0:	3601      	adds	r6, #1
 8005de2:	e7f2      	b.n	8005dca <__libc_init_array+0x1e>
 8005de4:	08005e4c 	.word	0x08005e4c
 8005de8:	08005e4c 	.word	0x08005e4c
 8005dec:	08005e4c 	.word	0x08005e4c
 8005df0:	08005e50 	.word	0x08005e50

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
