
stm32_h7_encoder_plus_can_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008238  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  081084d8  081084d8  000184d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08108a14  08108a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08108a18  08108a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  10000000  08108a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000148  100001ec  08108c08  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000334  08108c08  00020334  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c906  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000180a  00000000  00000000  0002cb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a30  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000968  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039adb  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b4e8  00000000  00000000  000691a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001810df  00000000  00000000  0007468b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f576a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004050  00000000  00000000  001f57bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001ec 	.word	0x100001ec
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081084c0 	.word	0x081084c0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f0 	.word	0x100001f0
 81002dc:	081084c0 	.word	0x081084c0

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	; (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	; (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b09      	ldr	r3, [pc, #36]	; (8100e30 <SystemInit+0x2c>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e0e:	4a08      	ldr	r2, [pc, #32]	; (8100e30 <SystemInit+0x2c>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b05      	ldr	r3, [pc, #20]	; (8100e30 <SystemInit+0x2c>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a04      	ldr	r2, [pc, #16]	; (8100e30 <SystemInit+0x2c>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100e24:	bf00      	nop
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr
 8100e2e:	bf00      	nop
 8100e30:	e000ed00 	.word	0xe000ed00

08100e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b084      	sub	sp, #16
 8100e38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100e3a:	f000 fadb 	bl	81013f4 <HAL_Init>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100e3e:	f000 f8f3 	bl	8101028 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8100e42:	f000 f839 	bl	8100eb8 <MX_FDCAN2_Init>
	union BytesFloat bf;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Hello world");
 8100e46:	4814      	ldr	r0, [pc, #80]	; (8100e98 <main+0x64>)
 8100e48:	f003 fd38 	bl	81048bc <iprintf>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TxHeader.Identifier = 0x00FF14A3;
 8100e4c:	4b13      	ldr	r3, [pc, #76]	; (8100e9c <main+0x68>)
 8100e4e:	4a14      	ldr	r2, [pc, #80]	; (8100ea0 <main+0x6c>)
 8100e50:	601a      	str	r2, [r3, #0]
		HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8100e52:	4b14      	ldr	r3, [pc, #80]	; (8100ea4 <main+0x70>)
 8100e54:	4a14      	ldr	r2, [pc, #80]	; (8100ea8 <main+0x74>)
 8100e56:	2140      	movs	r1, #64	; 0x40
 8100e58:	4814      	ldr	r0, [pc, #80]	; (8100eac <main+0x78>)
 8100e5a:	f000 ff0f 	bl	8101c7c <HAL_FDCAN_GetRxMessage>
		for (size_t i = 0; i < sizeof(float); i++) {
 8100e5e:	2300      	movs	r3, #0
 8100e60:	60fb      	str	r3, [r7, #12]
 8100e62:	e00c      	b.n	8100e7e <main+0x4a>
			uint8_t receivedByte = TxData[i];
 8100e64:	4a12      	ldr	r2, [pc, #72]	; (8100eb0 <main+0x7c>)
 8100e66:	68fb      	ldr	r3, [r7, #12]
 8100e68:	4413      	add	r3, r2
 8100e6a:	781b      	ldrb	r3, [r3, #0]
 8100e6c:	72fb      	strb	r3, [r7, #11]
			bf.byteValue[i] = receivedByte;
 8100e6e:	1d3a      	adds	r2, r7, #4
 8100e70:	68fb      	ldr	r3, [r7, #12]
 8100e72:	4413      	add	r3, r2
 8100e74:	7afa      	ldrb	r2, [r7, #11]
 8100e76:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < sizeof(float); i++) {
 8100e78:	68fb      	ldr	r3, [r7, #12]
 8100e7a:	3301      	adds	r3, #1
 8100e7c:	60fb      	str	r3, [r7, #12]
 8100e7e:	68fb      	ldr	r3, [r7, #12]
 8100e80:	2b03      	cmp	r3, #3
 8100e82:	d9ef      	bls.n	8100e64 <main+0x30>
		}
		printf("\r\nReceived float: %f \r\n", bf.floatValue);
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	4618      	mov	r0, r3
 8100e88:	f7ff fbe6 	bl	8100658 <__aeabi_f2d>
 8100e8c:	4602      	mov	r2, r0
 8100e8e:	460b      	mov	r3, r1
 8100e90:	4808      	ldr	r0, [pc, #32]	; (8100eb4 <main+0x80>)
 8100e92:	f003 fd13 	bl	81048bc <iprintf>
		TxHeader.Identifier = 0x00FF14A3;
 8100e96:	e7d9      	b.n	8100e4c <main+0x18>
 8100e98:	081084d8 	.word	0x081084d8
 8100e9c:	100002c8 	.word	0x100002c8
 8100ea0:	00ff14a3 	.word	0x00ff14a3
 8100ea4:	10000314 	.word	0x10000314
 8100ea8:	100002ec 	.word	0x100002ec
 8100eac:	10000208 	.word	0x10000208
 8100eb0:	10000008 	.word	0x10000008
 8100eb4:	081084e4 	.word	0x081084e4

08100eb8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8100eb8:	b580      	push	{r7, lr}
 8100eba:	b082      	sub	sp, #8
 8100ebc:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8100ebe:	4b55      	ldr	r3, [pc, #340]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ec0:	4a55      	ldr	r2, [pc, #340]	; (8101018 <MX_FDCAN2_Init+0x160>)
 8100ec2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100ec4:	4b53      	ldr	r3, [pc, #332]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ec6:	2200      	movs	r2, #0
 8100ec8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8100eca:	4b52      	ldr	r3, [pc, #328]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ecc:	2200      	movs	r2, #0
 8100ece:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100ed0:	4b50      	ldr	r3, [pc, #320]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ed2:	2200      	movs	r2, #0
 8100ed4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8100ed6:	4b4f      	ldr	r3, [pc, #316]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8100edc:	4b4d      	ldr	r3, [pc, #308]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ede:	2201      	movs	r2, #1
 8100ee0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 8100ee2:	4b4c      	ldr	r3, [pc, #304]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ee4:	2202      	movs	r2, #2
 8100ee6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 8;
 8100ee8:	4b4a      	ldr	r3, [pc, #296]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100eea:	2208      	movs	r2, #8
 8100eec:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 0x3F;
 8100eee:	4b49      	ldr	r3, [pc, #292]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ef0:	223f      	movs	r2, #63	; 0x3f
 8100ef2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8100ef4:	4b47      	ldr	r3, [pc, #284]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100ef6:	2210      	movs	r2, #16
 8100ef8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100efa:	4b46      	ldr	r3, [pc, #280]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100efc:	2201      	movs	r2, #1
 8100efe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100f00:	4b44      	ldr	r3, [pc, #272]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f02:	2201      	movs	r2, #1
 8100f04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100f06:	4b43      	ldr	r3, [pc, #268]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f08:	2201      	movs	r2, #1
 8100f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100f0c:	4b41      	ldr	r3, [pc, #260]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f0e:	2201      	movs	r2, #1
 8100f10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100f12:	4b40      	ldr	r3, [pc, #256]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f14:	2200      	movs	r2, #0
 8100f16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8100f18:	4b3e      	ldr	r3, [pc, #248]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f1a:	2201      	movs	r2, #1
 8100f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100f1e:	4b3d      	ldr	r3, [pc, #244]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f20:	2200      	movs	r2, #0
 8100f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 8100f24:	4b3b      	ldr	r3, [pc, #236]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f26:	2201      	movs	r2, #1
 8100f28:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100f2a:	4b3a      	ldr	r3, [pc, #232]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f2c:	2204      	movs	r2, #4
 8100f2e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100f30:	4b38      	ldr	r3, [pc, #224]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f32:	2200      	movs	r2, #0
 8100f34:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100f36:	4b37      	ldr	r3, [pc, #220]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f38:	2204      	movs	r2, #4
 8100f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100f3c:	4b35      	ldr	r3, [pc, #212]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f3e:	2200      	movs	r2, #0
 8100f40:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100f42:	4b34      	ldr	r3, [pc, #208]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f44:	2204      	movs	r2, #4
 8100f46:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8100f48:	4b32      	ldr	r3, [pc, #200]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f4a:	2200      	movs	r2, #0
 8100f4c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100f4e:	4b31      	ldr	r3, [pc, #196]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8100f54:	4b2f      	ldr	r3, [pc, #188]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f56:	2201      	movs	r2, #1
 8100f58:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100f5a:	4b2e      	ldr	r3, [pc, #184]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f5c:	2200      	movs	r2, #0
 8100f5e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100f60:	4b2c      	ldr	r3, [pc, #176]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f62:	2204      	movs	r2, #4
 8100f64:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100f66:	482b      	ldr	r0, [pc, #172]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100f68:	f000 fbdc 	bl	8101724 <HAL_FDCAN_Init>
 8100f6c:	4603      	mov	r3, r0
 8100f6e:	2b00      	cmp	r3, #0
 8100f70:	d001      	beq.n	8100f76 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8100f72:	f000 f89d 	bl	81010b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8100f76:	4b29      	ldr	r3, [pc, #164]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f78:	2200      	movs	r2, #0
 8100f7a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8100f7c:	4b27      	ldr	r3, [pc, #156]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f7e:	2200      	movs	r2, #0
 8100f80:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8100f82:	4b26      	ldr	r3, [pc, #152]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f84:	2202      	movs	r2, #2
 8100f86:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8100f88:	4b24      	ldr	r3, [pc, #144]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f8a:	2201      	movs	r2, #1
 8100f8c:	60da      	str	r2, [r3, #12]
//    sFilterConfig.FilterID1 = 0x321;
//    sFilterConfig.FilterID2 = 0x7FF;
	sFilterConfig.FilterID1 = 0x610; //Testing
 8100f8e:	4b23      	ldr	r3, [pc, #140]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f90:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8100f94:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xFFF;
 8100f96:	4b21      	ldr	r3, [pc, #132]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100f98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8100f9c:	615a      	str	r2, [r3, #20]

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT,
 8100f9e:	2301      	movs	r3, #1
 8100fa0:	9300      	str	r3, [sp, #0]
 8100fa2:	2301      	movs	r3, #1
 8100fa4:	2202      	movs	r2, #2
 8100fa6:	2102      	movs	r1, #2
 8100fa8:	481a      	ldr	r0, [pc, #104]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100faa:	f000 fe0f 	bl	8101bcc <HAL_FDCAN_ConfigGlobalFilter>
			FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8100fae:	491b      	ldr	r1, [pc, #108]	; (810101c <MX_FDCAN2_Init+0x164>)
 8100fb0:	4818      	ldr	r0, [pc, #96]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100fb2:	f000 fd95 	bl	8101ae0 <HAL_FDCAN_ConfigFilter>
 8100fb6:	4603      	mov	r3, r0
 8100fb8:	2b00      	cmp	r3, #0
 8100fba:	d001      	beq.n	8100fc0 <MX_FDCAN2_Init+0x108>
		/* Filter configuration Error */
		Error_Handler();
 8100fbc:	f000 f878 	bl	81010b0 <Error_Handler>
	}
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8100fc0:	4814      	ldr	r0, [pc, #80]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100fc2:	f000 fe30 	bl	8101c26 <HAL_FDCAN_Start>
	}
	/* Start Error */
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8100fc6:	2200      	movs	r2, #0
 8100fc8:	2101      	movs	r1, #1
 8100fca:	4812      	ldr	r0, [pc, #72]	; (8101014 <MX_FDCAN2_Init+0x15c>)
 8100fcc:	f000 ffc4 	bl	8101f58 <HAL_FDCAN_ActivateNotification>
			0) != HAL_OK) {
	}
	/* Notification Error */

	/* Configure Tx buffer message */
	TxHeader.Identifier = 0x00FF14A3;
 8100fd0:	4b13      	ldr	r3, [pc, #76]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100fd2:	4a14      	ldr	r2, [pc, #80]	; (8101024 <MX_FDCAN2_Init+0x16c>)
 8100fd4:	601a      	str	r2, [r3, #0]
//    TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8100fd6:	4b12      	ldr	r3, [pc, #72]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100fdc:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8100fde:	4b10      	ldr	r3, [pc, #64]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100fe0:	2200      	movs	r2, #0
 8100fe2:	609a      	str	r2, [r3, #8]
//    TxHeader.DataLength = FDCAN_DLC_BYTES_12;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8100fe4:	4b0e      	ldr	r3, [pc, #56]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100fe6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8100fea:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8100fec:	4b0c      	ldr	r3, [pc, #48]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100fee:	2200      	movs	r2, #0
 8100ff0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8100ff2:	4b0b      	ldr	r3, [pc, #44]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100ff4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8100ff8:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8100ffa:	4b09      	ldr	r3, [pc, #36]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8100ffc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8101000:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8101002:	4b07      	ldr	r3, [pc, #28]	; (8101020 <MX_FDCAN2_Init+0x168>)
 8101004:	2200      	movs	r2, #0
 8101006:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0x00;
 8101008:	4b05      	ldr	r3, [pc, #20]	; (8101020 <MX_FDCAN2_Init+0x168>)
 810100a:	2200      	movs	r2, #0
 810100c:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN2_Init 2 */

}
 810100e:	bf00      	nop
 8101010:	46bd      	mov	sp, r7
 8101012:	bd80      	pop	{r7, pc}
 8101014:	10000208 	.word	0x10000208
 8101018:	4000a400 	.word	0x4000a400
 810101c:	100002a8 	.word	0x100002a8
 8101020:	100002c8 	.word	0x100002c8
 8101024:	00ff14a3 	.word	0x00ff14a3

08101028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101028:	b580      	push	{r7, lr}
 810102a:	b088      	sub	sp, #32
 810102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810102e:	f107 030c 	add.w	r3, r7, #12
 8101032:	2200      	movs	r2, #0
 8101034:	601a      	str	r2, [r3, #0]
 8101036:	605a      	str	r2, [r3, #4]
 8101038:	609a      	str	r2, [r3, #8]
 810103a:	60da      	str	r2, [r3, #12]
 810103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810103e:	4b1a      	ldr	r3, [pc, #104]	; (81010a8 <MX_GPIO_Init+0x80>)
 8101040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101044:	4a18      	ldr	r2, [pc, #96]	; (81010a8 <MX_GPIO_Init+0x80>)
 8101046:	f043 0302 	orr.w	r3, r3, #2
 810104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810104e:	4b16      	ldr	r3, [pc, #88]	; (81010a8 <MX_GPIO_Init+0x80>)
 8101050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101054:	f003 0302 	and.w	r3, r3, #2
 8101058:	60bb      	str	r3, [r7, #8]
 810105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810105c:	4b12      	ldr	r3, [pc, #72]	; (81010a8 <MX_GPIO_Init+0x80>)
 810105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101062:	4a11      	ldr	r2, [pc, #68]	; (81010a8 <MX_GPIO_Init+0x80>)
 8101064:	f043 0310 	orr.w	r3, r3, #16
 8101068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810106c:	4b0e      	ldr	r3, [pc, #56]	; (81010a8 <MX_GPIO_Init+0x80>)
 810106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101072:	f003 0310 	and.w	r3, r3, #16
 8101076:	607b      	str	r3, [r7, #4]
 8101078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 810107a:	2200      	movs	r2, #0
 810107c:	2102      	movs	r1, #2
 810107e:	480b      	ldr	r0, [pc, #44]	; (81010ac <MX_GPIO_Init+0x84>)
 8101080:	f001 fb24 	bl	81026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8101084:	2302      	movs	r3, #2
 8101086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101088:	2301      	movs	r3, #1
 810108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810108c:	2300      	movs	r3, #0
 810108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101090:	2300      	movs	r3, #0
 8101092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8101094:	f107 030c 	add.w	r3, r7, #12
 8101098:	4619      	mov	r1, r3
 810109a:	4804      	ldr	r0, [pc, #16]	; (81010ac <MX_GPIO_Init+0x84>)
 810109c:	f001 f966 	bl	810236c <HAL_GPIO_Init>

}
 81010a0:	bf00      	nop
 81010a2:	3720      	adds	r7, #32
 81010a4:	46bd      	mov	sp, r7
 81010a6:	bd80      	pop	{r7, pc}
 81010a8:	58024400 	.word	0x58024400
 81010ac:	58021000 	.word	0x58021000

081010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81010b0:	b480      	push	{r7}
 81010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 81010b4:	bf00      	nop
 81010b6:	46bd      	mov	sp, r7
 81010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010bc:	4770      	bx	lr
	...

081010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81010c0:	b480      	push	{r7}
 81010c2:	b083      	sub	sp, #12
 81010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81010c6:	4b0a      	ldr	r3, [pc, #40]	; (81010f0 <HAL_MspInit+0x30>)
 81010c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010cc:	4a08      	ldr	r2, [pc, #32]	; (81010f0 <HAL_MspInit+0x30>)
 81010ce:	f043 0302 	orr.w	r3, r3, #2
 81010d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81010d6:	4b06      	ldr	r3, [pc, #24]	; (81010f0 <HAL_MspInit+0x30>)
 81010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010dc:	f003 0302 	and.w	r3, r3, #2
 81010e0:	607b      	str	r3, [r7, #4]
 81010e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81010e4:	bf00      	nop
 81010e6:	370c      	adds	r7, #12
 81010e8:	46bd      	mov	sp, r7
 81010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ee:	4770      	bx	lr
 81010f0:	58024400 	.word	0x58024400

081010f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 81010f4:	b580      	push	{r7, lr}
 81010f6:	b0b8      	sub	sp, #224	; 0xe0
 81010f8:	af00      	add	r7, sp, #0
 81010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101100:	2200      	movs	r2, #0
 8101102:	601a      	str	r2, [r3, #0]
 8101104:	605a      	str	r2, [r3, #4]
 8101106:	609a      	str	r2, [r3, #8]
 8101108:	60da      	str	r2, [r3, #12]
 810110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810110c:	f107 0310 	add.w	r3, r7, #16
 8101110:	22bc      	movs	r2, #188	; 0xbc
 8101112:	2100      	movs	r1, #0
 8101114:	4618      	mov	r0, r3
 8101116:	f002 fd4f 	bl	8103bb8 <memset>
  if(hfdcan->Instance==FDCAN2)
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	681b      	ldr	r3, [r3, #0]
 810111e:	4a25      	ldr	r2, [pc, #148]	; (81011b4 <HAL_FDCAN_MspInit+0xc0>)
 8101120:	4293      	cmp	r3, r2
 8101122:	d142      	bne.n	81011aa <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8101124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8101128:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 810112a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810112e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101130:	f107 0310 	add.w	r3, r7, #16
 8101134:	4618      	mov	r0, r3
 8101136:	f001 fc5d 	bl	81029f4 <HAL_RCCEx_PeriphCLKConfig>
 810113a:	4603      	mov	r3, r0
 810113c:	2b00      	cmp	r3, #0
 810113e:	d001      	beq.n	8101144 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8101140:	f7ff ffb6 	bl	81010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8101144:	4b1c      	ldr	r3, [pc, #112]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 8101146:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810114a:	4a1b      	ldr	r2, [pc, #108]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 810114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101150:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8101154:	4b18      	ldr	r3, [pc, #96]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 8101156:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810115e:	60fb      	str	r3, [r7, #12]
 8101160:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101162:	4b15      	ldr	r3, [pc, #84]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 8101164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101168:	4a13      	ldr	r2, [pc, #76]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 810116a:	f043 0302 	orr.w	r3, r3, #2
 810116e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101172:	4b11      	ldr	r3, [pc, #68]	; (81011b8 <HAL_FDCAN_MspInit+0xc4>)
 8101174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101178:	f003 0302 	and.w	r3, r3, #2
 810117c:	60bb      	str	r3, [r7, #8]
 810117e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101180:	2360      	movs	r3, #96	; 0x60
 8101182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101186:	2302      	movs	r3, #2
 8101188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810118c:	2300      	movs	r3, #0
 810118e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101192:	2300      	movs	r3, #0
 8101194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8101198:	2309      	movs	r3, #9
 810119a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810119e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011a2:	4619      	mov	r1, r3
 81011a4:	4805      	ldr	r0, [pc, #20]	; (81011bc <HAL_FDCAN_MspInit+0xc8>)
 81011a6:	f001 f8e1 	bl	810236c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 81011aa:	bf00      	nop
 81011ac:	37e0      	adds	r7, #224	; 0xe0
 81011ae:	46bd      	mov	sp, r7
 81011b0:	bd80      	pop	{r7, pc}
 81011b2:	bf00      	nop
 81011b4:	4000a400 	.word	0x4000a400
 81011b8:	58024400 	.word	0x58024400
 81011bc:	58020400 	.word	0x58020400

081011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81011c0:	b480      	push	{r7}
 81011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81011c4:	e7fe      	b.n	81011c4 <NMI_Handler+0x4>

081011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81011c6:	b480      	push	{r7}
 81011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81011ca:	e7fe      	b.n	81011ca <HardFault_Handler+0x4>

081011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81011cc:	b480      	push	{r7}
 81011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81011d0:	e7fe      	b.n	81011d0 <MemManage_Handler+0x4>

081011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81011d2:	b480      	push	{r7}
 81011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81011d6:	e7fe      	b.n	81011d6 <BusFault_Handler+0x4>

081011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011d8:	b480      	push	{r7}
 81011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011dc:	e7fe      	b.n	81011dc <UsageFault_Handler+0x4>

081011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011de:	b480      	push	{r7}
 81011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011e2:	bf00      	nop
 81011e4:	46bd      	mov	sp, r7
 81011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ea:	4770      	bx	lr

081011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011ec:	b480      	push	{r7}
 81011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011f0:	bf00      	nop
 81011f2:	46bd      	mov	sp, r7
 81011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f8:	4770      	bx	lr

081011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81011fa:	b480      	push	{r7}
 81011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81011fe:	bf00      	nop
 8101200:	46bd      	mov	sp, r7
 8101202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101206:	4770      	bx	lr

08101208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810120c:	f000 f986 	bl	810151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101210:	bf00      	nop
 8101212:	bd80      	pop	{r7, pc}

08101214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101214:	b480      	push	{r7}
 8101216:	af00      	add	r7, sp, #0
	return 1;
 8101218:	2301      	movs	r3, #1
}
 810121a:	4618      	mov	r0, r3
 810121c:	46bd      	mov	sp, r7
 810121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101222:	4770      	bx	lr

08101224 <_kill>:

int _kill(int pid, int sig)
{
 8101224:	b580      	push	{r7, lr}
 8101226:	b082      	sub	sp, #8
 8101228:	af00      	add	r7, sp, #0
 810122a:	6078      	str	r0, [r7, #4]
 810122c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810122e:	f002 fc8b 	bl	8103b48 <__errno>
 8101232:	4603      	mov	r3, r0
 8101234:	2216      	movs	r2, #22
 8101236:	601a      	str	r2, [r3, #0]
	return -1;
 8101238:	f04f 33ff 	mov.w	r3, #4294967295
}
 810123c:	4618      	mov	r0, r3
 810123e:	3708      	adds	r7, #8
 8101240:	46bd      	mov	sp, r7
 8101242:	bd80      	pop	{r7, pc}

08101244 <_exit>:

void _exit (int status)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	b082      	sub	sp, #8
 8101248:	af00      	add	r7, sp, #0
 810124a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 810124c:	f04f 31ff 	mov.w	r1, #4294967295
 8101250:	6878      	ldr	r0, [r7, #4]
 8101252:	f7ff ffe7 	bl	8101224 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101256:	e7fe      	b.n	8101256 <_exit+0x12>

08101258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101258:	b580      	push	{r7, lr}
 810125a:	b086      	sub	sp, #24
 810125c:	af00      	add	r7, sp, #0
 810125e:	60f8      	str	r0, [r7, #12]
 8101260:	60b9      	str	r1, [r7, #8]
 8101262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101264:	2300      	movs	r3, #0
 8101266:	617b      	str	r3, [r7, #20]
 8101268:	e00a      	b.n	8101280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810126a:	f3af 8000 	nop.w
 810126e:	4601      	mov	r1, r0
 8101270:	68bb      	ldr	r3, [r7, #8]
 8101272:	1c5a      	adds	r2, r3, #1
 8101274:	60ba      	str	r2, [r7, #8]
 8101276:	b2ca      	uxtb	r2, r1
 8101278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810127a:	697b      	ldr	r3, [r7, #20]
 810127c:	3301      	adds	r3, #1
 810127e:	617b      	str	r3, [r7, #20]
 8101280:	697a      	ldr	r2, [r7, #20]
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	429a      	cmp	r2, r3
 8101286:	dbf0      	blt.n	810126a <_read+0x12>
	}

return len;
 8101288:	687b      	ldr	r3, [r7, #4]
}
 810128a:	4618      	mov	r0, r3
 810128c:	3718      	adds	r7, #24
 810128e:	46bd      	mov	sp, r7
 8101290:	bd80      	pop	{r7, pc}

08101292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101292:	b580      	push	{r7, lr}
 8101294:	b086      	sub	sp, #24
 8101296:	af00      	add	r7, sp, #0
 8101298:	60f8      	str	r0, [r7, #12]
 810129a:	60b9      	str	r1, [r7, #8]
 810129c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810129e:	2300      	movs	r3, #0
 81012a0:	617b      	str	r3, [r7, #20]
 81012a2:	e009      	b.n	81012b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81012a4:	68bb      	ldr	r3, [r7, #8]
 81012a6:	1c5a      	adds	r2, r3, #1
 81012a8:	60ba      	str	r2, [r7, #8]
 81012aa:	781b      	ldrb	r3, [r3, #0]
 81012ac:	4618      	mov	r0, r3
 81012ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81012b2:	697b      	ldr	r3, [r7, #20]
 81012b4:	3301      	adds	r3, #1
 81012b6:	617b      	str	r3, [r7, #20]
 81012b8:	697a      	ldr	r2, [r7, #20]
 81012ba:	687b      	ldr	r3, [r7, #4]
 81012bc:	429a      	cmp	r2, r3
 81012be:	dbf1      	blt.n	81012a4 <_write+0x12>
	}
	return len;
 81012c0:	687b      	ldr	r3, [r7, #4]
}
 81012c2:	4618      	mov	r0, r3
 81012c4:	3718      	adds	r7, #24
 81012c6:	46bd      	mov	sp, r7
 81012c8:	bd80      	pop	{r7, pc}

081012ca <_close>:

int _close(int file)
{
 81012ca:	b480      	push	{r7}
 81012cc:	b083      	sub	sp, #12
 81012ce:	af00      	add	r7, sp, #0
 81012d0:	6078      	str	r0, [r7, #4]
	return -1;
 81012d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 81012d6:	4618      	mov	r0, r3
 81012d8:	370c      	adds	r7, #12
 81012da:	46bd      	mov	sp, r7
 81012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e0:	4770      	bx	lr

081012e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81012e2:	b480      	push	{r7}
 81012e4:	b083      	sub	sp, #12
 81012e6:	af00      	add	r7, sp, #0
 81012e8:	6078      	str	r0, [r7, #4]
 81012ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81012ec:	683b      	ldr	r3, [r7, #0]
 81012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81012f2:	605a      	str	r2, [r3, #4]
	return 0;
 81012f4:	2300      	movs	r3, #0
}
 81012f6:	4618      	mov	r0, r3
 81012f8:	370c      	adds	r7, #12
 81012fa:	46bd      	mov	sp, r7
 81012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101300:	4770      	bx	lr

08101302 <_isatty>:

int _isatty(int file)
{
 8101302:	b480      	push	{r7}
 8101304:	b083      	sub	sp, #12
 8101306:	af00      	add	r7, sp, #0
 8101308:	6078      	str	r0, [r7, #4]
	return 1;
 810130a:	2301      	movs	r3, #1
}
 810130c:	4618      	mov	r0, r3
 810130e:	370c      	adds	r7, #12
 8101310:	46bd      	mov	sp, r7
 8101312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101316:	4770      	bx	lr

08101318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101318:	b480      	push	{r7}
 810131a:	b085      	sub	sp, #20
 810131c:	af00      	add	r7, sp, #0
 810131e:	60f8      	str	r0, [r7, #12]
 8101320:	60b9      	str	r1, [r7, #8]
 8101322:	607a      	str	r2, [r7, #4]
	return 0;
 8101324:	2300      	movs	r3, #0
}
 8101326:	4618      	mov	r0, r3
 8101328:	3714      	adds	r7, #20
 810132a:	46bd      	mov	sp, r7
 810132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101330:	4770      	bx	lr
	...

08101334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101334:	b580      	push	{r7, lr}
 8101336:	b086      	sub	sp, #24
 8101338:	af00      	add	r7, sp, #0
 810133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810133c:	4a14      	ldr	r2, [pc, #80]	; (8101390 <_sbrk+0x5c>)
 810133e:	4b15      	ldr	r3, [pc, #84]	; (8101394 <_sbrk+0x60>)
 8101340:	1ad3      	subs	r3, r2, r3
 8101342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101344:	697b      	ldr	r3, [r7, #20]
 8101346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101348:	4b13      	ldr	r3, [pc, #76]	; (8101398 <_sbrk+0x64>)
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	2b00      	cmp	r3, #0
 810134e:	d102      	bne.n	8101356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101350:	4b11      	ldr	r3, [pc, #68]	; (8101398 <_sbrk+0x64>)
 8101352:	4a12      	ldr	r2, [pc, #72]	; (810139c <_sbrk+0x68>)
 8101354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101356:	4b10      	ldr	r3, [pc, #64]	; (8101398 <_sbrk+0x64>)
 8101358:	681a      	ldr	r2, [r3, #0]
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	4413      	add	r3, r2
 810135e:	693a      	ldr	r2, [r7, #16]
 8101360:	429a      	cmp	r2, r3
 8101362:	d207      	bcs.n	8101374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101364:	f002 fbf0 	bl	8103b48 <__errno>
 8101368:	4603      	mov	r3, r0
 810136a:	220c      	movs	r2, #12
 810136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810136e:	f04f 33ff 	mov.w	r3, #4294967295
 8101372:	e009      	b.n	8101388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101374:	4b08      	ldr	r3, [pc, #32]	; (8101398 <_sbrk+0x64>)
 8101376:	681b      	ldr	r3, [r3, #0]
 8101378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810137a:	4b07      	ldr	r3, [pc, #28]	; (8101398 <_sbrk+0x64>)
 810137c:	681a      	ldr	r2, [r3, #0]
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	4413      	add	r3, r2
 8101382:	4a05      	ldr	r2, [pc, #20]	; (8101398 <_sbrk+0x64>)
 8101384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101386:	68fb      	ldr	r3, [r7, #12]
}
 8101388:	4618      	mov	r0, r3
 810138a:	3718      	adds	r7, #24
 810138c:	46bd      	mov	sp, r7
 810138e:	bd80      	pop	{r7, pc}
 8101390:	10048000 	.word	0x10048000
 8101394:	00000400 	.word	0x00000400
 8101398:	1000031c 	.word	0x1000031c
 810139c:	10000338 	.word	0x10000338

081013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81013d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81013a4:	f7ff fd2e 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81013a8:	480c      	ldr	r0, [pc, #48]	; (81013dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81013aa:	490d      	ldr	r1, [pc, #52]	; (81013e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81013ac:	4a0d      	ldr	r2, [pc, #52]	; (81013e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81013b0:	e002      	b.n	81013b8 <LoopCopyDataInit>

081013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81013b6:	3304      	adds	r3, #4

081013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81013bc:	d3f9      	bcc.n	81013b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81013be:	4a0a      	ldr	r2, [pc, #40]	; (81013e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81013c0:	4c0a      	ldr	r4, [pc, #40]	; (81013ec <LoopFillZerobss+0x22>)
  movs r3, #0
 81013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81013c4:	e001      	b.n	81013ca <LoopFillZerobss>

081013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81013c8:	3204      	adds	r2, #4

081013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81013cc:	d3fb      	bcc.n	81013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81013ce:	f002 fbc1 	bl	8103b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81013d2:	f7ff fd2f 	bl	8100e34 <main>
  bx  lr
 81013d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81013d8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81013dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81013e0:	100001ec 	.word	0x100001ec
  ldr r2, =_sidata
 81013e4:	08108a1c 	.word	0x08108a1c
  ldr r2, =_sbss
 81013e8:	100001ec 	.word	0x100001ec
  ldr r4, =_ebss
 81013ec:	10000334 	.word	0x10000334

081013f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81013f0:	e7fe      	b.n	81013f0 <ADC3_IRQHandler>
	...

081013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81013f4:	b580      	push	{r7, lr}
 81013f6:	b082      	sub	sp, #8
 81013f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81013fa:	4b28      	ldr	r3, [pc, #160]	; (810149c <HAL_Init+0xa8>)
 81013fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101400:	4a26      	ldr	r2, [pc, #152]	; (810149c <HAL_Init+0xa8>)
 8101402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810140a:	4b24      	ldr	r3, [pc, #144]	; (810149c <HAL_Init+0xa8>)
 810140c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101414:	603b      	str	r3, [r7, #0]
 8101416:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101418:	4b21      	ldr	r3, [pc, #132]	; (81014a0 <HAL_Init+0xac>)
 810141a:	681b      	ldr	r3, [r3, #0]
 810141c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101424:	4a1e      	ldr	r2, [pc, #120]	; (81014a0 <HAL_Init+0xac>)
 8101426:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810142a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810142c:	4b1c      	ldr	r3, [pc, #112]	; (81014a0 <HAL_Init+0xac>)
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	4a1b      	ldr	r2, [pc, #108]	; (81014a0 <HAL_Init+0xac>)
 8101432:	f043 0301 	orr.w	r3, r3, #1
 8101436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101438:	2003      	movs	r0, #3
 810143a:	f000 f941 	bl	81016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810143e:	f001 f95f 	bl	8102700 <HAL_RCC_GetSysClockFreq>
 8101442:	4602      	mov	r2, r0
 8101444:	4b15      	ldr	r3, [pc, #84]	; (810149c <HAL_Init+0xa8>)
 8101446:	699b      	ldr	r3, [r3, #24]
 8101448:	0a1b      	lsrs	r3, r3, #8
 810144a:	f003 030f 	and.w	r3, r3, #15
 810144e:	4915      	ldr	r1, [pc, #84]	; (81014a4 <HAL_Init+0xb0>)
 8101450:	5ccb      	ldrb	r3, [r1, r3]
 8101452:	f003 031f 	and.w	r3, r3, #31
 8101456:	fa22 f303 	lsr.w	r3, r2, r3
 810145a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810145c:	4b0f      	ldr	r3, [pc, #60]	; (810149c <HAL_Init+0xa8>)
 810145e:	699b      	ldr	r3, [r3, #24]
 8101460:	f003 030f 	and.w	r3, r3, #15
 8101464:	4a0f      	ldr	r2, [pc, #60]	; (81014a4 <HAL_Init+0xb0>)
 8101466:	5cd3      	ldrb	r3, [r2, r3]
 8101468:	f003 031f 	and.w	r3, r3, #31
 810146c:	687a      	ldr	r2, [r7, #4]
 810146e:	fa22 f303 	lsr.w	r3, r2, r3
 8101472:	4a0d      	ldr	r2, [pc, #52]	; (81014a8 <HAL_Init+0xb4>)
 8101474:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101476:	4b0c      	ldr	r3, [pc, #48]	; (81014a8 <HAL_Init+0xb4>)
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	4a0c      	ldr	r2, [pc, #48]	; (81014ac <HAL_Init+0xb8>)
 810147c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810147e:	200f      	movs	r0, #15
 8101480:	f000 f816 	bl	81014b0 <HAL_InitTick>
 8101484:	4603      	mov	r3, r0
 8101486:	2b00      	cmp	r3, #0
 8101488:	d001      	beq.n	810148e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810148a:	2301      	movs	r3, #1
 810148c:	e002      	b.n	8101494 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810148e:	f7ff fe17 	bl	81010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101492:	2300      	movs	r3, #0
}
 8101494:	4618      	mov	r0, r3
 8101496:	3708      	adds	r7, #8
 8101498:	46bd      	mov	sp, r7
 810149a:	bd80      	pop	{r7, pc}
 810149c:	58024400 	.word	0x58024400
 81014a0:	40024400 	.word	0x40024400
 81014a4:	08108548 	.word	0x08108548
 81014a8:	10000004 	.word	0x10000004
 81014ac:	10000000 	.word	0x10000000

081014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b082      	sub	sp, #8
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81014b8:	4b15      	ldr	r3, [pc, #84]	; (8101510 <HAL_InitTick+0x60>)
 81014ba:	781b      	ldrb	r3, [r3, #0]
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d101      	bne.n	81014c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81014c0:	2301      	movs	r3, #1
 81014c2:	e021      	b.n	8101508 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81014c4:	4b13      	ldr	r3, [pc, #76]	; (8101514 <HAL_InitTick+0x64>)
 81014c6:	681a      	ldr	r2, [r3, #0]
 81014c8:	4b11      	ldr	r3, [pc, #68]	; (8101510 <HAL_InitTick+0x60>)
 81014ca:	781b      	ldrb	r3, [r3, #0]
 81014cc:	4619      	mov	r1, r3
 81014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 81014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81014da:	4618      	mov	r0, r3
 81014dc:	f000 f915 	bl	810170a <HAL_SYSTICK_Config>
 81014e0:	4603      	mov	r3, r0
 81014e2:	2b00      	cmp	r3, #0
 81014e4:	d001      	beq.n	81014ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81014e6:	2301      	movs	r3, #1
 81014e8:	e00e      	b.n	8101508 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	2b0f      	cmp	r3, #15
 81014ee:	d80a      	bhi.n	8101506 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81014f0:	2200      	movs	r2, #0
 81014f2:	6879      	ldr	r1, [r7, #4]
 81014f4:	f04f 30ff 	mov.w	r0, #4294967295
 81014f8:	f000 f8ed 	bl	81016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81014fc:	4a06      	ldr	r2, [pc, #24]	; (8101518 <HAL_InitTick+0x68>)
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101502:	2300      	movs	r3, #0
 8101504:	e000      	b.n	8101508 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101506:	2301      	movs	r3, #1
}
 8101508:	4618      	mov	r0, r3
 810150a:	3708      	adds	r7, #8
 810150c:	46bd      	mov	sp, r7
 810150e:	bd80      	pop	{r7, pc}
 8101510:	10000014 	.word	0x10000014
 8101514:	10000000 	.word	0x10000000
 8101518:	10000010 	.word	0x10000010

0810151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810151c:	b480      	push	{r7}
 810151e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101520:	4b06      	ldr	r3, [pc, #24]	; (810153c <HAL_IncTick+0x20>)
 8101522:	781b      	ldrb	r3, [r3, #0]
 8101524:	461a      	mov	r2, r3
 8101526:	4b06      	ldr	r3, [pc, #24]	; (8101540 <HAL_IncTick+0x24>)
 8101528:	681b      	ldr	r3, [r3, #0]
 810152a:	4413      	add	r3, r2
 810152c:	4a04      	ldr	r2, [pc, #16]	; (8101540 <HAL_IncTick+0x24>)
 810152e:	6013      	str	r3, [r2, #0]
}
 8101530:	bf00      	nop
 8101532:	46bd      	mov	sp, r7
 8101534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101538:	4770      	bx	lr
 810153a:	bf00      	nop
 810153c:	10000014 	.word	0x10000014
 8101540:	10000320 	.word	0x10000320

08101544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101544:	b480      	push	{r7}
 8101546:	af00      	add	r7, sp, #0
  return uwTick;
 8101548:	4b03      	ldr	r3, [pc, #12]	; (8101558 <HAL_GetTick+0x14>)
 810154a:	681b      	ldr	r3, [r3, #0]
}
 810154c:	4618      	mov	r0, r3
 810154e:	46bd      	mov	sp, r7
 8101550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101554:	4770      	bx	lr
 8101556:	bf00      	nop
 8101558:	10000320 	.word	0x10000320

0810155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810155c:	b480      	push	{r7}
 810155e:	b085      	sub	sp, #20
 8101560:	af00      	add	r7, sp, #0
 8101562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	f003 0307 	and.w	r3, r3, #7
 810156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810156c:	4b0c      	ldr	r3, [pc, #48]	; (81015a0 <__NVIC_SetPriorityGrouping+0x44>)
 810156e:	68db      	ldr	r3, [r3, #12]
 8101570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101572:	68ba      	ldr	r2, [r7, #8]
 8101574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101578:	4013      	ands	r3, r2
 810157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810157c:	68fb      	ldr	r3, [r7, #12]
 810157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101580:	68bb      	ldr	r3, [r7, #8]
 8101582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810158e:	4a04      	ldr	r2, [pc, #16]	; (81015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8101590:	68bb      	ldr	r3, [r7, #8]
 8101592:	60d3      	str	r3, [r2, #12]
}
 8101594:	bf00      	nop
 8101596:	3714      	adds	r7, #20
 8101598:	46bd      	mov	sp, r7
 810159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159e:	4770      	bx	lr
 81015a0:	e000ed00 	.word	0xe000ed00

081015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81015a4:	b480      	push	{r7}
 81015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81015a8:	4b04      	ldr	r3, [pc, #16]	; (81015bc <__NVIC_GetPriorityGrouping+0x18>)
 81015aa:	68db      	ldr	r3, [r3, #12]
 81015ac:	0a1b      	lsrs	r3, r3, #8
 81015ae:	f003 0307 	and.w	r3, r3, #7
}
 81015b2:	4618      	mov	r0, r3
 81015b4:	46bd      	mov	sp, r7
 81015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ba:	4770      	bx	lr
 81015bc:	e000ed00 	.word	0xe000ed00

081015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81015c0:	b480      	push	{r7}
 81015c2:	b083      	sub	sp, #12
 81015c4:	af00      	add	r7, sp, #0
 81015c6:	4603      	mov	r3, r0
 81015c8:	6039      	str	r1, [r7, #0]
 81015ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015d0:	2b00      	cmp	r3, #0
 81015d2:	db0a      	blt.n	81015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015d4:	683b      	ldr	r3, [r7, #0]
 81015d6:	b2da      	uxtb	r2, r3
 81015d8:	490c      	ldr	r1, [pc, #48]	; (810160c <__NVIC_SetPriority+0x4c>)
 81015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015de:	0112      	lsls	r2, r2, #4
 81015e0:	b2d2      	uxtb	r2, r2
 81015e2:	440b      	add	r3, r1
 81015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81015e8:	e00a      	b.n	8101600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015ea:	683b      	ldr	r3, [r7, #0]
 81015ec:	b2da      	uxtb	r2, r3
 81015ee:	4908      	ldr	r1, [pc, #32]	; (8101610 <__NVIC_SetPriority+0x50>)
 81015f0:	88fb      	ldrh	r3, [r7, #6]
 81015f2:	f003 030f 	and.w	r3, r3, #15
 81015f6:	3b04      	subs	r3, #4
 81015f8:	0112      	lsls	r2, r2, #4
 81015fa:	b2d2      	uxtb	r2, r2
 81015fc:	440b      	add	r3, r1
 81015fe:	761a      	strb	r2, [r3, #24]
}
 8101600:	bf00      	nop
 8101602:	370c      	adds	r7, #12
 8101604:	46bd      	mov	sp, r7
 8101606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810160a:	4770      	bx	lr
 810160c:	e000e100 	.word	0xe000e100
 8101610:	e000ed00 	.word	0xe000ed00

08101614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101614:	b480      	push	{r7}
 8101616:	b089      	sub	sp, #36	; 0x24
 8101618:	af00      	add	r7, sp, #0
 810161a:	60f8      	str	r0, [r7, #12]
 810161c:	60b9      	str	r1, [r7, #8]
 810161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101620:	68fb      	ldr	r3, [r7, #12]
 8101622:	f003 0307 	and.w	r3, r3, #7
 8101626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101628:	69fb      	ldr	r3, [r7, #28]
 810162a:	f1c3 0307 	rsb	r3, r3, #7
 810162e:	2b04      	cmp	r3, #4
 8101630:	bf28      	it	cs
 8101632:	2304      	movcs	r3, #4
 8101634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101636:	69fb      	ldr	r3, [r7, #28]
 8101638:	3304      	adds	r3, #4
 810163a:	2b06      	cmp	r3, #6
 810163c:	d902      	bls.n	8101644 <NVIC_EncodePriority+0x30>
 810163e:	69fb      	ldr	r3, [r7, #28]
 8101640:	3b03      	subs	r3, #3
 8101642:	e000      	b.n	8101646 <NVIC_EncodePriority+0x32>
 8101644:	2300      	movs	r3, #0
 8101646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101648:	f04f 32ff 	mov.w	r2, #4294967295
 810164c:	69bb      	ldr	r3, [r7, #24]
 810164e:	fa02 f303 	lsl.w	r3, r2, r3
 8101652:	43da      	mvns	r2, r3
 8101654:	68bb      	ldr	r3, [r7, #8]
 8101656:	401a      	ands	r2, r3
 8101658:	697b      	ldr	r3, [r7, #20]
 810165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810165c:	f04f 31ff 	mov.w	r1, #4294967295
 8101660:	697b      	ldr	r3, [r7, #20]
 8101662:	fa01 f303 	lsl.w	r3, r1, r3
 8101666:	43d9      	mvns	r1, r3
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810166c:	4313      	orrs	r3, r2
         );
}
 810166e:	4618      	mov	r0, r3
 8101670:	3724      	adds	r7, #36	; 0x24
 8101672:	46bd      	mov	sp, r7
 8101674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101678:	4770      	bx	lr
	...

0810167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810167c:	b580      	push	{r7, lr}
 810167e:	b082      	sub	sp, #8
 8101680:	af00      	add	r7, sp, #0
 8101682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101684:	687b      	ldr	r3, [r7, #4]
 8101686:	3b01      	subs	r3, #1
 8101688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810168c:	d301      	bcc.n	8101692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810168e:	2301      	movs	r3, #1
 8101690:	e00f      	b.n	81016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101692:	4a0a      	ldr	r2, [pc, #40]	; (81016bc <SysTick_Config+0x40>)
 8101694:	687b      	ldr	r3, [r7, #4]
 8101696:	3b01      	subs	r3, #1
 8101698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810169a:	210f      	movs	r1, #15
 810169c:	f04f 30ff 	mov.w	r0, #4294967295
 81016a0:	f7ff ff8e 	bl	81015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81016a4:	4b05      	ldr	r3, [pc, #20]	; (81016bc <SysTick_Config+0x40>)
 81016a6:	2200      	movs	r2, #0
 81016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81016aa:	4b04      	ldr	r3, [pc, #16]	; (81016bc <SysTick_Config+0x40>)
 81016ac:	2207      	movs	r2, #7
 81016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81016b0:	2300      	movs	r3, #0
}
 81016b2:	4618      	mov	r0, r3
 81016b4:	3708      	adds	r7, #8
 81016b6:	46bd      	mov	sp, r7
 81016b8:	bd80      	pop	{r7, pc}
 81016ba:	bf00      	nop
 81016bc:	e000e010 	.word	0xe000e010

081016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81016c0:	b580      	push	{r7, lr}
 81016c2:	b082      	sub	sp, #8
 81016c4:	af00      	add	r7, sp, #0
 81016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81016c8:	6878      	ldr	r0, [r7, #4]
 81016ca:	f7ff ff47 	bl	810155c <__NVIC_SetPriorityGrouping>
}
 81016ce:	bf00      	nop
 81016d0:	3708      	adds	r7, #8
 81016d2:	46bd      	mov	sp, r7
 81016d4:	bd80      	pop	{r7, pc}

081016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81016d6:	b580      	push	{r7, lr}
 81016d8:	b086      	sub	sp, #24
 81016da:	af00      	add	r7, sp, #0
 81016dc:	4603      	mov	r3, r0
 81016de:	60b9      	str	r1, [r7, #8]
 81016e0:	607a      	str	r2, [r7, #4]
 81016e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81016e4:	f7ff ff5e 	bl	81015a4 <__NVIC_GetPriorityGrouping>
 81016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81016ea:	687a      	ldr	r2, [r7, #4]
 81016ec:	68b9      	ldr	r1, [r7, #8]
 81016ee:	6978      	ldr	r0, [r7, #20]
 81016f0:	f7ff ff90 	bl	8101614 <NVIC_EncodePriority>
 81016f4:	4602      	mov	r2, r0
 81016f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81016fa:	4611      	mov	r1, r2
 81016fc:	4618      	mov	r0, r3
 81016fe:	f7ff ff5f 	bl	81015c0 <__NVIC_SetPriority>
}
 8101702:	bf00      	nop
 8101704:	3718      	adds	r7, #24
 8101706:	46bd      	mov	sp, r7
 8101708:	bd80      	pop	{r7, pc}

0810170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810170a:	b580      	push	{r7, lr}
 810170c:	b082      	sub	sp, #8
 810170e:	af00      	add	r7, sp, #0
 8101710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101712:	6878      	ldr	r0, [r7, #4]
 8101714:	f7ff ffb2 	bl	810167c <SysTick_Config>
 8101718:	4603      	mov	r3, r0
}
 810171a:	4618      	mov	r0, r3
 810171c:	3708      	adds	r7, #8
 810171e:	46bd      	mov	sp, r7
 8101720:	bd80      	pop	{r7, pc}
	...

08101724 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8101724:	b580      	push	{r7, lr}
 8101726:	b098      	sub	sp, #96	; 0x60
 8101728:	af00      	add	r7, sp, #0
 810172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 810172c:	4a84      	ldr	r2, [pc, #528]	; (8101940 <HAL_FDCAN_Init+0x21c>)
 810172e:	f107 030c 	add.w	r3, r7, #12
 8101732:	4611      	mov	r1, r2
 8101734:	224c      	movs	r2, #76	; 0x4c
 8101736:	4618      	mov	r0, r3
 8101738:	f002 fa30 	bl	8103b9c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	2b00      	cmp	r3, #0
 8101740:	d101      	bne.n	8101746 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8101742:	2301      	movs	r3, #1
 8101744:	e1c6      	b.n	8101ad4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8101746:	687b      	ldr	r3, [r7, #4]
 8101748:	681b      	ldr	r3, [r3, #0]
 810174a:	4a7e      	ldr	r2, [pc, #504]	; (8101944 <HAL_FDCAN_Init+0x220>)
 810174c:	4293      	cmp	r3, r2
 810174e:	d106      	bne.n	810175e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8101758:	461a      	mov	r2, r3
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 810175e:	687b      	ldr	r3, [r7, #4]
 8101760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101764:	b2db      	uxtb	r3, r3
 8101766:	2b00      	cmp	r3, #0
 8101768:	d106      	bne.n	8101778 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	2200      	movs	r2, #0
 810176e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8101772:	6878      	ldr	r0, [r7, #4]
 8101774:	f7ff fcbe 	bl	81010f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8101778:	687b      	ldr	r3, [r7, #4]
 810177a:	681b      	ldr	r3, [r3, #0]
 810177c:	699a      	ldr	r2, [r3, #24]
 810177e:	687b      	ldr	r3, [r7, #4]
 8101780:	681b      	ldr	r3, [r3, #0]
 8101782:	f022 0210 	bic.w	r2, r2, #16
 8101786:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101788:	f7ff fedc 	bl	8101544 <HAL_GetTick>
 810178c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 810178e:	e014      	b.n	81017ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101790:	f7ff fed8 	bl	8101544 <HAL_GetTick>
 8101794:	4602      	mov	r2, r0
 8101796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101798:	1ad3      	subs	r3, r2, r3
 810179a:	2b0a      	cmp	r3, #10
 810179c:	d90d      	bls.n	81017ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810179e:	687b      	ldr	r3, [r7, #4]
 81017a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81017a4:	f043 0201 	orr.w	r2, r3, #1
 81017a8:	687b      	ldr	r3, [r7, #4]
 81017aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	2203      	movs	r2, #3
 81017b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81017b6:	2301      	movs	r3, #1
 81017b8:	e18c      	b.n	8101ad4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	681b      	ldr	r3, [r3, #0]
 81017be:	699b      	ldr	r3, [r3, #24]
 81017c0:	f003 0308 	and.w	r3, r3, #8
 81017c4:	2b08      	cmp	r3, #8
 81017c6:	d0e3      	beq.n	8101790 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 81017c8:	687b      	ldr	r3, [r7, #4]
 81017ca:	681b      	ldr	r3, [r3, #0]
 81017cc:	699a      	ldr	r2, [r3, #24]
 81017ce:	687b      	ldr	r3, [r7, #4]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	f042 0201 	orr.w	r2, r2, #1
 81017d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81017d8:	f7ff feb4 	bl	8101544 <HAL_GetTick>
 81017dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81017de:	e014      	b.n	810180a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81017e0:	f7ff feb0 	bl	8101544 <HAL_GetTick>
 81017e4:	4602      	mov	r2, r0
 81017e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81017e8:	1ad3      	subs	r3, r2, r3
 81017ea:	2b0a      	cmp	r3, #10
 81017ec:	d90d      	bls.n	810180a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81017f4:	f043 0201 	orr.w	r2, r3, #1
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	2203      	movs	r2, #3
 8101802:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8101806:	2301      	movs	r3, #1
 8101808:	e164      	b.n	8101ad4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	699b      	ldr	r3, [r3, #24]
 8101810:	f003 0301 	and.w	r3, r3, #1
 8101814:	2b00      	cmp	r3, #0
 8101816:	d0e3      	beq.n	81017e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	699a      	ldr	r2, [r3, #24]
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	681b      	ldr	r3, [r3, #0]
 8101822:	f042 0202 	orr.w	r2, r2, #2
 8101826:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8101828:	687b      	ldr	r3, [r7, #4]
 810182a:	7c1b      	ldrb	r3, [r3, #16]
 810182c:	2b01      	cmp	r3, #1
 810182e:	d108      	bne.n	8101842 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	699a      	ldr	r2, [r3, #24]
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	681b      	ldr	r3, [r3, #0]
 810183a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810183e:	619a      	str	r2, [r3, #24]
 8101840:	e007      	b.n	8101852 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	681b      	ldr	r3, [r3, #0]
 8101846:	699a      	ldr	r2, [r3, #24]
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8101850:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	7c5b      	ldrb	r3, [r3, #17]
 8101856:	2b01      	cmp	r3, #1
 8101858:	d108      	bne.n	810186c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	681b      	ldr	r3, [r3, #0]
 810185e:	699a      	ldr	r2, [r3, #24]
 8101860:	687b      	ldr	r3, [r7, #4]
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101868:	619a      	str	r2, [r3, #24]
 810186a:	e007      	b.n	810187c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	681b      	ldr	r3, [r3, #0]
 8101870:	699a      	ldr	r2, [r3, #24]
 8101872:	687b      	ldr	r3, [r7, #4]
 8101874:	681b      	ldr	r3, [r3, #0]
 8101876:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810187a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	7c9b      	ldrb	r3, [r3, #18]
 8101880:	2b01      	cmp	r3, #1
 8101882:	d108      	bne.n	8101896 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	681b      	ldr	r3, [r3, #0]
 8101888:	699a      	ldr	r2, [r3, #24]
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	681b      	ldr	r3, [r3, #0]
 810188e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101892:	619a      	str	r2, [r3, #24]
 8101894:	e007      	b.n	81018a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	681b      	ldr	r3, [r3, #0]
 810189a:	699a      	ldr	r2, [r3, #24]
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	681b      	ldr	r3, [r3, #0]
 81018a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81018a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	699b      	ldr	r3, [r3, #24]
 81018ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	689a      	ldr	r2, [r3, #8]
 81018b4:	687b      	ldr	r3, [r7, #4]
 81018b6:	681b      	ldr	r3, [r3, #0]
 81018b8:	430a      	orrs	r2, r1
 81018ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	699a      	ldr	r2, [r3, #24]
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 81018ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81018cc:	687b      	ldr	r3, [r7, #4]
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	691a      	ldr	r2, [r3, #16]
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	f022 0210 	bic.w	r2, r2, #16
 81018da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	68db      	ldr	r3, [r3, #12]
 81018e0:	2b01      	cmp	r3, #1
 81018e2:	d108      	bne.n	81018f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	681b      	ldr	r3, [r3, #0]
 81018e8:	699a      	ldr	r2, [r3, #24]
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	f042 0204 	orr.w	r2, r2, #4
 81018f2:	619a      	str	r2, [r3, #24]
 81018f4:	e030      	b.n	8101958 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 81018f6:	687b      	ldr	r3, [r7, #4]
 81018f8:	68db      	ldr	r3, [r3, #12]
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	d02c      	beq.n	8101958 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	68db      	ldr	r3, [r3, #12]
 8101902:	2b02      	cmp	r3, #2
 8101904:	d020      	beq.n	8101948 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	699a      	ldr	r2, [r3, #24]
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	681b      	ldr	r3, [r3, #0]
 8101910:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8101914:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	681b      	ldr	r3, [r3, #0]
 810191a:	691a      	ldr	r2, [r3, #16]
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	f042 0210 	orr.w	r2, r2, #16
 8101924:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	68db      	ldr	r3, [r3, #12]
 810192a:	2b03      	cmp	r3, #3
 810192c:	d114      	bne.n	8101958 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	699a      	ldr	r2, [r3, #24]
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	681b      	ldr	r3, [r3, #0]
 8101938:	f042 0220 	orr.w	r2, r2, #32
 810193c:	619a      	str	r2, [r3, #24]
 810193e:	e00b      	b.n	8101958 <HAL_FDCAN_Init+0x234>
 8101940:	081084fc 	.word	0x081084fc
 8101944:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	699a      	ldr	r2, [r3, #24]
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	f042 0220 	orr.w	r2, r2, #32
 8101956:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	699b      	ldr	r3, [r3, #24]
 810195c:	3b01      	subs	r3, #1
 810195e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	69db      	ldr	r3, [r3, #28]
 8101964:	3b01      	subs	r3, #1
 8101966:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101968:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	6a1b      	ldr	r3, [r3, #32]
 810196e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101970:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	695b      	ldr	r3, [r3, #20]
 8101978:	3b01      	subs	r3, #1
 810197a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101980:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101982:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	689b      	ldr	r3, [r3, #8]
 8101988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810198c:	d115      	bne.n	81019ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101992:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101998:	3b01      	subs	r3, #1
 810199a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 810199c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019a2:	3b01      	subs	r3, #1
 81019a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 81019a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81019ae:	3b01      	subs	r3, #1
 81019b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81019b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81019b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d00a      	beq.n	81019d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	681b      	ldr	r3, [r3, #0]
 81019c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	681b      	ldr	r3, [r3, #0]
 81019d2:	430a      	orrs	r2, r1
 81019d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81019e0:	4413      	add	r3, r2
 81019e2:	2b00      	cmp	r3, #0
 81019e4:	d011      	beq.n	8101a0a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 81019ee:	f023 0107 	bic.w	r1, r3, #7
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81019f6:	009b      	lsls	r3, r3, #2
 81019f8:	3360      	adds	r3, #96	; 0x60
 81019fa:	443b      	add	r3, r7
 81019fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	430a      	orrs	r2, r1
 8101a06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d011      	beq.n	8101a36 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101a1a:	f023 0107 	bic.w	r1, r3, #7
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101a22:	009b      	lsls	r3, r3, #2
 8101a24:	3360      	adds	r3, #96	; 0x60
 8101a26:	443b      	add	r3, r7
 8101a28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	430a      	orrs	r2, r1
 8101a32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101a3a:	2b00      	cmp	r3, #0
 8101a3c:	d012      	beq.n	8101a64 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101a46:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a4e:	009b      	lsls	r3, r3, #2
 8101a50:	3360      	adds	r3, #96	; 0x60
 8101a52:	443b      	add	r3, r7
 8101a54:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8101a58:	011a      	lsls	r2, r3, #4
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	430a      	orrs	r2, r1
 8101a60:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	d012      	beq.n	8101a92 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8101a6c:	687b      	ldr	r3, [r7, #4]
 8101a6e:	681b      	ldr	r3, [r3, #0]
 8101a70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101a74:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a7c:	009b      	lsls	r3, r3, #2
 8101a7e:	3360      	adds	r3, #96	; 0x60
 8101a80:	443b      	add	r3, r7
 8101a82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8101a86:	021a      	lsls	r2, r3, #8
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	430a      	orrs	r2, r1
 8101a8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	681b      	ldr	r3, [r3, #0]
 8101a96:	4a11      	ldr	r2, [pc, #68]	; (8101adc <HAL_FDCAN_Init+0x3b8>)
 8101a98:	4293      	cmp	r3, r2
 8101a9a:	d107      	bne.n	8101aac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	685b      	ldr	r3, [r3, #4]
 8101aa0:	689a      	ldr	r2, [r3, #8]
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	685b      	ldr	r3, [r3, #4]
 8101aa6:	f022 0203 	bic.w	r2, r2, #3
 8101aaa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	2200      	movs	r2, #0
 8101ab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	2200      	movs	r2, #0
 8101ab8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	2201      	movs	r2, #1
 8101ac0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8101ac4:	6878      	ldr	r0, [r7, #4]
 8101ac6:	f000 fac1 	bl	810204c <FDCAN_CalcultateRamBlockAddresses>
 8101aca:	4603      	mov	r3, r0
 8101acc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8101ad0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	3760      	adds	r7, #96	; 0x60
 8101ad8:	46bd      	mov	sp, r7
 8101ada:	bd80      	pop	{r7, pc}
 8101adc:	4000a000 	.word	0x4000a000

08101ae0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8101ae0:	b480      	push	{r7}
 8101ae2:	b087      	sub	sp, #28
 8101ae4:	af00      	add	r7, sp, #0
 8101ae6:	6078      	str	r0, [r7, #4]
 8101ae8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101af0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8101af2:	7bfb      	ldrb	r3, [r7, #15]
 8101af4:	2b01      	cmp	r3, #1
 8101af6:	d002      	beq.n	8101afe <HAL_FDCAN_ConfigFilter+0x1e>
 8101af8:	7bfb      	ldrb	r3, [r7, #15]
 8101afa:	2b02      	cmp	r3, #2
 8101afc:	d157      	bne.n	8101bae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8101afe:	683b      	ldr	r3, [r7, #0]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	2b00      	cmp	r3, #0
 8101b04:	d12b      	bne.n	8101b5e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8101b06:	683b      	ldr	r3, [r7, #0]
 8101b08:	68db      	ldr	r3, [r3, #12]
 8101b0a:	2b07      	cmp	r3, #7
 8101b0c:	d10d      	bne.n	8101b2a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8101b0e:	683b      	ldr	r3, [r7, #0]
 8101b10:	691b      	ldr	r3, [r3, #16]
 8101b12:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8101b14:	683b      	ldr	r3, [r7, #0]
 8101b16:	69db      	ldr	r3, [r3, #28]
 8101b18:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8101b1a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8101b1c:	683b      	ldr	r3, [r7, #0]
 8101b1e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8101b20:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8101b22:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8101b26:	617b      	str	r3, [r7, #20]
 8101b28:	e00e      	b.n	8101b48 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101b2a:	683b      	ldr	r3, [r7, #0]
 8101b2c:	689b      	ldr	r3, [r3, #8]
 8101b2e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8101b30:	683b      	ldr	r3, [r7, #0]
 8101b32:	68db      	ldr	r3, [r3, #12]
 8101b34:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101b36:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8101b38:	683b      	ldr	r3, [r7, #0]
 8101b3a:	691b      	ldr	r3, [r3, #16]
 8101b3c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8101b3e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8101b40:	683b      	ldr	r3, [r7, #0]
 8101b42:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101b44:	4313      	orrs	r3, r2
 8101b46:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8101b48:	687b      	ldr	r3, [r7, #4]
 8101b4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101b4c:	683b      	ldr	r3, [r7, #0]
 8101b4e:	685b      	ldr	r3, [r3, #4]
 8101b50:	009b      	lsls	r3, r3, #2
 8101b52:	4413      	add	r3, r2
 8101b54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101b56:	68bb      	ldr	r3, [r7, #8]
 8101b58:	697a      	ldr	r2, [r7, #20]
 8101b5a:	601a      	str	r2, [r3, #0]
 8101b5c:	e025      	b.n	8101baa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8101b5e:	683b      	ldr	r3, [r7, #0]
 8101b60:	68db      	ldr	r3, [r3, #12]
 8101b62:	075a      	lsls	r2, r3, #29
 8101b64:	683b      	ldr	r3, [r7, #0]
 8101b66:	691b      	ldr	r3, [r3, #16]
 8101b68:	4313      	orrs	r3, r2
 8101b6a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8101b6c:	683b      	ldr	r3, [r7, #0]
 8101b6e:	68db      	ldr	r3, [r3, #12]
 8101b70:	2b07      	cmp	r3, #7
 8101b72:	d103      	bne.n	8101b7c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8101b74:	683b      	ldr	r3, [r7, #0]
 8101b76:	699b      	ldr	r3, [r3, #24]
 8101b78:	613b      	str	r3, [r7, #16]
 8101b7a:	e006      	b.n	8101b8a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8101b7c:	683b      	ldr	r3, [r7, #0]
 8101b7e:	689b      	ldr	r3, [r3, #8]
 8101b80:	079a      	lsls	r2, r3, #30
 8101b82:	683b      	ldr	r3, [r7, #0]
 8101b84:	695b      	ldr	r3, [r3, #20]
 8101b86:	4313      	orrs	r3, r2
 8101b88:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101b8e:	683b      	ldr	r3, [r7, #0]
 8101b90:	685b      	ldr	r3, [r3, #4]
 8101b92:	00db      	lsls	r3, r3, #3
 8101b94:	4413      	add	r3, r2
 8101b96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101b98:	68bb      	ldr	r3, [r7, #8]
 8101b9a:	697a      	ldr	r2, [r7, #20]
 8101b9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8101b9e:	68bb      	ldr	r3, [r7, #8]
 8101ba0:	3304      	adds	r3, #4
 8101ba2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8101ba4:	68bb      	ldr	r3, [r7, #8]
 8101ba6:	693a      	ldr	r2, [r7, #16]
 8101ba8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8101baa:	2300      	movs	r3, #0
 8101bac:	e008      	b.n	8101bc0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101bb4:	f043 0202 	orr.w	r2, r3, #2
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8101bbe:	2301      	movs	r3, #1
  }
}
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	371c      	adds	r7, #28
 8101bc4:	46bd      	mov	sp, r7
 8101bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bca:	4770      	bx	lr

08101bcc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8101bcc:	b480      	push	{r7}
 8101bce:	b085      	sub	sp, #20
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	60f8      	str	r0, [r7, #12]
 8101bd4:	60b9      	str	r1, [r7, #8]
 8101bd6:	607a      	str	r2, [r7, #4]
 8101bd8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8101bda:	68fb      	ldr	r3, [r7, #12]
 8101bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101be0:	b2db      	uxtb	r3, r3
 8101be2:	2b01      	cmp	r3, #1
 8101be4:	d110      	bne.n	8101c08 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8101be6:	68bb      	ldr	r3, [r7, #8]
 8101be8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8101bee:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8101bf0:	683b      	ldr	r3, [r7, #0]
 8101bf2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8101bf4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8101bf8:	68fb      	ldr	r3, [r7, #12]
 8101bfa:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8101bfc:	69ba      	ldr	r2, [r7, #24]
 8101bfe:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8101c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8101c04:	2300      	movs	r3, #0
 8101c06:	e008      	b.n	8101c1a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8101c08:	68fb      	ldr	r3, [r7, #12]
 8101c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101c0e:	f043 0204 	orr.w	r2, r3, #4
 8101c12:	68fb      	ldr	r3, [r7, #12]
 8101c14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8101c18:	2301      	movs	r3, #1
  }
}
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	3714      	adds	r7, #20
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c24:	4770      	bx	lr

08101c26 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8101c26:	b480      	push	{r7}
 8101c28:	b083      	sub	sp, #12
 8101c2a:	af00      	add	r7, sp, #0
 8101c2c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101c34:	b2db      	uxtb	r3, r3
 8101c36:	2b01      	cmp	r3, #1
 8101c38:	d111      	bne.n	8101c5e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	2202      	movs	r2, #2
 8101c3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	699a      	ldr	r2, [r3, #24]
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	f022 0201 	bic.w	r2, r2, #1
 8101c50:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	2200      	movs	r2, #0
 8101c56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8101c5a:	2300      	movs	r3, #0
 8101c5c:	e008      	b.n	8101c70 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101c64:	f043 0204 	orr.w	r2, r3, #4
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8101c6e:	2301      	movs	r3, #1
  }
}
 8101c70:	4618      	mov	r0, r3
 8101c72:	370c      	adds	r7, #12
 8101c74:	46bd      	mov	sp, r7
 8101c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c7a:	4770      	bx	lr

08101c7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8101c7c:	b480      	push	{r7}
 8101c7e:	b08b      	sub	sp, #44	; 0x2c
 8101c80:	af00      	add	r7, sp, #0
 8101c82:	60f8      	str	r0, [r7, #12]
 8101c84:	60b9      	str	r1, [r7, #8]
 8101c86:	607a      	str	r2, [r7, #4]
 8101c88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8101c8a:	2300      	movs	r3, #0
 8101c8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8101c8e:	68fb      	ldr	r3, [r7, #12]
 8101c90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101c94:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8101c96:	7efb      	ldrb	r3, [r7, #27]
 8101c98:	2b02      	cmp	r3, #2
 8101c9a:	f040 814b 	bne.w	8101f34 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8101c9e:	68bb      	ldr	r3, [r7, #8]
 8101ca0:	2b40      	cmp	r3, #64	; 0x40
 8101ca2:	d14d      	bne.n	8101d40 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8101ca4:	68fb      	ldr	r3, [r7, #12]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101cac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d109      	bne.n	8101cc8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101cb4:	68fb      	ldr	r3, [r7, #12]
 8101cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101cba:	f043 0220 	orr.w	r2, r3, #32
 8101cbe:	68fb      	ldr	r3, [r7, #12]
 8101cc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8101cc4:	2301      	movs	r3, #1
 8101cc6:	e13e      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101cd4:	2b00      	cmp	r3, #0
 8101cd6:	d109      	bne.n	8101cec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8101cd8:	68fb      	ldr	r3, [r7, #12]
 8101cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101cde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101ce2:	68fb      	ldr	r3, [r7, #12]
 8101ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8101ce8:	2301      	movs	r3, #1
 8101cea:	e12c      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8101cec:	68fb      	ldr	r3, [r7, #12]
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101cf4:	0e1b      	lsrs	r3, r3, #24
 8101cf6:	f003 0301 	and.w	r3, r3, #1
 8101cfa:	2b01      	cmp	r3, #1
 8101cfc:	d10b      	bne.n	8101d16 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8101cfe:	68fb      	ldr	r3, [r7, #12]
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101d06:	0fdb      	lsrs	r3, r3, #31
 8101d08:	f003 0301 	and.w	r3, r3, #1
 8101d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8101d10:	d101      	bne.n	8101d16 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8101d12:	2301      	movs	r3, #1
 8101d14:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8101d16:	68fb      	ldr	r3, [r7, #12]
 8101d18:	681b      	ldr	r3, [r3, #0]
 8101d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101d1e:	0a1b      	lsrs	r3, r3, #8
 8101d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101d24:	69fa      	ldr	r2, [r7, #28]
 8101d26:	4413      	add	r3, r2
 8101d28:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8101d2a:	68fb      	ldr	r3, [r7, #12]
 8101d2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8101d2e:	68fb      	ldr	r3, [r7, #12]
 8101d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101d32:	69f9      	ldr	r1, [r7, #28]
 8101d34:	fb01 f303 	mul.w	r3, r1, r3
 8101d38:	009b      	lsls	r3, r3, #2
 8101d3a:	4413      	add	r3, r2
 8101d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8101d3e:	e069      	b.n	8101e14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8101d40:	68bb      	ldr	r3, [r7, #8]
 8101d42:	2b41      	cmp	r3, #65	; 0x41
 8101d44:	d14d      	bne.n	8101de2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8101d46:	68fb      	ldr	r3, [r7, #12]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d109      	bne.n	8101d6a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101d56:	68fb      	ldr	r3, [r7, #12]
 8101d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101d5c:	f043 0220 	orr.w	r2, r3, #32
 8101d60:	68fb      	ldr	r3, [r7, #12]
 8101d62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8101d66:	2301      	movs	r3, #1
 8101d68:	e0ed      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8101d6a:	68fb      	ldr	r3, [r7, #12]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101d76:	2b00      	cmp	r3, #0
 8101d78:	d109      	bne.n	8101d8e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8101d7a:	68fb      	ldr	r3, [r7, #12]
 8101d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101d84:	68fb      	ldr	r3, [r7, #12]
 8101d86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8101d8a:	2301      	movs	r3, #1
 8101d8c:	e0db      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8101d8e:	68fb      	ldr	r3, [r7, #12]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101d96:	0e1b      	lsrs	r3, r3, #24
 8101d98:	f003 0301 	and.w	r3, r3, #1
 8101d9c:	2b01      	cmp	r3, #1
 8101d9e:	d10b      	bne.n	8101db8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8101da0:	68fb      	ldr	r3, [r7, #12]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101da8:	0fdb      	lsrs	r3, r3, #31
 8101daa:	f003 0301 	and.w	r3, r3, #1
 8101dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8101db2:	d101      	bne.n	8101db8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8101db4:	2301      	movs	r3, #1
 8101db6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8101db8:	68fb      	ldr	r3, [r7, #12]
 8101dba:	681b      	ldr	r3, [r3, #0]
 8101dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101dc0:	0a1b      	lsrs	r3, r3, #8
 8101dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101dc6:	69fa      	ldr	r2, [r7, #28]
 8101dc8:	4413      	add	r3, r2
 8101dca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8101dcc:	68fb      	ldr	r3, [r7, #12]
 8101dce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8101dd0:	68fb      	ldr	r3, [r7, #12]
 8101dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101dd4:	69f9      	ldr	r1, [r7, #28]
 8101dd6:	fb01 f303 	mul.w	r3, r1, r3
 8101dda:	009b      	lsls	r3, r3, #2
 8101ddc:	4413      	add	r3, r2
 8101dde:	627b      	str	r3, [r7, #36]	; 0x24
 8101de0:	e018      	b.n	8101e14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8101de2:	68fb      	ldr	r3, [r7, #12]
 8101de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101de6:	68ba      	ldr	r2, [r7, #8]
 8101de8:	429a      	cmp	r2, r3
 8101dea:	d309      	bcc.n	8101e00 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101dec:	68fb      	ldr	r3, [r7, #12]
 8101dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101df2:	f043 0220 	orr.w	r2, r3, #32
 8101df6:	68fb      	ldr	r3, [r7, #12]
 8101df8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8101dfc:	2301      	movs	r3, #1
 8101dfe:	e0a2      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8101e00:	68fb      	ldr	r3, [r7, #12]
 8101e02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8101e04:	68fb      	ldr	r3, [r7, #12]
 8101e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101e08:	68b9      	ldr	r1, [r7, #8]
 8101e0a:	fb01 f303 	mul.w	r3, r1, r3
 8101e0e:	009b      	lsls	r3, r3, #2
 8101e10:	4413      	add	r3, r2
 8101e12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8101e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e16:	681b      	ldr	r3, [r3, #0]
 8101e18:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	685b      	ldr	r3, [r3, #4]
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d107      	bne.n	8101e38 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8101e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e2a:	681b      	ldr	r3, [r3, #0]
 8101e2c:	0c9b      	lsrs	r3, r3, #18
 8101e2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	601a      	str	r2, [r3, #0]
 8101e36:	e005      	b.n	8101e44 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8101e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8101e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e46:	681b      	ldr	r3, [r3, #0]
 8101e48:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8101e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e52:	681b      	ldr	r3, [r3, #0]
 8101e54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8101e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e5e:	3304      	adds	r3, #4
 8101e60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8101e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	b29a      	uxth	r2, r3
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8101e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8101e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8101e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8101e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e92:	681b      	ldr	r3, [r3, #0]
 8101e94:	0e1b      	lsrs	r3, r3, #24
 8101e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8101e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	0fda      	lsrs	r2, r3, #31
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8101ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101eaa:	3304      	adds	r3, #4
 8101eac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8101eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101eb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8101eb2:	2300      	movs	r3, #0
 8101eb4:	623b      	str	r3, [r7, #32]
 8101eb6:	e00a      	b.n	8101ece <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8101eb8:	697a      	ldr	r2, [r7, #20]
 8101eba:	6a3b      	ldr	r3, [r7, #32]
 8101ebc:	441a      	add	r2, r3
 8101ebe:	6839      	ldr	r1, [r7, #0]
 8101ec0:	6a3b      	ldr	r3, [r7, #32]
 8101ec2:	440b      	add	r3, r1
 8101ec4:	7812      	ldrb	r2, [r2, #0]
 8101ec6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8101ec8:	6a3b      	ldr	r3, [r7, #32]
 8101eca:	3301      	adds	r3, #1
 8101ecc:	623b      	str	r3, [r7, #32]
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	68db      	ldr	r3, [r3, #12]
 8101ed2:	0c1b      	lsrs	r3, r3, #16
 8101ed4:	4a1f      	ldr	r2, [pc, #124]	; (8101f54 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8101ed6:	5cd3      	ldrb	r3, [r2, r3]
 8101ed8:	461a      	mov	r2, r3
 8101eda:	6a3b      	ldr	r3, [r7, #32]
 8101edc:	4293      	cmp	r3, r2
 8101ede:	d3eb      	bcc.n	8101eb8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8101ee0:	68bb      	ldr	r3, [r7, #8]
 8101ee2:	2b40      	cmp	r3, #64	; 0x40
 8101ee4:	d105      	bne.n	8101ef2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8101ee6:	68fb      	ldr	r3, [r7, #12]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	69fa      	ldr	r2, [r7, #28]
 8101eec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8101ef0:	e01e      	b.n	8101f30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8101ef2:	68bb      	ldr	r3, [r7, #8]
 8101ef4:	2b41      	cmp	r3, #65	; 0x41
 8101ef6:	d105      	bne.n	8101f04 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8101ef8:	68fb      	ldr	r3, [r7, #12]
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	69fa      	ldr	r2, [r7, #28]
 8101efe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8101f02:	e015      	b.n	8101f30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8101f04:	68bb      	ldr	r3, [r7, #8]
 8101f06:	2b1f      	cmp	r3, #31
 8101f08:	d808      	bhi.n	8101f1c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8101f0a:	68fb      	ldr	r3, [r7, #12]
 8101f0c:	681b      	ldr	r3, [r3, #0]
 8101f0e:	2101      	movs	r1, #1
 8101f10:	68ba      	ldr	r2, [r7, #8]
 8101f12:	fa01 f202 	lsl.w	r2, r1, r2
 8101f16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8101f1a:	e009      	b.n	8101f30 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8101f1c:	68bb      	ldr	r3, [r7, #8]
 8101f1e:	f003 021f 	and.w	r2, r3, #31
 8101f22:	68fb      	ldr	r3, [r7, #12]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	2101      	movs	r1, #1
 8101f28:	fa01 f202 	lsl.w	r2, r1, r2
 8101f2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8101f30:	2300      	movs	r3, #0
 8101f32:	e008      	b.n	8101f46 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8101f34:	68fb      	ldr	r3, [r7, #12]
 8101f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101f3a:	f043 0208 	orr.w	r2, r3, #8
 8101f3e:	68fb      	ldr	r3, [r7, #12]
 8101f40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8101f44:	2301      	movs	r3, #1
  }
}
 8101f46:	4618      	mov	r0, r3
 8101f48:	372c      	adds	r7, #44	; 0x2c
 8101f4a:	46bd      	mov	sp, r7
 8101f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f50:	4770      	bx	lr
 8101f52:	bf00      	nop
 8101f54:	08108558 	.word	0x08108558

08101f58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8101f58:	b480      	push	{r7}
 8101f5a:	b087      	sub	sp, #28
 8101f5c:	af00      	add	r7, sp, #0
 8101f5e:	60f8      	str	r0, [r7, #12]
 8101f60:	60b9      	str	r1, [r7, #8]
 8101f62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8101f64:	68fb      	ldr	r3, [r7, #12]
 8101f66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101f6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8101f6c:	7dfb      	ldrb	r3, [r7, #23]
 8101f6e:	2b01      	cmp	r3, #1
 8101f70:	d002      	beq.n	8101f78 <HAL_FDCAN_ActivateNotification+0x20>
 8101f72:	7dfb      	ldrb	r3, [r7, #23]
 8101f74:	2b02      	cmp	r3, #2
 8101f76:	d157      	bne.n	8102028 <HAL_FDCAN_ActivateNotification+0xd0>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8101f78:	68fb      	ldr	r3, [r7, #12]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101f7e:	68bb      	ldr	r3, [r7, #8]
 8101f80:	4013      	ands	r3, r2
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d108      	bne.n	8101f98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8101f86:	68fb      	ldr	r3, [r7, #12]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101f8c:	68fb      	ldr	r3, [r7, #12]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	f042 0201 	orr.w	r2, r2, #1
 8101f94:	65da      	str	r2, [r3, #92]	; 0x5c
 8101f96:	e014      	b.n	8101fc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101f9e:	68bb      	ldr	r3, [r7, #8]
 8101fa0:	4013      	ands	r3, r2
 8101fa2:	68ba      	ldr	r2, [r7, #8]
 8101fa4:	429a      	cmp	r2, r3
 8101fa6:	d108      	bne.n	8101fba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101fae:	68fb      	ldr	r3, [r7, #12]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	f042 0202 	orr.w	r2, r2, #2
 8101fb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8101fb8:	e003      	b.n	8101fc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8101fba:	68fb      	ldr	r3, [r7, #12]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	2203      	movs	r2, #3
 8101fc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8101fc2:	68bb      	ldr	r3, [r7, #8]
 8101fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101fc8:	2b00      	cmp	r3, #0
 8101fca:	d009      	beq.n	8101fe0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8101fcc:	68fb      	ldr	r3, [r7, #12]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101fd4:	68fb      	ldr	r3, [r7, #12]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	687a      	ldr	r2, [r7, #4]
 8101fda:	430a      	orrs	r2, r1
 8101fdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8101fe0:	68bb      	ldr	r3, [r7, #8]
 8101fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d009      	beq.n	8101ffe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8101fea:	68fb      	ldr	r3, [r7, #12]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8101ff2:	68fb      	ldr	r3, [r7, #12]
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	687a      	ldr	r2, [r7, #4]
 8101ff8:	430a      	orrs	r2, r1
 8101ffa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8101ffe:	68fb      	ldr	r3, [r7, #12]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8102004:	68bb      	ldr	r3, [r7, #8]
 8102006:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 810200a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810200e:	68fa      	ldr	r2, [r7, #12]
 8102010:	6812      	ldr	r2, [r2, #0]
 8102012:	430b      	orrs	r3, r1
 8102014:	6553      	str	r3, [r2, #84]	; 0x54
 8102016:	4b0c      	ldr	r3, [pc, #48]	; (8102048 <HAL_FDCAN_ActivateNotification+0xf0>)
 8102018:	695a      	ldr	r2, [r3, #20]
 810201a:	68bb      	ldr	r3, [r7, #8]
 810201c:	0f9b      	lsrs	r3, r3, #30
 810201e:	490a      	ldr	r1, [pc, #40]	; (8102048 <HAL_FDCAN_ActivateNotification+0xf0>)
 8102020:	4313      	orrs	r3, r2
 8102022:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8102024:	2300      	movs	r3, #0
 8102026:	e008      	b.n	810203a <HAL_FDCAN_ActivateNotification+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8102028:	68fb      	ldr	r3, [r7, #12]
 810202a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810202e:	f043 0202 	orr.w	r2, r3, #2
 8102032:	68fb      	ldr	r3, [r7, #12]
 8102034:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8102038:	2301      	movs	r3, #1
  }
}
 810203a:	4618      	mov	r0, r3
 810203c:	371c      	adds	r7, #28
 810203e:	46bd      	mov	sp, r7
 8102040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102044:	4770      	bx	lr
 8102046:	bf00      	nop
 8102048:	4000a800 	.word	0x4000a800

0810204c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 810204c:	b480      	push	{r7}
 810204e:	b085      	sub	sp, #20
 8102050:	af00      	add	r7, sp, #0
 8102052:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102058:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102066:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810206a:	68ba      	ldr	r2, [r7, #8]
 810206c:	0091      	lsls	r1, r2, #2
 810206e:	687a      	ldr	r2, [r7, #4]
 8102070:	6812      	ldr	r2, [r2, #0]
 8102072:	430b      	orrs	r3, r1
 8102074:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102080:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102088:	041a      	lsls	r2, r3, #16
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	430a      	orrs	r2, r1
 8102090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102098:	68ba      	ldr	r2, [r7, #8]
 810209a:	4413      	add	r3, r2
 810209c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81020a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81020aa:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81020ae:	68ba      	ldr	r2, [r7, #8]
 81020b0:	0091      	lsls	r1, r2, #2
 81020b2:	687a      	ldr	r2, [r7, #4]
 81020b4:	6812      	ldr	r2, [r2, #0]
 81020b6:	430b      	orrs	r3, r1
 81020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81020c4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81020cc:	041a      	lsls	r2, r3, #16
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	681b      	ldr	r3, [r3, #0]
 81020d2:	430a      	orrs	r2, r1
 81020d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81020dc:	005b      	lsls	r3, r3, #1
 81020de:	68ba      	ldr	r2, [r7, #8]
 81020e0:	4413      	add	r3, r2
 81020e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81020ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81020f0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81020f4:	68ba      	ldr	r2, [r7, #8]
 81020f6:	0091      	lsls	r1, r2, #2
 81020f8:	687a      	ldr	r2, [r7, #4]
 81020fa:	6812      	ldr	r2, [r2, #0]
 81020fc:	430b      	orrs	r3, r1
 81020fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	681b      	ldr	r3, [r3, #0]
 8102106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810210a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102112:	041a      	lsls	r2, r3, #16
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	681b      	ldr	r3, [r3, #0]
 8102118:	430a      	orrs	r2, r1
 810211a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102122:	687a      	ldr	r2, [r7, #4]
 8102124:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102126:	fb02 f303 	mul.w	r3, r2, r3
 810212a:	68ba      	ldr	r2, [r7, #8]
 810212c:	4413      	add	r3, r2
 810212e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810213c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102140:	68ba      	ldr	r2, [r7, #8]
 8102142:	0091      	lsls	r1, r2, #2
 8102144:	687a      	ldr	r2, [r7, #4]
 8102146:	6812      	ldr	r2, [r2, #0]
 8102148:	430b      	orrs	r3, r1
 810214a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102156:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810215e:	041a      	lsls	r2, r3, #16
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	430a      	orrs	r2, r1
 8102166:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810216e:	687a      	ldr	r2, [r7, #4]
 8102170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8102172:	fb02 f303 	mul.w	r3, r2, r3
 8102176:	68ba      	ldr	r2, [r7, #8]
 8102178:	4413      	add	r3, r2
 810217a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102188:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810218c:	68ba      	ldr	r2, [r7, #8]
 810218e:	0091      	lsls	r1, r2, #2
 8102190:	687a      	ldr	r2, [r7, #4]
 8102192:	6812      	ldr	r2, [r2, #0]
 8102194:	430b      	orrs	r3, r1
 8102196:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810219e:	687a      	ldr	r2, [r7, #4]
 81021a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 81021a2:	fb02 f303 	mul.w	r3, r2, r3
 81021a6:	68ba      	ldr	r2, [r7, #8]
 81021a8:	4413      	add	r3, r2
 81021aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81021b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81021b8:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81021bc:	68ba      	ldr	r2, [r7, #8]
 81021be:	0091      	lsls	r1, r2, #2
 81021c0:	687a      	ldr	r2, [r7, #4]
 81021c2:	6812      	ldr	r2, [r2, #0]
 81021c4:	430b      	orrs	r3, r1
 81021c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	681b      	ldr	r3, [r3, #0]
 81021ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81021d2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021da:	041a      	lsls	r2, r3, #16
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	430a      	orrs	r2, r1
 81021e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021ea:	005b      	lsls	r3, r3, #1
 81021ec:	68ba      	ldr	r2, [r7, #8]
 81021ee:	4413      	add	r3, r2
 81021f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	681b      	ldr	r3, [r3, #0]
 81021f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81021fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81021fe:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102202:	68ba      	ldr	r2, [r7, #8]
 8102204:	0091      	lsls	r1, r2, #2
 8102206:	687a      	ldr	r2, [r7, #4]
 8102208:	6812      	ldr	r2, [r2, #0]
 810220a:	430b      	orrs	r3, r1
 810220c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102218:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102220:	041a      	lsls	r2, r3, #16
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	430a      	orrs	r2, r1
 8102228:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102234:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810223c:	061a      	lsls	r2, r3, #24
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	430a      	orrs	r2, r1
 8102244:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810224c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102250:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8102254:	009a      	lsls	r2, r3, #2
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102262:	009b      	lsls	r3, r3, #2
 8102264:	441a      	add	r2, r3
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102272:	00db      	lsls	r3, r3, #3
 8102274:	441a      	add	r2, r3
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102282:	6879      	ldr	r1, [r7, #4]
 8102284:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8102286:	fb01 f303 	mul.w	r3, r1, r3
 810228a:	009b      	lsls	r3, r3, #2
 810228c:	441a      	add	r2, r3
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810229a:	6879      	ldr	r1, [r7, #4]
 810229c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 810229e:	fb01 f303 	mul.w	r3, r1, r3
 81022a2:	009b      	lsls	r3, r3, #2
 81022a4:	441a      	add	r2, r3
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022b2:	6879      	ldr	r1, [r7, #4]
 81022b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 81022b6:	fb01 f303 	mul.w	r3, r1, r3
 81022ba:	009b      	lsls	r3, r3, #2
 81022bc:	441a      	add	r2, r3
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022ce:	00db      	lsls	r3, r3, #3
 81022d0:	441a      	add	r2, r3
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81022e2:	6879      	ldr	r1, [r7, #4]
 81022e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 81022e6:	fb01 f303 	mul.w	r3, r1, r3
 81022ea:	009b      	lsls	r3, r3, #2
 81022ec:	441a      	add	r2, r3
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81022fe:	6879      	ldr	r1, [r7, #4]
 8102300:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102302:	fb01 f303 	mul.w	r3, r1, r3
 8102306:	009b      	lsls	r3, r3, #2
 8102308:	441a      	add	r2, r3
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102316:	4a14      	ldr	r2, [pc, #80]	; (8102368 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8102318:	4293      	cmp	r3, r2
 810231a:	d90d      	bls.n	8102338 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102322:	f043 0220 	orr.w	r2, r3, #32
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	2203      	movs	r2, #3
 8102330:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8102334:	2301      	movs	r3, #1
 8102336:	e010      	b.n	810235a <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810233c:	60fb      	str	r3, [r7, #12]
 810233e:	e005      	b.n	810234c <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	2200      	movs	r2, #0
 8102344:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	3304      	adds	r3, #4
 810234a:	60fb      	str	r3, [r7, #12]
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102352:	68fa      	ldr	r2, [r7, #12]
 8102354:	429a      	cmp	r2, r3
 8102356:	d3f3      	bcc.n	8102340 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8102358:	2300      	movs	r3, #0
}
 810235a:	4618      	mov	r0, r3
 810235c:	3714      	adds	r7, #20
 810235e:	46bd      	mov	sp, r7
 8102360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102364:	4770      	bx	lr
 8102366:	bf00      	nop
 8102368:	4000d3fc 	.word	0x4000d3fc

0810236c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810236c:	b480      	push	{r7}
 810236e:	b089      	sub	sp, #36	; 0x24
 8102370:	af00      	add	r7, sp, #0
 8102372:	6078      	str	r0, [r7, #4]
 8102374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102376:	2300      	movs	r3, #0
 8102378:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810237a:	4b89      	ldr	r3, [pc, #548]	; (81025a0 <HAL_GPIO_Init+0x234>)
 810237c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810237e:	e194      	b.n	81026aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102380:	683b      	ldr	r3, [r7, #0]
 8102382:	681a      	ldr	r2, [r3, #0]
 8102384:	2101      	movs	r1, #1
 8102386:	69fb      	ldr	r3, [r7, #28]
 8102388:	fa01 f303 	lsl.w	r3, r1, r3
 810238c:	4013      	ands	r3, r2
 810238e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102390:	693b      	ldr	r3, [r7, #16]
 8102392:	2b00      	cmp	r3, #0
 8102394:	f000 8186 	beq.w	81026a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102398:	683b      	ldr	r3, [r7, #0]
 810239a:	685b      	ldr	r3, [r3, #4]
 810239c:	f003 0303 	and.w	r3, r3, #3
 81023a0:	2b01      	cmp	r3, #1
 81023a2:	d005      	beq.n	81023b0 <HAL_GPIO_Init+0x44>
 81023a4:	683b      	ldr	r3, [r7, #0]
 81023a6:	685b      	ldr	r3, [r3, #4]
 81023a8:	f003 0303 	and.w	r3, r3, #3
 81023ac:	2b02      	cmp	r3, #2
 81023ae:	d130      	bne.n	8102412 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	689b      	ldr	r3, [r3, #8]
 81023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81023b6:	69fb      	ldr	r3, [r7, #28]
 81023b8:	005b      	lsls	r3, r3, #1
 81023ba:	2203      	movs	r2, #3
 81023bc:	fa02 f303 	lsl.w	r3, r2, r3
 81023c0:	43db      	mvns	r3, r3
 81023c2:	69ba      	ldr	r2, [r7, #24]
 81023c4:	4013      	ands	r3, r2
 81023c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81023c8:	683b      	ldr	r3, [r7, #0]
 81023ca:	68da      	ldr	r2, [r3, #12]
 81023cc:	69fb      	ldr	r3, [r7, #28]
 81023ce:	005b      	lsls	r3, r3, #1
 81023d0:	fa02 f303 	lsl.w	r3, r2, r3
 81023d4:	69ba      	ldr	r2, [r7, #24]
 81023d6:	4313      	orrs	r3, r2
 81023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	69ba      	ldr	r2, [r7, #24]
 81023de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	685b      	ldr	r3, [r3, #4]
 81023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81023e6:	2201      	movs	r2, #1
 81023e8:	69fb      	ldr	r3, [r7, #28]
 81023ea:	fa02 f303 	lsl.w	r3, r2, r3
 81023ee:	43db      	mvns	r3, r3
 81023f0:	69ba      	ldr	r2, [r7, #24]
 81023f2:	4013      	ands	r3, r2
 81023f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81023f6:	683b      	ldr	r3, [r7, #0]
 81023f8:	685b      	ldr	r3, [r3, #4]
 81023fa:	091b      	lsrs	r3, r3, #4
 81023fc:	f003 0201 	and.w	r2, r3, #1
 8102400:	69fb      	ldr	r3, [r7, #28]
 8102402:	fa02 f303 	lsl.w	r3, r2, r3
 8102406:	69ba      	ldr	r2, [r7, #24]
 8102408:	4313      	orrs	r3, r2
 810240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	69ba      	ldr	r2, [r7, #24]
 8102410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102412:	683b      	ldr	r3, [r7, #0]
 8102414:	685b      	ldr	r3, [r3, #4]
 8102416:	f003 0303 	and.w	r3, r3, #3
 810241a:	2b03      	cmp	r3, #3
 810241c:	d017      	beq.n	810244e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	68db      	ldr	r3, [r3, #12]
 8102422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102424:	69fb      	ldr	r3, [r7, #28]
 8102426:	005b      	lsls	r3, r3, #1
 8102428:	2203      	movs	r2, #3
 810242a:	fa02 f303 	lsl.w	r3, r2, r3
 810242e:	43db      	mvns	r3, r3
 8102430:	69ba      	ldr	r2, [r7, #24]
 8102432:	4013      	ands	r3, r2
 8102434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102436:	683b      	ldr	r3, [r7, #0]
 8102438:	689a      	ldr	r2, [r3, #8]
 810243a:	69fb      	ldr	r3, [r7, #28]
 810243c:	005b      	lsls	r3, r3, #1
 810243e:	fa02 f303 	lsl.w	r3, r2, r3
 8102442:	69ba      	ldr	r2, [r7, #24]
 8102444:	4313      	orrs	r3, r2
 8102446:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	69ba      	ldr	r2, [r7, #24]
 810244c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810244e:	683b      	ldr	r3, [r7, #0]
 8102450:	685b      	ldr	r3, [r3, #4]
 8102452:	f003 0303 	and.w	r3, r3, #3
 8102456:	2b02      	cmp	r3, #2
 8102458:	d123      	bne.n	81024a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810245a:	69fb      	ldr	r3, [r7, #28]
 810245c:	08da      	lsrs	r2, r3, #3
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	3208      	adds	r2, #8
 8102462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102468:	69fb      	ldr	r3, [r7, #28]
 810246a:	f003 0307 	and.w	r3, r3, #7
 810246e:	009b      	lsls	r3, r3, #2
 8102470:	220f      	movs	r2, #15
 8102472:	fa02 f303 	lsl.w	r3, r2, r3
 8102476:	43db      	mvns	r3, r3
 8102478:	69ba      	ldr	r2, [r7, #24]
 810247a:	4013      	ands	r3, r2
 810247c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810247e:	683b      	ldr	r3, [r7, #0]
 8102480:	691a      	ldr	r2, [r3, #16]
 8102482:	69fb      	ldr	r3, [r7, #28]
 8102484:	f003 0307 	and.w	r3, r3, #7
 8102488:	009b      	lsls	r3, r3, #2
 810248a:	fa02 f303 	lsl.w	r3, r2, r3
 810248e:	69ba      	ldr	r2, [r7, #24]
 8102490:	4313      	orrs	r3, r2
 8102492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102494:	69fb      	ldr	r3, [r7, #28]
 8102496:	08da      	lsrs	r2, r3, #3
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	3208      	adds	r2, #8
 810249c:	69b9      	ldr	r1, [r7, #24]
 810249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81024a8:	69fb      	ldr	r3, [r7, #28]
 81024aa:	005b      	lsls	r3, r3, #1
 81024ac:	2203      	movs	r2, #3
 81024ae:	fa02 f303 	lsl.w	r3, r2, r3
 81024b2:	43db      	mvns	r3, r3
 81024b4:	69ba      	ldr	r2, [r7, #24]
 81024b6:	4013      	ands	r3, r2
 81024b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81024ba:	683b      	ldr	r3, [r7, #0]
 81024bc:	685b      	ldr	r3, [r3, #4]
 81024be:	f003 0203 	and.w	r2, r3, #3
 81024c2:	69fb      	ldr	r3, [r7, #28]
 81024c4:	005b      	lsls	r3, r3, #1
 81024c6:	fa02 f303 	lsl.w	r3, r2, r3
 81024ca:	69ba      	ldr	r2, [r7, #24]
 81024cc:	4313      	orrs	r3, r2
 81024ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	69ba      	ldr	r2, [r7, #24]
 81024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81024d6:	683b      	ldr	r3, [r7, #0]
 81024d8:	685b      	ldr	r3, [r3, #4]
 81024da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81024de:	2b00      	cmp	r3, #0
 81024e0:	f000 80e0 	beq.w	81026a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81024e4:	4b2f      	ldr	r3, [pc, #188]	; (81025a4 <HAL_GPIO_Init+0x238>)
 81024e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81024ea:	4a2e      	ldr	r2, [pc, #184]	; (81025a4 <HAL_GPIO_Init+0x238>)
 81024ec:	f043 0302 	orr.w	r3, r3, #2
 81024f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81024f4:	4b2b      	ldr	r3, [pc, #172]	; (81025a4 <HAL_GPIO_Init+0x238>)
 81024f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81024fa:	f003 0302 	and.w	r3, r3, #2
 81024fe:	60fb      	str	r3, [r7, #12]
 8102500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102502:	4a29      	ldr	r2, [pc, #164]	; (81025a8 <HAL_GPIO_Init+0x23c>)
 8102504:	69fb      	ldr	r3, [r7, #28]
 8102506:	089b      	lsrs	r3, r3, #2
 8102508:	3302      	adds	r3, #2
 810250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102510:	69fb      	ldr	r3, [r7, #28]
 8102512:	f003 0303 	and.w	r3, r3, #3
 8102516:	009b      	lsls	r3, r3, #2
 8102518:	220f      	movs	r2, #15
 810251a:	fa02 f303 	lsl.w	r3, r2, r3
 810251e:	43db      	mvns	r3, r3
 8102520:	69ba      	ldr	r2, [r7, #24]
 8102522:	4013      	ands	r3, r2
 8102524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	4a20      	ldr	r2, [pc, #128]	; (81025ac <HAL_GPIO_Init+0x240>)
 810252a:	4293      	cmp	r3, r2
 810252c:	d052      	beq.n	81025d4 <HAL_GPIO_Init+0x268>
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	4a1f      	ldr	r2, [pc, #124]	; (81025b0 <HAL_GPIO_Init+0x244>)
 8102532:	4293      	cmp	r3, r2
 8102534:	d031      	beq.n	810259a <HAL_GPIO_Init+0x22e>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	4a1e      	ldr	r2, [pc, #120]	; (81025b4 <HAL_GPIO_Init+0x248>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d02b      	beq.n	8102596 <HAL_GPIO_Init+0x22a>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	4a1d      	ldr	r2, [pc, #116]	; (81025b8 <HAL_GPIO_Init+0x24c>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d025      	beq.n	8102592 <HAL_GPIO_Init+0x226>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	4a1c      	ldr	r2, [pc, #112]	; (81025bc <HAL_GPIO_Init+0x250>)
 810254a:	4293      	cmp	r3, r2
 810254c:	d01f      	beq.n	810258e <HAL_GPIO_Init+0x222>
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	4a1b      	ldr	r2, [pc, #108]	; (81025c0 <HAL_GPIO_Init+0x254>)
 8102552:	4293      	cmp	r3, r2
 8102554:	d019      	beq.n	810258a <HAL_GPIO_Init+0x21e>
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	4a1a      	ldr	r2, [pc, #104]	; (81025c4 <HAL_GPIO_Init+0x258>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d013      	beq.n	8102586 <HAL_GPIO_Init+0x21a>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	4a19      	ldr	r2, [pc, #100]	; (81025c8 <HAL_GPIO_Init+0x25c>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d00d      	beq.n	8102582 <HAL_GPIO_Init+0x216>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	4a18      	ldr	r2, [pc, #96]	; (81025cc <HAL_GPIO_Init+0x260>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d007      	beq.n	810257e <HAL_GPIO_Init+0x212>
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	4a17      	ldr	r2, [pc, #92]	; (81025d0 <HAL_GPIO_Init+0x264>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d101      	bne.n	810257a <HAL_GPIO_Init+0x20e>
 8102576:	2309      	movs	r3, #9
 8102578:	e02d      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810257a:	230a      	movs	r3, #10
 810257c:	e02b      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810257e:	2308      	movs	r3, #8
 8102580:	e029      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 8102582:	2307      	movs	r3, #7
 8102584:	e027      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 8102586:	2306      	movs	r3, #6
 8102588:	e025      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810258a:	2305      	movs	r3, #5
 810258c:	e023      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810258e:	2304      	movs	r3, #4
 8102590:	e021      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 8102592:	2303      	movs	r3, #3
 8102594:	e01f      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 8102596:	2302      	movs	r3, #2
 8102598:	e01d      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810259a:	2301      	movs	r3, #1
 810259c:	e01b      	b.n	81025d6 <HAL_GPIO_Init+0x26a>
 810259e:	bf00      	nop
 81025a0:	580000c0 	.word	0x580000c0
 81025a4:	58024400 	.word	0x58024400
 81025a8:	58000400 	.word	0x58000400
 81025ac:	58020000 	.word	0x58020000
 81025b0:	58020400 	.word	0x58020400
 81025b4:	58020800 	.word	0x58020800
 81025b8:	58020c00 	.word	0x58020c00
 81025bc:	58021000 	.word	0x58021000
 81025c0:	58021400 	.word	0x58021400
 81025c4:	58021800 	.word	0x58021800
 81025c8:	58021c00 	.word	0x58021c00
 81025cc:	58022000 	.word	0x58022000
 81025d0:	58022400 	.word	0x58022400
 81025d4:	2300      	movs	r3, #0
 81025d6:	69fa      	ldr	r2, [r7, #28]
 81025d8:	f002 0203 	and.w	r2, r2, #3
 81025dc:	0092      	lsls	r2, r2, #2
 81025de:	4093      	lsls	r3, r2
 81025e0:	69ba      	ldr	r2, [r7, #24]
 81025e2:	4313      	orrs	r3, r2
 81025e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81025e6:	4938      	ldr	r1, [pc, #224]	; (81026c8 <HAL_GPIO_Init+0x35c>)
 81025e8:	69fb      	ldr	r3, [r7, #28]
 81025ea:	089b      	lsrs	r3, r3, #2
 81025ec:	3302      	adds	r3, #2
 81025ee:	69ba      	ldr	r2, [r7, #24]
 81025f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81025f8:	681b      	ldr	r3, [r3, #0]
 81025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81025fc:	693b      	ldr	r3, [r7, #16]
 81025fe:	43db      	mvns	r3, r3
 8102600:	69ba      	ldr	r2, [r7, #24]
 8102602:	4013      	ands	r3, r2
 8102604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102606:	683b      	ldr	r3, [r7, #0]
 8102608:	685b      	ldr	r3, [r3, #4]
 810260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810260e:	2b00      	cmp	r3, #0
 8102610:	d003      	beq.n	810261a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102612:	69ba      	ldr	r2, [r7, #24]
 8102614:	693b      	ldr	r3, [r7, #16]
 8102616:	4313      	orrs	r3, r2
 8102618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810261a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810261e:	69bb      	ldr	r3, [r7, #24]
 8102620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102626:	685b      	ldr	r3, [r3, #4]
 8102628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810262a:	693b      	ldr	r3, [r7, #16]
 810262c:	43db      	mvns	r3, r3
 810262e:	69ba      	ldr	r2, [r7, #24]
 8102630:	4013      	ands	r3, r2
 8102632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102634:	683b      	ldr	r3, [r7, #0]
 8102636:	685b      	ldr	r3, [r3, #4]
 8102638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810263c:	2b00      	cmp	r3, #0
 810263e:	d003      	beq.n	8102648 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102640:	69ba      	ldr	r2, [r7, #24]
 8102642:	693b      	ldr	r3, [r7, #16]
 8102644:	4313      	orrs	r3, r2
 8102646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810264c:	69bb      	ldr	r3, [r7, #24]
 810264e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102650:	697b      	ldr	r3, [r7, #20]
 8102652:	685b      	ldr	r3, [r3, #4]
 8102654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102656:	693b      	ldr	r3, [r7, #16]
 8102658:	43db      	mvns	r3, r3
 810265a:	69ba      	ldr	r2, [r7, #24]
 810265c:	4013      	ands	r3, r2
 810265e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102660:	683b      	ldr	r3, [r7, #0]
 8102662:	685b      	ldr	r3, [r3, #4]
 8102664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102668:	2b00      	cmp	r3, #0
 810266a:	d003      	beq.n	8102674 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810266c:	69ba      	ldr	r2, [r7, #24]
 810266e:	693b      	ldr	r3, [r7, #16]
 8102670:	4313      	orrs	r3, r2
 8102672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102674:	697b      	ldr	r3, [r7, #20]
 8102676:	69ba      	ldr	r2, [r7, #24]
 8102678:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810267a:	697b      	ldr	r3, [r7, #20]
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102680:	693b      	ldr	r3, [r7, #16]
 8102682:	43db      	mvns	r3, r3
 8102684:	69ba      	ldr	r2, [r7, #24]
 8102686:	4013      	ands	r3, r2
 8102688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810268a:	683b      	ldr	r3, [r7, #0]
 810268c:	685b      	ldr	r3, [r3, #4]
 810268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102692:	2b00      	cmp	r3, #0
 8102694:	d003      	beq.n	810269e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102696:	69ba      	ldr	r2, [r7, #24]
 8102698:	693b      	ldr	r3, [r7, #16]
 810269a:	4313      	orrs	r3, r2
 810269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810269e:	697b      	ldr	r3, [r7, #20]
 81026a0:	69ba      	ldr	r2, [r7, #24]
 81026a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81026a4:	69fb      	ldr	r3, [r7, #28]
 81026a6:	3301      	adds	r3, #1
 81026a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81026aa:	683b      	ldr	r3, [r7, #0]
 81026ac:	681a      	ldr	r2, [r3, #0]
 81026ae:	69fb      	ldr	r3, [r7, #28]
 81026b0:	fa22 f303 	lsr.w	r3, r2, r3
 81026b4:	2b00      	cmp	r3, #0
 81026b6:	f47f ae63 	bne.w	8102380 <HAL_GPIO_Init+0x14>
  }
}
 81026ba:	bf00      	nop
 81026bc:	bf00      	nop
 81026be:	3724      	adds	r7, #36	; 0x24
 81026c0:	46bd      	mov	sp, r7
 81026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c6:	4770      	bx	lr
 81026c8:	58000400 	.word	0x58000400

081026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81026cc:	b480      	push	{r7}
 81026ce:	b083      	sub	sp, #12
 81026d0:	af00      	add	r7, sp, #0
 81026d2:	6078      	str	r0, [r7, #4]
 81026d4:	460b      	mov	r3, r1
 81026d6:	807b      	strh	r3, [r7, #2]
 81026d8:	4613      	mov	r3, r2
 81026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81026dc:	787b      	ldrb	r3, [r7, #1]
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d003      	beq.n	81026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81026e2:	887a      	ldrh	r2, [r7, #2]
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81026e8:	e003      	b.n	81026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81026ea:	887b      	ldrh	r3, [r7, #2]
 81026ec:	041a      	lsls	r2, r3, #16
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	619a      	str	r2, [r3, #24]
}
 81026f2:	bf00      	nop
 81026f4:	370c      	adds	r7, #12
 81026f6:	46bd      	mov	sp, r7
 81026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026fc:	4770      	bx	lr
	...

08102700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102700:	b480      	push	{r7}
 8102702:	b089      	sub	sp, #36	; 0x24
 8102704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102706:	4bb3      	ldr	r3, [pc, #716]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102708:	691b      	ldr	r3, [r3, #16]
 810270a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810270e:	2b18      	cmp	r3, #24
 8102710:	f200 8155 	bhi.w	81029be <HAL_RCC_GetSysClockFreq+0x2be>
 8102714:	a201      	add	r2, pc, #4	; (adr r2, 810271c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810271a:	bf00      	nop
 810271c:	08102781 	.word	0x08102781
 8102720:	081029bf 	.word	0x081029bf
 8102724:	081029bf 	.word	0x081029bf
 8102728:	081029bf 	.word	0x081029bf
 810272c:	081029bf 	.word	0x081029bf
 8102730:	081029bf 	.word	0x081029bf
 8102734:	081029bf 	.word	0x081029bf
 8102738:	081029bf 	.word	0x081029bf
 810273c:	081027a7 	.word	0x081027a7
 8102740:	081029bf 	.word	0x081029bf
 8102744:	081029bf 	.word	0x081029bf
 8102748:	081029bf 	.word	0x081029bf
 810274c:	081029bf 	.word	0x081029bf
 8102750:	081029bf 	.word	0x081029bf
 8102754:	081029bf 	.word	0x081029bf
 8102758:	081029bf 	.word	0x081029bf
 810275c:	081027ad 	.word	0x081027ad
 8102760:	081029bf 	.word	0x081029bf
 8102764:	081029bf 	.word	0x081029bf
 8102768:	081029bf 	.word	0x081029bf
 810276c:	081029bf 	.word	0x081029bf
 8102770:	081029bf 	.word	0x081029bf
 8102774:	081029bf 	.word	0x081029bf
 8102778:	081029bf 	.word	0x081029bf
 810277c:	081027b3 	.word	0x081027b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102780:	4b94      	ldr	r3, [pc, #592]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	f003 0320 	and.w	r3, r3, #32
 8102788:	2b00      	cmp	r3, #0
 810278a:	d009      	beq.n	81027a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810278c:	4b91      	ldr	r3, [pc, #580]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	08db      	lsrs	r3, r3, #3
 8102792:	f003 0303 	and.w	r3, r3, #3
 8102796:	4a90      	ldr	r2, [pc, #576]	; (81029d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102798:	fa22 f303 	lsr.w	r3, r2, r3
 810279c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810279e:	e111      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81027a0:	4b8d      	ldr	r3, [pc, #564]	; (81029d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027a2:	61bb      	str	r3, [r7, #24]
    break;
 81027a4:	e10e      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81027a6:	4b8d      	ldr	r3, [pc, #564]	; (81029dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81027a8:	61bb      	str	r3, [r7, #24]
    break;
 81027aa:	e10b      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81027ac:	4b8c      	ldr	r3, [pc, #560]	; (81029e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81027ae:	61bb      	str	r3, [r7, #24]
    break;
 81027b0:	e108      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81027b2:	4b88      	ldr	r3, [pc, #544]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027b6:	f003 0303 	and.w	r3, r3, #3
 81027ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81027bc:	4b85      	ldr	r3, [pc, #532]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027c0:	091b      	lsrs	r3, r3, #4
 81027c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81027c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81027c8:	4b82      	ldr	r3, [pc, #520]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027cc:	f003 0301 	and.w	r3, r3, #1
 81027d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81027d2:	4b80      	ldr	r3, [pc, #512]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81027d6:	08db      	lsrs	r3, r3, #3
 81027d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81027dc:	68fa      	ldr	r2, [r7, #12]
 81027de:	fb02 f303 	mul.w	r3, r2, r3
 81027e2:	ee07 3a90 	vmov	s15, r3
 81027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81027ee:	693b      	ldr	r3, [r7, #16]
 81027f0:	2b00      	cmp	r3, #0
 81027f2:	f000 80e1 	beq.w	81029b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 81027f6:	697b      	ldr	r3, [r7, #20]
 81027f8:	2b02      	cmp	r3, #2
 81027fa:	f000 8083 	beq.w	8102904 <HAL_RCC_GetSysClockFreq+0x204>
 81027fe:	697b      	ldr	r3, [r7, #20]
 8102800:	2b02      	cmp	r3, #2
 8102802:	f200 80a1 	bhi.w	8102948 <HAL_RCC_GetSysClockFreq+0x248>
 8102806:	697b      	ldr	r3, [r7, #20]
 8102808:	2b00      	cmp	r3, #0
 810280a:	d003      	beq.n	8102814 <HAL_RCC_GetSysClockFreq+0x114>
 810280c:	697b      	ldr	r3, [r7, #20]
 810280e:	2b01      	cmp	r3, #1
 8102810:	d056      	beq.n	81028c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102812:	e099      	b.n	8102948 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102814:	4b6f      	ldr	r3, [pc, #444]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	f003 0320 	and.w	r3, r3, #32
 810281c:	2b00      	cmp	r3, #0
 810281e:	d02d      	beq.n	810287c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102820:	4b6c      	ldr	r3, [pc, #432]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	08db      	lsrs	r3, r3, #3
 8102826:	f003 0303 	and.w	r3, r3, #3
 810282a:	4a6b      	ldr	r2, [pc, #428]	; (81029d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810282c:	fa22 f303 	lsr.w	r3, r2, r3
 8102830:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	ee07 3a90 	vmov	s15, r3
 8102838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810283c:	693b      	ldr	r3, [r7, #16]
 810283e:	ee07 3a90 	vmov	s15, r3
 8102842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810284a:	4b62      	ldr	r3, [pc, #392]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102852:	ee07 3a90 	vmov	s15, r3
 8102856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810285a:	ed97 6a02 	vldr	s12, [r7, #8]
 810285e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810286a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810286e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810287a:	e087      	b.n	810298c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810287c:	693b      	ldr	r3, [r7, #16]
 810287e:	ee07 3a90 	vmov	s15, r3
 8102882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102886:	eddf 6a58 	vldr	s13, [pc, #352]	; 81029e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810288a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810288e:	4b51      	ldr	r3, [pc, #324]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102896:	ee07 3a90 	vmov	s15, r3
 810289a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810289e:	ed97 6a02 	vldr	s12, [r7, #8]
 81028a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81028be:	e065      	b.n	810298c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81028c0:	693b      	ldr	r3, [r7, #16]
 81028c2:	ee07 3a90 	vmov	s15, r3
 81028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 81029ec <HAL_RCC_GetSysClockFreq+0x2ec>
 81028ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028d2:	4b40      	ldr	r3, [pc, #256]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028da:	ee07 3a90 	vmov	s15, r3
 81028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81028e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102902:	e043      	b.n	810298c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102904:	693b      	ldr	r3, [r7, #16]
 8102906:	ee07 3a90 	vmov	s15, r3
 810290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810290e:	eddf 6a38 	vldr	s13, [pc, #224]	; 81029f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102916:	4b2f      	ldr	r3, [pc, #188]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810291a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810291e:	ee07 3a90 	vmov	s15, r3
 8102922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102926:	ed97 6a02 	vldr	s12, [r7, #8]
 810292a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810292e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810293a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102946:	e021      	b.n	810298c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102948:	693b      	ldr	r3, [r7, #16]
 810294a:	ee07 3a90 	vmov	s15, r3
 810294e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102952:	eddf 6a26 	vldr	s13, [pc, #152]	; 81029ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8102956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810295a:	4b1e      	ldr	r3, [pc, #120]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102962:	ee07 3a90 	vmov	s15, r3
 8102966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810296a:	ed97 6a02 	vldr	s12, [r7, #8]
 810296e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810297a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810297e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810298a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810298c:	4b11      	ldr	r3, [pc, #68]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102990:	0a5b      	lsrs	r3, r3, #9
 8102992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102996:	3301      	adds	r3, #1
 8102998:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810299a:	683b      	ldr	r3, [r7, #0]
 810299c:	ee07 3a90 	vmov	s15, r3
 81029a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81029a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029b0:	ee17 3a90 	vmov	r3, s15
 81029b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81029b6:	e005      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81029b8:	2300      	movs	r3, #0
 81029ba:	61bb      	str	r3, [r7, #24]
    break;
 81029bc:	e002      	b.n	81029c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81029be:	4b07      	ldr	r3, [pc, #28]	; (81029dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81029c0:	61bb      	str	r3, [r7, #24]
    break;
 81029c2:	bf00      	nop
  }

  return sysclockfreq;
 81029c4:	69bb      	ldr	r3, [r7, #24]
}
 81029c6:	4618      	mov	r0, r3
 81029c8:	3724      	adds	r7, #36	; 0x24
 81029ca:	46bd      	mov	sp, r7
 81029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d0:	4770      	bx	lr
 81029d2:	bf00      	nop
 81029d4:	58024400 	.word	0x58024400
 81029d8:	03d09000 	.word	0x03d09000
 81029dc:	003d0900 	.word	0x003d0900
 81029e0:	007a1200 	.word	0x007a1200
 81029e4:	46000000 	.word	0x46000000
 81029e8:	4c742400 	.word	0x4c742400
 81029ec:	4a742400 	.word	0x4a742400
 81029f0:	4af42400 	.word	0x4af42400

081029f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81029f4:	b580      	push	{r7, lr}
 81029f6:	b086      	sub	sp, #24
 81029f8:	af00      	add	r7, sp, #0
 81029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81029fc:	2300      	movs	r3, #0
 81029fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102a00:	2300      	movs	r3, #0
 8102a02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	d03f      	beq.n	8102a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102a18:	d02a      	beq.n	8102a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102a1e:	d824      	bhi.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a24:	d018      	beq.n	8102a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a2a:	d81e      	bhi.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102a2c:	2b00      	cmp	r3, #0
 8102a2e:	d003      	beq.n	8102a38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102a34:	d007      	beq.n	8102a46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102a36:	e018      	b.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a38:	4ba3      	ldr	r3, [pc, #652]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a3c:	4aa2      	ldr	r2, [pc, #648]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a44:	e015      	b.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	3304      	adds	r3, #4
 8102a4a:	2102      	movs	r1, #2
 8102a4c:	4618      	mov	r0, r3
 8102a4e:	f000 ff17 	bl	8103880 <RCCEx_PLL2_Config>
 8102a52:	4603      	mov	r3, r0
 8102a54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a56:	e00c      	b.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	3324      	adds	r3, #36	; 0x24
 8102a5c:	2102      	movs	r1, #2
 8102a5e:	4618      	mov	r0, r3
 8102a60:	f000 ffc0 	bl	81039e4 <RCCEx_PLL3_Config>
 8102a64:	4603      	mov	r3, r0
 8102a66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a68:	e003      	b.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a6a:	2301      	movs	r3, #1
 8102a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8102a6e:	e000      	b.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a72:	7dfb      	ldrb	r3, [r7, #23]
 8102a74:	2b00      	cmp	r3, #0
 8102a76:	d109      	bne.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102a78:	4b93      	ldr	r3, [pc, #588]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a84:	4990      	ldr	r1, [pc, #576]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102a86:	4313      	orrs	r3, r2
 8102a88:	650b      	str	r3, [r1, #80]	; 0x50
 8102a8a:	e001      	b.n	8102a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a8c:	7dfb      	ldrb	r3, [r7, #23]
 8102a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d03d      	beq.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102aa0:	2b04      	cmp	r3, #4
 8102aa2:	d826      	bhi.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102aa4:	a201      	add	r2, pc, #4	; (adr r2, 8102aac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102aaa:	bf00      	nop
 8102aac:	08102ac1 	.word	0x08102ac1
 8102ab0:	08102acf 	.word	0x08102acf
 8102ab4:	08102ae1 	.word	0x08102ae1
 8102ab8:	08102af9 	.word	0x08102af9
 8102abc:	08102af9 	.word	0x08102af9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ac0:	4b81      	ldr	r3, [pc, #516]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ac4:	4a80      	ldr	r2, [pc, #512]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102acc:	e015      	b.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	3304      	adds	r3, #4
 8102ad2:	2100      	movs	r1, #0
 8102ad4:	4618      	mov	r0, r3
 8102ad6:	f000 fed3 	bl	8103880 <RCCEx_PLL2_Config>
 8102ada:	4603      	mov	r3, r0
 8102adc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ade:	e00c      	b.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	3324      	adds	r3, #36	; 0x24
 8102ae4:	2100      	movs	r1, #0
 8102ae6:	4618      	mov	r0, r3
 8102ae8:	f000 ff7c 	bl	81039e4 <RCCEx_PLL3_Config>
 8102aec:	4603      	mov	r3, r0
 8102aee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102af0:	e003      	b.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102af2:	2301      	movs	r3, #1
 8102af4:	75fb      	strb	r3, [r7, #23]
      break;
 8102af6:	e000      	b.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102afa:	7dfb      	ldrb	r3, [r7, #23]
 8102afc:	2b00      	cmp	r3, #0
 8102afe:	d109      	bne.n	8102b14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102b00:	4b71      	ldr	r3, [pc, #452]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102b04:	f023 0207 	bic.w	r2, r3, #7
 8102b08:	687b      	ldr	r3, [r7, #4]
 8102b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b0c:	496e      	ldr	r1, [pc, #440]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102b0e:	4313      	orrs	r3, r2
 8102b10:	650b      	str	r3, [r1, #80]	; 0x50
 8102b12:	e001      	b.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b14:	7dfb      	ldrb	r3, [r7, #23]
 8102b16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102b20:	2b00      	cmp	r3, #0
 8102b22:	d042      	beq.n	8102baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102b2c:	d02b      	beq.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102b32:	d825      	bhi.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b34:	2bc0      	cmp	r3, #192	; 0xc0
 8102b36:	d028      	beq.n	8102b8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102b38:	2bc0      	cmp	r3, #192	; 0xc0
 8102b3a:	d821      	bhi.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b3c:	2b80      	cmp	r3, #128	; 0x80
 8102b3e:	d016      	beq.n	8102b6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102b40:	2b80      	cmp	r3, #128	; 0x80
 8102b42:	d81d      	bhi.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b44:	2b00      	cmp	r3, #0
 8102b46:	d002      	beq.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102b48:	2b40      	cmp	r3, #64	; 0x40
 8102b4a:	d007      	beq.n	8102b5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102b4c:	e018      	b.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b4e:	4b5e      	ldr	r3, [pc, #376]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b52:	4a5d      	ldr	r2, [pc, #372]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b5a:	e017      	b.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	3304      	adds	r3, #4
 8102b60:	2100      	movs	r1, #0
 8102b62:	4618      	mov	r0, r3
 8102b64:	f000 fe8c 	bl	8103880 <RCCEx_PLL2_Config>
 8102b68:	4603      	mov	r3, r0
 8102b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b6c:	e00e      	b.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	3324      	adds	r3, #36	; 0x24
 8102b72:	2100      	movs	r1, #0
 8102b74:	4618      	mov	r0, r3
 8102b76:	f000 ff35 	bl	81039e4 <RCCEx_PLL3_Config>
 8102b7a:	4603      	mov	r3, r0
 8102b7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b7e:	e005      	b.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b80:	2301      	movs	r3, #1
 8102b82:	75fb      	strb	r3, [r7, #23]
      break;
 8102b84:	e002      	b.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102b86:	bf00      	nop
 8102b88:	e000      	b.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b8c:	7dfb      	ldrb	r3, [r7, #23]
 8102b8e:	2b00      	cmp	r3, #0
 8102b90:	d109      	bne.n	8102ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102b92:	4b4d      	ldr	r3, [pc, #308]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102b96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b9e:	494a      	ldr	r1, [pc, #296]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ba0:	4313      	orrs	r3, r2
 8102ba2:	650b      	str	r3, [r1, #80]	; 0x50
 8102ba4:	e001      	b.n	8102baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ba6:	7dfb      	ldrb	r3, [r7, #23]
 8102ba8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102bb2:	2b00      	cmp	r3, #0
 8102bb4:	d049      	beq.n	8102c4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102bc0:	d030      	beq.n	8102c24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102bc6:	d82a      	bhi.n	8102c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102bc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102bcc:	d02c      	beq.n	8102c28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102bce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102bd2:	d824      	bhi.n	8102c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102bd8:	d018      	beq.n	8102c0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102bde:	d81e      	bhi.n	8102c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102be0:	2b00      	cmp	r3, #0
 8102be2:	d003      	beq.n	8102bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102be8:	d007      	beq.n	8102bfa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102bea:	e018      	b.n	8102c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bec:	4b36      	ldr	r3, [pc, #216]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bf0:	4a35      	ldr	r2, [pc, #212]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102bf8:	e017      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	3304      	adds	r3, #4
 8102bfe:	2100      	movs	r1, #0
 8102c00:	4618      	mov	r0, r3
 8102c02:	f000 fe3d 	bl	8103880 <RCCEx_PLL2_Config>
 8102c06:	4603      	mov	r3, r0
 8102c08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102c0a:	e00e      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	3324      	adds	r3, #36	; 0x24
 8102c10:	2100      	movs	r1, #0
 8102c12:	4618      	mov	r0, r3
 8102c14:	f000 fee6 	bl	81039e4 <RCCEx_PLL3_Config>
 8102c18:	4603      	mov	r3, r0
 8102c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c1c:	e005      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102c1e:	2301      	movs	r3, #1
 8102c20:	75fb      	strb	r3, [r7, #23]
      break;
 8102c22:	e002      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102c24:	bf00      	nop
 8102c26:	e000      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c2a:	7dfb      	ldrb	r3, [r7, #23]
 8102c2c:	2b00      	cmp	r3, #0
 8102c2e:	d10a      	bne.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102c30:	4b25      	ldr	r3, [pc, #148]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102c3e:	4922      	ldr	r1, [pc, #136]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c40:	4313      	orrs	r3, r2
 8102c42:	658b      	str	r3, [r1, #88]	; 0x58
 8102c44:	e001      	b.n	8102c4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c46:	7dfb      	ldrb	r3, [r7, #23]
 8102c48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d04b      	beq.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102c60:	d030      	beq.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102c66:	d82a      	bhi.n	8102cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102c6c:	d02e      	beq.n	8102ccc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8102c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102c72:	d824      	bhi.n	8102cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102c78:	d018      	beq.n	8102cac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102c7e:	d81e      	bhi.n	8102cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d003      	beq.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102c88:	d007      	beq.n	8102c9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102c8a:	e018      	b.n	8102cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c8c:	4b0e      	ldr	r3, [pc, #56]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c90:	4a0d      	ldr	r2, [pc, #52]	; (8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c98:	e019      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	3304      	adds	r3, #4
 8102c9e:	2100      	movs	r1, #0
 8102ca0:	4618      	mov	r0, r3
 8102ca2:	f000 fded 	bl	8103880 <RCCEx_PLL2_Config>
 8102ca6:	4603      	mov	r3, r0
 8102ca8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102caa:	e010      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	3324      	adds	r3, #36	; 0x24
 8102cb0:	2100      	movs	r1, #0
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	f000 fe96 	bl	81039e4 <RCCEx_PLL3_Config>
 8102cb8:	4603      	mov	r3, r0
 8102cba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102cbc:	e007      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102cbe:	2301      	movs	r3, #1
 8102cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8102cc2:	e004      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102cc4:	bf00      	nop
 8102cc6:	e002      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102cc8:	58024400 	.word	0x58024400
      break;
 8102ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102cce:	7dfb      	ldrb	r3, [r7, #23]
 8102cd0:	2b00      	cmp	r3, #0
 8102cd2:	d10a      	bne.n	8102cea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102cd4:	4b99      	ldr	r3, [pc, #612]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102ce2:	4996      	ldr	r1, [pc, #600]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102ce4:	4313      	orrs	r3, r2
 8102ce6:	658b      	str	r3, [r1, #88]	; 0x58
 8102ce8:	e001      	b.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cea:	7dfb      	ldrb	r3, [r7, #23]
 8102cec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102cf6:	2b00      	cmp	r3, #0
 8102cf8:	d032      	beq.n	8102d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102cfe:	2b30      	cmp	r3, #48	; 0x30
 8102d00:	d01c      	beq.n	8102d3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102d02:	2b30      	cmp	r3, #48	; 0x30
 8102d04:	d817      	bhi.n	8102d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102d06:	2b20      	cmp	r3, #32
 8102d08:	d00c      	beq.n	8102d24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8102d0a:	2b20      	cmp	r3, #32
 8102d0c:	d813      	bhi.n	8102d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102d0e:	2b00      	cmp	r3, #0
 8102d10:	d016      	beq.n	8102d40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102d12:	2b10      	cmp	r3, #16
 8102d14:	d10f      	bne.n	8102d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d16:	4b89      	ldr	r3, [pc, #548]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d1a:	4a88      	ldr	r2, [pc, #544]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102d22:	e00e      	b.n	8102d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	3304      	adds	r3, #4
 8102d28:	2102      	movs	r1, #2
 8102d2a:	4618      	mov	r0, r3
 8102d2c:	f000 fda8 	bl	8103880 <RCCEx_PLL2_Config>
 8102d30:	4603      	mov	r3, r0
 8102d32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102d34:	e005      	b.n	8102d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102d36:	2301      	movs	r3, #1
 8102d38:	75fb      	strb	r3, [r7, #23]
      break;
 8102d3a:	e002      	b.n	8102d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102d3c:	bf00      	nop
 8102d3e:	e000      	b.n	8102d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d42:	7dfb      	ldrb	r3, [r7, #23]
 8102d44:	2b00      	cmp	r3, #0
 8102d46:	d109      	bne.n	8102d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102d48:	4b7c      	ldr	r3, [pc, #496]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102d4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d54:	4979      	ldr	r1, [pc, #484]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102d56:	4313      	orrs	r3, r2
 8102d58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102d5a:	e001      	b.n	8102d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d5c:	7dfb      	ldrb	r3, [r7, #23]
 8102d5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d047      	beq.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d74:	d030      	beq.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8102d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d7a:	d82a      	bhi.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102d7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102d80:	d02c      	beq.n	8102ddc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8102d82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102d86:	d824      	bhi.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102d8c:	d018      	beq.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8102d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102d92:	d81e      	bhi.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102d94:	2b00      	cmp	r3, #0
 8102d96:	d003      	beq.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8102d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102d9c:	d007      	beq.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8102d9e:	e018      	b.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102da0:	4b66      	ldr	r3, [pc, #408]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102da4:	4a65      	ldr	r2, [pc, #404]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102dac:	e017      	b.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	3304      	adds	r3, #4
 8102db2:	2100      	movs	r1, #0
 8102db4:	4618      	mov	r0, r3
 8102db6:	f000 fd63 	bl	8103880 <RCCEx_PLL2_Config>
 8102dba:	4603      	mov	r3, r0
 8102dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102dbe:	e00e      	b.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	3324      	adds	r3, #36	; 0x24
 8102dc4:	2100      	movs	r1, #0
 8102dc6:	4618      	mov	r0, r3
 8102dc8:	f000 fe0c 	bl	81039e4 <RCCEx_PLL3_Config>
 8102dcc:	4603      	mov	r3, r0
 8102dce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102dd0:	e005      	b.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102dd2:	2301      	movs	r3, #1
 8102dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8102dd6:	e002      	b.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102dd8:	bf00      	nop
 8102dda:	e000      	b.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dde:	7dfb      	ldrb	r3, [r7, #23]
 8102de0:	2b00      	cmp	r3, #0
 8102de2:	d109      	bne.n	8102df8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102de4:	4b55      	ldr	r3, [pc, #340]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102de8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102df0:	4952      	ldr	r1, [pc, #328]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102df2:	4313      	orrs	r3, r2
 8102df4:	650b      	str	r3, [r1, #80]	; 0x50
 8102df6:	e001      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102df8:	7dfb      	ldrb	r3, [r7, #23]
 8102dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	d049      	beq.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102e10:	d02e      	beq.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8102e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102e16:	d828      	bhi.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102e1c:	d02a      	beq.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8102e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102e22:	d822      	bhi.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e28:	d026      	beq.n	8102e78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8102e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e2e:	d81c      	bhi.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e34:	d010      	beq.n	8102e58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8102e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e3a:	d816      	bhi.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d01d      	beq.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8102e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e44:	d111      	bne.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	3304      	adds	r3, #4
 8102e4a:	2101      	movs	r1, #1
 8102e4c:	4618      	mov	r0, r3
 8102e4e:	f000 fd17 	bl	8103880 <RCCEx_PLL2_Config>
 8102e52:	4603      	mov	r3, r0
 8102e54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102e56:	e012      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	3324      	adds	r3, #36	; 0x24
 8102e5c:	2101      	movs	r1, #1
 8102e5e:	4618      	mov	r0, r3
 8102e60:	f000 fdc0 	bl	81039e4 <RCCEx_PLL3_Config>
 8102e64:	4603      	mov	r3, r0
 8102e66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102e68:	e009      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e6a:	2301      	movs	r3, #1
 8102e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8102e6e:	e006      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102e70:	bf00      	nop
 8102e72:	e004      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102e74:	bf00      	nop
 8102e76:	e002      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102e78:	bf00      	nop
 8102e7a:	e000      	b.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e7e:	7dfb      	ldrb	r3, [r7, #23]
 8102e80:	2b00      	cmp	r3, #0
 8102e82:	d109      	bne.n	8102e98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102e84:	4b2d      	ldr	r3, [pc, #180]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e90:	492a      	ldr	r1, [pc, #168]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102e92:	4313      	orrs	r3, r2
 8102e94:	650b      	str	r3, [r1, #80]	; 0x50
 8102e96:	e001      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e98:	7dfb      	ldrb	r3, [r7, #23]
 8102e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102ea4:	2b00      	cmp	r3, #0
 8102ea6:	d04d      	beq.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102eb2:	d02e      	beq.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8102eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102eb8:	d828      	bhi.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ebe:	d02a      	beq.n	8102f16 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8102ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ec4:	d822      	bhi.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102eca:	d026      	beq.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8102ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102ed0:	d81c      	bhi.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ed6:	d010      	beq.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8102ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102edc:	d816      	bhi.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102ede:	2b00      	cmp	r3, #0
 8102ee0:	d01d      	beq.n	8102f1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8102ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ee6:	d111      	bne.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	3304      	adds	r3, #4
 8102eec:	2101      	movs	r1, #1
 8102eee:	4618      	mov	r0, r3
 8102ef0:	f000 fcc6 	bl	8103880 <RCCEx_PLL2_Config>
 8102ef4:	4603      	mov	r3, r0
 8102ef6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102ef8:	e012      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	3324      	adds	r3, #36	; 0x24
 8102efe:	2101      	movs	r1, #1
 8102f00:	4618      	mov	r0, r3
 8102f02:	f000 fd6f 	bl	81039e4 <RCCEx_PLL3_Config>
 8102f06:	4603      	mov	r3, r0
 8102f08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102f0a:	e009      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102f0c:	2301      	movs	r3, #1
 8102f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8102f10:	e006      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102f12:	bf00      	nop
 8102f14:	e004      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102f16:	bf00      	nop
 8102f18:	e002      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102f1a:	bf00      	nop
 8102f1c:	e000      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f20:	7dfb      	ldrb	r3, [r7, #23]
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d10c      	bne.n	8102f40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102f26:	4b05      	ldr	r3, [pc, #20]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102f34:	4901      	ldr	r1, [pc, #4]	; (8102f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f36:	4313      	orrs	r3, r2
 8102f38:	658b      	str	r3, [r1, #88]	; 0x58
 8102f3a:	e003      	b.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8102f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f40:	7dfb      	ldrb	r3, [r7, #23]
 8102f42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	d02f      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f58:	d00e      	beq.n	8102f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8102f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f5e:	d814      	bhi.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d015      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8102f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102f68:	d10f      	bne.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f6a:	4bb0      	ldr	r3, [pc, #704]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f6e:	4aaf      	ldr	r2, [pc, #700]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102f76:	e00c      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	3304      	adds	r3, #4
 8102f7c:	2101      	movs	r1, #1
 8102f7e:	4618      	mov	r0, r3
 8102f80:	f000 fc7e 	bl	8103880 <RCCEx_PLL2_Config>
 8102f84:	4603      	mov	r3, r0
 8102f86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102f88:	e003      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f8a:	2301      	movs	r3, #1
 8102f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8102f8e:	e000      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8102f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f92:	7dfb      	ldrb	r3, [r7, #23]
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	d109      	bne.n	8102fac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102f98:	4ba4      	ldr	r3, [pc, #656]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fa4:	49a1      	ldr	r1, [pc, #644]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102fa6:	4313      	orrs	r3, r2
 8102fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8102faa:	e001      	b.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fac:	7dfb      	ldrb	r3, [r7, #23]
 8102fae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d032      	beq.n	8103022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102fc0:	2b03      	cmp	r3, #3
 8102fc2:	d81b      	bhi.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102fc4:	a201      	add	r2, pc, #4	; (adr r2, 8102fcc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8102fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fca:	bf00      	nop
 8102fcc:	08103003 	.word	0x08103003
 8102fd0:	08102fdd 	.word	0x08102fdd
 8102fd4:	08102feb 	.word	0x08102feb
 8102fd8:	08103003 	.word	0x08103003
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fdc:	4b93      	ldr	r3, [pc, #588]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fe0:	4a92      	ldr	r2, [pc, #584]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102fe8:	e00c      	b.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	3304      	adds	r3, #4
 8102fee:	2102      	movs	r1, #2
 8102ff0:	4618      	mov	r0, r3
 8102ff2:	f000 fc45 	bl	8103880 <RCCEx_PLL2_Config>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102ffa:	e003      	b.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102ffc:	2301      	movs	r3, #1
 8102ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8103000:	e000      	b.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103004:	7dfb      	ldrb	r3, [r7, #23]
 8103006:	2b00      	cmp	r3, #0
 8103008:	d109      	bne.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810300a:	4b88      	ldr	r3, [pc, #544]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810300e:	f023 0203 	bic.w	r2, r3, #3
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103016:	4985      	ldr	r1, [pc, #532]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103018:	4313      	orrs	r3, r2
 810301a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810301c:	e001      	b.n	8103022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810301e:	7dfb      	ldrb	r3, [r7, #23]
 8103020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810302a:	2b00      	cmp	r3, #0
 810302c:	f000 8088 	beq.w	8103140 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103030:	4b7f      	ldr	r3, [pc, #508]	; (8103230 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103032:	681b      	ldr	r3, [r3, #0]
 8103034:	4a7e      	ldr	r2, [pc, #504]	; (8103230 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810303a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810303c:	f7fe fa82 	bl	8101544 <HAL_GetTick>
 8103040:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103042:	e009      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103044:	f7fe fa7e 	bl	8101544 <HAL_GetTick>
 8103048:	4602      	mov	r2, r0
 810304a:	693b      	ldr	r3, [r7, #16]
 810304c:	1ad3      	subs	r3, r2, r3
 810304e:	2b64      	cmp	r3, #100	; 0x64
 8103050:	d902      	bls.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103052:	2303      	movs	r3, #3
 8103054:	75fb      	strb	r3, [r7, #23]
        break;
 8103056:	e005      	b.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103058:	4b75      	ldr	r3, [pc, #468]	; (8103230 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103060:	2b00      	cmp	r3, #0
 8103062:	d0ef      	beq.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103064:	7dfb      	ldrb	r3, [r7, #23]
 8103066:	2b00      	cmp	r3, #0
 8103068:	d168      	bne.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810306a:	4b70      	ldr	r3, [pc, #448]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810306c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103074:	4053      	eors	r3, r2
 8103076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810307a:	2b00      	cmp	r3, #0
 810307c:	d013      	beq.n	81030a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810307e:	4b6b      	ldr	r3, [pc, #428]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103086:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103088:	4b68      	ldr	r3, [pc, #416]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810308c:	4a67      	ldr	r2, [pc, #412]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103092:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103094:	4b65      	ldr	r3, [pc, #404]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103098:	4a64      	ldr	r2, [pc, #400]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810309a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810309e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81030a0:	4a62      	ldr	r2, [pc, #392]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81030a2:	68fb      	ldr	r3, [r7, #12]
 81030a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81030b0:	d115      	bne.n	81030de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81030b2:	f7fe fa47 	bl	8101544 <HAL_GetTick>
 81030b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81030b8:	e00b      	b.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81030ba:	f7fe fa43 	bl	8101544 <HAL_GetTick>
 81030be:	4602      	mov	r2, r0
 81030c0:	693b      	ldr	r3, [r7, #16]
 81030c2:	1ad3      	subs	r3, r2, r3
 81030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 81030c8:	4293      	cmp	r3, r2
 81030ca:	d902      	bls.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81030cc:	2303      	movs	r3, #3
 81030ce:	75fb      	strb	r3, [r7, #23]
            break;
 81030d0:	e005      	b.n	81030de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81030d2:	4b56      	ldr	r3, [pc, #344]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81030d6:	f003 0302 	and.w	r3, r3, #2
 81030da:	2b00      	cmp	r3, #0
 81030dc:	d0ed      	beq.n	81030ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81030de:	7dfb      	ldrb	r3, [r7, #23]
 81030e0:	2b00      	cmp	r3, #0
 81030e2:	d128      	bne.n	8103136 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81030ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81030f2:	d10f      	bne.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81030f4:	4b4d      	ldr	r3, [pc, #308]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81030f6:	691b      	ldr	r3, [r3, #16]
 81030f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103102:	091b      	lsrs	r3, r3, #4
 8103104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103108:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810310c:	4947      	ldr	r1, [pc, #284]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810310e:	4313      	orrs	r3, r2
 8103110:	610b      	str	r3, [r1, #16]
 8103112:	e005      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103114:	4b45      	ldr	r3, [pc, #276]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103116:	691b      	ldr	r3, [r3, #16]
 8103118:	4a44      	ldr	r2, [pc, #272]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810311a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810311e:	6113      	str	r3, [r2, #16]
 8103120:	4b42      	ldr	r3, [pc, #264]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810312e:	493f      	ldr	r1, [pc, #252]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103130:	4313      	orrs	r3, r2
 8103132:	670b      	str	r3, [r1, #112]	; 0x70
 8103134:	e004      	b.n	8103140 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103136:	7dfb      	ldrb	r3, [r7, #23]
 8103138:	75bb      	strb	r3, [r7, #22]
 810313a:	e001      	b.n	8103140 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810313c:	7dfb      	ldrb	r3, [r7, #23]
 810313e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	f003 0301 	and.w	r3, r3, #1
 8103148:	2b00      	cmp	r3, #0
 810314a:	f000 8083 	beq.w	8103254 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103152:	2b28      	cmp	r3, #40	; 0x28
 8103154:	d866      	bhi.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103156:	a201      	add	r2, pc, #4	; (adr r2, 810315c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810315c:	08103235 	.word	0x08103235
 8103160:	08103225 	.word	0x08103225
 8103164:	08103225 	.word	0x08103225
 8103168:	08103225 	.word	0x08103225
 810316c:	08103225 	.word	0x08103225
 8103170:	08103225 	.word	0x08103225
 8103174:	08103225 	.word	0x08103225
 8103178:	08103225 	.word	0x08103225
 810317c:	08103201 	.word	0x08103201
 8103180:	08103225 	.word	0x08103225
 8103184:	08103225 	.word	0x08103225
 8103188:	08103225 	.word	0x08103225
 810318c:	08103225 	.word	0x08103225
 8103190:	08103225 	.word	0x08103225
 8103194:	08103225 	.word	0x08103225
 8103198:	08103225 	.word	0x08103225
 810319c:	08103213 	.word	0x08103213
 81031a0:	08103225 	.word	0x08103225
 81031a4:	08103225 	.word	0x08103225
 81031a8:	08103225 	.word	0x08103225
 81031ac:	08103225 	.word	0x08103225
 81031b0:	08103225 	.word	0x08103225
 81031b4:	08103225 	.word	0x08103225
 81031b8:	08103225 	.word	0x08103225
 81031bc:	08103235 	.word	0x08103235
 81031c0:	08103225 	.word	0x08103225
 81031c4:	08103225 	.word	0x08103225
 81031c8:	08103225 	.word	0x08103225
 81031cc:	08103225 	.word	0x08103225
 81031d0:	08103225 	.word	0x08103225
 81031d4:	08103225 	.word	0x08103225
 81031d8:	08103225 	.word	0x08103225
 81031dc:	08103235 	.word	0x08103235
 81031e0:	08103225 	.word	0x08103225
 81031e4:	08103225 	.word	0x08103225
 81031e8:	08103225 	.word	0x08103225
 81031ec:	08103225 	.word	0x08103225
 81031f0:	08103225 	.word	0x08103225
 81031f4:	08103225 	.word	0x08103225
 81031f8:	08103225 	.word	0x08103225
 81031fc:	08103235 	.word	0x08103235
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	3304      	adds	r3, #4
 8103204:	2101      	movs	r1, #1
 8103206:	4618      	mov	r0, r3
 8103208:	f000 fb3a 	bl	8103880 <RCCEx_PLL2_Config>
 810320c:	4603      	mov	r3, r0
 810320e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103210:	e011      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	3324      	adds	r3, #36	; 0x24
 8103216:	2101      	movs	r1, #1
 8103218:	4618      	mov	r0, r3
 810321a:	f000 fbe3 	bl	81039e4 <RCCEx_PLL3_Config>
 810321e:	4603      	mov	r3, r0
 8103220:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103222:	e008      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103224:	2301      	movs	r3, #1
 8103226:	75fb      	strb	r3, [r7, #23]
      break;
 8103228:	e005      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810322a:	bf00      	nop
 810322c:	58024400 	.word	0x58024400
 8103230:	58024800 	.word	0x58024800
      break;
 8103234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103236:	7dfb      	ldrb	r3, [r7, #23]
 8103238:	2b00      	cmp	r3, #0
 810323a:	d109      	bne.n	8103250 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810323c:	4b96      	ldr	r3, [pc, #600]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103240:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103248:	4993      	ldr	r1, [pc, #588]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810324a:	4313      	orrs	r3, r2
 810324c:	654b      	str	r3, [r1, #84]	; 0x54
 810324e:	e001      	b.n	8103254 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103250:	7dfb      	ldrb	r3, [r7, #23]
 8103252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	f003 0302 	and.w	r3, r3, #2
 810325c:	2b00      	cmp	r3, #0
 810325e:	d038      	beq.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103264:	2b05      	cmp	r3, #5
 8103266:	d821      	bhi.n	81032ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103268:	a201      	add	r2, pc, #4	; (adr r2, 8103270 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810326e:	bf00      	nop
 8103270:	081032b3 	.word	0x081032b3
 8103274:	08103289 	.word	0x08103289
 8103278:	0810329b 	.word	0x0810329b
 810327c:	081032b3 	.word	0x081032b3
 8103280:	081032b3 	.word	0x081032b3
 8103284:	081032b3 	.word	0x081032b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	3304      	adds	r3, #4
 810328c:	2101      	movs	r1, #1
 810328e:	4618      	mov	r0, r3
 8103290:	f000 faf6 	bl	8103880 <RCCEx_PLL2_Config>
 8103294:	4603      	mov	r3, r0
 8103296:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103298:	e00c      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	3324      	adds	r3, #36	; 0x24
 810329e:	2101      	movs	r1, #1
 81032a0:	4618      	mov	r0, r3
 81032a2:	f000 fb9f 	bl	81039e4 <RCCEx_PLL3_Config>
 81032a6:	4603      	mov	r3, r0
 81032a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81032aa:	e003      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81032ac:	2301      	movs	r3, #1
 81032ae:	75fb      	strb	r3, [r7, #23]
      break;
 81032b0:	e000      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81032b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032b4:	7dfb      	ldrb	r3, [r7, #23]
 81032b6:	2b00      	cmp	r3, #0
 81032b8:	d109      	bne.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81032ba:	4b77      	ldr	r3, [pc, #476]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032be:	f023 0207 	bic.w	r2, r3, #7
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81032c6:	4974      	ldr	r1, [pc, #464]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81032c8:	4313      	orrs	r3, r2
 81032ca:	654b      	str	r3, [r1, #84]	; 0x54
 81032cc:	e001      	b.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ce:	7dfb      	ldrb	r3, [r7, #23]
 81032d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	f003 0304 	and.w	r3, r3, #4
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d03a      	beq.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81032e4:	2b05      	cmp	r3, #5
 81032e6:	d821      	bhi.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x938>
 81032e8:	a201      	add	r2, pc, #4	; (adr r2, 81032f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032ee:	bf00      	nop
 81032f0:	08103333 	.word	0x08103333
 81032f4:	08103309 	.word	0x08103309
 81032f8:	0810331b 	.word	0x0810331b
 81032fc:	08103333 	.word	0x08103333
 8103300:	08103333 	.word	0x08103333
 8103304:	08103333 	.word	0x08103333
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	3304      	adds	r3, #4
 810330c:	2101      	movs	r1, #1
 810330e:	4618      	mov	r0, r3
 8103310:	f000 fab6 	bl	8103880 <RCCEx_PLL2_Config>
 8103314:	4603      	mov	r3, r0
 8103316:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103318:	e00c      	b.n	8103334 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	3324      	adds	r3, #36	; 0x24
 810331e:	2101      	movs	r1, #1
 8103320:	4618      	mov	r0, r3
 8103322:	f000 fb5f 	bl	81039e4 <RCCEx_PLL3_Config>
 8103326:	4603      	mov	r3, r0
 8103328:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810332a:	e003      	b.n	8103334 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810332c:	2301      	movs	r3, #1
 810332e:	75fb      	strb	r3, [r7, #23]
      break;
 8103330:	e000      	b.n	8103334 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8103332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103334:	7dfb      	ldrb	r3, [r7, #23]
 8103336:	2b00      	cmp	r3, #0
 8103338:	d10a      	bne.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810333a:	4b57      	ldr	r3, [pc, #348]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810333e:	f023 0207 	bic.w	r2, r3, #7
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103348:	4953      	ldr	r1, [pc, #332]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810334a:	4313      	orrs	r3, r2
 810334c:	658b      	str	r3, [r1, #88]	; 0x58
 810334e:	e001      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103350:	7dfb      	ldrb	r3, [r7, #23]
 8103352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	f003 0320 	and.w	r3, r3, #32
 810335c:	2b00      	cmp	r3, #0
 810335e:	d04b      	beq.n	81033f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810336a:	d02e      	beq.n	81033ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103370:	d828      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103376:	d02a      	beq.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810337c:	d822      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810337e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103382:	d026      	beq.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103388:	d81c      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810338a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810338e:	d010      	beq.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103394:	d816      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103396:	2b00      	cmp	r3, #0
 8103398:	d01d      	beq.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810339a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810339e:	d111      	bne.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	3304      	adds	r3, #4
 81033a4:	2100      	movs	r1, #0
 81033a6:	4618      	mov	r0, r3
 81033a8:	f000 fa6a 	bl	8103880 <RCCEx_PLL2_Config>
 81033ac:	4603      	mov	r3, r0
 81033ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81033b0:	e012      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	3324      	adds	r3, #36	; 0x24
 81033b6:	2102      	movs	r1, #2
 81033b8:	4618      	mov	r0, r3
 81033ba:	f000 fb13 	bl	81039e4 <RCCEx_PLL3_Config>
 81033be:	4603      	mov	r3, r0
 81033c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81033c2:	e009      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033c4:	2301      	movs	r3, #1
 81033c6:	75fb      	strb	r3, [r7, #23]
      break;
 81033c8:	e006      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81033ca:	bf00      	nop
 81033cc:	e004      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81033ce:	bf00      	nop
 81033d0:	e002      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81033d2:	bf00      	nop
 81033d4:	e000      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033d8:	7dfb      	ldrb	r3, [r7, #23]
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d10a      	bne.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81033de:	4b2e      	ldr	r3, [pc, #184]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81033ec:	492a      	ldr	r1, [pc, #168]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81033ee:	4313      	orrs	r3, r2
 81033f0:	654b      	str	r3, [r1, #84]	; 0x54
 81033f2:	e001      	b.n	81033f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033f4:	7dfb      	ldrb	r3, [r7, #23]
 81033f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103400:	2b00      	cmp	r3, #0
 8103402:	d04d      	beq.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810340a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810340e:	d02e      	beq.n	810346e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103410:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103414:	d828      	bhi.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810341a:	d02a      	beq.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103420:	d822      	bhi.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103426:	d026      	beq.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810342c:	d81c      	bhi.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810342e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103432:	d010      	beq.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8103434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103438:	d816      	bhi.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810343a:	2b00      	cmp	r3, #0
 810343c:	d01d      	beq.n	810347a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103442:	d111      	bne.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	3304      	adds	r3, #4
 8103448:	2100      	movs	r1, #0
 810344a:	4618      	mov	r0, r3
 810344c:	f000 fa18 	bl	8103880 <RCCEx_PLL2_Config>
 8103450:	4603      	mov	r3, r0
 8103452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103454:	e012      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	3324      	adds	r3, #36	; 0x24
 810345a:	2102      	movs	r1, #2
 810345c:	4618      	mov	r0, r3
 810345e:	f000 fac1 	bl	81039e4 <RCCEx_PLL3_Config>
 8103462:	4603      	mov	r3, r0
 8103464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103466:	e009      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103468:	2301      	movs	r3, #1
 810346a:	75fb      	strb	r3, [r7, #23]
      break;
 810346c:	e006      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810346e:	bf00      	nop
 8103470:	e004      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103472:	bf00      	nop
 8103474:	e002      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103476:	bf00      	nop
 8103478:	e000      	b.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810347a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810347c:	7dfb      	ldrb	r3, [r7, #23]
 810347e:	2b00      	cmp	r3, #0
 8103480:	d10c      	bne.n	810349c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103482:	4b05      	ldr	r3, [pc, #20]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103486:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103490:	4901      	ldr	r1, [pc, #4]	; (8103498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103492:	4313      	orrs	r3, r2
 8103494:	658b      	str	r3, [r1, #88]	; 0x58
 8103496:	e003      	b.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8103498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810349c:	7dfb      	ldrb	r3, [r7, #23]
 810349e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	d04b      	beq.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81034b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81034b6:	d02e      	beq.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81034b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81034bc:	d828      	bhi.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81034be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81034c2:	d02a      	beq.n	810351a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81034c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81034c8:	d822      	bhi.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81034ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81034ce:	d026      	beq.n	810351e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81034d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81034d4:	d81c      	bhi.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81034d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81034da:	d010      	beq.n	81034fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81034dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81034e0:	d816      	bhi.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d01d      	beq.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81034e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81034ea:	d111      	bne.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	3304      	adds	r3, #4
 81034f0:	2100      	movs	r1, #0
 81034f2:	4618      	mov	r0, r3
 81034f4:	f000 f9c4 	bl	8103880 <RCCEx_PLL2_Config>
 81034f8:	4603      	mov	r3, r0
 81034fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81034fc:	e012      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	3324      	adds	r3, #36	; 0x24
 8103502:	2102      	movs	r1, #2
 8103504:	4618      	mov	r0, r3
 8103506:	f000 fa6d 	bl	81039e4 <RCCEx_PLL3_Config>
 810350a:	4603      	mov	r3, r0
 810350c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810350e:	e009      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103510:	2301      	movs	r3, #1
 8103512:	75fb      	strb	r3, [r7, #23]
      break;
 8103514:	e006      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103516:	bf00      	nop
 8103518:	e004      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810351a:	bf00      	nop
 810351c:	e002      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810351e:	bf00      	nop
 8103520:	e000      	b.n	8103524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103524:	7dfb      	ldrb	r3, [r7, #23]
 8103526:	2b00      	cmp	r3, #0
 8103528:	d10a      	bne.n	8103540 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810352a:	4b9d      	ldr	r3, [pc, #628]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810352e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103538:	4999      	ldr	r1, [pc, #612]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810353a:	4313      	orrs	r3, r2
 810353c:	658b      	str	r3, [r1, #88]	; 0x58
 810353e:	e001      	b.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103540:	7dfb      	ldrb	r3, [r7, #23]
 8103542:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	f003 0308 	and.w	r3, r3, #8
 810354c:	2b00      	cmp	r3, #0
 810354e:	d01a      	beq.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810355a:	d10a      	bne.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	3324      	adds	r3, #36	; 0x24
 8103560:	2102      	movs	r1, #2
 8103562:	4618      	mov	r0, r3
 8103564:	f000 fa3e 	bl	81039e4 <RCCEx_PLL3_Config>
 8103568:	4603      	mov	r3, r0
 810356a:	2b00      	cmp	r3, #0
 810356c:	d001      	beq.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810356e:	2301      	movs	r3, #1
 8103570:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103572:	4b8b      	ldr	r3, [pc, #556]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103580:	4987      	ldr	r1, [pc, #540]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103582:	4313      	orrs	r3, r2
 8103584:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	f003 0310 	and.w	r3, r3, #16
 810358e:	2b00      	cmp	r3, #0
 8103590:	d01a      	beq.n	81035c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810359c:	d10a      	bne.n	81035b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	3324      	adds	r3, #36	; 0x24
 81035a2:	2102      	movs	r1, #2
 81035a4:	4618      	mov	r0, r3
 81035a6:	f000 fa1d 	bl	81039e4 <RCCEx_PLL3_Config>
 81035aa:	4603      	mov	r3, r0
 81035ac:	2b00      	cmp	r3, #0
 81035ae:	d001      	beq.n	81035b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81035b0:	2301      	movs	r3, #1
 81035b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81035b4:	4b7a      	ldr	r3, [pc, #488]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81035c2:	4977      	ldr	r1, [pc, #476]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81035c4:	4313      	orrs	r3, r2
 81035c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81035d0:	2b00      	cmp	r3, #0
 81035d2:	d034      	beq.n	810363e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81035da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035de:	d01d      	beq.n	810361c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81035e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035e4:	d817      	bhi.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d003      	beq.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81035ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81035ee:	d009      	beq.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81035f0:	e011      	b.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	3304      	adds	r3, #4
 81035f6:	2100      	movs	r1, #0
 81035f8:	4618      	mov	r0, r3
 81035fa:	f000 f941 	bl	8103880 <RCCEx_PLL2_Config>
 81035fe:	4603      	mov	r3, r0
 8103600:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103602:	e00c      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	3324      	adds	r3, #36	; 0x24
 8103608:	2102      	movs	r1, #2
 810360a:	4618      	mov	r0, r3
 810360c:	f000 f9ea 	bl	81039e4 <RCCEx_PLL3_Config>
 8103610:	4603      	mov	r3, r0
 8103612:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103614:	e003      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103616:	2301      	movs	r3, #1
 8103618:	75fb      	strb	r3, [r7, #23]
      break;
 810361a:	e000      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810361e:	7dfb      	ldrb	r3, [r7, #23]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d10a      	bne.n	810363a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103624:	4b5e      	ldr	r3, [pc, #376]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103632:	495b      	ldr	r1, [pc, #364]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103634:	4313      	orrs	r3, r2
 8103636:	658b      	str	r3, [r1, #88]	; 0x58
 8103638:	e001      	b.n	810363e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810363a:	7dfb      	ldrb	r3, [r7, #23]
 810363c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103646:	2b00      	cmp	r3, #0
 8103648:	d033      	beq.n	81036b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103654:	d01c      	beq.n	8103690 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8103656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810365a:	d816      	bhi.n	810368a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 810365c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103660:	d003      	beq.n	810366a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8103662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103666:	d007      	beq.n	8103678 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8103668:	e00f      	b.n	810368a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810366a:	4b4d      	ldr	r3, [pc, #308]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810366e:	4a4c      	ldr	r2, [pc, #304]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103676:	e00c      	b.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	3324      	adds	r3, #36	; 0x24
 810367c:	2101      	movs	r1, #1
 810367e:	4618      	mov	r0, r3
 8103680:	f000 f9b0 	bl	81039e4 <RCCEx_PLL3_Config>
 8103684:	4603      	mov	r3, r0
 8103686:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103688:	e003      	b.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810368a:	2301      	movs	r3, #1
 810368c:	75fb      	strb	r3, [r7, #23]
      break;
 810368e:	e000      	b.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8103690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103692:	7dfb      	ldrb	r3, [r7, #23]
 8103694:	2b00      	cmp	r3, #0
 8103696:	d10a      	bne.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103698:	4b41      	ldr	r3, [pc, #260]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81036a6:	493e      	ldr	r1, [pc, #248]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81036a8:	4313      	orrs	r3, r2
 81036aa:	654b      	str	r3, [r1, #84]	; 0x54
 81036ac:	e001      	b.n	81036b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036ae:	7dfb      	ldrb	r3, [r7, #23]
 81036b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81036ba:	2b00      	cmp	r3, #0
 81036bc:	d029      	beq.n	8103712 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d003      	beq.n	81036ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81036ca:	d007      	beq.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81036cc:	e00f      	b.n	81036ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036ce:	4b34      	ldr	r3, [pc, #208]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036d2:	4a33      	ldr	r2, [pc, #204]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81036da:	e00b      	b.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	3304      	adds	r3, #4
 81036e0:	2102      	movs	r1, #2
 81036e2:	4618      	mov	r0, r3
 81036e4:	f000 f8cc 	bl	8103880 <RCCEx_PLL2_Config>
 81036e8:	4603      	mov	r3, r0
 81036ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81036ec:	e002      	b.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81036ee:	2301      	movs	r3, #1
 81036f0:	75fb      	strb	r3, [r7, #23]
      break;
 81036f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036f4:	7dfb      	ldrb	r3, [r7, #23]
 81036f6:	2b00      	cmp	r3, #0
 81036f8:	d109      	bne.n	810370e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81036fa:	4b29      	ldr	r3, [pc, #164]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103706:	4926      	ldr	r1, [pc, #152]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103708:	4313      	orrs	r3, r2
 810370a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810370c:	e001      	b.n	8103712 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810370e:	7dfb      	ldrb	r3, [r7, #23]
 8103710:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810371a:	2b00      	cmp	r3, #0
 810371c:	d00a      	beq.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	3324      	adds	r3, #36	; 0x24
 8103722:	2102      	movs	r1, #2
 8103724:	4618      	mov	r0, r3
 8103726:	f000 f95d 	bl	81039e4 <RCCEx_PLL3_Config>
 810372a:	4603      	mov	r3, r0
 810372c:	2b00      	cmp	r3, #0
 810372e:	d001      	beq.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103730:	2301      	movs	r3, #1
 8103732:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810373c:	2b00      	cmp	r3, #0
 810373e:	d033      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103748:	d017      	beq.n	810377a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810374a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810374e:	d811      	bhi.n	8103774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103754:	d013      	beq.n	810377e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810375a:	d80b      	bhi.n	8103774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810375c:	2b00      	cmp	r3, #0
 810375e:	d010      	beq.n	8103782 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8103760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103764:	d106      	bne.n	8103774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103766:	4b0e      	ldr	r3, [pc, #56]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810376a:	4a0d      	ldr	r2, [pc, #52]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103772:	e007      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103774:	2301      	movs	r3, #1
 8103776:	75fb      	strb	r3, [r7, #23]
      break;
 8103778:	e004      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810377a:	bf00      	nop
 810377c:	e002      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810377e:	bf00      	nop
 8103780:	e000      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103784:	7dfb      	ldrb	r3, [r7, #23]
 8103786:	2b00      	cmp	r3, #0
 8103788:	d10c      	bne.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810378a:	4b05      	ldr	r3, [pc, #20]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810378e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103796:	4902      	ldr	r1, [pc, #8]	; (81037a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103798:	4313      	orrs	r3, r2
 810379a:	654b      	str	r3, [r1, #84]	; 0x54
 810379c:	e004      	b.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810379e:	bf00      	nop
 81037a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037a4:	7dfb      	ldrb	r3, [r7, #23]
 81037a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d008      	beq.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81037b4:	4b31      	ldr	r3, [pc, #196]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81037c0:	492e      	ldr	r1, [pc, #184]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81037c2:	4313      	orrs	r3, r2
 81037c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81037ce:	2b00      	cmp	r3, #0
 81037d0:	d009      	beq.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81037d2:	4b2a      	ldr	r3, [pc, #168]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81037d4:	691b      	ldr	r3, [r3, #16]
 81037d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81037e0:	4926      	ldr	r1, [pc, #152]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81037e2:	4313      	orrs	r3, r2
 81037e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d008      	beq.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81037f2:	4b22      	ldr	r3, [pc, #136]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037fe:	491f      	ldr	r1, [pc, #124]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103800:	4313      	orrs	r3, r2
 8103802:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810380c:	2b00      	cmp	r3, #0
 810380e:	d00d      	beq.n	810382c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103810:	4b1a      	ldr	r3, [pc, #104]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103812:	691b      	ldr	r3, [r3, #16]
 8103814:	4a19      	ldr	r2, [pc, #100]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810381a:	6113      	str	r3, [r2, #16]
 810381c:	4b17      	ldr	r3, [pc, #92]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810381e:	691a      	ldr	r2, [r3, #16]
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103826:	4915      	ldr	r1, [pc, #84]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103828:	4313      	orrs	r3, r2
 810382a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	2b00      	cmp	r3, #0
 8103832:	da08      	bge.n	8103846 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103834:	4b11      	ldr	r3, [pc, #68]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103840:	490e      	ldr	r1, [pc, #56]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103842:	4313      	orrs	r3, r2
 8103844:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810384e:	2b00      	cmp	r3, #0
 8103850:	d009      	beq.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103852:	4b0a      	ldr	r3, [pc, #40]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103860:	4906      	ldr	r1, [pc, #24]	; (810387c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103862:	4313      	orrs	r3, r2
 8103864:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103866:	7dbb      	ldrb	r3, [r7, #22]
 8103868:	2b00      	cmp	r3, #0
 810386a:	d101      	bne.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 810386c:	2300      	movs	r3, #0
 810386e:	e000      	b.n	8103872 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8103870:	2301      	movs	r3, #1
}
 8103872:	4618      	mov	r0, r3
 8103874:	3718      	adds	r7, #24
 8103876:	46bd      	mov	sp, r7
 8103878:	bd80      	pop	{r7, pc}
 810387a:	bf00      	nop
 810387c:	58024400 	.word	0x58024400

08103880 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103880:	b580      	push	{r7, lr}
 8103882:	b084      	sub	sp, #16
 8103884:	af00      	add	r7, sp, #0
 8103886:	6078      	str	r0, [r7, #4]
 8103888:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810388a:	2300      	movs	r3, #0
 810388c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810388e:	4b54      	ldr	r3, [pc, #336]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103892:	f003 0303 	and.w	r3, r3, #3
 8103896:	2b03      	cmp	r3, #3
 8103898:	d101      	bne.n	810389e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810389a:	2301      	movs	r3, #1
 810389c:	e09b      	b.n	81039d6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810389e:	4b50      	ldr	r3, [pc, #320]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a4f      	ldr	r2, [pc, #316]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81038a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81038a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81038aa:	f7fd fe4b 	bl	8101544 <HAL_GetTick>
 81038ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81038b0:	e008      	b.n	81038c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81038b2:	f7fd fe47 	bl	8101544 <HAL_GetTick>
 81038b6:	4602      	mov	r2, r0
 81038b8:	68bb      	ldr	r3, [r7, #8]
 81038ba:	1ad3      	subs	r3, r2, r3
 81038bc:	2b02      	cmp	r3, #2
 81038be:	d901      	bls.n	81038c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81038c0:	2303      	movs	r3, #3
 81038c2:	e088      	b.n	81039d6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81038c4:	4b46      	ldr	r3, [pc, #280]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81038cc:	2b00      	cmp	r3, #0
 81038ce:	d1f0      	bne.n	81038b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81038d0:	4b43      	ldr	r3, [pc, #268]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	031b      	lsls	r3, r3, #12
 81038de:	4940      	ldr	r1, [pc, #256]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81038e0:	4313      	orrs	r3, r2
 81038e2:	628b      	str	r3, [r1, #40]	; 0x28
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	685b      	ldr	r3, [r3, #4]
 81038e8:	3b01      	subs	r3, #1
 81038ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	689b      	ldr	r3, [r3, #8]
 81038f2:	3b01      	subs	r3, #1
 81038f4:	025b      	lsls	r3, r3, #9
 81038f6:	b29b      	uxth	r3, r3
 81038f8:	431a      	orrs	r2, r3
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	68db      	ldr	r3, [r3, #12]
 81038fe:	3b01      	subs	r3, #1
 8103900:	041b      	lsls	r3, r3, #16
 8103902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103906:	431a      	orrs	r2, r3
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	691b      	ldr	r3, [r3, #16]
 810390c:	3b01      	subs	r3, #1
 810390e:	061b      	lsls	r3, r3, #24
 8103910:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103914:	4932      	ldr	r1, [pc, #200]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103916:	4313      	orrs	r3, r2
 8103918:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810391a:	4b31      	ldr	r3, [pc, #196]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810391e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	695b      	ldr	r3, [r3, #20]
 8103926:	492e      	ldr	r1, [pc, #184]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103928:	4313      	orrs	r3, r2
 810392a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810392c:	4b2c      	ldr	r3, [pc, #176]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103930:	f023 0220 	bic.w	r2, r3, #32
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	699b      	ldr	r3, [r3, #24]
 8103938:	4929      	ldr	r1, [pc, #164]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810393a:	4313      	orrs	r3, r2
 810393c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810393e:	4b28      	ldr	r3, [pc, #160]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103942:	4a27      	ldr	r2, [pc, #156]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103944:	f023 0310 	bic.w	r3, r3, #16
 8103948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810394a:	4b25      	ldr	r3, [pc, #148]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810394e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103952:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103956:	687a      	ldr	r2, [r7, #4]
 8103958:	69d2      	ldr	r2, [r2, #28]
 810395a:	00d2      	lsls	r2, r2, #3
 810395c:	4920      	ldr	r1, [pc, #128]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810395e:	4313      	orrs	r3, r2
 8103960:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103962:	4b1f      	ldr	r3, [pc, #124]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103966:	4a1e      	ldr	r2, [pc, #120]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103968:	f043 0310 	orr.w	r3, r3, #16
 810396c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810396e:	683b      	ldr	r3, [r7, #0]
 8103970:	2b00      	cmp	r3, #0
 8103972:	d106      	bne.n	8103982 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103974:	4b1a      	ldr	r3, [pc, #104]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103978:	4a19      	ldr	r2, [pc, #100]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810397a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810397e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103980:	e00f      	b.n	81039a2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103982:	683b      	ldr	r3, [r7, #0]
 8103984:	2b01      	cmp	r3, #1
 8103986:	d106      	bne.n	8103996 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103988:	4b15      	ldr	r3, [pc, #84]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810398c:	4a14      	ldr	r2, [pc, #80]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103994:	e005      	b.n	81039a2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103996:	4b12      	ldr	r3, [pc, #72]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 8103998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810399a:	4a11      	ldr	r2, [pc, #68]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 810399c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81039a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81039a2:	4b0f      	ldr	r3, [pc, #60]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a0e      	ldr	r2, [pc, #56]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81039a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81039ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039ae:	f7fd fdc9 	bl	8101544 <HAL_GetTick>
 81039b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81039b4:	e008      	b.n	81039c8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81039b6:	f7fd fdc5 	bl	8101544 <HAL_GetTick>
 81039ba:	4602      	mov	r2, r0
 81039bc:	68bb      	ldr	r3, [r7, #8]
 81039be:	1ad3      	subs	r3, r2, r3
 81039c0:	2b02      	cmp	r3, #2
 81039c2:	d901      	bls.n	81039c8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81039c4:	2303      	movs	r3, #3
 81039c6:	e006      	b.n	81039d6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81039c8:	4b05      	ldr	r3, [pc, #20]	; (81039e0 <RCCEx_PLL2_Config+0x160>)
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81039d0:	2b00      	cmp	r3, #0
 81039d2:	d0f0      	beq.n	81039b6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81039d6:	4618      	mov	r0, r3
 81039d8:	3710      	adds	r7, #16
 81039da:	46bd      	mov	sp, r7
 81039dc:	bd80      	pop	{r7, pc}
 81039de:	bf00      	nop
 81039e0:	58024400 	.word	0x58024400

081039e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81039e4:	b580      	push	{r7, lr}
 81039e6:	b084      	sub	sp, #16
 81039e8:	af00      	add	r7, sp, #0
 81039ea:	6078      	str	r0, [r7, #4]
 81039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81039ee:	2300      	movs	r3, #0
 81039f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81039f2:	4b54      	ldr	r3, [pc, #336]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 81039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039f6:	f003 0303 	and.w	r3, r3, #3
 81039fa:	2b03      	cmp	r3, #3
 81039fc:	d101      	bne.n	8103a02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81039fe:	2301      	movs	r3, #1
 8103a00:	e09b      	b.n	8103b3a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103a02:	4b50      	ldr	r3, [pc, #320]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	4a4f      	ldr	r2, [pc, #316]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103a0e:	f7fd fd99 	bl	8101544 <HAL_GetTick>
 8103a12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103a14:	e008      	b.n	8103a28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103a16:	f7fd fd95 	bl	8101544 <HAL_GetTick>
 8103a1a:	4602      	mov	r2, r0
 8103a1c:	68bb      	ldr	r3, [r7, #8]
 8103a1e:	1ad3      	subs	r3, r2, r3
 8103a20:	2b02      	cmp	r3, #2
 8103a22:	d901      	bls.n	8103a28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103a24:	2303      	movs	r3, #3
 8103a26:	e088      	b.n	8103b3a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103a28:	4b46      	ldr	r3, [pc, #280]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d1f0      	bne.n	8103a16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103a34:	4b43      	ldr	r3, [pc, #268]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	051b      	lsls	r3, r3, #20
 8103a42:	4940      	ldr	r1, [pc, #256]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a44:	4313      	orrs	r3, r2
 8103a46:	628b      	str	r3, [r1, #40]	; 0x28
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	685b      	ldr	r3, [r3, #4]
 8103a4c:	3b01      	subs	r3, #1
 8103a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	689b      	ldr	r3, [r3, #8]
 8103a56:	3b01      	subs	r3, #1
 8103a58:	025b      	lsls	r3, r3, #9
 8103a5a:	b29b      	uxth	r3, r3
 8103a5c:	431a      	orrs	r2, r3
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	68db      	ldr	r3, [r3, #12]
 8103a62:	3b01      	subs	r3, #1
 8103a64:	041b      	lsls	r3, r3, #16
 8103a66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103a6a:	431a      	orrs	r2, r3
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	691b      	ldr	r3, [r3, #16]
 8103a70:	3b01      	subs	r3, #1
 8103a72:	061b      	lsls	r3, r3, #24
 8103a74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103a78:	4932      	ldr	r1, [pc, #200]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a7a:	4313      	orrs	r3, r2
 8103a7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103a7e:	4b31      	ldr	r3, [pc, #196]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	695b      	ldr	r3, [r3, #20]
 8103a8a:	492e      	ldr	r1, [pc, #184]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a8c:	4313      	orrs	r3, r2
 8103a8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103a90:	4b2c      	ldr	r3, [pc, #176]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	699b      	ldr	r3, [r3, #24]
 8103a9c:	4929      	ldr	r1, [pc, #164]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103a9e:	4313      	orrs	r3, r2
 8103aa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103aa2:	4b28      	ldr	r3, [pc, #160]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aa6:	4a27      	ldr	r2, [pc, #156]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103aae:	4b25      	ldr	r3, [pc, #148]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103ab6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103aba:	687a      	ldr	r2, [r7, #4]
 8103abc:	69d2      	ldr	r2, [r2, #28]
 8103abe:	00d2      	lsls	r2, r2, #3
 8103ac0:	4920      	ldr	r1, [pc, #128]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103ac2:	4313      	orrs	r3, r2
 8103ac4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103ac6:	4b1f      	ldr	r3, [pc, #124]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aca:	4a1e      	ldr	r2, [pc, #120]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103ad2:	683b      	ldr	r3, [r7, #0]
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d106      	bne.n	8103ae6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103ad8:	4b1a      	ldr	r3, [pc, #104]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103adc:	4a19      	ldr	r2, [pc, #100]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103ade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ae4:	e00f      	b.n	8103b06 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103ae6:	683b      	ldr	r3, [r7, #0]
 8103ae8:	2b01      	cmp	r3, #1
 8103aea:	d106      	bne.n	8103afa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103aec:	4b15      	ldr	r3, [pc, #84]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103af0:	4a14      	ldr	r2, [pc, #80]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103af2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103af8:	e005      	b.n	8103b06 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103afa:	4b12      	ldr	r3, [pc, #72]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103afe:	4a11      	ldr	r2, [pc, #68]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103b04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103b06:	4b0f      	ldr	r3, [pc, #60]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4a0e      	ldr	r2, [pc, #56]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103b12:	f7fd fd17 	bl	8101544 <HAL_GetTick>
 8103b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103b18:	e008      	b.n	8103b2c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103b1a:	f7fd fd13 	bl	8101544 <HAL_GetTick>
 8103b1e:	4602      	mov	r2, r0
 8103b20:	68bb      	ldr	r3, [r7, #8]
 8103b22:	1ad3      	subs	r3, r2, r3
 8103b24:	2b02      	cmp	r3, #2
 8103b26:	d901      	bls.n	8103b2c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103b28:	2303      	movs	r3, #3
 8103b2a:	e006      	b.n	8103b3a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103b2c:	4b05      	ldr	r3, [pc, #20]	; (8103b44 <RCCEx_PLL3_Config+0x160>)
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d0f0      	beq.n	8103b1a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	3710      	adds	r7, #16
 8103b3e:	46bd      	mov	sp, r7
 8103b40:	bd80      	pop	{r7, pc}
 8103b42:	bf00      	nop
 8103b44:	58024400 	.word	0x58024400

08103b48 <__errno>:
 8103b48:	4b01      	ldr	r3, [pc, #4]	; (8103b50 <__errno+0x8>)
 8103b4a:	6818      	ldr	r0, [r3, #0]
 8103b4c:	4770      	bx	lr
 8103b4e:	bf00      	nop
 8103b50:	10000018 	.word	0x10000018

08103b54 <__libc_init_array>:
 8103b54:	b570      	push	{r4, r5, r6, lr}
 8103b56:	4d0d      	ldr	r5, [pc, #52]	; (8103b8c <__libc_init_array+0x38>)
 8103b58:	4c0d      	ldr	r4, [pc, #52]	; (8103b90 <__libc_init_array+0x3c>)
 8103b5a:	1b64      	subs	r4, r4, r5
 8103b5c:	10a4      	asrs	r4, r4, #2
 8103b5e:	2600      	movs	r6, #0
 8103b60:	42a6      	cmp	r6, r4
 8103b62:	d109      	bne.n	8103b78 <__libc_init_array+0x24>
 8103b64:	4d0b      	ldr	r5, [pc, #44]	; (8103b94 <__libc_init_array+0x40>)
 8103b66:	4c0c      	ldr	r4, [pc, #48]	; (8103b98 <__libc_init_array+0x44>)
 8103b68:	f004 fcaa 	bl	81084c0 <_init>
 8103b6c:	1b64      	subs	r4, r4, r5
 8103b6e:	10a4      	asrs	r4, r4, #2
 8103b70:	2600      	movs	r6, #0
 8103b72:	42a6      	cmp	r6, r4
 8103b74:	d105      	bne.n	8103b82 <__libc_init_array+0x2e>
 8103b76:	bd70      	pop	{r4, r5, r6, pc}
 8103b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8103b7c:	4798      	blx	r3
 8103b7e:	3601      	adds	r6, #1
 8103b80:	e7ee      	b.n	8103b60 <__libc_init_array+0xc>
 8103b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8103b86:	4798      	blx	r3
 8103b88:	3601      	adds	r6, #1
 8103b8a:	e7f2      	b.n	8103b72 <__libc_init_array+0x1e>
 8103b8c:	08108a14 	.word	0x08108a14
 8103b90:	08108a14 	.word	0x08108a14
 8103b94:	08108a14 	.word	0x08108a14
 8103b98:	08108a18 	.word	0x08108a18

08103b9c <memcpy>:
 8103b9c:	440a      	add	r2, r1
 8103b9e:	4291      	cmp	r1, r2
 8103ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8103ba4:	d100      	bne.n	8103ba8 <memcpy+0xc>
 8103ba6:	4770      	bx	lr
 8103ba8:	b510      	push	{r4, lr}
 8103baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8103bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8103bb2:	4291      	cmp	r1, r2
 8103bb4:	d1f9      	bne.n	8103baa <memcpy+0xe>
 8103bb6:	bd10      	pop	{r4, pc}

08103bb8 <memset>:
 8103bb8:	4402      	add	r2, r0
 8103bba:	4603      	mov	r3, r0
 8103bbc:	4293      	cmp	r3, r2
 8103bbe:	d100      	bne.n	8103bc2 <memset+0xa>
 8103bc0:	4770      	bx	lr
 8103bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8103bc6:	e7f9      	b.n	8103bbc <memset+0x4>

08103bc8 <__cvt>:
 8103bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8103bcc:	ec55 4b10 	vmov	r4, r5, d0
 8103bd0:	2d00      	cmp	r5, #0
 8103bd2:	460e      	mov	r6, r1
 8103bd4:	4619      	mov	r1, r3
 8103bd6:	462b      	mov	r3, r5
 8103bd8:	bfbb      	ittet	lt
 8103bda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8103bde:	461d      	movlt	r5, r3
 8103be0:	2300      	movge	r3, #0
 8103be2:	232d      	movlt	r3, #45	; 0x2d
 8103be4:	700b      	strb	r3, [r1, #0]
 8103be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8103be8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8103bec:	4691      	mov	r9, r2
 8103bee:	f023 0820 	bic.w	r8, r3, #32
 8103bf2:	bfbc      	itt	lt
 8103bf4:	4622      	movlt	r2, r4
 8103bf6:	4614      	movlt	r4, r2
 8103bf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8103bfc:	d005      	beq.n	8103c0a <__cvt+0x42>
 8103bfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8103c02:	d100      	bne.n	8103c06 <__cvt+0x3e>
 8103c04:	3601      	adds	r6, #1
 8103c06:	2102      	movs	r1, #2
 8103c08:	e000      	b.n	8103c0c <__cvt+0x44>
 8103c0a:	2103      	movs	r1, #3
 8103c0c:	ab03      	add	r3, sp, #12
 8103c0e:	9301      	str	r3, [sp, #4]
 8103c10:	ab02      	add	r3, sp, #8
 8103c12:	9300      	str	r3, [sp, #0]
 8103c14:	ec45 4b10 	vmov	d0, r4, r5
 8103c18:	4653      	mov	r3, sl
 8103c1a:	4632      	mov	r2, r6
 8103c1c:	f001 fdc4 	bl	81057a8 <_dtoa_r>
 8103c20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8103c24:	4607      	mov	r7, r0
 8103c26:	d102      	bne.n	8103c2e <__cvt+0x66>
 8103c28:	f019 0f01 	tst.w	r9, #1
 8103c2c:	d022      	beq.n	8103c74 <__cvt+0xac>
 8103c2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8103c32:	eb07 0906 	add.w	r9, r7, r6
 8103c36:	d110      	bne.n	8103c5a <__cvt+0x92>
 8103c38:	783b      	ldrb	r3, [r7, #0]
 8103c3a:	2b30      	cmp	r3, #48	; 0x30
 8103c3c:	d10a      	bne.n	8103c54 <__cvt+0x8c>
 8103c3e:	2200      	movs	r2, #0
 8103c40:	2300      	movs	r3, #0
 8103c42:	4620      	mov	r0, r4
 8103c44:	4629      	mov	r1, r5
 8103c46:	f7fc ffc7 	bl	8100bd8 <__aeabi_dcmpeq>
 8103c4a:	b918      	cbnz	r0, 8103c54 <__cvt+0x8c>
 8103c4c:	f1c6 0601 	rsb	r6, r6, #1
 8103c50:	f8ca 6000 	str.w	r6, [sl]
 8103c54:	f8da 3000 	ldr.w	r3, [sl]
 8103c58:	4499      	add	r9, r3
 8103c5a:	2200      	movs	r2, #0
 8103c5c:	2300      	movs	r3, #0
 8103c5e:	4620      	mov	r0, r4
 8103c60:	4629      	mov	r1, r5
 8103c62:	f7fc ffb9 	bl	8100bd8 <__aeabi_dcmpeq>
 8103c66:	b108      	cbz	r0, 8103c6c <__cvt+0xa4>
 8103c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8103c6c:	2230      	movs	r2, #48	; 0x30
 8103c6e:	9b03      	ldr	r3, [sp, #12]
 8103c70:	454b      	cmp	r3, r9
 8103c72:	d307      	bcc.n	8103c84 <__cvt+0xbc>
 8103c74:	9b03      	ldr	r3, [sp, #12]
 8103c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8103c78:	1bdb      	subs	r3, r3, r7
 8103c7a:	4638      	mov	r0, r7
 8103c7c:	6013      	str	r3, [r2, #0]
 8103c7e:	b004      	add	sp, #16
 8103c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103c84:	1c59      	adds	r1, r3, #1
 8103c86:	9103      	str	r1, [sp, #12]
 8103c88:	701a      	strb	r2, [r3, #0]
 8103c8a:	e7f0      	b.n	8103c6e <__cvt+0xa6>

08103c8c <__exponent>:
 8103c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8103c8e:	4603      	mov	r3, r0
 8103c90:	2900      	cmp	r1, #0
 8103c92:	bfb8      	it	lt
 8103c94:	4249      	neglt	r1, r1
 8103c96:	f803 2b02 	strb.w	r2, [r3], #2
 8103c9a:	bfb4      	ite	lt
 8103c9c:	222d      	movlt	r2, #45	; 0x2d
 8103c9e:	222b      	movge	r2, #43	; 0x2b
 8103ca0:	2909      	cmp	r1, #9
 8103ca2:	7042      	strb	r2, [r0, #1]
 8103ca4:	dd2a      	ble.n	8103cfc <__exponent+0x70>
 8103ca6:	f10d 0407 	add.w	r4, sp, #7
 8103caa:	46a4      	mov	ip, r4
 8103cac:	270a      	movs	r7, #10
 8103cae:	46a6      	mov	lr, r4
 8103cb0:	460a      	mov	r2, r1
 8103cb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8103cb6:	fb07 1516 	mls	r5, r7, r6, r1
 8103cba:	3530      	adds	r5, #48	; 0x30
 8103cbc:	2a63      	cmp	r2, #99	; 0x63
 8103cbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8103cc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8103cc6:	4631      	mov	r1, r6
 8103cc8:	dcf1      	bgt.n	8103cae <__exponent+0x22>
 8103cca:	3130      	adds	r1, #48	; 0x30
 8103ccc:	f1ae 0502 	sub.w	r5, lr, #2
 8103cd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8103cd4:	1c44      	adds	r4, r0, #1
 8103cd6:	4629      	mov	r1, r5
 8103cd8:	4561      	cmp	r1, ip
 8103cda:	d30a      	bcc.n	8103cf2 <__exponent+0x66>
 8103cdc:	f10d 0209 	add.w	r2, sp, #9
 8103ce0:	eba2 020e 	sub.w	r2, r2, lr
 8103ce4:	4565      	cmp	r5, ip
 8103ce6:	bf88      	it	hi
 8103ce8:	2200      	movhi	r2, #0
 8103cea:	4413      	add	r3, r2
 8103cec:	1a18      	subs	r0, r3, r0
 8103cee:	b003      	add	sp, #12
 8103cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8103cf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8103cfa:	e7ed      	b.n	8103cd8 <__exponent+0x4c>
 8103cfc:	2330      	movs	r3, #48	; 0x30
 8103cfe:	3130      	adds	r1, #48	; 0x30
 8103d00:	7083      	strb	r3, [r0, #2]
 8103d02:	70c1      	strb	r1, [r0, #3]
 8103d04:	1d03      	adds	r3, r0, #4
 8103d06:	e7f1      	b.n	8103cec <__exponent+0x60>

08103d08 <_printf_float>:
 8103d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103d0c:	ed2d 8b02 	vpush	{d8}
 8103d10:	b08d      	sub	sp, #52	; 0x34
 8103d12:	460c      	mov	r4, r1
 8103d14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8103d18:	4616      	mov	r6, r2
 8103d1a:	461f      	mov	r7, r3
 8103d1c:	4605      	mov	r5, r0
 8103d1e:	f002 ff95 	bl	8106c4c <_localeconv_r>
 8103d22:	f8d0 a000 	ldr.w	sl, [r0]
 8103d26:	4650      	mov	r0, sl
 8103d28:	f7fc fada 	bl	81002e0 <strlen>
 8103d2c:	2300      	movs	r3, #0
 8103d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8103d30:	6823      	ldr	r3, [r4, #0]
 8103d32:	9305      	str	r3, [sp, #20]
 8103d34:	f8d8 3000 	ldr.w	r3, [r8]
 8103d38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8103d3c:	3307      	adds	r3, #7
 8103d3e:	f023 0307 	bic.w	r3, r3, #7
 8103d42:	f103 0208 	add.w	r2, r3, #8
 8103d46:	f8c8 2000 	str.w	r2, [r8]
 8103d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8103d52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8103d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8103d5a:	9307      	str	r3, [sp, #28]
 8103d5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8103d60:	ee08 0a10 	vmov	s16, r0
 8103d64:	4b9f      	ldr	r3, [pc, #636]	; (8103fe4 <_printf_float+0x2dc>)
 8103d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8103d6e:	f7fc ff65 	bl	8100c3c <__aeabi_dcmpun>
 8103d72:	bb88      	cbnz	r0, 8103dd8 <_printf_float+0xd0>
 8103d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103d78:	4b9a      	ldr	r3, [pc, #616]	; (8103fe4 <_printf_float+0x2dc>)
 8103d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8103d7e:	f7fc ff3f 	bl	8100c00 <__aeabi_dcmple>
 8103d82:	bb48      	cbnz	r0, 8103dd8 <_printf_float+0xd0>
 8103d84:	2200      	movs	r2, #0
 8103d86:	2300      	movs	r3, #0
 8103d88:	4640      	mov	r0, r8
 8103d8a:	4649      	mov	r1, r9
 8103d8c:	f7fc ff2e 	bl	8100bec <__aeabi_dcmplt>
 8103d90:	b110      	cbz	r0, 8103d98 <_printf_float+0x90>
 8103d92:	232d      	movs	r3, #45	; 0x2d
 8103d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103d98:	4b93      	ldr	r3, [pc, #588]	; (8103fe8 <_printf_float+0x2e0>)
 8103d9a:	4894      	ldr	r0, [pc, #592]	; (8103fec <_printf_float+0x2e4>)
 8103d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8103da0:	bf94      	ite	ls
 8103da2:	4698      	movls	r8, r3
 8103da4:	4680      	movhi	r8, r0
 8103da6:	2303      	movs	r3, #3
 8103da8:	6123      	str	r3, [r4, #16]
 8103daa:	9b05      	ldr	r3, [sp, #20]
 8103dac:	f023 0204 	bic.w	r2, r3, #4
 8103db0:	6022      	str	r2, [r4, #0]
 8103db2:	f04f 0900 	mov.w	r9, #0
 8103db6:	9700      	str	r7, [sp, #0]
 8103db8:	4633      	mov	r3, r6
 8103dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8103dbc:	4621      	mov	r1, r4
 8103dbe:	4628      	mov	r0, r5
 8103dc0:	f000 f9d8 	bl	8104174 <_printf_common>
 8103dc4:	3001      	adds	r0, #1
 8103dc6:	f040 8090 	bne.w	8103eea <_printf_float+0x1e2>
 8103dca:	f04f 30ff 	mov.w	r0, #4294967295
 8103dce:	b00d      	add	sp, #52	; 0x34
 8103dd0:	ecbd 8b02 	vpop	{d8}
 8103dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8103dd8:	4642      	mov	r2, r8
 8103dda:	464b      	mov	r3, r9
 8103ddc:	4640      	mov	r0, r8
 8103dde:	4649      	mov	r1, r9
 8103de0:	f7fc ff2c 	bl	8100c3c <__aeabi_dcmpun>
 8103de4:	b140      	cbz	r0, 8103df8 <_printf_float+0xf0>
 8103de6:	464b      	mov	r3, r9
 8103de8:	2b00      	cmp	r3, #0
 8103dea:	bfbc      	itt	lt
 8103dec:	232d      	movlt	r3, #45	; 0x2d
 8103dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8103df2:	487f      	ldr	r0, [pc, #508]	; (8103ff0 <_printf_float+0x2e8>)
 8103df4:	4b7f      	ldr	r3, [pc, #508]	; (8103ff4 <_printf_float+0x2ec>)
 8103df6:	e7d1      	b.n	8103d9c <_printf_float+0x94>
 8103df8:	6863      	ldr	r3, [r4, #4]
 8103dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8103dfe:	9206      	str	r2, [sp, #24]
 8103e00:	1c5a      	adds	r2, r3, #1
 8103e02:	d13f      	bne.n	8103e84 <_printf_float+0x17c>
 8103e04:	2306      	movs	r3, #6
 8103e06:	6063      	str	r3, [r4, #4]
 8103e08:	9b05      	ldr	r3, [sp, #20]
 8103e0a:	6861      	ldr	r1, [r4, #4]
 8103e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103e10:	2300      	movs	r3, #0
 8103e12:	9303      	str	r3, [sp, #12]
 8103e14:	ab0a      	add	r3, sp, #40	; 0x28
 8103e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8103e1a:	ab09      	add	r3, sp, #36	; 0x24
 8103e1c:	ec49 8b10 	vmov	d0, r8, r9
 8103e20:	9300      	str	r3, [sp, #0]
 8103e22:	6022      	str	r2, [r4, #0]
 8103e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8103e28:	4628      	mov	r0, r5
 8103e2a:	f7ff fecd 	bl	8103bc8 <__cvt>
 8103e2e:	9b06      	ldr	r3, [sp, #24]
 8103e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8103e32:	2b47      	cmp	r3, #71	; 0x47
 8103e34:	4680      	mov	r8, r0
 8103e36:	d108      	bne.n	8103e4a <_printf_float+0x142>
 8103e38:	1cc8      	adds	r0, r1, #3
 8103e3a:	db02      	blt.n	8103e42 <_printf_float+0x13a>
 8103e3c:	6863      	ldr	r3, [r4, #4]
 8103e3e:	4299      	cmp	r1, r3
 8103e40:	dd41      	ble.n	8103ec6 <_printf_float+0x1be>
 8103e42:	f1ab 0b02 	sub.w	fp, fp, #2
 8103e46:	fa5f fb8b 	uxtb.w	fp, fp
 8103e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8103e4e:	d820      	bhi.n	8103e92 <_printf_float+0x18a>
 8103e50:	3901      	subs	r1, #1
 8103e52:	465a      	mov	r2, fp
 8103e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8103e58:	9109      	str	r1, [sp, #36]	; 0x24
 8103e5a:	f7ff ff17 	bl	8103c8c <__exponent>
 8103e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8103e60:	1813      	adds	r3, r2, r0
 8103e62:	2a01      	cmp	r2, #1
 8103e64:	4681      	mov	r9, r0
 8103e66:	6123      	str	r3, [r4, #16]
 8103e68:	dc02      	bgt.n	8103e70 <_printf_float+0x168>
 8103e6a:	6822      	ldr	r2, [r4, #0]
 8103e6c:	07d2      	lsls	r2, r2, #31
 8103e6e:	d501      	bpl.n	8103e74 <_printf_float+0x16c>
 8103e70:	3301      	adds	r3, #1
 8103e72:	6123      	str	r3, [r4, #16]
 8103e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d09c      	beq.n	8103db6 <_printf_float+0xae>
 8103e7c:	232d      	movs	r3, #45	; 0x2d
 8103e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103e82:	e798      	b.n	8103db6 <_printf_float+0xae>
 8103e84:	9a06      	ldr	r2, [sp, #24]
 8103e86:	2a47      	cmp	r2, #71	; 0x47
 8103e88:	d1be      	bne.n	8103e08 <_printf_float+0x100>
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	d1bc      	bne.n	8103e08 <_printf_float+0x100>
 8103e8e:	2301      	movs	r3, #1
 8103e90:	e7b9      	b.n	8103e06 <_printf_float+0xfe>
 8103e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8103e96:	d118      	bne.n	8103eca <_printf_float+0x1c2>
 8103e98:	2900      	cmp	r1, #0
 8103e9a:	6863      	ldr	r3, [r4, #4]
 8103e9c:	dd0b      	ble.n	8103eb6 <_printf_float+0x1ae>
 8103e9e:	6121      	str	r1, [r4, #16]
 8103ea0:	b913      	cbnz	r3, 8103ea8 <_printf_float+0x1a0>
 8103ea2:	6822      	ldr	r2, [r4, #0]
 8103ea4:	07d0      	lsls	r0, r2, #31
 8103ea6:	d502      	bpl.n	8103eae <_printf_float+0x1a6>
 8103ea8:	3301      	adds	r3, #1
 8103eaa:	440b      	add	r3, r1
 8103eac:	6123      	str	r3, [r4, #16]
 8103eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8103eb0:	f04f 0900 	mov.w	r9, #0
 8103eb4:	e7de      	b.n	8103e74 <_printf_float+0x16c>
 8103eb6:	b913      	cbnz	r3, 8103ebe <_printf_float+0x1b6>
 8103eb8:	6822      	ldr	r2, [r4, #0]
 8103eba:	07d2      	lsls	r2, r2, #31
 8103ebc:	d501      	bpl.n	8103ec2 <_printf_float+0x1ba>
 8103ebe:	3302      	adds	r3, #2
 8103ec0:	e7f4      	b.n	8103eac <_printf_float+0x1a4>
 8103ec2:	2301      	movs	r3, #1
 8103ec4:	e7f2      	b.n	8103eac <_printf_float+0x1a4>
 8103ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8103eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103ecc:	4299      	cmp	r1, r3
 8103ece:	db05      	blt.n	8103edc <_printf_float+0x1d4>
 8103ed0:	6823      	ldr	r3, [r4, #0]
 8103ed2:	6121      	str	r1, [r4, #16]
 8103ed4:	07d8      	lsls	r0, r3, #31
 8103ed6:	d5ea      	bpl.n	8103eae <_printf_float+0x1a6>
 8103ed8:	1c4b      	adds	r3, r1, #1
 8103eda:	e7e7      	b.n	8103eac <_printf_float+0x1a4>
 8103edc:	2900      	cmp	r1, #0
 8103ede:	bfd4      	ite	le
 8103ee0:	f1c1 0202 	rsble	r2, r1, #2
 8103ee4:	2201      	movgt	r2, #1
 8103ee6:	4413      	add	r3, r2
 8103ee8:	e7e0      	b.n	8103eac <_printf_float+0x1a4>
 8103eea:	6823      	ldr	r3, [r4, #0]
 8103eec:	055a      	lsls	r2, r3, #21
 8103eee:	d407      	bmi.n	8103f00 <_printf_float+0x1f8>
 8103ef0:	6923      	ldr	r3, [r4, #16]
 8103ef2:	4642      	mov	r2, r8
 8103ef4:	4631      	mov	r1, r6
 8103ef6:	4628      	mov	r0, r5
 8103ef8:	47b8      	blx	r7
 8103efa:	3001      	adds	r0, #1
 8103efc:	d12c      	bne.n	8103f58 <_printf_float+0x250>
 8103efe:	e764      	b.n	8103dca <_printf_float+0xc2>
 8103f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8103f04:	f240 80e0 	bls.w	81040c8 <_printf_float+0x3c0>
 8103f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8103f0c:	2200      	movs	r2, #0
 8103f0e:	2300      	movs	r3, #0
 8103f10:	f7fc fe62 	bl	8100bd8 <__aeabi_dcmpeq>
 8103f14:	2800      	cmp	r0, #0
 8103f16:	d034      	beq.n	8103f82 <_printf_float+0x27a>
 8103f18:	4a37      	ldr	r2, [pc, #220]	; (8103ff8 <_printf_float+0x2f0>)
 8103f1a:	2301      	movs	r3, #1
 8103f1c:	4631      	mov	r1, r6
 8103f1e:	4628      	mov	r0, r5
 8103f20:	47b8      	blx	r7
 8103f22:	3001      	adds	r0, #1
 8103f24:	f43f af51 	beq.w	8103dca <_printf_float+0xc2>
 8103f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8103f2c:	429a      	cmp	r2, r3
 8103f2e:	db02      	blt.n	8103f36 <_printf_float+0x22e>
 8103f30:	6823      	ldr	r3, [r4, #0]
 8103f32:	07d8      	lsls	r0, r3, #31
 8103f34:	d510      	bpl.n	8103f58 <_printf_float+0x250>
 8103f36:	ee18 3a10 	vmov	r3, s16
 8103f3a:	4652      	mov	r2, sl
 8103f3c:	4631      	mov	r1, r6
 8103f3e:	4628      	mov	r0, r5
 8103f40:	47b8      	blx	r7
 8103f42:	3001      	adds	r0, #1
 8103f44:	f43f af41 	beq.w	8103dca <_printf_float+0xc2>
 8103f48:	f04f 0800 	mov.w	r8, #0
 8103f4c:	f104 091a 	add.w	r9, r4, #26
 8103f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103f52:	3b01      	subs	r3, #1
 8103f54:	4543      	cmp	r3, r8
 8103f56:	dc09      	bgt.n	8103f6c <_printf_float+0x264>
 8103f58:	6823      	ldr	r3, [r4, #0]
 8103f5a:	079b      	lsls	r3, r3, #30
 8103f5c:	f100 8105 	bmi.w	810416a <_printf_float+0x462>
 8103f60:	68e0      	ldr	r0, [r4, #12]
 8103f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8103f64:	4298      	cmp	r0, r3
 8103f66:	bfb8      	it	lt
 8103f68:	4618      	movlt	r0, r3
 8103f6a:	e730      	b.n	8103dce <_printf_float+0xc6>
 8103f6c:	2301      	movs	r3, #1
 8103f6e:	464a      	mov	r2, r9
 8103f70:	4631      	mov	r1, r6
 8103f72:	4628      	mov	r0, r5
 8103f74:	47b8      	blx	r7
 8103f76:	3001      	adds	r0, #1
 8103f78:	f43f af27 	beq.w	8103dca <_printf_float+0xc2>
 8103f7c:	f108 0801 	add.w	r8, r8, #1
 8103f80:	e7e6      	b.n	8103f50 <_printf_float+0x248>
 8103f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8103f84:	2b00      	cmp	r3, #0
 8103f86:	dc39      	bgt.n	8103ffc <_printf_float+0x2f4>
 8103f88:	4a1b      	ldr	r2, [pc, #108]	; (8103ff8 <_printf_float+0x2f0>)
 8103f8a:	2301      	movs	r3, #1
 8103f8c:	4631      	mov	r1, r6
 8103f8e:	4628      	mov	r0, r5
 8103f90:	47b8      	blx	r7
 8103f92:	3001      	adds	r0, #1
 8103f94:	f43f af19 	beq.w	8103dca <_printf_float+0xc2>
 8103f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8103f9c:	4313      	orrs	r3, r2
 8103f9e:	d102      	bne.n	8103fa6 <_printf_float+0x29e>
 8103fa0:	6823      	ldr	r3, [r4, #0]
 8103fa2:	07d9      	lsls	r1, r3, #31
 8103fa4:	d5d8      	bpl.n	8103f58 <_printf_float+0x250>
 8103fa6:	ee18 3a10 	vmov	r3, s16
 8103faa:	4652      	mov	r2, sl
 8103fac:	4631      	mov	r1, r6
 8103fae:	4628      	mov	r0, r5
 8103fb0:	47b8      	blx	r7
 8103fb2:	3001      	adds	r0, #1
 8103fb4:	f43f af09 	beq.w	8103dca <_printf_float+0xc2>
 8103fb8:	f04f 0900 	mov.w	r9, #0
 8103fbc:	f104 0a1a 	add.w	sl, r4, #26
 8103fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8103fc2:	425b      	negs	r3, r3
 8103fc4:	454b      	cmp	r3, r9
 8103fc6:	dc01      	bgt.n	8103fcc <_printf_float+0x2c4>
 8103fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103fca:	e792      	b.n	8103ef2 <_printf_float+0x1ea>
 8103fcc:	2301      	movs	r3, #1
 8103fce:	4652      	mov	r2, sl
 8103fd0:	4631      	mov	r1, r6
 8103fd2:	4628      	mov	r0, r5
 8103fd4:	47b8      	blx	r7
 8103fd6:	3001      	adds	r0, #1
 8103fd8:	f43f aef7 	beq.w	8103dca <_printf_float+0xc2>
 8103fdc:	f109 0901 	add.w	r9, r9, #1
 8103fe0:	e7ee      	b.n	8103fc0 <_printf_float+0x2b8>
 8103fe2:	bf00      	nop
 8103fe4:	7fefffff 	.word	0x7fefffff
 8103fe8:	0810856c 	.word	0x0810856c
 8103fec:	08108570 	.word	0x08108570
 8103ff0:	08108578 	.word	0x08108578
 8103ff4:	08108574 	.word	0x08108574
 8103ff8:	0810857c 	.word	0x0810857c
 8103ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8103ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104000:	429a      	cmp	r2, r3
 8104002:	bfa8      	it	ge
 8104004:	461a      	movge	r2, r3
 8104006:	2a00      	cmp	r2, #0
 8104008:	4691      	mov	r9, r2
 810400a:	dc37      	bgt.n	810407c <_printf_float+0x374>
 810400c:	f04f 0b00 	mov.w	fp, #0
 8104010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104014:	f104 021a 	add.w	r2, r4, #26
 8104018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810401a:	9305      	str	r3, [sp, #20]
 810401c:	eba3 0309 	sub.w	r3, r3, r9
 8104020:	455b      	cmp	r3, fp
 8104022:	dc33      	bgt.n	810408c <_printf_float+0x384>
 8104024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104028:	429a      	cmp	r2, r3
 810402a:	db3b      	blt.n	81040a4 <_printf_float+0x39c>
 810402c:	6823      	ldr	r3, [r4, #0]
 810402e:	07da      	lsls	r2, r3, #31
 8104030:	d438      	bmi.n	81040a4 <_printf_float+0x39c>
 8104032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104034:	9a05      	ldr	r2, [sp, #20]
 8104036:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104038:	1a9a      	subs	r2, r3, r2
 810403a:	eba3 0901 	sub.w	r9, r3, r1
 810403e:	4591      	cmp	r9, r2
 8104040:	bfa8      	it	ge
 8104042:	4691      	movge	r9, r2
 8104044:	f1b9 0f00 	cmp.w	r9, #0
 8104048:	dc35      	bgt.n	81040b6 <_printf_float+0x3ae>
 810404a:	f04f 0800 	mov.w	r8, #0
 810404e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104052:	f104 0a1a 	add.w	sl, r4, #26
 8104056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810405a:	1a9b      	subs	r3, r3, r2
 810405c:	eba3 0309 	sub.w	r3, r3, r9
 8104060:	4543      	cmp	r3, r8
 8104062:	f77f af79 	ble.w	8103f58 <_printf_float+0x250>
 8104066:	2301      	movs	r3, #1
 8104068:	4652      	mov	r2, sl
 810406a:	4631      	mov	r1, r6
 810406c:	4628      	mov	r0, r5
 810406e:	47b8      	blx	r7
 8104070:	3001      	adds	r0, #1
 8104072:	f43f aeaa 	beq.w	8103dca <_printf_float+0xc2>
 8104076:	f108 0801 	add.w	r8, r8, #1
 810407a:	e7ec      	b.n	8104056 <_printf_float+0x34e>
 810407c:	4613      	mov	r3, r2
 810407e:	4631      	mov	r1, r6
 8104080:	4642      	mov	r2, r8
 8104082:	4628      	mov	r0, r5
 8104084:	47b8      	blx	r7
 8104086:	3001      	adds	r0, #1
 8104088:	d1c0      	bne.n	810400c <_printf_float+0x304>
 810408a:	e69e      	b.n	8103dca <_printf_float+0xc2>
 810408c:	2301      	movs	r3, #1
 810408e:	4631      	mov	r1, r6
 8104090:	4628      	mov	r0, r5
 8104092:	9205      	str	r2, [sp, #20]
 8104094:	47b8      	blx	r7
 8104096:	3001      	adds	r0, #1
 8104098:	f43f ae97 	beq.w	8103dca <_printf_float+0xc2>
 810409c:	9a05      	ldr	r2, [sp, #20]
 810409e:	f10b 0b01 	add.w	fp, fp, #1
 81040a2:	e7b9      	b.n	8104018 <_printf_float+0x310>
 81040a4:	ee18 3a10 	vmov	r3, s16
 81040a8:	4652      	mov	r2, sl
 81040aa:	4631      	mov	r1, r6
 81040ac:	4628      	mov	r0, r5
 81040ae:	47b8      	blx	r7
 81040b0:	3001      	adds	r0, #1
 81040b2:	d1be      	bne.n	8104032 <_printf_float+0x32a>
 81040b4:	e689      	b.n	8103dca <_printf_float+0xc2>
 81040b6:	9a05      	ldr	r2, [sp, #20]
 81040b8:	464b      	mov	r3, r9
 81040ba:	4442      	add	r2, r8
 81040bc:	4631      	mov	r1, r6
 81040be:	4628      	mov	r0, r5
 81040c0:	47b8      	blx	r7
 81040c2:	3001      	adds	r0, #1
 81040c4:	d1c1      	bne.n	810404a <_printf_float+0x342>
 81040c6:	e680      	b.n	8103dca <_printf_float+0xc2>
 81040c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81040ca:	2a01      	cmp	r2, #1
 81040cc:	dc01      	bgt.n	81040d2 <_printf_float+0x3ca>
 81040ce:	07db      	lsls	r3, r3, #31
 81040d0:	d538      	bpl.n	8104144 <_printf_float+0x43c>
 81040d2:	2301      	movs	r3, #1
 81040d4:	4642      	mov	r2, r8
 81040d6:	4631      	mov	r1, r6
 81040d8:	4628      	mov	r0, r5
 81040da:	47b8      	blx	r7
 81040dc:	3001      	adds	r0, #1
 81040de:	f43f ae74 	beq.w	8103dca <_printf_float+0xc2>
 81040e2:	ee18 3a10 	vmov	r3, s16
 81040e6:	4652      	mov	r2, sl
 81040e8:	4631      	mov	r1, r6
 81040ea:	4628      	mov	r0, r5
 81040ec:	47b8      	blx	r7
 81040ee:	3001      	adds	r0, #1
 81040f0:	f43f ae6b 	beq.w	8103dca <_printf_float+0xc2>
 81040f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81040f8:	2200      	movs	r2, #0
 81040fa:	2300      	movs	r3, #0
 81040fc:	f7fc fd6c 	bl	8100bd8 <__aeabi_dcmpeq>
 8104100:	b9d8      	cbnz	r0, 810413a <_printf_float+0x432>
 8104102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104104:	f108 0201 	add.w	r2, r8, #1
 8104108:	3b01      	subs	r3, #1
 810410a:	4631      	mov	r1, r6
 810410c:	4628      	mov	r0, r5
 810410e:	47b8      	blx	r7
 8104110:	3001      	adds	r0, #1
 8104112:	d10e      	bne.n	8104132 <_printf_float+0x42a>
 8104114:	e659      	b.n	8103dca <_printf_float+0xc2>
 8104116:	2301      	movs	r3, #1
 8104118:	4652      	mov	r2, sl
 810411a:	4631      	mov	r1, r6
 810411c:	4628      	mov	r0, r5
 810411e:	47b8      	blx	r7
 8104120:	3001      	adds	r0, #1
 8104122:	f43f ae52 	beq.w	8103dca <_printf_float+0xc2>
 8104126:	f108 0801 	add.w	r8, r8, #1
 810412a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810412c:	3b01      	subs	r3, #1
 810412e:	4543      	cmp	r3, r8
 8104130:	dcf1      	bgt.n	8104116 <_printf_float+0x40e>
 8104132:	464b      	mov	r3, r9
 8104134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8104138:	e6dc      	b.n	8103ef4 <_printf_float+0x1ec>
 810413a:	f04f 0800 	mov.w	r8, #0
 810413e:	f104 0a1a 	add.w	sl, r4, #26
 8104142:	e7f2      	b.n	810412a <_printf_float+0x422>
 8104144:	2301      	movs	r3, #1
 8104146:	4642      	mov	r2, r8
 8104148:	e7df      	b.n	810410a <_printf_float+0x402>
 810414a:	2301      	movs	r3, #1
 810414c:	464a      	mov	r2, r9
 810414e:	4631      	mov	r1, r6
 8104150:	4628      	mov	r0, r5
 8104152:	47b8      	blx	r7
 8104154:	3001      	adds	r0, #1
 8104156:	f43f ae38 	beq.w	8103dca <_printf_float+0xc2>
 810415a:	f108 0801 	add.w	r8, r8, #1
 810415e:	68e3      	ldr	r3, [r4, #12]
 8104160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8104162:	1a5b      	subs	r3, r3, r1
 8104164:	4543      	cmp	r3, r8
 8104166:	dcf0      	bgt.n	810414a <_printf_float+0x442>
 8104168:	e6fa      	b.n	8103f60 <_printf_float+0x258>
 810416a:	f04f 0800 	mov.w	r8, #0
 810416e:	f104 0919 	add.w	r9, r4, #25
 8104172:	e7f4      	b.n	810415e <_printf_float+0x456>

08104174 <_printf_common>:
 8104174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104178:	4616      	mov	r6, r2
 810417a:	4699      	mov	r9, r3
 810417c:	688a      	ldr	r2, [r1, #8]
 810417e:	690b      	ldr	r3, [r1, #16]
 8104180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8104184:	4293      	cmp	r3, r2
 8104186:	bfb8      	it	lt
 8104188:	4613      	movlt	r3, r2
 810418a:	6033      	str	r3, [r6, #0]
 810418c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8104190:	4607      	mov	r7, r0
 8104192:	460c      	mov	r4, r1
 8104194:	b10a      	cbz	r2, 810419a <_printf_common+0x26>
 8104196:	3301      	adds	r3, #1
 8104198:	6033      	str	r3, [r6, #0]
 810419a:	6823      	ldr	r3, [r4, #0]
 810419c:	0699      	lsls	r1, r3, #26
 810419e:	bf42      	ittt	mi
 81041a0:	6833      	ldrmi	r3, [r6, #0]
 81041a2:	3302      	addmi	r3, #2
 81041a4:	6033      	strmi	r3, [r6, #0]
 81041a6:	6825      	ldr	r5, [r4, #0]
 81041a8:	f015 0506 	ands.w	r5, r5, #6
 81041ac:	d106      	bne.n	81041bc <_printf_common+0x48>
 81041ae:	f104 0a19 	add.w	sl, r4, #25
 81041b2:	68e3      	ldr	r3, [r4, #12]
 81041b4:	6832      	ldr	r2, [r6, #0]
 81041b6:	1a9b      	subs	r3, r3, r2
 81041b8:	42ab      	cmp	r3, r5
 81041ba:	dc26      	bgt.n	810420a <_printf_common+0x96>
 81041bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81041c0:	1e13      	subs	r3, r2, #0
 81041c2:	6822      	ldr	r2, [r4, #0]
 81041c4:	bf18      	it	ne
 81041c6:	2301      	movne	r3, #1
 81041c8:	0692      	lsls	r2, r2, #26
 81041ca:	d42b      	bmi.n	8104224 <_printf_common+0xb0>
 81041cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81041d0:	4649      	mov	r1, r9
 81041d2:	4638      	mov	r0, r7
 81041d4:	47c0      	blx	r8
 81041d6:	3001      	adds	r0, #1
 81041d8:	d01e      	beq.n	8104218 <_printf_common+0xa4>
 81041da:	6823      	ldr	r3, [r4, #0]
 81041dc:	68e5      	ldr	r5, [r4, #12]
 81041de:	6832      	ldr	r2, [r6, #0]
 81041e0:	f003 0306 	and.w	r3, r3, #6
 81041e4:	2b04      	cmp	r3, #4
 81041e6:	bf08      	it	eq
 81041e8:	1aad      	subeq	r5, r5, r2
 81041ea:	68a3      	ldr	r3, [r4, #8]
 81041ec:	6922      	ldr	r2, [r4, #16]
 81041ee:	bf0c      	ite	eq
 81041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81041f4:	2500      	movne	r5, #0
 81041f6:	4293      	cmp	r3, r2
 81041f8:	bfc4      	itt	gt
 81041fa:	1a9b      	subgt	r3, r3, r2
 81041fc:	18ed      	addgt	r5, r5, r3
 81041fe:	2600      	movs	r6, #0
 8104200:	341a      	adds	r4, #26
 8104202:	42b5      	cmp	r5, r6
 8104204:	d11a      	bne.n	810423c <_printf_common+0xc8>
 8104206:	2000      	movs	r0, #0
 8104208:	e008      	b.n	810421c <_printf_common+0xa8>
 810420a:	2301      	movs	r3, #1
 810420c:	4652      	mov	r2, sl
 810420e:	4649      	mov	r1, r9
 8104210:	4638      	mov	r0, r7
 8104212:	47c0      	blx	r8
 8104214:	3001      	adds	r0, #1
 8104216:	d103      	bne.n	8104220 <_printf_common+0xac>
 8104218:	f04f 30ff 	mov.w	r0, #4294967295
 810421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104220:	3501      	adds	r5, #1
 8104222:	e7c6      	b.n	81041b2 <_printf_common+0x3e>
 8104224:	18e1      	adds	r1, r4, r3
 8104226:	1c5a      	adds	r2, r3, #1
 8104228:	2030      	movs	r0, #48	; 0x30
 810422a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810422e:	4422      	add	r2, r4
 8104230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8104234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8104238:	3302      	adds	r3, #2
 810423a:	e7c7      	b.n	81041cc <_printf_common+0x58>
 810423c:	2301      	movs	r3, #1
 810423e:	4622      	mov	r2, r4
 8104240:	4649      	mov	r1, r9
 8104242:	4638      	mov	r0, r7
 8104244:	47c0      	blx	r8
 8104246:	3001      	adds	r0, #1
 8104248:	d0e6      	beq.n	8104218 <_printf_common+0xa4>
 810424a:	3601      	adds	r6, #1
 810424c:	e7d9      	b.n	8104202 <_printf_common+0x8e>
	...

08104250 <_printf_i>:
 8104250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8104254:	7e0f      	ldrb	r7, [r1, #24]
 8104256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8104258:	2f78      	cmp	r7, #120	; 0x78
 810425a:	4691      	mov	r9, r2
 810425c:	4680      	mov	r8, r0
 810425e:	460c      	mov	r4, r1
 8104260:	469a      	mov	sl, r3
 8104262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8104266:	d807      	bhi.n	8104278 <_printf_i+0x28>
 8104268:	2f62      	cmp	r7, #98	; 0x62
 810426a:	d80a      	bhi.n	8104282 <_printf_i+0x32>
 810426c:	2f00      	cmp	r7, #0
 810426e:	f000 80d8 	beq.w	8104422 <_printf_i+0x1d2>
 8104272:	2f58      	cmp	r7, #88	; 0x58
 8104274:	f000 80a3 	beq.w	81043be <_printf_i+0x16e>
 8104278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810427c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8104280:	e03a      	b.n	81042f8 <_printf_i+0xa8>
 8104282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8104286:	2b15      	cmp	r3, #21
 8104288:	d8f6      	bhi.n	8104278 <_printf_i+0x28>
 810428a:	a101      	add	r1, pc, #4	; (adr r1, 8104290 <_printf_i+0x40>)
 810428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8104290:	081042e9 	.word	0x081042e9
 8104294:	081042fd 	.word	0x081042fd
 8104298:	08104279 	.word	0x08104279
 810429c:	08104279 	.word	0x08104279
 81042a0:	08104279 	.word	0x08104279
 81042a4:	08104279 	.word	0x08104279
 81042a8:	081042fd 	.word	0x081042fd
 81042ac:	08104279 	.word	0x08104279
 81042b0:	08104279 	.word	0x08104279
 81042b4:	08104279 	.word	0x08104279
 81042b8:	08104279 	.word	0x08104279
 81042bc:	08104409 	.word	0x08104409
 81042c0:	0810432d 	.word	0x0810432d
 81042c4:	081043eb 	.word	0x081043eb
 81042c8:	08104279 	.word	0x08104279
 81042cc:	08104279 	.word	0x08104279
 81042d0:	0810442b 	.word	0x0810442b
 81042d4:	08104279 	.word	0x08104279
 81042d8:	0810432d 	.word	0x0810432d
 81042dc:	08104279 	.word	0x08104279
 81042e0:	08104279 	.word	0x08104279
 81042e4:	081043f3 	.word	0x081043f3
 81042e8:	682b      	ldr	r3, [r5, #0]
 81042ea:	1d1a      	adds	r2, r3, #4
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	602a      	str	r2, [r5, #0]
 81042f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81042f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81042f8:	2301      	movs	r3, #1
 81042fa:	e0a3      	b.n	8104444 <_printf_i+0x1f4>
 81042fc:	6820      	ldr	r0, [r4, #0]
 81042fe:	6829      	ldr	r1, [r5, #0]
 8104300:	0606      	lsls	r6, r0, #24
 8104302:	f101 0304 	add.w	r3, r1, #4
 8104306:	d50a      	bpl.n	810431e <_printf_i+0xce>
 8104308:	680e      	ldr	r6, [r1, #0]
 810430a:	602b      	str	r3, [r5, #0]
 810430c:	2e00      	cmp	r6, #0
 810430e:	da03      	bge.n	8104318 <_printf_i+0xc8>
 8104310:	232d      	movs	r3, #45	; 0x2d
 8104312:	4276      	negs	r6, r6
 8104314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104318:	485e      	ldr	r0, [pc, #376]	; (8104494 <_printf_i+0x244>)
 810431a:	230a      	movs	r3, #10
 810431c:	e019      	b.n	8104352 <_printf_i+0x102>
 810431e:	680e      	ldr	r6, [r1, #0]
 8104320:	602b      	str	r3, [r5, #0]
 8104322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8104326:	bf18      	it	ne
 8104328:	b236      	sxthne	r6, r6
 810432a:	e7ef      	b.n	810430c <_printf_i+0xbc>
 810432c:	682b      	ldr	r3, [r5, #0]
 810432e:	6820      	ldr	r0, [r4, #0]
 8104330:	1d19      	adds	r1, r3, #4
 8104332:	6029      	str	r1, [r5, #0]
 8104334:	0601      	lsls	r1, r0, #24
 8104336:	d501      	bpl.n	810433c <_printf_i+0xec>
 8104338:	681e      	ldr	r6, [r3, #0]
 810433a:	e002      	b.n	8104342 <_printf_i+0xf2>
 810433c:	0646      	lsls	r6, r0, #25
 810433e:	d5fb      	bpl.n	8104338 <_printf_i+0xe8>
 8104340:	881e      	ldrh	r6, [r3, #0]
 8104342:	4854      	ldr	r0, [pc, #336]	; (8104494 <_printf_i+0x244>)
 8104344:	2f6f      	cmp	r7, #111	; 0x6f
 8104346:	bf0c      	ite	eq
 8104348:	2308      	moveq	r3, #8
 810434a:	230a      	movne	r3, #10
 810434c:	2100      	movs	r1, #0
 810434e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8104352:	6865      	ldr	r5, [r4, #4]
 8104354:	60a5      	str	r5, [r4, #8]
 8104356:	2d00      	cmp	r5, #0
 8104358:	bfa2      	ittt	ge
 810435a:	6821      	ldrge	r1, [r4, #0]
 810435c:	f021 0104 	bicge.w	r1, r1, #4
 8104360:	6021      	strge	r1, [r4, #0]
 8104362:	b90e      	cbnz	r6, 8104368 <_printf_i+0x118>
 8104364:	2d00      	cmp	r5, #0
 8104366:	d04d      	beq.n	8104404 <_printf_i+0x1b4>
 8104368:	4615      	mov	r5, r2
 810436a:	fbb6 f1f3 	udiv	r1, r6, r3
 810436e:	fb03 6711 	mls	r7, r3, r1, r6
 8104372:	5dc7      	ldrb	r7, [r0, r7]
 8104374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8104378:	4637      	mov	r7, r6
 810437a:	42bb      	cmp	r3, r7
 810437c:	460e      	mov	r6, r1
 810437e:	d9f4      	bls.n	810436a <_printf_i+0x11a>
 8104380:	2b08      	cmp	r3, #8
 8104382:	d10b      	bne.n	810439c <_printf_i+0x14c>
 8104384:	6823      	ldr	r3, [r4, #0]
 8104386:	07de      	lsls	r6, r3, #31
 8104388:	d508      	bpl.n	810439c <_printf_i+0x14c>
 810438a:	6923      	ldr	r3, [r4, #16]
 810438c:	6861      	ldr	r1, [r4, #4]
 810438e:	4299      	cmp	r1, r3
 8104390:	bfde      	ittt	le
 8104392:	2330      	movle	r3, #48	; 0x30
 8104394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8104398:	f105 35ff 	addle.w	r5, r5, #4294967295
 810439c:	1b52      	subs	r2, r2, r5
 810439e:	6122      	str	r2, [r4, #16]
 81043a0:	f8cd a000 	str.w	sl, [sp]
 81043a4:	464b      	mov	r3, r9
 81043a6:	aa03      	add	r2, sp, #12
 81043a8:	4621      	mov	r1, r4
 81043aa:	4640      	mov	r0, r8
 81043ac:	f7ff fee2 	bl	8104174 <_printf_common>
 81043b0:	3001      	adds	r0, #1
 81043b2:	d14c      	bne.n	810444e <_printf_i+0x1fe>
 81043b4:	f04f 30ff 	mov.w	r0, #4294967295
 81043b8:	b004      	add	sp, #16
 81043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81043be:	4835      	ldr	r0, [pc, #212]	; (8104494 <_printf_i+0x244>)
 81043c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 81043c4:	6829      	ldr	r1, [r5, #0]
 81043c6:	6823      	ldr	r3, [r4, #0]
 81043c8:	f851 6b04 	ldr.w	r6, [r1], #4
 81043cc:	6029      	str	r1, [r5, #0]
 81043ce:	061d      	lsls	r5, r3, #24
 81043d0:	d514      	bpl.n	81043fc <_printf_i+0x1ac>
 81043d2:	07df      	lsls	r7, r3, #31
 81043d4:	bf44      	itt	mi
 81043d6:	f043 0320 	orrmi.w	r3, r3, #32
 81043da:	6023      	strmi	r3, [r4, #0]
 81043dc:	b91e      	cbnz	r6, 81043e6 <_printf_i+0x196>
 81043de:	6823      	ldr	r3, [r4, #0]
 81043e0:	f023 0320 	bic.w	r3, r3, #32
 81043e4:	6023      	str	r3, [r4, #0]
 81043e6:	2310      	movs	r3, #16
 81043e8:	e7b0      	b.n	810434c <_printf_i+0xfc>
 81043ea:	6823      	ldr	r3, [r4, #0]
 81043ec:	f043 0320 	orr.w	r3, r3, #32
 81043f0:	6023      	str	r3, [r4, #0]
 81043f2:	2378      	movs	r3, #120	; 0x78
 81043f4:	4828      	ldr	r0, [pc, #160]	; (8104498 <_printf_i+0x248>)
 81043f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81043fa:	e7e3      	b.n	81043c4 <_printf_i+0x174>
 81043fc:	0659      	lsls	r1, r3, #25
 81043fe:	bf48      	it	mi
 8104400:	b2b6      	uxthmi	r6, r6
 8104402:	e7e6      	b.n	81043d2 <_printf_i+0x182>
 8104404:	4615      	mov	r5, r2
 8104406:	e7bb      	b.n	8104380 <_printf_i+0x130>
 8104408:	682b      	ldr	r3, [r5, #0]
 810440a:	6826      	ldr	r6, [r4, #0]
 810440c:	6961      	ldr	r1, [r4, #20]
 810440e:	1d18      	adds	r0, r3, #4
 8104410:	6028      	str	r0, [r5, #0]
 8104412:	0635      	lsls	r5, r6, #24
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	d501      	bpl.n	810441c <_printf_i+0x1cc>
 8104418:	6019      	str	r1, [r3, #0]
 810441a:	e002      	b.n	8104422 <_printf_i+0x1d2>
 810441c:	0670      	lsls	r0, r6, #25
 810441e:	d5fb      	bpl.n	8104418 <_printf_i+0x1c8>
 8104420:	8019      	strh	r1, [r3, #0]
 8104422:	2300      	movs	r3, #0
 8104424:	6123      	str	r3, [r4, #16]
 8104426:	4615      	mov	r5, r2
 8104428:	e7ba      	b.n	81043a0 <_printf_i+0x150>
 810442a:	682b      	ldr	r3, [r5, #0]
 810442c:	1d1a      	adds	r2, r3, #4
 810442e:	602a      	str	r2, [r5, #0]
 8104430:	681d      	ldr	r5, [r3, #0]
 8104432:	6862      	ldr	r2, [r4, #4]
 8104434:	2100      	movs	r1, #0
 8104436:	4628      	mov	r0, r5
 8104438:	f7fb ff5a 	bl	81002f0 <memchr>
 810443c:	b108      	cbz	r0, 8104442 <_printf_i+0x1f2>
 810443e:	1b40      	subs	r0, r0, r5
 8104440:	6060      	str	r0, [r4, #4]
 8104442:	6863      	ldr	r3, [r4, #4]
 8104444:	6123      	str	r3, [r4, #16]
 8104446:	2300      	movs	r3, #0
 8104448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810444c:	e7a8      	b.n	81043a0 <_printf_i+0x150>
 810444e:	6923      	ldr	r3, [r4, #16]
 8104450:	462a      	mov	r2, r5
 8104452:	4649      	mov	r1, r9
 8104454:	4640      	mov	r0, r8
 8104456:	47d0      	blx	sl
 8104458:	3001      	adds	r0, #1
 810445a:	d0ab      	beq.n	81043b4 <_printf_i+0x164>
 810445c:	6823      	ldr	r3, [r4, #0]
 810445e:	079b      	lsls	r3, r3, #30
 8104460:	d413      	bmi.n	810448a <_printf_i+0x23a>
 8104462:	68e0      	ldr	r0, [r4, #12]
 8104464:	9b03      	ldr	r3, [sp, #12]
 8104466:	4298      	cmp	r0, r3
 8104468:	bfb8      	it	lt
 810446a:	4618      	movlt	r0, r3
 810446c:	e7a4      	b.n	81043b8 <_printf_i+0x168>
 810446e:	2301      	movs	r3, #1
 8104470:	4632      	mov	r2, r6
 8104472:	4649      	mov	r1, r9
 8104474:	4640      	mov	r0, r8
 8104476:	47d0      	blx	sl
 8104478:	3001      	adds	r0, #1
 810447a:	d09b      	beq.n	81043b4 <_printf_i+0x164>
 810447c:	3501      	adds	r5, #1
 810447e:	68e3      	ldr	r3, [r4, #12]
 8104480:	9903      	ldr	r1, [sp, #12]
 8104482:	1a5b      	subs	r3, r3, r1
 8104484:	42ab      	cmp	r3, r5
 8104486:	dcf2      	bgt.n	810446e <_printf_i+0x21e>
 8104488:	e7eb      	b.n	8104462 <_printf_i+0x212>
 810448a:	2500      	movs	r5, #0
 810448c:	f104 0619 	add.w	r6, r4, #25
 8104490:	e7f5      	b.n	810447e <_printf_i+0x22e>
 8104492:	bf00      	nop
 8104494:	0810857e 	.word	0x0810857e
 8104498:	0810858f 	.word	0x0810858f

0810449c <_scanf_float>:
 810449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81044a0:	b087      	sub	sp, #28
 81044a2:	4617      	mov	r7, r2
 81044a4:	9303      	str	r3, [sp, #12]
 81044a6:	688b      	ldr	r3, [r1, #8]
 81044a8:	1e5a      	subs	r2, r3, #1
 81044aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81044ae:	bf83      	ittte	hi
 81044b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81044b4:	195b      	addhi	r3, r3, r5
 81044b6:	9302      	strhi	r3, [sp, #8]
 81044b8:	2300      	movls	r3, #0
 81044ba:	bf86      	itte	hi
 81044bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 81044c0:	608b      	strhi	r3, [r1, #8]
 81044c2:	9302      	strls	r3, [sp, #8]
 81044c4:	680b      	ldr	r3, [r1, #0]
 81044c6:	468b      	mov	fp, r1
 81044c8:	2500      	movs	r5, #0
 81044ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81044ce:	f84b 3b1c 	str.w	r3, [fp], #28
 81044d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81044d6:	4680      	mov	r8, r0
 81044d8:	460c      	mov	r4, r1
 81044da:	465e      	mov	r6, fp
 81044dc:	46aa      	mov	sl, r5
 81044de:	46a9      	mov	r9, r5
 81044e0:	9501      	str	r5, [sp, #4]
 81044e2:	68a2      	ldr	r2, [r4, #8]
 81044e4:	b152      	cbz	r2, 81044fc <_scanf_float+0x60>
 81044e6:	683b      	ldr	r3, [r7, #0]
 81044e8:	781b      	ldrb	r3, [r3, #0]
 81044ea:	2b4e      	cmp	r3, #78	; 0x4e
 81044ec:	d864      	bhi.n	81045b8 <_scanf_float+0x11c>
 81044ee:	2b40      	cmp	r3, #64	; 0x40
 81044f0:	d83c      	bhi.n	810456c <_scanf_float+0xd0>
 81044f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81044f6:	b2c8      	uxtb	r0, r1
 81044f8:	280e      	cmp	r0, #14
 81044fa:	d93a      	bls.n	8104572 <_scanf_float+0xd6>
 81044fc:	f1b9 0f00 	cmp.w	r9, #0
 8104500:	d003      	beq.n	810450a <_scanf_float+0x6e>
 8104502:	6823      	ldr	r3, [r4, #0]
 8104504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104508:	6023      	str	r3, [r4, #0]
 810450a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810450e:	f1ba 0f01 	cmp.w	sl, #1
 8104512:	f200 8113 	bhi.w	810473c <_scanf_float+0x2a0>
 8104516:	455e      	cmp	r6, fp
 8104518:	f200 8105 	bhi.w	8104726 <_scanf_float+0x28a>
 810451c:	2501      	movs	r5, #1
 810451e:	4628      	mov	r0, r5
 8104520:	b007      	add	sp, #28
 8104522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104526:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810452a:	2a0d      	cmp	r2, #13
 810452c:	d8e6      	bhi.n	81044fc <_scanf_float+0x60>
 810452e:	a101      	add	r1, pc, #4	; (adr r1, 8104534 <_scanf_float+0x98>)
 8104530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8104534:	08104673 	.word	0x08104673
 8104538:	081044fd 	.word	0x081044fd
 810453c:	081044fd 	.word	0x081044fd
 8104540:	081044fd 	.word	0x081044fd
 8104544:	081046d3 	.word	0x081046d3
 8104548:	081046ab 	.word	0x081046ab
 810454c:	081044fd 	.word	0x081044fd
 8104550:	081044fd 	.word	0x081044fd
 8104554:	08104681 	.word	0x08104681
 8104558:	081044fd 	.word	0x081044fd
 810455c:	081044fd 	.word	0x081044fd
 8104560:	081044fd 	.word	0x081044fd
 8104564:	081044fd 	.word	0x081044fd
 8104568:	08104639 	.word	0x08104639
 810456c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8104570:	e7db      	b.n	810452a <_scanf_float+0x8e>
 8104572:	290e      	cmp	r1, #14
 8104574:	d8c2      	bhi.n	81044fc <_scanf_float+0x60>
 8104576:	a001      	add	r0, pc, #4	; (adr r0, 810457c <_scanf_float+0xe0>)
 8104578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810457c:	0810462b 	.word	0x0810462b
 8104580:	081044fd 	.word	0x081044fd
 8104584:	0810462b 	.word	0x0810462b
 8104588:	081046bf 	.word	0x081046bf
 810458c:	081044fd 	.word	0x081044fd
 8104590:	081045d9 	.word	0x081045d9
 8104594:	08104615 	.word	0x08104615
 8104598:	08104615 	.word	0x08104615
 810459c:	08104615 	.word	0x08104615
 81045a0:	08104615 	.word	0x08104615
 81045a4:	08104615 	.word	0x08104615
 81045a8:	08104615 	.word	0x08104615
 81045ac:	08104615 	.word	0x08104615
 81045b0:	08104615 	.word	0x08104615
 81045b4:	08104615 	.word	0x08104615
 81045b8:	2b6e      	cmp	r3, #110	; 0x6e
 81045ba:	d809      	bhi.n	81045d0 <_scanf_float+0x134>
 81045bc:	2b60      	cmp	r3, #96	; 0x60
 81045be:	d8b2      	bhi.n	8104526 <_scanf_float+0x8a>
 81045c0:	2b54      	cmp	r3, #84	; 0x54
 81045c2:	d077      	beq.n	81046b4 <_scanf_float+0x218>
 81045c4:	2b59      	cmp	r3, #89	; 0x59
 81045c6:	d199      	bne.n	81044fc <_scanf_float+0x60>
 81045c8:	2d07      	cmp	r5, #7
 81045ca:	d197      	bne.n	81044fc <_scanf_float+0x60>
 81045cc:	2508      	movs	r5, #8
 81045ce:	e029      	b.n	8104624 <_scanf_float+0x188>
 81045d0:	2b74      	cmp	r3, #116	; 0x74
 81045d2:	d06f      	beq.n	81046b4 <_scanf_float+0x218>
 81045d4:	2b79      	cmp	r3, #121	; 0x79
 81045d6:	e7f6      	b.n	81045c6 <_scanf_float+0x12a>
 81045d8:	6821      	ldr	r1, [r4, #0]
 81045da:	05c8      	lsls	r0, r1, #23
 81045dc:	d51a      	bpl.n	8104614 <_scanf_float+0x178>
 81045de:	9b02      	ldr	r3, [sp, #8]
 81045e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81045e4:	6021      	str	r1, [r4, #0]
 81045e6:	f109 0901 	add.w	r9, r9, #1
 81045ea:	b11b      	cbz	r3, 81045f4 <_scanf_float+0x158>
 81045ec:	3b01      	subs	r3, #1
 81045ee:	3201      	adds	r2, #1
 81045f0:	9302      	str	r3, [sp, #8]
 81045f2:	60a2      	str	r2, [r4, #8]
 81045f4:	68a3      	ldr	r3, [r4, #8]
 81045f6:	3b01      	subs	r3, #1
 81045f8:	60a3      	str	r3, [r4, #8]
 81045fa:	6923      	ldr	r3, [r4, #16]
 81045fc:	3301      	adds	r3, #1
 81045fe:	6123      	str	r3, [r4, #16]
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	3b01      	subs	r3, #1
 8104604:	2b00      	cmp	r3, #0
 8104606:	607b      	str	r3, [r7, #4]
 8104608:	f340 8084 	ble.w	8104714 <_scanf_float+0x278>
 810460c:	683b      	ldr	r3, [r7, #0]
 810460e:	3301      	adds	r3, #1
 8104610:	603b      	str	r3, [r7, #0]
 8104612:	e766      	b.n	81044e2 <_scanf_float+0x46>
 8104614:	eb1a 0f05 	cmn.w	sl, r5
 8104618:	f47f af70 	bne.w	81044fc <_scanf_float+0x60>
 810461c:	6822      	ldr	r2, [r4, #0]
 810461e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8104622:	6022      	str	r2, [r4, #0]
 8104624:	f806 3b01 	strb.w	r3, [r6], #1
 8104628:	e7e4      	b.n	81045f4 <_scanf_float+0x158>
 810462a:	6822      	ldr	r2, [r4, #0]
 810462c:	0610      	lsls	r0, r2, #24
 810462e:	f57f af65 	bpl.w	81044fc <_scanf_float+0x60>
 8104632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104636:	e7f4      	b.n	8104622 <_scanf_float+0x186>
 8104638:	f1ba 0f00 	cmp.w	sl, #0
 810463c:	d10e      	bne.n	810465c <_scanf_float+0x1c0>
 810463e:	f1b9 0f00 	cmp.w	r9, #0
 8104642:	d10e      	bne.n	8104662 <_scanf_float+0x1c6>
 8104644:	6822      	ldr	r2, [r4, #0]
 8104646:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810464a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810464e:	d108      	bne.n	8104662 <_scanf_float+0x1c6>
 8104650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8104654:	6022      	str	r2, [r4, #0]
 8104656:	f04f 0a01 	mov.w	sl, #1
 810465a:	e7e3      	b.n	8104624 <_scanf_float+0x188>
 810465c:	f1ba 0f02 	cmp.w	sl, #2
 8104660:	d055      	beq.n	810470e <_scanf_float+0x272>
 8104662:	2d01      	cmp	r5, #1
 8104664:	d002      	beq.n	810466c <_scanf_float+0x1d0>
 8104666:	2d04      	cmp	r5, #4
 8104668:	f47f af48 	bne.w	81044fc <_scanf_float+0x60>
 810466c:	3501      	adds	r5, #1
 810466e:	b2ed      	uxtb	r5, r5
 8104670:	e7d8      	b.n	8104624 <_scanf_float+0x188>
 8104672:	f1ba 0f01 	cmp.w	sl, #1
 8104676:	f47f af41 	bne.w	81044fc <_scanf_float+0x60>
 810467a:	f04f 0a02 	mov.w	sl, #2
 810467e:	e7d1      	b.n	8104624 <_scanf_float+0x188>
 8104680:	b97d      	cbnz	r5, 81046a2 <_scanf_float+0x206>
 8104682:	f1b9 0f00 	cmp.w	r9, #0
 8104686:	f47f af3c 	bne.w	8104502 <_scanf_float+0x66>
 810468a:	6822      	ldr	r2, [r4, #0]
 810468c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8104690:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8104694:	f47f af39 	bne.w	810450a <_scanf_float+0x6e>
 8104698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810469c:	6022      	str	r2, [r4, #0]
 810469e:	2501      	movs	r5, #1
 81046a0:	e7c0      	b.n	8104624 <_scanf_float+0x188>
 81046a2:	2d03      	cmp	r5, #3
 81046a4:	d0e2      	beq.n	810466c <_scanf_float+0x1d0>
 81046a6:	2d05      	cmp	r5, #5
 81046a8:	e7de      	b.n	8104668 <_scanf_float+0x1cc>
 81046aa:	2d02      	cmp	r5, #2
 81046ac:	f47f af26 	bne.w	81044fc <_scanf_float+0x60>
 81046b0:	2503      	movs	r5, #3
 81046b2:	e7b7      	b.n	8104624 <_scanf_float+0x188>
 81046b4:	2d06      	cmp	r5, #6
 81046b6:	f47f af21 	bne.w	81044fc <_scanf_float+0x60>
 81046ba:	2507      	movs	r5, #7
 81046bc:	e7b2      	b.n	8104624 <_scanf_float+0x188>
 81046be:	6822      	ldr	r2, [r4, #0]
 81046c0:	0591      	lsls	r1, r2, #22
 81046c2:	f57f af1b 	bpl.w	81044fc <_scanf_float+0x60>
 81046c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81046ca:	6022      	str	r2, [r4, #0]
 81046cc:	f8cd 9004 	str.w	r9, [sp, #4]
 81046d0:	e7a8      	b.n	8104624 <_scanf_float+0x188>
 81046d2:	6822      	ldr	r2, [r4, #0]
 81046d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81046d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81046dc:	d006      	beq.n	81046ec <_scanf_float+0x250>
 81046de:	0550      	lsls	r0, r2, #21
 81046e0:	f57f af0c 	bpl.w	81044fc <_scanf_float+0x60>
 81046e4:	f1b9 0f00 	cmp.w	r9, #0
 81046e8:	f43f af0f 	beq.w	810450a <_scanf_float+0x6e>
 81046ec:	0591      	lsls	r1, r2, #22
 81046ee:	bf58      	it	pl
 81046f0:	9901      	ldrpl	r1, [sp, #4]
 81046f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81046f6:	bf58      	it	pl
 81046f8:	eba9 0101 	subpl.w	r1, r9, r1
 81046fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8104700:	bf58      	it	pl
 8104702:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8104706:	6022      	str	r2, [r4, #0]
 8104708:	f04f 0900 	mov.w	r9, #0
 810470c:	e78a      	b.n	8104624 <_scanf_float+0x188>
 810470e:	f04f 0a03 	mov.w	sl, #3
 8104712:	e787      	b.n	8104624 <_scanf_float+0x188>
 8104714:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8104718:	4639      	mov	r1, r7
 810471a:	4640      	mov	r0, r8
 810471c:	4798      	blx	r3
 810471e:	2800      	cmp	r0, #0
 8104720:	f43f aedf 	beq.w	81044e2 <_scanf_float+0x46>
 8104724:	e6ea      	b.n	81044fc <_scanf_float+0x60>
 8104726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810472a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810472e:	463a      	mov	r2, r7
 8104730:	4640      	mov	r0, r8
 8104732:	4798      	blx	r3
 8104734:	6923      	ldr	r3, [r4, #16]
 8104736:	3b01      	subs	r3, #1
 8104738:	6123      	str	r3, [r4, #16]
 810473a:	e6ec      	b.n	8104516 <_scanf_float+0x7a>
 810473c:	1e6b      	subs	r3, r5, #1
 810473e:	2b06      	cmp	r3, #6
 8104740:	d825      	bhi.n	810478e <_scanf_float+0x2f2>
 8104742:	2d02      	cmp	r5, #2
 8104744:	d836      	bhi.n	81047b4 <_scanf_float+0x318>
 8104746:	455e      	cmp	r6, fp
 8104748:	f67f aee8 	bls.w	810451c <_scanf_float+0x80>
 810474c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8104750:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8104754:	463a      	mov	r2, r7
 8104756:	4640      	mov	r0, r8
 8104758:	4798      	blx	r3
 810475a:	6923      	ldr	r3, [r4, #16]
 810475c:	3b01      	subs	r3, #1
 810475e:	6123      	str	r3, [r4, #16]
 8104760:	e7f1      	b.n	8104746 <_scanf_float+0x2aa>
 8104762:	9802      	ldr	r0, [sp, #8]
 8104764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8104768:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810476c:	9002      	str	r0, [sp, #8]
 810476e:	463a      	mov	r2, r7
 8104770:	4640      	mov	r0, r8
 8104772:	4798      	blx	r3
 8104774:	6923      	ldr	r3, [r4, #16]
 8104776:	3b01      	subs	r3, #1
 8104778:	6123      	str	r3, [r4, #16]
 810477a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810477e:	fa5f fa8a 	uxtb.w	sl, sl
 8104782:	f1ba 0f02 	cmp.w	sl, #2
 8104786:	d1ec      	bne.n	8104762 <_scanf_float+0x2c6>
 8104788:	3d03      	subs	r5, #3
 810478a:	b2ed      	uxtb	r5, r5
 810478c:	1b76      	subs	r6, r6, r5
 810478e:	6823      	ldr	r3, [r4, #0]
 8104790:	05da      	lsls	r2, r3, #23
 8104792:	d52f      	bpl.n	81047f4 <_scanf_float+0x358>
 8104794:	055b      	lsls	r3, r3, #21
 8104796:	d510      	bpl.n	81047ba <_scanf_float+0x31e>
 8104798:	455e      	cmp	r6, fp
 810479a:	f67f aebf 	bls.w	810451c <_scanf_float+0x80>
 810479e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81047a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81047a6:	463a      	mov	r2, r7
 81047a8:	4640      	mov	r0, r8
 81047aa:	4798      	blx	r3
 81047ac:	6923      	ldr	r3, [r4, #16]
 81047ae:	3b01      	subs	r3, #1
 81047b0:	6123      	str	r3, [r4, #16]
 81047b2:	e7f1      	b.n	8104798 <_scanf_float+0x2fc>
 81047b4:	46aa      	mov	sl, r5
 81047b6:	9602      	str	r6, [sp, #8]
 81047b8:	e7df      	b.n	810477a <_scanf_float+0x2de>
 81047ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81047be:	6923      	ldr	r3, [r4, #16]
 81047c0:	2965      	cmp	r1, #101	; 0x65
 81047c2:	f103 33ff 	add.w	r3, r3, #4294967295
 81047c6:	f106 35ff 	add.w	r5, r6, #4294967295
 81047ca:	6123      	str	r3, [r4, #16]
 81047cc:	d00c      	beq.n	81047e8 <_scanf_float+0x34c>
 81047ce:	2945      	cmp	r1, #69	; 0x45
 81047d0:	d00a      	beq.n	81047e8 <_scanf_float+0x34c>
 81047d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81047d6:	463a      	mov	r2, r7
 81047d8:	4640      	mov	r0, r8
 81047da:	4798      	blx	r3
 81047dc:	6923      	ldr	r3, [r4, #16]
 81047de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81047e2:	3b01      	subs	r3, #1
 81047e4:	1eb5      	subs	r5, r6, #2
 81047e6:	6123      	str	r3, [r4, #16]
 81047e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81047ec:	463a      	mov	r2, r7
 81047ee:	4640      	mov	r0, r8
 81047f0:	4798      	blx	r3
 81047f2:	462e      	mov	r6, r5
 81047f4:	6825      	ldr	r5, [r4, #0]
 81047f6:	f015 0510 	ands.w	r5, r5, #16
 81047fa:	d159      	bne.n	81048b0 <_scanf_float+0x414>
 81047fc:	7035      	strb	r5, [r6, #0]
 81047fe:	6823      	ldr	r3, [r4, #0]
 8104800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8104804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104808:	d11b      	bne.n	8104842 <_scanf_float+0x3a6>
 810480a:	9b01      	ldr	r3, [sp, #4]
 810480c:	454b      	cmp	r3, r9
 810480e:	eba3 0209 	sub.w	r2, r3, r9
 8104812:	d123      	bne.n	810485c <_scanf_float+0x3c0>
 8104814:	2200      	movs	r2, #0
 8104816:	4659      	mov	r1, fp
 8104818:	4640      	mov	r0, r8
 810481a:	f000 feaf 	bl	810557c <_strtod_r>
 810481e:	6822      	ldr	r2, [r4, #0]
 8104820:	9b03      	ldr	r3, [sp, #12]
 8104822:	f012 0f02 	tst.w	r2, #2
 8104826:	ec57 6b10 	vmov	r6, r7, d0
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	d021      	beq.n	8104872 <_scanf_float+0x3d6>
 810482e:	9903      	ldr	r1, [sp, #12]
 8104830:	1d1a      	adds	r2, r3, #4
 8104832:	600a      	str	r2, [r1, #0]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	e9c3 6700 	strd	r6, r7, [r3]
 810483a:	68e3      	ldr	r3, [r4, #12]
 810483c:	3301      	adds	r3, #1
 810483e:	60e3      	str	r3, [r4, #12]
 8104840:	e66d      	b.n	810451e <_scanf_float+0x82>
 8104842:	9b04      	ldr	r3, [sp, #16]
 8104844:	2b00      	cmp	r3, #0
 8104846:	d0e5      	beq.n	8104814 <_scanf_float+0x378>
 8104848:	9905      	ldr	r1, [sp, #20]
 810484a:	230a      	movs	r3, #10
 810484c:	462a      	mov	r2, r5
 810484e:	3101      	adds	r1, #1
 8104850:	4640      	mov	r0, r8
 8104852:	f000 ff1b 	bl	810568c <_strtol_r>
 8104856:	9b04      	ldr	r3, [sp, #16]
 8104858:	9e05      	ldr	r6, [sp, #20]
 810485a:	1ac2      	subs	r2, r0, r3
 810485c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8104860:	429e      	cmp	r6, r3
 8104862:	bf28      	it	cs
 8104864:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8104868:	4912      	ldr	r1, [pc, #72]	; (81048b4 <_scanf_float+0x418>)
 810486a:	4630      	mov	r0, r6
 810486c:	f000 f844 	bl	81048f8 <siprintf>
 8104870:	e7d0      	b.n	8104814 <_scanf_float+0x378>
 8104872:	9903      	ldr	r1, [sp, #12]
 8104874:	f012 0f04 	tst.w	r2, #4
 8104878:	f103 0204 	add.w	r2, r3, #4
 810487c:	600a      	str	r2, [r1, #0]
 810487e:	d1d9      	bne.n	8104834 <_scanf_float+0x398>
 8104880:	f8d3 8000 	ldr.w	r8, [r3]
 8104884:	ee10 2a10 	vmov	r2, s0
 8104888:	ee10 0a10 	vmov	r0, s0
 810488c:	463b      	mov	r3, r7
 810488e:	4639      	mov	r1, r7
 8104890:	f7fc f9d4 	bl	8100c3c <__aeabi_dcmpun>
 8104894:	b128      	cbz	r0, 81048a2 <_scanf_float+0x406>
 8104896:	4808      	ldr	r0, [pc, #32]	; (81048b8 <_scanf_float+0x41c>)
 8104898:	f000 f828 	bl	81048ec <nanf>
 810489c:	ed88 0a00 	vstr	s0, [r8]
 81048a0:	e7cb      	b.n	810483a <_scanf_float+0x39e>
 81048a2:	4630      	mov	r0, r6
 81048a4:	4639      	mov	r1, r7
 81048a6:	f7fc fa27 	bl	8100cf8 <__aeabi_d2f>
 81048aa:	f8c8 0000 	str.w	r0, [r8]
 81048ae:	e7c4      	b.n	810483a <_scanf_float+0x39e>
 81048b0:	2500      	movs	r5, #0
 81048b2:	e634      	b.n	810451e <_scanf_float+0x82>
 81048b4:	081085a0 	.word	0x081085a0
 81048b8:	08108a10 	.word	0x08108a10

081048bc <iprintf>:
 81048bc:	b40f      	push	{r0, r1, r2, r3}
 81048be:	4b0a      	ldr	r3, [pc, #40]	; (81048e8 <iprintf+0x2c>)
 81048c0:	b513      	push	{r0, r1, r4, lr}
 81048c2:	681c      	ldr	r4, [r3, #0]
 81048c4:	b124      	cbz	r4, 81048d0 <iprintf+0x14>
 81048c6:	69a3      	ldr	r3, [r4, #24]
 81048c8:	b913      	cbnz	r3, 81048d0 <iprintf+0x14>
 81048ca:	4620      	mov	r0, r4
 81048cc:	f001 fdb2 	bl	8106434 <__sinit>
 81048d0:	ab05      	add	r3, sp, #20
 81048d2:	9a04      	ldr	r2, [sp, #16]
 81048d4:	68a1      	ldr	r1, [r4, #8]
 81048d6:	9301      	str	r3, [sp, #4]
 81048d8:	4620      	mov	r0, r4
 81048da:	f003 f917 	bl	8107b0c <_vfiprintf_r>
 81048de:	b002      	add	sp, #8
 81048e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81048e4:	b004      	add	sp, #16
 81048e6:	4770      	bx	lr
 81048e8:	10000018 	.word	0x10000018

081048ec <nanf>:
 81048ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 81048f4 <nanf+0x8>
 81048f0:	4770      	bx	lr
 81048f2:	bf00      	nop
 81048f4:	7fc00000 	.word	0x7fc00000

081048f8 <siprintf>:
 81048f8:	b40e      	push	{r1, r2, r3}
 81048fa:	b500      	push	{lr}
 81048fc:	b09c      	sub	sp, #112	; 0x70
 81048fe:	ab1d      	add	r3, sp, #116	; 0x74
 8104900:	9002      	str	r0, [sp, #8]
 8104902:	9006      	str	r0, [sp, #24]
 8104904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8104908:	4809      	ldr	r0, [pc, #36]	; (8104930 <siprintf+0x38>)
 810490a:	9107      	str	r1, [sp, #28]
 810490c:	9104      	str	r1, [sp, #16]
 810490e:	4909      	ldr	r1, [pc, #36]	; (8104934 <siprintf+0x3c>)
 8104910:	f853 2b04 	ldr.w	r2, [r3], #4
 8104914:	9105      	str	r1, [sp, #20]
 8104916:	6800      	ldr	r0, [r0, #0]
 8104918:	9301      	str	r3, [sp, #4]
 810491a:	a902      	add	r1, sp, #8
 810491c:	f002 ffcc 	bl	81078b8 <_svfiprintf_r>
 8104920:	9b02      	ldr	r3, [sp, #8]
 8104922:	2200      	movs	r2, #0
 8104924:	701a      	strb	r2, [r3, #0]
 8104926:	b01c      	add	sp, #112	; 0x70
 8104928:	f85d eb04 	ldr.w	lr, [sp], #4
 810492c:	b003      	add	sp, #12
 810492e:	4770      	bx	lr
 8104930:	10000018 	.word	0x10000018
 8104934:	ffff0208 	.word	0xffff0208

08104938 <sulp>:
 8104938:	b570      	push	{r4, r5, r6, lr}
 810493a:	4604      	mov	r4, r0
 810493c:	460d      	mov	r5, r1
 810493e:	ec45 4b10 	vmov	d0, r4, r5
 8104942:	4616      	mov	r6, r2
 8104944:	f002 fd16 	bl	8107374 <__ulp>
 8104948:	ec51 0b10 	vmov	r0, r1, d0
 810494c:	b17e      	cbz	r6, 810496e <sulp+0x36>
 810494e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8104952:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8104956:	2b00      	cmp	r3, #0
 8104958:	dd09      	ble.n	810496e <sulp+0x36>
 810495a:	051b      	lsls	r3, r3, #20
 810495c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8104960:	2400      	movs	r4, #0
 8104962:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8104966:	4622      	mov	r2, r4
 8104968:	462b      	mov	r3, r5
 810496a:	f7fb fecd 	bl	8100708 <__aeabi_dmul>
 810496e:	bd70      	pop	{r4, r5, r6, pc}

08104970 <_strtod_l>:
 8104970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104974:	ed2d 8b02 	vpush	{d8}
 8104978:	b09d      	sub	sp, #116	; 0x74
 810497a:	461f      	mov	r7, r3
 810497c:	2300      	movs	r3, #0
 810497e:	9318      	str	r3, [sp, #96]	; 0x60
 8104980:	4ba2      	ldr	r3, [pc, #648]	; (8104c0c <_strtod_l+0x29c>)
 8104982:	9213      	str	r2, [sp, #76]	; 0x4c
 8104984:	681b      	ldr	r3, [r3, #0]
 8104986:	9305      	str	r3, [sp, #20]
 8104988:	4604      	mov	r4, r0
 810498a:	4618      	mov	r0, r3
 810498c:	4688      	mov	r8, r1
 810498e:	f7fb fca7 	bl	81002e0 <strlen>
 8104992:	f04f 0a00 	mov.w	sl, #0
 8104996:	4605      	mov	r5, r0
 8104998:	f04f 0b00 	mov.w	fp, #0
 810499c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81049a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81049a2:	781a      	ldrb	r2, [r3, #0]
 81049a4:	2a2b      	cmp	r2, #43	; 0x2b
 81049a6:	d04e      	beq.n	8104a46 <_strtod_l+0xd6>
 81049a8:	d83b      	bhi.n	8104a22 <_strtod_l+0xb2>
 81049aa:	2a0d      	cmp	r2, #13
 81049ac:	d834      	bhi.n	8104a18 <_strtod_l+0xa8>
 81049ae:	2a08      	cmp	r2, #8
 81049b0:	d834      	bhi.n	8104a1c <_strtod_l+0xac>
 81049b2:	2a00      	cmp	r2, #0
 81049b4:	d03e      	beq.n	8104a34 <_strtod_l+0xc4>
 81049b6:	2300      	movs	r3, #0
 81049b8:	930a      	str	r3, [sp, #40]	; 0x28
 81049ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 81049bc:	7833      	ldrb	r3, [r6, #0]
 81049be:	2b30      	cmp	r3, #48	; 0x30
 81049c0:	f040 80b0 	bne.w	8104b24 <_strtod_l+0x1b4>
 81049c4:	7873      	ldrb	r3, [r6, #1]
 81049c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81049ca:	2b58      	cmp	r3, #88	; 0x58
 81049cc:	d168      	bne.n	8104aa0 <_strtod_l+0x130>
 81049ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81049d0:	9301      	str	r3, [sp, #4]
 81049d2:	ab18      	add	r3, sp, #96	; 0x60
 81049d4:	9702      	str	r7, [sp, #8]
 81049d6:	9300      	str	r3, [sp, #0]
 81049d8:	4a8d      	ldr	r2, [pc, #564]	; (8104c10 <_strtod_l+0x2a0>)
 81049da:	ab19      	add	r3, sp, #100	; 0x64
 81049dc:	a917      	add	r1, sp, #92	; 0x5c
 81049de:	4620      	mov	r0, r4
 81049e0:	f001 fe2c 	bl	810663c <__gethex>
 81049e4:	f010 0707 	ands.w	r7, r0, #7
 81049e8:	4605      	mov	r5, r0
 81049ea:	d005      	beq.n	81049f8 <_strtod_l+0x88>
 81049ec:	2f06      	cmp	r7, #6
 81049ee:	d12c      	bne.n	8104a4a <_strtod_l+0xda>
 81049f0:	3601      	adds	r6, #1
 81049f2:	2300      	movs	r3, #0
 81049f4:	9617      	str	r6, [sp, #92]	; 0x5c
 81049f6:	930a      	str	r3, [sp, #40]	; 0x28
 81049f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81049fa:	2b00      	cmp	r3, #0
 81049fc:	f040 8590 	bne.w	8105520 <_strtod_l+0xbb0>
 8104a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104a02:	b1eb      	cbz	r3, 8104a40 <_strtod_l+0xd0>
 8104a04:	4652      	mov	r2, sl
 8104a06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8104a0a:	ec43 2b10 	vmov	d0, r2, r3
 8104a0e:	b01d      	add	sp, #116	; 0x74
 8104a10:	ecbd 8b02 	vpop	{d8}
 8104a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104a18:	2a20      	cmp	r2, #32
 8104a1a:	d1cc      	bne.n	81049b6 <_strtod_l+0x46>
 8104a1c:	3301      	adds	r3, #1
 8104a1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8104a20:	e7be      	b.n	81049a0 <_strtod_l+0x30>
 8104a22:	2a2d      	cmp	r2, #45	; 0x2d
 8104a24:	d1c7      	bne.n	81049b6 <_strtod_l+0x46>
 8104a26:	2201      	movs	r2, #1
 8104a28:	920a      	str	r2, [sp, #40]	; 0x28
 8104a2a:	1c5a      	adds	r2, r3, #1
 8104a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8104a2e:	785b      	ldrb	r3, [r3, #1]
 8104a30:	2b00      	cmp	r3, #0
 8104a32:	d1c2      	bne.n	81049ba <_strtod_l+0x4a>
 8104a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8104a36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	f040 856e 	bne.w	810551c <_strtod_l+0xbac>
 8104a40:	4652      	mov	r2, sl
 8104a42:	465b      	mov	r3, fp
 8104a44:	e7e1      	b.n	8104a0a <_strtod_l+0x9a>
 8104a46:	2200      	movs	r2, #0
 8104a48:	e7ee      	b.n	8104a28 <_strtod_l+0xb8>
 8104a4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8104a4c:	b13a      	cbz	r2, 8104a5e <_strtod_l+0xee>
 8104a4e:	2135      	movs	r1, #53	; 0x35
 8104a50:	a81a      	add	r0, sp, #104	; 0x68
 8104a52:	f002 fd9a 	bl	810758a <__copybits>
 8104a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8104a58:	4620      	mov	r0, r4
 8104a5a:	f002 f959 	bl	8106d10 <_Bfree>
 8104a5e:	3f01      	subs	r7, #1
 8104a60:	2f04      	cmp	r7, #4
 8104a62:	d806      	bhi.n	8104a72 <_strtod_l+0x102>
 8104a64:	e8df f007 	tbb	[pc, r7]
 8104a68:	1714030a 	.word	0x1714030a
 8104a6c:	0a          	.byte	0x0a
 8104a6d:	00          	.byte	0x00
 8104a6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8104a72:	0728      	lsls	r0, r5, #28
 8104a74:	d5c0      	bpl.n	81049f8 <_strtod_l+0x88>
 8104a76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8104a7a:	e7bd      	b.n	81049f8 <_strtod_l+0x88>
 8104a7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8104a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8104a82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8104a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8104a8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8104a8e:	e7f0      	b.n	8104a72 <_strtod_l+0x102>
 8104a90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8104c14 <_strtod_l+0x2a4>
 8104a94:	e7ed      	b.n	8104a72 <_strtod_l+0x102>
 8104a96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8104a9a:	f04f 3aff 	mov.w	sl, #4294967295
 8104a9e:	e7e8      	b.n	8104a72 <_strtod_l+0x102>
 8104aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104aa2:	1c5a      	adds	r2, r3, #1
 8104aa4:	9217      	str	r2, [sp, #92]	; 0x5c
 8104aa6:	785b      	ldrb	r3, [r3, #1]
 8104aa8:	2b30      	cmp	r3, #48	; 0x30
 8104aaa:	d0f9      	beq.n	8104aa0 <_strtod_l+0x130>
 8104aac:	2b00      	cmp	r3, #0
 8104aae:	d0a3      	beq.n	81049f8 <_strtod_l+0x88>
 8104ab0:	2301      	movs	r3, #1
 8104ab2:	f04f 0900 	mov.w	r9, #0
 8104ab6:	9304      	str	r3, [sp, #16]
 8104ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104aba:	9308      	str	r3, [sp, #32]
 8104abc:	f8cd 901c 	str.w	r9, [sp, #28]
 8104ac0:	464f      	mov	r7, r9
 8104ac2:	220a      	movs	r2, #10
 8104ac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8104ac6:	7806      	ldrb	r6, [r0, #0]
 8104ac8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8104acc:	b2d9      	uxtb	r1, r3
 8104ace:	2909      	cmp	r1, #9
 8104ad0:	d92a      	bls.n	8104b28 <_strtod_l+0x1b8>
 8104ad2:	9905      	ldr	r1, [sp, #20]
 8104ad4:	462a      	mov	r2, r5
 8104ad6:	f003 f9a6 	bl	8107e26 <strncmp>
 8104ada:	b398      	cbz	r0, 8104b44 <_strtod_l+0x1d4>
 8104adc:	2000      	movs	r0, #0
 8104ade:	4632      	mov	r2, r6
 8104ae0:	463d      	mov	r5, r7
 8104ae2:	9005      	str	r0, [sp, #20]
 8104ae4:	4603      	mov	r3, r0
 8104ae6:	2a65      	cmp	r2, #101	; 0x65
 8104ae8:	d001      	beq.n	8104aee <_strtod_l+0x17e>
 8104aea:	2a45      	cmp	r2, #69	; 0x45
 8104aec:	d118      	bne.n	8104b20 <_strtod_l+0x1b0>
 8104aee:	b91d      	cbnz	r5, 8104af8 <_strtod_l+0x188>
 8104af0:	9a04      	ldr	r2, [sp, #16]
 8104af2:	4302      	orrs	r2, r0
 8104af4:	d09e      	beq.n	8104a34 <_strtod_l+0xc4>
 8104af6:	2500      	movs	r5, #0
 8104af8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8104afc:	f108 0201 	add.w	r2, r8, #1
 8104b00:	9217      	str	r2, [sp, #92]	; 0x5c
 8104b02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8104b06:	2a2b      	cmp	r2, #43	; 0x2b
 8104b08:	d075      	beq.n	8104bf6 <_strtod_l+0x286>
 8104b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8104b0c:	d07b      	beq.n	8104c06 <_strtod_l+0x296>
 8104b0e:	f04f 0c00 	mov.w	ip, #0
 8104b12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8104b16:	2909      	cmp	r1, #9
 8104b18:	f240 8082 	bls.w	8104c20 <_strtod_l+0x2b0>
 8104b1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8104b20:	2600      	movs	r6, #0
 8104b22:	e09d      	b.n	8104c60 <_strtod_l+0x2f0>
 8104b24:	2300      	movs	r3, #0
 8104b26:	e7c4      	b.n	8104ab2 <_strtod_l+0x142>
 8104b28:	2f08      	cmp	r7, #8
 8104b2a:	bfd8      	it	le
 8104b2c:	9907      	ldrle	r1, [sp, #28]
 8104b2e:	f100 0001 	add.w	r0, r0, #1
 8104b32:	bfda      	itte	le
 8104b34:	fb02 3301 	mlale	r3, r2, r1, r3
 8104b38:	9307      	strle	r3, [sp, #28]
 8104b3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8104b3e:	3701      	adds	r7, #1
 8104b40:	9017      	str	r0, [sp, #92]	; 0x5c
 8104b42:	e7bf      	b.n	8104ac4 <_strtod_l+0x154>
 8104b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104b46:	195a      	adds	r2, r3, r5
 8104b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8104b4a:	5d5a      	ldrb	r2, [r3, r5]
 8104b4c:	2f00      	cmp	r7, #0
 8104b4e:	d037      	beq.n	8104bc0 <_strtod_l+0x250>
 8104b50:	9005      	str	r0, [sp, #20]
 8104b52:	463d      	mov	r5, r7
 8104b54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8104b58:	2b09      	cmp	r3, #9
 8104b5a:	d912      	bls.n	8104b82 <_strtod_l+0x212>
 8104b5c:	2301      	movs	r3, #1
 8104b5e:	e7c2      	b.n	8104ae6 <_strtod_l+0x176>
 8104b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104b62:	1c5a      	adds	r2, r3, #1
 8104b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8104b66:	785a      	ldrb	r2, [r3, #1]
 8104b68:	3001      	adds	r0, #1
 8104b6a:	2a30      	cmp	r2, #48	; 0x30
 8104b6c:	d0f8      	beq.n	8104b60 <_strtod_l+0x1f0>
 8104b6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8104b72:	2b08      	cmp	r3, #8
 8104b74:	f200 84d9 	bhi.w	810552a <_strtod_l+0xbba>
 8104b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104b7a:	9005      	str	r0, [sp, #20]
 8104b7c:	2000      	movs	r0, #0
 8104b7e:	9308      	str	r3, [sp, #32]
 8104b80:	4605      	mov	r5, r0
 8104b82:	3a30      	subs	r2, #48	; 0x30
 8104b84:	f100 0301 	add.w	r3, r0, #1
 8104b88:	d014      	beq.n	8104bb4 <_strtod_l+0x244>
 8104b8a:	9905      	ldr	r1, [sp, #20]
 8104b8c:	4419      	add	r1, r3
 8104b8e:	9105      	str	r1, [sp, #20]
 8104b90:	462b      	mov	r3, r5
 8104b92:	eb00 0e05 	add.w	lr, r0, r5
 8104b96:	210a      	movs	r1, #10
 8104b98:	4573      	cmp	r3, lr
 8104b9a:	d113      	bne.n	8104bc4 <_strtod_l+0x254>
 8104b9c:	182b      	adds	r3, r5, r0
 8104b9e:	2b08      	cmp	r3, #8
 8104ba0:	f105 0501 	add.w	r5, r5, #1
 8104ba4:	4405      	add	r5, r0
 8104ba6:	dc1c      	bgt.n	8104be2 <_strtod_l+0x272>
 8104ba8:	9907      	ldr	r1, [sp, #28]
 8104baa:	230a      	movs	r3, #10
 8104bac:	fb03 2301 	mla	r3, r3, r1, r2
 8104bb0:	9307      	str	r3, [sp, #28]
 8104bb2:	2300      	movs	r3, #0
 8104bb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8104bb6:	1c51      	adds	r1, r2, #1
 8104bb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8104bba:	7852      	ldrb	r2, [r2, #1]
 8104bbc:	4618      	mov	r0, r3
 8104bbe:	e7c9      	b.n	8104b54 <_strtod_l+0x1e4>
 8104bc0:	4638      	mov	r0, r7
 8104bc2:	e7d2      	b.n	8104b6a <_strtod_l+0x1fa>
 8104bc4:	2b08      	cmp	r3, #8
 8104bc6:	dc04      	bgt.n	8104bd2 <_strtod_l+0x262>
 8104bc8:	9e07      	ldr	r6, [sp, #28]
 8104bca:	434e      	muls	r6, r1
 8104bcc:	9607      	str	r6, [sp, #28]
 8104bce:	3301      	adds	r3, #1
 8104bd0:	e7e2      	b.n	8104b98 <_strtod_l+0x228>
 8104bd2:	f103 0c01 	add.w	ip, r3, #1
 8104bd6:	f1bc 0f10 	cmp.w	ip, #16
 8104bda:	bfd8      	it	le
 8104bdc:	fb01 f909 	mulle.w	r9, r1, r9
 8104be0:	e7f5      	b.n	8104bce <_strtod_l+0x25e>
 8104be2:	2d10      	cmp	r5, #16
 8104be4:	bfdc      	itt	le
 8104be6:	230a      	movle	r3, #10
 8104be8:	fb03 2909 	mlale	r9, r3, r9, r2
 8104bec:	e7e1      	b.n	8104bb2 <_strtod_l+0x242>
 8104bee:	2300      	movs	r3, #0
 8104bf0:	9305      	str	r3, [sp, #20]
 8104bf2:	2301      	movs	r3, #1
 8104bf4:	e77c      	b.n	8104af0 <_strtod_l+0x180>
 8104bf6:	f04f 0c00 	mov.w	ip, #0
 8104bfa:	f108 0202 	add.w	r2, r8, #2
 8104bfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8104c00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8104c04:	e785      	b.n	8104b12 <_strtod_l+0x1a2>
 8104c06:	f04f 0c01 	mov.w	ip, #1
 8104c0a:	e7f6      	b.n	8104bfa <_strtod_l+0x28a>
 8104c0c:	08108854 	.word	0x08108854
 8104c10:	081085a8 	.word	0x081085a8
 8104c14:	7ff00000 	.word	0x7ff00000
 8104c18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8104c1a:	1c51      	adds	r1, r2, #1
 8104c1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8104c1e:	7852      	ldrb	r2, [r2, #1]
 8104c20:	2a30      	cmp	r2, #48	; 0x30
 8104c22:	d0f9      	beq.n	8104c18 <_strtod_l+0x2a8>
 8104c24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8104c28:	2908      	cmp	r1, #8
 8104c2a:	f63f af79 	bhi.w	8104b20 <_strtod_l+0x1b0>
 8104c2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8104c32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8104c34:	9206      	str	r2, [sp, #24]
 8104c36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8104c38:	1c51      	adds	r1, r2, #1
 8104c3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8104c3c:	7852      	ldrb	r2, [r2, #1]
 8104c3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8104c42:	2e09      	cmp	r6, #9
 8104c44:	d937      	bls.n	8104cb6 <_strtod_l+0x346>
 8104c46:	9e06      	ldr	r6, [sp, #24]
 8104c48:	1b89      	subs	r1, r1, r6
 8104c4a:	2908      	cmp	r1, #8
 8104c4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8104c50:	dc02      	bgt.n	8104c58 <_strtod_l+0x2e8>
 8104c52:	4576      	cmp	r6, lr
 8104c54:	bfa8      	it	ge
 8104c56:	4676      	movge	r6, lr
 8104c58:	f1bc 0f00 	cmp.w	ip, #0
 8104c5c:	d000      	beq.n	8104c60 <_strtod_l+0x2f0>
 8104c5e:	4276      	negs	r6, r6
 8104c60:	2d00      	cmp	r5, #0
 8104c62:	d14d      	bne.n	8104d00 <_strtod_l+0x390>
 8104c64:	9904      	ldr	r1, [sp, #16]
 8104c66:	4301      	orrs	r1, r0
 8104c68:	f47f aec6 	bne.w	81049f8 <_strtod_l+0x88>
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	f47f aee1 	bne.w	8104a34 <_strtod_l+0xc4>
 8104c72:	2a69      	cmp	r2, #105	; 0x69
 8104c74:	d027      	beq.n	8104cc6 <_strtod_l+0x356>
 8104c76:	dc24      	bgt.n	8104cc2 <_strtod_l+0x352>
 8104c78:	2a49      	cmp	r2, #73	; 0x49
 8104c7a:	d024      	beq.n	8104cc6 <_strtod_l+0x356>
 8104c7c:	2a4e      	cmp	r2, #78	; 0x4e
 8104c7e:	f47f aed9 	bne.w	8104a34 <_strtod_l+0xc4>
 8104c82:	499f      	ldr	r1, [pc, #636]	; (8104f00 <_strtod_l+0x590>)
 8104c84:	a817      	add	r0, sp, #92	; 0x5c
 8104c86:	f001 ff31 	bl	8106aec <__match>
 8104c8a:	2800      	cmp	r0, #0
 8104c8c:	f43f aed2 	beq.w	8104a34 <_strtod_l+0xc4>
 8104c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104c92:	781b      	ldrb	r3, [r3, #0]
 8104c94:	2b28      	cmp	r3, #40	; 0x28
 8104c96:	d12d      	bne.n	8104cf4 <_strtod_l+0x384>
 8104c98:	499a      	ldr	r1, [pc, #616]	; (8104f04 <_strtod_l+0x594>)
 8104c9a:	aa1a      	add	r2, sp, #104	; 0x68
 8104c9c:	a817      	add	r0, sp, #92	; 0x5c
 8104c9e:	f001 ff39 	bl	8106b14 <__hexnan>
 8104ca2:	2805      	cmp	r0, #5
 8104ca4:	d126      	bne.n	8104cf4 <_strtod_l+0x384>
 8104ca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8104ca8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8104cac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8104cb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8104cb4:	e6a0      	b.n	81049f8 <_strtod_l+0x88>
 8104cb6:	210a      	movs	r1, #10
 8104cb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8104cbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8104cc0:	e7b9      	b.n	8104c36 <_strtod_l+0x2c6>
 8104cc2:	2a6e      	cmp	r2, #110	; 0x6e
 8104cc4:	e7db      	b.n	8104c7e <_strtod_l+0x30e>
 8104cc6:	4990      	ldr	r1, [pc, #576]	; (8104f08 <_strtod_l+0x598>)
 8104cc8:	a817      	add	r0, sp, #92	; 0x5c
 8104cca:	f001 ff0f 	bl	8106aec <__match>
 8104cce:	2800      	cmp	r0, #0
 8104cd0:	f43f aeb0 	beq.w	8104a34 <_strtod_l+0xc4>
 8104cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104cd6:	498d      	ldr	r1, [pc, #564]	; (8104f0c <_strtod_l+0x59c>)
 8104cd8:	3b01      	subs	r3, #1
 8104cda:	a817      	add	r0, sp, #92	; 0x5c
 8104cdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8104cde:	f001 ff05 	bl	8106aec <__match>
 8104ce2:	b910      	cbnz	r0, 8104cea <_strtod_l+0x37a>
 8104ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8104ce6:	3301      	adds	r3, #1
 8104ce8:	9317      	str	r3, [sp, #92]	; 0x5c
 8104cea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8104f1c <_strtod_l+0x5ac>
 8104cee:	f04f 0a00 	mov.w	sl, #0
 8104cf2:	e681      	b.n	81049f8 <_strtod_l+0x88>
 8104cf4:	4886      	ldr	r0, [pc, #536]	; (8104f10 <_strtod_l+0x5a0>)
 8104cf6:	f003 f83b 	bl	8107d70 <nan>
 8104cfa:	ec5b ab10 	vmov	sl, fp, d0
 8104cfe:	e67b      	b.n	81049f8 <_strtod_l+0x88>
 8104d00:	9b05      	ldr	r3, [sp, #20]
 8104d02:	9807      	ldr	r0, [sp, #28]
 8104d04:	1af3      	subs	r3, r6, r3
 8104d06:	2f00      	cmp	r7, #0
 8104d08:	bf08      	it	eq
 8104d0a:	462f      	moveq	r7, r5
 8104d0c:	2d10      	cmp	r5, #16
 8104d0e:	9306      	str	r3, [sp, #24]
 8104d10:	46a8      	mov	r8, r5
 8104d12:	bfa8      	it	ge
 8104d14:	f04f 0810 	movge.w	r8, #16
 8104d18:	f7fb fc7c 	bl	8100614 <__aeabi_ui2d>
 8104d1c:	2d09      	cmp	r5, #9
 8104d1e:	4682      	mov	sl, r0
 8104d20:	468b      	mov	fp, r1
 8104d22:	dd13      	ble.n	8104d4c <_strtod_l+0x3dc>
 8104d24:	4b7b      	ldr	r3, [pc, #492]	; (8104f14 <_strtod_l+0x5a4>)
 8104d26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8104d2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8104d2e:	f7fb fceb 	bl	8100708 <__aeabi_dmul>
 8104d32:	4682      	mov	sl, r0
 8104d34:	4648      	mov	r0, r9
 8104d36:	468b      	mov	fp, r1
 8104d38:	f7fb fc6c 	bl	8100614 <__aeabi_ui2d>
 8104d3c:	4602      	mov	r2, r0
 8104d3e:	460b      	mov	r3, r1
 8104d40:	4650      	mov	r0, sl
 8104d42:	4659      	mov	r1, fp
 8104d44:	f7fb fb2a 	bl	810039c <__adddf3>
 8104d48:	4682      	mov	sl, r0
 8104d4a:	468b      	mov	fp, r1
 8104d4c:	2d0f      	cmp	r5, #15
 8104d4e:	dc38      	bgt.n	8104dc2 <_strtod_l+0x452>
 8104d50:	9b06      	ldr	r3, [sp, #24]
 8104d52:	2b00      	cmp	r3, #0
 8104d54:	f43f ae50 	beq.w	81049f8 <_strtod_l+0x88>
 8104d58:	dd24      	ble.n	8104da4 <_strtod_l+0x434>
 8104d5a:	2b16      	cmp	r3, #22
 8104d5c:	dc0b      	bgt.n	8104d76 <_strtod_l+0x406>
 8104d5e:	496d      	ldr	r1, [pc, #436]	; (8104f14 <_strtod_l+0x5a4>)
 8104d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8104d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104d68:	4652      	mov	r2, sl
 8104d6a:	465b      	mov	r3, fp
 8104d6c:	f7fb fccc 	bl	8100708 <__aeabi_dmul>
 8104d70:	4682      	mov	sl, r0
 8104d72:	468b      	mov	fp, r1
 8104d74:	e640      	b.n	81049f8 <_strtod_l+0x88>
 8104d76:	9a06      	ldr	r2, [sp, #24]
 8104d78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8104d7c:	4293      	cmp	r3, r2
 8104d7e:	db20      	blt.n	8104dc2 <_strtod_l+0x452>
 8104d80:	4c64      	ldr	r4, [pc, #400]	; (8104f14 <_strtod_l+0x5a4>)
 8104d82:	f1c5 050f 	rsb	r5, r5, #15
 8104d86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8104d8a:	4652      	mov	r2, sl
 8104d8c:	465b      	mov	r3, fp
 8104d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104d92:	f7fb fcb9 	bl	8100708 <__aeabi_dmul>
 8104d96:	9b06      	ldr	r3, [sp, #24]
 8104d98:	1b5d      	subs	r5, r3, r5
 8104d9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8104d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8104da2:	e7e3      	b.n	8104d6c <_strtod_l+0x3fc>
 8104da4:	9b06      	ldr	r3, [sp, #24]
 8104da6:	3316      	adds	r3, #22
 8104da8:	db0b      	blt.n	8104dc2 <_strtod_l+0x452>
 8104daa:	9b05      	ldr	r3, [sp, #20]
 8104dac:	1b9e      	subs	r6, r3, r6
 8104dae:	4b59      	ldr	r3, [pc, #356]	; (8104f14 <_strtod_l+0x5a4>)
 8104db0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8104db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8104db8:	4650      	mov	r0, sl
 8104dba:	4659      	mov	r1, fp
 8104dbc:	f7fb fdce 	bl	810095c <__aeabi_ddiv>
 8104dc0:	e7d6      	b.n	8104d70 <_strtod_l+0x400>
 8104dc2:	9b06      	ldr	r3, [sp, #24]
 8104dc4:	eba5 0808 	sub.w	r8, r5, r8
 8104dc8:	4498      	add	r8, r3
 8104dca:	f1b8 0f00 	cmp.w	r8, #0
 8104dce:	dd74      	ble.n	8104eba <_strtod_l+0x54a>
 8104dd0:	f018 030f 	ands.w	r3, r8, #15
 8104dd4:	d00a      	beq.n	8104dec <_strtod_l+0x47c>
 8104dd6:	494f      	ldr	r1, [pc, #316]	; (8104f14 <_strtod_l+0x5a4>)
 8104dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8104ddc:	4652      	mov	r2, sl
 8104dde:	465b      	mov	r3, fp
 8104de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104de4:	f7fb fc90 	bl	8100708 <__aeabi_dmul>
 8104de8:	4682      	mov	sl, r0
 8104dea:	468b      	mov	fp, r1
 8104dec:	f038 080f 	bics.w	r8, r8, #15
 8104df0:	d04f      	beq.n	8104e92 <_strtod_l+0x522>
 8104df2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8104df6:	dd22      	ble.n	8104e3e <_strtod_l+0x4ce>
 8104df8:	2500      	movs	r5, #0
 8104dfa:	462e      	mov	r6, r5
 8104dfc:	9507      	str	r5, [sp, #28]
 8104dfe:	9505      	str	r5, [sp, #20]
 8104e00:	2322      	movs	r3, #34	; 0x22
 8104e02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8104f1c <_strtod_l+0x5ac>
 8104e06:	6023      	str	r3, [r4, #0]
 8104e08:	f04f 0a00 	mov.w	sl, #0
 8104e0c:	9b07      	ldr	r3, [sp, #28]
 8104e0e:	2b00      	cmp	r3, #0
 8104e10:	f43f adf2 	beq.w	81049f8 <_strtod_l+0x88>
 8104e14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8104e16:	4620      	mov	r0, r4
 8104e18:	f001 ff7a 	bl	8106d10 <_Bfree>
 8104e1c:	9905      	ldr	r1, [sp, #20]
 8104e1e:	4620      	mov	r0, r4
 8104e20:	f001 ff76 	bl	8106d10 <_Bfree>
 8104e24:	4631      	mov	r1, r6
 8104e26:	4620      	mov	r0, r4
 8104e28:	f001 ff72 	bl	8106d10 <_Bfree>
 8104e2c:	9907      	ldr	r1, [sp, #28]
 8104e2e:	4620      	mov	r0, r4
 8104e30:	f001 ff6e 	bl	8106d10 <_Bfree>
 8104e34:	4629      	mov	r1, r5
 8104e36:	4620      	mov	r0, r4
 8104e38:	f001 ff6a 	bl	8106d10 <_Bfree>
 8104e3c:	e5dc      	b.n	81049f8 <_strtod_l+0x88>
 8104e3e:	4b36      	ldr	r3, [pc, #216]	; (8104f18 <_strtod_l+0x5a8>)
 8104e40:	9304      	str	r3, [sp, #16]
 8104e42:	2300      	movs	r3, #0
 8104e44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8104e48:	4650      	mov	r0, sl
 8104e4a:	4659      	mov	r1, fp
 8104e4c:	4699      	mov	r9, r3
 8104e4e:	f1b8 0f01 	cmp.w	r8, #1
 8104e52:	dc21      	bgt.n	8104e98 <_strtod_l+0x528>
 8104e54:	b10b      	cbz	r3, 8104e5a <_strtod_l+0x4ea>
 8104e56:	4682      	mov	sl, r0
 8104e58:	468b      	mov	fp, r1
 8104e5a:	4b2f      	ldr	r3, [pc, #188]	; (8104f18 <_strtod_l+0x5a8>)
 8104e5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8104e60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8104e64:	4652      	mov	r2, sl
 8104e66:	465b      	mov	r3, fp
 8104e68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8104e6c:	f7fb fc4c 	bl	8100708 <__aeabi_dmul>
 8104e70:	4b2a      	ldr	r3, [pc, #168]	; (8104f1c <_strtod_l+0x5ac>)
 8104e72:	460a      	mov	r2, r1
 8104e74:	400b      	ands	r3, r1
 8104e76:	492a      	ldr	r1, [pc, #168]	; (8104f20 <_strtod_l+0x5b0>)
 8104e78:	428b      	cmp	r3, r1
 8104e7a:	4682      	mov	sl, r0
 8104e7c:	d8bc      	bhi.n	8104df8 <_strtod_l+0x488>
 8104e7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8104e82:	428b      	cmp	r3, r1
 8104e84:	bf86      	itte	hi
 8104e86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8104f24 <_strtod_l+0x5b4>
 8104e8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8104e8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8104e92:	2300      	movs	r3, #0
 8104e94:	9304      	str	r3, [sp, #16]
 8104e96:	e084      	b.n	8104fa2 <_strtod_l+0x632>
 8104e98:	f018 0f01 	tst.w	r8, #1
 8104e9c:	d005      	beq.n	8104eaa <_strtod_l+0x53a>
 8104e9e:	9b04      	ldr	r3, [sp, #16]
 8104ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea4:	f7fb fc30 	bl	8100708 <__aeabi_dmul>
 8104ea8:	2301      	movs	r3, #1
 8104eaa:	9a04      	ldr	r2, [sp, #16]
 8104eac:	3208      	adds	r2, #8
 8104eae:	f109 0901 	add.w	r9, r9, #1
 8104eb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8104eb6:	9204      	str	r2, [sp, #16]
 8104eb8:	e7c9      	b.n	8104e4e <_strtod_l+0x4de>
 8104eba:	d0ea      	beq.n	8104e92 <_strtod_l+0x522>
 8104ebc:	f1c8 0800 	rsb	r8, r8, #0
 8104ec0:	f018 020f 	ands.w	r2, r8, #15
 8104ec4:	d00a      	beq.n	8104edc <_strtod_l+0x56c>
 8104ec6:	4b13      	ldr	r3, [pc, #76]	; (8104f14 <_strtod_l+0x5a4>)
 8104ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8104ecc:	4650      	mov	r0, sl
 8104ece:	4659      	mov	r1, fp
 8104ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ed4:	f7fb fd42 	bl	810095c <__aeabi_ddiv>
 8104ed8:	4682      	mov	sl, r0
 8104eda:	468b      	mov	fp, r1
 8104edc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8104ee0:	d0d7      	beq.n	8104e92 <_strtod_l+0x522>
 8104ee2:	f1b8 0f1f 	cmp.w	r8, #31
 8104ee6:	dd1f      	ble.n	8104f28 <_strtod_l+0x5b8>
 8104ee8:	2500      	movs	r5, #0
 8104eea:	462e      	mov	r6, r5
 8104eec:	9507      	str	r5, [sp, #28]
 8104eee:	9505      	str	r5, [sp, #20]
 8104ef0:	2322      	movs	r3, #34	; 0x22
 8104ef2:	f04f 0a00 	mov.w	sl, #0
 8104ef6:	f04f 0b00 	mov.w	fp, #0
 8104efa:	6023      	str	r3, [r4, #0]
 8104efc:	e786      	b.n	8104e0c <_strtod_l+0x49c>
 8104efe:	bf00      	nop
 8104f00:	08108579 	.word	0x08108579
 8104f04:	081085bc 	.word	0x081085bc
 8104f08:	08108571 	.word	0x08108571
 8104f0c:	081086fc 	.word	0x081086fc
 8104f10:	08108a10 	.word	0x08108a10
 8104f14:	081088f0 	.word	0x081088f0
 8104f18:	081088c8 	.word	0x081088c8
 8104f1c:	7ff00000 	.word	0x7ff00000
 8104f20:	7ca00000 	.word	0x7ca00000
 8104f24:	7fefffff 	.word	0x7fefffff
 8104f28:	f018 0310 	ands.w	r3, r8, #16
 8104f2c:	bf18      	it	ne
 8104f2e:	236a      	movne	r3, #106	; 0x6a
 8104f30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 81052e0 <_strtod_l+0x970>
 8104f34:	9304      	str	r3, [sp, #16]
 8104f36:	4650      	mov	r0, sl
 8104f38:	4659      	mov	r1, fp
 8104f3a:	2300      	movs	r3, #0
 8104f3c:	f018 0f01 	tst.w	r8, #1
 8104f40:	d004      	beq.n	8104f4c <_strtod_l+0x5dc>
 8104f42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8104f46:	f7fb fbdf 	bl	8100708 <__aeabi_dmul>
 8104f4a:	2301      	movs	r3, #1
 8104f4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8104f50:	f109 0908 	add.w	r9, r9, #8
 8104f54:	d1f2      	bne.n	8104f3c <_strtod_l+0x5cc>
 8104f56:	b10b      	cbz	r3, 8104f5c <_strtod_l+0x5ec>
 8104f58:	4682      	mov	sl, r0
 8104f5a:	468b      	mov	fp, r1
 8104f5c:	9b04      	ldr	r3, [sp, #16]
 8104f5e:	b1c3      	cbz	r3, 8104f92 <_strtod_l+0x622>
 8104f60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8104f64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8104f68:	2b00      	cmp	r3, #0
 8104f6a:	4659      	mov	r1, fp
 8104f6c:	dd11      	ble.n	8104f92 <_strtod_l+0x622>
 8104f6e:	2b1f      	cmp	r3, #31
 8104f70:	f340 8124 	ble.w	81051bc <_strtod_l+0x84c>
 8104f74:	2b34      	cmp	r3, #52	; 0x34
 8104f76:	bfde      	ittt	le
 8104f78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8104f7c:	f04f 33ff 	movle.w	r3, #4294967295
 8104f80:	fa03 f202 	lslle.w	r2, r3, r2
 8104f84:	f04f 0a00 	mov.w	sl, #0
 8104f88:	bfcc      	ite	gt
 8104f8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8104f8e:	ea02 0b01 	andle.w	fp, r2, r1
 8104f92:	2200      	movs	r2, #0
 8104f94:	2300      	movs	r3, #0
 8104f96:	4650      	mov	r0, sl
 8104f98:	4659      	mov	r1, fp
 8104f9a:	f7fb fe1d 	bl	8100bd8 <__aeabi_dcmpeq>
 8104f9e:	2800      	cmp	r0, #0
 8104fa0:	d1a2      	bne.n	8104ee8 <_strtod_l+0x578>
 8104fa2:	9b07      	ldr	r3, [sp, #28]
 8104fa4:	9300      	str	r3, [sp, #0]
 8104fa6:	9908      	ldr	r1, [sp, #32]
 8104fa8:	462b      	mov	r3, r5
 8104faa:	463a      	mov	r2, r7
 8104fac:	4620      	mov	r0, r4
 8104fae:	f001 ff17 	bl	8106de0 <__s2b>
 8104fb2:	9007      	str	r0, [sp, #28]
 8104fb4:	2800      	cmp	r0, #0
 8104fb6:	f43f af1f 	beq.w	8104df8 <_strtod_l+0x488>
 8104fba:	9b05      	ldr	r3, [sp, #20]
 8104fbc:	1b9e      	subs	r6, r3, r6
 8104fbe:	9b06      	ldr	r3, [sp, #24]
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	bfb4      	ite	lt
 8104fc4:	4633      	movlt	r3, r6
 8104fc6:	2300      	movge	r3, #0
 8104fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8104fca:	9b06      	ldr	r3, [sp, #24]
 8104fcc:	2500      	movs	r5, #0
 8104fce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8104fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8104fd4:	462e      	mov	r6, r5
 8104fd6:	9b07      	ldr	r3, [sp, #28]
 8104fd8:	4620      	mov	r0, r4
 8104fda:	6859      	ldr	r1, [r3, #4]
 8104fdc:	f001 fe58 	bl	8106c90 <_Balloc>
 8104fe0:	9005      	str	r0, [sp, #20]
 8104fe2:	2800      	cmp	r0, #0
 8104fe4:	f43f af0c 	beq.w	8104e00 <_strtod_l+0x490>
 8104fe8:	9b07      	ldr	r3, [sp, #28]
 8104fea:	691a      	ldr	r2, [r3, #16]
 8104fec:	3202      	adds	r2, #2
 8104fee:	f103 010c 	add.w	r1, r3, #12
 8104ff2:	0092      	lsls	r2, r2, #2
 8104ff4:	300c      	adds	r0, #12
 8104ff6:	f7fe fdd1 	bl	8103b9c <memcpy>
 8104ffa:	ec4b ab10 	vmov	d0, sl, fp
 8104ffe:	aa1a      	add	r2, sp, #104	; 0x68
 8105000:	a919      	add	r1, sp, #100	; 0x64
 8105002:	4620      	mov	r0, r4
 8105004:	f002 fa32 	bl	810746c <__d2b>
 8105008:	ec4b ab18 	vmov	d8, sl, fp
 810500c:	9018      	str	r0, [sp, #96]	; 0x60
 810500e:	2800      	cmp	r0, #0
 8105010:	f43f aef6 	beq.w	8104e00 <_strtod_l+0x490>
 8105014:	2101      	movs	r1, #1
 8105016:	4620      	mov	r0, r4
 8105018:	f001 ff7c 	bl	8106f14 <__i2b>
 810501c:	4606      	mov	r6, r0
 810501e:	2800      	cmp	r0, #0
 8105020:	f43f aeee 	beq.w	8104e00 <_strtod_l+0x490>
 8105024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8105026:	9904      	ldr	r1, [sp, #16]
 8105028:	2b00      	cmp	r3, #0
 810502a:	bfab      	itete	ge
 810502c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810502e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8105030:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8105032:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8105036:	bfac      	ite	ge
 8105038:	eb03 0902 	addge.w	r9, r3, r2
 810503c:	1ad7      	sublt	r7, r2, r3
 810503e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8105040:	eba3 0801 	sub.w	r8, r3, r1
 8105044:	4490      	add	r8, r2
 8105046:	4ba1      	ldr	r3, [pc, #644]	; (81052cc <_strtod_l+0x95c>)
 8105048:	f108 38ff 	add.w	r8, r8, #4294967295
 810504c:	4598      	cmp	r8, r3
 810504e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8105052:	f280 80c7 	bge.w	81051e4 <_strtod_l+0x874>
 8105056:	eba3 0308 	sub.w	r3, r3, r8
 810505a:	2b1f      	cmp	r3, #31
 810505c:	eba2 0203 	sub.w	r2, r2, r3
 8105060:	f04f 0101 	mov.w	r1, #1
 8105064:	f300 80b1 	bgt.w	81051ca <_strtod_l+0x85a>
 8105068:	fa01 f303 	lsl.w	r3, r1, r3
 810506c:	930d      	str	r3, [sp, #52]	; 0x34
 810506e:	2300      	movs	r3, #0
 8105070:	9308      	str	r3, [sp, #32]
 8105072:	eb09 0802 	add.w	r8, r9, r2
 8105076:	9b04      	ldr	r3, [sp, #16]
 8105078:	45c1      	cmp	r9, r8
 810507a:	4417      	add	r7, r2
 810507c:	441f      	add	r7, r3
 810507e:	464b      	mov	r3, r9
 8105080:	bfa8      	it	ge
 8105082:	4643      	movge	r3, r8
 8105084:	42bb      	cmp	r3, r7
 8105086:	bfa8      	it	ge
 8105088:	463b      	movge	r3, r7
 810508a:	2b00      	cmp	r3, #0
 810508c:	bfc2      	ittt	gt
 810508e:	eba8 0803 	subgt.w	r8, r8, r3
 8105092:	1aff      	subgt	r7, r7, r3
 8105094:	eba9 0903 	subgt.w	r9, r9, r3
 8105098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810509a:	2b00      	cmp	r3, #0
 810509c:	dd17      	ble.n	81050ce <_strtod_l+0x75e>
 810509e:	4631      	mov	r1, r6
 81050a0:	461a      	mov	r2, r3
 81050a2:	4620      	mov	r0, r4
 81050a4:	f001 fff6 	bl	8107094 <__pow5mult>
 81050a8:	4606      	mov	r6, r0
 81050aa:	2800      	cmp	r0, #0
 81050ac:	f43f aea8 	beq.w	8104e00 <_strtod_l+0x490>
 81050b0:	4601      	mov	r1, r0
 81050b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 81050b4:	4620      	mov	r0, r4
 81050b6:	f001 ff43 	bl	8106f40 <__multiply>
 81050ba:	900b      	str	r0, [sp, #44]	; 0x2c
 81050bc:	2800      	cmp	r0, #0
 81050be:	f43f ae9f 	beq.w	8104e00 <_strtod_l+0x490>
 81050c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 81050c4:	4620      	mov	r0, r4
 81050c6:	f001 fe23 	bl	8106d10 <_Bfree>
 81050ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81050cc:	9318      	str	r3, [sp, #96]	; 0x60
 81050ce:	f1b8 0f00 	cmp.w	r8, #0
 81050d2:	f300 808c 	bgt.w	81051ee <_strtod_l+0x87e>
 81050d6:	9b06      	ldr	r3, [sp, #24]
 81050d8:	2b00      	cmp	r3, #0
 81050da:	dd08      	ble.n	81050ee <_strtod_l+0x77e>
 81050dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81050de:	9905      	ldr	r1, [sp, #20]
 81050e0:	4620      	mov	r0, r4
 81050e2:	f001 ffd7 	bl	8107094 <__pow5mult>
 81050e6:	9005      	str	r0, [sp, #20]
 81050e8:	2800      	cmp	r0, #0
 81050ea:	f43f ae89 	beq.w	8104e00 <_strtod_l+0x490>
 81050ee:	2f00      	cmp	r7, #0
 81050f0:	dd08      	ble.n	8105104 <_strtod_l+0x794>
 81050f2:	9905      	ldr	r1, [sp, #20]
 81050f4:	463a      	mov	r2, r7
 81050f6:	4620      	mov	r0, r4
 81050f8:	f002 f826 	bl	8107148 <__lshift>
 81050fc:	9005      	str	r0, [sp, #20]
 81050fe:	2800      	cmp	r0, #0
 8105100:	f43f ae7e 	beq.w	8104e00 <_strtod_l+0x490>
 8105104:	f1b9 0f00 	cmp.w	r9, #0
 8105108:	dd08      	ble.n	810511c <_strtod_l+0x7ac>
 810510a:	4631      	mov	r1, r6
 810510c:	464a      	mov	r2, r9
 810510e:	4620      	mov	r0, r4
 8105110:	f002 f81a 	bl	8107148 <__lshift>
 8105114:	4606      	mov	r6, r0
 8105116:	2800      	cmp	r0, #0
 8105118:	f43f ae72 	beq.w	8104e00 <_strtod_l+0x490>
 810511c:	9a05      	ldr	r2, [sp, #20]
 810511e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8105120:	4620      	mov	r0, r4
 8105122:	f002 f89d 	bl	8107260 <__mdiff>
 8105126:	4605      	mov	r5, r0
 8105128:	2800      	cmp	r0, #0
 810512a:	f43f ae69 	beq.w	8104e00 <_strtod_l+0x490>
 810512e:	68c3      	ldr	r3, [r0, #12]
 8105130:	930b      	str	r3, [sp, #44]	; 0x2c
 8105132:	2300      	movs	r3, #0
 8105134:	60c3      	str	r3, [r0, #12]
 8105136:	4631      	mov	r1, r6
 8105138:	f002 f876 	bl	8107228 <__mcmp>
 810513c:	2800      	cmp	r0, #0
 810513e:	da60      	bge.n	8105202 <_strtod_l+0x892>
 8105140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105142:	ea53 030a 	orrs.w	r3, r3, sl
 8105146:	f040 8082 	bne.w	810524e <_strtod_l+0x8de>
 810514a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810514e:	2b00      	cmp	r3, #0
 8105150:	d17d      	bne.n	810524e <_strtod_l+0x8de>
 8105152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8105156:	0d1b      	lsrs	r3, r3, #20
 8105158:	051b      	lsls	r3, r3, #20
 810515a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810515e:	d976      	bls.n	810524e <_strtod_l+0x8de>
 8105160:	696b      	ldr	r3, [r5, #20]
 8105162:	b913      	cbnz	r3, 810516a <_strtod_l+0x7fa>
 8105164:	692b      	ldr	r3, [r5, #16]
 8105166:	2b01      	cmp	r3, #1
 8105168:	dd71      	ble.n	810524e <_strtod_l+0x8de>
 810516a:	4629      	mov	r1, r5
 810516c:	2201      	movs	r2, #1
 810516e:	4620      	mov	r0, r4
 8105170:	f001 ffea 	bl	8107148 <__lshift>
 8105174:	4631      	mov	r1, r6
 8105176:	4605      	mov	r5, r0
 8105178:	f002 f856 	bl	8107228 <__mcmp>
 810517c:	2800      	cmp	r0, #0
 810517e:	dd66      	ble.n	810524e <_strtod_l+0x8de>
 8105180:	9904      	ldr	r1, [sp, #16]
 8105182:	4a53      	ldr	r2, [pc, #332]	; (81052d0 <_strtod_l+0x960>)
 8105184:	465b      	mov	r3, fp
 8105186:	2900      	cmp	r1, #0
 8105188:	f000 8081 	beq.w	810528e <_strtod_l+0x91e>
 810518c:	ea02 010b 	and.w	r1, r2, fp
 8105190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8105194:	dc7b      	bgt.n	810528e <_strtod_l+0x91e>
 8105196:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810519a:	f77f aea9 	ble.w	8104ef0 <_strtod_l+0x580>
 810519e:	4b4d      	ldr	r3, [pc, #308]	; (81052d4 <_strtod_l+0x964>)
 81051a0:	4650      	mov	r0, sl
 81051a2:	4659      	mov	r1, fp
 81051a4:	2200      	movs	r2, #0
 81051a6:	f7fb faaf 	bl	8100708 <__aeabi_dmul>
 81051aa:	460b      	mov	r3, r1
 81051ac:	4303      	orrs	r3, r0
 81051ae:	bf08      	it	eq
 81051b0:	2322      	moveq	r3, #34	; 0x22
 81051b2:	4682      	mov	sl, r0
 81051b4:	468b      	mov	fp, r1
 81051b6:	bf08      	it	eq
 81051b8:	6023      	streq	r3, [r4, #0]
 81051ba:	e62b      	b.n	8104e14 <_strtod_l+0x4a4>
 81051bc:	f04f 32ff 	mov.w	r2, #4294967295
 81051c0:	fa02 f303 	lsl.w	r3, r2, r3
 81051c4:	ea03 0a0a 	and.w	sl, r3, sl
 81051c8:	e6e3      	b.n	8104f92 <_strtod_l+0x622>
 81051ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 81051ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 81051d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 81051d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 81051da:	fa01 f308 	lsl.w	r3, r1, r8
 81051de:	9308      	str	r3, [sp, #32]
 81051e0:	910d      	str	r1, [sp, #52]	; 0x34
 81051e2:	e746      	b.n	8105072 <_strtod_l+0x702>
 81051e4:	2300      	movs	r3, #0
 81051e6:	9308      	str	r3, [sp, #32]
 81051e8:	2301      	movs	r3, #1
 81051ea:	930d      	str	r3, [sp, #52]	; 0x34
 81051ec:	e741      	b.n	8105072 <_strtod_l+0x702>
 81051ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 81051f0:	4642      	mov	r2, r8
 81051f2:	4620      	mov	r0, r4
 81051f4:	f001 ffa8 	bl	8107148 <__lshift>
 81051f8:	9018      	str	r0, [sp, #96]	; 0x60
 81051fa:	2800      	cmp	r0, #0
 81051fc:	f47f af6b 	bne.w	81050d6 <_strtod_l+0x766>
 8105200:	e5fe      	b.n	8104e00 <_strtod_l+0x490>
 8105202:	465f      	mov	r7, fp
 8105204:	d16e      	bne.n	81052e4 <_strtod_l+0x974>
 8105206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8105208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810520c:	b342      	cbz	r2, 8105260 <_strtod_l+0x8f0>
 810520e:	4a32      	ldr	r2, [pc, #200]	; (81052d8 <_strtod_l+0x968>)
 8105210:	4293      	cmp	r3, r2
 8105212:	d128      	bne.n	8105266 <_strtod_l+0x8f6>
 8105214:	9b04      	ldr	r3, [sp, #16]
 8105216:	4651      	mov	r1, sl
 8105218:	b1eb      	cbz	r3, 8105256 <_strtod_l+0x8e6>
 810521a:	4b2d      	ldr	r3, [pc, #180]	; (81052d0 <_strtod_l+0x960>)
 810521c:	403b      	ands	r3, r7
 810521e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8105222:	f04f 32ff 	mov.w	r2, #4294967295
 8105226:	d819      	bhi.n	810525c <_strtod_l+0x8ec>
 8105228:	0d1b      	lsrs	r3, r3, #20
 810522a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810522e:	fa02 f303 	lsl.w	r3, r2, r3
 8105232:	4299      	cmp	r1, r3
 8105234:	d117      	bne.n	8105266 <_strtod_l+0x8f6>
 8105236:	4b29      	ldr	r3, [pc, #164]	; (81052dc <_strtod_l+0x96c>)
 8105238:	429f      	cmp	r7, r3
 810523a:	d102      	bne.n	8105242 <_strtod_l+0x8d2>
 810523c:	3101      	adds	r1, #1
 810523e:	f43f addf 	beq.w	8104e00 <_strtod_l+0x490>
 8105242:	4b23      	ldr	r3, [pc, #140]	; (81052d0 <_strtod_l+0x960>)
 8105244:	403b      	ands	r3, r7
 8105246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810524a:	f04f 0a00 	mov.w	sl, #0
 810524e:	9b04      	ldr	r3, [sp, #16]
 8105250:	2b00      	cmp	r3, #0
 8105252:	d1a4      	bne.n	810519e <_strtod_l+0x82e>
 8105254:	e5de      	b.n	8104e14 <_strtod_l+0x4a4>
 8105256:	f04f 33ff 	mov.w	r3, #4294967295
 810525a:	e7ea      	b.n	8105232 <_strtod_l+0x8c2>
 810525c:	4613      	mov	r3, r2
 810525e:	e7e8      	b.n	8105232 <_strtod_l+0x8c2>
 8105260:	ea53 030a 	orrs.w	r3, r3, sl
 8105264:	d08c      	beq.n	8105180 <_strtod_l+0x810>
 8105266:	9b08      	ldr	r3, [sp, #32]
 8105268:	b1db      	cbz	r3, 81052a2 <_strtod_l+0x932>
 810526a:	423b      	tst	r3, r7
 810526c:	d0ef      	beq.n	810524e <_strtod_l+0x8de>
 810526e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105270:	9a04      	ldr	r2, [sp, #16]
 8105272:	4650      	mov	r0, sl
 8105274:	4659      	mov	r1, fp
 8105276:	b1c3      	cbz	r3, 81052aa <_strtod_l+0x93a>
 8105278:	f7ff fb5e 	bl	8104938 <sulp>
 810527c:	4602      	mov	r2, r0
 810527e:	460b      	mov	r3, r1
 8105280:	ec51 0b18 	vmov	r0, r1, d8
 8105284:	f7fb f88a 	bl	810039c <__adddf3>
 8105288:	4682      	mov	sl, r0
 810528a:	468b      	mov	fp, r1
 810528c:	e7df      	b.n	810524e <_strtod_l+0x8de>
 810528e:	4013      	ands	r3, r2
 8105290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8105294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8105298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810529c:	f04f 3aff 	mov.w	sl, #4294967295
 81052a0:	e7d5      	b.n	810524e <_strtod_l+0x8de>
 81052a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81052a4:	ea13 0f0a 	tst.w	r3, sl
 81052a8:	e7e0      	b.n	810526c <_strtod_l+0x8fc>
 81052aa:	f7ff fb45 	bl	8104938 <sulp>
 81052ae:	4602      	mov	r2, r0
 81052b0:	460b      	mov	r3, r1
 81052b2:	ec51 0b18 	vmov	r0, r1, d8
 81052b6:	f7fb f86f 	bl	8100398 <__aeabi_dsub>
 81052ba:	2200      	movs	r2, #0
 81052bc:	2300      	movs	r3, #0
 81052be:	4682      	mov	sl, r0
 81052c0:	468b      	mov	fp, r1
 81052c2:	f7fb fc89 	bl	8100bd8 <__aeabi_dcmpeq>
 81052c6:	2800      	cmp	r0, #0
 81052c8:	d0c1      	beq.n	810524e <_strtod_l+0x8de>
 81052ca:	e611      	b.n	8104ef0 <_strtod_l+0x580>
 81052cc:	fffffc02 	.word	0xfffffc02
 81052d0:	7ff00000 	.word	0x7ff00000
 81052d4:	39500000 	.word	0x39500000
 81052d8:	000fffff 	.word	0x000fffff
 81052dc:	7fefffff 	.word	0x7fefffff
 81052e0:	081085d0 	.word	0x081085d0
 81052e4:	4631      	mov	r1, r6
 81052e6:	4628      	mov	r0, r5
 81052e8:	f002 f91c 	bl	8107524 <__ratio>
 81052ec:	ec59 8b10 	vmov	r8, r9, d0
 81052f0:	ee10 0a10 	vmov	r0, s0
 81052f4:	2200      	movs	r2, #0
 81052f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81052fa:	4649      	mov	r1, r9
 81052fc:	f7fb fc80 	bl	8100c00 <__aeabi_dcmple>
 8105300:	2800      	cmp	r0, #0
 8105302:	d07a      	beq.n	81053fa <_strtod_l+0xa8a>
 8105304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105306:	2b00      	cmp	r3, #0
 8105308:	d04a      	beq.n	81053a0 <_strtod_l+0xa30>
 810530a:	4b95      	ldr	r3, [pc, #596]	; (8105560 <_strtod_l+0xbf0>)
 810530c:	2200      	movs	r2, #0
 810530e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8105312:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8105560 <_strtod_l+0xbf0>
 8105316:	f04f 0800 	mov.w	r8, #0
 810531a:	4b92      	ldr	r3, [pc, #584]	; (8105564 <_strtod_l+0xbf4>)
 810531c:	403b      	ands	r3, r7
 810531e:	930d      	str	r3, [sp, #52]	; 0x34
 8105320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8105322:	4b91      	ldr	r3, [pc, #580]	; (8105568 <_strtod_l+0xbf8>)
 8105324:	429a      	cmp	r2, r3
 8105326:	f040 80b0 	bne.w	810548a <_strtod_l+0xb1a>
 810532a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810532e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8105332:	ec4b ab10 	vmov	d0, sl, fp
 8105336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810533a:	f002 f81b 	bl	8107374 <__ulp>
 810533e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8105342:	ec53 2b10 	vmov	r2, r3, d0
 8105346:	f7fb f9df 	bl	8100708 <__aeabi_dmul>
 810534a:	4652      	mov	r2, sl
 810534c:	465b      	mov	r3, fp
 810534e:	f7fb f825 	bl	810039c <__adddf3>
 8105352:	460b      	mov	r3, r1
 8105354:	4983      	ldr	r1, [pc, #524]	; (8105564 <_strtod_l+0xbf4>)
 8105356:	4a85      	ldr	r2, [pc, #532]	; (810556c <_strtod_l+0xbfc>)
 8105358:	4019      	ands	r1, r3
 810535a:	4291      	cmp	r1, r2
 810535c:	4682      	mov	sl, r0
 810535e:	d960      	bls.n	8105422 <_strtod_l+0xab2>
 8105360:	ee18 3a90 	vmov	r3, s17
 8105364:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8105368:	4293      	cmp	r3, r2
 810536a:	d104      	bne.n	8105376 <_strtod_l+0xa06>
 810536c:	ee18 3a10 	vmov	r3, s16
 8105370:	3301      	adds	r3, #1
 8105372:	f43f ad45 	beq.w	8104e00 <_strtod_l+0x490>
 8105376:	f8df b200 	ldr.w	fp, [pc, #512]	; 8105578 <_strtod_l+0xc08>
 810537a:	f04f 3aff 	mov.w	sl, #4294967295
 810537e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8105380:	4620      	mov	r0, r4
 8105382:	f001 fcc5 	bl	8106d10 <_Bfree>
 8105386:	9905      	ldr	r1, [sp, #20]
 8105388:	4620      	mov	r0, r4
 810538a:	f001 fcc1 	bl	8106d10 <_Bfree>
 810538e:	4631      	mov	r1, r6
 8105390:	4620      	mov	r0, r4
 8105392:	f001 fcbd 	bl	8106d10 <_Bfree>
 8105396:	4629      	mov	r1, r5
 8105398:	4620      	mov	r0, r4
 810539a:	f001 fcb9 	bl	8106d10 <_Bfree>
 810539e:	e61a      	b.n	8104fd6 <_strtod_l+0x666>
 81053a0:	f1ba 0f00 	cmp.w	sl, #0
 81053a4:	d11b      	bne.n	81053de <_strtod_l+0xa6e>
 81053a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81053aa:	b9f3      	cbnz	r3, 81053ea <_strtod_l+0xa7a>
 81053ac:	4b6c      	ldr	r3, [pc, #432]	; (8105560 <_strtod_l+0xbf0>)
 81053ae:	2200      	movs	r2, #0
 81053b0:	4640      	mov	r0, r8
 81053b2:	4649      	mov	r1, r9
 81053b4:	f7fb fc1a 	bl	8100bec <__aeabi_dcmplt>
 81053b8:	b9d0      	cbnz	r0, 81053f0 <_strtod_l+0xa80>
 81053ba:	4640      	mov	r0, r8
 81053bc:	4649      	mov	r1, r9
 81053be:	4b6c      	ldr	r3, [pc, #432]	; (8105570 <_strtod_l+0xc00>)
 81053c0:	2200      	movs	r2, #0
 81053c2:	f7fb f9a1 	bl	8100708 <__aeabi_dmul>
 81053c6:	4680      	mov	r8, r0
 81053c8:	4689      	mov	r9, r1
 81053ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 81053ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 81053d2:	9315      	str	r3, [sp, #84]	; 0x54
 81053d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81053d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81053dc:	e79d      	b.n	810531a <_strtod_l+0x9aa>
 81053de:	f1ba 0f01 	cmp.w	sl, #1
 81053e2:	d102      	bne.n	81053ea <_strtod_l+0xa7a>
 81053e4:	2f00      	cmp	r7, #0
 81053e6:	f43f ad83 	beq.w	8104ef0 <_strtod_l+0x580>
 81053ea:	4b62      	ldr	r3, [pc, #392]	; (8105574 <_strtod_l+0xc04>)
 81053ec:	2200      	movs	r2, #0
 81053ee:	e78e      	b.n	810530e <_strtod_l+0x99e>
 81053f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8105570 <_strtod_l+0xc00>
 81053f4:	f04f 0800 	mov.w	r8, #0
 81053f8:	e7e7      	b.n	81053ca <_strtod_l+0xa5a>
 81053fa:	4b5d      	ldr	r3, [pc, #372]	; (8105570 <_strtod_l+0xc00>)
 81053fc:	4640      	mov	r0, r8
 81053fe:	4649      	mov	r1, r9
 8105400:	2200      	movs	r2, #0
 8105402:	f7fb f981 	bl	8100708 <__aeabi_dmul>
 8105406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105408:	4680      	mov	r8, r0
 810540a:	4689      	mov	r9, r1
 810540c:	b933      	cbnz	r3, 810541c <_strtod_l+0xaac>
 810540e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8105412:	900e      	str	r0, [sp, #56]	; 0x38
 8105414:	930f      	str	r3, [sp, #60]	; 0x3c
 8105416:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810541a:	e7dd      	b.n	81053d8 <_strtod_l+0xa68>
 810541c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8105420:	e7f9      	b.n	8105416 <_strtod_l+0xaa6>
 8105422:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8105426:	9b04      	ldr	r3, [sp, #16]
 8105428:	2b00      	cmp	r3, #0
 810542a:	d1a8      	bne.n	810537e <_strtod_l+0xa0e>
 810542c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8105430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8105432:	0d1b      	lsrs	r3, r3, #20
 8105434:	051b      	lsls	r3, r3, #20
 8105436:	429a      	cmp	r2, r3
 8105438:	d1a1      	bne.n	810537e <_strtod_l+0xa0e>
 810543a:	4640      	mov	r0, r8
 810543c:	4649      	mov	r1, r9
 810543e:	f7fb fcab 	bl	8100d98 <__aeabi_d2lz>
 8105442:	f7fb f933 	bl	81006ac <__aeabi_l2d>
 8105446:	4602      	mov	r2, r0
 8105448:	460b      	mov	r3, r1
 810544a:	4640      	mov	r0, r8
 810544c:	4649      	mov	r1, r9
 810544e:	f7fa ffa3 	bl	8100398 <__aeabi_dsub>
 8105452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8105454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8105458:	ea43 030a 	orr.w	r3, r3, sl
 810545c:	4313      	orrs	r3, r2
 810545e:	4680      	mov	r8, r0
 8105460:	4689      	mov	r9, r1
 8105462:	d055      	beq.n	8105510 <_strtod_l+0xba0>
 8105464:	a336      	add	r3, pc, #216	; (adr r3, 8105540 <_strtod_l+0xbd0>)
 8105466:	e9d3 2300 	ldrd	r2, r3, [r3]
 810546a:	f7fb fbbf 	bl	8100bec <__aeabi_dcmplt>
 810546e:	2800      	cmp	r0, #0
 8105470:	f47f acd0 	bne.w	8104e14 <_strtod_l+0x4a4>
 8105474:	a334      	add	r3, pc, #208	; (adr r3, 8105548 <_strtod_l+0xbd8>)
 8105476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810547a:	4640      	mov	r0, r8
 810547c:	4649      	mov	r1, r9
 810547e:	f7fb fbd3 	bl	8100c28 <__aeabi_dcmpgt>
 8105482:	2800      	cmp	r0, #0
 8105484:	f43f af7b 	beq.w	810537e <_strtod_l+0xa0e>
 8105488:	e4c4      	b.n	8104e14 <_strtod_l+0x4a4>
 810548a:	9b04      	ldr	r3, [sp, #16]
 810548c:	b333      	cbz	r3, 81054dc <_strtod_l+0xb6c>
 810548e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8105490:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8105494:	d822      	bhi.n	81054dc <_strtod_l+0xb6c>
 8105496:	a32e      	add	r3, pc, #184	; (adr r3, 8105550 <_strtod_l+0xbe0>)
 8105498:	e9d3 2300 	ldrd	r2, r3, [r3]
 810549c:	4640      	mov	r0, r8
 810549e:	4649      	mov	r1, r9
 81054a0:	f7fb fbae 	bl	8100c00 <__aeabi_dcmple>
 81054a4:	b1a0      	cbz	r0, 81054d0 <_strtod_l+0xb60>
 81054a6:	4649      	mov	r1, r9
 81054a8:	4640      	mov	r0, r8
 81054aa:	f7fb fc05 	bl	8100cb8 <__aeabi_d2uiz>
 81054ae:	2801      	cmp	r0, #1
 81054b0:	bf38      	it	cc
 81054b2:	2001      	movcc	r0, #1
 81054b4:	f7fb f8ae 	bl	8100614 <__aeabi_ui2d>
 81054b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81054ba:	4680      	mov	r8, r0
 81054bc:	4689      	mov	r9, r1
 81054be:	bb23      	cbnz	r3, 810550a <_strtod_l+0xb9a>
 81054c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81054c4:	9010      	str	r0, [sp, #64]	; 0x40
 81054c6:	9311      	str	r3, [sp, #68]	; 0x44
 81054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 81054cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81054d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81054d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81054d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81054d8:	1a9b      	subs	r3, r3, r2
 81054da:	9309      	str	r3, [sp, #36]	; 0x24
 81054dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81054e0:	eeb0 0a48 	vmov.f32	s0, s16
 81054e4:	eef0 0a68 	vmov.f32	s1, s17
 81054e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81054ec:	f001 ff42 	bl	8107374 <__ulp>
 81054f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81054f4:	ec53 2b10 	vmov	r2, r3, d0
 81054f8:	f7fb f906 	bl	8100708 <__aeabi_dmul>
 81054fc:	ec53 2b18 	vmov	r2, r3, d8
 8105500:	f7fa ff4c 	bl	810039c <__adddf3>
 8105504:	4682      	mov	sl, r0
 8105506:	468b      	mov	fp, r1
 8105508:	e78d      	b.n	8105426 <_strtod_l+0xab6>
 810550a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810550e:	e7db      	b.n	81054c8 <_strtod_l+0xb58>
 8105510:	a311      	add	r3, pc, #68	; (adr r3, 8105558 <_strtod_l+0xbe8>)
 8105512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105516:	f7fb fb69 	bl	8100bec <__aeabi_dcmplt>
 810551a:	e7b2      	b.n	8105482 <_strtod_l+0xb12>
 810551c:	2300      	movs	r3, #0
 810551e:	930a      	str	r3, [sp, #40]	; 0x28
 8105520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8105522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8105524:	6013      	str	r3, [r2, #0]
 8105526:	f7ff ba6b 	b.w	8104a00 <_strtod_l+0x90>
 810552a:	2a65      	cmp	r2, #101	; 0x65
 810552c:	f43f ab5f 	beq.w	8104bee <_strtod_l+0x27e>
 8105530:	2a45      	cmp	r2, #69	; 0x45
 8105532:	f43f ab5c 	beq.w	8104bee <_strtod_l+0x27e>
 8105536:	2301      	movs	r3, #1
 8105538:	f7ff bb94 	b.w	8104c64 <_strtod_l+0x2f4>
 810553c:	f3af 8000 	nop.w
 8105540:	94a03595 	.word	0x94a03595
 8105544:	3fdfffff 	.word	0x3fdfffff
 8105548:	35afe535 	.word	0x35afe535
 810554c:	3fe00000 	.word	0x3fe00000
 8105550:	ffc00000 	.word	0xffc00000
 8105554:	41dfffff 	.word	0x41dfffff
 8105558:	94a03595 	.word	0x94a03595
 810555c:	3fcfffff 	.word	0x3fcfffff
 8105560:	3ff00000 	.word	0x3ff00000
 8105564:	7ff00000 	.word	0x7ff00000
 8105568:	7fe00000 	.word	0x7fe00000
 810556c:	7c9fffff 	.word	0x7c9fffff
 8105570:	3fe00000 	.word	0x3fe00000
 8105574:	bff00000 	.word	0xbff00000
 8105578:	7fefffff 	.word	0x7fefffff

0810557c <_strtod_r>:
 810557c:	4b01      	ldr	r3, [pc, #4]	; (8105584 <_strtod_r+0x8>)
 810557e:	f7ff b9f7 	b.w	8104970 <_strtod_l>
 8105582:	bf00      	nop
 8105584:	10000080 	.word	0x10000080

08105588 <_strtol_l.constprop.0>:
 8105588:	2b01      	cmp	r3, #1
 810558a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810558e:	d001      	beq.n	8105594 <_strtol_l.constprop.0+0xc>
 8105590:	2b24      	cmp	r3, #36	; 0x24
 8105592:	d906      	bls.n	81055a2 <_strtol_l.constprop.0+0x1a>
 8105594:	f7fe fad8 	bl	8103b48 <__errno>
 8105598:	2316      	movs	r3, #22
 810559a:	6003      	str	r3, [r0, #0]
 810559c:	2000      	movs	r0, #0
 810559e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81055a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8105688 <_strtol_l.constprop.0+0x100>
 81055a6:	460d      	mov	r5, r1
 81055a8:	462e      	mov	r6, r5
 81055aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 81055ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 81055b2:	f017 0708 	ands.w	r7, r7, #8
 81055b6:	d1f7      	bne.n	81055a8 <_strtol_l.constprop.0+0x20>
 81055b8:	2c2d      	cmp	r4, #45	; 0x2d
 81055ba:	d132      	bne.n	8105622 <_strtol_l.constprop.0+0x9a>
 81055bc:	782c      	ldrb	r4, [r5, #0]
 81055be:	2701      	movs	r7, #1
 81055c0:	1cb5      	adds	r5, r6, #2
 81055c2:	2b00      	cmp	r3, #0
 81055c4:	d05b      	beq.n	810567e <_strtol_l.constprop.0+0xf6>
 81055c6:	2b10      	cmp	r3, #16
 81055c8:	d109      	bne.n	81055de <_strtol_l.constprop.0+0x56>
 81055ca:	2c30      	cmp	r4, #48	; 0x30
 81055cc:	d107      	bne.n	81055de <_strtol_l.constprop.0+0x56>
 81055ce:	782c      	ldrb	r4, [r5, #0]
 81055d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81055d4:	2c58      	cmp	r4, #88	; 0x58
 81055d6:	d14d      	bne.n	8105674 <_strtol_l.constprop.0+0xec>
 81055d8:	786c      	ldrb	r4, [r5, #1]
 81055da:	2310      	movs	r3, #16
 81055dc:	3502      	adds	r5, #2
 81055de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 81055e2:	f108 38ff 	add.w	r8, r8, #4294967295
 81055e6:	f04f 0c00 	mov.w	ip, #0
 81055ea:	fbb8 f9f3 	udiv	r9, r8, r3
 81055ee:	4666      	mov	r6, ip
 81055f0:	fb03 8a19 	mls	sl, r3, r9, r8
 81055f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 81055f8:	f1be 0f09 	cmp.w	lr, #9
 81055fc:	d816      	bhi.n	810562c <_strtol_l.constprop.0+0xa4>
 81055fe:	4674      	mov	r4, lr
 8105600:	42a3      	cmp	r3, r4
 8105602:	dd24      	ble.n	810564e <_strtol_l.constprop.0+0xc6>
 8105604:	f1bc 0f00 	cmp.w	ip, #0
 8105608:	db1e      	blt.n	8105648 <_strtol_l.constprop.0+0xc0>
 810560a:	45b1      	cmp	r9, r6
 810560c:	d31c      	bcc.n	8105648 <_strtol_l.constprop.0+0xc0>
 810560e:	d101      	bne.n	8105614 <_strtol_l.constprop.0+0x8c>
 8105610:	45a2      	cmp	sl, r4
 8105612:	db19      	blt.n	8105648 <_strtol_l.constprop.0+0xc0>
 8105614:	fb06 4603 	mla	r6, r6, r3, r4
 8105618:	f04f 0c01 	mov.w	ip, #1
 810561c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8105620:	e7e8      	b.n	81055f4 <_strtol_l.constprop.0+0x6c>
 8105622:	2c2b      	cmp	r4, #43	; 0x2b
 8105624:	bf04      	itt	eq
 8105626:	782c      	ldrbeq	r4, [r5, #0]
 8105628:	1cb5      	addeq	r5, r6, #2
 810562a:	e7ca      	b.n	81055c2 <_strtol_l.constprop.0+0x3a>
 810562c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8105630:	f1be 0f19 	cmp.w	lr, #25
 8105634:	d801      	bhi.n	810563a <_strtol_l.constprop.0+0xb2>
 8105636:	3c37      	subs	r4, #55	; 0x37
 8105638:	e7e2      	b.n	8105600 <_strtol_l.constprop.0+0x78>
 810563a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810563e:	f1be 0f19 	cmp.w	lr, #25
 8105642:	d804      	bhi.n	810564e <_strtol_l.constprop.0+0xc6>
 8105644:	3c57      	subs	r4, #87	; 0x57
 8105646:	e7db      	b.n	8105600 <_strtol_l.constprop.0+0x78>
 8105648:	f04f 3cff 	mov.w	ip, #4294967295
 810564c:	e7e6      	b.n	810561c <_strtol_l.constprop.0+0x94>
 810564e:	f1bc 0f00 	cmp.w	ip, #0
 8105652:	da05      	bge.n	8105660 <_strtol_l.constprop.0+0xd8>
 8105654:	2322      	movs	r3, #34	; 0x22
 8105656:	6003      	str	r3, [r0, #0]
 8105658:	4646      	mov	r6, r8
 810565a:	b942      	cbnz	r2, 810566e <_strtol_l.constprop.0+0xe6>
 810565c:	4630      	mov	r0, r6
 810565e:	e79e      	b.n	810559e <_strtol_l.constprop.0+0x16>
 8105660:	b107      	cbz	r7, 8105664 <_strtol_l.constprop.0+0xdc>
 8105662:	4276      	negs	r6, r6
 8105664:	2a00      	cmp	r2, #0
 8105666:	d0f9      	beq.n	810565c <_strtol_l.constprop.0+0xd4>
 8105668:	f1bc 0f00 	cmp.w	ip, #0
 810566c:	d000      	beq.n	8105670 <_strtol_l.constprop.0+0xe8>
 810566e:	1e69      	subs	r1, r5, #1
 8105670:	6011      	str	r1, [r2, #0]
 8105672:	e7f3      	b.n	810565c <_strtol_l.constprop.0+0xd4>
 8105674:	2430      	movs	r4, #48	; 0x30
 8105676:	2b00      	cmp	r3, #0
 8105678:	d1b1      	bne.n	81055de <_strtol_l.constprop.0+0x56>
 810567a:	2308      	movs	r3, #8
 810567c:	e7af      	b.n	81055de <_strtol_l.constprop.0+0x56>
 810567e:	2c30      	cmp	r4, #48	; 0x30
 8105680:	d0a5      	beq.n	81055ce <_strtol_l.constprop.0+0x46>
 8105682:	230a      	movs	r3, #10
 8105684:	e7ab      	b.n	81055de <_strtol_l.constprop.0+0x56>
 8105686:	bf00      	nop
 8105688:	081085f9 	.word	0x081085f9

0810568c <_strtol_r>:
 810568c:	f7ff bf7c 	b.w	8105588 <_strtol_l.constprop.0>

08105690 <quorem>:
 8105690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105694:	6903      	ldr	r3, [r0, #16]
 8105696:	690c      	ldr	r4, [r1, #16]
 8105698:	42a3      	cmp	r3, r4
 810569a:	4607      	mov	r7, r0
 810569c:	f2c0 8081 	blt.w	81057a2 <quorem+0x112>
 81056a0:	3c01      	subs	r4, #1
 81056a2:	f101 0814 	add.w	r8, r1, #20
 81056a6:	f100 0514 	add.w	r5, r0, #20
 81056aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81056ae:	9301      	str	r3, [sp, #4]
 81056b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81056b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81056b8:	3301      	adds	r3, #1
 81056ba:	429a      	cmp	r2, r3
 81056bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81056c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81056c4:	fbb2 f6f3 	udiv	r6, r2, r3
 81056c8:	d331      	bcc.n	810572e <quorem+0x9e>
 81056ca:	f04f 0e00 	mov.w	lr, #0
 81056ce:	4640      	mov	r0, r8
 81056d0:	46ac      	mov	ip, r5
 81056d2:	46f2      	mov	sl, lr
 81056d4:	f850 2b04 	ldr.w	r2, [r0], #4
 81056d8:	b293      	uxth	r3, r2
 81056da:	fb06 e303 	mla	r3, r6, r3, lr
 81056de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81056e2:	b29b      	uxth	r3, r3
 81056e4:	ebaa 0303 	sub.w	r3, sl, r3
 81056e8:	f8dc a000 	ldr.w	sl, [ip]
 81056ec:	0c12      	lsrs	r2, r2, #16
 81056ee:	fa13 f38a 	uxtah	r3, r3, sl
 81056f2:	fb06 e202 	mla	r2, r6, r2, lr
 81056f6:	9300      	str	r3, [sp, #0]
 81056f8:	9b00      	ldr	r3, [sp, #0]
 81056fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81056fe:	b292      	uxth	r2, r2
 8105700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8105704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8105708:	f8bd 3000 	ldrh.w	r3, [sp]
 810570c:	4581      	cmp	r9, r0
 810570e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8105712:	f84c 3b04 	str.w	r3, [ip], #4
 8105716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810571a:	d2db      	bcs.n	81056d4 <quorem+0x44>
 810571c:	f855 300b 	ldr.w	r3, [r5, fp]
 8105720:	b92b      	cbnz	r3, 810572e <quorem+0x9e>
 8105722:	9b01      	ldr	r3, [sp, #4]
 8105724:	3b04      	subs	r3, #4
 8105726:	429d      	cmp	r5, r3
 8105728:	461a      	mov	r2, r3
 810572a:	d32e      	bcc.n	810578a <quorem+0xfa>
 810572c:	613c      	str	r4, [r7, #16]
 810572e:	4638      	mov	r0, r7
 8105730:	f001 fd7a 	bl	8107228 <__mcmp>
 8105734:	2800      	cmp	r0, #0
 8105736:	db24      	blt.n	8105782 <quorem+0xf2>
 8105738:	3601      	adds	r6, #1
 810573a:	4628      	mov	r0, r5
 810573c:	f04f 0c00 	mov.w	ip, #0
 8105740:	f858 2b04 	ldr.w	r2, [r8], #4
 8105744:	f8d0 e000 	ldr.w	lr, [r0]
 8105748:	b293      	uxth	r3, r2
 810574a:	ebac 0303 	sub.w	r3, ip, r3
 810574e:	0c12      	lsrs	r2, r2, #16
 8105750:	fa13 f38e 	uxtah	r3, r3, lr
 8105754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8105758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810575c:	b29b      	uxth	r3, r3
 810575e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8105762:	45c1      	cmp	r9, r8
 8105764:	f840 3b04 	str.w	r3, [r0], #4
 8105768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810576c:	d2e8      	bcs.n	8105740 <quorem+0xb0>
 810576e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8105772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8105776:	b922      	cbnz	r2, 8105782 <quorem+0xf2>
 8105778:	3b04      	subs	r3, #4
 810577a:	429d      	cmp	r5, r3
 810577c:	461a      	mov	r2, r3
 810577e:	d30a      	bcc.n	8105796 <quorem+0x106>
 8105780:	613c      	str	r4, [r7, #16]
 8105782:	4630      	mov	r0, r6
 8105784:	b003      	add	sp, #12
 8105786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810578a:	6812      	ldr	r2, [r2, #0]
 810578c:	3b04      	subs	r3, #4
 810578e:	2a00      	cmp	r2, #0
 8105790:	d1cc      	bne.n	810572c <quorem+0x9c>
 8105792:	3c01      	subs	r4, #1
 8105794:	e7c7      	b.n	8105726 <quorem+0x96>
 8105796:	6812      	ldr	r2, [r2, #0]
 8105798:	3b04      	subs	r3, #4
 810579a:	2a00      	cmp	r2, #0
 810579c:	d1f0      	bne.n	8105780 <quorem+0xf0>
 810579e:	3c01      	subs	r4, #1
 81057a0:	e7eb      	b.n	810577a <quorem+0xea>
 81057a2:	2000      	movs	r0, #0
 81057a4:	e7ee      	b.n	8105784 <quorem+0xf4>
	...

081057a8 <_dtoa_r>:
 81057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81057ac:	ed2d 8b04 	vpush	{d8-d9}
 81057b0:	ec57 6b10 	vmov	r6, r7, d0
 81057b4:	b093      	sub	sp, #76	; 0x4c
 81057b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81057b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81057bc:	9106      	str	r1, [sp, #24]
 81057be:	ee10 aa10 	vmov	sl, s0
 81057c2:	4604      	mov	r4, r0
 81057c4:	9209      	str	r2, [sp, #36]	; 0x24
 81057c6:	930c      	str	r3, [sp, #48]	; 0x30
 81057c8:	46bb      	mov	fp, r7
 81057ca:	b975      	cbnz	r5, 81057ea <_dtoa_r+0x42>
 81057cc:	2010      	movs	r0, #16
 81057ce:	f001 fa45 	bl	8106c5c <malloc>
 81057d2:	4602      	mov	r2, r0
 81057d4:	6260      	str	r0, [r4, #36]	; 0x24
 81057d6:	b920      	cbnz	r0, 81057e2 <_dtoa_r+0x3a>
 81057d8:	4ba7      	ldr	r3, [pc, #668]	; (8105a78 <_dtoa_r+0x2d0>)
 81057da:	21ea      	movs	r1, #234	; 0xea
 81057dc:	48a7      	ldr	r0, [pc, #668]	; (8105a7c <_dtoa_r+0x2d4>)
 81057de:	f002 fc17 	bl	8108010 <__assert_func>
 81057e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81057e6:	6005      	str	r5, [r0, #0]
 81057e8:	60c5      	str	r5, [r0, #12]
 81057ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81057ec:	6819      	ldr	r1, [r3, #0]
 81057ee:	b151      	cbz	r1, 8105806 <_dtoa_r+0x5e>
 81057f0:	685a      	ldr	r2, [r3, #4]
 81057f2:	604a      	str	r2, [r1, #4]
 81057f4:	2301      	movs	r3, #1
 81057f6:	4093      	lsls	r3, r2
 81057f8:	608b      	str	r3, [r1, #8]
 81057fa:	4620      	mov	r0, r4
 81057fc:	f001 fa88 	bl	8106d10 <_Bfree>
 8105800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105802:	2200      	movs	r2, #0
 8105804:	601a      	str	r2, [r3, #0]
 8105806:	1e3b      	subs	r3, r7, #0
 8105808:	bfaa      	itet	ge
 810580a:	2300      	movge	r3, #0
 810580c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8105810:	f8c8 3000 	strge.w	r3, [r8]
 8105814:	4b9a      	ldr	r3, [pc, #616]	; (8105a80 <_dtoa_r+0x2d8>)
 8105816:	bfbc      	itt	lt
 8105818:	2201      	movlt	r2, #1
 810581a:	f8c8 2000 	strlt.w	r2, [r8]
 810581e:	ea33 030b 	bics.w	r3, r3, fp
 8105822:	d11b      	bne.n	810585c <_dtoa_r+0xb4>
 8105824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8105826:	f242 730f 	movw	r3, #9999	; 0x270f
 810582a:	6013      	str	r3, [r2, #0]
 810582c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8105830:	4333      	orrs	r3, r6
 8105832:	f000 8592 	beq.w	810635a <_dtoa_r+0xbb2>
 8105836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105838:	b963      	cbnz	r3, 8105854 <_dtoa_r+0xac>
 810583a:	4b92      	ldr	r3, [pc, #584]	; (8105a84 <_dtoa_r+0x2dc>)
 810583c:	e022      	b.n	8105884 <_dtoa_r+0xdc>
 810583e:	4b92      	ldr	r3, [pc, #584]	; (8105a88 <_dtoa_r+0x2e0>)
 8105840:	9301      	str	r3, [sp, #4]
 8105842:	3308      	adds	r3, #8
 8105844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8105846:	6013      	str	r3, [r2, #0]
 8105848:	9801      	ldr	r0, [sp, #4]
 810584a:	b013      	add	sp, #76	; 0x4c
 810584c:	ecbd 8b04 	vpop	{d8-d9}
 8105850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105854:	4b8b      	ldr	r3, [pc, #556]	; (8105a84 <_dtoa_r+0x2dc>)
 8105856:	9301      	str	r3, [sp, #4]
 8105858:	3303      	adds	r3, #3
 810585a:	e7f3      	b.n	8105844 <_dtoa_r+0x9c>
 810585c:	2200      	movs	r2, #0
 810585e:	2300      	movs	r3, #0
 8105860:	4650      	mov	r0, sl
 8105862:	4659      	mov	r1, fp
 8105864:	f7fb f9b8 	bl	8100bd8 <__aeabi_dcmpeq>
 8105868:	ec4b ab19 	vmov	d9, sl, fp
 810586c:	4680      	mov	r8, r0
 810586e:	b158      	cbz	r0, 8105888 <_dtoa_r+0xe0>
 8105870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8105872:	2301      	movs	r3, #1
 8105874:	6013      	str	r3, [r2, #0]
 8105876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105878:	2b00      	cmp	r3, #0
 810587a:	f000 856b 	beq.w	8106354 <_dtoa_r+0xbac>
 810587e:	4883      	ldr	r0, [pc, #524]	; (8105a8c <_dtoa_r+0x2e4>)
 8105880:	6018      	str	r0, [r3, #0]
 8105882:	1e43      	subs	r3, r0, #1
 8105884:	9301      	str	r3, [sp, #4]
 8105886:	e7df      	b.n	8105848 <_dtoa_r+0xa0>
 8105888:	ec4b ab10 	vmov	d0, sl, fp
 810588c:	aa10      	add	r2, sp, #64	; 0x40
 810588e:	a911      	add	r1, sp, #68	; 0x44
 8105890:	4620      	mov	r0, r4
 8105892:	f001 fdeb 	bl	810746c <__d2b>
 8105896:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810589a:	ee08 0a10 	vmov	s16, r0
 810589e:	2d00      	cmp	r5, #0
 81058a0:	f000 8084 	beq.w	81059ac <_dtoa_r+0x204>
 81058a4:	ee19 3a90 	vmov	r3, s19
 81058a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81058ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81058b0:	4656      	mov	r6, sl
 81058b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81058b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81058ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 81058be:	4b74      	ldr	r3, [pc, #464]	; (8105a90 <_dtoa_r+0x2e8>)
 81058c0:	2200      	movs	r2, #0
 81058c2:	4630      	mov	r0, r6
 81058c4:	4639      	mov	r1, r7
 81058c6:	f7fa fd67 	bl	8100398 <__aeabi_dsub>
 81058ca:	a365      	add	r3, pc, #404	; (adr r3, 8105a60 <_dtoa_r+0x2b8>)
 81058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058d0:	f7fa ff1a 	bl	8100708 <__aeabi_dmul>
 81058d4:	a364      	add	r3, pc, #400	; (adr r3, 8105a68 <_dtoa_r+0x2c0>)
 81058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058da:	f7fa fd5f 	bl	810039c <__adddf3>
 81058de:	4606      	mov	r6, r0
 81058e0:	4628      	mov	r0, r5
 81058e2:	460f      	mov	r7, r1
 81058e4:	f7fa fea6 	bl	8100634 <__aeabi_i2d>
 81058e8:	a361      	add	r3, pc, #388	; (adr r3, 8105a70 <_dtoa_r+0x2c8>)
 81058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ee:	f7fa ff0b 	bl	8100708 <__aeabi_dmul>
 81058f2:	4602      	mov	r2, r0
 81058f4:	460b      	mov	r3, r1
 81058f6:	4630      	mov	r0, r6
 81058f8:	4639      	mov	r1, r7
 81058fa:	f7fa fd4f 	bl	810039c <__adddf3>
 81058fe:	4606      	mov	r6, r0
 8105900:	460f      	mov	r7, r1
 8105902:	f7fb f9b1 	bl	8100c68 <__aeabi_d2iz>
 8105906:	2200      	movs	r2, #0
 8105908:	9000      	str	r0, [sp, #0]
 810590a:	2300      	movs	r3, #0
 810590c:	4630      	mov	r0, r6
 810590e:	4639      	mov	r1, r7
 8105910:	f7fb f96c 	bl	8100bec <__aeabi_dcmplt>
 8105914:	b150      	cbz	r0, 810592c <_dtoa_r+0x184>
 8105916:	9800      	ldr	r0, [sp, #0]
 8105918:	f7fa fe8c 	bl	8100634 <__aeabi_i2d>
 810591c:	4632      	mov	r2, r6
 810591e:	463b      	mov	r3, r7
 8105920:	f7fb f95a 	bl	8100bd8 <__aeabi_dcmpeq>
 8105924:	b910      	cbnz	r0, 810592c <_dtoa_r+0x184>
 8105926:	9b00      	ldr	r3, [sp, #0]
 8105928:	3b01      	subs	r3, #1
 810592a:	9300      	str	r3, [sp, #0]
 810592c:	9b00      	ldr	r3, [sp, #0]
 810592e:	2b16      	cmp	r3, #22
 8105930:	d85a      	bhi.n	81059e8 <_dtoa_r+0x240>
 8105932:	9a00      	ldr	r2, [sp, #0]
 8105934:	4b57      	ldr	r3, [pc, #348]	; (8105a94 <_dtoa_r+0x2ec>)
 8105936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810593e:	ec51 0b19 	vmov	r0, r1, d9
 8105942:	f7fb f953 	bl	8100bec <__aeabi_dcmplt>
 8105946:	2800      	cmp	r0, #0
 8105948:	d050      	beq.n	81059ec <_dtoa_r+0x244>
 810594a:	9b00      	ldr	r3, [sp, #0]
 810594c:	3b01      	subs	r3, #1
 810594e:	9300      	str	r3, [sp, #0]
 8105950:	2300      	movs	r3, #0
 8105952:	930b      	str	r3, [sp, #44]	; 0x2c
 8105954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8105956:	1b5d      	subs	r5, r3, r5
 8105958:	1e6b      	subs	r3, r5, #1
 810595a:	9305      	str	r3, [sp, #20]
 810595c:	bf45      	ittet	mi
 810595e:	f1c5 0301 	rsbmi	r3, r5, #1
 8105962:	9304      	strmi	r3, [sp, #16]
 8105964:	2300      	movpl	r3, #0
 8105966:	2300      	movmi	r3, #0
 8105968:	bf4c      	ite	mi
 810596a:	9305      	strmi	r3, [sp, #20]
 810596c:	9304      	strpl	r3, [sp, #16]
 810596e:	9b00      	ldr	r3, [sp, #0]
 8105970:	2b00      	cmp	r3, #0
 8105972:	db3d      	blt.n	81059f0 <_dtoa_r+0x248>
 8105974:	9b05      	ldr	r3, [sp, #20]
 8105976:	9a00      	ldr	r2, [sp, #0]
 8105978:	920a      	str	r2, [sp, #40]	; 0x28
 810597a:	4413      	add	r3, r2
 810597c:	9305      	str	r3, [sp, #20]
 810597e:	2300      	movs	r3, #0
 8105980:	9307      	str	r3, [sp, #28]
 8105982:	9b06      	ldr	r3, [sp, #24]
 8105984:	2b09      	cmp	r3, #9
 8105986:	f200 8089 	bhi.w	8105a9c <_dtoa_r+0x2f4>
 810598a:	2b05      	cmp	r3, #5
 810598c:	bfc4      	itt	gt
 810598e:	3b04      	subgt	r3, #4
 8105990:	9306      	strgt	r3, [sp, #24]
 8105992:	9b06      	ldr	r3, [sp, #24]
 8105994:	f1a3 0302 	sub.w	r3, r3, #2
 8105998:	bfcc      	ite	gt
 810599a:	2500      	movgt	r5, #0
 810599c:	2501      	movle	r5, #1
 810599e:	2b03      	cmp	r3, #3
 81059a0:	f200 8087 	bhi.w	8105ab2 <_dtoa_r+0x30a>
 81059a4:	e8df f003 	tbb	[pc, r3]
 81059a8:	59383a2d 	.word	0x59383a2d
 81059ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 81059b0:	441d      	add	r5, r3
 81059b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81059b6:	2b20      	cmp	r3, #32
 81059b8:	bfc1      	itttt	gt
 81059ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81059be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81059c2:	fa0b f303 	lslgt.w	r3, fp, r3
 81059c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 81059ca:	bfda      	itte	le
 81059cc:	f1c3 0320 	rsble	r3, r3, #32
 81059d0:	fa06 f003 	lslle.w	r0, r6, r3
 81059d4:	4318      	orrgt	r0, r3
 81059d6:	f7fa fe1d 	bl	8100614 <__aeabi_ui2d>
 81059da:	2301      	movs	r3, #1
 81059dc:	4606      	mov	r6, r0
 81059de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81059e2:	3d01      	subs	r5, #1
 81059e4:	930e      	str	r3, [sp, #56]	; 0x38
 81059e6:	e76a      	b.n	81058be <_dtoa_r+0x116>
 81059e8:	2301      	movs	r3, #1
 81059ea:	e7b2      	b.n	8105952 <_dtoa_r+0x1aa>
 81059ec:	900b      	str	r0, [sp, #44]	; 0x2c
 81059ee:	e7b1      	b.n	8105954 <_dtoa_r+0x1ac>
 81059f0:	9b04      	ldr	r3, [sp, #16]
 81059f2:	9a00      	ldr	r2, [sp, #0]
 81059f4:	1a9b      	subs	r3, r3, r2
 81059f6:	9304      	str	r3, [sp, #16]
 81059f8:	4253      	negs	r3, r2
 81059fa:	9307      	str	r3, [sp, #28]
 81059fc:	2300      	movs	r3, #0
 81059fe:	930a      	str	r3, [sp, #40]	; 0x28
 8105a00:	e7bf      	b.n	8105982 <_dtoa_r+0x1da>
 8105a02:	2300      	movs	r3, #0
 8105a04:	9308      	str	r3, [sp, #32]
 8105a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105a08:	2b00      	cmp	r3, #0
 8105a0a:	dc55      	bgt.n	8105ab8 <_dtoa_r+0x310>
 8105a0c:	2301      	movs	r3, #1
 8105a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8105a12:	461a      	mov	r2, r3
 8105a14:	9209      	str	r2, [sp, #36]	; 0x24
 8105a16:	e00c      	b.n	8105a32 <_dtoa_r+0x28a>
 8105a18:	2301      	movs	r3, #1
 8105a1a:	e7f3      	b.n	8105a04 <_dtoa_r+0x25c>
 8105a1c:	2300      	movs	r3, #0
 8105a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8105a20:	9308      	str	r3, [sp, #32]
 8105a22:	9b00      	ldr	r3, [sp, #0]
 8105a24:	4413      	add	r3, r2
 8105a26:	9302      	str	r3, [sp, #8]
 8105a28:	3301      	adds	r3, #1
 8105a2a:	2b01      	cmp	r3, #1
 8105a2c:	9303      	str	r3, [sp, #12]
 8105a2e:	bfb8      	it	lt
 8105a30:	2301      	movlt	r3, #1
 8105a32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8105a34:	2200      	movs	r2, #0
 8105a36:	6042      	str	r2, [r0, #4]
 8105a38:	2204      	movs	r2, #4
 8105a3a:	f102 0614 	add.w	r6, r2, #20
 8105a3e:	429e      	cmp	r6, r3
 8105a40:	6841      	ldr	r1, [r0, #4]
 8105a42:	d93d      	bls.n	8105ac0 <_dtoa_r+0x318>
 8105a44:	4620      	mov	r0, r4
 8105a46:	f001 f923 	bl	8106c90 <_Balloc>
 8105a4a:	9001      	str	r0, [sp, #4]
 8105a4c:	2800      	cmp	r0, #0
 8105a4e:	d13b      	bne.n	8105ac8 <_dtoa_r+0x320>
 8105a50:	4b11      	ldr	r3, [pc, #68]	; (8105a98 <_dtoa_r+0x2f0>)
 8105a52:	4602      	mov	r2, r0
 8105a54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8105a58:	e6c0      	b.n	81057dc <_dtoa_r+0x34>
 8105a5a:	2301      	movs	r3, #1
 8105a5c:	e7df      	b.n	8105a1e <_dtoa_r+0x276>
 8105a5e:	bf00      	nop
 8105a60:	636f4361 	.word	0x636f4361
 8105a64:	3fd287a7 	.word	0x3fd287a7
 8105a68:	8b60c8b3 	.word	0x8b60c8b3
 8105a6c:	3fc68a28 	.word	0x3fc68a28
 8105a70:	509f79fb 	.word	0x509f79fb
 8105a74:	3fd34413 	.word	0x3fd34413
 8105a78:	08108706 	.word	0x08108706
 8105a7c:	0810871d 	.word	0x0810871d
 8105a80:	7ff00000 	.word	0x7ff00000
 8105a84:	08108702 	.word	0x08108702
 8105a88:	081086f9 	.word	0x081086f9
 8105a8c:	0810857d 	.word	0x0810857d
 8105a90:	3ff80000 	.word	0x3ff80000
 8105a94:	081088f0 	.word	0x081088f0
 8105a98:	08108778 	.word	0x08108778
 8105a9c:	2501      	movs	r5, #1
 8105a9e:	2300      	movs	r3, #0
 8105aa0:	9306      	str	r3, [sp, #24]
 8105aa2:	9508      	str	r5, [sp, #32]
 8105aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8105aa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8105aac:	2200      	movs	r2, #0
 8105aae:	2312      	movs	r3, #18
 8105ab0:	e7b0      	b.n	8105a14 <_dtoa_r+0x26c>
 8105ab2:	2301      	movs	r3, #1
 8105ab4:	9308      	str	r3, [sp, #32]
 8105ab6:	e7f5      	b.n	8105aa4 <_dtoa_r+0x2fc>
 8105ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105aba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8105abe:	e7b8      	b.n	8105a32 <_dtoa_r+0x28a>
 8105ac0:	3101      	adds	r1, #1
 8105ac2:	6041      	str	r1, [r0, #4]
 8105ac4:	0052      	lsls	r2, r2, #1
 8105ac6:	e7b8      	b.n	8105a3a <_dtoa_r+0x292>
 8105ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105aca:	9a01      	ldr	r2, [sp, #4]
 8105acc:	601a      	str	r2, [r3, #0]
 8105ace:	9b03      	ldr	r3, [sp, #12]
 8105ad0:	2b0e      	cmp	r3, #14
 8105ad2:	f200 809d 	bhi.w	8105c10 <_dtoa_r+0x468>
 8105ad6:	2d00      	cmp	r5, #0
 8105ad8:	f000 809a 	beq.w	8105c10 <_dtoa_r+0x468>
 8105adc:	9b00      	ldr	r3, [sp, #0]
 8105ade:	2b00      	cmp	r3, #0
 8105ae0:	dd32      	ble.n	8105b48 <_dtoa_r+0x3a0>
 8105ae2:	4ab7      	ldr	r2, [pc, #732]	; (8105dc0 <_dtoa_r+0x618>)
 8105ae4:	f003 030f 	and.w	r3, r3, #15
 8105ae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8105aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8105af0:	9b00      	ldr	r3, [sp, #0]
 8105af2:	05d8      	lsls	r0, r3, #23
 8105af4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8105af8:	d516      	bpl.n	8105b28 <_dtoa_r+0x380>
 8105afa:	4bb2      	ldr	r3, [pc, #712]	; (8105dc4 <_dtoa_r+0x61c>)
 8105afc:	ec51 0b19 	vmov	r0, r1, d9
 8105b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8105b04:	f7fa ff2a 	bl	810095c <__aeabi_ddiv>
 8105b08:	f007 070f 	and.w	r7, r7, #15
 8105b0c:	4682      	mov	sl, r0
 8105b0e:	468b      	mov	fp, r1
 8105b10:	2503      	movs	r5, #3
 8105b12:	4eac      	ldr	r6, [pc, #688]	; (8105dc4 <_dtoa_r+0x61c>)
 8105b14:	b957      	cbnz	r7, 8105b2c <_dtoa_r+0x384>
 8105b16:	4642      	mov	r2, r8
 8105b18:	464b      	mov	r3, r9
 8105b1a:	4650      	mov	r0, sl
 8105b1c:	4659      	mov	r1, fp
 8105b1e:	f7fa ff1d 	bl	810095c <__aeabi_ddiv>
 8105b22:	4682      	mov	sl, r0
 8105b24:	468b      	mov	fp, r1
 8105b26:	e028      	b.n	8105b7a <_dtoa_r+0x3d2>
 8105b28:	2502      	movs	r5, #2
 8105b2a:	e7f2      	b.n	8105b12 <_dtoa_r+0x36a>
 8105b2c:	07f9      	lsls	r1, r7, #31
 8105b2e:	d508      	bpl.n	8105b42 <_dtoa_r+0x39a>
 8105b30:	4640      	mov	r0, r8
 8105b32:	4649      	mov	r1, r9
 8105b34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8105b38:	f7fa fde6 	bl	8100708 <__aeabi_dmul>
 8105b3c:	3501      	adds	r5, #1
 8105b3e:	4680      	mov	r8, r0
 8105b40:	4689      	mov	r9, r1
 8105b42:	107f      	asrs	r7, r7, #1
 8105b44:	3608      	adds	r6, #8
 8105b46:	e7e5      	b.n	8105b14 <_dtoa_r+0x36c>
 8105b48:	f000 809b 	beq.w	8105c82 <_dtoa_r+0x4da>
 8105b4c:	9b00      	ldr	r3, [sp, #0]
 8105b4e:	4f9d      	ldr	r7, [pc, #628]	; (8105dc4 <_dtoa_r+0x61c>)
 8105b50:	425e      	negs	r6, r3
 8105b52:	4b9b      	ldr	r3, [pc, #620]	; (8105dc0 <_dtoa_r+0x618>)
 8105b54:	f006 020f 	and.w	r2, r6, #15
 8105b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b60:	ec51 0b19 	vmov	r0, r1, d9
 8105b64:	f7fa fdd0 	bl	8100708 <__aeabi_dmul>
 8105b68:	1136      	asrs	r6, r6, #4
 8105b6a:	4682      	mov	sl, r0
 8105b6c:	468b      	mov	fp, r1
 8105b6e:	2300      	movs	r3, #0
 8105b70:	2502      	movs	r5, #2
 8105b72:	2e00      	cmp	r6, #0
 8105b74:	d17a      	bne.n	8105c6c <_dtoa_r+0x4c4>
 8105b76:	2b00      	cmp	r3, #0
 8105b78:	d1d3      	bne.n	8105b22 <_dtoa_r+0x37a>
 8105b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105b7c:	2b00      	cmp	r3, #0
 8105b7e:	f000 8082 	beq.w	8105c86 <_dtoa_r+0x4de>
 8105b82:	4b91      	ldr	r3, [pc, #580]	; (8105dc8 <_dtoa_r+0x620>)
 8105b84:	2200      	movs	r2, #0
 8105b86:	4650      	mov	r0, sl
 8105b88:	4659      	mov	r1, fp
 8105b8a:	f7fb f82f 	bl	8100bec <__aeabi_dcmplt>
 8105b8e:	2800      	cmp	r0, #0
 8105b90:	d079      	beq.n	8105c86 <_dtoa_r+0x4de>
 8105b92:	9b03      	ldr	r3, [sp, #12]
 8105b94:	2b00      	cmp	r3, #0
 8105b96:	d076      	beq.n	8105c86 <_dtoa_r+0x4de>
 8105b98:	9b02      	ldr	r3, [sp, #8]
 8105b9a:	2b00      	cmp	r3, #0
 8105b9c:	dd36      	ble.n	8105c0c <_dtoa_r+0x464>
 8105b9e:	9b00      	ldr	r3, [sp, #0]
 8105ba0:	4650      	mov	r0, sl
 8105ba2:	4659      	mov	r1, fp
 8105ba4:	1e5f      	subs	r7, r3, #1
 8105ba6:	2200      	movs	r2, #0
 8105ba8:	4b88      	ldr	r3, [pc, #544]	; (8105dcc <_dtoa_r+0x624>)
 8105baa:	f7fa fdad 	bl	8100708 <__aeabi_dmul>
 8105bae:	9e02      	ldr	r6, [sp, #8]
 8105bb0:	4682      	mov	sl, r0
 8105bb2:	468b      	mov	fp, r1
 8105bb4:	3501      	adds	r5, #1
 8105bb6:	4628      	mov	r0, r5
 8105bb8:	f7fa fd3c 	bl	8100634 <__aeabi_i2d>
 8105bbc:	4652      	mov	r2, sl
 8105bbe:	465b      	mov	r3, fp
 8105bc0:	f7fa fda2 	bl	8100708 <__aeabi_dmul>
 8105bc4:	4b82      	ldr	r3, [pc, #520]	; (8105dd0 <_dtoa_r+0x628>)
 8105bc6:	2200      	movs	r2, #0
 8105bc8:	f7fa fbe8 	bl	810039c <__adddf3>
 8105bcc:	46d0      	mov	r8, sl
 8105bce:	46d9      	mov	r9, fp
 8105bd0:	4682      	mov	sl, r0
 8105bd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8105bd6:	2e00      	cmp	r6, #0
 8105bd8:	d158      	bne.n	8105c8c <_dtoa_r+0x4e4>
 8105bda:	4b7e      	ldr	r3, [pc, #504]	; (8105dd4 <_dtoa_r+0x62c>)
 8105bdc:	2200      	movs	r2, #0
 8105bde:	4640      	mov	r0, r8
 8105be0:	4649      	mov	r1, r9
 8105be2:	f7fa fbd9 	bl	8100398 <__aeabi_dsub>
 8105be6:	4652      	mov	r2, sl
 8105be8:	465b      	mov	r3, fp
 8105bea:	4680      	mov	r8, r0
 8105bec:	4689      	mov	r9, r1
 8105bee:	f7fb f81b 	bl	8100c28 <__aeabi_dcmpgt>
 8105bf2:	2800      	cmp	r0, #0
 8105bf4:	f040 8295 	bne.w	8106122 <_dtoa_r+0x97a>
 8105bf8:	4652      	mov	r2, sl
 8105bfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8105bfe:	4640      	mov	r0, r8
 8105c00:	4649      	mov	r1, r9
 8105c02:	f7fa fff3 	bl	8100bec <__aeabi_dcmplt>
 8105c06:	2800      	cmp	r0, #0
 8105c08:	f040 8289 	bne.w	810611e <_dtoa_r+0x976>
 8105c0c:	ec5b ab19 	vmov	sl, fp, d9
 8105c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8105c12:	2b00      	cmp	r3, #0
 8105c14:	f2c0 8148 	blt.w	8105ea8 <_dtoa_r+0x700>
 8105c18:	9a00      	ldr	r2, [sp, #0]
 8105c1a:	2a0e      	cmp	r2, #14
 8105c1c:	f300 8144 	bgt.w	8105ea8 <_dtoa_r+0x700>
 8105c20:	4b67      	ldr	r3, [pc, #412]	; (8105dc0 <_dtoa_r+0x618>)
 8105c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105c26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8105c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105c2c:	2b00      	cmp	r3, #0
 8105c2e:	f280 80d5 	bge.w	8105ddc <_dtoa_r+0x634>
 8105c32:	9b03      	ldr	r3, [sp, #12]
 8105c34:	2b00      	cmp	r3, #0
 8105c36:	f300 80d1 	bgt.w	8105ddc <_dtoa_r+0x634>
 8105c3a:	f040 826f 	bne.w	810611c <_dtoa_r+0x974>
 8105c3e:	4b65      	ldr	r3, [pc, #404]	; (8105dd4 <_dtoa_r+0x62c>)
 8105c40:	2200      	movs	r2, #0
 8105c42:	4640      	mov	r0, r8
 8105c44:	4649      	mov	r1, r9
 8105c46:	f7fa fd5f 	bl	8100708 <__aeabi_dmul>
 8105c4a:	4652      	mov	r2, sl
 8105c4c:	465b      	mov	r3, fp
 8105c4e:	f7fa ffe1 	bl	8100c14 <__aeabi_dcmpge>
 8105c52:	9e03      	ldr	r6, [sp, #12]
 8105c54:	4637      	mov	r7, r6
 8105c56:	2800      	cmp	r0, #0
 8105c58:	f040 8245 	bne.w	81060e6 <_dtoa_r+0x93e>
 8105c5c:	9d01      	ldr	r5, [sp, #4]
 8105c5e:	2331      	movs	r3, #49	; 0x31
 8105c60:	f805 3b01 	strb.w	r3, [r5], #1
 8105c64:	9b00      	ldr	r3, [sp, #0]
 8105c66:	3301      	adds	r3, #1
 8105c68:	9300      	str	r3, [sp, #0]
 8105c6a:	e240      	b.n	81060ee <_dtoa_r+0x946>
 8105c6c:	07f2      	lsls	r2, r6, #31
 8105c6e:	d505      	bpl.n	8105c7c <_dtoa_r+0x4d4>
 8105c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105c74:	f7fa fd48 	bl	8100708 <__aeabi_dmul>
 8105c78:	3501      	adds	r5, #1
 8105c7a:	2301      	movs	r3, #1
 8105c7c:	1076      	asrs	r6, r6, #1
 8105c7e:	3708      	adds	r7, #8
 8105c80:	e777      	b.n	8105b72 <_dtoa_r+0x3ca>
 8105c82:	2502      	movs	r5, #2
 8105c84:	e779      	b.n	8105b7a <_dtoa_r+0x3d2>
 8105c86:	9f00      	ldr	r7, [sp, #0]
 8105c88:	9e03      	ldr	r6, [sp, #12]
 8105c8a:	e794      	b.n	8105bb6 <_dtoa_r+0x40e>
 8105c8c:	9901      	ldr	r1, [sp, #4]
 8105c8e:	4b4c      	ldr	r3, [pc, #304]	; (8105dc0 <_dtoa_r+0x618>)
 8105c90:	4431      	add	r1, r6
 8105c92:	910d      	str	r1, [sp, #52]	; 0x34
 8105c94:	9908      	ldr	r1, [sp, #32]
 8105c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8105c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8105c9e:	2900      	cmp	r1, #0
 8105ca0:	d043      	beq.n	8105d2a <_dtoa_r+0x582>
 8105ca2:	494d      	ldr	r1, [pc, #308]	; (8105dd8 <_dtoa_r+0x630>)
 8105ca4:	2000      	movs	r0, #0
 8105ca6:	f7fa fe59 	bl	810095c <__aeabi_ddiv>
 8105caa:	4652      	mov	r2, sl
 8105cac:	465b      	mov	r3, fp
 8105cae:	f7fa fb73 	bl	8100398 <__aeabi_dsub>
 8105cb2:	9d01      	ldr	r5, [sp, #4]
 8105cb4:	4682      	mov	sl, r0
 8105cb6:	468b      	mov	fp, r1
 8105cb8:	4649      	mov	r1, r9
 8105cba:	4640      	mov	r0, r8
 8105cbc:	f7fa ffd4 	bl	8100c68 <__aeabi_d2iz>
 8105cc0:	4606      	mov	r6, r0
 8105cc2:	f7fa fcb7 	bl	8100634 <__aeabi_i2d>
 8105cc6:	4602      	mov	r2, r0
 8105cc8:	460b      	mov	r3, r1
 8105cca:	4640      	mov	r0, r8
 8105ccc:	4649      	mov	r1, r9
 8105cce:	f7fa fb63 	bl	8100398 <__aeabi_dsub>
 8105cd2:	3630      	adds	r6, #48	; 0x30
 8105cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8105cd8:	4652      	mov	r2, sl
 8105cda:	465b      	mov	r3, fp
 8105cdc:	4680      	mov	r8, r0
 8105cde:	4689      	mov	r9, r1
 8105ce0:	f7fa ff84 	bl	8100bec <__aeabi_dcmplt>
 8105ce4:	2800      	cmp	r0, #0
 8105ce6:	d163      	bne.n	8105db0 <_dtoa_r+0x608>
 8105ce8:	4642      	mov	r2, r8
 8105cea:	464b      	mov	r3, r9
 8105cec:	4936      	ldr	r1, [pc, #216]	; (8105dc8 <_dtoa_r+0x620>)
 8105cee:	2000      	movs	r0, #0
 8105cf0:	f7fa fb52 	bl	8100398 <__aeabi_dsub>
 8105cf4:	4652      	mov	r2, sl
 8105cf6:	465b      	mov	r3, fp
 8105cf8:	f7fa ff78 	bl	8100bec <__aeabi_dcmplt>
 8105cfc:	2800      	cmp	r0, #0
 8105cfe:	f040 80b5 	bne.w	8105e6c <_dtoa_r+0x6c4>
 8105d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8105d04:	429d      	cmp	r5, r3
 8105d06:	d081      	beq.n	8105c0c <_dtoa_r+0x464>
 8105d08:	4b30      	ldr	r3, [pc, #192]	; (8105dcc <_dtoa_r+0x624>)
 8105d0a:	2200      	movs	r2, #0
 8105d0c:	4650      	mov	r0, sl
 8105d0e:	4659      	mov	r1, fp
 8105d10:	f7fa fcfa 	bl	8100708 <__aeabi_dmul>
 8105d14:	4b2d      	ldr	r3, [pc, #180]	; (8105dcc <_dtoa_r+0x624>)
 8105d16:	4682      	mov	sl, r0
 8105d18:	468b      	mov	fp, r1
 8105d1a:	4640      	mov	r0, r8
 8105d1c:	4649      	mov	r1, r9
 8105d1e:	2200      	movs	r2, #0
 8105d20:	f7fa fcf2 	bl	8100708 <__aeabi_dmul>
 8105d24:	4680      	mov	r8, r0
 8105d26:	4689      	mov	r9, r1
 8105d28:	e7c6      	b.n	8105cb8 <_dtoa_r+0x510>
 8105d2a:	4650      	mov	r0, sl
 8105d2c:	4659      	mov	r1, fp
 8105d2e:	f7fa fceb 	bl	8100708 <__aeabi_dmul>
 8105d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8105d34:	9d01      	ldr	r5, [sp, #4]
 8105d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8105d38:	4682      	mov	sl, r0
 8105d3a:	468b      	mov	fp, r1
 8105d3c:	4649      	mov	r1, r9
 8105d3e:	4640      	mov	r0, r8
 8105d40:	f7fa ff92 	bl	8100c68 <__aeabi_d2iz>
 8105d44:	4606      	mov	r6, r0
 8105d46:	f7fa fc75 	bl	8100634 <__aeabi_i2d>
 8105d4a:	3630      	adds	r6, #48	; 0x30
 8105d4c:	4602      	mov	r2, r0
 8105d4e:	460b      	mov	r3, r1
 8105d50:	4640      	mov	r0, r8
 8105d52:	4649      	mov	r1, r9
 8105d54:	f7fa fb20 	bl	8100398 <__aeabi_dsub>
 8105d58:	f805 6b01 	strb.w	r6, [r5], #1
 8105d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8105d5e:	429d      	cmp	r5, r3
 8105d60:	4680      	mov	r8, r0
 8105d62:	4689      	mov	r9, r1
 8105d64:	f04f 0200 	mov.w	r2, #0
 8105d68:	d124      	bne.n	8105db4 <_dtoa_r+0x60c>
 8105d6a:	4b1b      	ldr	r3, [pc, #108]	; (8105dd8 <_dtoa_r+0x630>)
 8105d6c:	4650      	mov	r0, sl
 8105d6e:	4659      	mov	r1, fp
 8105d70:	f7fa fb14 	bl	810039c <__adddf3>
 8105d74:	4602      	mov	r2, r0
 8105d76:	460b      	mov	r3, r1
 8105d78:	4640      	mov	r0, r8
 8105d7a:	4649      	mov	r1, r9
 8105d7c:	f7fa ff54 	bl	8100c28 <__aeabi_dcmpgt>
 8105d80:	2800      	cmp	r0, #0
 8105d82:	d173      	bne.n	8105e6c <_dtoa_r+0x6c4>
 8105d84:	4652      	mov	r2, sl
 8105d86:	465b      	mov	r3, fp
 8105d88:	4913      	ldr	r1, [pc, #76]	; (8105dd8 <_dtoa_r+0x630>)
 8105d8a:	2000      	movs	r0, #0
 8105d8c:	f7fa fb04 	bl	8100398 <__aeabi_dsub>
 8105d90:	4602      	mov	r2, r0
 8105d92:	460b      	mov	r3, r1
 8105d94:	4640      	mov	r0, r8
 8105d96:	4649      	mov	r1, r9
 8105d98:	f7fa ff28 	bl	8100bec <__aeabi_dcmplt>
 8105d9c:	2800      	cmp	r0, #0
 8105d9e:	f43f af35 	beq.w	8105c0c <_dtoa_r+0x464>
 8105da2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8105da4:	1e6b      	subs	r3, r5, #1
 8105da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8105da8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8105dac:	2b30      	cmp	r3, #48	; 0x30
 8105dae:	d0f8      	beq.n	8105da2 <_dtoa_r+0x5fa>
 8105db0:	9700      	str	r7, [sp, #0]
 8105db2:	e049      	b.n	8105e48 <_dtoa_r+0x6a0>
 8105db4:	4b05      	ldr	r3, [pc, #20]	; (8105dcc <_dtoa_r+0x624>)
 8105db6:	f7fa fca7 	bl	8100708 <__aeabi_dmul>
 8105dba:	4680      	mov	r8, r0
 8105dbc:	4689      	mov	r9, r1
 8105dbe:	e7bd      	b.n	8105d3c <_dtoa_r+0x594>
 8105dc0:	081088f0 	.word	0x081088f0
 8105dc4:	081088c8 	.word	0x081088c8
 8105dc8:	3ff00000 	.word	0x3ff00000
 8105dcc:	40240000 	.word	0x40240000
 8105dd0:	401c0000 	.word	0x401c0000
 8105dd4:	40140000 	.word	0x40140000
 8105dd8:	3fe00000 	.word	0x3fe00000
 8105ddc:	9d01      	ldr	r5, [sp, #4]
 8105dde:	4656      	mov	r6, sl
 8105de0:	465f      	mov	r7, fp
 8105de2:	4642      	mov	r2, r8
 8105de4:	464b      	mov	r3, r9
 8105de6:	4630      	mov	r0, r6
 8105de8:	4639      	mov	r1, r7
 8105dea:	f7fa fdb7 	bl	810095c <__aeabi_ddiv>
 8105dee:	f7fa ff3b 	bl	8100c68 <__aeabi_d2iz>
 8105df2:	4682      	mov	sl, r0
 8105df4:	f7fa fc1e 	bl	8100634 <__aeabi_i2d>
 8105df8:	4642      	mov	r2, r8
 8105dfa:	464b      	mov	r3, r9
 8105dfc:	f7fa fc84 	bl	8100708 <__aeabi_dmul>
 8105e00:	4602      	mov	r2, r0
 8105e02:	460b      	mov	r3, r1
 8105e04:	4630      	mov	r0, r6
 8105e06:	4639      	mov	r1, r7
 8105e08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8105e0c:	f7fa fac4 	bl	8100398 <__aeabi_dsub>
 8105e10:	f805 6b01 	strb.w	r6, [r5], #1
 8105e14:	9e01      	ldr	r6, [sp, #4]
 8105e16:	9f03      	ldr	r7, [sp, #12]
 8105e18:	1bae      	subs	r6, r5, r6
 8105e1a:	42b7      	cmp	r7, r6
 8105e1c:	4602      	mov	r2, r0
 8105e1e:	460b      	mov	r3, r1
 8105e20:	d135      	bne.n	8105e8e <_dtoa_r+0x6e6>
 8105e22:	f7fa fabb 	bl	810039c <__adddf3>
 8105e26:	4642      	mov	r2, r8
 8105e28:	464b      	mov	r3, r9
 8105e2a:	4606      	mov	r6, r0
 8105e2c:	460f      	mov	r7, r1
 8105e2e:	f7fa fefb 	bl	8100c28 <__aeabi_dcmpgt>
 8105e32:	b9d0      	cbnz	r0, 8105e6a <_dtoa_r+0x6c2>
 8105e34:	4642      	mov	r2, r8
 8105e36:	464b      	mov	r3, r9
 8105e38:	4630      	mov	r0, r6
 8105e3a:	4639      	mov	r1, r7
 8105e3c:	f7fa fecc 	bl	8100bd8 <__aeabi_dcmpeq>
 8105e40:	b110      	cbz	r0, 8105e48 <_dtoa_r+0x6a0>
 8105e42:	f01a 0f01 	tst.w	sl, #1
 8105e46:	d110      	bne.n	8105e6a <_dtoa_r+0x6c2>
 8105e48:	4620      	mov	r0, r4
 8105e4a:	ee18 1a10 	vmov	r1, s16
 8105e4e:	f000 ff5f 	bl	8106d10 <_Bfree>
 8105e52:	2300      	movs	r3, #0
 8105e54:	9800      	ldr	r0, [sp, #0]
 8105e56:	702b      	strb	r3, [r5, #0]
 8105e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8105e5a:	3001      	adds	r0, #1
 8105e5c:	6018      	str	r0, [r3, #0]
 8105e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	f43f acf1 	beq.w	8105848 <_dtoa_r+0xa0>
 8105e66:	601d      	str	r5, [r3, #0]
 8105e68:	e4ee      	b.n	8105848 <_dtoa_r+0xa0>
 8105e6a:	9f00      	ldr	r7, [sp, #0]
 8105e6c:	462b      	mov	r3, r5
 8105e6e:	461d      	mov	r5, r3
 8105e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8105e74:	2a39      	cmp	r2, #57	; 0x39
 8105e76:	d106      	bne.n	8105e86 <_dtoa_r+0x6de>
 8105e78:	9a01      	ldr	r2, [sp, #4]
 8105e7a:	429a      	cmp	r2, r3
 8105e7c:	d1f7      	bne.n	8105e6e <_dtoa_r+0x6c6>
 8105e7e:	9901      	ldr	r1, [sp, #4]
 8105e80:	2230      	movs	r2, #48	; 0x30
 8105e82:	3701      	adds	r7, #1
 8105e84:	700a      	strb	r2, [r1, #0]
 8105e86:	781a      	ldrb	r2, [r3, #0]
 8105e88:	3201      	adds	r2, #1
 8105e8a:	701a      	strb	r2, [r3, #0]
 8105e8c:	e790      	b.n	8105db0 <_dtoa_r+0x608>
 8105e8e:	4ba6      	ldr	r3, [pc, #664]	; (8106128 <_dtoa_r+0x980>)
 8105e90:	2200      	movs	r2, #0
 8105e92:	f7fa fc39 	bl	8100708 <__aeabi_dmul>
 8105e96:	2200      	movs	r2, #0
 8105e98:	2300      	movs	r3, #0
 8105e9a:	4606      	mov	r6, r0
 8105e9c:	460f      	mov	r7, r1
 8105e9e:	f7fa fe9b 	bl	8100bd8 <__aeabi_dcmpeq>
 8105ea2:	2800      	cmp	r0, #0
 8105ea4:	d09d      	beq.n	8105de2 <_dtoa_r+0x63a>
 8105ea6:	e7cf      	b.n	8105e48 <_dtoa_r+0x6a0>
 8105ea8:	9a08      	ldr	r2, [sp, #32]
 8105eaa:	2a00      	cmp	r2, #0
 8105eac:	f000 80d7 	beq.w	810605e <_dtoa_r+0x8b6>
 8105eb0:	9a06      	ldr	r2, [sp, #24]
 8105eb2:	2a01      	cmp	r2, #1
 8105eb4:	f300 80ba 	bgt.w	810602c <_dtoa_r+0x884>
 8105eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8105eba:	2a00      	cmp	r2, #0
 8105ebc:	f000 80b2 	beq.w	8106024 <_dtoa_r+0x87c>
 8105ec0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8105ec4:	9e07      	ldr	r6, [sp, #28]
 8105ec6:	9d04      	ldr	r5, [sp, #16]
 8105ec8:	9a04      	ldr	r2, [sp, #16]
 8105eca:	441a      	add	r2, r3
 8105ecc:	9204      	str	r2, [sp, #16]
 8105ece:	9a05      	ldr	r2, [sp, #20]
 8105ed0:	2101      	movs	r1, #1
 8105ed2:	441a      	add	r2, r3
 8105ed4:	4620      	mov	r0, r4
 8105ed6:	9205      	str	r2, [sp, #20]
 8105ed8:	f001 f81c 	bl	8106f14 <__i2b>
 8105edc:	4607      	mov	r7, r0
 8105ede:	2d00      	cmp	r5, #0
 8105ee0:	dd0c      	ble.n	8105efc <_dtoa_r+0x754>
 8105ee2:	9b05      	ldr	r3, [sp, #20]
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	dd09      	ble.n	8105efc <_dtoa_r+0x754>
 8105ee8:	42ab      	cmp	r3, r5
 8105eea:	9a04      	ldr	r2, [sp, #16]
 8105eec:	bfa8      	it	ge
 8105eee:	462b      	movge	r3, r5
 8105ef0:	1ad2      	subs	r2, r2, r3
 8105ef2:	9204      	str	r2, [sp, #16]
 8105ef4:	9a05      	ldr	r2, [sp, #20]
 8105ef6:	1aed      	subs	r5, r5, r3
 8105ef8:	1ad3      	subs	r3, r2, r3
 8105efa:	9305      	str	r3, [sp, #20]
 8105efc:	9b07      	ldr	r3, [sp, #28]
 8105efe:	b31b      	cbz	r3, 8105f48 <_dtoa_r+0x7a0>
 8105f00:	9b08      	ldr	r3, [sp, #32]
 8105f02:	2b00      	cmp	r3, #0
 8105f04:	f000 80af 	beq.w	8106066 <_dtoa_r+0x8be>
 8105f08:	2e00      	cmp	r6, #0
 8105f0a:	dd13      	ble.n	8105f34 <_dtoa_r+0x78c>
 8105f0c:	4639      	mov	r1, r7
 8105f0e:	4632      	mov	r2, r6
 8105f10:	4620      	mov	r0, r4
 8105f12:	f001 f8bf 	bl	8107094 <__pow5mult>
 8105f16:	ee18 2a10 	vmov	r2, s16
 8105f1a:	4601      	mov	r1, r0
 8105f1c:	4607      	mov	r7, r0
 8105f1e:	4620      	mov	r0, r4
 8105f20:	f001 f80e 	bl	8106f40 <__multiply>
 8105f24:	ee18 1a10 	vmov	r1, s16
 8105f28:	4680      	mov	r8, r0
 8105f2a:	4620      	mov	r0, r4
 8105f2c:	f000 fef0 	bl	8106d10 <_Bfree>
 8105f30:	ee08 8a10 	vmov	s16, r8
 8105f34:	9b07      	ldr	r3, [sp, #28]
 8105f36:	1b9a      	subs	r2, r3, r6
 8105f38:	d006      	beq.n	8105f48 <_dtoa_r+0x7a0>
 8105f3a:	ee18 1a10 	vmov	r1, s16
 8105f3e:	4620      	mov	r0, r4
 8105f40:	f001 f8a8 	bl	8107094 <__pow5mult>
 8105f44:	ee08 0a10 	vmov	s16, r0
 8105f48:	2101      	movs	r1, #1
 8105f4a:	4620      	mov	r0, r4
 8105f4c:	f000 ffe2 	bl	8106f14 <__i2b>
 8105f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105f52:	2b00      	cmp	r3, #0
 8105f54:	4606      	mov	r6, r0
 8105f56:	f340 8088 	ble.w	810606a <_dtoa_r+0x8c2>
 8105f5a:	461a      	mov	r2, r3
 8105f5c:	4601      	mov	r1, r0
 8105f5e:	4620      	mov	r0, r4
 8105f60:	f001 f898 	bl	8107094 <__pow5mult>
 8105f64:	9b06      	ldr	r3, [sp, #24]
 8105f66:	2b01      	cmp	r3, #1
 8105f68:	4606      	mov	r6, r0
 8105f6a:	f340 8081 	ble.w	8106070 <_dtoa_r+0x8c8>
 8105f6e:	f04f 0800 	mov.w	r8, #0
 8105f72:	6933      	ldr	r3, [r6, #16]
 8105f74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8105f78:	6918      	ldr	r0, [r3, #16]
 8105f7a:	f000 ff7b 	bl	8106e74 <__hi0bits>
 8105f7e:	f1c0 0020 	rsb	r0, r0, #32
 8105f82:	9b05      	ldr	r3, [sp, #20]
 8105f84:	4418      	add	r0, r3
 8105f86:	f010 001f 	ands.w	r0, r0, #31
 8105f8a:	f000 8092 	beq.w	81060b2 <_dtoa_r+0x90a>
 8105f8e:	f1c0 0320 	rsb	r3, r0, #32
 8105f92:	2b04      	cmp	r3, #4
 8105f94:	f340 808a 	ble.w	81060ac <_dtoa_r+0x904>
 8105f98:	f1c0 001c 	rsb	r0, r0, #28
 8105f9c:	9b04      	ldr	r3, [sp, #16]
 8105f9e:	4403      	add	r3, r0
 8105fa0:	9304      	str	r3, [sp, #16]
 8105fa2:	9b05      	ldr	r3, [sp, #20]
 8105fa4:	4403      	add	r3, r0
 8105fa6:	4405      	add	r5, r0
 8105fa8:	9305      	str	r3, [sp, #20]
 8105faa:	9b04      	ldr	r3, [sp, #16]
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	dd07      	ble.n	8105fc0 <_dtoa_r+0x818>
 8105fb0:	ee18 1a10 	vmov	r1, s16
 8105fb4:	461a      	mov	r2, r3
 8105fb6:	4620      	mov	r0, r4
 8105fb8:	f001 f8c6 	bl	8107148 <__lshift>
 8105fbc:	ee08 0a10 	vmov	s16, r0
 8105fc0:	9b05      	ldr	r3, [sp, #20]
 8105fc2:	2b00      	cmp	r3, #0
 8105fc4:	dd05      	ble.n	8105fd2 <_dtoa_r+0x82a>
 8105fc6:	4631      	mov	r1, r6
 8105fc8:	461a      	mov	r2, r3
 8105fca:	4620      	mov	r0, r4
 8105fcc:	f001 f8bc 	bl	8107148 <__lshift>
 8105fd0:	4606      	mov	r6, r0
 8105fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105fd4:	2b00      	cmp	r3, #0
 8105fd6:	d06e      	beq.n	81060b6 <_dtoa_r+0x90e>
 8105fd8:	ee18 0a10 	vmov	r0, s16
 8105fdc:	4631      	mov	r1, r6
 8105fde:	f001 f923 	bl	8107228 <__mcmp>
 8105fe2:	2800      	cmp	r0, #0
 8105fe4:	da67      	bge.n	81060b6 <_dtoa_r+0x90e>
 8105fe6:	9b00      	ldr	r3, [sp, #0]
 8105fe8:	3b01      	subs	r3, #1
 8105fea:	ee18 1a10 	vmov	r1, s16
 8105fee:	9300      	str	r3, [sp, #0]
 8105ff0:	220a      	movs	r2, #10
 8105ff2:	2300      	movs	r3, #0
 8105ff4:	4620      	mov	r0, r4
 8105ff6:	f000 fead 	bl	8106d54 <__multadd>
 8105ffa:	9b08      	ldr	r3, [sp, #32]
 8105ffc:	ee08 0a10 	vmov	s16, r0
 8106000:	2b00      	cmp	r3, #0
 8106002:	f000 81b1 	beq.w	8106368 <_dtoa_r+0xbc0>
 8106006:	2300      	movs	r3, #0
 8106008:	4639      	mov	r1, r7
 810600a:	220a      	movs	r2, #10
 810600c:	4620      	mov	r0, r4
 810600e:	f000 fea1 	bl	8106d54 <__multadd>
 8106012:	9b02      	ldr	r3, [sp, #8]
 8106014:	2b00      	cmp	r3, #0
 8106016:	4607      	mov	r7, r0
 8106018:	f300 808e 	bgt.w	8106138 <_dtoa_r+0x990>
 810601c:	9b06      	ldr	r3, [sp, #24]
 810601e:	2b02      	cmp	r3, #2
 8106020:	dc51      	bgt.n	81060c6 <_dtoa_r+0x91e>
 8106022:	e089      	b.n	8106138 <_dtoa_r+0x990>
 8106024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8106026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810602a:	e74b      	b.n	8105ec4 <_dtoa_r+0x71c>
 810602c:	9b03      	ldr	r3, [sp, #12]
 810602e:	1e5e      	subs	r6, r3, #1
 8106030:	9b07      	ldr	r3, [sp, #28]
 8106032:	42b3      	cmp	r3, r6
 8106034:	bfbf      	itttt	lt
 8106036:	9b07      	ldrlt	r3, [sp, #28]
 8106038:	9607      	strlt	r6, [sp, #28]
 810603a:	1af2      	sublt	r2, r6, r3
 810603c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810603e:	bfb6      	itet	lt
 8106040:	189b      	addlt	r3, r3, r2
 8106042:	1b9e      	subge	r6, r3, r6
 8106044:	930a      	strlt	r3, [sp, #40]	; 0x28
 8106046:	9b03      	ldr	r3, [sp, #12]
 8106048:	bfb8      	it	lt
 810604a:	2600      	movlt	r6, #0
 810604c:	2b00      	cmp	r3, #0
 810604e:	bfb7      	itett	lt
 8106050:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8106054:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8106058:	1a9d      	sublt	r5, r3, r2
 810605a:	2300      	movlt	r3, #0
 810605c:	e734      	b.n	8105ec8 <_dtoa_r+0x720>
 810605e:	9e07      	ldr	r6, [sp, #28]
 8106060:	9d04      	ldr	r5, [sp, #16]
 8106062:	9f08      	ldr	r7, [sp, #32]
 8106064:	e73b      	b.n	8105ede <_dtoa_r+0x736>
 8106066:	9a07      	ldr	r2, [sp, #28]
 8106068:	e767      	b.n	8105f3a <_dtoa_r+0x792>
 810606a:	9b06      	ldr	r3, [sp, #24]
 810606c:	2b01      	cmp	r3, #1
 810606e:	dc18      	bgt.n	81060a2 <_dtoa_r+0x8fa>
 8106070:	f1ba 0f00 	cmp.w	sl, #0
 8106074:	d115      	bne.n	81060a2 <_dtoa_r+0x8fa>
 8106076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810607a:	b993      	cbnz	r3, 81060a2 <_dtoa_r+0x8fa>
 810607c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8106080:	0d1b      	lsrs	r3, r3, #20
 8106082:	051b      	lsls	r3, r3, #20
 8106084:	b183      	cbz	r3, 81060a8 <_dtoa_r+0x900>
 8106086:	9b04      	ldr	r3, [sp, #16]
 8106088:	3301      	adds	r3, #1
 810608a:	9304      	str	r3, [sp, #16]
 810608c:	9b05      	ldr	r3, [sp, #20]
 810608e:	3301      	adds	r3, #1
 8106090:	9305      	str	r3, [sp, #20]
 8106092:	f04f 0801 	mov.w	r8, #1
 8106096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106098:	2b00      	cmp	r3, #0
 810609a:	f47f af6a 	bne.w	8105f72 <_dtoa_r+0x7ca>
 810609e:	2001      	movs	r0, #1
 81060a0:	e76f      	b.n	8105f82 <_dtoa_r+0x7da>
 81060a2:	f04f 0800 	mov.w	r8, #0
 81060a6:	e7f6      	b.n	8106096 <_dtoa_r+0x8ee>
 81060a8:	4698      	mov	r8, r3
 81060aa:	e7f4      	b.n	8106096 <_dtoa_r+0x8ee>
 81060ac:	f43f af7d 	beq.w	8105faa <_dtoa_r+0x802>
 81060b0:	4618      	mov	r0, r3
 81060b2:	301c      	adds	r0, #28
 81060b4:	e772      	b.n	8105f9c <_dtoa_r+0x7f4>
 81060b6:	9b03      	ldr	r3, [sp, #12]
 81060b8:	2b00      	cmp	r3, #0
 81060ba:	dc37      	bgt.n	810612c <_dtoa_r+0x984>
 81060bc:	9b06      	ldr	r3, [sp, #24]
 81060be:	2b02      	cmp	r3, #2
 81060c0:	dd34      	ble.n	810612c <_dtoa_r+0x984>
 81060c2:	9b03      	ldr	r3, [sp, #12]
 81060c4:	9302      	str	r3, [sp, #8]
 81060c6:	9b02      	ldr	r3, [sp, #8]
 81060c8:	b96b      	cbnz	r3, 81060e6 <_dtoa_r+0x93e>
 81060ca:	4631      	mov	r1, r6
 81060cc:	2205      	movs	r2, #5
 81060ce:	4620      	mov	r0, r4
 81060d0:	f000 fe40 	bl	8106d54 <__multadd>
 81060d4:	4601      	mov	r1, r0
 81060d6:	4606      	mov	r6, r0
 81060d8:	ee18 0a10 	vmov	r0, s16
 81060dc:	f001 f8a4 	bl	8107228 <__mcmp>
 81060e0:	2800      	cmp	r0, #0
 81060e2:	f73f adbb 	bgt.w	8105c5c <_dtoa_r+0x4b4>
 81060e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81060e8:	9d01      	ldr	r5, [sp, #4]
 81060ea:	43db      	mvns	r3, r3
 81060ec:	9300      	str	r3, [sp, #0]
 81060ee:	f04f 0800 	mov.w	r8, #0
 81060f2:	4631      	mov	r1, r6
 81060f4:	4620      	mov	r0, r4
 81060f6:	f000 fe0b 	bl	8106d10 <_Bfree>
 81060fa:	2f00      	cmp	r7, #0
 81060fc:	f43f aea4 	beq.w	8105e48 <_dtoa_r+0x6a0>
 8106100:	f1b8 0f00 	cmp.w	r8, #0
 8106104:	d005      	beq.n	8106112 <_dtoa_r+0x96a>
 8106106:	45b8      	cmp	r8, r7
 8106108:	d003      	beq.n	8106112 <_dtoa_r+0x96a>
 810610a:	4641      	mov	r1, r8
 810610c:	4620      	mov	r0, r4
 810610e:	f000 fdff 	bl	8106d10 <_Bfree>
 8106112:	4639      	mov	r1, r7
 8106114:	4620      	mov	r0, r4
 8106116:	f000 fdfb 	bl	8106d10 <_Bfree>
 810611a:	e695      	b.n	8105e48 <_dtoa_r+0x6a0>
 810611c:	2600      	movs	r6, #0
 810611e:	4637      	mov	r7, r6
 8106120:	e7e1      	b.n	81060e6 <_dtoa_r+0x93e>
 8106122:	9700      	str	r7, [sp, #0]
 8106124:	4637      	mov	r7, r6
 8106126:	e599      	b.n	8105c5c <_dtoa_r+0x4b4>
 8106128:	40240000 	.word	0x40240000
 810612c:	9b08      	ldr	r3, [sp, #32]
 810612e:	2b00      	cmp	r3, #0
 8106130:	f000 80ca 	beq.w	81062c8 <_dtoa_r+0xb20>
 8106134:	9b03      	ldr	r3, [sp, #12]
 8106136:	9302      	str	r3, [sp, #8]
 8106138:	2d00      	cmp	r5, #0
 810613a:	dd05      	ble.n	8106148 <_dtoa_r+0x9a0>
 810613c:	4639      	mov	r1, r7
 810613e:	462a      	mov	r2, r5
 8106140:	4620      	mov	r0, r4
 8106142:	f001 f801 	bl	8107148 <__lshift>
 8106146:	4607      	mov	r7, r0
 8106148:	f1b8 0f00 	cmp.w	r8, #0
 810614c:	d05b      	beq.n	8106206 <_dtoa_r+0xa5e>
 810614e:	6879      	ldr	r1, [r7, #4]
 8106150:	4620      	mov	r0, r4
 8106152:	f000 fd9d 	bl	8106c90 <_Balloc>
 8106156:	4605      	mov	r5, r0
 8106158:	b928      	cbnz	r0, 8106166 <_dtoa_r+0x9be>
 810615a:	4b87      	ldr	r3, [pc, #540]	; (8106378 <_dtoa_r+0xbd0>)
 810615c:	4602      	mov	r2, r0
 810615e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8106162:	f7ff bb3b 	b.w	81057dc <_dtoa_r+0x34>
 8106166:	693a      	ldr	r2, [r7, #16]
 8106168:	3202      	adds	r2, #2
 810616a:	0092      	lsls	r2, r2, #2
 810616c:	f107 010c 	add.w	r1, r7, #12
 8106170:	300c      	adds	r0, #12
 8106172:	f7fd fd13 	bl	8103b9c <memcpy>
 8106176:	2201      	movs	r2, #1
 8106178:	4629      	mov	r1, r5
 810617a:	4620      	mov	r0, r4
 810617c:	f000 ffe4 	bl	8107148 <__lshift>
 8106180:	9b01      	ldr	r3, [sp, #4]
 8106182:	f103 0901 	add.w	r9, r3, #1
 8106186:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810618a:	4413      	add	r3, r2
 810618c:	9305      	str	r3, [sp, #20]
 810618e:	f00a 0301 	and.w	r3, sl, #1
 8106192:	46b8      	mov	r8, r7
 8106194:	9304      	str	r3, [sp, #16]
 8106196:	4607      	mov	r7, r0
 8106198:	4631      	mov	r1, r6
 810619a:	ee18 0a10 	vmov	r0, s16
 810619e:	f7ff fa77 	bl	8105690 <quorem>
 81061a2:	4641      	mov	r1, r8
 81061a4:	9002      	str	r0, [sp, #8]
 81061a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 81061aa:	ee18 0a10 	vmov	r0, s16
 81061ae:	f001 f83b 	bl	8107228 <__mcmp>
 81061b2:	463a      	mov	r2, r7
 81061b4:	9003      	str	r0, [sp, #12]
 81061b6:	4631      	mov	r1, r6
 81061b8:	4620      	mov	r0, r4
 81061ba:	f001 f851 	bl	8107260 <__mdiff>
 81061be:	68c2      	ldr	r2, [r0, #12]
 81061c0:	f109 3bff 	add.w	fp, r9, #4294967295
 81061c4:	4605      	mov	r5, r0
 81061c6:	bb02      	cbnz	r2, 810620a <_dtoa_r+0xa62>
 81061c8:	4601      	mov	r1, r0
 81061ca:	ee18 0a10 	vmov	r0, s16
 81061ce:	f001 f82b 	bl	8107228 <__mcmp>
 81061d2:	4602      	mov	r2, r0
 81061d4:	4629      	mov	r1, r5
 81061d6:	4620      	mov	r0, r4
 81061d8:	9207      	str	r2, [sp, #28]
 81061da:	f000 fd99 	bl	8106d10 <_Bfree>
 81061de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 81061e2:	ea43 0102 	orr.w	r1, r3, r2
 81061e6:	9b04      	ldr	r3, [sp, #16]
 81061e8:	430b      	orrs	r3, r1
 81061ea:	464d      	mov	r5, r9
 81061ec:	d10f      	bne.n	810620e <_dtoa_r+0xa66>
 81061ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 81061f2:	d02a      	beq.n	810624a <_dtoa_r+0xaa2>
 81061f4:	9b03      	ldr	r3, [sp, #12]
 81061f6:	2b00      	cmp	r3, #0
 81061f8:	dd02      	ble.n	8106200 <_dtoa_r+0xa58>
 81061fa:	9b02      	ldr	r3, [sp, #8]
 81061fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8106200:	f88b a000 	strb.w	sl, [fp]
 8106204:	e775      	b.n	81060f2 <_dtoa_r+0x94a>
 8106206:	4638      	mov	r0, r7
 8106208:	e7ba      	b.n	8106180 <_dtoa_r+0x9d8>
 810620a:	2201      	movs	r2, #1
 810620c:	e7e2      	b.n	81061d4 <_dtoa_r+0xa2c>
 810620e:	9b03      	ldr	r3, [sp, #12]
 8106210:	2b00      	cmp	r3, #0
 8106212:	db04      	blt.n	810621e <_dtoa_r+0xa76>
 8106214:	9906      	ldr	r1, [sp, #24]
 8106216:	430b      	orrs	r3, r1
 8106218:	9904      	ldr	r1, [sp, #16]
 810621a:	430b      	orrs	r3, r1
 810621c:	d122      	bne.n	8106264 <_dtoa_r+0xabc>
 810621e:	2a00      	cmp	r2, #0
 8106220:	ddee      	ble.n	8106200 <_dtoa_r+0xa58>
 8106222:	ee18 1a10 	vmov	r1, s16
 8106226:	2201      	movs	r2, #1
 8106228:	4620      	mov	r0, r4
 810622a:	f000 ff8d 	bl	8107148 <__lshift>
 810622e:	4631      	mov	r1, r6
 8106230:	ee08 0a10 	vmov	s16, r0
 8106234:	f000 fff8 	bl	8107228 <__mcmp>
 8106238:	2800      	cmp	r0, #0
 810623a:	dc03      	bgt.n	8106244 <_dtoa_r+0xa9c>
 810623c:	d1e0      	bne.n	8106200 <_dtoa_r+0xa58>
 810623e:	f01a 0f01 	tst.w	sl, #1
 8106242:	d0dd      	beq.n	8106200 <_dtoa_r+0xa58>
 8106244:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8106248:	d1d7      	bne.n	81061fa <_dtoa_r+0xa52>
 810624a:	2339      	movs	r3, #57	; 0x39
 810624c:	f88b 3000 	strb.w	r3, [fp]
 8106250:	462b      	mov	r3, r5
 8106252:	461d      	mov	r5, r3
 8106254:	3b01      	subs	r3, #1
 8106256:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810625a:	2a39      	cmp	r2, #57	; 0x39
 810625c:	d071      	beq.n	8106342 <_dtoa_r+0xb9a>
 810625e:	3201      	adds	r2, #1
 8106260:	701a      	strb	r2, [r3, #0]
 8106262:	e746      	b.n	81060f2 <_dtoa_r+0x94a>
 8106264:	2a00      	cmp	r2, #0
 8106266:	dd07      	ble.n	8106278 <_dtoa_r+0xad0>
 8106268:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810626c:	d0ed      	beq.n	810624a <_dtoa_r+0xaa2>
 810626e:	f10a 0301 	add.w	r3, sl, #1
 8106272:	f88b 3000 	strb.w	r3, [fp]
 8106276:	e73c      	b.n	81060f2 <_dtoa_r+0x94a>
 8106278:	9b05      	ldr	r3, [sp, #20]
 810627a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810627e:	4599      	cmp	r9, r3
 8106280:	d047      	beq.n	8106312 <_dtoa_r+0xb6a>
 8106282:	ee18 1a10 	vmov	r1, s16
 8106286:	2300      	movs	r3, #0
 8106288:	220a      	movs	r2, #10
 810628a:	4620      	mov	r0, r4
 810628c:	f000 fd62 	bl	8106d54 <__multadd>
 8106290:	45b8      	cmp	r8, r7
 8106292:	ee08 0a10 	vmov	s16, r0
 8106296:	f04f 0300 	mov.w	r3, #0
 810629a:	f04f 020a 	mov.w	r2, #10
 810629e:	4641      	mov	r1, r8
 81062a0:	4620      	mov	r0, r4
 81062a2:	d106      	bne.n	81062b2 <_dtoa_r+0xb0a>
 81062a4:	f000 fd56 	bl	8106d54 <__multadd>
 81062a8:	4680      	mov	r8, r0
 81062aa:	4607      	mov	r7, r0
 81062ac:	f109 0901 	add.w	r9, r9, #1
 81062b0:	e772      	b.n	8106198 <_dtoa_r+0x9f0>
 81062b2:	f000 fd4f 	bl	8106d54 <__multadd>
 81062b6:	4639      	mov	r1, r7
 81062b8:	4680      	mov	r8, r0
 81062ba:	2300      	movs	r3, #0
 81062bc:	220a      	movs	r2, #10
 81062be:	4620      	mov	r0, r4
 81062c0:	f000 fd48 	bl	8106d54 <__multadd>
 81062c4:	4607      	mov	r7, r0
 81062c6:	e7f1      	b.n	81062ac <_dtoa_r+0xb04>
 81062c8:	9b03      	ldr	r3, [sp, #12]
 81062ca:	9302      	str	r3, [sp, #8]
 81062cc:	9d01      	ldr	r5, [sp, #4]
 81062ce:	ee18 0a10 	vmov	r0, s16
 81062d2:	4631      	mov	r1, r6
 81062d4:	f7ff f9dc 	bl	8105690 <quorem>
 81062d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 81062dc:	9b01      	ldr	r3, [sp, #4]
 81062de:	f805 ab01 	strb.w	sl, [r5], #1
 81062e2:	1aea      	subs	r2, r5, r3
 81062e4:	9b02      	ldr	r3, [sp, #8]
 81062e6:	4293      	cmp	r3, r2
 81062e8:	dd09      	ble.n	81062fe <_dtoa_r+0xb56>
 81062ea:	ee18 1a10 	vmov	r1, s16
 81062ee:	2300      	movs	r3, #0
 81062f0:	220a      	movs	r2, #10
 81062f2:	4620      	mov	r0, r4
 81062f4:	f000 fd2e 	bl	8106d54 <__multadd>
 81062f8:	ee08 0a10 	vmov	s16, r0
 81062fc:	e7e7      	b.n	81062ce <_dtoa_r+0xb26>
 81062fe:	9b02      	ldr	r3, [sp, #8]
 8106300:	2b00      	cmp	r3, #0
 8106302:	bfc8      	it	gt
 8106304:	461d      	movgt	r5, r3
 8106306:	9b01      	ldr	r3, [sp, #4]
 8106308:	bfd8      	it	le
 810630a:	2501      	movle	r5, #1
 810630c:	441d      	add	r5, r3
 810630e:	f04f 0800 	mov.w	r8, #0
 8106312:	ee18 1a10 	vmov	r1, s16
 8106316:	2201      	movs	r2, #1
 8106318:	4620      	mov	r0, r4
 810631a:	f000 ff15 	bl	8107148 <__lshift>
 810631e:	4631      	mov	r1, r6
 8106320:	ee08 0a10 	vmov	s16, r0
 8106324:	f000 ff80 	bl	8107228 <__mcmp>
 8106328:	2800      	cmp	r0, #0
 810632a:	dc91      	bgt.n	8106250 <_dtoa_r+0xaa8>
 810632c:	d102      	bne.n	8106334 <_dtoa_r+0xb8c>
 810632e:	f01a 0f01 	tst.w	sl, #1
 8106332:	d18d      	bne.n	8106250 <_dtoa_r+0xaa8>
 8106334:	462b      	mov	r3, r5
 8106336:	461d      	mov	r5, r3
 8106338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810633c:	2a30      	cmp	r2, #48	; 0x30
 810633e:	d0fa      	beq.n	8106336 <_dtoa_r+0xb8e>
 8106340:	e6d7      	b.n	81060f2 <_dtoa_r+0x94a>
 8106342:	9a01      	ldr	r2, [sp, #4]
 8106344:	429a      	cmp	r2, r3
 8106346:	d184      	bne.n	8106252 <_dtoa_r+0xaaa>
 8106348:	9b00      	ldr	r3, [sp, #0]
 810634a:	3301      	adds	r3, #1
 810634c:	9300      	str	r3, [sp, #0]
 810634e:	2331      	movs	r3, #49	; 0x31
 8106350:	7013      	strb	r3, [r2, #0]
 8106352:	e6ce      	b.n	81060f2 <_dtoa_r+0x94a>
 8106354:	4b09      	ldr	r3, [pc, #36]	; (810637c <_dtoa_r+0xbd4>)
 8106356:	f7ff ba95 	b.w	8105884 <_dtoa_r+0xdc>
 810635a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810635c:	2b00      	cmp	r3, #0
 810635e:	f47f aa6e 	bne.w	810583e <_dtoa_r+0x96>
 8106362:	4b07      	ldr	r3, [pc, #28]	; (8106380 <_dtoa_r+0xbd8>)
 8106364:	f7ff ba8e 	b.w	8105884 <_dtoa_r+0xdc>
 8106368:	9b02      	ldr	r3, [sp, #8]
 810636a:	2b00      	cmp	r3, #0
 810636c:	dcae      	bgt.n	81062cc <_dtoa_r+0xb24>
 810636e:	9b06      	ldr	r3, [sp, #24]
 8106370:	2b02      	cmp	r3, #2
 8106372:	f73f aea8 	bgt.w	81060c6 <_dtoa_r+0x91e>
 8106376:	e7a9      	b.n	81062cc <_dtoa_r+0xb24>
 8106378:	08108778 	.word	0x08108778
 810637c:	0810857c 	.word	0x0810857c
 8106380:	081086f9 	.word	0x081086f9

08106384 <std>:
 8106384:	2300      	movs	r3, #0
 8106386:	b510      	push	{r4, lr}
 8106388:	4604      	mov	r4, r0
 810638a:	e9c0 3300 	strd	r3, r3, [r0]
 810638e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106392:	6083      	str	r3, [r0, #8]
 8106394:	8181      	strh	r1, [r0, #12]
 8106396:	6643      	str	r3, [r0, #100]	; 0x64
 8106398:	81c2      	strh	r2, [r0, #14]
 810639a:	6183      	str	r3, [r0, #24]
 810639c:	4619      	mov	r1, r3
 810639e:	2208      	movs	r2, #8
 81063a0:	305c      	adds	r0, #92	; 0x5c
 81063a2:	f7fd fc09 	bl	8103bb8 <memset>
 81063a6:	4b05      	ldr	r3, [pc, #20]	; (81063bc <std+0x38>)
 81063a8:	6263      	str	r3, [r4, #36]	; 0x24
 81063aa:	4b05      	ldr	r3, [pc, #20]	; (81063c0 <std+0x3c>)
 81063ac:	62a3      	str	r3, [r4, #40]	; 0x28
 81063ae:	4b05      	ldr	r3, [pc, #20]	; (81063c4 <std+0x40>)
 81063b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 81063b2:	4b05      	ldr	r3, [pc, #20]	; (81063c8 <std+0x44>)
 81063b4:	6224      	str	r4, [r4, #32]
 81063b6:	6323      	str	r3, [r4, #48]	; 0x30
 81063b8:	bd10      	pop	{r4, pc}
 81063ba:	bf00      	nop
 81063bc:	08107da1 	.word	0x08107da1
 81063c0:	08107dc3 	.word	0x08107dc3
 81063c4:	08107dfb 	.word	0x08107dfb
 81063c8:	08107e1f 	.word	0x08107e1f

081063cc <_cleanup_r>:
 81063cc:	4901      	ldr	r1, [pc, #4]	; (81063d4 <_cleanup_r+0x8>)
 81063ce:	f000 b8af 	b.w	8106530 <_fwalk_reent>
 81063d2:	bf00      	nop
 81063d4:	08108179 	.word	0x08108179

081063d8 <__sfmoreglue>:
 81063d8:	b570      	push	{r4, r5, r6, lr}
 81063da:	2268      	movs	r2, #104	; 0x68
 81063dc:	1e4d      	subs	r5, r1, #1
 81063de:	4355      	muls	r5, r2
 81063e0:	460e      	mov	r6, r1
 81063e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81063e6:	f001 f997 	bl	8107718 <_malloc_r>
 81063ea:	4604      	mov	r4, r0
 81063ec:	b140      	cbz	r0, 8106400 <__sfmoreglue+0x28>
 81063ee:	2100      	movs	r1, #0
 81063f0:	e9c0 1600 	strd	r1, r6, [r0]
 81063f4:	300c      	adds	r0, #12
 81063f6:	60a0      	str	r0, [r4, #8]
 81063f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81063fc:	f7fd fbdc 	bl	8103bb8 <memset>
 8106400:	4620      	mov	r0, r4
 8106402:	bd70      	pop	{r4, r5, r6, pc}

08106404 <__sfp_lock_acquire>:
 8106404:	4801      	ldr	r0, [pc, #4]	; (810640c <__sfp_lock_acquire+0x8>)
 8106406:	f000 bc26 	b.w	8106c56 <__retarget_lock_acquire_recursive>
 810640a:	bf00      	nop
 810640c:	10000325 	.word	0x10000325

08106410 <__sfp_lock_release>:
 8106410:	4801      	ldr	r0, [pc, #4]	; (8106418 <__sfp_lock_release+0x8>)
 8106412:	f000 bc21 	b.w	8106c58 <__retarget_lock_release_recursive>
 8106416:	bf00      	nop
 8106418:	10000325 	.word	0x10000325

0810641c <__sinit_lock_acquire>:
 810641c:	4801      	ldr	r0, [pc, #4]	; (8106424 <__sinit_lock_acquire+0x8>)
 810641e:	f000 bc1a 	b.w	8106c56 <__retarget_lock_acquire_recursive>
 8106422:	bf00      	nop
 8106424:	10000326 	.word	0x10000326

08106428 <__sinit_lock_release>:
 8106428:	4801      	ldr	r0, [pc, #4]	; (8106430 <__sinit_lock_release+0x8>)
 810642a:	f000 bc15 	b.w	8106c58 <__retarget_lock_release_recursive>
 810642e:	bf00      	nop
 8106430:	10000326 	.word	0x10000326

08106434 <__sinit>:
 8106434:	b510      	push	{r4, lr}
 8106436:	4604      	mov	r4, r0
 8106438:	f7ff fff0 	bl	810641c <__sinit_lock_acquire>
 810643c:	69a3      	ldr	r3, [r4, #24]
 810643e:	b11b      	cbz	r3, 8106448 <__sinit+0x14>
 8106440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106444:	f7ff bff0 	b.w	8106428 <__sinit_lock_release>
 8106448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810644c:	6523      	str	r3, [r4, #80]	; 0x50
 810644e:	4b13      	ldr	r3, [pc, #76]	; (810649c <__sinit+0x68>)
 8106450:	4a13      	ldr	r2, [pc, #76]	; (81064a0 <__sinit+0x6c>)
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	62a2      	str	r2, [r4, #40]	; 0x28
 8106456:	42a3      	cmp	r3, r4
 8106458:	bf04      	itt	eq
 810645a:	2301      	moveq	r3, #1
 810645c:	61a3      	streq	r3, [r4, #24]
 810645e:	4620      	mov	r0, r4
 8106460:	f000 f820 	bl	81064a4 <__sfp>
 8106464:	6060      	str	r0, [r4, #4]
 8106466:	4620      	mov	r0, r4
 8106468:	f000 f81c 	bl	81064a4 <__sfp>
 810646c:	60a0      	str	r0, [r4, #8]
 810646e:	4620      	mov	r0, r4
 8106470:	f000 f818 	bl	81064a4 <__sfp>
 8106474:	2200      	movs	r2, #0
 8106476:	60e0      	str	r0, [r4, #12]
 8106478:	2104      	movs	r1, #4
 810647a:	6860      	ldr	r0, [r4, #4]
 810647c:	f7ff ff82 	bl	8106384 <std>
 8106480:	68a0      	ldr	r0, [r4, #8]
 8106482:	2201      	movs	r2, #1
 8106484:	2109      	movs	r1, #9
 8106486:	f7ff ff7d 	bl	8106384 <std>
 810648a:	68e0      	ldr	r0, [r4, #12]
 810648c:	2202      	movs	r2, #2
 810648e:	2112      	movs	r1, #18
 8106490:	f7ff ff78 	bl	8106384 <std>
 8106494:	2301      	movs	r3, #1
 8106496:	61a3      	str	r3, [r4, #24]
 8106498:	e7d2      	b.n	8106440 <__sinit+0xc>
 810649a:	bf00      	nop
 810649c:	08108568 	.word	0x08108568
 81064a0:	081063cd 	.word	0x081063cd

081064a4 <__sfp>:
 81064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81064a6:	4607      	mov	r7, r0
 81064a8:	f7ff ffac 	bl	8106404 <__sfp_lock_acquire>
 81064ac:	4b1e      	ldr	r3, [pc, #120]	; (8106528 <__sfp+0x84>)
 81064ae:	681e      	ldr	r6, [r3, #0]
 81064b0:	69b3      	ldr	r3, [r6, #24]
 81064b2:	b913      	cbnz	r3, 81064ba <__sfp+0x16>
 81064b4:	4630      	mov	r0, r6
 81064b6:	f7ff ffbd 	bl	8106434 <__sinit>
 81064ba:	3648      	adds	r6, #72	; 0x48
 81064bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81064c0:	3b01      	subs	r3, #1
 81064c2:	d503      	bpl.n	81064cc <__sfp+0x28>
 81064c4:	6833      	ldr	r3, [r6, #0]
 81064c6:	b30b      	cbz	r3, 810650c <__sfp+0x68>
 81064c8:	6836      	ldr	r6, [r6, #0]
 81064ca:	e7f7      	b.n	81064bc <__sfp+0x18>
 81064cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81064d0:	b9d5      	cbnz	r5, 8106508 <__sfp+0x64>
 81064d2:	4b16      	ldr	r3, [pc, #88]	; (810652c <__sfp+0x88>)
 81064d4:	60e3      	str	r3, [r4, #12]
 81064d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81064da:	6665      	str	r5, [r4, #100]	; 0x64
 81064dc:	f000 fbba 	bl	8106c54 <__retarget_lock_init_recursive>
 81064e0:	f7ff ff96 	bl	8106410 <__sfp_lock_release>
 81064e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 81064e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 81064ec:	6025      	str	r5, [r4, #0]
 81064ee:	61a5      	str	r5, [r4, #24]
 81064f0:	2208      	movs	r2, #8
 81064f2:	4629      	mov	r1, r5
 81064f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81064f8:	f7fd fb5e 	bl	8103bb8 <memset>
 81064fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106504:	4620      	mov	r0, r4
 8106506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106508:	3468      	adds	r4, #104	; 0x68
 810650a:	e7d9      	b.n	81064c0 <__sfp+0x1c>
 810650c:	2104      	movs	r1, #4
 810650e:	4638      	mov	r0, r7
 8106510:	f7ff ff62 	bl	81063d8 <__sfmoreglue>
 8106514:	4604      	mov	r4, r0
 8106516:	6030      	str	r0, [r6, #0]
 8106518:	2800      	cmp	r0, #0
 810651a:	d1d5      	bne.n	81064c8 <__sfp+0x24>
 810651c:	f7ff ff78 	bl	8106410 <__sfp_lock_release>
 8106520:	230c      	movs	r3, #12
 8106522:	603b      	str	r3, [r7, #0]
 8106524:	e7ee      	b.n	8106504 <__sfp+0x60>
 8106526:	bf00      	nop
 8106528:	08108568 	.word	0x08108568
 810652c:	ffff0001 	.word	0xffff0001

08106530 <_fwalk_reent>:
 8106530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106534:	4606      	mov	r6, r0
 8106536:	4688      	mov	r8, r1
 8106538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810653c:	2700      	movs	r7, #0
 810653e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106542:	f1b9 0901 	subs.w	r9, r9, #1
 8106546:	d505      	bpl.n	8106554 <_fwalk_reent+0x24>
 8106548:	6824      	ldr	r4, [r4, #0]
 810654a:	2c00      	cmp	r4, #0
 810654c:	d1f7      	bne.n	810653e <_fwalk_reent+0xe>
 810654e:	4638      	mov	r0, r7
 8106550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106554:	89ab      	ldrh	r3, [r5, #12]
 8106556:	2b01      	cmp	r3, #1
 8106558:	d907      	bls.n	810656a <_fwalk_reent+0x3a>
 810655a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810655e:	3301      	adds	r3, #1
 8106560:	d003      	beq.n	810656a <_fwalk_reent+0x3a>
 8106562:	4629      	mov	r1, r5
 8106564:	4630      	mov	r0, r6
 8106566:	47c0      	blx	r8
 8106568:	4307      	orrs	r7, r0
 810656a:	3568      	adds	r5, #104	; 0x68
 810656c:	e7e9      	b.n	8106542 <_fwalk_reent+0x12>

0810656e <rshift>:
 810656e:	6903      	ldr	r3, [r0, #16]
 8106570:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8106574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106578:	ea4f 1261 	mov.w	r2, r1, asr #5
 810657c:	f100 0414 	add.w	r4, r0, #20
 8106580:	dd45      	ble.n	810660e <rshift+0xa0>
 8106582:	f011 011f 	ands.w	r1, r1, #31
 8106586:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810658a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810658e:	d10c      	bne.n	81065aa <rshift+0x3c>
 8106590:	f100 0710 	add.w	r7, r0, #16
 8106594:	4629      	mov	r1, r5
 8106596:	42b1      	cmp	r1, r6
 8106598:	d334      	bcc.n	8106604 <rshift+0x96>
 810659a:	1a9b      	subs	r3, r3, r2
 810659c:	009b      	lsls	r3, r3, #2
 810659e:	1eea      	subs	r2, r5, #3
 81065a0:	4296      	cmp	r6, r2
 81065a2:	bf38      	it	cc
 81065a4:	2300      	movcc	r3, #0
 81065a6:	4423      	add	r3, r4
 81065a8:	e015      	b.n	81065d6 <rshift+0x68>
 81065aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 81065ae:	f1c1 0820 	rsb	r8, r1, #32
 81065b2:	40cf      	lsrs	r7, r1
 81065b4:	f105 0e04 	add.w	lr, r5, #4
 81065b8:	46a1      	mov	r9, r4
 81065ba:	4576      	cmp	r6, lr
 81065bc:	46f4      	mov	ip, lr
 81065be:	d815      	bhi.n	81065ec <rshift+0x7e>
 81065c0:	1a9a      	subs	r2, r3, r2
 81065c2:	0092      	lsls	r2, r2, #2
 81065c4:	3a04      	subs	r2, #4
 81065c6:	3501      	adds	r5, #1
 81065c8:	42ae      	cmp	r6, r5
 81065ca:	bf38      	it	cc
 81065cc:	2200      	movcc	r2, #0
 81065ce:	18a3      	adds	r3, r4, r2
 81065d0:	50a7      	str	r7, [r4, r2]
 81065d2:	b107      	cbz	r7, 81065d6 <rshift+0x68>
 81065d4:	3304      	adds	r3, #4
 81065d6:	1b1a      	subs	r2, r3, r4
 81065d8:	42a3      	cmp	r3, r4
 81065da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81065de:	bf08      	it	eq
 81065e0:	2300      	moveq	r3, #0
 81065e2:	6102      	str	r2, [r0, #16]
 81065e4:	bf08      	it	eq
 81065e6:	6143      	streq	r3, [r0, #20]
 81065e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81065ec:	f8dc c000 	ldr.w	ip, [ip]
 81065f0:	fa0c fc08 	lsl.w	ip, ip, r8
 81065f4:	ea4c 0707 	orr.w	r7, ip, r7
 81065f8:	f849 7b04 	str.w	r7, [r9], #4
 81065fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8106600:	40cf      	lsrs	r7, r1
 8106602:	e7da      	b.n	81065ba <rshift+0x4c>
 8106604:	f851 cb04 	ldr.w	ip, [r1], #4
 8106608:	f847 cf04 	str.w	ip, [r7, #4]!
 810660c:	e7c3      	b.n	8106596 <rshift+0x28>
 810660e:	4623      	mov	r3, r4
 8106610:	e7e1      	b.n	81065d6 <rshift+0x68>

08106612 <__hexdig_fun>:
 8106612:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8106616:	2b09      	cmp	r3, #9
 8106618:	d802      	bhi.n	8106620 <__hexdig_fun+0xe>
 810661a:	3820      	subs	r0, #32
 810661c:	b2c0      	uxtb	r0, r0
 810661e:	4770      	bx	lr
 8106620:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8106624:	2b05      	cmp	r3, #5
 8106626:	d801      	bhi.n	810662c <__hexdig_fun+0x1a>
 8106628:	3847      	subs	r0, #71	; 0x47
 810662a:	e7f7      	b.n	810661c <__hexdig_fun+0xa>
 810662c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8106630:	2b05      	cmp	r3, #5
 8106632:	d801      	bhi.n	8106638 <__hexdig_fun+0x26>
 8106634:	3827      	subs	r0, #39	; 0x27
 8106636:	e7f1      	b.n	810661c <__hexdig_fun+0xa>
 8106638:	2000      	movs	r0, #0
 810663a:	4770      	bx	lr

0810663c <__gethex>:
 810663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106640:	ed2d 8b02 	vpush	{d8}
 8106644:	b089      	sub	sp, #36	; 0x24
 8106646:	ee08 0a10 	vmov	s16, r0
 810664a:	9304      	str	r3, [sp, #16]
 810664c:	4bb4      	ldr	r3, [pc, #720]	; (8106920 <__gethex+0x2e4>)
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	9301      	str	r3, [sp, #4]
 8106652:	4618      	mov	r0, r3
 8106654:	468b      	mov	fp, r1
 8106656:	4690      	mov	r8, r2
 8106658:	f7f9 fe42 	bl	81002e0 <strlen>
 810665c:	9b01      	ldr	r3, [sp, #4]
 810665e:	f8db 2000 	ldr.w	r2, [fp]
 8106662:	4403      	add	r3, r0
 8106664:	4682      	mov	sl, r0
 8106666:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810666a:	9305      	str	r3, [sp, #20]
 810666c:	1c93      	adds	r3, r2, #2
 810666e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8106672:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8106676:	32fe      	adds	r2, #254	; 0xfe
 8106678:	18d1      	adds	r1, r2, r3
 810667a:	461f      	mov	r7, r3
 810667c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8106680:	9100      	str	r1, [sp, #0]
 8106682:	2830      	cmp	r0, #48	; 0x30
 8106684:	d0f8      	beq.n	8106678 <__gethex+0x3c>
 8106686:	f7ff ffc4 	bl	8106612 <__hexdig_fun>
 810668a:	4604      	mov	r4, r0
 810668c:	2800      	cmp	r0, #0
 810668e:	d13a      	bne.n	8106706 <__gethex+0xca>
 8106690:	9901      	ldr	r1, [sp, #4]
 8106692:	4652      	mov	r2, sl
 8106694:	4638      	mov	r0, r7
 8106696:	f001 fbc6 	bl	8107e26 <strncmp>
 810669a:	4605      	mov	r5, r0
 810669c:	2800      	cmp	r0, #0
 810669e:	d168      	bne.n	8106772 <__gethex+0x136>
 81066a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 81066a4:	eb07 060a 	add.w	r6, r7, sl
 81066a8:	f7ff ffb3 	bl	8106612 <__hexdig_fun>
 81066ac:	2800      	cmp	r0, #0
 81066ae:	d062      	beq.n	8106776 <__gethex+0x13a>
 81066b0:	4633      	mov	r3, r6
 81066b2:	7818      	ldrb	r0, [r3, #0]
 81066b4:	2830      	cmp	r0, #48	; 0x30
 81066b6:	461f      	mov	r7, r3
 81066b8:	f103 0301 	add.w	r3, r3, #1
 81066bc:	d0f9      	beq.n	81066b2 <__gethex+0x76>
 81066be:	f7ff ffa8 	bl	8106612 <__hexdig_fun>
 81066c2:	2301      	movs	r3, #1
 81066c4:	fab0 f480 	clz	r4, r0
 81066c8:	0964      	lsrs	r4, r4, #5
 81066ca:	4635      	mov	r5, r6
 81066cc:	9300      	str	r3, [sp, #0]
 81066ce:	463a      	mov	r2, r7
 81066d0:	4616      	mov	r6, r2
 81066d2:	3201      	adds	r2, #1
 81066d4:	7830      	ldrb	r0, [r6, #0]
 81066d6:	f7ff ff9c 	bl	8106612 <__hexdig_fun>
 81066da:	2800      	cmp	r0, #0
 81066dc:	d1f8      	bne.n	81066d0 <__gethex+0x94>
 81066de:	9901      	ldr	r1, [sp, #4]
 81066e0:	4652      	mov	r2, sl
 81066e2:	4630      	mov	r0, r6
 81066e4:	f001 fb9f 	bl	8107e26 <strncmp>
 81066e8:	b980      	cbnz	r0, 810670c <__gethex+0xd0>
 81066ea:	b94d      	cbnz	r5, 8106700 <__gethex+0xc4>
 81066ec:	eb06 050a 	add.w	r5, r6, sl
 81066f0:	462a      	mov	r2, r5
 81066f2:	4616      	mov	r6, r2
 81066f4:	3201      	adds	r2, #1
 81066f6:	7830      	ldrb	r0, [r6, #0]
 81066f8:	f7ff ff8b 	bl	8106612 <__hexdig_fun>
 81066fc:	2800      	cmp	r0, #0
 81066fe:	d1f8      	bne.n	81066f2 <__gethex+0xb6>
 8106700:	1bad      	subs	r5, r5, r6
 8106702:	00ad      	lsls	r5, r5, #2
 8106704:	e004      	b.n	8106710 <__gethex+0xd4>
 8106706:	2400      	movs	r4, #0
 8106708:	4625      	mov	r5, r4
 810670a:	e7e0      	b.n	81066ce <__gethex+0x92>
 810670c:	2d00      	cmp	r5, #0
 810670e:	d1f7      	bne.n	8106700 <__gethex+0xc4>
 8106710:	7833      	ldrb	r3, [r6, #0]
 8106712:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8106716:	2b50      	cmp	r3, #80	; 0x50
 8106718:	d13b      	bne.n	8106792 <__gethex+0x156>
 810671a:	7873      	ldrb	r3, [r6, #1]
 810671c:	2b2b      	cmp	r3, #43	; 0x2b
 810671e:	d02c      	beq.n	810677a <__gethex+0x13e>
 8106720:	2b2d      	cmp	r3, #45	; 0x2d
 8106722:	d02e      	beq.n	8106782 <__gethex+0x146>
 8106724:	1c71      	adds	r1, r6, #1
 8106726:	f04f 0900 	mov.w	r9, #0
 810672a:	7808      	ldrb	r0, [r1, #0]
 810672c:	f7ff ff71 	bl	8106612 <__hexdig_fun>
 8106730:	1e43      	subs	r3, r0, #1
 8106732:	b2db      	uxtb	r3, r3
 8106734:	2b18      	cmp	r3, #24
 8106736:	d82c      	bhi.n	8106792 <__gethex+0x156>
 8106738:	f1a0 0210 	sub.w	r2, r0, #16
 810673c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8106740:	f7ff ff67 	bl	8106612 <__hexdig_fun>
 8106744:	1e43      	subs	r3, r0, #1
 8106746:	b2db      	uxtb	r3, r3
 8106748:	2b18      	cmp	r3, #24
 810674a:	d91d      	bls.n	8106788 <__gethex+0x14c>
 810674c:	f1b9 0f00 	cmp.w	r9, #0
 8106750:	d000      	beq.n	8106754 <__gethex+0x118>
 8106752:	4252      	negs	r2, r2
 8106754:	4415      	add	r5, r2
 8106756:	f8cb 1000 	str.w	r1, [fp]
 810675a:	b1e4      	cbz	r4, 8106796 <__gethex+0x15a>
 810675c:	9b00      	ldr	r3, [sp, #0]
 810675e:	2b00      	cmp	r3, #0
 8106760:	bf14      	ite	ne
 8106762:	2700      	movne	r7, #0
 8106764:	2706      	moveq	r7, #6
 8106766:	4638      	mov	r0, r7
 8106768:	b009      	add	sp, #36	; 0x24
 810676a:	ecbd 8b02 	vpop	{d8}
 810676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106772:	463e      	mov	r6, r7
 8106774:	4625      	mov	r5, r4
 8106776:	2401      	movs	r4, #1
 8106778:	e7ca      	b.n	8106710 <__gethex+0xd4>
 810677a:	f04f 0900 	mov.w	r9, #0
 810677e:	1cb1      	adds	r1, r6, #2
 8106780:	e7d3      	b.n	810672a <__gethex+0xee>
 8106782:	f04f 0901 	mov.w	r9, #1
 8106786:	e7fa      	b.n	810677e <__gethex+0x142>
 8106788:	230a      	movs	r3, #10
 810678a:	fb03 0202 	mla	r2, r3, r2, r0
 810678e:	3a10      	subs	r2, #16
 8106790:	e7d4      	b.n	810673c <__gethex+0x100>
 8106792:	4631      	mov	r1, r6
 8106794:	e7df      	b.n	8106756 <__gethex+0x11a>
 8106796:	1bf3      	subs	r3, r6, r7
 8106798:	3b01      	subs	r3, #1
 810679a:	4621      	mov	r1, r4
 810679c:	2b07      	cmp	r3, #7
 810679e:	dc0b      	bgt.n	81067b8 <__gethex+0x17c>
 81067a0:	ee18 0a10 	vmov	r0, s16
 81067a4:	f000 fa74 	bl	8106c90 <_Balloc>
 81067a8:	4604      	mov	r4, r0
 81067aa:	b940      	cbnz	r0, 81067be <__gethex+0x182>
 81067ac:	4b5d      	ldr	r3, [pc, #372]	; (8106924 <__gethex+0x2e8>)
 81067ae:	4602      	mov	r2, r0
 81067b0:	21de      	movs	r1, #222	; 0xde
 81067b2:	485d      	ldr	r0, [pc, #372]	; (8106928 <__gethex+0x2ec>)
 81067b4:	f001 fc2c 	bl	8108010 <__assert_func>
 81067b8:	3101      	adds	r1, #1
 81067ba:	105b      	asrs	r3, r3, #1
 81067bc:	e7ee      	b.n	810679c <__gethex+0x160>
 81067be:	f100 0914 	add.w	r9, r0, #20
 81067c2:	f04f 0b00 	mov.w	fp, #0
 81067c6:	f1ca 0301 	rsb	r3, sl, #1
 81067ca:	f8cd 9008 	str.w	r9, [sp, #8]
 81067ce:	f8cd b000 	str.w	fp, [sp]
 81067d2:	9306      	str	r3, [sp, #24]
 81067d4:	42b7      	cmp	r7, r6
 81067d6:	d340      	bcc.n	810685a <__gethex+0x21e>
 81067d8:	9802      	ldr	r0, [sp, #8]
 81067da:	9b00      	ldr	r3, [sp, #0]
 81067dc:	f840 3b04 	str.w	r3, [r0], #4
 81067e0:	eba0 0009 	sub.w	r0, r0, r9
 81067e4:	1080      	asrs	r0, r0, #2
 81067e6:	0146      	lsls	r6, r0, #5
 81067e8:	6120      	str	r0, [r4, #16]
 81067ea:	4618      	mov	r0, r3
 81067ec:	f000 fb42 	bl	8106e74 <__hi0bits>
 81067f0:	1a30      	subs	r0, r6, r0
 81067f2:	f8d8 6000 	ldr.w	r6, [r8]
 81067f6:	42b0      	cmp	r0, r6
 81067f8:	dd63      	ble.n	81068c2 <__gethex+0x286>
 81067fa:	1b87      	subs	r7, r0, r6
 81067fc:	4639      	mov	r1, r7
 81067fe:	4620      	mov	r0, r4
 8106800:	f000 fee6 	bl	81075d0 <__any_on>
 8106804:	4682      	mov	sl, r0
 8106806:	b1a8      	cbz	r0, 8106834 <__gethex+0x1f8>
 8106808:	1e7b      	subs	r3, r7, #1
 810680a:	1159      	asrs	r1, r3, #5
 810680c:	f003 021f 	and.w	r2, r3, #31
 8106810:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8106814:	f04f 0a01 	mov.w	sl, #1
 8106818:	fa0a f202 	lsl.w	r2, sl, r2
 810681c:	420a      	tst	r2, r1
 810681e:	d009      	beq.n	8106834 <__gethex+0x1f8>
 8106820:	4553      	cmp	r3, sl
 8106822:	dd05      	ble.n	8106830 <__gethex+0x1f4>
 8106824:	1eb9      	subs	r1, r7, #2
 8106826:	4620      	mov	r0, r4
 8106828:	f000 fed2 	bl	81075d0 <__any_on>
 810682c:	2800      	cmp	r0, #0
 810682e:	d145      	bne.n	81068bc <__gethex+0x280>
 8106830:	f04f 0a02 	mov.w	sl, #2
 8106834:	4639      	mov	r1, r7
 8106836:	4620      	mov	r0, r4
 8106838:	f7ff fe99 	bl	810656e <rshift>
 810683c:	443d      	add	r5, r7
 810683e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8106842:	42ab      	cmp	r3, r5
 8106844:	da4c      	bge.n	81068e0 <__gethex+0x2a4>
 8106846:	ee18 0a10 	vmov	r0, s16
 810684a:	4621      	mov	r1, r4
 810684c:	f000 fa60 	bl	8106d10 <_Bfree>
 8106850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8106852:	2300      	movs	r3, #0
 8106854:	6013      	str	r3, [r2, #0]
 8106856:	27a3      	movs	r7, #163	; 0xa3
 8106858:	e785      	b.n	8106766 <__gethex+0x12a>
 810685a:	1e73      	subs	r3, r6, #1
 810685c:	9a05      	ldr	r2, [sp, #20]
 810685e:	9303      	str	r3, [sp, #12]
 8106860:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8106864:	4293      	cmp	r3, r2
 8106866:	d019      	beq.n	810689c <__gethex+0x260>
 8106868:	f1bb 0f20 	cmp.w	fp, #32
 810686c:	d107      	bne.n	810687e <__gethex+0x242>
 810686e:	9b02      	ldr	r3, [sp, #8]
 8106870:	9a00      	ldr	r2, [sp, #0]
 8106872:	f843 2b04 	str.w	r2, [r3], #4
 8106876:	9302      	str	r3, [sp, #8]
 8106878:	2300      	movs	r3, #0
 810687a:	9300      	str	r3, [sp, #0]
 810687c:	469b      	mov	fp, r3
 810687e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8106882:	f7ff fec6 	bl	8106612 <__hexdig_fun>
 8106886:	9b00      	ldr	r3, [sp, #0]
 8106888:	f000 000f 	and.w	r0, r0, #15
 810688c:	fa00 f00b 	lsl.w	r0, r0, fp
 8106890:	4303      	orrs	r3, r0
 8106892:	9300      	str	r3, [sp, #0]
 8106894:	f10b 0b04 	add.w	fp, fp, #4
 8106898:	9b03      	ldr	r3, [sp, #12]
 810689a:	e00d      	b.n	81068b8 <__gethex+0x27c>
 810689c:	9b03      	ldr	r3, [sp, #12]
 810689e:	9a06      	ldr	r2, [sp, #24]
 81068a0:	4413      	add	r3, r2
 81068a2:	42bb      	cmp	r3, r7
 81068a4:	d3e0      	bcc.n	8106868 <__gethex+0x22c>
 81068a6:	4618      	mov	r0, r3
 81068a8:	9901      	ldr	r1, [sp, #4]
 81068aa:	9307      	str	r3, [sp, #28]
 81068ac:	4652      	mov	r2, sl
 81068ae:	f001 faba 	bl	8107e26 <strncmp>
 81068b2:	9b07      	ldr	r3, [sp, #28]
 81068b4:	2800      	cmp	r0, #0
 81068b6:	d1d7      	bne.n	8106868 <__gethex+0x22c>
 81068b8:	461e      	mov	r6, r3
 81068ba:	e78b      	b.n	81067d4 <__gethex+0x198>
 81068bc:	f04f 0a03 	mov.w	sl, #3
 81068c0:	e7b8      	b.n	8106834 <__gethex+0x1f8>
 81068c2:	da0a      	bge.n	81068da <__gethex+0x29e>
 81068c4:	1a37      	subs	r7, r6, r0
 81068c6:	4621      	mov	r1, r4
 81068c8:	ee18 0a10 	vmov	r0, s16
 81068cc:	463a      	mov	r2, r7
 81068ce:	f000 fc3b 	bl	8107148 <__lshift>
 81068d2:	1bed      	subs	r5, r5, r7
 81068d4:	4604      	mov	r4, r0
 81068d6:	f100 0914 	add.w	r9, r0, #20
 81068da:	f04f 0a00 	mov.w	sl, #0
 81068de:	e7ae      	b.n	810683e <__gethex+0x202>
 81068e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 81068e4:	42a8      	cmp	r0, r5
 81068e6:	dd72      	ble.n	81069ce <__gethex+0x392>
 81068e8:	1b45      	subs	r5, r0, r5
 81068ea:	42ae      	cmp	r6, r5
 81068ec:	dc36      	bgt.n	810695c <__gethex+0x320>
 81068ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81068f2:	2b02      	cmp	r3, #2
 81068f4:	d02a      	beq.n	810694c <__gethex+0x310>
 81068f6:	2b03      	cmp	r3, #3
 81068f8:	d02c      	beq.n	8106954 <__gethex+0x318>
 81068fa:	2b01      	cmp	r3, #1
 81068fc:	d11c      	bne.n	8106938 <__gethex+0x2fc>
 81068fe:	42ae      	cmp	r6, r5
 8106900:	d11a      	bne.n	8106938 <__gethex+0x2fc>
 8106902:	2e01      	cmp	r6, #1
 8106904:	d112      	bne.n	810692c <__gethex+0x2f0>
 8106906:	9a04      	ldr	r2, [sp, #16]
 8106908:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810690c:	6013      	str	r3, [r2, #0]
 810690e:	2301      	movs	r3, #1
 8106910:	6123      	str	r3, [r4, #16]
 8106912:	f8c9 3000 	str.w	r3, [r9]
 8106916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8106918:	2762      	movs	r7, #98	; 0x62
 810691a:	601c      	str	r4, [r3, #0]
 810691c:	e723      	b.n	8106766 <__gethex+0x12a>
 810691e:	bf00      	nop
 8106920:	08108854 	.word	0x08108854
 8106924:	08108778 	.word	0x08108778
 8106928:	081087ec 	.word	0x081087ec
 810692c:	1e71      	subs	r1, r6, #1
 810692e:	4620      	mov	r0, r4
 8106930:	f000 fe4e 	bl	81075d0 <__any_on>
 8106934:	2800      	cmp	r0, #0
 8106936:	d1e6      	bne.n	8106906 <__gethex+0x2ca>
 8106938:	ee18 0a10 	vmov	r0, s16
 810693c:	4621      	mov	r1, r4
 810693e:	f000 f9e7 	bl	8106d10 <_Bfree>
 8106942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8106944:	2300      	movs	r3, #0
 8106946:	6013      	str	r3, [r2, #0]
 8106948:	2750      	movs	r7, #80	; 0x50
 810694a:	e70c      	b.n	8106766 <__gethex+0x12a>
 810694c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810694e:	2b00      	cmp	r3, #0
 8106950:	d1f2      	bne.n	8106938 <__gethex+0x2fc>
 8106952:	e7d8      	b.n	8106906 <__gethex+0x2ca>
 8106954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8106956:	2b00      	cmp	r3, #0
 8106958:	d1d5      	bne.n	8106906 <__gethex+0x2ca>
 810695a:	e7ed      	b.n	8106938 <__gethex+0x2fc>
 810695c:	1e6f      	subs	r7, r5, #1
 810695e:	f1ba 0f00 	cmp.w	sl, #0
 8106962:	d131      	bne.n	81069c8 <__gethex+0x38c>
 8106964:	b127      	cbz	r7, 8106970 <__gethex+0x334>
 8106966:	4639      	mov	r1, r7
 8106968:	4620      	mov	r0, r4
 810696a:	f000 fe31 	bl	81075d0 <__any_on>
 810696e:	4682      	mov	sl, r0
 8106970:	117b      	asrs	r3, r7, #5
 8106972:	2101      	movs	r1, #1
 8106974:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8106978:	f007 071f 	and.w	r7, r7, #31
 810697c:	fa01 f707 	lsl.w	r7, r1, r7
 8106980:	421f      	tst	r7, r3
 8106982:	4629      	mov	r1, r5
 8106984:	4620      	mov	r0, r4
 8106986:	bf18      	it	ne
 8106988:	f04a 0a02 	orrne.w	sl, sl, #2
 810698c:	1b76      	subs	r6, r6, r5
 810698e:	f7ff fdee 	bl	810656e <rshift>
 8106992:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8106996:	2702      	movs	r7, #2
 8106998:	f1ba 0f00 	cmp.w	sl, #0
 810699c:	d048      	beq.n	8106a30 <__gethex+0x3f4>
 810699e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81069a2:	2b02      	cmp	r3, #2
 81069a4:	d015      	beq.n	81069d2 <__gethex+0x396>
 81069a6:	2b03      	cmp	r3, #3
 81069a8:	d017      	beq.n	81069da <__gethex+0x39e>
 81069aa:	2b01      	cmp	r3, #1
 81069ac:	d109      	bne.n	81069c2 <__gethex+0x386>
 81069ae:	f01a 0f02 	tst.w	sl, #2
 81069b2:	d006      	beq.n	81069c2 <__gethex+0x386>
 81069b4:	f8d9 0000 	ldr.w	r0, [r9]
 81069b8:	ea4a 0a00 	orr.w	sl, sl, r0
 81069bc:	f01a 0f01 	tst.w	sl, #1
 81069c0:	d10e      	bne.n	81069e0 <__gethex+0x3a4>
 81069c2:	f047 0710 	orr.w	r7, r7, #16
 81069c6:	e033      	b.n	8106a30 <__gethex+0x3f4>
 81069c8:	f04f 0a01 	mov.w	sl, #1
 81069cc:	e7d0      	b.n	8106970 <__gethex+0x334>
 81069ce:	2701      	movs	r7, #1
 81069d0:	e7e2      	b.n	8106998 <__gethex+0x35c>
 81069d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81069d4:	f1c3 0301 	rsb	r3, r3, #1
 81069d8:	9315      	str	r3, [sp, #84]	; 0x54
 81069da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d0f0      	beq.n	81069c2 <__gethex+0x386>
 81069e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 81069e4:	f104 0314 	add.w	r3, r4, #20
 81069e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 81069ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 81069f0:	f04f 0c00 	mov.w	ip, #0
 81069f4:	4618      	mov	r0, r3
 81069f6:	f853 2b04 	ldr.w	r2, [r3], #4
 81069fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 81069fe:	d01c      	beq.n	8106a3a <__gethex+0x3fe>
 8106a00:	3201      	adds	r2, #1
 8106a02:	6002      	str	r2, [r0, #0]
 8106a04:	2f02      	cmp	r7, #2
 8106a06:	f104 0314 	add.w	r3, r4, #20
 8106a0a:	d13f      	bne.n	8106a8c <__gethex+0x450>
 8106a0c:	f8d8 2000 	ldr.w	r2, [r8]
 8106a10:	3a01      	subs	r2, #1
 8106a12:	42b2      	cmp	r2, r6
 8106a14:	d10a      	bne.n	8106a2c <__gethex+0x3f0>
 8106a16:	1171      	asrs	r1, r6, #5
 8106a18:	2201      	movs	r2, #1
 8106a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8106a1e:	f006 061f 	and.w	r6, r6, #31
 8106a22:	fa02 f606 	lsl.w	r6, r2, r6
 8106a26:	421e      	tst	r6, r3
 8106a28:	bf18      	it	ne
 8106a2a:	4617      	movne	r7, r2
 8106a2c:	f047 0720 	orr.w	r7, r7, #32
 8106a30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8106a32:	601c      	str	r4, [r3, #0]
 8106a34:	9b04      	ldr	r3, [sp, #16]
 8106a36:	601d      	str	r5, [r3, #0]
 8106a38:	e695      	b.n	8106766 <__gethex+0x12a>
 8106a3a:	4299      	cmp	r1, r3
 8106a3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8106a40:	d8d8      	bhi.n	81069f4 <__gethex+0x3b8>
 8106a42:	68a3      	ldr	r3, [r4, #8]
 8106a44:	459b      	cmp	fp, r3
 8106a46:	db19      	blt.n	8106a7c <__gethex+0x440>
 8106a48:	6861      	ldr	r1, [r4, #4]
 8106a4a:	ee18 0a10 	vmov	r0, s16
 8106a4e:	3101      	adds	r1, #1
 8106a50:	f000 f91e 	bl	8106c90 <_Balloc>
 8106a54:	4681      	mov	r9, r0
 8106a56:	b918      	cbnz	r0, 8106a60 <__gethex+0x424>
 8106a58:	4b1a      	ldr	r3, [pc, #104]	; (8106ac4 <__gethex+0x488>)
 8106a5a:	4602      	mov	r2, r0
 8106a5c:	2184      	movs	r1, #132	; 0x84
 8106a5e:	e6a8      	b.n	81067b2 <__gethex+0x176>
 8106a60:	6922      	ldr	r2, [r4, #16]
 8106a62:	3202      	adds	r2, #2
 8106a64:	f104 010c 	add.w	r1, r4, #12
 8106a68:	0092      	lsls	r2, r2, #2
 8106a6a:	300c      	adds	r0, #12
 8106a6c:	f7fd f896 	bl	8103b9c <memcpy>
 8106a70:	4621      	mov	r1, r4
 8106a72:	ee18 0a10 	vmov	r0, s16
 8106a76:	f000 f94b 	bl	8106d10 <_Bfree>
 8106a7a:	464c      	mov	r4, r9
 8106a7c:	6923      	ldr	r3, [r4, #16]
 8106a7e:	1c5a      	adds	r2, r3, #1
 8106a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8106a84:	6122      	str	r2, [r4, #16]
 8106a86:	2201      	movs	r2, #1
 8106a88:	615a      	str	r2, [r3, #20]
 8106a8a:	e7bb      	b.n	8106a04 <__gethex+0x3c8>
 8106a8c:	6922      	ldr	r2, [r4, #16]
 8106a8e:	455a      	cmp	r2, fp
 8106a90:	dd0b      	ble.n	8106aaa <__gethex+0x46e>
 8106a92:	2101      	movs	r1, #1
 8106a94:	4620      	mov	r0, r4
 8106a96:	f7ff fd6a 	bl	810656e <rshift>
 8106a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8106a9e:	3501      	adds	r5, #1
 8106aa0:	42ab      	cmp	r3, r5
 8106aa2:	f6ff aed0 	blt.w	8106846 <__gethex+0x20a>
 8106aa6:	2701      	movs	r7, #1
 8106aa8:	e7c0      	b.n	8106a2c <__gethex+0x3f0>
 8106aaa:	f016 061f 	ands.w	r6, r6, #31
 8106aae:	d0fa      	beq.n	8106aa6 <__gethex+0x46a>
 8106ab0:	4453      	add	r3, sl
 8106ab2:	f1c6 0620 	rsb	r6, r6, #32
 8106ab6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8106aba:	f000 f9db 	bl	8106e74 <__hi0bits>
 8106abe:	42b0      	cmp	r0, r6
 8106ac0:	dbe7      	blt.n	8106a92 <__gethex+0x456>
 8106ac2:	e7f0      	b.n	8106aa6 <__gethex+0x46a>
 8106ac4:	08108778 	.word	0x08108778

08106ac8 <L_shift>:
 8106ac8:	f1c2 0208 	rsb	r2, r2, #8
 8106acc:	0092      	lsls	r2, r2, #2
 8106ace:	b570      	push	{r4, r5, r6, lr}
 8106ad0:	f1c2 0620 	rsb	r6, r2, #32
 8106ad4:	6843      	ldr	r3, [r0, #4]
 8106ad6:	6804      	ldr	r4, [r0, #0]
 8106ad8:	fa03 f506 	lsl.w	r5, r3, r6
 8106adc:	432c      	orrs	r4, r5
 8106ade:	40d3      	lsrs	r3, r2
 8106ae0:	6004      	str	r4, [r0, #0]
 8106ae2:	f840 3f04 	str.w	r3, [r0, #4]!
 8106ae6:	4288      	cmp	r0, r1
 8106ae8:	d3f4      	bcc.n	8106ad4 <L_shift+0xc>
 8106aea:	bd70      	pop	{r4, r5, r6, pc}

08106aec <__match>:
 8106aec:	b530      	push	{r4, r5, lr}
 8106aee:	6803      	ldr	r3, [r0, #0]
 8106af0:	3301      	adds	r3, #1
 8106af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106af6:	b914      	cbnz	r4, 8106afe <__match+0x12>
 8106af8:	6003      	str	r3, [r0, #0]
 8106afa:	2001      	movs	r0, #1
 8106afc:	bd30      	pop	{r4, r5, pc}
 8106afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106b02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8106b06:	2d19      	cmp	r5, #25
 8106b08:	bf98      	it	ls
 8106b0a:	3220      	addls	r2, #32
 8106b0c:	42a2      	cmp	r2, r4
 8106b0e:	d0f0      	beq.n	8106af2 <__match+0x6>
 8106b10:	2000      	movs	r0, #0
 8106b12:	e7f3      	b.n	8106afc <__match+0x10>

08106b14 <__hexnan>:
 8106b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106b18:	680b      	ldr	r3, [r1, #0]
 8106b1a:	115e      	asrs	r6, r3, #5
 8106b1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8106b20:	f013 031f 	ands.w	r3, r3, #31
 8106b24:	b087      	sub	sp, #28
 8106b26:	bf18      	it	ne
 8106b28:	3604      	addne	r6, #4
 8106b2a:	2500      	movs	r5, #0
 8106b2c:	1f37      	subs	r7, r6, #4
 8106b2e:	4690      	mov	r8, r2
 8106b30:	6802      	ldr	r2, [r0, #0]
 8106b32:	9301      	str	r3, [sp, #4]
 8106b34:	4682      	mov	sl, r0
 8106b36:	f846 5c04 	str.w	r5, [r6, #-4]
 8106b3a:	46b9      	mov	r9, r7
 8106b3c:	463c      	mov	r4, r7
 8106b3e:	9502      	str	r5, [sp, #8]
 8106b40:	46ab      	mov	fp, r5
 8106b42:	7851      	ldrb	r1, [r2, #1]
 8106b44:	1c53      	adds	r3, r2, #1
 8106b46:	9303      	str	r3, [sp, #12]
 8106b48:	b341      	cbz	r1, 8106b9c <__hexnan+0x88>
 8106b4a:	4608      	mov	r0, r1
 8106b4c:	9205      	str	r2, [sp, #20]
 8106b4e:	9104      	str	r1, [sp, #16]
 8106b50:	f7ff fd5f 	bl	8106612 <__hexdig_fun>
 8106b54:	2800      	cmp	r0, #0
 8106b56:	d14f      	bne.n	8106bf8 <__hexnan+0xe4>
 8106b58:	9904      	ldr	r1, [sp, #16]
 8106b5a:	9a05      	ldr	r2, [sp, #20]
 8106b5c:	2920      	cmp	r1, #32
 8106b5e:	d818      	bhi.n	8106b92 <__hexnan+0x7e>
 8106b60:	9b02      	ldr	r3, [sp, #8]
 8106b62:	459b      	cmp	fp, r3
 8106b64:	dd13      	ble.n	8106b8e <__hexnan+0x7a>
 8106b66:	454c      	cmp	r4, r9
 8106b68:	d206      	bcs.n	8106b78 <__hexnan+0x64>
 8106b6a:	2d07      	cmp	r5, #7
 8106b6c:	dc04      	bgt.n	8106b78 <__hexnan+0x64>
 8106b6e:	462a      	mov	r2, r5
 8106b70:	4649      	mov	r1, r9
 8106b72:	4620      	mov	r0, r4
 8106b74:	f7ff ffa8 	bl	8106ac8 <L_shift>
 8106b78:	4544      	cmp	r4, r8
 8106b7a:	d950      	bls.n	8106c1e <__hexnan+0x10a>
 8106b7c:	2300      	movs	r3, #0
 8106b7e:	f1a4 0904 	sub.w	r9, r4, #4
 8106b82:	f844 3c04 	str.w	r3, [r4, #-4]
 8106b86:	f8cd b008 	str.w	fp, [sp, #8]
 8106b8a:	464c      	mov	r4, r9
 8106b8c:	461d      	mov	r5, r3
 8106b8e:	9a03      	ldr	r2, [sp, #12]
 8106b90:	e7d7      	b.n	8106b42 <__hexnan+0x2e>
 8106b92:	2929      	cmp	r1, #41	; 0x29
 8106b94:	d156      	bne.n	8106c44 <__hexnan+0x130>
 8106b96:	3202      	adds	r2, #2
 8106b98:	f8ca 2000 	str.w	r2, [sl]
 8106b9c:	f1bb 0f00 	cmp.w	fp, #0
 8106ba0:	d050      	beq.n	8106c44 <__hexnan+0x130>
 8106ba2:	454c      	cmp	r4, r9
 8106ba4:	d206      	bcs.n	8106bb4 <__hexnan+0xa0>
 8106ba6:	2d07      	cmp	r5, #7
 8106ba8:	dc04      	bgt.n	8106bb4 <__hexnan+0xa0>
 8106baa:	462a      	mov	r2, r5
 8106bac:	4649      	mov	r1, r9
 8106bae:	4620      	mov	r0, r4
 8106bb0:	f7ff ff8a 	bl	8106ac8 <L_shift>
 8106bb4:	4544      	cmp	r4, r8
 8106bb6:	d934      	bls.n	8106c22 <__hexnan+0x10e>
 8106bb8:	f1a8 0204 	sub.w	r2, r8, #4
 8106bbc:	4623      	mov	r3, r4
 8106bbe:	f853 1b04 	ldr.w	r1, [r3], #4
 8106bc2:	f842 1f04 	str.w	r1, [r2, #4]!
 8106bc6:	429f      	cmp	r7, r3
 8106bc8:	d2f9      	bcs.n	8106bbe <__hexnan+0xaa>
 8106bca:	1b3b      	subs	r3, r7, r4
 8106bcc:	f023 0303 	bic.w	r3, r3, #3
 8106bd0:	3304      	adds	r3, #4
 8106bd2:	3401      	adds	r4, #1
 8106bd4:	3e03      	subs	r6, #3
 8106bd6:	42b4      	cmp	r4, r6
 8106bd8:	bf88      	it	hi
 8106bda:	2304      	movhi	r3, #4
 8106bdc:	4443      	add	r3, r8
 8106bde:	2200      	movs	r2, #0
 8106be0:	f843 2b04 	str.w	r2, [r3], #4
 8106be4:	429f      	cmp	r7, r3
 8106be6:	d2fb      	bcs.n	8106be0 <__hexnan+0xcc>
 8106be8:	683b      	ldr	r3, [r7, #0]
 8106bea:	b91b      	cbnz	r3, 8106bf4 <__hexnan+0xe0>
 8106bec:	4547      	cmp	r7, r8
 8106bee:	d127      	bne.n	8106c40 <__hexnan+0x12c>
 8106bf0:	2301      	movs	r3, #1
 8106bf2:	603b      	str	r3, [r7, #0]
 8106bf4:	2005      	movs	r0, #5
 8106bf6:	e026      	b.n	8106c46 <__hexnan+0x132>
 8106bf8:	3501      	adds	r5, #1
 8106bfa:	2d08      	cmp	r5, #8
 8106bfc:	f10b 0b01 	add.w	fp, fp, #1
 8106c00:	dd06      	ble.n	8106c10 <__hexnan+0xfc>
 8106c02:	4544      	cmp	r4, r8
 8106c04:	d9c3      	bls.n	8106b8e <__hexnan+0x7a>
 8106c06:	2300      	movs	r3, #0
 8106c08:	f844 3c04 	str.w	r3, [r4, #-4]
 8106c0c:	2501      	movs	r5, #1
 8106c0e:	3c04      	subs	r4, #4
 8106c10:	6822      	ldr	r2, [r4, #0]
 8106c12:	f000 000f 	and.w	r0, r0, #15
 8106c16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8106c1a:	6022      	str	r2, [r4, #0]
 8106c1c:	e7b7      	b.n	8106b8e <__hexnan+0x7a>
 8106c1e:	2508      	movs	r5, #8
 8106c20:	e7b5      	b.n	8106b8e <__hexnan+0x7a>
 8106c22:	9b01      	ldr	r3, [sp, #4]
 8106c24:	2b00      	cmp	r3, #0
 8106c26:	d0df      	beq.n	8106be8 <__hexnan+0xd4>
 8106c28:	f04f 32ff 	mov.w	r2, #4294967295
 8106c2c:	f1c3 0320 	rsb	r3, r3, #32
 8106c30:	fa22 f303 	lsr.w	r3, r2, r3
 8106c34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8106c38:	401a      	ands	r2, r3
 8106c3a:	f846 2c04 	str.w	r2, [r6, #-4]
 8106c3e:	e7d3      	b.n	8106be8 <__hexnan+0xd4>
 8106c40:	3f04      	subs	r7, #4
 8106c42:	e7d1      	b.n	8106be8 <__hexnan+0xd4>
 8106c44:	2004      	movs	r0, #4
 8106c46:	b007      	add	sp, #28
 8106c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08106c4c <_localeconv_r>:
 8106c4c:	4800      	ldr	r0, [pc, #0]	; (8106c50 <_localeconv_r+0x4>)
 8106c4e:	4770      	bx	lr
 8106c50:	10000170 	.word	0x10000170

08106c54 <__retarget_lock_init_recursive>:
 8106c54:	4770      	bx	lr

08106c56 <__retarget_lock_acquire_recursive>:
 8106c56:	4770      	bx	lr

08106c58 <__retarget_lock_release_recursive>:
 8106c58:	4770      	bx	lr
	...

08106c5c <malloc>:
 8106c5c:	4b02      	ldr	r3, [pc, #8]	; (8106c68 <malloc+0xc>)
 8106c5e:	4601      	mov	r1, r0
 8106c60:	6818      	ldr	r0, [r3, #0]
 8106c62:	f000 bd59 	b.w	8107718 <_malloc_r>
 8106c66:	bf00      	nop
 8106c68:	10000018 	.word	0x10000018

08106c6c <__ascii_mbtowc>:
 8106c6c:	b082      	sub	sp, #8
 8106c6e:	b901      	cbnz	r1, 8106c72 <__ascii_mbtowc+0x6>
 8106c70:	a901      	add	r1, sp, #4
 8106c72:	b142      	cbz	r2, 8106c86 <__ascii_mbtowc+0x1a>
 8106c74:	b14b      	cbz	r3, 8106c8a <__ascii_mbtowc+0x1e>
 8106c76:	7813      	ldrb	r3, [r2, #0]
 8106c78:	600b      	str	r3, [r1, #0]
 8106c7a:	7812      	ldrb	r2, [r2, #0]
 8106c7c:	1e10      	subs	r0, r2, #0
 8106c7e:	bf18      	it	ne
 8106c80:	2001      	movne	r0, #1
 8106c82:	b002      	add	sp, #8
 8106c84:	4770      	bx	lr
 8106c86:	4610      	mov	r0, r2
 8106c88:	e7fb      	b.n	8106c82 <__ascii_mbtowc+0x16>
 8106c8a:	f06f 0001 	mvn.w	r0, #1
 8106c8e:	e7f8      	b.n	8106c82 <__ascii_mbtowc+0x16>

08106c90 <_Balloc>:
 8106c90:	b570      	push	{r4, r5, r6, lr}
 8106c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8106c94:	4604      	mov	r4, r0
 8106c96:	460d      	mov	r5, r1
 8106c98:	b976      	cbnz	r6, 8106cb8 <_Balloc+0x28>
 8106c9a:	2010      	movs	r0, #16
 8106c9c:	f7ff ffde 	bl	8106c5c <malloc>
 8106ca0:	4602      	mov	r2, r0
 8106ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8106ca4:	b920      	cbnz	r0, 8106cb0 <_Balloc+0x20>
 8106ca6:	4b18      	ldr	r3, [pc, #96]	; (8106d08 <_Balloc+0x78>)
 8106ca8:	4818      	ldr	r0, [pc, #96]	; (8106d0c <_Balloc+0x7c>)
 8106caa:	2166      	movs	r1, #102	; 0x66
 8106cac:	f001 f9b0 	bl	8108010 <__assert_func>
 8106cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8106cb4:	6006      	str	r6, [r0, #0]
 8106cb6:	60c6      	str	r6, [r0, #12]
 8106cb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8106cba:	68f3      	ldr	r3, [r6, #12]
 8106cbc:	b183      	cbz	r3, 8106ce0 <_Balloc+0x50>
 8106cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8106cc0:	68db      	ldr	r3, [r3, #12]
 8106cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8106cc6:	b9b8      	cbnz	r0, 8106cf8 <_Balloc+0x68>
 8106cc8:	2101      	movs	r1, #1
 8106cca:	fa01 f605 	lsl.w	r6, r1, r5
 8106cce:	1d72      	adds	r2, r6, #5
 8106cd0:	0092      	lsls	r2, r2, #2
 8106cd2:	4620      	mov	r0, r4
 8106cd4:	f000 fc9d 	bl	8107612 <_calloc_r>
 8106cd8:	b160      	cbz	r0, 8106cf4 <_Balloc+0x64>
 8106cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8106cde:	e00e      	b.n	8106cfe <_Balloc+0x6e>
 8106ce0:	2221      	movs	r2, #33	; 0x21
 8106ce2:	2104      	movs	r1, #4
 8106ce4:	4620      	mov	r0, r4
 8106ce6:	f000 fc94 	bl	8107612 <_calloc_r>
 8106cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8106cec:	60f0      	str	r0, [r6, #12]
 8106cee:	68db      	ldr	r3, [r3, #12]
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d1e4      	bne.n	8106cbe <_Balloc+0x2e>
 8106cf4:	2000      	movs	r0, #0
 8106cf6:	bd70      	pop	{r4, r5, r6, pc}
 8106cf8:	6802      	ldr	r2, [r0, #0]
 8106cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8106cfe:	2300      	movs	r3, #0
 8106d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8106d04:	e7f7      	b.n	8106cf6 <_Balloc+0x66>
 8106d06:	bf00      	nop
 8106d08:	08108706 	.word	0x08108706
 8106d0c:	08108868 	.word	0x08108868

08106d10 <_Bfree>:
 8106d10:	b570      	push	{r4, r5, r6, lr}
 8106d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8106d14:	4605      	mov	r5, r0
 8106d16:	460c      	mov	r4, r1
 8106d18:	b976      	cbnz	r6, 8106d38 <_Bfree+0x28>
 8106d1a:	2010      	movs	r0, #16
 8106d1c:	f7ff ff9e 	bl	8106c5c <malloc>
 8106d20:	4602      	mov	r2, r0
 8106d22:	6268      	str	r0, [r5, #36]	; 0x24
 8106d24:	b920      	cbnz	r0, 8106d30 <_Bfree+0x20>
 8106d26:	4b09      	ldr	r3, [pc, #36]	; (8106d4c <_Bfree+0x3c>)
 8106d28:	4809      	ldr	r0, [pc, #36]	; (8106d50 <_Bfree+0x40>)
 8106d2a:	218a      	movs	r1, #138	; 0x8a
 8106d2c:	f001 f970 	bl	8108010 <__assert_func>
 8106d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8106d34:	6006      	str	r6, [r0, #0]
 8106d36:	60c6      	str	r6, [r0, #12]
 8106d38:	b13c      	cbz	r4, 8106d4a <_Bfree+0x3a>
 8106d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8106d3c:	6862      	ldr	r2, [r4, #4]
 8106d3e:	68db      	ldr	r3, [r3, #12]
 8106d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8106d44:	6021      	str	r1, [r4, #0]
 8106d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8106d4a:	bd70      	pop	{r4, r5, r6, pc}
 8106d4c:	08108706 	.word	0x08108706
 8106d50:	08108868 	.word	0x08108868

08106d54 <__multadd>:
 8106d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106d58:	690d      	ldr	r5, [r1, #16]
 8106d5a:	4607      	mov	r7, r0
 8106d5c:	460c      	mov	r4, r1
 8106d5e:	461e      	mov	r6, r3
 8106d60:	f101 0c14 	add.w	ip, r1, #20
 8106d64:	2000      	movs	r0, #0
 8106d66:	f8dc 3000 	ldr.w	r3, [ip]
 8106d6a:	b299      	uxth	r1, r3
 8106d6c:	fb02 6101 	mla	r1, r2, r1, r6
 8106d70:	0c1e      	lsrs	r6, r3, #16
 8106d72:	0c0b      	lsrs	r3, r1, #16
 8106d74:	fb02 3306 	mla	r3, r2, r6, r3
 8106d78:	b289      	uxth	r1, r1
 8106d7a:	3001      	adds	r0, #1
 8106d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8106d80:	4285      	cmp	r5, r0
 8106d82:	f84c 1b04 	str.w	r1, [ip], #4
 8106d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8106d8a:	dcec      	bgt.n	8106d66 <__multadd+0x12>
 8106d8c:	b30e      	cbz	r6, 8106dd2 <__multadd+0x7e>
 8106d8e:	68a3      	ldr	r3, [r4, #8]
 8106d90:	42ab      	cmp	r3, r5
 8106d92:	dc19      	bgt.n	8106dc8 <__multadd+0x74>
 8106d94:	6861      	ldr	r1, [r4, #4]
 8106d96:	4638      	mov	r0, r7
 8106d98:	3101      	adds	r1, #1
 8106d9a:	f7ff ff79 	bl	8106c90 <_Balloc>
 8106d9e:	4680      	mov	r8, r0
 8106da0:	b928      	cbnz	r0, 8106dae <__multadd+0x5a>
 8106da2:	4602      	mov	r2, r0
 8106da4:	4b0c      	ldr	r3, [pc, #48]	; (8106dd8 <__multadd+0x84>)
 8106da6:	480d      	ldr	r0, [pc, #52]	; (8106ddc <__multadd+0x88>)
 8106da8:	21b5      	movs	r1, #181	; 0xb5
 8106daa:	f001 f931 	bl	8108010 <__assert_func>
 8106dae:	6922      	ldr	r2, [r4, #16]
 8106db0:	3202      	adds	r2, #2
 8106db2:	f104 010c 	add.w	r1, r4, #12
 8106db6:	0092      	lsls	r2, r2, #2
 8106db8:	300c      	adds	r0, #12
 8106dba:	f7fc feef 	bl	8103b9c <memcpy>
 8106dbe:	4621      	mov	r1, r4
 8106dc0:	4638      	mov	r0, r7
 8106dc2:	f7ff ffa5 	bl	8106d10 <_Bfree>
 8106dc6:	4644      	mov	r4, r8
 8106dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8106dcc:	3501      	adds	r5, #1
 8106dce:	615e      	str	r6, [r3, #20]
 8106dd0:	6125      	str	r5, [r4, #16]
 8106dd2:	4620      	mov	r0, r4
 8106dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106dd8:	08108778 	.word	0x08108778
 8106ddc:	08108868 	.word	0x08108868

08106de0 <__s2b>:
 8106de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106de4:	460c      	mov	r4, r1
 8106de6:	4615      	mov	r5, r2
 8106de8:	461f      	mov	r7, r3
 8106dea:	2209      	movs	r2, #9
 8106dec:	3308      	adds	r3, #8
 8106dee:	4606      	mov	r6, r0
 8106df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8106df4:	2100      	movs	r1, #0
 8106df6:	2201      	movs	r2, #1
 8106df8:	429a      	cmp	r2, r3
 8106dfa:	db09      	blt.n	8106e10 <__s2b+0x30>
 8106dfc:	4630      	mov	r0, r6
 8106dfe:	f7ff ff47 	bl	8106c90 <_Balloc>
 8106e02:	b940      	cbnz	r0, 8106e16 <__s2b+0x36>
 8106e04:	4602      	mov	r2, r0
 8106e06:	4b19      	ldr	r3, [pc, #100]	; (8106e6c <__s2b+0x8c>)
 8106e08:	4819      	ldr	r0, [pc, #100]	; (8106e70 <__s2b+0x90>)
 8106e0a:	21ce      	movs	r1, #206	; 0xce
 8106e0c:	f001 f900 	bl	8108010 <__assert_func>
 8106e10:	0052      	lsls	r2, r2, #1
 8106e12:	3101      	adds	r1, #1
 8106e14:	e7f0      	b.n	8106df8 <__s2b+0x18>
 8106e16:	9b08      	ldr	r3, [sp, #32]
 8106e18:	6143      	str	r3, [r0, #20]
 8106e1a:	2d09      	cmp	r5, #9
 8106e1c:	f04f 0301 	mov.w	r3, #1
 8106e20:	6103      	str	r3, [r0, #16]
 8106e22:	dd16      	ble.n	8106e52 <__s2b+0x72>
 8106e24:	f104 0909 	add.w	r9, r4, #9
 8106e28:	46c8      	mov	r8, r9
 8106e2a:	442c      	add	r4, r5
 8106e2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8106e30:	4601      	mov	r1, r0
 8106e32:	3b30      	subs	r3, #48	; 0x30
 8106e34:	220a      	movs	r2, #10
 8106e36:	4630      	mov	r0, r6
 8106e38:	f7ff ff8c 	bl	8106d54 <__multadd>
 8106e3c:	45a0      	cmp	r8, r4
 8106e3e:	d1f5      	bne.n	8106e2c <__s2b+0x4c>
 8106e40:	f1a5 0408 	sub.w	r4, r5, #8
 8106e44:	444c      	add	r4, r9
 8106e46:	1b2d      	subs	r5, r5, r4
 8106e48:	1963      	adds	r3, r4, r5
 8106e4a:	42bb      	cmp	r3, r7
 8106e4c:	db04      	blt.n	8106e58 <__s2b+0x78>
 8106e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106e52:	340a      	adds	r4, #10
 8106e54:	2509      	movs	r5, #9
 8106e56:	e7f6      	b.n	8106e46 <__s2b+0x66>
 8106e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8106e5c:	4601      	mov	r1, r0
 8106e5e:	3b30      	subs	r3, #48	; 0x30
 8106e60:	220a      	movs	r2, #10
 8106e62:	4630      	mov	r0, r6
 8106e64:	f7ff ff76 	bl	8106d54 <__multadd>
 8106e68:	e7ee      	b.n	8106e48 <__s2b+0x68>
 8106e6a:	bf00      	nop
 8106e6c:	08108778 	.word	0x08108778
 8106e70:	08108868 	.word	0x08108868

08106e74 <__hi0bits>:
 8106e74:	0c03      	lsrs	r3, r0, #16
 8106e76:	041b      	lsls	r3, r3, #16
 8106e78:	b9d3      	cbnz	r3, 8106eb0 <__hi0bits+0x3c>
 8106e7a:	0400      	lsls	r0, r0, #16
 8106e7c:	2310      	movs	r3, #16
 8106e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8106e82:	bf04      	itt	eq
 8106e84:	0200      	lsleq	r0, r0, #8
 8106e86:	3308      	addeq	r3, #8
 8106e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8106e8c:	bf04      	itt	eq
 8106e8e:	0100      	lsleq	r0, r0, #4
 8106e90:	3304      	addeq	r3, #4
 8106e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8106e96:	bf04      	itt	eq
 8106e98:	0080      	lsleq	r0, r0, #2
 8106e9a:	3302      	addeq	r3, #2
 8106e9c:	2800      	cmp	r0, #0
 8106e9e:	db05      	blt.n	8106eac <__hi0bits+0x38>
 8106ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8106ea4:	f103 0301 	add.w	r3, r3, #1
 8106ea8:	bf08      	it	eq
 8106eaa:	2320      	moveq	r3, #32
 8106eac:	4618      	mov	r0, r3
 8106eae:	4770      	bx	lr
 8106eb0:	2300      	movs	r3, #0
 8106eb2:	e7e4      	b.n	8106e7e <__hi0bits+0xa>

08106eb4 <__lo0bits>:
 8106eb4:	6803      	ldr	r3, [r0, #0]
 8106eb6:	f013 0207 	ands.w	r2, r3, #7
 8106eba:	4601      	mov	r1, r0
 8106ebc:	d00b      	beq.n	8106ed6 <__lo0bits+0x22>
 8106ebe:	07da      	lsls	r2, r3, #31
 8106ec0:	d423      	bmi.n	8106f0a <__lo0bits+0x56>
 8106ec2:	0798      	lsls	r0, r3, #30
 8106ec4:	bf49      	itett	mi
 8106ec6:	085b      	lsrmi	r3, r3, #1
 8106ec8:	089b      	lsrpl	r3, r3, #2
 8106eca:	2001      	movmi	r0, #1
 8106ecc:	600b      	strmi	r3, [r1, #0]
 8106ece:	bf5c      	itt	pl
 8106ed0:	600b      	strpl	r3, [r1, #0]
 8106ed2:	2002      	movpl	r0, #2
 8106ed4:	4770      	bx	lr
 8106ed6:	b298      	uxth	r0, r3
 8106ed8:	b9a8      	cbnz	r0, 8106f06 <__lo0bits+0x52>
 8106eda:	0c1b      	lsrs	r3, r3, #16
 8106edc:	2010      	movs	r0, #16
 8106ede:	b2da      	uxtb	r2, r3
 8106ee0:	b90a      	cbnz	r2, 8106ee6 <__lo0bits+0x32>
 8106ee2:	3008      	adds	r0, #8
 8106ee4:	0a1b      	lsrs	r3, r3, #8
 8106ee6:	071a      	lsls	r2, r3, #28
 8106ee8:	bf04      	itt	eq
 8106eea:	091b      	lsreq	r3, r3, #4
 8106eec:	3004      	addeq	r0, #4
 8106eee:	079a      	lsls	r2, r3, #30
 8106ef0:	bf04      	itt	eq
 8106ef2:	089b      	lsreq	r3, r3, #2
 8106ef4:	3002      	addeq	r0, #2
 8106ef6:	07da      	lsls	r2, r3, #31
 8106ef8:	d403      	bmi.n	8106f02 <__lo0bits+0x4e>
 8106efa:	085b      	lsrs	r3, r3, #1
 8106efc:	f100 0001 	add.w	r0, r0, #1
 8106f00:	d005      	beq.n	8106f0e <__lo0bits+0x5a>
 8106f02:	600b      	str	r3, [r1, #0]
 8106f04:	4770      	bx	lr
 8106f06:	4610      	mov	r0, r2
 8106f08:	e7e9      	b.n	8106ede <__lo0bits+0x2a>
 8106f0a:	2000      	movs	r0, #0
 8106f0c:	4770      	bx	lr
 8106f0e:	2020      	movs	r0, #32
 8106f10:	4770      	bx	lr
	...

08106f14 <__i2b>:
 8106f14:	b510      	push	{r4, lr}
 8106f16:	460c      	mov	r4, r1
 8106f18:	2101      	movs	r1, #1
 8106f1a:	f7ff feb9 	bl	8106c90 <_Balloc>
 8106f1e:	4602      	mov	r2, r0
 8106f20:	b928      	cbnz	r0, 8106f2e <__i2b+0x1a>
 8106f22:	4b05      	ldr	r3, [pc, #20]	; (8106f38 <__i2b+0x24>)
 8106f24:	4805      	ldr	r0, [pc, #20]	; (8106f3c <__i2b+0x28>)
 8106f26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8106f2a:	f001 f871 	bl	8108010 <__assert_func>
 8106f2e:	2301      	movs	r3, #1
 8106f30:	6144      	str	r4, [r0, #20]
 8106f32:	6103      	str	r3, [r0, #16]
 8106f34:	bd10      	pop	{r4, pc}
 8106f36:	bf00      	nop
 8106f38:	08108778 	.word	0x08108778
 8106f3c:	08108868 	.word	0x08108868

08106f40 <__multiply>:
 8106f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106f44:	4691      	mov	r9, r2
 8106f46:	690a      	ldr	r2, [r1, #16]
 8106f48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8106f4c:	429a      	cmp	r2, r3
 8106f4e:	bfb8      	it	lt
 8106f50:	460b      	movlt	r3, r1
 8106f52:	460c      	mov	r4, r1
 8106f54:	bfbc      	itt	lt
 8106f56:	464c      	movlt	r4, r9
 8106f58:	4699      	movlt	r9, r3
 8106f5a:	6927      	ldr	r7, [r4, #16]
 8106f5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8106f60:	68a3      	ldr	r3, [r4, #8]
 8106f62:	6861      	ldr	r1, [r4, #4]
 8106f64:	eb07 060a 	add.w	r6, r7, sl
 8106f68:	42b3      	cmp	r3, r6
 8106f6a:	b085      	sub	sp, #20
 8106f6c:	bfb8      	it	lt
 8106f6e:	3101      	addlt	r1, #1
 8106f70:	f7ff fe8e 	bl	8106c90 <_Balloc>
 8106f74:	b930      	cbnz	r0, 8106f84 <__multiply+0x44>
 8106f76:	4602      	mov	r2, r0
 8106f78:	4b44      	ldr	r3, [pc, #272]	; (810708c <__multiply+0x14c>)
 8106f7a:	4845      	ldr	r0, [pc, #276]	; (8107090 <__multiply+0x150>)
 8106f7c:	f240 115d 	movw	r1, #349	; 0x15d
 8106f80:	f001 f846 	bl	8108010 <__assert_func>
 8106f84:	f100 0514 	add.w	r5, r0, #20
 8106f88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8106f8c:	462b      	mov	r3, r5
 8106f8e:	2200      	movs	r2, #0
 8106f90:	4543      	cmp	r3, r8
 8106f92:	d321      	bcc.n	8106fd8 <__multiply+0x98>
 8106f94:	f104 0314 	add.w	r3, r4, #20
 8106f98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8106f9c:	f109 0314 	add.w	r3, r9, #20
 8106fa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8106fa4:	9202      	str	r2, [sp, #8]
 8106fa6:	1b3a      	subs	r2, r7, r4
 8106fa8:	3a15      	subs	r2, #21
 8106faa:	f022 0203 	bic.w	r2, r2, #3
 8106fae:	3204      	adds	r2, #4
 8106fb0:	f104 0115 	add.w	r1, r4, #21
 8106fb4:	428f      	cmp	r7, r1
 8106fb6:	bf38      	it	cc
 8106fb8:	2204      	movcc	r2, #4
 8106fba:	9201      	str	r2, [sp, #4]
 8106fbc:	9a02      	ldr	r2, [sp, #8]
 8106fbe:	9303      	str	r3, [sp, #12]
 8106fc0:	429a      	cmp	r2, r3
 8106fc2:	d80c      	bhi.n	8106fde <__multiply+0x9e>
 8106fc4:	2e00      	cmp	r6, #0
 8106fc6:	dd03      	ble.n	8106fd0 <__multiply+0x90>
 8106fc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8106fcc:	2b00      	cmp	r3, #0
 8106fce:	d05a      	beq.n	8107086 <__multiply+0x146>
 8106fd0:	6106      	str	r6, [r0, #16]
 8106fd2:	b005      	add	sp, #20
 8106fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106fd8:	f843 2b04 	str.w	r2, [r3], #4
 8106fdc:	e7d8      	b.n	8106f90 <__multiply+0x50>
 8106fde:	f8b3 a000 	ldrh.w	sl, [r3]
 8106fe2:	f1ba 0f00 	cmp.w	sl, #0
 8106fe6:	d024      	beq.n	8107032 <__multiply+0xf2>
 8106fe8:	f104 0e14 	add.w	lr, r4, #20
 8106fec:	46a9      	mov	r9, r5
 8106fee:	f04f 0c00 	mov.w	ip, #0
 8106ff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8106ff6:	f8d9 1000 	ldr.w	r1, [r9]
 8106ffa:	fa1f fb82 	uxth.w	fp, r2
 8106ffe:	b289      	uxth	r1, r1
 8107000:	fb0a 110b 	mla	r1, sl, fp, r1
 8107004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8107008:	f8d9 2000 	ldr.w	r2, [r9]
 810700c:	4461      	add	r1, ip
 810700e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8107012:	fb0a c20b 	mla	r2, sl, fp, ip
 8107016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810701a:	b289      	uxth	r1, r1
 810701c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8107020:	4577      	cmp	r7, lr
 8107022:	f849 1b04 	str.w	r1, [r9], #4
 8107026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810702a:	d8e2      	bhi.n	8106ff2 <__multiply+0xb2>
 810702c:	9a01      	ldr	r2, [sp, #4]
 810702e:	f845 c002 	str.w	ip, [r5, r2]
 8107032:	9a03      	ldr	r2, [sp, #12]
 8107034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8107038:	3304      	adds	r3, #4
 810703a:	f1b9 0f00 	cmp.w	r9, #0
 810703e:	d020      	beq.n	8107082 <__multiply+0x142>
 8107040:	6829      	ldr	r1, [r5, #0]
 8107042:	f104 0c14 	add.w	ip, r4, #20
 8107046:	46ae      	mov	lr, r5
 8107048:	f04f 0a00 	mov.w	sl, #0
 810704c:	f8bc b000 	ldrh.w	fp, [ip]
 8107050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8107054:	fb09 220b 	mla	r2, r9, fp, r2
 8107058:	4492      	add	sl, r2
 810705a:	b289      	uxth	r1, r1
 810705c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8107060:	f84e 1b04 	str.w	r1, [lr], #4
 8107064:	f85c 2b04 	ldr.w	r2, [ip], #4
 8107068:	f8be 1000 	ldrh.w	r1, [lr]
 810706c:	0c12      	lsrs	r2, r2, #16
 810706e:	fb09 1102 	mla	r1, r9, r2, r1
 8107072:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8107076:	4567      	cmp	r7, ip
 8107078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810707c:	d8e6      	bhi.n	810704c <__multiply+0x10c>
 810707e:	9a01      	ldr	r2, [sp, #4]
 8107080:	50a9      	str	r1, [r5, r2]
 8107082:	3504      	adds	r5, #4
 8107084:	e79a      	b.n	8106fbc <__multiply+0x7c>
 8107086:	3e01      	subs	r6, #1
 8107088:	e79c      	b.n	8106fc4 <__multiply+0x84>
 810708a:	bf00      	nop
 810708c:	08108778 	.word	0x08108778
 8107090:	08108868 	.word	0x08108868

08107094 <__pow5mult>:
 8107094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107098:	4615      	mov	r5, r2
 810709a:	f012 0203 	ands.w	r2, r2, #3
 810709e:	4606      	mov	r6, r0
 81070a0:	460f      	mov	r7, r1
 81070a2:	d007      	beq.n	81070b4 <__pow5mult+0x20>
 81070a4:	4c25      	ldr	r4, [pc, #148]	; (810713c <__pow5mult+0xa8>)
 81070a6:	3a01      	subs	r2, #1
 81070a8:	2300      	movs	r3, #0
 81070aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81070ae:	f7ff fe51 	bl	8106d54 <__multadd>
 81070b2:	4607      	mov	r7, r0
 81070b4:	10ad      	asrs	r5, r5, #2
 81070b6:	d03d      	beq.n	8107134 <__pow5mult+0xa0>
 81070b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81070ba:	b97c      	cbnz	r4, 81070dc <__pow5mult+0x48>
 81070bc:	2010      	movs	r0, #16
 81070be:	f7ff fdcd 	bl	8106c5c <malloc>
 81070c2:	4602      	mov	r2, r0
 81070c4:	6270      	str	r0, [r6, #36]	; 0x24
 81070c6:	b928      	cbnz	r0, 81070d4 <__pow5mult+0x40>
 81070c8:	4b1d      	ldr	r3, [pc, #116]	; (8107140 <__pow5mult+0xac>)
 81070ca:	481e      	ldr	r0, [pc, #120]	; (8107144 <__pow5mult+0xb0>)
 81070cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 81070d0:	f000 ff9e 	bl	8108010 <__assert_func>
 81070d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81070d8:	6004      	str	r4, [r0, #0]
 81070da:	60c4      	str	r4, [r0, #12]
 81070dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 81070e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81070e4:	b94c      	cbnz	r4, 81070fa <__pow5mult+0x66>
 81070e6:	f240 2171 	movw	r1, #625	; 0x271
 81070ea:	4630      	mov	r0, r6
 81070ec:	f7ff ff12 	bl	8106f14 <__i2b>
 81070f0:	2300      	movs	r3, #0
 81070f2:	f8c8 0008 	str.w	r0, [r8, #8]
 81070f6:	4604      	mov	r4, r0
 81070f8:	6003      	str	r3, [r0, #0]
 81070fa:	f04f 0900 	mov.w	r9, #0
 81070fe:	07eb      	lsls	r3, r5, #31
 8107100:	d50a      	bpl.n	8107118 <__pow5mult+0x84>
 8107102:	4639      	mov	r1, r7
 8107104:	4622      	mov	r2, r4
 8107106:	4630      	mov	r0, r6
 8107108:	f7ff ff1a 	bl	8106f40 <__multiply>
 810710c:	4639      	mov	r1, r7
 810710e:	4680      	mov	r8, r0
 8107110:	4630      	mov	r0, r6
 8107112:	f7ff fdfd 	bl	8106d10 <_Bfree>
 8107116:	4647      	mov	r7, r8
 8107118:	106d      	asrs	r5, r5, #1
 810711a:	d00b      	beq.n	8107134 <__pow5mult+0xa0>
 810711c:	6820      	ldr	r0, [r4, #0]
 810711e:	b938      	cbnz	r0, 8107130 <__pow5mult+0x9c>
 8107120:	4622      	mov	r2, r4
 8107122:	4621      	mov	r1, r4
 8107124:	4630      	mov	r0, r6
 8107126:	f7ff ff0b 	bl	8106f40 <__multiply>
 810712a:	6020      	str	r0, [r4, #0]
 810712c:	f8c0 9000 	str.w	r9, [r0]
 8107130:	4604      	mov	r4, r0
 8107132:	e7e4      	b.n	81070fe <__pow5mult+0x6a>
 8107134:	4638      	mov	r0, r7
 8107136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810713a:	bf00      	nop
 810713c:	081089b8 	.word	0x081089b8
 8107140:	08108706 	.word	0x08108706
 8107144:	08108868 	.word	0x08108868

08107148 <__lshift>:
 8107148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810714c:	460c      	mov	r4, r1
 810714e:	6849      	ldr	r1, [r1, #4]
 8107150:	6923      	ldr	r3, [r4, #16]
 8107152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8107156:	68a3      	ldr	r3, [r4, #8]
 8107158:	4607      	mov	r7, r0
 810715a:	4691      	mov	r9, r2
 810715c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8107160:	f108 0601 	add.w	r6, r8, #1
 8107164:	42b3      	cmp	r3, r6
 8107166:	db0b      	blt.n	8107180 <__lshift+0x38>
 8107168:	4638      	mov	r0, r7
 810716a:	f7ff fd91 	bl	8106c90 <_Balloc>
 810716e:	4605      	mov	r5, r0
 8107170:	b948      	cbnz	r0, 8107186 <__lshift+0x3e>
 8107172:	4602      	mov	r2, r0
 8107174:	4b2a      	ldr	r3, [pc, #168]	; (8107220 <__lshift+0xd8>)
 8107176:	482b      	ldr	r0, [pc, #172]	; (8107224 <__lshift+0xdc>)
 8107178:	f240 11d9 	movw	r1, #473	; 0x1d9
 810717c:	f000 ff48 	bl	8108010 <__assert_func>
 8107180:	3101      	adds	r1, #1
 8107182:	005b      	lsls	r3, r3, #1
 8107184:	e7ee      	b.n	8107164 <__lshift+0x1c>
 8107186:	2300      	movs	r3, #0
 8107188:	f100 0114 	add.w	r1, r0, #20
 810718c:	f100 0210 	add.w	r2, r0, #16
 8107190:	4618      	mov	r0, r3
 8107192:	4553      	cmp	r3, sl
 8107194:	db37      	blt.n	8107206 <__lshift+0xbe>
 8107196:	6920      	ldr	r0, [r4, #16]
 8107198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810719c:	f104 0314 	add.w	r3, r4, #20
 81071a0:	f019 091f 	ands.w	r9, r9, #31
 81071a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81071a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 81071ac:	d02f      	beq.n	810720e <__lshift+0xc6>
 81071ae:	f1c9 0e20 	rsb	lr, r9, #32
 81071b2:	468a      	mov	sl, r1
 81071b4:	f04f 0c00 	mov.w	ip, #0
 81071b8:	681a      	ldr	r2, [r3, #0]
 81071ba:	fa02 f209 	lsl.w	r2, r2, r9
 81071be:	ea42 020c 	orr.w	r2, r2, ip
 81071c2:	f84a 2b04 	str.w	r2, [sl], #4
 81071c6:	f853 2b04 	ldr.w	r2, [r3], #4
 81071ca:	4298      	cmp	r0, r3
 81071cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 81071d0:	d8f2      	bhi.n	81071b8 <__lshift+0x70>
 81071d2:	1b03      	subs	r3, r0, r4
 81071d4:	3b15      	subs	r3, #21
 81071d6:	f023 0303 	bic.w	r3, r3, #3
 81071da:	3304      	adds	r3, #4
 81071dc:	f104 0215 	add.w	r2, r4, #21
 81071e0:	4290      	cmp	r0, r2
 81071e2:	bf38      	it	cc
 81071e4:	2304      	movcc	r3, #4
 81071e6:	f841 c003 	str.w	ip, [r1, r3]
 81071ea:	f1bc 0f00 	cmp.w	ip, #0
 81071ee:	d001      	beq.n	81071f4 <__lshift+0xac>
 81071f0:	f108 0602 	add.w	r6, r8, #2
 81071f4:	3e01      	subs	r6, #1
 81071f6:	4638      	mov	r0, r7
 81071f8:	612e      	str	r6, [r5, #16]
 81071fa:	4621      	mov	r1, r4
 81071fc:	f7ff fd88 	bl	8106d10 <_Bfree>
 8107200:	4628      	mov	r0, r5
 8107202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107206:	f842 0f04 	str.w	r0, [r2, #4]!
 810720a:	3301      	adds	r3, #1
 810720c:	e7c1      	b.n	8107192 <__lshift+0x4a>
 810720e:	3904      	subs	r1, #4
 8107210:	f853 2b04 	ldr.w	r2, [r3], #4
 8107214:	f841 2f04 	str.w	r2, [r1, #4]!
 8107218:	4298      	cmp	r0, r3
 810721a:	d8f9      	bhi.n	8107210 <__lshift+0xc8>
 810721c:	e7ea      	b.n	81071f4 <__lshift+0xac>
 810721e:	bf00      	nop
 8107220:	08108778 	.word	0x08108778
 8107224:	08108868 	.word	0x08108868

08107228 <__mcmp>:
 8107228:	b530      	push	{r4, r5, lr}
 810722a:	6902      	ldr	r2, [r0, #16]
 810722c:	690c      	ldr	r4, [r1, #16]
 810722e:	1b12      	subs	r2, r2, r4
 8107230:	d10e      	bne.n	8107250 <__mcmp+0x28>
 8107232:	f100 0314 	add.w	r3, r0, #20
 8107236:	3114      	adds	r1, #20
 8107238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810723c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8107240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8107244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8107248:	42a5      	cmp	r5, r4
 810724a:	d003      	beq.n	8107254 <__mcmp+0x2c>
 810724c:	d305      	bcc.n	810725a <__mcmp+0x32>
 810724e:	2201      	movs	r2, #1
 8107250:	4610      	mov	r0, r2
 8107252:	bd30      	pop	{r4, r5, pc}
 8107254:	4283      	cmp	r3, r0
 8107256:	d3f3      	bcc.n	8107240 <__mcmp+0x18>
 8107258:	e7fa      	b.n	8107250 <__mcmp+0x28>
 810725a:	f04f 32ff 	mov.w	r2, #4294967295
 810725e:	e7f7      	b.n	8107250 <__mcmp+0x28>

08107260 <__mdiff>:
 8107260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107264:	460c      	mov	r4, r1
 8107266:	4606      	mov	r6, r0
 8107268:	4611      	mov	r1, r2
 810726a:	4620      	mov	r0, r4
 810726c:	4690      	mov	r8, r2
 810726e:	f7ff ffdb 	bl	8107228 <__mcmp>
 8107272:	1e05      	subs	r5, r0, #0
 8107274:	d110      	bne.n	8107298 <__mdiff+0x38>
 8107276:	4629      	mov	r1, r5
 8107278:	4630      	mov	r0, r6
 810727a:	f7ff fd09 	bl	8106c90 <_Balloc>
 810727e:	b930      	cbnz	r0, 810728e <__mdiff+0x2e>
 8107280:	4b3a      	ldr	r3, [pc, #232]	; (810736c <__mdiff+0x10c>)
 8107282:	4602      	mov	r2, r0
 8107284:	f240 2132 	movw	r1, #562	; 0x232
 8107288:	4839      	ldr	r0, [pc, #228]	; (8107370 <__mdiff+0x110>)
 810728a:	f000 fec1 	bl	8108010 <__assert_func>
 810728e:	2301      	movs	r3, #1
 8107290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8107294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107298:	bfa4      	itt	ge
 810729a:	4643      	movge	r3, r8
 810729c:	46a0      	movge	r8, r4
 810729e:	4630      	mov	r0, r6
 81072a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 81072a4:	bfa6      	itte	ge
 81072a6:	461c      	movge	r4, r3
 81072a8:	2500      	movge	r5, #0
 81072aa:	2501      	movlt	r5, #1
 81072ac:	f7ff fcf0 	bl	8106c90 <_Balloc>
 81072b0:	b920      	cbnz	r0, 81072bc <__mdiff+0x5c>
 81072b2:	4b2e      	ldr	r3, [pc, #184]	; (810736c <__mdiff+0x10c>)
 81072b4:	4602      	mov	r2, r0
 81072b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 81072ba:	e7e5      	b.n	8107288 <__mdiff+0x28>
 81072bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 81072c0:	6926      	ldr	r6, [r4, #16]
 81072c2:	60c5      	str	r5, [r0, #12]
 81072c4:	f104 0914 	add.w	r9, r4, #20
 81072c8:	f108 0514 	add.w	r5, r8, #20
 81072cc:	f100 0e14 	add.w	lr, r0, #20
 81072d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 81072d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 81072d8:	f108 0210 	add.w	r2, r8, #16
 81072dc:	46f2      	mov	sl, lr
 81072de:	2100      	movs	r1, #0
 81072e0:	f859 3b04 	ldr.w	r3, [r9], #4
 81072e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 81072e8:	fa1f f883 	uxth.w	r8, r3
 81072ec:	fa11 f18b 	uxtah	r1, r1, fp
 81072f0:	0c1b      	lsrs	r3, r3, #16
 81072f2:	eba1 0808 	sub.w	r8, r1, r8
 81072f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 81072fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 81072fe:	fa1f f888 	uxth.w	r8, r8
 8107302:	1419      	asrs	r1, r3, #16
 8107304:	454e      	cmp	r6, r9
 8107306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810730a:	f84a 3b04 	str.w	r3, [sl], #4
 810730e:	d8e7      	bhi.n	81072e0 <__mdiff+0x80>
 8107310:	1b33      	subs	r3, r6, r4
 8107312:	3b15      	subs	r3, #21
 8107314:	f023 0303 	bic.w	r3, r3, #3
 8107318:	3304      	adds	r3, #4
 810731a:	3415      	adds	r4, #21
 810731c:	42a6      	cmp	r6, r4
 810731e:	bf38      	it	cc
 8107320:	2304      	movcc	r3, #4
 8107322:	441d      	add	r5, r3
 8107324:	4473      	add	r3, lr
 8107326:	469e      	mov	lr, r3
 8107328:	462e      	mov	r6, r5
 810732a:	4566      	cmp	r6, ip
 810732c:	d30e      	bcc.n	810734c <__mdiff+0xec>
 810732e:	f10c 0203 	add.w	r2, ip, #3
 8107332:	1b52      	subs	r2, r2, r5
 8107334:	f022 0203 	bic.w	r2, r2, #3
 8107338:	3d03      	subs	r5, #3
 810733a:	45ac      	cmp	ip, r5
 810733c:	bf38      	it	cc
 810733e:	2200      	movcc	r2, #0
 8107340:	441a      	add	r2, r3
 8107342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8107346:	b17b      	cbz	r3, 8107368 <__mdiff+0x108>
 8107348:	6107      	str	r7, [r0, #16]
 810734a:	e7a3      	b.n	8107294 <__mdiff+0x34>
 810734c:	f856 8b04 	ldr.w	r8, [r6], #4
 8107350:	fa11 f288 	uxtah	r2, r1, r8
 8107354:	1414      	asrs	r4, r2, #16
 8107356:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810735a:	b292      	uxth	r2, r2
 810735c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8107360:	f84e 2b04 	str.w	r2, [lr], #4
 8107364:	1421      	asrs	r1, r4, #16
 8107366:	e7e0      	b.n	810732a <__mdiff+0xca>
 8107368:	3f01      	subs	r7, #1
 810736a:	e7ea      	b.n	8107342 <__mdiff+0xe2>
 810736c:	08108778 	.word	0x08108778
 8107370:	08108868 	.word	0x08108868

08107374 <__ulp>:
 8107374:	b082      	sub	sp, #8
 8107376:	ed8d 0b00 	vstr	d0, [sp]
 810737a:	9b01      	ldr	r3, [sp, #4]
 810737c:	4912      	ldr	r1, [pc, #72]	; (81073c8 <__ulp+0x54>)
 810737e:	4019      	ands	r1, r3
 8107380:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8107384:	2900      	cmp	r1, #0
 8107386:	dd05      	ble.n	8107394 <__ulp+0x20>
 8107388:	2200      	movs	r2, #0
 810738a:	460b      	mov	r3, r1
 810738c:	ec43 2b10 	vmov	d0, r2, r3
 8107390:	b002      	add	sp, #8
 8107392:	4770      	bx	lr
 8107394:	4249      	negs	r1, r1
 8107396:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810739a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810739e:	f04f 0200 	mov.w	r2, #0
 81073a2:	f04f 0300 	mov.w	r3, #0
 81073a6:	da04      	bge.n	81073b2 <__ulp+0x3e>
 81073a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 81073ac:	fa41 f300 	asr.w	r3, r1, r0
 81073b0:	e7ec      	b.n	810738c <__ulp+0x18>
 81073b2:	f1a0 0114 	sub.w	r1, r0, #20
 81073b6:	291e      	cmp	r1, #30
 81073b8:	bfda      	itte	le
 81073ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 81073be:	fa20 f101 	lsrle.w	r1, r0, r1
 81073c2:	2101      	movgt	r1, #1
 81073c4:	460a      	mov	r2, r1
 81073c6:	e7e1      	b.n	810738c <__ulp+0x18>
 81073c8:	7ff00000 	.word	0x7ff00000

081073cc <__b2d>:
 81073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81073ce:	6905      	ldr	r5, [r0, #16]
 81073d0:	f100 0714 	add.w	r7, r0, #20
 81073d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 81073d8:	1f2e      	subs	r6, r5, #4
 81073da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 81073de:	4620      	mov	r0, r4
 81073e0:	f7ff fd48 	bl	8106e74 <__hi0bits>
 81073e4:	f1c0 0320 	rsb	r3, r0, #32
 81073e8:	280a      	cmp	r0, #10
 81073ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8107468 <__b2d+0x9c>
 81073ee:	600b      	str	r3, [r1, #0]
 81073f0:	dc14      	bgt.n	810741c <__b2d+0x50>
 81073f2:	f1c0 0e0b 	rsb	lr, r0, #11
 81073f6:	fa24 f10e 	lsr.w	r1, r4, lr
 81073fa:	42b7      	cmp	r7, r6
 81073fc:	ea41 030c 	orr.w	r3, r1, ip
 8107400:	bf34      	ite	cc
 8107402:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8107406:	2100      	movcs	r1, #0
 8107408:	3015      	adds	r0, #21
 810740a:	fa04 f000 	lsl.w	r0, r4, r0
 810740e:	fa21 f10e 	lsr.w	r1, r1, lr
 8107412:	ea40 0201 	orr.w	r2, r0, r1
 8107416:	ec43 2b10 	vmov	d0, r2, r3
 810741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810741c:	42b7      	cmp	r7, r6
 810741e:	bf3a      	itte	cc
 8107420:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8107424:	f1a5 0608 	subcc.w	r6, r5, #8
 8107428:	2100      	movcs	r1, #0
 810742a:	380b      	subs	r0, #11
 810742c:	d017      	beq.n	810745e <__b2d+0x92>
 810742e:	f1c0 0c20 	rsb	ip, r0, #32
 8107432:	fa04 f500 	lsl.w	r5, r4, r0
 8107436:	42be      	cmp	r6, r7
 8107438:	fa21 f40c 	lsr.w	r4, r1, ip
 810743c:	ea45 0504 	orr.w	r5, r5, r4
 8107440:	bf8c      	ite	hi
 8107442:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8107446:	2400      	movls	r4, #0
 8107448:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810744c:	fa01 f000 	lsl.w	r0, r1, r0
 8107450:	fa24 f40c 	lsr.w	r4, r4, ip
 8107454:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8107458:	ea40 0204 	orr.w	r2, r0, r4
 810745c:	e7db      	b.n	8107416 <__b2d+0x4a>
 810745e:	ea44 030c 	orr.w	r3, r4, ip
 8107462:	460a      	mov	r2, r1
 8107464:	e7d7      	b.n	8107416 <__b2d+0x4a>
 8107466:	bf00      	nop
 8107468:	3ff00000 	.word	0x3ff00000

0810746c <__d2b>:
 810746c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8107470:	4689      	mov	r9, r1
 8107472:	2101      	movs	r1, #1
 8107474:	ec57 6b10 	vmov	r6, r7, d0
 8107478:	4690      	mov	r8, r2
 810747a:	f7ff fc09 	bl	8106c90 <_Balloc>
 810747e:	4604      	mov	r4, r0
 8107480:	b930      	cbnz	r0, 8107490 <__d2b+0x24>
 8107482:	4602      	mov	r2, r0
 8107484:	4b25      	ldr	r3, [pc, #148]	; (810751c <__d2b+0xb0>)
 8107486:	4826      	ldr	r0, [pc, #152]	; (8107520 <__d2b+0xb4>)
 8107488:	f240 310a 	movw	r1, #778	; 0x30a
 810748c:	f000 fdc0 	bl	8108010 <__assert_func>
 8107490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8107494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8107498:	bb35      	cbnz	r5, 81074e8 <__d2b+0x7c>
 810749a:	2e00      	cmp	r6, #0
 810749c:	9301      	str	r3, [sp, #4]
 810749e:	d028      	beq.n	81074f2 <__d2b+0x86>
 81074a0:	4668      	mov	r0, sp
 81074a2:	9600      	str	r6, [sp, #0]
 81074a4:	f7ff fd06 	bl	8106eb4 <__lo0bits>
 81074a8:	9900      	ldr	r1, [sp, #0]
 81074aa:	b300      	cbz	r0, 81074ee <__d2b+0x82>
 81074ac:	9a01      	ldr	r2, [sp, #4]
 81074ae:	f1c0 0320 	rsb	r3, r0, #32
 81074b2:	fa02 f303 	lsl.w	r3, r2, r3
 81074b6:	430b      	orrs	r3, r1
 81074b8:	40c2      	lsrs	r2, r0
 81074ba:	6163      	str	r3, [r4, #20]
 81074bc:	9201      	str	r2, [sp, #4]
 81074be:	9b01      	ldr	r3, [sp, #4]
 81074c0:	61a3      	str	r3, [r4, #24]
 81074c2:	2b00      	cmp	r3, #0
 81074c4:	bf14      	ite	ne
 81074c6:	2202      	movne	r2, #2
 81074c8:	2201      	moveq	r2, #1
 81074ca:	6122      	str	r2, [r4, #16]
 81074cc:	b1d5      	cbz	r5, 8107504 <__d2b+0x98>
 81074ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81074d2:	4405      	add	r5, r0
 81074d4:	f8c9 5000 	str.w	r5, [r9]
 81074d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81074dc:	f8c8 0000 	str.w	r0, [r8]
 81074e0:	4620      	mov	r0, r4
 81074e2:	b003      	add	sp, #12
 81074e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81074e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81074ec:	e7d5      	b.n	810749a <__d2b+0x2e>
 81074ee:	6161      	str	r1, [r4, #20]
 81074f0:	e7e5      	b.n	81074be <__d2b+0x52>
 81074f2:	a801      	add	r0, sp, #4
 81074f4:	f7ff fcde 	bl	8106eb4 <__lo0bits>
 81074f8:	9b01      	ldr	r3, [sp, #4]
 81074fa:	6163      	str	r3, [r4, #20]
 81074fc:	2201      	movs	r2, #1
 81074fe:	6122      	str	r2, [r4, #16]
 8107500:	3020      	adds	r0, #32
 8107502:	e7e3      	b.n	81074cc <__d2b+0x60>
 8107504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8107508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810750c:	f8c9 0000 	str.w	r0, [r9]
 8107510:	6918      	ldr	r0, [r3, #16]
 8107512:	f7ff fcaf 	bl	8106e74 <__hi0bits>
 8107516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810751a:	e7df      	b.n	81074dc <__d2b+0x70>
 810751c:	08108778 	.word	0x08108778
 8107520:	08108868 	.word	0x08108868

08107524 <__ratio>:
 8107524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107528:	4688      	mov	r8, r1
 810752a:	4669      	mov	r1, sp
 810752c:	4681      	mov	r9, r0
 810752e:	f7ff ff4d 	bl	81073cc <__b2d>
 8107532:	a901      	add	r1, sp, #4
 8107534:	4640      	mov	r0, r8
 8107536:	ec55 4b10 	vmov	r4, r5, d0
 810753a:	f7ff ff47 	bl	81073cc <__b2d>
 810753e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8107542:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8107546:	eba3 0c02 	sub.w	ip, r3, r2
 810754a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810754e:	1a9b      	subs	r3, r3, r2
 8107550:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8107554:	ec51 0b10 	vmov	r0, r1, d0
 8107558:	2b00      	cmp	r3, #0
 810755a:	bfd6      	itet	le
 810755c:	460a      	movle	r2, r1
 810755e:	462a      	movgt	r2, r5
 8107560:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8107564:	468b      	mov	fp, r1
 8107566:	462f      	mov	r7, r5
 8107568:	bfd4      	ite	le
 810756a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810756e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8107572:	4620      	mov	r0, r4
 8107574:	ee10 2a10 	vmov	r2, s0
 8107578:	465b      	mov	r3, fp
 810757a:	4639      	mov	r1, r7
 810757c:	f7f9 f9ee 	bl	810095c <__aeabi_ddiv>
 8107580:	ec41 0b10 	vmov	d0, r0, r1
 8107584:	b003      	add	sp, #12
 8107586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810758a <__copybits>:
 810758a:	3901      	subs	r1, #1
 810758c:	b570      	push	{r4, r5, r6, lr}
 810758e:	1149      	asrs	r1, r1, #5
 8107590:	6914      	ldr	r4, [r2, #16]
 8107592:	3101      	adds	r1, #1
 8107594:	f102 0314 	add.w	r3, r2, #20
 8107598:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810759c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 81075a0:	1f05      	subs	r5, r0, #4
 81075a2:	42a3      	cmp	r3, r4
 81075a4:	d30c      	bcc.n	81075c0 <__copybits+0x36>
 81075a6:	1aa3      	subs	r3, r4, r2
 81075a8:	3b11      	subs	r3, #17
 81075aa:	f023 0303 	bic.w	r3, r3, #3
 81075ae:	3211      	adds	r2, #17
 81075b0:	42a2      	cmp	r2, r4
 81075b2:	bf88      	it	hi
 81075b4:	2300      	movhi	r3, #0
 81075b6:	4418      	add	r0, r3
 81075b8:	2300      	movs	r3, #0
 81075ba:	4288      	cmp	r0, r1
 81075bc:	d305      	bcc.n	81075ca <__copybits+0x40>
 81075be:	bd70      	pop	{r4, r5, r6, pc}
 81075c0:	f853 6b04 	ldr.w	r6, [r3], #4
 81075c4:	f845 6f04 	str.w	r6, [r5, #4]!
 81075c8:	e7eb      	b.n	81075a2 <__copybits+0x18>
 81075ca:	f840 3b04 	str.w	r3, [r0], #4
 81075ce:	e7f4      	b.n	81075ba <__copybits+0x30>

081075d0 <__any_on>:
 81075d0:	f100 0214 	add.w	r2, r0, #20
 81075d4:	6900      	ldr	r0, [r0, #16]
 81075d6:	114b      	asrs	r3, r1, #5
 81075d8:	4298      	cmp	r0, r3
 81075da:	b510      	push	{r4, lr}
 81075dc:	db11      	blt.n	8107602 <__any_on+0x32>
 81075de:	dd0a      	ble.n	81075f6 <__any_on+0x26>
 81075e0:	f011 011f 	ands.w	r1, r1, #31
 81075e4:	d007      	beq.n	81075f6 <__any_on+0x26>
 81075e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 81075ea:	fa24 f001 	lsr.w	r0, r4, r1
 81075ee:	fa00 f101 	lsl.w	r1, r0, r1
 81075f2:	428c      	cmp	r4, r1
 81075f4:	d10b      	bne.n	810760e <__any_on+0x3e>
 81075f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 81075fa:	4293      	cmp	r3, r2
 81075fc:	d803      	bhi.n	8107606 <__any_on+0x36>
 81075fe:	2000      	movs	r0, #0
 8107600:	bd10      	pop	{r4, pc}
 8107602:	4603      	mov	r3, r0
 8107604:	e7f7      	b.n	81075f6 <__any_on+0x26>
 8107606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810760a:	2900      	cmp	r1, #0
 810760c:	d0f5      	beq.n	81075fa <__any_on+0x2a>
 810760e:	2001      	movs	r0, #1
 8107610:	e7f6      	b.n	8107600 <__any_on+0x30>

08107612 <_calloc_r>:
 8107612:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107614:	fba1 2402 	umull	r2, r4, r1, r2
 8107618:	b94c      	cbnz	r4, 810762e <_calloc_r+0x1c>
 810761a:	4611      	mov	r1, r2
 810761c:	9201      	str	r2, [sp, #4]
 810761e:	f000 f87b 	bl	8107718 <_malloc_r>
 8107622:	9a01      	ldr	r2, [sp, #4]
 8107624:	4605      	mov	r5, r0
 8107626:	b930      	cbnz	r0, 8107636 <_calloc_r+0x24>
 8107628:	4628      	mov	r0, r5
 810762a:	b003      	add	sp, #12
 810762c:	bd30      	pop	{r4, r5, pc}
 810762e:	220c      	movs	r2, #12
 8107630:	6002      	str	r2, [r0, #0]
 8107632:	2500      	movs	r5, #0
 8107634:	e7f8      	b.n	8107628 <_calloc_r+0x16>
 8107636:	4621      	mov	r1, r4
 8107638:	f7fc fabe 	bl	8103bb8 <memset>
 810763c:	e7f4      	b.n	8107628 <_calloc_r+0x16>
	...

08107640 <_free_r>:
 8107640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107642:	2900      	cmp	r1, #0
 8107644:	d044      	beq.n	81076d0 <_free_r+0x90>
 8107646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810764a:	9001      	str	r0, [sp, #4]
 810764c:	2b00      	cmp	r3, #0
 810764e:	f1a1 0404 	sub.w	r4, r1, #4
 8107652:	bfb8      	it	lt
 8107654:	18e4      	addlt	r4, r4, r3
 8107656:	f000 fe6f 	bl	8108338 <__malloc_lock>
 810765a:	4a1e      	ldr	r2, [pc, #120]	; (81076d4 <_free_r+0x94>)
 810765c:	9801      	ldr	r0, [sp, #4]
 810765e:	6813      	ldr	r3, [r2, #0]
 8107660:	b933      	cbnz	r3, 8107670 <_free_r+0x30>
 8107662:	6063      	str	r3, [r4, #4]
 8107664:	6014      	str	r4, [r2, #0]
 8107666:	b003      	add	sp, #12
 8107668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810766c:	f000 be6a 	b.w	8108344 <__malloc_unlock>
 8107670:	42a3      	cmp	r3, r4
 8107672:	d908      	bls.n	8107686 <_free_r+0x46>
 8107674:	6825      	ldr	r5, [r4, #0]
 8107676:	1961      	adds	r1, r4, r5
 8107678:	428b      	cmp	r3, r1
 810767a:	bf01      	itttt	eq
 810767c:	6819      	ldreq	r1, [r3, #0]
 810767e:	685b      	ldreq	r3, [r3, #4]
 8107680:	1949      	addeq	r1, r1, r5
 8107682:	6021      	streq	r1, [r4, #0]
 8107684:	e7ed      	b.n	8107662 <_free_r+0x22>
 8107686:	461a      	mov	r2, r3
 8107688:	685b      	ldr	r3, [r3, #4]
 810768a:	b10b      	cbz	r3, 8107690 <_free_r+0x50>
 810768c:	42a3      	cmp	r3, r4
 810768e:	d9fa      	bls.n	8107686 <_free_r+0x46>
 8107690:	6811      	ldr	r1, [r2, #0]
 8107692:	1855      	adds	r5, r2, r1
 8107694:	42a5      	cmp	r5, r4
 8107696:	d10b      	bne.n	81076b0 <_free_r+0x70>
 8107698:	6824      	ldr	r4, [r4, #0]
 810769a:	4421      	add	r1, r4
 810769c:	1854      	adds	r4, r2, r1
 810769e:	42a3      	cmp	r3, r4
 81076a0:	6011      	str	r1, [r2, #0]
 81076a2:	d1e0      	bne.n	8107666 <_free_r+0x26>
 81076a4:	681c      	ldr	r4, [r3, #0]
 81076a6:	685b      	ldr	r3, [r3, #4]
 81076a8:	6053      	str	r3, [r2, #4]
 81076aa:	4421      	add	r1, r4
 81076ac:	6011      	str	r1, [r2, #0]
 81076ae:	e7da      	b.n	8107666 <_free_r+0x26>
 81076b0:	d902      	bls.n	81076b8 <_free_r+0x78>
 81076b2:	230c      	movs	r3, #12
 81076b4:	6003      	str	r3, [r0, #0]
 81076b6:	e7d6      	b.n	8107666 <_free_r+0x26>
 81076b8:	6825      	ldr	r5, [r4, #0]
 81076ba:	1961      	adds	r1, r4, r5
 81076bc:	428b      	cmp	r3, r1
 81076be:	bf04      	itt	eq
 81076c0:	6819      	ldreq	r1, [r3, #0]
 81076c2:	685b      	ldreq	r3, [r3, #4]
 81076c4:	6063      	str	r3, [r4, #4]
 81076c6:	bf04      	itt	eq
 81076c8:	1949      	addeq	r1, r1, r5
 81076ca:	6021      	streq	r1, [r4, #0]
 81076cc:	6054      	str	r4, [r2, #4]
 81076ce:	e7ca      	b.n	8107666 <_free_r+0x26>
 81076d0:	b003      	add	sp, #12
 81076d2:	bd30      	pop	{r4, r5, pc}
 81076d4:	10000328 	.word	0x10000328

081076d8 <sbrk_aligned>:
 81076d8:	b570      	push	{r4, r5, r6, lr}
 81076da:	4e0e      	ldr	r6, [pc, #56]	; (8107714 <sbrk_aligned+0x3c>)
 81076dc:	460c      	mov	r4, r1
 81076de:	6831      	ldr	r1, [r6, #0]
 81076e0:	4605      	mov	r5, r0
 81076e2:	b911      	cbnz	r1, 81076ea <sbrk_aligned+0x12>
 81076e4:	f000 fb4c 	bl	8107d80 <_sbrk_r>
 81076e8:	6030      	str	r0, [r6, #0]
 81076ea:	4621      	mov	r1, r4
 81076ec:	4628      	mov	r0, r5
 81076ee:	f000 fb47 	bl	8107d80 <_sbrk_r>
 81076f2:	1c43      	adds	r3, r0, #1
 81076f4:	d00a      	beq.n	810770c <sbrk_aligned+0x34>
 81076f6:	1cc4      	adds	r4, r0, #3
 81076f8:	f024 0403 	bic.w	r4, r4, #3
 81076fc:	42a0      	cmp	r0, r4
 81076fe:	d007      	beq.n	8107710 <sbrk_aligned+0x38>
 8107700:	1a21      	subs	r1, r4, r0
 8107702:	4628      	mov	r0, r5
 8107704:	f000 fb3c 	bl	8107d80 <_sbrk_r>
 8107708:	3001      	adds	r0, #1
 810770a:	d101      	bne.n	8107710 <sbrk_aligned+0x38>
 810770c:	f04f 34ff 	mov.w	r4, #4294967295
 8107710:	4620      	mov	r0, r4
 8107712:	bd70      	pop	{r4, r5, r6, pc}
 8107714:	1000032c 	.word	0x1000032c

08107718 <_malloc_r>:
 8107718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810771c:	1ccd      	adds	r5, r1, #3
 810771e:	f025 0503 	bic.w	r5, r5, #3
 8107722:	3508      	adds	r5, #8
 8107724:	2d0c      	cmp	r5, #12
 8107726:	bf38      	it	cc
 8107728:	250c      	movcc	r5, #12
 810772a:	2d00      	cmp	r5, #0
 810772c:	4607      	mov	r7, r0
 810772e:	db01      	blt.n	8107734 <_malloc_r+0x1c>
 8107730:	42a9      	cmp	r1, r5
 8107732:	d905      	bls.n	8107740 <_malloc_r+0x28>
 8107734:	230c      	movs	r3, #12
 8107736:	603b      	str	r3, [r7, #0]
 8107738:	2600      	movs	r6, #0
 810773a:	4630      	mov	r0, r6
 810773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107740:	4e2e      	ldr	r6, [pc, #184]	; (81077fc <_malloc_r+0xe4>)
 8107742:	f000 fdf9 	bl	8108338 <__malloc_lock>
 8107746:	6833      	ldr	r3, [r6, #0]
 8107748:	461c      	mov	r4, r3
 810774a:	bb34      	cbnz	r4, 810779a <_malloc_r+0x82>
 810774c:	4629      	mov	r1, r5
 810774e:	4638      	mov	r0, r7
 8107750:	f7ff ffc2 	bl	81076d8 <sbrk_aligned>
 8107754:	1c43      	adds	r3, r0, #1
 8107756:	4604      	mov	r4, r0
 8107758:	d14d      	bne.n	81077f6 <_malloc_r+0xde>
 810775a:	6834      	ldr	r4, [r6, #0]
 810775c:	4626      	mov	r6, r4
 810775e:	2e00      	cmp	r6, #0
 8107760:	d140      	bne.n	81077e4 <_malloc_r+0xcc>
 8107762:	6823      	ldr	r3, [r4, #0]
 8107764:	4631      	mov	r1, r6
 8107766:	4638      	mov	r0, r7
 8107768:	eb04 0803 	add.w	r8, r4, r3
 810776c:	f000 fb08 	bl	8107d80 <_sbrk_r>
 8107770:	4580      	cmp	r8, r0
 8107772:	d13a      	bne.n	81077ea <_malloc_r+0xd2>
 8107774:	6821      	ldr	r1, [r4, #0]
 8107776:	3503      	adds	r5, #3
 8107778:	1a6d      	subs	r5, r5, r1
 810777a:	f025 0503 	bic.w	r5, r5, #3
 810777e:	3508      	adds	r5, #8
 8107780:	2d0c      	cmp	r5, #12
 8107782:	bf38      	it	cc
 8107784:	250c      	movcc	r5, #12
 8107786:	4629      	mov	r1, r5
 8107788:	4638      	mov	r0, r7
 810778a:	f7ff ffa5 	bl	81076d8 <sbrk_aligned>
 810778e:	3001      	adds	r0, #1
 8107790:	d02b      	beq.n	81077ea <_malloc_r+0xd2>
 8107792:	6823      	ldr	r3, [r4, #0]
 8107794:	442b      	add	r3, r5
 8107796:	6023      	str	r3, [r4, #0]
 8107798:	e00e      	b.n	81077b8 <_malloc_r+0xa0>
 810779a:	6822      	ldr	r2, [r4, #0]
 810779c:	1b52      	subs	r2, r2, r5
 810779e:	d41e      	bmi.n	81077de <_malloc_r+0xc6>
 81077a0:	2a0b      	cmp	r2, #11
 81077a2:	d916      	bls.n	81077d2 <_malloc_r+0xba>
 81077a4:	1961      	adds	r1, r4, r5
 81077a6:	42a3      	cmp	r3, r4
 81077a8:	6025      	str	r5, [r4, #0]
 81077aa:	bf18      	it	ne
 81077ac:	6059      	strne	r1, [r3, #4]
 81077ae:	6863      	ldr	r3, [r4, #4]
 81077b0:	bf08      	it	eq
 81077b2:	6031      	streq	r1, [r6, #0]
 81077b4:	5162      	str	r2, [r4, r5]
 81077b6:	604b      	str	r3, [r1, #4]
 81077b8:	4638      	mov	r0, r7
 81077ba:	f104 060b 	add.w	r6, r4, #11
 81077be:	f000 fdc1 	bl	8108344 <__malloc_unlock>
 81077c2:	f026 0607 	bic.w	r6, r6, #7
 81077c6:	1d23      	adds	r3, r4, #4
 81077c8:	1af2      	subs	r2, r6, r3
 81077ca:	d0b6      	beq.n	810773a <_malloc_r+0x22>
 81077cc:	1b9b      	subs	r3, r3, r6
 81077ce:	50a3      	str	r3, [r4, r2]
 81077d0:	e7b3      	b.n	810773a <_malloc_r+0x22>
 81077d2:	6862      	ldr	r2, [r4, #4]
 81077d4:	42a3      	cmp	r3, r4
 81077d6:	bf0c      	ite	eq
 81077d8:	6032      	streq	r2, [r6, #0]
 81077da:	605a      	strne	r2, [r3, #4]
 81077dc:	e7ec      	b.n	81077b8 <_malloc_r+0xa0>
 81077de:	4623      	mov	r3, r4
 81077e0:	6864      	ldr	r4, [r4, #4]
 81077e2:	e7b2      	b.n	810774a <_malloc_r+0x32>
 81077e4:	4634      	mov	r4, r6
 81077e6:	6876      	ldr	r6, [r6, #4]
 81077e8:	e7b9      	b.n	810775e <_malloc_r+0x46>
 81077ea:	230c      	movs	r3, #12
 81077ec:	603b      	str	r3, [r7, #0]
 81077ee:	4638      	mov	r0, r7
 81077f0:	f000 fda8 	bl	8108344 <__malloc_unlock>
 81077f4:	e7a1      	b.n	810773a <_malloc_r+0x22>
 81077f6:	6025      	str	r5, [r4, #0]
 81077f8:	e7de      	b.n	81077b8 <_malloc_r+0xa0>
 81077fa:	bf00      	nop
 81077fc:	10000328 	.word	0x10000328

08107800 <__ssputs_r>:
 8107800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107804:	688e      	ldr	r6, [r1, #8]
 8107806:	429e      	cmp	r6, r3
 8107808:	4682      	mov	sl, r0
 810780a:	460c      	mov	r4, r1
 810780c:	4690      	mov	r8, r2
 810780e:	461f      	mov	r7, r3
 8107810:	d838      	bhi.n	8107884 <__ssputs_r+0x84>
 8107812:	898a      	ldrh	r2, [r1, #12]
 8107814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8107818:	d032      	beq.n	8107880 <__ssputs_r+0x80>
 810781a:	6825      	ldr	r5, [r4, #0]
 810781c:	6909      	ldr	r1, [r1, #16]
 810781e:	eba5 0901 	sub.w	r9, r5, r1
 8107822:	6965      	ldr	r5, [r4, #20]
 8107824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8107828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810782c:	3301      	adds	r3, #1
 810782e:	444b      	add	r3, r9
 8107830:	106d      	asrs	r5, r5, #1
 8107832:	429d      	cmp	r5, r3
 8107834:	bf38      	it	cc
 8107836:	461d      	movcc	r5, r3
 8107838:	0553      	lsls	r3, r2, #21
 810783a:	d531      	bpl.n	81078a0 <__ssputs_r+0xa0>
 810783c:	4629      	mov	r1, r5
 810783e:	f7ff ff6b 	bl	8107718 <_malloc_r>
 8107842:	4606      	mov	r6, r0
 8107844:	b950      	cbnz	r0, 810785c <__ssputs_r+0x5c>
 8107846:	230c      	movs	r3, #12
 8107848:	f8ca 3000 	str.w	r3, [sl]
 810784c:	89a3      	ldrh	r3, [r4, #12]
 810784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107852:	81a3      	strh	r3, [r4, #12]
 8107854:	f04f 30ff 	mov.w	r0, #4294967295
 8107858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810785c:	6921      	ldr	r1, [r4, #16]
 810785e:	464a      	mov	r2, r9
 8107860:	f7fc f99c 	bl	8103b9c <memcpy>
 8107864:	89a3      	ldrh	r3, [r4, #12]
 8107866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810786a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810786e:	81a3      	strh	r3, [r4, #12]
 8107870:	6126      	str	r6, [r4, #16]
 8107872:	6165      	str	r5, [r4, #20]
 8107874:	444e      	add	r6, r9
 8107876:	eba5 0509 	sub.w	r5, r5, r9
 810787a:	6026      	str	r6, [r4, #0]
 810787c:	60a5      	str	r5, [r4, #8]
 810787e:	463e      	mov	r6, r7
 8107880:	42be      	cmp	r6, r7
 8107882:	d900      	bls.n	8107886 <__ssputs_r+0x86>
 8107884:	463e      	mov	r6, r7
 8107886:	6820      	ldr	r0, [r4, #0]
 8107888:	4632      	mov	r2, r6
 810788a:	4641      	mov	r1, r8
 810788c:	f000 fd3a 	bl	8108304 <memmove>
 8107890:	68a3      	ldr	r3, [r4, #8]
 8107892:	1b9b      	subs	r3, r3, r6
 8107894:	60a3      	str	r3, [r4, #8]
 8107896:	6823      	ldr	r3, [r4, #0]
 8107898:	4433      	add	r3, r6
 810789a:	6023      	str	r3, [r4, #0]
 810789c:	2000      	movs	r0, #0
 810789e:	e7db      	b.n	8107858 <__ssputs_r+0x58>
 81078a0:	462a      	mov	r2, r5
 81078a2:	f000 fd55 	bl	8108350 <_realloc_r>
 81078a6:	4606      	mov	r6, r0
 81078a8:	2800      	cmp	r0, #0
 81078aa:	d1e1      	bne.n	8107870 <__ssputs_r+0x70>
 81078ac:	6921      	ldr	r1, [r4, #16]
 81078ae:	4650      	mov	r0, sl
 81078b0:	f7ff fec6 	bl	8107640 <_free_r>
 81078b4:	e7c7      	b.n	8107846 <__ssputs_r+0x46>
	...

081078b8 <_svfiprintf_r>:
 81078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81078bc:	4698      	mov	r8, r3
 81078be:	898b      	ldrh	r3, [r1, #12]
 81078c0:	061b      	lsls	r3, r3, #24
 81078c2:	b09d      	sub	sp, #116	; 0x74
 81078c4:	4607      	mov	r7, r0
 81078c6:	460d      	mov	r5, r1
 81078c8:	4614      	mov	r4, r2
 81078ca:	d50e      	bpl.n	81078ea <_svfiprintf_r+0x32>
 81078cc:	690b      	ldr	r3, [r1, #16]
 81078ce:	b963      	cbnz	r3, 81078ea <_svfiprintf_r+0x32>
 81078d0:	2140      	movs	r1, #64	; 0x40
 81078d2:	f7ff ff21 	bl	8107718 <_malloc_r>
 81078d6:	6028      	str	r0, [r5, #0]
 81078d8:	6128      	str	r0, [r5, #16]
 81078da:	b920      	cbnz	r0, 81078e6 <_svfiprintf_r+0x2e>
 81078dc:	230c      	movs	r3, #12
 81078de:	603b      	str	r3, [r7, #0]
 81078e0:	f04f 30ff 	mov.w	r0, #4294967295
 81078e4:	e0d1      	b.n	8107a8a <_svfiprintf_r+0x1d2>
 81078e6:	2340      	movs	r3, #64	; 0x40
 81078e8:	616b      	str	r3, [r5, #20]
 81078ea:	2300      	movs	r3, #0
 81078ec:	9309      	str	r3, [sp, #36]	; 0x24
 81078ee:	2320      	movs	r3, #32
 81078f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81078f4:	f8cd 800c 	str.w	r8, [sp, #12]
 81078f8:	2330      	movs	r3, #48	; 0x30
 81078fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8107aa4 <_svfiprintf_r+0x1ec>
 81078fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107902:	f04f 0901 	mov.w	r9, #1
 8107906:	4623      	mov	r3, r4
 8107908:	469a      	mov	sl, r3
 810790a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810790e:	b10a      	cbz	r2, 8107914 <_svfiprintf_r+0x5c>
 8107910:	2a25      	cmp	r2, #37	; 0x25
 8107912:	d1f9      	bne.n	8107908 <_svfiprintf_r+0x50>
 8107914:	ebba 0b04 	subs.w	fp, sl, r4
 8107918:	d00b      	beq.n	8107932 <_svfiprintf_r+0x7a>
 810791a:	465b      	mov	r3, fp
 810791c:	4622      	mov	r2, r4
 810791e:	4629      	mov	r1, r5
 8107920:	4638      	mov	r0, r7
 8107922:	f7ff ff6d 	bl	8107800 <__ssputs_r>
 8107926:	3001      	adds	r0, #1
 8107928:	f000 80aa 	beq.w	8107a80 <_svfiprintf_r+0x1c8>
 810792c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810792e:	445a      	add	r2, fp
 8107930:	9209      	str	r2, [sp, #36]	; 0x24
 8107932:	f89a 3000 	ldrb.w	r3, [sl]
 8107936:	2b00      	cmp	r3, #0
 8107938:	f000 80a2 	beq.w	8107a80 <_svfiprintf_r+0x1c8>
 810793c:	2300      	movs	r3, #0
 810793e:	f04f 32ff 	mov.w	r2, #4294967295
 8107942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107946:	f10a 0a01 	add.w	sl, sl, #1
 810794a:	9304      	str	r3, [sp, #16]
 810794c:	9307      	str	r3, [sp, #28]
 810794e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8107952:	931a      	str	r3, [sp, #104]	; 0x68
 8107954:	4654      	mov	r4, sl
 8107956:	2205      	movs	r2, #5
 8107958:	f814 1b01 	ldrb.w	r1, [r4], #1
 810795c:	4851      	ldr	r0, [pc, #324]	; (8107aa4 <_svfiprintf_r+0x1ec>)
 810795e:	f7f8 fcc7 	bl	81002f0 <memchr>
 8107962:	9a04      	ldr	r2, [sp, #16]
 8107964:	b9d8      	cbnz	r0, 810799e <_svfiprintf_r+0xe6>
 8107966:	06d0      	lsls	r0, r2, #27
 8107968:	bf44      	itt	mi
 810796a:	2320      	movmi	r3, #32
 810796c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107970:	0711      	lsls	r1, r2, #28
 8107972:	bf44      	itt	mi
 8107974:	232b      	movmi	r3, #43	; 0x2b
 8107976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810797a:	f89a 3000 	ldrb.w	r3, [sl]
 810797e:	2b2a      	cmp	r3, #42	; 0x2a
 8107980:	d015      	beq.n	81079ae <_svfiprintf_r+0xf6>
 8107982:	9a07      	ldr	r2, [sp, #28]
 8107984:	4654      	mov	r4, sl
 8107986:	2000      	movs	r0, #0
 8107988:	f04f 0c0a 	mov.w	ip, #10
 810798c:	4621      	mov	r1, r4
 810798e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107992:	3b30      	subs	r3, #48	; 0x30
 8107994:	2b09      	cmp	r3, #9
 8107996:	d94e      	bls.n	8107a36 <_svfiprintf_r+0x17e>
 8107998:	b1b0      	cbz	r0, 81079c8 <_svfiprintf_r+0x110>
 810799a:	9207      	str	r2, [sp, #28]
 810799c:	e014      	b.n	81079c8 <_svfiprintf_r+0x110>
 810799e:	eba0 0308 	sub.w	r3, r0, r8
 81079a2:	fa09 f303 	lsl.w	r3, r9, r3
 81079a6:	4313      	orrs	r3, r2
 81079a8:	9304      	str	r3, [sp, #16]
 81079aa:	46a2      	mov	sl, r4
 81079ac:	e7d2      	b.n	8107954 <_svfiprintf_r+0x9c>
 81079ae:	9b03      	ldr	r3, [sp, #12]
 81079b0:	1d19      	adds	r1, r3, #4
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	9103      	str	r1, [sp, #12]
 81079b6:	2b00      	cmp	r3, #0
 81079b8:	bfbb      	ittet	lt
 81079ba:	425b      	neglt	r3, r3
 81079bc:	f042 0202 	orrlt.w	r2, r2, #2
 81079c0:	9307      	strge	r3, [sp, #28]
 81079c2:	9307      	strlt	r3, [sp, #28]
 81079c4:	bfb8      	it	lt
 81079c6:	9204      	strlt	r2, [sp, #16]
 81079c8:	7823      	ldrb	r3, [r4, #0]
 81079ca:	2b2e      	cmp	r3, #46	; 0x2e
 81079cc:	d10c      	bne.n	81079e8 <_svfiprintf_r+0x130>
 81079ce:	7863      	ldrb	r3, [r4, #1]
 81079d0:	2b2a      	cmp	r3, #42	; 0x2a
 81079d2:	d135      	bne.n	8107a40 <_svfiprintf_r+0x188>
 81079d4:	9b03      	ldr	r3, [sp, #12]
 81079d6:	1d1a      	adds	r2, r3, #4
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	9203      	str	r2, [sp, #12]
 81079dc:	2b00      	cmp	r3, #0
 81079de:	bfb8      	it	lt
 81079e0:	f04f 33ff 	movlt.w	r3, #4294967295
 81079e4:	3402      	adds	r4, #2
 81079e6:	9305      	str	r3, [sp, #20]
 81079e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8107ab4 <_svfiprintf_r+0x1fc>
 81079ec:	7821      	ldrb	r1, [r4, #0]
 81079ee:	2203      	movs	r2, #3
 81079f0:	4650      	mov	r0, sl
 81079f2:	f7f8 fc7d 	bl	81002f0 <memchr>
 81079f6:	b140      	cbz	r0, 8107a0a <_svfiprintf_r+0x152>
 81079f8:	2340      	movs	r3, #64	; 0x40
 81079fa:	eba0 000a 	sub.w	r0, r0, sl
 81079fe:	fa03 f000 	lsl.w	r0, r3, r0
 8107a02:	9b04      	ldr	r3, [sp, #16]
 8107a04:	4303      	orrs	r3, r0
 8107a06:	3401      	adds	r4, #1
 8107a08:	9304      	str	r3, [sp, #16]
 8107a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107a0e:	4826      	ldr	r0, [pc, #152]	; (8107aa8 <_svfiprintf_r+0x1f0>)
 8107a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8107a14:	2206      	movs	r2, #6
 8107a16:	f7f8 fc6b 	bl	81002f0 <memchr>
 8107a1a:	2800      	cmp	r0, #0
 8107a1c:	d038      	beq.n	8107a90 <_svfiprintf_r+0x1d8>
 8107a1e:	4b23      	ldr	r3, [pc, #140]	; (8107aac <_svfiprintf_r+0x1f4>)
 8107a20:	bb1b      	cbnz	r3, 8107a6a <_svfiprintf_r+0x1b2>
 8107a22:	9b03      	ldr	r3, [sp, #12]
 8107a24:	3307      	adds	r3, #7
 8107a26:	f023 0307 	bic.w	r3, r3, #7
 8107a2a:	3308      	adds	r3, #8
 8107a2c:	9303      	str	r3, [sp, #12]
 8107a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107a30:	4433      	add	r3, r6
 8107a32:	9309      	str	r3, [sp, #36]	; 0x24
 8107a34:	e767      	b.n	8107906 <_svfiprintf_r+0x4e>
 8107a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8107a3a:	460c      	mov	r4, r1
 8107a3c:	2001      	movs	r0, #1
 8107a3e:	e7a5      	b.n	810798c <_svfiprintf_r+0xd4>
 8107a40:	2300      	movs	r3, #0
 8107a42:	3401      	adds	r4, #1
 8107a44:	9305      	str	r3, [sp, #20]
 8107a46:	4619      	mov	r1, r3
 8107a48:	f04f 0c0a 	mov.w	ip, #10
 8107a4c:	4620      	mov	r0, r4
 8107a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107a52:	3a30      	subs	r2, #48	; 0x30
 8107a54:	2a09      	cmp	r2, #9
 8107a56:	d903      	bls.n	8107a60 <_svfiprintf_r+0x1a8>
 8107a58:	2b00      	cmp	r3, #0
 8107a5a:	d0c5      	beq.n	81079e8 <_svfiprintf_r+0x130>
 8107a5c:	9105      	str	r1, [sp, #20]
 8107a5e:	e7c3      	b.n	81079e8 <_svfiprintf_r+0x130>
 8107a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8107a64:	4604      	mov	r4, r0
 8107a66:	2301      	movs	r3, #1
 8107a68:	e7f0      	b.n	8107a4c <_svfiprintf_r+0x194>
 8107a6a:	ab03      	add	r3, sp, #12
 8107a6c:	9300      	str	r3, [sp, #0]
 8107a6e:	462a      	mov	r2, r5
 8107a70:	4b0f      	ldr	r3, [pc, #60]	; (8107ab0 <_svfiprintf_r+0x1f8>)
 8107a72:	a904      	add	r1, sp, #16
 8107a74:	4638      	mov	r0, r7
 8107a76:	f7fc f947 	bl	8103d08 <_printf_float>
 8107a7a:	1c42      	adds	r2, r0, #1
 8107a7c:	4606      	mov	r6, r0
 8107a7e:	d1d6      	bne.n	8107a2e <_svfiprintf_r+0x176>
 8107a80:	89ab      	ldrh	r3, [r5, #12]
 8107a82:	065b      	lsls	r3, r3, #25
 8107a84:	f53f af2c 	bmi.w	81078e0 <_svfiprintf_r+0x28>
 8107a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107a8a:	b01d      	add	sp, #116	; 0x74
 8107a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107a90:	ab03      	add	r3, sp, #12
 8107a92:	9300      	str	r3, [sp, #0]
 8107a94:	462a      	mov	r2, r5
 8107a96:	4b06      	ldr	r3, [pc, #24]	; (8107ab0 <_svfiprintf_r+0x1f8>)
 8107a98:	a904      	add	r1, sp, #16
 8107a9a:	4638      	mov	r0, r7
 8107a9c:	f7fc fbd8 	bl	8104250 <_printf_i>
 8107aa0:	e7eb      	b.n	8107a7a <_svfiprintf_r+0x1c2>
 8107aa2:	bf00      	nop
 8107aa4:	081089c4 	.word	0x081089c4
 8107aa8:	081089ce 	.word	0x081089ce
 8107aac:	08103d09 	.word	0x08103d09
 8107ab0:	08107801 	.word	0x08107801
 8107ab4:	081089ca 	.word	0x081089ca

08107ab8 <__sfputc_r>:
 8107ab8:	6893      	ldr	r3, [r2, #8]
 8107aba:	3b01      	subs	r3, #1
 8107abc:	2b00      	cmp	r3, #0
 8107abe:	b410      	push	{r4}
 8107ac0:	6093      	str	r3, [r2, #8]
 8107ac2:	da08      	bge.n	8107ad6 <__sfputc_r+0x1e>
 8107ac4:	6994      	ldr	r4, [r2, #24]
 8107ac6:	42a3      	cmp	r3, r4
 8107ac8:	db01      	blt.n	8107ace <__sfputc_r+0x16>
 8107aca:	290a      	cmp	r1, #10
 8107acc:	d103      	bne.n	8107ad6 <__sfputc_r+0x1e>
 8107ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107ad2:	f000 b9bd 	b.w	8107e50 <__swbuf_r>
 8107ad6:	6813      	ldr	r3, [r2, #0]
 8107ad8:	1c58      	adds	r0, r3, #1
 8107ada:	6010      	str	r0, [r2, #0]
 8107adc:	7019      	strb	r1, [r3, #0]
 8107ade:	4608      	mov	r0, r1
 8107ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107ae4:	4770      	bx	lr

08107ae6 <__sfputs_r>:
 8107ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107ae8:	4606      	mov	r6, r0
 8107aea:	460f      	mov	r7, r1
 8107aec:	4614      	mov	r4, r2
 8107aee:	18d5      	adds	r5, r2, r3
 8107af0:	42ac      	cmp	r4, r5
 8107af2:	d101      	bne.n	8107af8 <__sfputs_r+0x12>
 8107af4:	2000      	movs	r0, #0
 8107af6:	e007      	b.n	8107b08 <__sfputs_r+0x22>
 8107af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107afc:	463a      	mov	r2, r7
 8107afe:	4630      	mov	r0, r6
 8107b00:	f7ff ffda 	bl	8107ab8 <__sfputc_r>
 8107b04:	1c43      	adds	r3, r0, #1
 8107b06:	d1f3      	bne.n	8107af0 <__sfputs_r+0xa>
 8107b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107b0c <_vfiprintf_r>:
 8107b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b10:	460d      	mov	r5, r1
 8107b12:	b09d      	sub	sp, #116	; 0x74
 8107b14:	4614      	mov	r4, r2
 8107b16:	4698      	mov	r8, r3
 8107b18:	4606      	mov	r6, r0
 8107b1a:	b118      	cbz	r0, 8107b24 <_vfiprintf_r+0x18>
 8107b1c:	6983      	ldr	r3, [r0, #24]
 8107b1e:	b90b      	cbnz	r3, 8107b24 <_vfiprintf_r+0x18>
 8107b20:	f7fe fc88 	bl	8106434 <__sinit>
 8107b24:	4b89      	ldr	r3, [pc, #548]	; (8107d4c <_vfiprintf_r+0x240>)
 8107b26:	429d      	cmp	r5, r3
 8107b28:	d11b      	bne.n	8107b62 <_vfiprintf_r+0x56>
 8107b2a:	6875      	ldr	r5, [r6, #4]
 8107b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107b2e:	07d9      	lsls	r1, r3, #31
 8107b30:	d405      	bmi.n	8107b3e <_vfiprintf_r+0x32>
 8107b32:	89ab      	ldrh	r3, [r5, #12]
 8107b34:	059a      	lsls	r2, r3, #22
 8107b36:	d402      	bmi.n	8107b3e <_vfiprintf_r+0x32>
 8107b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107b3a:	f7ff f88c 	bl	8106c56 <__retarget_lock_acquire_recursive>
 8107b3e:	89ab      	ldrh	r3, [r5, #12]
 8107b40:	071b      	lsls	r3, r3, #28
 8107b42:	d501      	bpl.n	8107b48 <_vfiprintf_r+0x3c>
 8107b44:	692b      	ldr	r3, [r5, #16]
 8107b46:	b9eb      	cbnz	r3, 8107b84 <_vfiprintf_r+0x78>
 8107b48:	4629      	mov	r1, r5
 8107b4a:	4630      	mov	r0, r6
 8107b4c:	f000 f9f2 	bl	8107f34 <__swsetup_r>
 8107b50:	b1c0      	cbz	r0, 8107b84 <_vfiprintf_r+0x78>
 8107b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107b54:	07dc      	lsls	r4, r3, #31
 8107b56:	d50e      	bpl.n	8107b76 <_vfiprintf_r+0x6a>
 8107b58:	f04f 30ff 	mov.w	r0, #4294967295
 8107b5c:	b01d      	add	sp, #116	; 0x74
 8107b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107b62:	4b7b      	ldr	r3, [pc, #492]	; (8107d50 <_vfiprintf_r+0x244>)
 8107b64:	429d      	cmp	r5, r3
 8107b66:	d101      	bne.n	8107b6c <_vfiprintf_r+0x60>
 8107b68:	68b5      	ldr	r5, [r6, #8]
 8107b6a:	e7df      	b.n	8107b2c <_vfiprintf_r+0x20>
 8107b6c:	4b79      	ldr	r3, [pc, #484]	; (8107d54 <_vfiprintf_r+0x248>)
 8107b6e:	429d      	cmp	r5, r3
 8107b70:	bf08      	it	eq
 8107b72:	68f5      	ldreq	r5, [r6, #12]
 8107b74:	e7da      	b.n	8107b2c <_vfiprintf_r+0x20>
 8107b76:	89ab      	ldrh	r3, [r5, #12]
 8107b78:	0598      	lsls	r0, r3, #22
 8107b7a:	d4ed      	bmi.n	8107b58 <_vfiprintf_r+0x4c>
 8107b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107b7e:	f7ff f86b 	bl	8106c58 <__retarget_lock_release_recursive>
 8107b82:	e7e9      	b.n	8107b58 <_vfiprintf_r+0x4c>
 8107b84:	2300      	movs	r3, #0
 8107b86:	9309      	str	r3, [sp, #36]	; 0x24
 8107b88:	2320      	movs	r3, #32
 8107b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8107b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8107b92:	2330      	movs	r3, #48	; 0x30
 8107b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8107d58 <_vfiprintf_r+0x24c>
 8107b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107b9c:	f04f 0901 	mov.w	r9, #1
 8107ba0:	4623      	mov	r3, r4
 8107ba2:	469a      	mov	sl, r3
 8107ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107ba8:	b10a      	cbz	r2, 8107bae <_vfiprintf_r+0xa2>
 8107baa:	2a25      	cmp	r2, #37	; 0x25
 8107bac:	d1f9      	bne.n	8107ba2 <_vfiprintf_r+0x96>
 8107bae:	ebba 0b04 	subs.w	fp, sl, r4
 8107bb2:	d00b      	beq.n	8107bcc <_vfiprintf_r+0xc0>
 8107bb4:	465b      	mov	r3, fp
 8107bb6:	4622      	mov	r2, r4
 8107bb8:	4629      	mov	r1, r5
 8107bba:	4630      	mov	r0, r6
 8107bbc:	f7ff ff93 	bl	8107ae6 <__sfputs_r>
 8107bc0:	3001      	adds	r0, #1
 8107bc2:	f000 80aa 	beq.w	8107d1a <_vfiprintf_r+0x20e>
 8107bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8107bc8:	445a      	add	r2, fp
 8107bca:	9209      	str	r2, [sp, #36]	; 0x24
 8107bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8107bd0:	2b00      	cmp	r3, #0
 8107bd2:	f000 80a2 	beq.w	8107d1a <_vfiprintf_r+0x20e>
 8107bd6:	2300      	movs	r3, #0
 8107bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8107bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107be0:	f10a 0a01 	add.w	sl, sl, #1
 8107be4:	9304      	str	r3, [sp, #16]
 8107be6:	9307      	str	r3, [sp, #28]
 8107be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8107bec:	931a      	str	r3, [sp, #104]	; 0x68
 8107bee:	4654      	mov	r4, sl
 8107bf0:	2205      	movs	r2, #5
 8107bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107bf6:	4858      	ldr	r0, [pc, #352]	; (8107d58 <_vfiprintf_r+0x24c>)
 8107bf8:	f7f8 fb7a 	bl	81002f0 <memchr>
 8107bfc:	9a04      	ldr	r2, [sp, #16]
 8107bfe:	b9d8      	cbnz	r0, 8107c38 <_vfiprintf_r+0x12c>
 8107c00:	06d1      	lsls	r1, r2, #27
 8107c02:	bf44      	itt	mi
 8107c04:	2320      	movmi	r3, #32
 8107c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107c0a:	0713      	lsls	r3, r2, #28
 8107c0c:	bf44      	itt	mi
 8107c0e:	232b      	movmi	r3, #43	; 0x2b
 8107c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107c14:	f89a 3000 	ldrb.w	r3, [sl]
 8107c18:	2b2a      	cmp	r3, #42	; 0x2a
 8107c1a:	d015      	beq.n	8107c48 <_vfiprintf_r+0x13c>
 8107c1c:	9a07      	ldr	r2, [sp, #28]
 8107c1e:	4654      	mov	r4, sl
 8107c20:	2000      	movs	r0, #0
 8107c22:	f04f 0c0a 	mov.w	ip, #10
 8107c26:	4621      	mov	r1, r4
 8107c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107c2c:	3b30      	subs	r3, #48	; 0x30
 8107c2e:	2b09      	cmp	r3, #9
 8107c30:	d94e      	bls.n	8107cd0 <_vfiprintf_r+0x1c4>
 8107c32:	b1b0      	cbz	r0, 8107c62 <_vfiprintf_r+0x156>
 8107c34:	9207      	str	r2, [sp, #28]
 8107c36:	e014      	b.n	8107c62 <_vfiprintf_r+0x156>
 8107c38:	eba0 0308 	sub.w	r3, r0, r8
 8107c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8107c40:	4313      	orrs	r3, r2
 8107c42:	9304      	str	r3, [sp, #16]
 8107c44:	46a2      	mov	sl, r4
 8107c46:	e7d2      	b.n	8107bee <_vfiprintf_r+0xe2>
 8107c48:	9b03      	ldr	r3, [sp, #12]
 8107c4a:	1d19      	adds	r1, r3, #4
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	9103      	str	r1, [sp, #12]
 8107c50:	2b00      	cmp	r3, #0
 8107c52:	bfbb      	ittet	lt
 8107c54:	425b      	neglt	r3, r3
 8107c56:	f042 0202 	orrlt.w	r2, r2, #2
 8107c5a:	9307      	strge	r3, [sp, #28]
 8107c5c:	9307      	strlt	r3, [sp, #28]
 8107c5e:	bfb8      	it	lt
 8107c60:	9204      	strlt	r2, [sp, #16]
 8107c62:	7823      	ldrb	r3, [r4, #0]
 8107c64:	2b2e      	cmp	r3, #46	; 0x2e
 8107c66:	d10c      	bne.n	8107c82 <_vfiprintf_r+0x176>
 8107c68:	7863      	ldrb	r3, [r4, #1]
 8107c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8107c6c:	d135      	bne.n	8107cda <_vfiprintf_r+0x1ce>
 8107c6e:	9b03      	ldr	r3, [sp, #12]
 8107c70:	1d1a      	adds	r2, r3, #4
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	9203      	str	r2, [sp, #12]
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	bfb8      	it	lt
 8107c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8107c7e:	3402      	adds	r4, #2
 8107c80:	9305      	str	r3, [sp, #20]
 8107c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8107d68 <_vfiprintf_r+0x25c>
 8107c86:	7821      	ldrb	r1, [r4, #0]
 8107c88:	2203      	movs	r2, #3
 8107c8a:	4650      	mov	r0, sl
 8107c8c:	f7f8 fb30 	bl	81002f0 <memchr>
 8107c90:	b140      	cbz	r0, 8107ca4 <_vfiprintf_r+0x198>
 8107c92:	2340      	movs	r3, #64	; 0x40
 8107c94:	eba0 000a 	sub.w	r0, r0, sl
 8107c98:	fa03 f000 	lsl.w	r0, r3, r0
 8107c9c:	9b04      	ldr	r3, [sp, #16]
 8107c9e:	4303      	orrs	r3, r0
 8107ca0:	3401      	adds	r4, #1
 8107ca2:	9304      	str	r3, [sp, #16]
 8107ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107ca8:	482c      	ldr	r0, [pc, #176]	; (8107d5c <_vfiprintf_r+0x250>)
 8107caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8107cae:	2206      	movs	r2, #6
 8107cb0:	f7f8 fb1e 	bl	81002f0 <memchr>
 8107cb4:	2800      	cmp	r0, #0
 8107cb6:	d03f      	beq.n	8107d38 <_vfiprintf_r+0x22c>
 8107cb8:	4b29      	ldr	r3, [pc, #164]	; (8107d60 <_vfiprintf_r+0x254>)
 8107cba:	bb1b      	cbnz	r3, 8107d04 <_vfiprintf_r+0x1f8>
 8107cbc:	9b03      	ldr	r3, [sp, #12]
 8107cbe:	3307      	adds	r3, #7
 8107cc0:	f023 0307 	bic.w	r3, r3, #7
 8107cc4:	3308      	adds	r3, #8
 8107cc6:	9303      	str	r3, [sp, #12]
 8107cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107cca:	443b      	add	r3, r7
 8107ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8107cce:	e767      	b.n	8107ba0 <_vfiprintf_r+0x94>
 8107cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8107cd4:	460c      	mov	r4, r1
 8107cd6:	2001      	movs	r0, #1
 8107cd8:	e7a5      	b.n	8107c26 <_vfiprintf_r+0x11a>
 8107cda:	2300      	movs	r3, #0
 8107cdc:	3401      	adds	r4, #1
 8107cde:	9305      	str	r3, [sp, #20]
 8107ce0:	4619      	mov	r1, r3
 8107ce2:	f04f 0c0a 	mov.w	ip, #10
 8107ce6:	4620      	mov	r0, r4
 8107ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107cec:	3a30      	subs	r2, #48	; 0x30
 8107cee:	2a09      	cmp	r2, #9
 8107cf0:	d903      	bls.n	8107cfa <_vfiprintf_r+0x1ee>
 8107cf2:	2b00      	cmp	r3, #0
 8107cf4:	d0c5      	beq.n	8107c82 <_vfiprintf_r+0x176>
 8107cf6:	9105      	str	r1, [sp, #20]
 8107cf8:	e7c3      	b.n	8107c82 <_vfiprintf_r+0x176>
 8107cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8107cfe:	4604      	mov	r4, r0
 8107d00:	2301      	movs	r3, #1
 8107d02:	e7f0      	b.n	8107ce6 <_vfiprintf_r+0x1da>
 8107d04:	ab03      	add	r3, sp, #12
 8107d06:	9300      	str	r3, [sp, #0]
 8107d08:	462a      	mov	r2, r5
 8107d0a:	4b16      	ldr	r3, [pc, #88]	; (8107d64 <_vfiprintf_r+0x258>)
 8107d0c:	a904      	add	r1, sp, #16
 8107d0e:	4630      	mov	r0, r6
 8107d10:	f7fb fffa 	bl	8103d08 <_printf_float>
 8107d14:	4607      	mov	r7, r0
 8107d16:	1c78      	adds	r0, r7, #1
 8107d18:	d1d6      	bne.n	8107cc8 <_vfiprintf_r+0x1bc>
 8107d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107d1c:	07d9      	lsls	r1, r3, #31
 8107d1e:	d405      	bmi.n	8107d2c <_vfiprintf_r+0x220>
 8107d20:	89ab      	ldrh	r3, [r5, #12]
 8107d22:	059a      	lsls	r2, r3, #22
 8107d24:	d402      	bmi.n	8107d2c <_vfiprintf_r+0x220>
 8107d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107d28:	f7fe ff96 	bl	8106c58 <__retarget_lock_release_recursive>
 8107d2c:	89ab      	ldrh	r3, [r5, #12]
 8107d2e:	065b      	lsls	r3, r3, #25
 8107d30:	f53f af12 	bmi.w	8107b58 <_vfiprintf_r+0x4c>
 8107d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107d36:	e711      	b.n	8107b5c <_vfiprintf_r+0x50>
 8107d38:	ab03      	add	r3, sp, #12
 8107d3a:	9300      	str	r3, [sp, #0]
 8107d3c:	462a      	mov	r2, r5
 8107d3e:	4b09      	ldr	r3, [pc, #36]	; (8107d64 <_vfiprintf_r+0x258>)
 8107d40:	a904      	add	r1, sp, #16
 8107d42:	4630      	mov	r0, r6
 8107d44:	f7fc fa84 	bl	8104250 <_printf_i>
 8107d48:	e7e4      	b.n	8107d14 <_vfiprintf_r+0x208>
 8107d4a:	bf00      	nop
 8107d4c:	081087ac 	.word	0x081087ac
 8107d50:	081087cc 	.word	0x081087cc
 8107d54:	0810878c 	.word	0x0810878c
 8107d58:	081089c4 	.word	0x081089c4
 8107d5c:	081089ce 	.word	0x081089ce
 8107d60:	08103d09 	.word	0x08103d09
 8107d64:	08107ae7 	.word	0x08107ae7
 8107d68:	081089ca 	.word	0x081089ca
 8107d6c:	00000000 	.word	0x00000000

08107d70 <nan>:
 8107d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8107d78 <nan+0x8>
 8107d74:	4770      	bx	lr
 8107d76:	bf00      	nop
 8107d78:	00000000 	.word	0x00000000
 8107d7c:	7ff80000 	.word	0x7ff80000

08107d80 <_sbrk_r>:
 8107d80:	b538      	push	{r3, r4, r5, lr}
 8107d82:	4d06      	ldr	r5, [pc, #24]	; (8107d9c <_sbrk_r+0x1c>)
 8107d84:	2300      	movs	r3, #0
 8107d86:	4604      	mov	r4, r0
 8107d88:	4608      	mov	r0, r1
 8107d8a:	602b      	str	r3, [r5, #0]
 8107d8c:	f7f9 fad2 	bl	8101334 <_sbrk>
 8107d90:	1c43      	adds	r3, r0, #1
 8107d92:	d102      	bne.n	8107d9a <_sbrk_r+0x1a>
 8107d94:	682b      	ldr	r3, [r5, #0]
 8107d96:	b103      	cbz	r3, 8107d9a <_sbrk_r+0x1a>
 8107d98:	6023      	str	r3, [r4, #0]
 8107d9a:	bd38      	pop	{r3, r4, r5, pc}
 8107d9c:	10000330 	.word	0x10000330

08107da0 <__sread>:
 8107da0:	b510      	push	{r4, lr}
 8107da2:	460c      	mov	r4, r1
 8107da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107da8:	f000 fb02 	bl	81083b0 <_read_r>
 8107dac:	2800      	cmp	r0, #0
 8107dae:	bfab      	itete	ge
 8107db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107db2:	89a3      	ldrhlt	r3, [r4, #12]
 8107db4:	181b      	addge	r3, r3, r0
 8107db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8107dba:	bfac      	ite	ge
 8107dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8107dbe:	81a3      	strhlt	r3, [r4, #12]
 8107dc0:	bd10      	pop	{r4, pc}

08107dc2 <__swrite>:
 8107dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107dc6:	461f      	mov	r7, r3
 8107dc8:	898b      	ldrh	r3, [r1, #12]
 8107dca:	05db      	lsls	r3, r3, #23
 8107dcc:	4605      	mov	r5, r0
 8107dce:	460c      	mov	r4, r1
 8107dd0:	4616      	mov	r6, r2
 8107dd2:	d505      	bpl.n	8107de0 <__swrite+0x1e>
 8107dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107dd8:	2302      	movs	r3, #2
 8107dda:	2200      	movs	r2, #0
 8107ddc:	f000 fa1a 	bl	8108214 <_lseek_r>
 8107de0:	89a3      	ldrh	r3, [r4, #12]
 8107de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107dea:	81a3      	strh	r3, [r4, #12]
 8107dec:	4632      	mov	r2, r6
 8107dee:	463b      	mov	r3, r7
 8107df0:	4628      	mov	r0, r5
 8107df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107df6:	f000 b88b 	b.w	8107f10 <_write_r>

08107dfa <__sseek>:
 8107dfa:	b510      	push	{r4, lr}
 8107dfc:	460c      	mov	r4, r1
 8107dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e02:	f000 fa07 	bl	8108214 <_lseek_r>
 8107e06:	1c43      	adds	r3, r0, #1
 8107e08:	89a3      	ldrh	r3, [r4, #12]
 8107e0a:	bf15      	itete	ne
 8107e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8107e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8107e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8107e16:	81a3      	strheq	r3, [r4, #12]
 8107e18:	bf18      	it	ne
 8107e1a:	81a3      	strhne	r3, [r4, #12]
 8107e1c:	bd10      	pop	{r4, pc}

08107e1e <__sclose>:
 8107e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e22:	f000 b913 	b.w	810804c <_close_r>

08107e26 <strncmp>:
 8107e26:	b510      	push	{r4, lr}
 8107e28:	b17a      	cbz	r2, 8107e4a <strncmp+0x24>
 8107e2a:	4603      	mov	r3, r0
 8107e2c:	3901      	subs	r1, #1
 8107e2e:	1884      	adds	r4, r0, r2
 8107e30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8107e34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8107e38:	4290      	cmp	r0, r2
 8107e3a:	d101      	bne.n	8107e40 <strncmp+0x1a>
 8107e3c:	42a3      	cmp	r3, r4
 8107e3e:	d101      	bne.n	8107e44 <strncmp+0x1e>
 8107e40:	1a80      	subs	r0, r0, r2
 8107e42:	bd10      	pop	{r4, pc}
 8107e44:	2800      	cmp	r0, #0
 8107e46:	d1f3      	bne.n	8107e30 <strncmp+0xa>
 8107e48:	e7fa      	b.n	8107e40 <strncmp+0x1a>
 8107e4a:	4610      	mov	r0, r2
 8107e4c:	e7f9      	b.n	8107e42 <strncmp+0x1c>
	...

08107e50 <__swbuf_r>:
 8107e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107e52:	460e      	mov	r6, r1
 8107e54:	4614      	mov	r4, r2
 8107e56:	4605      	mov	r5, r0
 8107e58:	b118      	cbz	r0, 8107e62 <__swbuf_r+0x12>
 8107e5a:	6983      	ldr	r3, [r0, #24]
 8107e5c:	b90b      	cbnz	r3, 8107e62 <__swbuf_r+0x12>
 8107e5e:	f7fe fae9 	bl	8106434 <__sinit>
 8107e62:	4b21      	ldr	r3, [pc, #132]	; (8107ee8 <__swbuf_r+0x98>)
 8107e64:	429c      	cmp	r4, r3
 8107e66:	d12b      	bne.n	8107ec0 <__swbuf_r+0x70>
 8107e68:	686c      	ldr	r4, [r5, #4]
 8107e6a:	69a3      	ldr	r3, [r4, #24]
 8107e6c:	60a3      	str	r3, [r4, #8]
 8107e6e:	89a3      	ldrh	r3, [r4, #12]
 8107e70:	071a      	lsls	r2, r3, #28
 8107e72:	d52f      	bpl.n	8107ed4 <__swbuf_r+0x84>
 8107e74:	6923      	ldr	r3, [r4, #16]
 8107e76:	b36b      	cbz	r3, 8107ed4 <__swbuf_r+0x84>
 8107e78:	6923      	ldr	r3, [r4, #16]
 8107e7a:	6820      	ldr	r0, [r4, #0]
 8107e7c:	1ac0      	subs	r0, r0, r3
 8107e7e:	6963      	ldr	r3, [r4, #20]
 8107e80:	b2f6      	uxtb	r6, r6
 8107e82:	4283      	cmp	r3, r0
 8107e84:	4637      	mov	r7, r6
 8107e86:	dc04      	bgt.n	8107e92 <__swbuf_r+0x42>
 8107e88:	4621      	mov	r1, r4
 8107e8a:	4628      	mov	r0, r5
 8107e8c:	f000 f974 	bl	8108178 <_fflush_r>
 8107e90:	bb30      	cbnz	r0, 8107ee0 <__swbuf_r+0x90>
 8107e92:	68a3      	ldr	r3, [r4, #8]
 8107e94:	3b01      	subs	r3, #1
 8107e96:	60a3      	str	r3, [r4, #8]
 8107e98:	6823      	ldr	r3, [r4, #0]
 8107e9a:	1c5a      	adds	r2, r3, #1
 8107e9c:	6022      	str	r2, [r4, #0]
 8107e9e:	701e      	strb	r6, [r3, #0]
 8107ea0:	6963      	ldr	r3, [r4, #20]
 8107ea2:	3001      	adds	r0, #1
 8107ea4:	4283      	cmp	r3, r0
 8107ea6:	d004      	beq.n	8107eb2 <__swbuf_r+0x62>
 8107ea8:	89a3      	ldrh	r3, [r4, #12]
 8107eaa:	07db      	lsls	r3, r3, #31
 8107eac:	d506      	bpl.n	8107ebc <__swbuf_r+0x6c>
 8107eae:	2e0a      	cmp	r6, #10
 8107eb0:	d104      	bne.n	8107ebc <__swbuf_r+0x6c>
 8107eb2:	4621      	mov	r1, r4
 8107eb4:	4628      	mov	r0, r5
 8107eb6:	f000 f95f 	bl	8108178 <_fflush_r>
 8107eba:	b988      	cbnz	r0, 8107ee0 <__swbuf_r+0x90>
 8107ebc:	4638      	mov	r0, r7
 8107ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107ec0:	4b0a      	ldr	r3, [pc, #40]	; (8107eec <__swbuf_r+0x9c>)
 8107ec2:	429c      	cmp	r4, r3
 8107ec4:	d101      	bne.n	8107eca <__swbuf_r+0x7a>
 8107ec6:	68ac      	ldr	r4, [r5, #8]
 8107ec8:	e7cf      	b.n	8107e6a <__swbuf_r+0x1a>
 8107eca:	4b09      	ldr	r3, [pc, #36]	; (8107ef0 <__swbuf_r+0xa0>)
 8107ecc:	429c      	cmp	r4, r3
 8107ece:	bf08      	it	eq
 8107ed0:	68ec      	ldreq	r4, [r5, #12]
 8107ed2:	e7ca      	b.n	8107e6a <__swbuf_r+0x1a>
 8107ed4:	4621      	mov	r1, r4
 8107ed6:	4628      	mov	r0, r5
 8107ed8:	f000 f82c 	bl	8107f34 <__swsetup_r>
 8107edc:	2800      	cmp	r0, #0
 8107ede:	d0cb      	beq.n	8107e78 <__swbuf_r+0x28>
 8107ee0:	f04f 37ff 	mov.w	r7, #4294967295
 8107ee4:	e7ea      	b.n	8107ebc <__swbuf_r+0x6c>
 8107ee6:	bf00      	nop
 8107ee8:	081087ac 	.word	0x081087ac
 8107eec:	081087cc 	.word	0x081087cc
 8107ef0:	0810878c 	.word	0x0810878c

08107ef4 <__ascii_wctomb>:
 8107ef4:	b149      	cbz	r1, 8107f0a <__ascii_wctomb+0x16>
 8107ef6:	2aff      	cmp	r2, #255	; 0xff
 8107ef8:	bf85      	ittet	hi
 8107efa:	238a      	movhi	r3, #138	; 0x8a
 8107efc:	6003      	strhi	r3, [r0, #0]
 8107efe:	700a      	strbls	r2, [r1, #0]
 8107f00:	f04f 30ff 	movhi.w	r0, #4294967295
 8107f04:	bf98      	it	ls
 8107f06:	2001      	movls	r0, #1
 8107f08:	4770      	bx	lr
 8107f0a:	4608      	mov	r0, r1
 8107f0c:	4770      	bx	lr
	...

08107f10 <_write_r>:
 8107f10:	b538      	push	{r3, r4, r5, lr}
 8107f12:	4d07      	ldr	r5, [pc, #28]	; (8107f30 <_write_r+0x20>)
 8107f14:	4604      	mov	r4, r0
 8107f16:	4608      	mov	r0, r1
 8107f18:	4611      	mov	r1, r2
 8107f1a:	2200      	movs	r2, #0
 8107f1c:	602a      	str	r2, [r5, #0]
 8107f1e:	461a      	mov	r2, r3
 8107f20:	f7f9 f9b7 	bl	8101292 <_write>
 8107f24:	1c43      	adds	r3, r0, #1
 8107f26:	d102      	bne.n	8107f2e <_write_r+0x1e>
 8107f28:	682b      	ldr	r3, [r5, #0]
 8107f2a:	b103      	cbz	r3, 8107f2e <_write_r+0x1e>
 8107f2c:	6023      	str	r3, [r4, #0]
 8107f2e:	bd38      	pop	{r3, r4, r5, pc}
 8107f30:	10000330 	.word	0x10000330

08107f34 <__swsetup_r>:
 8107f34:	4b32      	ldr	r3, [pc, #200]	; (8108000 <__swsetup_r+0xcc>)
 8107f36:	b570      	push	{r4, r5, r6, lr}
 8107f38:	681d      	ldr	r5, [r3, #0]
 8107f3a:	4606      	mov	r6, r0
 8107f3c:	460c      	mov	r4, r1
 8107f3e:	b125      	cbz	r5, 8107f4a <__swsetup_r+0x16>
 8107f40:	69ab      	ldr	r3, [r5, #24]
 8107f42:	b913      	cbnz	r3, 8107f4a <__swsetup_r+0x16>
 8107f44:	4628      	mov	r0, r5
 8107f46:	f7fe fa75 	bl	8106434 <__sinit>
 8107f4a:	4b2e      	ldr	r3, [pc, #184]	; (8108004 <__swsetup_r+0xd0>)
 8107f4c:	429c      	cmp	r4, r3
 8107f4e:	d10f      	bne.n	8107f70 <__swsetup_r+0x3c>
 8107f50:	686c      	ldr	r4, [r5, #4]
 8107f52:	89a3      	ldrh	r3, [r4, #12]
 8107f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107f58:	0719      	lsls	r1, r3, #28
 8107f5a:	d42c      	bmi.n	8107fb6 <__swsetup_r+0x82>
 8107f5c:	06dd      	lsls	r5, r3, #27
 8107f5e:	d411      	bmi.n	8107f84 <__swsetup_r+0x50>
 8107f60:	2309      	movs	r3, #9
 8107f62:	6033      	str	r3, [r6, #0]
 8107f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8107f68:	81a3      	strh	r3, [r4, #12]
 8107f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8107f6e:	e03e      	b.n	8107fee <__swsetup_r+0xba>
 8107f70:	4b25      	ldr	r3, [pc, #148]	; (8108008 <__swsetup_r+0xd4>)
 8107f72:	429c      	cmp	r4, r3
 8107f74:	d101      	bne.n	8107f7a <__swsetup_r+0x46>
 8107f76:	68ac      	ldr	r4, [r5, #8]
 8107f78:	e7eb      	b.n	8107f52 <__swsetup_r+0x1e>
 8107f7a:	4b24      	ldr	r3, [pc, #144]	; (810800c <__swsetup_r+0xd8>)
 8107f7c:	429c      	cmp	r4, r3
 8107f7e:	bf08      	it	eq
 8107f80:	68ec      	ldreq	r4, [r5, #12]
 8107f82:	e7e6      	b.n	8107f52 <__swsetup_r+0x1e>
 8107f84:	0758      	lsls	r0, r3, #29
 8107f86:	d512      	bpl.n	8107fae <__swsetup_r+0x7a>
 8107f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107f8a:	b141      	cbz	r1, 8107f9e <__swsetup_r+0x6a>
 8107f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107f90:	4299      	cmp	r1, r3
 8107f92:	d002      	beq.n	8107f9a <__swsetup_r+0x66>
 8107f94:	4630      	mov	r0, r6
 8107f96:	f7ff fb53 	bl	8107640 <_free_r>
 8107f9a:	2300      	movs	r3, #0
 8107f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8107f9e:	89a3      	ldrh	r3, [r4, #12]
 8107fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107fa4:	81a3      	strh	r3, [r4, #12]
 8107fa6:	2300      	movs	r3, #0
 8107fa8:	6063      	str	r3, [r4, #4]
 8107faa:	6923      	ldr	r3, [r4, #16]
 8107fac:	6023      	str	r3, [r4, #0]
 8107fae:	89a3      	ldrh	r3, [r4, #12]
 8107fb0:	f043 0308 	orr.w	r3, r3, #8
 8107fb4:	81a3      	strh	r3, [r4, #12]
 8107fb6:	6923      	ldr	r3, [r4, #16]
 8107fb8:	b94b      	cbnz	r3, 8107fce <__swsetup_r+0x9a>
 8107fba:	89a3      	ldrh	r3, [r4, #12]
 8107fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8107fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107fc4:	d003      	beq.n	8107fce <__swsetup_r+0x9a>
 8107fc6:	4621      	mov	r1, r4
 8107fc8:	4630      	mov	r0, r6
 8107fca:	f000 f95b 	bl	8108284 <__smakebuf_r>
 8107fce:	89a0      	ldrh	r0, [r4, #12]
 8107fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107fd4:	f010 0301 	ands.w	r3, r0, #1
 8107fd8:	d00a      	beq.n	8107ff0 <__swsetup_r+0xbc>
 8107fda:	2300      	movs	r3, #0
 8107fdc:	60a3      	str	r3, [r4, #8]
 8107fde:	6963      	ldr	r3, [r4, #20]
 8107fe0:	425b      	negs	r3, r3
 8107fe2:	61a3      	str	r3, [r4, #24]
 8107fe4:	6923      	ldr	r3, [r4, #16]
 8107fe6:	b943      	cbnz	r3, 8107ffa <__swsetup_r+0xc6>
 8107fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8107fec:	d1ba      	bne.n	8107f64 <__swsetup_r+0x30>
 8107fee:	bd70      	pop	{r4, r5, r6, pc}
 8107ff0:	0781      	lsls	r1, r0, #30
 8107ff2:	bf58      	it	pl
 8107ff4:	6963      	ldrpl	r3, [r4, #20]
 8107ff6:	60a3      	str	r3, [r4, #8]
 8107ff8:	e7f4      	b.n	8107fe4 <__swsetup_r+0xb0>
 8107ffa:	2000      	movs	r0, #0
 8107ffc:	e7f7      	b.n	8107fee <__swsetup_r+0xba>
 8107ffe:	bf00      	nop
 8108000:	10000018 	.word	0x10000018
 8108004:	081087ac 	.word	0x081087ac
 8108008:	081087cc 	.word	0x081087cc
 810800c:	0810878c 	.word	0x0810878c

08108010 <__assert_func>:
 8108010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8108012:	4614      	mov	r4, r2
 8108014:	461a      	mov	r2, r3
 8108016:	4b09      	ldr	r3, [pc, #36]	; (810803c <__assert_func+0x2c>)
 8108018:	681b      	ldr	r3, [r3, #0]
 810801a:	4605      	mov	r5, r0
 810801c:	68d8      	ldr	r0, [r3, #12]
 810801e:	b14c      	cbz	r4, 8108034 <__assert_func+0x24>
 8108020:	4b07      	ldr	r3, [pc, #28]	; (8108040 <__assert_func+0x30>)
 8108022:	9100      	str	r1, [sp, #0]
 8108024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8108028:	4906      	ldr	r1, [pc, #24]	; (8108044 <__assert_func+0x34>)
 810802a:	462b      	mov	r3, r5
 810802c:	f000 f8e0 	bl	81081f0 <fiprintf>
 8108030:	f000 f9d0 	bl	81083d4 <abort>
 8108034:	4b04      	ldr	r3, [pc, #16]	; (8108048 <__assert_func+0x38>)
 8108036:	461c      	mov	r4, r3
 8108038:	e7f3      	b.n	8108022 <__assert_func+0x12>
 810803a:	bf00      	nop
 810803c:	10000018 	.word	0x10000018
 8108040:	081089d5 	.word	0x081089d5
 8108044:	081089e2 	.word	0x081089e2
 8108048:	08108a10 	.word	0x08108a10

0810804c <_close_r>:
 810804c:	b538      	push	{r3, r4, r5, lr}
 810804e:	4d06      	ldr	r5, [pc, #24]	; (8108068 <_close_r+0x1c>)
 8108050:	2300      	movs	r3, #0
 8108052:	4604      	mov	r4, r0
 8108054:	4608      	mov	r0, r1
 8108056:	602b      	str	r3, [r5, #0]
 8108058:	f7f9 f937 	bl	81012ca <_close>
 810805c:	1c43      	adds	r3, r0, #1
 810805e:	d102      	bne.n	8108066 <_close_r+0x1a>
 8108060:	682b      	ldr	r3, [r5, #0]
 8108062:	b103      	cbz	r3, 8108066 <_close_r+0x1a>
 8108064:	6023      	str	r3, [r4, #0]
 8108066:	bd38      	pop	{r3, r4, r5, pc}
 8108068:	10000330 	.word	0x10000330

0810806c <__sflush_r>:
 810806c:	898a      	ldrh	r2, [r1, #12]
 810806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108072:	4605      	mov	r5, r0
 8108074:	0710      	lsls	r0, r2, #28
 8108076:	460c      	mov	r4, r1
 8108078:	d458      	bmi.n	810812c <__sflush_r+0xc0>
 810807a:	684b      	ldr	r3, [r1, #4]
 810807c:	2b00      	cmp	r3, #0
 810807e:	dc05      	bgt.n	810808c <__sflush_r+0x20>
 8108080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8108082:	2b00      	cmp	r3, #0
 8108084:	dc02      	bgt.n	810808c <__sflush_r+0x20>
 8108086:	2000      	movs	r0, #0
 8108088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810808c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810808e:	2e00      	cmp	r6, #0
 8108090:	d0f9      	beq.n	8108086 <__sflush_r+0x1a>
 8108092:	2300      	movs	r3, #0
 8108094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8108098:	682f      	ldr	r7, [r5, #0]
 810809a:	602b      	str	r3, [r5, #0]
 810809c:	d032      	beq.n	8108104 <__sflush_r+0x98>
 810809e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81080a0:	89a3      	ldrh	r3, [r4, #12]
 81080a2:	075a      	lsls	r2, r3, #29
 81080a4:	d505      	bpl.n	81080b2 <__sflush_r+0x46>
 81080a6:	6863      	ldr	r3, [r4, #4]
 81080a8:	1ac0      	subs	r0, r0, r3
 81080aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81080ac:	b10b      	cbz	r3, 81080b2 <__sflush_r+0x46>
 81080ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81080b0:	1ac0      	subs	r0, r0, r3
 81080b2:	2300      	movs	r3, #0
 81080b4:	4602      	mov	r2, r0
 81080b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81080b8:	6a21      	ldr	r1, [r4, #32]
 81080ba:	4628      	mov	r0, r5
 81080bc:	47b0      	blx	r6
 81080be:	1c43      	adds	r3, r0, #1
 81080c0:	89a3      	ldrh	r3, [r4, #12]
 81080c2:	d106      	bne.n	81080d2 <__sflush_r+0x66>
 81080c4:	6829      	ldr	r1, [r5, #0]
 81080c6:	291d      	cmp	r1, #29
 81080c8:	d82c      	bhi.n	8108124 <__sflush_r+0xb8>
 81080ca:	4a2a      	ldr	r2, [pc, #168]	; (8108174 <__sflush_r+0x108>)
 81080cc:	40ca      	lsrs	r2, r1
 81080ce:	07d6      	lsls	r6, r2, #31
 81080d0:	d528      	bpl.n	8108124 <__sflush_r+0xb8>
 81080d2:	2200      	movs	r2, #0
 81080d4:	6062      	str	r2, [r4, #4]
 81080d6:	04d9      	lsls	r1, r3, #19
 81080d8:	6922      	ldr	r2, [r4, #16]
 81080da:	6022      	str	r2, [r4, #0]
 81080dc:	d504      	bpl.n	81080e8 <__sflush_r+0x7c>
 81080de:	1c42      	adds	r2, r0, #1
 81080e0:	d101      	bne.n	81080e6 <__sflush_r+0x7a>
 81080e2:	682b      	ldr	r3, [r5, #0]
 81080e4:	b903      	cbnz	r3, 81080e8 <__sflush_r+0x7c>
 81080e6:	6560      	str	r0, [r4, #84]	; 0x54
 81080e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81080ea:	602f      	str	r7, [r5, #0]
 81080ec:	2900      	cmp	r1, #0
 81080ee:	d0ca      	beq.n	8108086 <__sflush_r+0x1a>
 81080f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81080f4:	4299      	cmp	r1, r3
 81080f6:	d002      	beq.n	81080fe <__sflush_r+0x92>
 81080f8:	4628      	mov	r0, r5
 81080fa:	f7ff faa1 	bl	8107640 <_free_r>
 81080fe:	2000      	movs	r0, #0
 8108100:	6360      	str	r0, [r4, #52]	; 0x34
 8108102:	e7c1      	b.n	8108088 <__sflush_r+0x1c>
 8108104:	6a21      	ldr	r1, [r4, #32]
 8108106:	2301      	movs	r3, #1
 8108108:	4628      	mov	r0, r5
 810810a:	47b0      	blx	r6
 810810c:	1c41      	adds	r1, r0, #1
 810810e:	d1c7      	bne.n	81080a0 <__sflush_r+0x34>
 8108110:	682b      	ldr	r3, [r5, #0]
 8108112:	2b00      	cmp	r3, #0
 8108114:	d0c4      	beq.n	81080a0 <__sflush_r+0x34>
 8108116:	2b1d      	cmp	r3, #29
 8108118:	d001      	beq.n	810811e <__sflush_r+0xb2>
 810811a:	2b16      	cmp	r3, #22
 810811c:	d101      	bne.n	8108122 <__sflush_r+0xb6>
 810811e:	602f      	str	r7, [r5, #0]
 8108120:	e7b1      	b.n	8108086 <__sflush_r+0x1a>
 8108122:	89a3      	ldrh	r3, [r4, #12]
 8108124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108128:	81a3      	strh	r3, [r4, #12]
 810812a:	e7ad      	b.n	8108088 <__sflush_r+0x1c>
 810812c:	690f      	ldr	r7, [r1, #16]
 810812e:	2f00      	cmp	r7, #0
 8108130:	d0a9      	beq.n	8108086 <__sflush_r+0x1a>
 8108132:	0793      	lsls	r3, r2, #30
 8108134:	680e      	ldr	r6, [r1, #0]
 8108136:	bf08      	it	eq
 8108138:	694b      	ldreq	r3, [r1, #20]
 810813a:	600f      	str	r7, [r1, #0]
 810813c:	bf18      	it	ne
 810813e:	2300      	movne	r3, #0
 8108140:	eba6 0807 	sub.w	r8, r6, r7
 8108144:	608b      	str	r3, [r1, #8]
 8108146:	f1b8 0f00 	cmp.w	r8, #0
 810814a:	dd9c      	ble.n	8108086 <__sflush_r+0x1a>
 810814c:	6a21      	ldr	r1, [r4, #32]
 810814e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8108150:	4643      	mov	r3, r8
 8108152:	463a      	mov	r2, r7
 8108154:	4628      	mov	r0, r5
 8108156:	47b0      	blx	r6
 8108158:	2800      	cmp	r0, #0
 810815a:	dc06      	bgt.n	810816a <__sflush_r+0xfe>
 810815c:	89a3      	ldrh	r3, [r4, #12]
 810815e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108162:	81a3      	strh	r3, [r4, #12]
 8108164:	f04f 30ff 	mov.w	r0, #4294967295
 8108168:	e78e      	b.n	8108088 <__sflush_r+0x1c>
 810816a:	4407      	add	r7, r0
 810816c:	eba8 0800 	sub.w	r8, r8, r0
 8108170:	e7e9      	b.n	8108146 <__sflush_r+0xda>
 8108172:	bf00      	nop
 8108174:	20400001 	.word	0x20400001

08108178 <_fflush_r>:
 8108178:	b538      	push	{r3, r4, r5, lr}
 810817a:	690b      	ldr	r3, [r1, #16]
 810817c:	4605      	mov	r5, r0
 810817e:	460c      	mov	r4, r1
 8108180:	b913      	cbnz	r3, 8108188 <_fflush_r+0x10>
 8108182:	2500      	movs	r5, #0
 8108184:	4628      	mov	r0, r5
 8108186:	bd38      	pop	{r3, r4, r5, pc}
 8108188:	b118      	cbz	r0, 8108192 <_fflush_r+0x1a>
 810818a:	6983      	ldr	r3, [r0, #24]
 810818c:	b90b      	cbnz	r3, 8108192 <_fflush_r+0x1a>
 810818e:	f7fe f951 	bl	8106434 <__sinit>
 8108192:	4b14      	ldr	r3, [pc, #80]	; (81081e4 <_fflush_r+0x6c>)
 8108194:	429c      	cmp	r4, r3
 8108196:	d11b      	bne.n	81081d0 <_fflush_r+0x58>
 8108198:	686c      	ldr	r4, [r5, #4]
 810819a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810819e:	2b00      	cmp	r3, #0
 81081a0:	d0ef      	beq.n	8108182 <_fflush_r+0xa>
 81081a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81081a4:	07d0      	lsls	r0, r2, #31
 81081a6:	d404      	bmi.n	81081b2 <_fflush_r+0x3a>
 81081a8:	0599      	lsls	r1, r3, #22
 81081aa:	d402      	bmi.n	81081b2 <_fflush_r+0x3a>
 81081ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81081ae:	f7fe fd52 	bl	8106c56 <__retarget_lock_acquire_recursive>
 81081b2:	4628      	mov	r0, r5
 81081b4:	4621      	mov	r1, r4
 81081b6:	f7ff ff59 	bl	810806c <__sflush_r>
 81081ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81081bc:	07da      	lsls	r2, r3, #31
 81081be:	4605      	mov	r5, r0
 81081c0:	d4e0      	bmi.n	8108184 <_fflush_r+0xc>
 81081c2:	89a3      	ldrh	r3, [r4, #12]
 81081c4:	059b      	lsls	r3, r3, #22
 81081c6:	d4dd      	bmi.n	8108184 <_fflush_r+0xc>
 81081c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81081ca:	f7fe fd45 	bl	8106c58 <__retarget_lock_release_recursive>
 81081ce:	e7d9      	b.n	8108184 <_fflush_r+0xc>
 81081d0:	4b05      	ldr	r3, [pc, #20]	; (81081e8 <_fflush_r+0x70>)
 81081d2:	429c      	cmp	r4, r3
 81081d4:	d101      	bne.n	81081da <_fflush_r+0x62>
 81081d6:	68ac      	ldr	r4, [r5, #8]
 81081d8:	e7df      	b.n	810819a <_fflush_r+0x22>
 81081da:	4b04      	ldr	r3, [pc, #16]	; (81081ec <_fflush_r+0x74>)
 81081dc:	429c      	cmp	r4, r3
 81081de:	bf08      	it	eq
 81081e0:	68ec      	ldreq	r4, [r5, #12]
 81081e2:	e7da      	b.n	810819a <_fflush_r+0x22>
 81081e4:	081087ac 	.word	0x081087ac
 81081e8:	081087cc 	.word	0x081087cc
 81081ec:	0810878c 	.word	0x0810878c

081081f0 <fiprintf>:
 81081f0:	b40e      	push	{r1, r2, r3}
 81081f2:	b503      	push	{r0, r1, lr}
 81081f4:	4601      	mov	r1, r0
 81081f6:	ab03      	add	r3, sp, #12
 81081f8:	4805      	ldr	r0, [pc, #20]	; (8108210 <fiprintf+0x20>)
 81081fa:	f853 2b04 	ldr.w	r2, [r3], #4
 81081fe:	6800      	ldr	r0, [r0, #0]
 8108200:	9301      	str	r3, [sp, #4]
 8108202:	f7ff fc83 	bl	8107b0c <_vfiprintf_r>
 8108206:	b002      	add	sp, #8
 8108208:	f85d eb04 	ldr.w	lr, [sp], #4
 810820c:	b003      	add	sp, #12
 810820e:	4770      	bx	lr
 8108210:	10000018 	.word	0x10000018

08108214 <_lseek_r>:
 8108214:	b538      	push	{r3, r4, r5, lr}
 8108216:	4d07      	ldr	r5, [pc, #28]	; (8108234 <_lseek_r+0x20>)
 8108218:	4604      	mov	r4, r0
 810821a:	4608      	mov	r0, r1
 810821c:	4611      	mov	r1, r2
 810821e:	2200      	movs	r2, #0
 8108220:	602a      	str	r2, [r5, #0]
 8108222:	461a      	mov	r2, r3
 8108224:	f7f9 f878 	bl	8101318 <_lseek>
 8108228:	1c43      	adds	r3, r0, #1
 810822a:	d102      	bne.n	8108232 <_lseek_r+0x1e>
 810822c:	682b      	ldr	r3, [r5, #0]
 810822e:	b103      	cbz	r3, 8108232 <_lseek_r+0x1e>
 8108230:	6023      	str	r3, [r4, #0]
 8108232:	bd38      	pop	{r3, r4, r5, pc}
 8108234:	10000330 	.word	0x10000330

08108238 <__swhatbuf_r>:
 8108238:	b570      	push	{r4, r5, r6, lr}
 810823a:	460e      	mov	r6, r1
 810823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108240:	2900      	cmp	r1, #0
 8108242:	b096      	sub	sp, #88	; 0x58
 8108244:	4614      	mov	r4, r2
 8108246:	461d      	mov	r5, r3
 8108248:	da08      	bge.n	810825c <__swhatbuf_r+0x24>
 810824a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810824e:	2200      	movs	r2, #0
 8108250:	602a      	str	r2, [r5, #0]
 8108252:	061a      	lsls	r2, r3, #24
 8108254:	d410      	bmi.n	8108278 <__swhatbuf_r+0x40>
 8108256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810825a:	e00e      	b.n	810827a <__swhatbuf_r+0x42>
 810825c:	466a      	mov	r2, sp
 810825e:	f000 f8c1 	bl	81083e4 <_fstat_r>
 8108262:	2800      	cmp	r0, #0
 8108264:	dbf1      	blt.n	810824a <__swhatbuf_r+0x12>
 8108266:	9a01      	ldr	r2, [sp, #4]
 8108268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810826c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8108270:	425a      	negs	r2, r3
 8108272:	415a      	adcs	r2, r3
 8108274:	602a      	str	r2, [r5, #0]
 8108276:	e7ee      	b.n	8108256 <__swhatbuf_r+0x1e>
 8108278:	2340      	movs	r3, #64	; 0x40
 810827a:	2000      	movs	r0, #0
 810827c:	6023      	str	r3, [r4, #0]
 810827e:	b016      	add	sp, #88	; 0x58
 8108280:	bd70      	pop	{r4, r5, r6, pc}
	...

08108284 <__smakebuf_r>:
 8108284:	898b      	ldrh	r3, [r1, #12]
 8108286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8108288:	079d      	lsls	r5, r3, #30
 810828a:	4606      	mov	r6, r0
 810828c:	460c      	mov	r4, r1
 810828e:	d507      	bpl.n	81082a0 <__smakebuf_r+0x1c>
 8108290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8108294:	6023      	str	r3, [r4, #0]
 8108296:	6123      	str	r3, [r4, #16]
 8108298:	2301      	movs	r3, #1
 810829a:	6163      	str	r3, [r4, #20]
 810829c:	b002      	add	sp, #8
 810829e:	bd70      	pop	{r4, r5, r6, pc}
 81082a0:	ab01      	add	r3, sp, #4
 81082a2:	466a      	mov	r2, sp
 81082a4:	f7ff ffc8 	bl	8108238 <__swhatbuf_r>
 81082a8:	9900      	ldr	r1, [sp, #0]
 81082aa:	4605      	mov	r5, r0
 81082ac:	4630      	mov	r0, r6
 81082ae:	f7ff fa33 	bl	8107718 <_malloc_r>
 81082b2:	b948      	cbnz	r0, 81082c8 <__smakebuf_r+0x44>
 81082b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81082b8:	059a      	lsls	r2, r3, #22
 81082ba:	d4ef      	bmi.n	810829c <__smakebuf_r+0x18>
 81082bc:	f023 0303 	bic.w	r3, r3, #3
 81082c0:	f043 0302 	orr.w	r3, r3, #2
 81082c4:	81a3      	strh	r3, [r4, #12]
 81082c6:	e7e3      	b.n	8108290 <__smakebuf_r+0xc>
 81082c8:	4b0d      	ldr	r3, [pc, #52]	; (8108300 <__smakebuf_r+0x7c>)
 81082ca:	62b3      	str	r3, [r6, #40]	; 0x28
 81082cc:	89a3      	ldrh	r3, [r4, #12]
 81082ce:	6020      	str	r0, [r4, #0]
 81082d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81082d4:	81a3      	strh	r3, [r4, #12]
 81082d6:	9b00      	ldr	r3, [sp, #0]
 81082d8:	6163      	str	r3, [r4, #20]
 81082da:	9b01      	ldr	r3, [sp, #4]
 81082dc:	6120      	str	r0, [r4, #16]
 81082de:	b15b      	cbz	r3, 81082f8 <__smakebuf_r+0x74>
 81082e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81082e4:	4630      	mov	r0, r6
 81082e6:	f000 f88f 	bl	8108408 <_isatty_r>
 81082ea:	b128      	cbz	r0, 81082f8 <__smakebuf_r+0x74>
 81082ec:	89a3      	ldrh	r3, [r4, #12]
 81082ee:	f023 0303 	bic.w	r3, r3, #3
 81082f2:	f043 0301 	orr.w	r3, r3, #1
 81082f6:	81a3      	strh	r3, [r4, #12]
 81082f8:	89a0      	ldrh	r0, [r4, #12]
 81082fa:	4305      	orrs	r5, r0
 81082fc:	81a5      	strh	r5, [r4, #12]
 81082fe:	e7cd      	b.n	810829c <__smakebuf_r+0x18>
 8108300:	081063cd 	.word	0x081063cd

08108304 <memmove>:
 8108304:	4288      	cmp	r0, r1
 8108306:	b510      	push	{r4, lr}
 8108308:	eb01 0402 	add.w	r4, r1, r2
 810830c:	d902      	bls.n	8108314 <memmove+0x10>
 810830e:	4284      	cmp	r4, r0
 8108310:	4623      	mov	r3, r4
 8108312:	d807      	bhi.n	8108324 <memmove+0x20>
 8108314:	1e43      	subs	r3, r0, #1
 8108316:	42a1      	cmp	r1, r4
 8108318:	d008      	beq.n	810832c <memmove+0x28>
 810831a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810831e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8108322:	e7f8      	b.n	8108316 <memmove+0x12>
 8108324:	4402      	add	r2, r0
 8108326:	4601      	mov	r1, r0
 8108328:	428a      	cmp	r2, r1
 810832a:	d100      	bne.n	810832e <memmove+0x2a>
 810832c:	bd10      	pop	{r4, pc}
 810832e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8108332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8108336:	e7f7      	b.n	8108328 <memmove+0x24>

08108338 <__malloc_lock>:
 8108338:	4801      	ldr	r0, [pc, #4]	; (8108340 <__malloc_lock+0x8>)
 810833a:	f7fe bc8c 	b.w	8106c56 <__retarget_lock_acquire_recursive>
 810833e:	bf00      	nop
 8108340:	10000324 	.word	0x10000324

08108344 <__malloc_unlock>:
 8108344:	4801      	ldr	r0, [pc, #4]	; (810834c <__malloc_unlock+0x8>)
 8108346:	f7fe bc87 	b.w	8106c58 <__retarget_lock_release_recursive>
 810834a:	bf00      	nop
 810834c:	10000324 	.word	0x10000324

08108350 <_realloc_r>:
 8108350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108354:	4680      	mov	r8, r0
 8108356:	4614      	mov	r4, r2
 8108358:	460e      	mov	r6, r1
 810835a:	b921      	cbnz	r1, 8108366 <_realloc_r+0x16>
 810835c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108360:	4611      	mov	r1, r2
 8108362:	f7ff b9d9 	b.w	8107718 <_malloc_r>
 8108366:	b92a      	cbnz	r2, 8108374 <_realloc_r+0x24>
 8108368:	f7ff f96a 	bl	8107640 <_free_r>
 810836c:	4625      	mov	r5, r4
 810836e:	4628      	mov	r0, r5
 8108370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108374:	f000 f858 	bl	8108428 <_malloc_usable_size_r>
 8108378:	4284      	cmp	r4, r0
 810837a:	4607      	mov	r7, r0
 810837c:	d802      	bhi.n	8108384 <_realloc_r+0x34>
 810837e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8108382:	d812      	bhi.n	81083aa <_realloc_r+0x5a>
 8108384:	4621      	mov	r1, r4
 8108386:	4640      	mov	r0, r8
 8108388:	f7ff f9c6 	bl	8107718 <_malloc_r>
 810838c:	4605      	mov	r5, r0
 810838e:	2800      	cmp	r0, #0
 8108390:	d0ed      	beq.n	810836e <_realloc_r+0x1e>
 8108392:	42bc      	cmp	r4, r7
 8108394:	4622      	mov	r2, r4
 8108396:	4631      	mov	r1, r6
 8108398:	bf28      	it	cs
 810839a:	463a      	movcs	r2, r7
 810839c:	f7fb fbfe 	bl	8103b9c <memcpy>
 81083a0:	4631      	mov	r1, r6
 81083a2:	4640      	mov	r0, r8
 81083a4:	f7ff f94c 	bl	8107640 <_free_r>
 81083a8:	e7e1      	b.n	810836e <_realloc_r+0x1e>
 81083aa:	4635      	mov	r5, r6
 81083ac:	e7df      	b.n	810836e <_realloc_r+0x1e>
	...

081083b0 <_read_r>:
 81083b0:	b538      	push	{r3, r4, r5, lr}
 81083b2:	4d07      	ldr	r5, [pc, #28]	; (81083d0 <_read_r+0x20>)
 81083b4:	4604      	mov	r4, r0
 81083b6:	4608      	mov	r0, r1
 81083b8:	4611      	mov	r1, r2
 81083ba:	2200      	movs	r2, #0
 81083bc:	602a      	str	r2, [r5, #0]
 81083be:	461a      	mov	r2, r3
 81083c0:	f7f8 ff4a 	bl	8101258 <_read>
 81083c4:	1c43      	adds	r3, r0, #1
 81083c6:	d102      	bne.n	81083ce <_read_r+0x1e>
 81083c8:	682b      	ldr	r3, [r5, #0]
 81083ca:	b103      	cbz	r3, 81083ce <_read_r+0x1e>
 81083cc:	6023      	str	r3, [r4, #0]
 81083ce:	bd38      	pop	{r3, r4, r5, pc}
 81083d0:	10000330 	.word	0x10000330

081083d4 <abort>:
 81083d4:	b508      	push	{r3, lr}
 81083d6:	2006      	movs	r0, #6
 81083d8:	f000 f856 	bl	8108488 <raise>
 81083dc:	2001      	movs	r0, #1
 81083de:	f7f8 ff31 	bl	8101244 <_exit>
	...

081083e4 <_fstat_r>:
 81083e4:	b538      	push	{r3, r4, r5, lr}
 81083e6:	4d07      	ldr	r5, [pc, #28]	; (8108404 <_fstat_r+0x20>)
 81083e8:	2300      	movs	r3, #0
 81083ea:	4604      	mov	r4, r0
 81083ec:	4608      	mov	r0, r1
 81083ee:	4611      	mov	r1, r2
 81083f0:	602b      	str	r3, [r5, #0]
 81083f2:	f7f8 ff76 	bl	81012e2 <_fstat>
 81083f6:	1c43      	adds	r3, r0, #1
 81083f8:	d102      	bne.n	8108400 <_fstat_r+0x1c>
 81083fa:	682b      	ldr	r3, [r5, #0]
 81083fc:	b103      	cbz	r3, 8108400 <_fstat_r+0x1c>
 81083fe:	6023      	str	r3, [r4, #0]
 8108400:	bd38      	pop	{r3, r4, r5, pc}
 8108402:	bf00      	nop
 8108404:	10000330 	.word	0x10000330

08108408 <_isatty_r>:
 8108408:	b538      	push	{r3, r4, r5, lr}
 810840a:	4d06      	ldr	r5, [pc, #24]	; (8108424 <_isatty_r+0x1c>)
 810840c:	2300      	movs	r3, #0
 810840e:	4604      	mov	r4, r0
 8108410:	4608      	mov	r0, r1
 8108412:	602b      	str	r3, [r5, #0]
 8108414:	f7f8 ff75 	bl	8101302 <_isatty>
 8108418:	1c43      	adds	r3, r0, #1
 810841a:	d102      	bne.n	8108422 <_isatty_r+0x1a>
 810841c:	682b      	ldr	r3, [r5, #0]
 810841e:	b103      	cbz	r3, 8108422 <_isatty_r+0x1a>
 8108420:	6023      	str	r3, [r4, #0]
 8108422:	bd38      	pop	{r3, r4, r5, pc}
 8108424:	10000330 	.word	0x10000330

08108428 <_malloc_usable_size_r>:
 8108428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810842c:	1f18      	subs	r0, r3, #4
 810842e:	2b00      	cmp	r3, #0
 8108430:	bfbc      	itt	lt
 8108432:	580b      	ldrlt	r3, [r1, r0]
 8108434:	18c0      	addlt	r0, r0, r3
 8108436:	4770      	bx	lr

08108438 <_raise_r>:
 8108438:	291f      	cmp	r1, #31
 810843a:	b538      	push	{r3, r4, r5, lr}
 810843c:	4604      	mov	r4, r0
 810843e:	460d      	mov	r5, r1
 8108440:	d904      	bls.n	810844c <_raise_r+0x14>
 8108442:	2316      	movs	r3, #22
 8108444:	6003      	str	r3, [r0, #0]
 8108446:	f04f 30ff 	mov.w	r0, #4294967295
 810844a:	bd38      	pop	{r3, r4, r5, pc}
 810844c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810844e:	b112      	cbz	r2, 8108456 <_raise_r+0x1e>
 8108450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8108454:	b94b      	cbnz	r3, 810846a <_raise_r+0x32>
 8108456:	4620      	mov	r0, r4
 8108458:	f000 f830 	bl	81084bc <_getpid_r>
 810845c:	462a      	mov	r2, r5
 810845e:	4601      	mov	r1, r0
 8108460:	4620      	mov	r0, r4
 8108462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108466:	f000 b817 	b.w	8108498 <_kill_r>
 810846a:	2b01      	cmp	r3, #1
 810846c:	d00a      	beq.n	8108484 <_raise_r+0x4c>
 810846e:	1c59      	adds	r1, r3, #1
 8108470:	d103      	bne.n	810847a <_raise_r+0x42>
 8108472:	2316      	movs	r3, #22
 8108474:	6003      	str	r3, [r0, #0]
 8108476:	2001      	movs	r0, #1
 8108478:	e7e7      	b.n	810844a <_raise_r+0x12>
 810847a:	2400      	movs	r4, #0
 810847c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8108480:	4628      	mov	r0, r5
 8108482:	4798      	blx	r3
 8108484:	2000      	movs	r0, #0
 8108486:	e7e0      	b.n	810844a <_raise_r+0x12>

08108488 <raise>:
 8108488:	4b02      	ldr	r3, [pc, #8]	; (8108494 <raise+0xc>)
 810848a:	4601      	mov	r1, r0
 810848c:	6818      	ldr	r0, [r3, #0]
 810848e:	f7ff bfd3 	b.w	8108438 <_raise_r>
 8108492:	bf00      	nop
 8108494:	10000018 	.word	0x10000018

08108498 <_kill_r>:
 8108498:	b538      	push	{r3, r4, r5, lr}
 810849a:	4d07      	ldr	r5, [pc, #28]	; (81084b8 <_kill_r+0x20>)
 810849c:	2300      	movs	r3, #0
 810849e:	4604      	mov	r4, r0
 81084a0:	4608      	mov	r0, r1
 81084a2:	4611      	mov	r1, r2
 81084a4:	602b      	str	r3, [r5, #0]
 81084a6:	f7f8 febd 	bl	8101224 <_kill>
 81084aa:	1c43      	adds	r3, r0, #1
 81084ac:	d102      	bne.n	81084b4 <_kill_r+0x1c>
 81084ae:	682b      	ldr	r3, [r5, #0]
 81084b0:	b103      	cbz	r3, 81084b4 <_kill_r+0x1c>
 81084b2:	6023      	str	r3, [r4, #0]
 81084b4:	bd38      	pop	{r3, r4, r5, pc}
 81084b6:	bf00      	nop
 81084b8:	10000330 	.word	0x10000330

081084bc <_getpid_r>:
 81084bc:	f7f8 beaa 	b.w	8101214 <_getpid>

081084c0 <_init>:
 81084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81084c2:	bf00      	nop
 81084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81084c6:	bc08      	pop	{r3}
 81084c8:	469e      	mov	lr, r3
 81084ca:	4770      	bx	lr

081084cc <_fini>:
 81084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81084ce:	bf00      	nop
 81084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81084d2:	bc08      	pop	{r3}
 81084d4:	469e      	mov	lr, r3
 81084d6:	4770      	bx	lr
