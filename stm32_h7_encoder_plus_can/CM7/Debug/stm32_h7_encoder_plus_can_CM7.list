
stm32_h7_encoder_plus_can_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b024  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800b2c8  0800b2c8  0001b2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b83c  0800b83c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b83c  0800b83c  0001b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b844  0800b844  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b848  0800b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800b84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  240001e4  0800ba30  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003ec  0800ba30  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae74  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa9  00000000  00000000  0003b086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0003efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c12f  00000000  00000000  00040388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a24a  00000000  00000000  0007c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190018  00000000  00000000  00096701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00226719  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd4  00000000  00000000  0022676c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b2ac 	.word	0x0800b2ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800b2ac 	.word	0x0800b2ac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <HAL_TIM_IC_CaptureCallback>:

int32_t speed = 0;
uint32_t timer_counter = 0;
int16_t counter = 0;
int16_t position = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	timer_counter = __HAL_TIM_GET_COUNTER(&htim4);
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0x34>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000bb8:	6013      	str	r3, [r2, #0]
	counter = (int16_t) timer_counter;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000bc2:	801a      	strh	r2, [r3, #0]
	position = counter; //this is just for format purposes
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000bc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000bcc:	801a      	strh	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	240002a0 	.word	0x240002a0
 8000be0:	240003c4 	.word	0x240003c4
 8000be4:	240003c8 	.word	0x240003c8
 8000be8:	240003ca 	.word	0x240003ca
 8000bec:	00000000 	.word	0x00000000

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfa:	61fb      	str	r3, [r7, #28]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000bfc:	bf00      	nop
 8000bfe:	4b4e      	ldr	r3, [pc, #312]	; (8000d38 <main+0x148>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <main+0x24>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	61fa      	str	r2, [r7, #28]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dcf4      	bgt.n	8000bfe <main+0xe>
		;
	if (timeout < 0) {
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da01      	bge.n	8000c1e <main+0x2e>
		Error_Handler();
 8000c1a:	f000 faf3 	bl	8001204 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f000 fd97 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f89d 	bl	8000d60 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <main+0x148>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <main+0x148>)
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <main+0x148>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 fe53 	bl	80028f0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f001 fe69 	bl	8002924 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c56:	61fb      	str	r3, [r7, #28]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000c58:	bf00      	nop
 8000c5a:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <main+0x148>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d104      	bne.n	8000c70 <main+0x80>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	61fa      	str	r2, [r7, #28]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dcf4      	bgt.n	8000c5a <main+0x6a>
		;
	if (timeout < 0) {
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da01      	bge.n	8000c7a <main+0x8a>
		Error_Handler();
 8000c76:	f000 fac5 	bl	8001204 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fa41 	bl	8001100 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9f3 	bl	8001068 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000c82:	f000 f8e9 	bl	8000e58 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8000c86:	f000 f995 	bl	8000fb4 <MX_TIM4_Init>
	//uint8_t TxData4[] = {0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF};
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Staring...\r\n");
 8000c8a:	482c      	ldr	r0, [pc, #176]	; (8000d3c <main+0x14c>)
 8000c8c:	f006 fdf6 	bl	800787c <puts>
	union FloatBytes fb;
//	union BytesFloat bf;
	uint8_t m = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	75fb      	strb	r3, [r7, #23]
		//Calculating speed
		//1100 ticks per turn approximately
		//Diameter 62mm
		//Circumference 195mm
		//printf("%f %d %f \r\n", ((float)timer_counter/1100)*19.5, counter, (float)speed*(19.5/1100));
		fb.floatValue = (float)speed*(19.5/1100);
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <main+0x150>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000d30 <main+0x140>
 8000ca8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb0:	edc7 7a04 	vstr	s15, [r7, #16]
		printf("%f ", fb.floatValue);
 8000cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cbc:	ec53 2b17 	vmov	r2, r3, d7
 8000cc0:	4820      	ldr	r0, [pc, #128]	; (8000d44 <main+0x154>)
 8000cc2:	f006 fd55 	bl	8007770 <iprintf>

		// Print each byte
		uint8_t TxData[8] = {};
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
		printf("Data: {");
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <main+0x158>)
 8000cd0:	f006 fd4e 	bl	8007770 <iprintf>
		for (size_t i = 0; i < sizeof(float); i++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	e015      	b.n	8000d06 <main+0x116>
			printf("%02X ", fb.byteValue[i]);
 8000cda:	f107 0210 	add.w	r2, r7, #16
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <main+0x15c>)
 8000ce8:	f006 fd42 	bl	8007770 <iprintf>
			TxData[i]=fb.byteValue[i];
 8000cec:	f107 0210 	add.w	r2, r7, #16
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	1d3a      	adds	r2, r7, #4
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < sizeof(float); i++) {
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	3301      	adds	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d9e6      	bls.n	8000cda <main+0xea>
		}
		printf("\r\n");
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <main+0x160>)
 8000d0e:	f006 fdb5 	bl	800787c <puts>

		m = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	461a      	mov	r2, r3
 8000d16:	490f      	ldr	r1, [pc, #60]	; (8000d54 <main+0x164>)
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0x168>)
 8000d1a:	f001 f946 	bl	8001faa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	75fb      	strb	r3, [r7, #23]
		printf("Status: %d ",m);
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <main+0x16c>)
 8000d28:	f006 fd22 	bl	8007770 <iprintf>
	while (1) {
 8000d2c:	e7b2      	b.n	8000c94 <main+0xa4>
 8000d2e:	bf00      	nop
 8000d30:	22719227 	.word	0x22719227
 8000d34:	3f922719 	.word	0x3f922719
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	0800b2c8 	.word	0x0800b2c8
 8000d40:	240003c0 	.word	0x240003c0
 8000d44:	0800b2d4 	.word	0x0800b2d4
 8000d48:	0800b2d8 	.word	0x0800b2d8
 8000d4c:	0800b2e0 	.word	0x0800b2e0
 8000d50:	0800b2e8 	.word	0x0800b2e8
 8000d54:	2400039c 	.word	0x2400039c
 8000d58:	24000200 	.word	0x24000200
 8000d5c:	0800b2ec 	.word	0x0800b2ec

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09c      	sub	sp, #112	; 0x70
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	224c      	movs	r2, #76	; 0x4c
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 feae 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2220      	movs	r2, #32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 fea8 	bl	8006ad0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d80:	2004      	movs	r0, #4
 8000d82:	f001 fde3 	bl	800294c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <SystemClock_Config+0xf0>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a30      	ldr	r2, [pc, #192]	; (8000e50 <SystemClock_Config+0xf0>)
 8000d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <SystemClock_Config+0xf0>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <SystemClock_Config+0xf4>)
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <SystemClock_Config+0xf4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <SystemClock_Config+0xf4>)
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db8:	bf00      	nop
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <SystemClock_Config+0xf0>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dc6:	d1f8      	bne.n	8000dba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000de0:	233c      	movs	r3, #60	; 0x3c
 8000de2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000de8:	2318      	movs	r3, #24
 8000dea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000df0:	230c      	movs	r3, #12
 8000df2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fdfd 	bl	8002a00 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f9fa 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	233f      	movs	r3, #63	; 0x3f
 8000e12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	2303      	movs	r3, #3
 8000e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e24:	2340      	movs	r3, #64	; 0x40
 8000e26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e2e:	2340      	movs	r3, #64	; 0x40
 8000e30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2104      	movs	r1, #4
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fa10 	bl	800325c <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e42:	f000 f9df 	bl	8001204 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3770      	adds	r7, #112	; 0x70
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	58024800 	.word	0x58024800
 8000e54:	58000400 	.word	0x58000400

08000e58 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e5e:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <MX_FDCAN1_Init+0x14c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e62:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000e8c:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e8e:	223f      	movs	r2, #63	; 0x3f
 8000e90:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e94:	2210      	movs	r2, #16
 8000e96:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000f06:	f000 fdd1 	bl	8001aac <HAL_FDCAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f10:	f000 f978 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	/*AAO+*/
	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 = 0x00;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0x00;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
	 sFilterConfig.FilterID1 = 0x611;
	 sFilterConfig.FilterID2 = 0xFFF;
	 */
	/* Configure global filter to reject all non-matching frames */
	//HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000f3a:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <MX_FDCAN1_Init+0x150>)
 8000f3c:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000f3e:	f000 ff93 	bl	8001e68 <HAL_FDCAN_ConfigFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_FDCAN1_Init+0xf4>
		/* Filter configuration Error */
		Error_Handler();
 8000f48:	f000 f95c 	bl	8001204 <Error_Handler>
	}
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000f4e:	f001 f801 	bl	8001f54 <HAL_FDCAN_Start>
	}
	/* Start Error */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_FDCAN1_Init+0x148>)
 8000f58:	f001 f882 	bl	8002060 <HAL_FDCAN_ActivateNotification>
	}
	/* Notification Error */

	/* Configure Tx buffer message */

	TxHeader.Identifier = 0x0CFF14A3; // Turn Right Indicator
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <MX_FDCAN1_Init+0x158>)
 8000f60:	601a      	str	r2, [r3, #0]
	// TxHeader.Identifier = 0x0CFEFCA3; // Fuel Level
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f68:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f76:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f84:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f8c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0x00;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <MX_FDCAN1_Init+0x154>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
	/*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000200 	.word	0x24000200
 8000fa4:	4000a000 	.word	0x4000a000
 8000fa8:	2400037c 	.word	0x2400037c
 8000fac:	2400039c 	.word	0x2400039c
 8000fb0:	0cff14a3 	.word	0x0cff14a3

08000fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fd84 	bl	8006ad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_TIM4_Init+0xac>)
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <MX_TIM4_Init+0xb0>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM4_Init+0xac>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_TIM4_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM4_Init+0xac>)
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM4_Init+0xac>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM4_Init+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001008:	230a      	movs	r3, #10
 800100a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001010:	2301      	movs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001018:	230a      	movs	r3, #10
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	480f      	ldr	r0, [pc, #60]	; (8001060 <MX_TIM4_Init+0xac>)
 8001024:	f004 f80e 	bl	8005044 <HAL_TIM_Encoder_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800102e:	f000 f8e9 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4808      	ldr	r0, [pc, #32]	; (8001060 <MX_TIM4_Init+0xac>)
 8001040:	f004 fb5c 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800104a:	f000 f8db 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800104e:	213c      	movs	r1, #60	; 0x3c
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM4_Init+0xac>)
 8001052:	f004 f89d 	bl	8005190 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	240002a0 	.word	0x240002a0
 8001064:	40000800 	.word	0x40000800

08001068 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_USART3_UART_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010b2:	f004 fbcf 	bl	8005854 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 f8a2 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010c4:	f005 fc02 	bl	80068cc <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f000 f899 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010d6:	f005 fc37 	bl	8006948 <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f000 f890 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010e6:	f005 fbb8 	bl	800685a <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f888 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	240002ec 	.word	0x240002ec
 80010fc:	40004800 	.word	0x40004800

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a36      	ldr	r2, [pc, #216]	; (80011f8 <MX_GPIO_Init+0xf8>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001134:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <MX_GPIO_Init+0xf8>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xf8>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <MX_GPIO_Init+0xf8>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_GPIO_Init+0xf8>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f244 0101 	movw	r1, #16385	; 0x4001
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_GPIO_Init+0xfc>)
 80011b4:	f001 fb82 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_GPIO_Init+0x100>)
 80011ce:	f001 f9c5 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80011d2:	f244 0301 	movw	r3, #16385	; 0x4001
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_GPIO_Init+0xfc>)
 80011ec:	f001 f9b6 	bl	800255c <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020400 	.word	0x58020400
 8001200:	58020800 	.word	0x58020800

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001218:	1d39      	adds	r1, r7, #4
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	2201      	movs	r2, #1
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <__io_putchar+0x20>)
 8001222:	f004 fb67 	bl	80058f4 <HAL_UART_Transmit>
  return ch;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	240002ec 	.word	0x240002ec

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x30>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x30>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x30>)
 800124c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58024400 	.word	0x58024400

08001268 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0b8      	sub	sp, #224	; 0xe0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22bc      	movs	r2, #188	; 0xbc
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fc21 	bl	8006ad0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_FDCAN_MspInit+0xc0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d142      	bne.n	800131e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800129e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fb63 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012b4:	f7ff ffa6 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_FDCAN_MspInit+0xc4>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800130c:	2309      	movs	r3, #9
 800130e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_FDCAN_MspInit+0xc8>)
 800131a:	f001 f91f 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37e0      	adds	r7, #224	; 0xe0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	4000a000 	.word	0x4000a000
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00

08001334 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_TIM_Encoder_MspInit+0x98>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d136      	bne.n	80013c4 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001392:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013a4:	2302      	movs	r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013b0:	f001 f8d4 	bl	800255c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	201e      	movs	r0, #30
 80013ba:	f000 fb42 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013be:	201e      	movs	r0, #30
 80013c0:	f000 fb59 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40000800 	.word	0x40000800
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020c00 	.word	0x58020c00

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0b8      	sub	sp, #224	; 0xe0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22bc      	movs	r2, #188	; 0xbc
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 fb69 	bl	8006ad0 <memset>
  if(huart->Instance==USART3)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a25      	ldr	r2, [pc, #148]	; (8001498 <HAL_UART_MspInit+0xc0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d142      	bne.n	800148e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f002 faac 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001422:	f7ff feef 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_UART_MspInit+0xc4>)
 8001428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_UART_MspInit+0xc4>)
 800142e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_UART_MspInit+0xc4>)
 8001438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0xc4>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_UART_MspInit+0xc4>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_UART_MspInit+0xc4>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147c:	2307      	movs	r3, #7
 800147e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_UART_MspInit+0xc8>)
 800148a:	f001 f867 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	37e0      	adds	r7, #224	; 0xe0
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004800 	.word	0x40004800
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020c00 	.word	0x58020c00

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  indx++;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <SysTick_Handler+0x60>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <SysTick_Handler+0x60>)
 80014fa:	6013      	str	r3, [r2, #0]
  if (indx == 50) {
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <SysTick_Handler+0x60>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b32      	cmp	r3, #50	; 0x32
 8001502:	d11c      	bne.n	800153e <SysTick_Handler+0x52>
    int16_t newPos = position;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <SysTick_Handler+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	80fb      	strh	r3, [r7, #6]

    // Check for position change to avoid division by zero
    if (newPos != oldpos) {
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <SysTick_Handler+0x68>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001514:	429a      	cmp	r2, r3
 8001516:	d009      	beq.n	800152c <SysTick_Handler+0x40>
      speed = ((newPos - oldpos) * 2); // speed in clicks
 8001518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <SysTick_Handler+0x68>)
 800151e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <SysTick_Handler+0x6c>)
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e002      	b.n	8001532 <SysTick_Handler+0x46>
    } else {
      speed = 0; // Handle division by zero, set speed to zero
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <SysTick_Handler+0x6c>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
    }

    oldpos = newPos;
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <SysTick_Handler+0x68>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	8013      	strh	r3, [r2, #0]
    indx = 0;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Handler+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 f979 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240003d0 	.word	0x240003d0
 8001550:	240003ca 	.word	0x240003ca
 8001554:	240003cc 	.word	0x240003cc
 8001558:	240003c0 	.word	0x240003c0

0800155c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM4_IRQHandler+0x10>)
 8001562:	f003 fec3 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	240002a0 	.word	0x240002a0

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800158a:	f005 fa69 	bl	8006a60 <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2216      	movs	r2, #22
 8001592:	601a      	str	r2, [r3, #0]
	return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015b2:	e7fe      	b.n	80015b2 <_exit+0x12>

080015b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
	}

return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e009      	b.n	8001614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe01 	bl	8001210 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf1      	blt.n	8001600 <_write+0x12>
	}
	return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_close>:

int _close(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	605a      	str	r2, [r3, #4]
	return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_isatty>:

int _isatty(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return 1;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f005 f9ce 	bl	8006a60 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	24080000 	.word	0x24080000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	240003d4 	.word	0x240003d4
 80016f8:	240003f0 	.word	0x240003f0

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001700:	f7ff f9bc 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f005 f99f 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fa5f 	bl	8000bf0 <main>
  bx  lr
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001738:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800173c:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001740:	0800b84c 	.word	0x0800b84c
  ldr r2, =_sbss
 8001744:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001748:	240003ec 	.word	0x240003ec

0800174c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC3_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 f968 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800175c:	f001 ff34 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_Init+0x68>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	4913      	ldr	r1, [pc, #76]	; (80017bc <HAL_Init+0x6c>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_Init+0x6c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_Init+0x70>)
 8001792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <HAL_Init+0x74>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f814 	bl	80017c8 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e002      	b.n	80017b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017aa:	f7ff fd43 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58024400 	.word	0x58024400
 80017bc:	0800b344 	.word	0x0800b344
 80017c0:	24000004 	.word	0x24000004
 80017c4:	24000000 	.word	0x24000000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_InitTick+0x60>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e021      	b.n	8001820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_InitTick+0x64>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f94d 	bl	8001a92 <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 f917 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x68>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2400000c 	.word	0x2400000c
 800182c:	24000000 	.word	0x24000000
 8001830:	24000008 	.word	0x24000008

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2400000c 	.word	0x2400000c
 8001858:	240003d8 	.word	0x240003d8

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	240003d8 	.word	0x240003d8

08001874 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetREVID+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0c1b      	lsrs	r3, r3, #16
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	5c001000 	.word	0x5c001000

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	05fa0000 	.word	0x05fa0000

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff40 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff90 	bl	8001980 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa4 	bl	80019e8 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b098      	sub	sp, #96	; 0x60
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001ab4:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_FDCAN_Init+0x21c>)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4611      	mov	r1, r2
 8001abc:	224c      	movs	r2, #76	; 0x4c
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fff8 	bl	8006ab4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1c6      	b.n	8001e5c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_FDCAN_Init+0x220>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d106      	bne.n	8001ae6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fbb4 	bl	8001268 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0210 	bic.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b10:	f7ff fea4 	bl	800185c <HAL_GetTick>
 8001b14:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b16:	e014      	b.n	8001b42 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b18:	f7ff fea0 	bl	800185c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b0a      	cmp	r3, #10
 8001b24:	d90d      	bls.n	8001b42 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e18c      	b.n	8001e5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d0e3      	beq.n	8001b18 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b60:	f7ff fe7c 	bl	800185c <HAL_GetTick>
 8001b64:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b66:	e014      	b.n	8001b92 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b68:	f7ff fe78 	bl	800185c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	d90d      	bls.n	8001b92 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e164      	b.n	8001e5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0e3      	beq.n	8001b68 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0202 	orr.w	r2, r2, #2
 8001bae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7c1b      	ldrb	r3, [r3, #16]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e007      	b.n	8001bda <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7c5b      	ldrb	r3, [r3, #17]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	e007      	b.n	8001c04 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c02:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7c9b      	ldrb	r3, [r3, #18]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d108      	bne.n	8001c1e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	e007      	b.n	8001c2e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c2c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001c52:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0210 	bic.w	r2, r2, #16
 8001c62:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0204 	orr.w	r2, r2, #4
 8001c7a:	619a      	str	r2, [r3, #24]
 8001c7c:	e030      	b.n	8001ce0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d02c      	beq.n	8001ce0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d020      	beq.n	8001cd0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0210 	orr.w	r2, r2, #16
 8001cac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d114      	bne.n	8001ce0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_FDCAN_Init+0x234>
 8001cc8:	0800b2f8 	.word	0x0800b2f8
 8001ccc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cf0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cf8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d08:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d0a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d14:	d115      	bne.n	8001d42 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	3b01      	subs	r3, #1
 8001d22:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d24:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	3b01      	subs	r3, #1
 8001d38:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001d3e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d40:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	4413      	add	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d011      	beq.n	8001d92 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001d76:	f023 0107 	bic.w	r1, r3, #7
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	3360      	adds	r3, #96	; 0x60
 8001d82:	443b      	add	r3, r7
 8001d84:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d011      	beq.n	8001dbe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001da2:	f023 0107 	bic.w	r1, r3, #7
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3360      	adds	r3, #96	; 0x60
 8001dae:	443b      	add	r3, r7
 8001db0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3360      	adds	r3, #96	; 0x60
 8001dda:	443b      	add	r3, r7
 8001ddc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001de0:	011a      	lsls	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dfc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3360      	adds	r3, #96	; 0x60
 8001e08:	443b      	add	r3, r7
 8001e0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e0e:	021a      	lsls	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_FDCAN_Init+0x3b8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d107      	bne.n	8001e34 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f022 0203 	bic.w	r2, r2, #3
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f981 	bl	8002154 <FDCAN_CalcultateRamBlockAddresses>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001e58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3760      	adds	r7, #96	; 0x60
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	4000a000 	.word	0x4000a000

08001e68 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e78:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d002      	beq.n	8001e86 <HAL_FDCAN_ConfigFilter+0x1e>
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d157      	bne.n	8001f36 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12b      	bne.n	8001ee6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	d10d      	bne.n	8001eb2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001ea2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001ea8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001eaa:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00e      	b.n	8001ed0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ebe:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001ec6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e025      	b.n	8001f32 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	075a      	lsls	r2, r3, #29
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b07      	cmp	r3, #7
 8001efa:	d103      	bne.n	8001f04 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e006      	b.n	8001f12 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	079a      	lsls	r2, r3, #30
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e008      	b.n	8001f48 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f3c:	f043 0202 	orr.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d111      	bne.n	8001f8c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e008      	b.n	8001f9e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d141      	bne.n	8002046 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fca:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e038      	b.n	8002058 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ffc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e026      	b.n	8002058 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa1d 	bl	8002460 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002036:	2201      	movs	r2, #1
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e008      	b.n	8002058 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800204c:	f043 0208 	orr.w	r2, r3, #8
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002072:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d002      	beq.n	8002080 <HAL_FDCAN_ActivateNotification+0x20>
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d155      	bne.n	800212c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	65da      	str	r2, [r3, #92]	; 0x5c
 800209e:	e014      	b.n	80020ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d108      	bne.n	80020c2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0202 	orr.w	r2, r2, #2
 80020be:	65da      	str	r2, [r3, #92]	; 0x5c
 80020c0:	e003      	b.n	80020ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2203      	movs	r2, #3
 80020c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	430a      	orrs	r2, r1
 8002102:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_FDCAN_ActivateNotification+0xec>)
 8002110:	4013      	ands	r3, r2
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	430b      	orrs	r3, r1
 8002118:	6553      	str	r3, [r2, #84]	; 0x54
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_FDCAN_ActivateNotification+0xf0>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0f9b      	lsrs	r3, r3, #30
 8002122:	490b      	ldr	r1, [pc, #44]	; (8002150 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e008      	b.n	800213e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	3fcfffff 	.word	0x3fcfffff
 8002150:	4000a800 	.word	0x4000a800

08002154 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800216a:	4ba7      	ldr	r3, [pc, #668]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800216c:	4013      	ands	r3, r2
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	0091      	lsls	r1, r2, #2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	430b      	orrs	r3, r1
 8002178:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002184:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021aa:	4b97      	ldr	r3, [pc, #604]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	0091      	lsls	r1, r2, #2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	430b      	orrs	r3, r1
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80021ec:	4b86      	ldr	r3, [pc, #536]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	0091      	lsls	r1, r2, #2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002206:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002234:	4b74      	ldr	r3, [pc, #464]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	0091      	lsls	r1, r2, #2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800224e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	0091      	lsls	r1, r2, #2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80022a8:	4b57      	ldr	r3, [pc, #348]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	0091      	lsls	r1, r2, #2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4413      	add	r3, r2
 80022e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	0091      	lsls	r1, r2, #2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	430b      	orrs	r3, r1
 80022f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002304:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002320:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002328:	061a      	lsls	r2, r3, #24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d915      	bls.n	8002430 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002404:	e006      	b.n	8002414 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002406:	bf00      	nop
 8002408:	ffff0003 	.word	0xffff0003
 800240c:	10002b00 	.word	0x10002b00
 8002410:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e010      	b.n	8002452 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e005      	b.n	8002444 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d3f3      	bcc.n	8002438 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop

08002460 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800247e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002486:	4313      	orrs	r3, r2
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e00a      	b.n	80024a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002494:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800249a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800249c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80024ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80024b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80024b8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	3304      	adds	r3, #4
 80024e2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3304      	adds	r3, #4
 80024ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e020      	b.n	8002538 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3303      	adds	r3, #3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3302      	adds	r3, #2
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	440b      	add	r3, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800250e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	440b      	add	r3, r1
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800251c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	440a      	add	r2, r1
 8002524:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002526:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	3304      	adds	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3304      	adds	r3, #4
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <FDCAN_CopyMessageToRAM+0xf8>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	461a      	mov	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4293      	cmp	r3, r2
 8002548:	d3d5      	bcc.n	80024f6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	3724      	adds	r7, #36	; 0x24
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	0800b354 	.word	0x0800b354

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800256a:	4b89      	ldr	r3, [pc, #548]	; (8002790 <HAL_GPIO_Init+0x234>)
 800256c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800256e:	e194      	b.n	800289a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8186 	beq.w	8002894 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d005      	beq.n	80025a0 <HAL_GPIO_Init+0x44>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d130      	bne.n	8002602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d6:	2201      	movs	r2, #1
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0201 	and.w	r2, r3, #1
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b03      	cmp	r3, #3
 800260c:	d017      	beq.n	800263e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d123      	bne.n	8002692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	69b9      	ldr	r1, [r7, #24]
 800268e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80e0 	beq.w	8002894 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x238>)
 80026d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026da:	4a2e      	ldr	r2, [pc, #184]	; (8002794 <HAL_GPIO_Init+0x238>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_GPIO_Init+0x238>)
 80026e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_GPIO_Init+0x23c>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_GPIO_Init+0x240>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d052      	beq.n	80027c4 <HAL_GPIO_Init+0x268>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_GPIO_Init+0x244>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_GPIO_Init+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x22a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <HAL_GPIO_Init+0x24c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_GPIO_Init+0x250>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_GPIO_Init+0x254>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_GPIO_Init+0x258>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x21a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_GPIO_Init+0x25c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x216>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_GPIO_Init+0x260>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x212>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_GPIO_Init+0x264>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x20e>
 8002766:	2309      	movs	r3, #9
 8002768:	e02d      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800276a:	230a      	movs	r3, #10
 800276c:	e02b      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800276e:	2308      	movs	r3, #8
 8002770:	e029      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002772:	2307      	movs	r3, #7
 8002774:	e027      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002776:	2306      	movs	r3, #6
 8002778:	e025      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800277a:	2305      	movs	r3, #5
 800277c:	e023      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800277e:	2304      	movs	r3, #4
 8002780:	e021      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002782:	2303      	movs	r3, #3
 8002784:	e01f      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002786:	2302      	movs	r3, #2
 8002788:	e01d      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800278a:	2301      	movs	r3, #1
 800278c:	e01b      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800278e:	bf00      	nop
 8002790:	58000080 	.word	0x58000080
 8002794:	58024400 	.word	0x58024400
 8002798:	58000400 	.word	0x58000400
 800279c:	58020000 	.word	0x58020000
 80027a0:	58020400 	.word	0x58020400
 80027a4:	58020800 	.word	0x58020800
 80027a8:	58020c00 	.word	0x58020c00
 80027ac:	58021000 	.word	0x58021000
 80027b0:	58021400 	.word	0x58021400
 80027b4:	58021800 	.word	0x58021800
 80027b8:	58021c00 	.word	0x58021c00
 80027bc:	58022000 	.word	0x58022000
 80027c0:	58022400 	.word	0x58022400
 80027c4:	2300      	movs	r3, #0
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d6:	4938      	ldr	r1, [pc, #224]	; (80028b8 <HAL_GPIO_Init+0x35c>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f ae63 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	58000400 	.word	0x58000400

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80028f8:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_HSEM_FastTake+0x2c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3320      	adds	r3, #32
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_HSEM_FastTake+0x30>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	58026400 	.word	0x58026400
 8002920:	80000300 	.word	0x80000300

08002924 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800292e:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_HSEM_Release+0x24>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	58026400 	.word	0x58026400

0800294c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	2b06      	cmp	r3, #6
 800295e:	d00a      	beq.n	8002976 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e040      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e03e      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002986:	f7fe ff69 	bl	800185c <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800298c:	e009      	b.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800298e:	f7fe ff65 	bl	800185c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299c:	d901      	bls.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e028      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d1ee      	bne.n	800298e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b1e      	cmp	r3, #30
 80029b4:	d008      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b2e      	cmp	r3, #46	; 0x2e
 80029ba:	d005      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b1d      	cmp	r3, #29
 80029c0:	d002      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b2d      	cmp	r3, #45	; 0x2d
 80029c6:	d114      	bne.n	80029f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029c8:	f7fe ff48 	bl	800185c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029d0:	f7fe ff44 	bl	800185c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc1d 	b.w	800324e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8087 	beq.w	8002b30 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b99      	ldr	r3, [pc, #612]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2c:	4b96      	ldr	r3, [pc, #600]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x48>
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d110      	bne.n	8002a60 <HAL_RCC_OscConfig+0x60>
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b8f      	ldr	r3, [pc, #572]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d06c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x12e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d168      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e3f6      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x78>
 8002a6a:	4b87      	ldr	r3, [pc, #540]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a86      	ldr	r2, [pc, #536]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e02e      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x9a>
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a80      	ldr	r2, [pc, #512]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7d      	ldr	r2, [pc, #500]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e01d      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0xbe>
 8002aa4:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a77      	ldr	r2, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a74      	ldr	r2, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a71      	ldr	r2, [pc, #452]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe febd 	bl	800185c <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae6:	f7fe feb9 	bl	800185c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e3aa      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af8:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0xe6>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fea9 	bl	800185c <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fea5 	bl	800185c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e396      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x10e>
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80cb 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3e:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b46:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_RCC_OscConfig+0x164>
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2b18      	cmp	r3, #24
 8002b58:	d156      	bne.n	8002c08 <HAL_RCC_OscConfig+0x208>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d151      	bne.n	8002c08 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b64:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x17c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e368      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 0219 	bic.w	r2, r3, #25
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	493f      	ldr	r1, [pc, #252]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8e:	f7fe fe65 	bl	800185c <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fe61 	bl	800185c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e352      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	f7fe fe5e 	bl	8001874 <HAL_GetREVID>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d817      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x1f2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1dc>
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bd2:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bda:	e07b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	031b      	lsls	r3, r3, #12
 8002bea:	4927      	ldr	r1, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf0:	e070      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	4921      	ldr	r1, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c06:	e065      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d048      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0219 	bic.w	r2, r3, #25
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	491a      	ldr	r1, [pc, #104]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe1b 	bl	800185c <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fe17 	bl	800185c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e308      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	f7fe fe14 	bl	8001874 <HAL_GetREVID>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d81a      	bhi.n	8002c8c <HAL_RCC_OscConfig+0x28c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d108      	bne.n	8002c70 <HAL_RCC_OscConfig+0x270>
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	6053      	str	r3, [r2, #4]
 8002c6e:	e031      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	031b      	lsls	r3, r3, #12
 8002c7e:	4902      	ldr	r1, [pc, #8]	; (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e026      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c86:	bf00      	nop
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	4b9a      	ldr	r3, [pc, #616]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4997      	ldr	r1, [pc, #604]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b95      	ldr	r3, [pc, #596]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a94      	ldr	r2, [pc, #592]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fdd5 	bl	800185c <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fdd1 	bl	800185c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e2c2      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc8:	4b8b      	ldr	r3, [pc, #556]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a9 	beq.w	8002e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cec:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x308>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	d13a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d135      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d08:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e296      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d20:	f7fe fda8 	bl	8001874 <HAL_GetREVID>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d817      	bhi.n	8002d5e <HAL_RCC_OscConfig+0x35e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d108      	bne.n	8002d48 <HAL_RCC_OscConfig+0x348>
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d3e:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d46:	e075      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d48:	4b6b      	ldr	r3, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	4968      	ldr	r1, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d5c:	e06a      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	4962      	ldr	r1, [pc, #392]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d72:	e05f      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d042      	beq.n	8002e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd68 	bl	800185c <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d90:	f7fe fd64 	bl	800185c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e255      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da2:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dae:	f7fe fd61 	bl	8001874 <HAL_GetREVID>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d817      	bhi.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d108      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dd6:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e023      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dec:	4b42      	ldr	r3, [pc, #264]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	493f      	ldr	r1, [pc, #252]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fd25 	bl	800185c <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e16:	f7fe fd21 	bl	800185c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e212      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d036      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d019      	beq.n	8002e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fd02 	bl	800185c <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fcfe 	bl	800185c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1ef      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x45c>
 8002e7a:	e018      	b.n	8002eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fce8 	bl	800185c <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe fce4 	bl	800185c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1d5      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d039      	beq.n	8002f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01c      	beq.n	8002efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fcc5 	bl	800185c <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ed6:	f7fe fcc1 	bl	800185c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1b2      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
 8002ef4:	e01b      	b.n	8002f2e <HAL_RCC_OscConfig+0x52e>
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efc:	4b9b      	ldr	r3, [pc, #620]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9a      	ldr	r2, [pc, #616]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fca8 	bl	800185c <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f10:	f7fe fca4 	bl	800185c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e195      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f22:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8081 	beq.w	800303e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a8b      	ldr	r2, [pc, #556]	; (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f48:	f7fe fc88 	bl	800185c <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe fc84 	bl	800185c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e175      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f62:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x584>
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
 8002f82:	e02d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5a6>
 8002f8c:	4b77      	ldr	r3, [pc, #476]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a76      	ldr	r2, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	4b74      	ldr	r3, [pc, #464]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a73      	ldr	r2, [pc, #460]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5c8>
 8002fae:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a64      	ldr	r2, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fc38 	bl	800185c <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fc34 	bl	800185c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e123      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x5f0>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fc22 	bl	800185c <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fc1e 	bl	800185c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e10d      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8102 	beq.w	800324c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003048:	4b48      	ldr	r3, [pc, #288]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003050:	2b18      	cmp	r3, #24
 8003052:	f000 80bd 	beq.w	80031d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b02      	cmp	r3, #2
 800305c:	f040 809e 	bne.w	800319c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a41      	ldr	r2, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fbf6 	bl	800185c <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fbf2 	bl	800185c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0e3      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x774>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	430a      	orrs	r2, r1
 80030a6:	4931      	ldr	r1, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	628b      	str	r3, [r1, #40]	; 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	3b01      	subs	r3, #1
 80030b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	3b01      	subs	r3, #1
 80030bc:	025b      	lsls	r3, r3, #9
 80030be:	b29b      	uxth	r3, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	3b01      	subs	r3, #1
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030dc:	4923      	ldr	r1, [pc, #140]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030fa:	00d2      	lsls	r2, r2, #3
 80030fc:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f023 020c 	bic.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4917      	ldr	r1, [pc, #92]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f023 0202 	bic.w	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	4912      	ldr	r1, [pc, #72]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe fb7b 	bl	800185c <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003168:	e011      	b.n	800318e <HAL_RCC_OscConfig+0x78e>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	58024800 	.word	0x58024800
 8003174:	fffffc0c 	.word	0xfffffc0c
 8003178:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fb6e 	bl	800185c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e05f      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x77c>
 800319a:	e057      	b.n	800324c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fb58 	bl	800185c <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fb54 	bl	800185c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x7b0>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_OscConfig+0x858>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d031      	beq.n	8003248 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d12a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d122      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d108      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0e1b      	lsrs	r3, r3, #24
 800323a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400

0800325c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e19c      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b8a      	ldr	r3, [pc, #552]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b87      	ldr	r3, [pc, #540]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	4985      	ldr	r1, [pc, #532]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b83      	ldr	r3, [pc, #524]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e184      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4975      	ldr	r1, [pc, #468]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	496a      	ldr	r1, [pc, #424]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003314:	429a      	cmp	r2, r3
 8003316:	d908      	bls.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003318:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	495e      	ldr	r1, [pc, #376]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003342:	429a      	cmp	r2, r3
 8003344:	d908      	bls.n	8003358 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003346:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4953      	ldr	r1, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4947      	ldr	r1, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003382:	4313      	orrs	r3, r2
 8003384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d055      	beq.n	800343e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4940      	ldr	r1, [pc, #256]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d121      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0f6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ea      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0de      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4925      	ldr	r1, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe fa25 	bl	800185c <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003414:	e00a      	b.n	800342c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003416:	f7fe fa21 	bl	800185c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0be      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	429a      	cmp	r2, r3
 800343c:	d1eb      	bne.n	8003416 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	429a      	cmp	r2, r3
 8003458:	d208      	bcs.n	800346c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003468:	4313      	orrs	r3, r2
 800346a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d214      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e086      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
 800349c:	52002000 	.word	0x52002000
 80034a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d208      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	492e      	ldr	r1, [pc, #184]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003518:	429a      	cmp	r2, r3
 800351a:	d208      	bcs.n	800352e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800352a:	4313      	orrs	r3, r2
 800352c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d010      	beq.n	800355c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003546:	429a      	cmp	r2, r3
 8003548:	d208      	bcs.n	800355c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4917      	ldr	r1, [pc, #92]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003558:	4313      	orrs	r3, r2
 800355a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800355c:	f000 f834 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	4912      	ldr	r1, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x360>)
 8003592:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003594:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <HAL_RCC_ClockConfig+0x364>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x368>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f912 	bl	80017c8 <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	0800b344 	.word	0x0800b344
 80035bc:	24000004 	.word	0x24000004
 80035c0:	24000000 	.word	0x24000000
 80035c4:	24000008 	.word	0x24000008

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ce:	4bb3      	ldr	r3, [pc, #716]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d6:	2b18      	cmp	r3, #24
 80035d8:	f200 8155 	bhi.w	8003886 <HAL_RCC_GetSysClockFreq+0x2be>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003649 	.word	0x08003649
 80035e8:	08003887 	.word	0x08003887
 80035ec:	08003887 	.word	0x08003887
 80035f0:	08003887 	.word	0x08003887
 80035f4:	08003887 	.word	0x08003887
 80035f8:	08003887 	.word	0x08003887
 80035fc:	08003887 	.word	0x08003887
 8003600:	08003887 	.word	0x08003887
 8003604:	0800366f 	.word	0x0800366f
 8003608:	08003887 	.word	0x08003887
 800360c:	08003887 	.word	0x08003887
 8003610:	08003887 	.word	0x08003887
 8003614:	08003887 	.word	0x08003887
 8003618:	08003887 	.word	0x08003887
 800361c:	08003887 	.word	0x08003887
 8003620:	08003887 	.word	0x08003887
 8003624:	08003675 	.word	0x08003675
 8003628:	08003887 	.word	0x08003887
 800362c:	08003887 	.word	0x08003887
 8003630:	08003887 	.word	0x08003887
 8003634:	08003887 	.word	0x08003887
 8003638:	08003887 	.word	0x08003887
 800363c:	08003887 	.word	0x08003887
 8003640:	08003887 	.word	0x08003887
 8003644:	0800367b 	.word	0x0800367b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003648:	4b94      	ldr	r3, [pc, #592]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003654:	4b91      	ldr	r3, [pc, #580]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	4a90      	ldr	r2, [pc, #576]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003666:	e111      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003668:	4b8d      	ldr	r3, [pc, #564]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800366a:	61bb      	str	r3, [r7, #24]
    break;
 800366c:	e10e      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800366e:	4b8d      	ldr	r3, [pc, #564]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003670:	61bb      	str	r3, [r7, #24]
    break;
 8003672:	e10b      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003676:	61bb      	str	r3, [r7, #24]
    break;
 8003678:	e108      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003684:	4b85      	ldr	r3, [pc, #532]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003690:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	08db      	lsrs	r3, r3, #3
 80036a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80e1 	beq.w	8003880 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	f000 8083 	beq.w	80037cc <HAL_RCC_GetSysClockFreq+0x204>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	f200 80a1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x248>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x114>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d056      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036da:	e099      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036dc:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003742:	e087      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003766:	ed97 6a02 	vldr	s12, [r7, #8]
 800376a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003786:	e065      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ca:	e043      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800380e:	e021      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a02 	vldr	s12, [r7, #8]
 8003836:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003852:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	0a5b      	lsrs	r3, r3, #9
 800385a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385e:	3301      	adds	r3, #1
 8003860:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800386c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
    break;
 800388a:	bf00      	nop
  }

  return sysclockfreq;
 800388c:	69bb      	ldr	r3, [r7, #24]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
 80038a0:	03d09000 	.word	0x03d09000
 80038a4:	003d0900 	.word	0x003d0900
 80038a8:	007a1200 	.word	0x007a1200
 80038ac:	46000000 	.word	0x46000000
 80038b0:	4c742400 	.word	0x4c742400
 80038b4:	4a742400 	.word	0x4a742400
 80038b8:	4af42400 	.word	0x4af42400

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038c2:	f7ff fe81 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490f      	ldr	r1, [pc, #60]	; (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 80038f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	58024400 	.word	0x58024400
 8003910:	0800b344 	.word	0x0800b344
 8003914:	24000004 	.word	0x24000004
 8003918:	24000000 	.word	0x24000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003920:	f7ff ffcc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024400 	.word	0x58024400
 8003944:	0800b344 	.word	0x0800b344

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800394c:	f7ff ffb6 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	58024400 	.word	0x58024400
 8003970:	0800b344 	.word	0x0800b344

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003980:	2300      	movs	r3, #0
 8003982:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003998:	d02a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800399a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800399e:	d824      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a4:	d018      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039aa:	d81e      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b4:	d007      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039b6:	e018      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4ba3      	ldr	r3, [pc, #652]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4aa2      	ldr	r2, [pc, #648]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 f9d5 	bl	8004d7c <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa7e 	bl	8004ee0 <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039f8:	4b93      	ldr	r3, [pc, #588]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a04:	4990      	ldr	r1, [pc, #576]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	650b      	str	r3, [r1, #80]	; 0x50
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03d      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d826      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a41 	.word	0x08003a41
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a79 	.word	0x08003a79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f991 	bl	8004d7c <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fa3a 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b71      	ldr	r3, [pc, #452]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	496e      	ldr	r1, [pc, #440]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	650b      	str	r3, [r1, #80]	; 0x50
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d042      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aac:	d02b      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab2:	d825      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8003aba:	d821      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d016      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d81d      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d007      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003acc:	e018      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ada:	e017      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f94a 	bl	8004d7c <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003aec:	e00e      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3324      	adds	r3, #36	; 0x24
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f9f3 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b12:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	494a      	ldr	r1, [pc, #296]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	650b      	str	r3, [r1, #80]	; 0x50
 8003b24:	e001      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d049      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b40:	d030      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b46:	d82a      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b52:	d824      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b58:	d018      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5e:	d81e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b68:	d007      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b6a:	e018      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	4a35      	ldr	r2, [pc, #212]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b78:	e017      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f8fb 	bl	8004d7c <RCCEx_PLL2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e00e      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f9a4 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bbe:	4922      	ldr	r1, [pc, #136]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc4:	e001      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04b      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be0:	d030      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be6:	d82a      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003be8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bec:	d02e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf2:	d824      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf8:	d018      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfe:	d81e      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d007      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c18:	e019      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f8ab 	bl	8004d7c <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c2a:	e010      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 f954 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e007      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
      break;
 8003c42:	e004      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c48:	58024400 	.word	0x58024400
      break;
 8003c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c54:	4b99      	ldr	r3, [pc, #612]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c62:	4996      	ldr	r1, [pc, #600]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	658b      	str	r3, [r1, #88]	; 0x58
 8003c68:	e001      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d032      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	2b30      	cmp	r3, #48	; 0x30
 8003c80:	d01c      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003c82:	2b30      	cmp	r3, #48	; 0x30
 8003c84:	d817      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d00c      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d813      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d10f      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c96:	4b89      	ldr	r3, [pc, #548]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	4a88      	ldr	r2, [pc, #544]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ca2:	e00e      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f866 	bl	8004d7c <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cc8:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	4979      	ldr	r1, [pc, #484]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d047      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf4:	d030      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfa:	d82a      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003cfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d00:	d02c      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d06:	d824      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d018      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d81e      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d007      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d2c:	e017      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f821 	bl	8004d7c <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d3e:	e00e      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3324      	adds	r3, #36	; 0x24
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f8ca 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d50:	e005      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d64:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	4952      	ldr	r1, [pc, #328]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	650b      	str	r3, [r1, #80]	; 0x50
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d049      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d90:	d02e      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d96:	d828      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9c:	d02a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da2:	d822      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003da4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da8:	d026      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003daa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dae:	d81c      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dba:	d816      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d111      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 ffd5 	bl	8004d7c <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dd6:	e012      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f87e 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003de8:	e009      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      break;
 8003dee:	e006      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003df0:	bf00      	nop
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	492a      	ldr	r1, [pc, #168]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	650b      	str	r3, [r1, #80]	; 0x50
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d04d      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e32:	d02e      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e38:	d828      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d02a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d822      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e4a:	d026      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003e4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e50:	d81c      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e56:	d010      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5c:	d816      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e66:	d111      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 ff84 	bl	8004d7c <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e78:	e012      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	; 0x24
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f82d 	bl	8004ee0 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eb4:	4901      	ldr	r1, [pc, #4]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ede:	d814      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4baf      	ldr	r3, [pc, #700]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4aae      	ldr	r2, [pc, #696]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ff3c 	bl	8004d7c <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f18:	4ba3      	ldr	r3, [pc, #652]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f24:	49a0      	ldr	r1, [pc, #640]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	650b      	str	r3, [r1, #80]	; 0x50
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d032      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d81b      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f5d 	.word	0x08003f5d
 8003f54:	08003f6b 	.word	0x08003f6b
 8003f58:	08003f83 	.word	0x08003f83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5c:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a91      	ldr	r2, [pc, #580]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 ff03 	bl	8004d7c <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f8a:	4b87      	ldr	r3, [pc, #540]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4984      	ldr	r1, [pc, #528]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f9c:	e001      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8086 	beq.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a7d      	ldr	r2, [pc, #500]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fc4e 	bl	800185c <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fd fc4a 	bl	800185c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d902      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	75fb      	strb	r3, [r7, #23]
        break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd8:	4b74      	ldr	r3, [pc, #464]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d166      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ff4:	4053      	eors	r3, r2
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d013      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004006:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004008:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a66      	ldr	r2, [pc, #408]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004014:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a63      	ldr	r2, [pc, #396]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004020:	4a61      	ldr	r2, [pc, #388]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d115      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd fc13 	bl	800185c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004038:	e00b      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd fc0f 	bl	800185c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d902      	bls.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	75fb      	strb	r3, [r7, #23]
            break;
 8004050:	e005      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004052:	4b55      	ldr	r3, [pc, #340]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ed      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d126      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004072:	d10d      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004074:	4b4c      	ldr	r3, [pc, #304]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004082:	0919      	lsrs	r1, r3, #4
 8004084:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004086:	400b      	ands	r3, r1
 8004088:	4947      	ldr	r1, [pc, #284]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800408a:	4313      	orrs	r3, r2
 800408c:	610b      	str	r3, [r1, #16]
 800408e:	e005      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	4a44      	ldr	r2, [pc, #272]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004096:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800409a:	6113      	str	r3, [r2, #16]
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800409e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	493f      	ldr	r1, [pc, #252]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	670b      	str	r3, [r1, #112]	; 0x70
 80040b0:	e004      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	75bb      	strb	r3, [r7, #22]
 80040b6:	e001      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8085 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	2b28      	cmp	r3, #40	; 0x28
 80040d0:	d866      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	080041a1 	.word	0x080041a1
 80040e0:	080041a1 	.word	0x080041a1
 80040e4:	080041a1 	.word	0x080041a1
 80040e8:	080041a1 	.word	0x080041a1
 80040ec:	080041a1 	.word	0x080041a1
 80040f0:	080041a1 	.word	0x080041a1
 80040f4:	080041a1 	.word	0x080041a1
 80040f8:	0800417d 	.word	0x0800417d
 80040fc:	080041a1 	.word	0x080041a1
 8004100:	080041a1 	.word	0x080041a1
 8004104:	080041a1 	.word	0x080041a1
 8004108:	080041a1 	.word	0x080041a1
 800410c:	080041a1 	.word	0x080041a1
 8004110:	080041a1 	.word	0x080041a1
 8004114:	080041a1 	.word	0x080041a1
 8004118:	0800418f 	.word	0x0800418f
 800411c:	080041a1 	.word	0x080041a1
 8004120:	080041a1 	.word	0x080041a1
 8004124:	080041a1 	.word	0x080041a1
 8004128:	080041a1 	.word	0x080041a1
 800412c:	080041a1 	.word	0x080041a1
 8004130:	080041a1 	.word	0x080041a1
 8004134:	080041a1 	.word	0x080041a1
 8004138:	080041b5 	.word	0x080041b5
 800413c:	080041a1 	.word	0x080041a1
 8004140:	080041a1 	.word	0x080041a1
 8004144:	080041a1 	.word	0x080041a1
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041a1 	.word	0x080041a1
 8004150:	080041a1 	.word	0x080041a1
 8004154:	080041a1 	.word	0x080041a1
 8004158:	080041b5 	.word	0x080041b5
 800415c:	080041a1 	.word	0x080041a1
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b5 	.word	0x080041b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fdfa 	bl	8004d7c <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800418c:	e013      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fea3 	bl	8004ee0 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800419e:	e00a      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e007      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	58024800 	.word	0x58024800
 80041b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80041b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041bc:	4b96      	ldr	r3, [pc, #600]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	4993      	ldr	r1, [pc, #588]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	654b      	str	r3, [r1, #84]	; 0x54
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d038      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d821      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004233 	.word	0x08004233
 80041f4:	08004209 	.word	0x08004209
 80041f8:	0800421b 	.word	0x0800421b
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fdb4 	bl	8004d7c <RCCEx_PLL2_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004218:	e00c      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3324      	adds	r3, #36	; 0x24
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fe5d 	bl	8004ee0 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
      break;
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800423a:	4b77      	ldr	r3, [pc, #476]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f023 0207 	bic.w	r2, r3, #7
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	4974      	ldr	r1, [pc, #464]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	654b      	str	r3, [r1, #84]	; 0x54
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	2b05      	cmp	r3, #5
 8004266:	d821      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042b3 	.word	0x080042b3
 8004274:	08004289 	.word	0x08004289
 8004278:	0800429b 	.word	0x0800429b
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042b3 	.word	0x080042b3
 8004284:	080042b3 	.word	0x080042b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2101      	movs	r1, #1
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fd74 	bl	8004d7c <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004298:	e00c      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3324      	adds	r3, #36	; 0x24
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fe1d 	bl	8004ee0 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80042b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f023 0207 	bic.w	r2, r3, #7
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4953      	ldr	r1, [pc, #332]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	658b      	str	r3, [r1, #88]	; 0x58
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d04b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ea:	d02e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f0:	d828      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d02a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d822      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004302:	d026      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004308:	d81c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430e:	d010      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004314:	d816      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800431a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800431e:	d111      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fd28 	bl	8004d7c <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004330:	e012      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fdd1 	bl	8004ee0 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	492a      	ldr	r1, [pc, #168]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	654b      	str	r3, [r1, #84]	; 0x54
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d04d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800438e:	d02e      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004390:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004394:	d828      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439a:	d02a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d822      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80043a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043a6:	d026      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d81c      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d010      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d816      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01d      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d111      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fcd6 	bl	8004d7c <RCCEx_PLL2_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043d4:	e012      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3324      	adds	r3, #36	; 0x24
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd7f 	bl	8004ee0 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
      break;
 80043ec:	e006      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004410:	4901      	ldr	r1, [pc, #4]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	658b      	str	r3, [r1, #88]	; 0x58
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04b      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004432:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004436:	d02e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800443c:	d828      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d02a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d822      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800444a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800444e:	d026      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004450:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004454:	d81c      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445a:	d010      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800445c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004460:	d816      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	d111      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fc82 	bl	8004d7c <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800447c:	e012      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd2b 	bl	8004ee0 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80044a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044aa:	4b9d      	ldr	r3, [pc, #628]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b8:	4999      	ldr	r1, [pc, #612]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	658b      	str	r3, [r1, #88]	; 0x58
 80044be:	e001      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d10a      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fcfc 	bl	8004ee0 <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044f2:	4b8b      	ldr	r3, [pc, #556]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004500:	4987      	ldr	r1, [pc, #540]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004502:	4313      	orrs	r3, r2
 8004504:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d10a      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fcdb 	bl	8004ee0 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004534:	4b7a      	ldr	r3, [pc, #488]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004542:	4977      	ldr	r1, [pc, #476]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d034      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800455a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455e:	d01d      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004564:	d817      	bhi.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456e:	d009      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004570:	e011      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fbff 	bl	8004d7c <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004582:	e00c      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fca8 	bl	8004ee0 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
      break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800459c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a4:	4b5e      	ldr	r3, [pc, #376]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045b2:	495b      	ldr	r1, [pc, #364]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	658b      	str	r3, [r1, #88]	; 0x58
 80045b8:	e001      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d033      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d4:	d01c      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80045d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045da:	d816      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80045dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80045e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e6:	d007      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80045e8:	e00f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ea:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	4a4c      	ldr	r2, [pc, #304]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045f6:	e00c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3324      	adds	r3, #36	; 0x24
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fc6e 	bl	8004ee0 <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	493e      	ldr	r1, [pc, #248]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	654b      	str	r3, [r1, #84]	; 0x54
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d029      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d007      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800464c:	e00f      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464e:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	4a33      	ldr	r2, [pc, #204]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800465a:	e00b      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb8a 	bl	8004d7c <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800466c:	e002      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
      break;
 8004672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	4926      	ldr	r1, [pc, #152]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004688:	4313      	orrs	r3, r2
 800468a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800468c:	e001      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fc1b 	bl	8004ee0 <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d033      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d017      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d811      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d4:	d013      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d80b      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80046e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e4:	d106      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046f2:	e007      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
      break;
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10c      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004716:	4902      	ldr	r1, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	654b      	str	r3, [r1, #84]	; 0x54
 800471c:	e004      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	492e      	ldr	r1, [pc, #184]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004742:	4313      	orrs	r3, r2
 8004744:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004760:	4926      	ldr	r1, [pc, #152]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477e:	491f      	ldr	r1, [pc, #124]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004780:	4313      	orrs	r3, r2
 8004782:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004796:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800479a:	6113      	str	r3, [r2, #16]
 800479c:	4b17      	ldr	r3, [pc, #92]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047a6:	4915      	ldr	r1, [pc, #84]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da08      	bge.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	4906      	ldr	r1, [pc, #24]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80047e6:	7dbb      	ldrb	r3, [r7, #22]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400

08004800 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004804:	f7ff f85a 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58024400 	.word	0x58024400
 8004828:	0800b344 	.word	0x0800b344

0800482c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004834:	4ba1      	ldr	r3, [pc, #644]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800483e:	4b9f      	ldr	r3, [pc, #636]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	0b1b      	lsrs	r3, r3, #12
 8004844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004848:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800484a:	4b9c      	ldr	r3, [pc, #624]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004856:	4b99      	ldr	r3, [pc, #612]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8111 	beq.w	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b02      	cmp	r3, #2
 800487e:	f000 8083 	beq.w	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	f200 80a1 	bhi.w	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d056      	beq.n	8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004896:	e099      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004898:	4b88      	ldr	r3, [pc, #544]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d02d      	beq.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048a4:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	4a84      	ldr	r2, [pc, #528]	; (8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b7b      	ldr	r3, [pc, #492]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048fe:	e087      	b.n	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004912:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004922:	ed97 6a03 	vldr	s12, [r7, #12]
 8004926:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004942:	e065      	b.n	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a03 	vldr	s12, [r7, #12]
 800496a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004986:	e043      	b.n	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b48      	ldr	r3, [pc, #288]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ca:	e021      	b.n	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	0a5b      	lsrs	r3, r3, #9
 8004a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 2a90 	vmov	r2, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a64:	ee17 2a90 	vmov	r2, s15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	0e1b      	lsrs	r3, r3, #24
 8004a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a92:	ee17 2a90 	vmov	r2, s15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
}
 8004aae:	bf00      	nop
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	03d09000 	.word	0x03d09000
 8004ac4:	46000000 	.word	0x46000000
 8004ac8:	4c742400 	.word	0x4c742400
 8004acc:	4a742400 	.word	0x4a742400
 8004ad0:	4af42400 	.word	0x4af42400

08004ad4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004adc:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ae6:	4b9f      	ldr	r3, [pc, #636]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	0d1b      	lsrs	r3, r3, #20
 8004aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004af2:	4b9c      	ldr	r3, [pc, #624]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004afe:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8111 	beq.w	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f200 80a1 	bhi.w	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d056      	beq.n	8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b3e:	e099      	b.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b40:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b4c:	4b85      	ldr	r3, [pc, #532]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a84      	ldr	r2, [pc, #528]	; (8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ba6:	e087      	b.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bea:	e065      	b.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2e:	e043      	b.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c72:	e021      	b.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cde:	ee17 2a90 	vmov	r2, s15
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 2a90 	vmov	r2, s15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	58024400 	.word	0x58024400
 8004d68:	03d09000 	.word	0x03d09000
 8004d6c:	46000000 	.word	0x46000000
 8004d70:	4c742400 	.word	0x4c742400
 8004d74:	4a742400 	.word	0x4a742400
 8004d78:	4af42400 	.word	0x4af42400

08004d7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d8a:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d101      	bne.n	8004d9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e099      	b.n	8004ece <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d9a:	4b4f      	ldr	r3, [pc, #316]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4e      	ldr	r2, [pc, #312]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc fd59 	bl	800185c <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dae:	f7fc fd55 	bl	800185c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e086      	b.n	8004ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dc0:	4b45      	ldr	r3, [pc, #276]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dcc:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	031b      	lsls	r3, r3, #12
 8004dda:	493f      	ldr	r1, [pc, #252]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	628b      	str	r3, [r1, #40]	; 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	025b      	lsls	r3, r3, #9
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e10:	4931      	ldr	r1, [pc, #196]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e16:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	492d      	ldr	r1, [pc, #180]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e28:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	f023 0220 	bic.w	r2, r3, #32
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	4928      	ldr	r1, [pc, #160]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e3a:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <RCCEx_PLL2_Config+0x160>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	69d2      	ldr	r2, [r2, #28]
 8004e52:	00d2      	lsls	r2, r2, #3
 8004e54:	4920      	ldr	r1, [pc, #128]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	f043 0310 	orr.w	r3, r3, #16
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e78:	e00f      	b.n	8004e9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e8c:	e005      	b.n	8004e9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fcd9 	bl	800185c <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004eae:	f7fc fcd5 	bl	800185c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	ffff0007 	.word	0xffff0007

08004ee0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eee:	4b53      	ldr	r3, [pc, #332]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d101      	bne.n	8004efe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e099      	b.n	8005032 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004efe:	4b4f      	ldr	r3, [pc, #316]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a4e      	ldr	r2, [pc, #312]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc fca7 	bl	800185c <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f12:	f7fc fca3 	bl	800185c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e086      	b.n	8005032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f24:	4b45      	ldr	r3, [pc, #276]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f30:	4b42      	ldr	r3, [pc, #264]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	051b      	lsls	r3, r3, #20
 8004f3e:	493f      	ldr	r1, [pc, #252]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	628b      	str	r3, [r1, #40]	; 0x28
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	025b      	lsls	r3, r3, #9
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f74:	4931      	ldr	r1, [pc, #196]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f7a:	4b30      	ldr	r3, [pc, #192]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	492d      	ldr	r1, [pc, #180]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	4928      	ldr	r1, [pc, #160]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f9e:	4b27      	ldr	r3, [pc, #156]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	4a26      	ldr	r2, [pc, #152]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <RCCEx_PLL3_Config+0x160>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	69d2      	ldr	r2, [r2, #28]
 8004fb6:	00d2      	lsls	r2, r2, #3
 8004fb8:	4920      	ldr	r1, [pc, #128]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fdc:	e00f      	b.n	8004ffe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ff0:	e005      	b.n	8004ffe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a11      	ldr	r2, [pc, #68]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a0e      	ldr	r2, [pc, #56]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8005004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fc fc27 	bl	800185c <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005010:	e008      	b.n	8005024 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005012:	f7fc fc23 	bl	800185c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e006      	b.n	8005032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <RCCEx_PLL3_Config+0x15c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400
 8005040:	ffff0007 	.word	0xffff0007

08005044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e08f      	b.n	8005178 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc f961 	bl	8001334 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <HAL_TIM_Encoder_Init+0x13c>)
 8005086:	400b      	ands	r3, r1
 8005088:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f000 fa71 	bl	800557c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <HAL_TIM_Encoder_Init+0x140>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	4313      	orrs	r3, r2
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_TIM_Encoder_Init+0x144>)
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_TIM_Encoder_Init+0x148>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	4313      	orrs	r3, r2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	011a      	lsls	r2, r3, #4
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	031b      	lsls	r3, r3, #12
 8005104:	4313      	orrs	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	4313      	orrs	r3, r2
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	fffebff8 	.word	0xfffebff8
 8005184:	fffffcfc 	.word	0xfffffcfc
 8005188:	fffff3f3 	.word	0xfffff3f3
 800518c:	ffff0f0f 	.word	0xffff0f0f

08005190 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d102      	bne.n	80051cc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051c6:	7b7b      	ldrb	r3, [r7, #13]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e089      	b.n	80052e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e0:	e031      	b.n	8005246 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d110      	bne.n	800520a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ee:	7b3b      	ldrb	r3, [r7, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d001      	beq.n	80051f8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e075      	b.n	80052e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005208:	e01d      	b.n	8005246 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d108      	bne.n	8005222 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d102      	bne.n	8005222 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800521c:	7b3b      	ldrb	r3, [r7, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d001      	beq.n	8005226 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e05e      	b.n	80052e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_TIM_Encoder_Start_IT+0xc4>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d010      	beq.n	8005274 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005252:	e01f      	b.n	8005294 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fa27 	bl	80056b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0202 	orr.w	r2, r2, #2
 8005270:	60da      	str	r2, [r3, #12]
      break;
 8005272:	e02e      	b.n	80052d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2201      	movs	r2, #1
 800527a:	2104      	movs	r1, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fa17 	bl	80056b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0204 	orr.w	r2, r2, #4
 8005290:	60da      	str	r2, [r3, #12]
      break;
 8005292:	e01e      	b.n	80052d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fa07 	bl	80056b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	2104      	movs	r1, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa00 	bl	80056b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0202 	orr.w	r2, r2, #2
 80052be:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0204 	orr.w	r2, r2, #4
 80052ce:	60da      	str	r2, [r3, #12]
      break;
 80052d0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0202 	mvn.w	r2, #2
 8005318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb fc3a 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f901 	bl	800553e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f908 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0204 	mvn.w	r2, #4
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fb fc10 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8d7 	bl	800553e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8de 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fbe6 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8ad 	bl	800553e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8b4 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b10      	cmp	r3, #16
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0210 	mvn.w	r2, #16
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2208      	movs	r2, #8
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fbbc 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f883 	bl	800553e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f88a 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0201 	mvn.w	r2, #1
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f85d 	bl	800552a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9c8 	bl	800582c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054aa:	d10e      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f9bb 	bl	8005840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d10e      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f838 	bl	8005566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b20      	cmp	r3, #32
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0220 	mvn.w	r2, #32
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f97b 	bl	8005818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a40      	ldr	r2, [pc, #256]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3b      	ldr	r2, [pc, #236]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <TIM_Base_SetConfig+0x114>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a10      	ldr	r2, [pc, #64]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0f      	ldr	r2, [pc, #60]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e06d      	b.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d108      	bne.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800574e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a20      	ldr	r2, [pc, #128]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d01d      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40001800 	.word	0x40001800
 8005814:	40014000 	.word	0x40014000

08005818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e042      	b.n	80058ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fb fdad 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8c2 	bl	8005a20 <UART_SetConfig>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e022      	b.n	80058ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fe1e 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fea5 	bl	8006634 <UART_CheckIdleState>
 80058ea:	4603      	mov	r3, r0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590a:	2b20      	cmp	r3, #32
 800590c:	f040 8083 	bne.w	8005a16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Transmit+0x28>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e07b      	b.n	8005a18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_UART_Transmit+0x3a>
 800592a:	2302      	movs	r3, #2
 800592c:	e074      	b.n	8005a18 <HAL_UART_Transmit+0x124>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fb ff89 	bl	800185c <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005964:	d108      	bne.n	8005978 <HAL_UART_Transmit+0x84>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	e003      	b.n	8005980 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005988:	e02c      	b.n	80059e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fe98 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e039      	b.n	8005a18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3302      	adds	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e007      	b.n	80059d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1cc      	bne.n	800598a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fe65 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e006      	b.n	8005a18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e000      	b.n	8005a18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b092      	sub	sp, #72	; 0x48
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4bbe      	ldr	r3, [pc, #760]	; (8005d48 <UART_SetConfig+0x328>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4ab3      	ldr	r2, [pc, #716]	; (8005d4c <UART_SetConfig+0x32c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	4baf      	ldr	r3, [pc, #700]	; (8005d50 <UART_SetConfig+0x330>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f023 010f 	bic.w	r1, r3, #15
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4aa6      	ldr	r2, [pc, #664]	; (8005d54 <UART_SetConfig+0x334>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d177      	bne.n	8005bb0 <UART_SetConfig+0x190>
 8005ac0:	4ba5      	ldr	r3, [pc, #660]	; (8005d58 <UART_SetConfig+0x338>)
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ac8:	2b28      	cmp	r3, #40	; 0x28
 8005aca:	d86d      	bhi.n	8005ba8 <UART_SetConfig+0x188>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0xb4>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005ba9 	.word	0x08005ba9
 8005aec:	08005ba9 	.word	0x08005ba9
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005ba9 	.word	0x08005ba9
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005ba9 	.word	0x08005ba9
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005b91 	.word	0x08005b91
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	08005ba9 	.word	0x08005ba9
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005ba9 	.word	0x08005ba9
 8005b5c:	08005ba9 	.word	0x08005ba9
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e222      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e21e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e21a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e216      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e212      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e20e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e20a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a69      	ldr	r2, [pc, #420]	; (8005d5c <UART_SetConfig+0x33c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x1fc>
 8005bba:	4b67      	ldr	r3, [pc, #412]	; (8005d58 <UART_SetConfig+0x338>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x1f4>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x1ac>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e1ec      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e1e8      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e1e4      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e1e0      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e1dc      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e1d8      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e1d4      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a4f      	ldr	r2, [pc, #316]	; (8005d60 <UART_SetConfig+0x340>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x268>
 8005c26:	4b4c      	ldr	r3, [pc, #304]	; (8005d58 <UART_SetConfig+0x338>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x260>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x218>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e1b6      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e1b2      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e1ae      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e1aa      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e1a6      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1a2      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e19e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a35      	ldr	r2, [pc, #212]	; (8005d64 <UART_SetConfig+0x344>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d130      	bne.n	8005cf4 <UART_SetConfig+0x2d4>
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <UART_SetConfig+0x338>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d826      	bhi.n	8005cec <UART_SetConfig+0x2cc>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x284>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005ccd 	.word	0x08005ccd
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e180      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e17c      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e178      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e174      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e170      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e16c      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e168      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1b      	ldr	r2, [pc, #108]	; (8005d68 <UART_SetConfig+0x348>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d142      	bne.n	8005d84 <UART_SetConfig+0x364>
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <UART_SetConfig+0x338>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d838      	bhi.n	8005d7c <UART_SetConfig+0x35c>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x2f0>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d31 	.word	0x08005d31
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e14a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e146      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e142      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e13e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d48:	cfff69f3 	.word	0xcfff69f3
 8005d4c:	58000c00 	.word	0x58000c00
 8005d50:	11fff4ff 	.word	0x11fff4ff
 8005d54:	40011000 	.word	0x40011000
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	40004800 	.word	0x40004800
 8005d64:	40004c00 	.word	0x40004c00
 8005d68:	40005000 	.word	0x40005000
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e128      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e124      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e120      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4acb      	ldr	r2, [pc, #812]	; (80060b8 <UART_SetConfig+0x698>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d176      	bne.n	8005e7c <UART_SetConfig+0x45c>
 8005d8e:	4bcb      	ldr	r3, [pc, #812]	; (80060bc <UART_SetConfig+0x69c>)
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d96:	2b28      	cmp	r3, #40	; 0x28
 8005d98:	d86c      	bhi.n	8005e74 <UART_SetConfig+0x454>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0x380>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e75 	.word	0x08005e75
 8005da8:	08005e75 	.word	0x08005e75
 8005dac:	08005e75 	.word	0x08005e75
 8005db0:	08005e75 	.word	0x08005e75
 8005db4:	08005e75 	.word	0x08005e75
 8005db8:	08005e75 	.word	0x08005e75
 8005dbc:	08005e75 	.word	0x08005e75
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e75 	.word	0x08005e75
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e75 	.word	0x08005e75
 8005dd0:	08005e75 	.word	0x08005e75
 8005dd4:	08005e75 	.word	0x08005e75
 8005dd8:	08005e75 	.word	0x08005e75
 8005ddc:	08005e75 	.word	0x08005e75
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e75 	.word	0x08005e75
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005e75 	.word	0x08005e75
 8005df0:	08005e75 	.word	0x08005e75
 8005df4:	08005e75 	.word	0x08005e75
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e75 	.word	0x08005e75
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e75 	.word	0x08005e75
 8005e08:	08005e75 	.word	0x08005e75
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e0bc      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e0b8      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e0b4      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e0b0      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e0ac      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e0a8      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e0a4      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a8f      	ldr	r2, [pc, #572]	; (80060c0 <UART_SetConfig+0x6a0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d130      	bne.n	8005ee8 <UART_SetConfig+0x4c8>
 8005e86:	4b8d      	ldr	r3, [pc, #564]	; (80060bc <UART_SetConfig+0x69c>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d826      	bhi.n	8005ee0 <UART_SetConfig+0x4c0>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x478>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ec1 	.word	0x08005ec1
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e086      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e082      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e07e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e07a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e076      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e072      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e06e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a75      	ldr	r2, [pc, #468]	; (80060c4 <UART_SetConfig+0x6a4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d130      	bne.n	8005f54 <UART_SetConfig+0x534>
 8005ef2:	4b72      	ldr	r3, [pc, #456]	; (80060bc <UART_SetConfig+0x69c>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d826      	bhi.n	8005f4c <UART_SetConfig+0x52c>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0x4e4>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f1d 	.word	0x08005f1d
 8005f08:	08005f25 	.word	0x08005f25
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e050      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e04c      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e048      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e044      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e040      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e03c      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e038      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5b      	ldr	r2, [pc, #364]	; (80060c8 <UART_SetConfig+0x6a8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d130      	bne.n	8005fc0 <UART_SetConfig+0x5a0>
 8005f5e:	4b57      	ldr	r3, [pc, #348]	; (80060bc <UART_SetConfig+0x69c>)
 8005f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d826      	bhi.n	8005fb8 <UART_SetConfig+0x598>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x550>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e01a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e016      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e012      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e00e      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e00a      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005fb0:	2340      	movs	r3, #64	; 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e006      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e002      	b.n	8005fc6 <UART_SetConfig+0x5a6>
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <UART_SetConfig+0x6a8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	f040 80f8 	bne.w	80061c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	dc46      	bgt.n	8006068 <UART_SetConfig+0x648>
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	f2c0 8082 	blt.w	80060e4 <UART_SetConfig+0x6c4>
 8005fe0:	3b02      	subs	r3, #2
 8005fe2:	2b1e      	cmp	r3, #30
 8005fe4:	d87e      	bhi.n	80060e4 <UART_SetConfig+0x6c4>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x5cc>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	0800606f 	.word	0x0800606f
 8005ff0:	080060e5 	.word	0x080060e5
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	080060e5 	.word	0x080060e5
 8005ffc:	080060e5 	.word	0x080060e5
 8006000:	080060e5 	.word	0x080060e5
 8006004:	08006087 	.word	0x08006087
 8006008:	080060e5 	.word	0x080060e5
 800600c:	080060e5 	.word	0x080060e5
 8006010:	080060e5 	.word	0x080060e5
 8006014:	080060e5 	.word	0x080060e5
 8006018:	080060e5 	.word	0x080060e5
 800601c:	080060e5 	.word	0x080060e5
 8006020:	080060e5 	.word	0x080060e5
 8006024:	08006097 	.word	0x08006097
 8006028:	080060e5 	.word	0x080060e5
 800602c:	080060e5 	.word	0x080060e5
 8006030:	080060e5 	.word	0x080060e5
 8006034:	080060e5 	.word	0x080060e5
 8006038:	080060e5 	.word	0x080060e5
 800603c:	080060e5 	.word	0x080060e5
 8006040:	080060e5 	.word	0x080060e5
 8006044:	080060e5 	.word	0x080060e5
 8006048:	080060e5 	.word	0x080060e5
 800604c:	080060e5 	.word	0x080060e5
 8006050:	080060e5 	.word	0x080060e5
 8006054:	080060e5 	.word	0x080060e5
 8006058:	080060e5 	.word	0x080060e5
 800605c:	080060e5 	.word	0x080060e5
 8006060:	080060e5 	.word	0x080060e5
 8006064:	080060d7 	.word	0x080060d7
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d037      	beq.n	80060dc <UART_SetConfig+0x6bc>
 800606c:	e03a      	b.n	80060e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800606e:	f7fe fbc7 	bl	8004800 <HAL_RCCEx_GetD3PCLK1Freq>
 8006072:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006074:	e03c      	b.n	80060f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fbd6 	bl	800482c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006084:	e034      	b.n	80060f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006086:	f107 0318 	add.w	r3, r7, #24
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fd22 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006094:	e02c      	b.n	80060f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <UART_SetConfig+0x69c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060a2:	4b06      	ldr	r3, [pc, #24]	; (80060bc <UART_SetConfig+0x69c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	4a07      	ldr	r2, [pc, #28]	; (80060cc <UART_SetConfig+0x6ac>)
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060b4:	e01c      	b.n	80060f0 <UART_SetConfig+0x6d0>
 80060b6:	bf00      	nop
 80060b8:	40011400 	.word	0x40011400
 80060bc:	58024400 	.word	0x58024400
 80060c0:	40007800 	.word	0x40007800
 80060c4:	40007c00 	.word	0x40007c00
 80060c8:	58000c00 	.word	0x58000c00
 80060cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b9d      	ldr	r3, [pc, #628]	; (8006348 <UART_SetConfig+0x928>)
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d4:	e00c      	b.n	80060f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060d6:	4b9d      	ldr	r3, [pc, #628]	; (800634c <UART_SetConfig+0x92c>)
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060da:	e009      	b.n	80060f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e2:	e005      	b.n	80060f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 81de 	beq.w	80064b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	4a94      	ldr	r2, [pc, #592]	; (8006350 <UART_SetConfig+0x930>)
 80060fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006102:	461a      	mov	r2, r3
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	fbb3 f3f2 	udiv	r3, r3, r2
 800610a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006118:	429a      	cmp	r2, r3
 800611a:	d305      	bcc.n	8006128 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800612e:	e1c1      	b.n	80064b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	2200      	movs	r2, #0
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	60fa      	str	r2, [r7, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	4a84      	ldr	r2, [pc, #528]	; (8006350 <UART_SetConfig+0x930>)
 800613e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006142:	b29b      	uxth	r3, r3
 8006144:	2200      	movs	r2, #0
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800614e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006152:	f7fa fad9 	bl	8000708 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	020b      	lsls	r3, r1, #8
 8006168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800616c:	0202      	lsls	r2, r0, #8
 800616e:	6979      	ldr	r1, [r7, #20]
 8006170:	6849      	ldr	r1, [r1, #4]
 8006172:	0849      	lsrs	r1, r1, #1
 8006174:	2000      	movs	r0, #0
 8006176:	460c      	mov	r4, r1
 8006178:	4605      	mov	r5, r0
 800617a:	eb12 0804 	adds.w	r8, r2, r4
 800617e:	eb43 0905 	adc.w	r9, r3, r5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	469a      	mov	sl, r3
 800618a:	4693      	mov	fp, r2
 800618c:	4652      	mov	r2, sl
 800618e:	465b      	mov	r3, fp
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa fab8 	bl	8000708 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a6:	d308      	bcc.n	80061ba <UART_SetConfig+0x79a>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d204      	bcs.n	80061ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e17c      	b.n	80064b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061c0:	e178      	b.n	80064b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ca:	f040 80c5 	bne.w	8006358 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	dc48      	bgt.n	8006268 <UART_SetConfig+0x848>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	db7b      	blt.n	80062d2 <UART_SetConfig+0x8b2>
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d879      	bhi.n	80062d2 <UART_SetConfig+0x8b2>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x7c4>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	0800626f 	.word	0x0800626f
 80061e8:	08006277 	.word	0x08006277
 80061ec:	080062d3 	.word	0x080062d3
 80061f0:	080062d3 	.word	0x080062d3
 80061f4:	0800627f 	.word	0x0800627f
 80061f8:	080062d3 	.word	0x080062d3
 80061fc:	080062d3 	.word	0x080062d3
 8006200:	080062d3 	.word	0x080062d3
 8006204:	0800628f 	.word	0x0800628f
 8006208:	080062d3 	.word	0x080062d3
 800620c:	080062d3 	.word	0x080062d3
 8006210:	080062d3 	.word	0x080062d3
 8006214:	080062d3 	.word	0x080062d3
 8006218:	080062d3 	.word	0x080062d3
 800621c:	080062d3 	.word	0x080062d3
 8006220:	080062d3 	.word	0x080062d3
 8006224:	0800629f 	.word	0x0800629f
 8006228:	080062d3 	.word	0x080062d3
 800622c:	080062d3 	.word	0x080062d3
 8006230:	080062d3 	.word	0x080062d3
 8006234:	080062d3 	.word	0x080062d3
 8006238:	080062d3 	.word	0x080062d3
 800623c:	080062d3 	.word	0x080062d3
 8006240:	080062d3 	.word	0x080062d3
 8006244:	080062d3 	.word	0x080062d3
 8006248:	080062d3 	.word	0x080062d3
 800624c:	080062d3 	.word	0x080062d3
 8006250:	080062d3 	.word	0x080062d3
 8006254:	080062d3 	.word	0x080062d3
 8006258:	080062d3 	.word	0x080062d3
 800625c:	080062d3 	.word	0x080062d3
 8006260:	080062d3 	.word	0x080062d3
 8006264:	080062c5 	.word	0x080062c5
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d02e      	beq.n	80062ca <UART_SetConfig+0x8aa>
 800626c:	e031      	b.n	80062d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800626e:	f7fd fb55 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8006272:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006274:	e033      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006276:	f7fd fb67 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 800627a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800627c:	e02f      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fad2 	bl	800482c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800628c:	e027      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800628e:	f107 0318 	add.w	r3, r7, #24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fc1e 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629c:	e01f      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800629e:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <UART_SetConfig+0x934>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062aa:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <UART_SetConfig+0x934>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <UART_SetConfig+0x928>)
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062bc:	e00f      	b.n	80062de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062be:	4b22      	ldr	r3, [pc, #136]	; (8006348 <UART_SetConfig+0x928>)
 80062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c2:	e00c      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062c4:	4b21      	ldr	r3, [pc, #132]	; (800634c <UART_SetConfig+0x92c>)
 80062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c8:	e009      	b.n	80062de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d0:	e005      	b.n	80062de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80e7 	beq.w	80064b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	4a19      	ldr	r2, [pc, #100]	; (8006350 <UART_SetConfig+0x930>)
 80062ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	005a      	lsls	r2, r3, #1
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	441a      	add	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	2b0f      	cmp	r3, #15
 8006310:	d916      	bls.n	8006340 <UART_SetConfig+0x920>
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006318:	d212      	bcs.n	8006340 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	b29b      	uxth	r3, r3
 800631e:	f023 030f 	bic.w	r3, r3, #15
 8006322:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	b29b      	uxth	r3, r3
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	b29a      	uxth	r2, r3
 8006330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006332:	4313      	orrs	r3, r2
 8006334:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e0b9      	b.n	80064b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006346:	e0b5      	b.n	80064b4 <UART_SetConfig+0xa94>
 8006348:	03d09000 	.word	0x03d09000
 800634c:	003d0900 	.word	0x003d0900
 8006350:	0800b364 	.word	0x0800b364
 8006354:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006358:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800635c:	2b20      	cmp	r3, #32
 800635e:	dc49      	bgt.n	80063f4 <UART_SetConfig+0x9d4>
 8006360:	2b00      	cmp	r3, #0
 8006362:	db7c      	blt.n	800645e <UART_SetConfig+0xa3e>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d87a      	bhi.n	800645e <UART_SetConfig+0xa3e>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x950>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063fb 	.word	0x080063fb
 8006374:	08006403 	.word	0x08006403
 8006378:	0800645f 	.word	0x0800645f
 800637c:	0800645f 	.word	0x0800645f
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800645f 	.word	0x0800645f
 8006388:	0800645f 	.word	0x0800645f
 800638c:	0800645f 	.word	0x0800645f
 8006390:	0800641b 	.word	0x0800641b
 8006394:	0800645f 	.word	0x0800645f
 8006398:	0800645f 	.word	0x0800645f
 800639c:	0800645f 	.word	0x0800645f
 80063a0:	0800645f 	.word	0x0800645f
 80063a4:	0800645f 	.word	0x0800645f
 80063a8:	0800645f 	.word	0x0800645f
 80063ac:	0800645f 	.word	0x0800645f
 80063b0:	0800642b 	.word	0x0800642b
 80063b4:	0800645f 	.word	0x0800645f
 80063b8:	0800645f 	.word	0x0800645f
 80063bc:	0800645f 	.word	0x0800645f
 80063c0:	0800645f 	.word	0x0800645f
 80063c4:	0800645f 	.word	0x0800645f
 80063c8:	0800645f 	.word	0x0800645f
 80063cc:	0800645f 	.word	0x0800645f
 80063d0:	0800645f 	.word	0x0800645f
 80063d4:	0800645f 	.word	0x0800645f
 80063d8:	0800645f 	.word	0x0800645f
 80063dc:	0800645f 	.word	0x0800645f
 80063e0:	0800645f 	.word	0x0800645f
 80063e4:	0800645f 	.word	0x0800645f
 80063e8:	0800645f 	.word	0x0800645f
 80063ec:	0800645f 	.word	0x0800645f
 80063f0:	08006451 	.word	0x08006451
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d02e      	beq.n	8006456 <UART_SetConfig+0xa36>
 80063f8:	e031      	b.n	800645e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fa:	f7fd fa8f 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80063fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006400:	e033      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006402:	f7fd faa1 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8006406:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006408:	e02f      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fa0c 	bl	800482c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006418:	e027      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641a:	f107 0318 	add.w	r3, r7, #24
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fb58 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	e01f      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642a:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <UART_SetConfig+0xac0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006436:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <UART_SetConfig+0xac0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <UART_SetConfig+0xac4>)
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006448:	e00f      	b.n	800646a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800644a:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <UART_SetConfig+0xac4>)
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644e:	e00c      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006450:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <UART_SetConfig+0xac8>)
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006454:	e009      	b.n	800646a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645c:	e005      	b.n	800646a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006468:	bf00      	nop
    }

    if (pclk != 0U)
 800646a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d021      	beq.n	80064b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <UART_SetConfig+0xacc>)
 8006476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647a:	461a      	mov	r2, r3
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	441a      	add	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d909      	bls.n	80064ae <UART_SetConfig+0xa8e>
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d205      	bcs.n	80064ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e002      	b.n	80064b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3748      	adds	r7, #72	; 0x48
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
 80064e4:	03d09000 	.word	0x03d09000
 80064e8:	003d0900 	.word	0x003d0900
 80064ec:	0800b364 	.word	0x0800b364

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006644:	f7fb f90a 	bl	800185c <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10e      	bne.n	8006676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f82f 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e025      	b.n	80066c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d10e      	bne.n	80066a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f819 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00f      	b.n	80066c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b09c      	sub	sp, #112	; 0x70
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066da:	e0a9      	b.n	8006830 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	f000 80a5 	beq.w	8006830 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e6:	f7fb f8b9 	bl	800185c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <UART_WaitOnFlagUntilTimeout+0x32>
 80066f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d140      	bne.n	800677e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800670a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006710:	667b      	str	r3, [r7, #100]	; 0x64
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800671a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	663b      	str	r3, [r7, #96]	; 0x60
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800674e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800675c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e069      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d051      	beq.n	8006830 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800679a:	d149      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	637b      	str	r3, [r7, #52]	; 0x34
 80067c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067f8:	623a      	str	r2, [r7, #32]
 80067fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69f9      	ldr	r1, [r7, #28]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	61bb      	str	r3, [r7, #24]
   return(result);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e010      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	429a      	cmp	r2, r3
 800684c:	f43f af46 	beq.w	80066dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3770      	adds	r7, #112	; 0x70
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_UARTEx_DisableFifoMode+0x16>
 800686c:	2302      	movs	r3, #2
 800686e:	e027      	b.n	80068c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2224      	movs	r2, #36	; 0x24
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800689e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e02d      	b.n	8006940 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2224      	movs	r2, #36	; 0x24
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f84f 	bl	80069c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e02d      	b.n	80069bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2224      	movs	r2, #36	; 0x24
 800696c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f811 	bl	80069c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d108      	bne.n	80069e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069e4:	e031      	b.n	8006a4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069e6:	2310      	movs	r3, #16
 80069e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069ea:	2310      	movs	r3, #16
 80069ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	0e5b      	lsrs	r3, r3, #25
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	0f5b      	lsrs	r3, r3, #29
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	7b3a      	ldrb	r2, [r7, #12]
 8006a12:	4911      	ldr	r1, [pc, #68]	; (8006a58 <UARTEx_SetNbDataToProcess+0x94>)
 8006a14:	5c8a      	ldrb	r2, [r1, r2]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a1a:	7b3a      	ldrb	r2, [r7, #12]
 8006a1c:	490f      	ldr	r1, [pc, #60]	; (8006a5c <UARTEx_SetNbDataToProcess+0x98>)
 8006a1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	7b7a      	ldrb	r2, [r7, #13]
 8006a30:	4909      	ldr	r1, [pc, #36]	; (8006a58 <UARTEx_SetNbDataToProcess+0x94>)
 8006a32:	5c8a      	ldrb	r2, [r1, r2]
 8006a34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a38:	7b7a      	ldrb	r2, [r7, #13]
 8006a3a:	4908      	ldr	r1, [pc, #32]	; (8006a5c <UARTEx_SetNbDataToProcess+0x98>)
 8006a3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	0800b37c 	.word	0x0800b37c
 8006a5c:	0800b384 	.word	0x0800b384

08006a60 <__errno>:
 8006a60:	4b01      	ldr	r3, [pc, #4]	; (8006a68 <__errno+0x8>)
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	24000010 	.word	0x24000010

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4d0d      	ldr	r5, [pc, #52]	; (8006aa4 <__libc_init_array+0x38>)
 8006a70:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	2600      	movs	r6, #0
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	4d0b      	ldr	r5, [pc, #44]	; (8006aac <__libc_init_array+0x40>)
 8006a7e:	4c0c      	ldr	r4, [pc, #48]	; (8006ab0 <__libc_init_array+0x44>)
 8006a80:	f004 fc14 	bl	800b2ac <_init>
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	2600      	movs	r6, #0
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	0800b844 	.word	0x0800b844
 8006aa8:	0800b844 	.word	0x0800b844
 8006aac:	0800b844 	.word	0x0800b844
 8006ab0:	0800b848 	.word	0x0800b848

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aca:	4291      	cmp	r1, r2
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <memset>:
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <__cvt>:
 8006ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae2:	ed2d 8b02 	vpush	{d8}
 8006ae6:	eeb0 8b40 	vmov.f64	d8, d0
 8006aea:	b085      	sub	sp, #20
 8006aec:	4617      	mov	r7, r2
 8006aee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006af0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006af2:	ee18 2a90 	vmov	r2, s17
 8006af6:	f025 0520 	bic.w	r5, r5, #32
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	bfb6      	itet	lt
 8006afe:	222d      	movlt	r2, #45	; 0x2d
 8006b00:	2200      	movge	r2, #0
 8006b02:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b06:	2d46      	cmp	r5, #70	; 0x46
 8006b08:	460c      	mov	r4, r1
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	d004      	beq.n	8006b18 <__cvt+0x38>
 8006b0e:	2d45      	cmp	r5, #69	; 0x45
 8006b10:	d100      	bne.n	8006b14 <__cvt+0x34>
 8006b12:	3401      	adds	r4, #1
 8006b14:	2102      	movs	r1, #2
 8006b16:	e000      	b.n	8006b1a <__cvt+0x3a>
 8006b18:	2103      	movs	r1, #3
 8006b1a:	ab03      	add	r3, sp, #12
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	ab02      	add	r3, sp, #8
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4622      	mov	r2, r4
 8006b24:	4633      	mov	r3, r6
 8006b26:	eeb0 0b48 	vmov.f64	d0, d8
 8006b2a:	f001 fe7d 	bl	8008828 <_dtoa_r>
 8006b2e:	2d47      	cmp	r5, #71	; 0x47
 8006b30:	d101      	bne.n	8006b36 <__cvt+0x56>
 8006b32:	07fb      	lsls	r3, r7, #31
 8006b34:	d51a      	bpl.n	8006b6c <__cvt+0x8c>
 8006b36:	2d46      	cmp	r5, #70	; 0x46
 8006b38:	eb00 0204 	add.w	r2, r0, r4
 8006b3c:	d10c      	bne.n	8006b58 <__cvt+0x78>
 8006b3e:	7803      	ldrb	r3, [r0, #0]
 8006b40:	2b30      	cmp	r3, #48	; 0x30
 8006b42:	d107      	bne.n	8006b54 <__cvt+0x74>
 8006b44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	bf1c      	itt	ne
 8006b4e:	f1c4 0401 	rsbne	r4, r4, #1
 8006b52:	6034      	strne	r4, [r6, #0]
 8006b54:	6833      	ldr	r3, [r6, #0]
 8006b56:	441a      	add	r2, r3
 8006b58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	bf08      	it	eq
 8006b62:	9203      	streq	r2, [sp, #12]
 8006b64:	2130      	movs	r1, #48	; 0x30
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d307      	bcc.n	8006b7c <__cvt+0x9c>
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b70:	1a1b      	subs	r3, r3, r0
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	b005      	add	sp, #20
 8006b76:	ecbd 8b02 	vpop	{d8}
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	1c5c      	adds	r4, r3, #1
 8006b7e:	9403      	str	r4, [sp, #12]
 8006b80:	7019      	strb	r1, [r3, #0]
 8006b82:	e7f0      	b.n	8006b66 <__cvt+0x86>

08006b84 <__exponent>:
 8006b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b86:	4603      	mov	r3, r0
 8006b88:	2900      	cmp	r1, #0
 8006b8a:	bfb8      	it	lt
 8006b8c:	4249      	neglt	r1, r1
 8006b8e:	f803 2b02 	strb.w	r2, [r3], #2
 8006b92:	bfb4      	ite	lt
 8006b94:	222d      	movlt	r2, #45	; 0x2d
 8006b96:	222b      	movge	r2, #43	; 0x2b
 8006b98:	2909      	cmp	r1, #9
 8006b9a:	7042      	strb	r2, [r0, #1]
 8006b9c:	dd2a      	ble.n	8006bf4 <__exponent+0x70>
 8006b9e:	f10d 0407 	add.w	r4, sp, #7
 8006ba2:	46a4      	mov	ip, r4
 8006ba4:	270a      	movs	r7, #10
 8006ba6:	46a6      	mov	lr, r4
 8006ba8:	460a      	mov	r2, r1
 8006baa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bae:	fb07 1516 	mls	r5, r7, r6, r1
 8006bb2:	3530      	adds	r5, #48	; 0x30
 8006bb4:	2a63      	cmp	r2, #99	; 0x63
 8006bb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	dcf1      	bgt.n	8006ba6 <__exponent+0x22>
 8006bc2:	3130      	adds	r1, #48	; 0x30
 8006bc4:	f1ae 0502 	sub.w	r5, lr, #2
 8006bc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bcc:	1c44      	adds	r4, r0, #1
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4561      	cmp	r1, ip
 8006bd2:	d30a      	bcc.n	8006bea <__exponent+0x66>
 8006bd4:	f10d 0209 	add.w	r2, sp, #9
 8006bd8:	eba2 020e 	sub.w	r2, r2, lr
 8006bdc:	4565      	cmp	r5, ip
 8006bde:	bf88      	it	hi
 8006be0:	2200      	movhi	r2, #0
 8006be2:	4413      	add	r3, r2
 8006be4:	1a18      	subs	r0, r3, r0
 8006be6:	b003      	add	sp, #12
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bf2:	e7ed      	b.n	8006bd0 <__exponent+0x4c>
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	3130      	adds	r1, #48	; 0x30
 8006bf8:	7083      	strb	r3, [r0, #2]
 8006bfa:	70c1      	strb	r1, [r0, #3]
 8006bfc:	1d03      	adds	r3, r0, #4
 8006bfe:	e7f1      	b.n	8006be4 <__exponent+0x60>

08006c00 <_printf_float>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	b08b      	sub	sp, #44	; 0x2c
 8006c06:	460c      	mov	r4, r1
 8006c08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	461f      	mov	r7, r3
 8006c10:	4605      	mov	r5, r0
 8006c12:	f003 f89d 	bl	8009d50 <_localeconv_r>
 8006c16:	f8d0 b000 	ldr.w	fp, [r0]
 8006c1a:	4658      	mov	r0, fp
 8006c1c:	f7f9 fb60 	bl	80002e0 <strlen>
 8006c20:	2300      	movs	r3, #0
 8006c22:	9308      	str	r3, [sp, #32]
 8006c24:	f8d8 3000 	ldr.w	r3, [r8]
 8006c28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	3307      	adds	r3, #7
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	f103 0108 	add.w	r1, r3, #8
 8006c38:	f8c8 1000 	str.w	r1, [r8]
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006c46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006ea8 <_printf_float+0x2a8>
 8006c4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006c4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006c52:	eeb4 6b47 	vcmp.f64	d6, d7
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	dd24      	ble.n	8006ca6 <_printf_float+0xa6>
 8006c5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c64:	d502      	bpl.n	8006c6c <_printf_float+0x6c>
 8006c66:	232d      	movs	r3, #45	; 0x2d
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	4b90      	ldr	r3, [pc, #576]	; (8006eb0 <_printf_float+0x2b0>)
 8006c6e:	4891      	ldr	r0, [pc, #580]	; (8006eb4 <_printf_float+0x2b4>)
 8006c70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c74:	bf94      	ite	ls
 8006c76:	4698      	movls	r8, r3
 8006c78:	4680      	movhi	r8, r0
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	2300      	movs	r3, #0
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	9700      	str	r7, [sp, #0]
 8006c8a:	4633      	mov	r3, r6
 8006c8c:	aa09      	add	r2, sp, #36	; 0x24
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 f9d3 	bl	800703c <_printf_common>
 8006c96:	3001      	adds	r0, #1
 8006c98:	f040 808a 	bne.w	8006db0 <_printf_float+0x1b0>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	b00b      	add	sp, #44	; 0x2c
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	eeb4 0b40 	vcmp.f64	d0, d0
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	d709      	bvc.n	8006cc4 <_printf_float+0xc4>
 8006cb0:	ee10 3a90 	vmov	r3, s1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfbc      	itt	lt
 8006cb8:	232d      	movlt	r3, #45	; 0x2d
 8006cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cbe:	487e      	ldr	r0, [pc, #504]	; (8006eb8 <_printf_float+0x2b8>)
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <_printf_float+0x2bc>)
 8006cc2:	e7d5      	b.n	8006c70 <_printf_float+0x70>
 8006cc4:	6863      	ldr	r3, [r4, #4]
 8006cc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006cca:	9104      	str	r1, [sp, #16]
 8006ccc:	1c59      	adds	r1, r3, #1
 8006cce:	d13c      	bne.n	8006d4a <_printf_float+0x14a>
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	ab08      	add	r3, sp, #32
 8006cda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce2:	ab07      	add	r3, sp, #28
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	f10d 031b 	add.w	r3, sp, #27
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7ff fef6 	bl	8006ae0 <__cvt>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	9907      	ldr	r1, [sp, #28]
 8006cf8:	2b47      	cmp	r3, #71	; 0x47
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	d108      	bne.n	8006d10 <_printf_float+0x110>
 8006cfe:	1cc8      	adds	r0, r1, #3
 8006d00:	db02      	blt.n	8006d08 <_printf_float+0x108>
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	4299      	cmp	r1, r3
 8006d06:	dd41      	ble.n	8006d8c <_printf_float+0x18c>
 8006d08:	f1a9 0902 	sub.w	r9, r9, #2
 8006d0c:	fa5f f989 	uxtb.w	r9, r9
 8006d10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d14:	d820      	bhi.n	8006d58 <_printf_float+0x158>
 8006d16:	3901      	subs	r1, #1
 8006d18:	464a      	mov	r2, r9
 8006d1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d1e:	9107      	str	r1, [sp, #28]
 8006d20:	f7ff ff30 	bl	8006b84 <__exponent>
 8006d24:	9a08      	ldr	r2, [sp, #32]
 8006d26:	9004      	str	r0, [sp, #16]
 8006d28:	1813      	adds	r3, r2, r0
 8006d2a:	2a01      	cmp	r2, #1
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	dc02      	bgt.n	8006d36 <_printf_float+0x136>
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	07d2      	lsls	r2, r2, #31
 8006d34:	d501      	bpl.n	8006d3a <_printf_float+0x13a>
 8006d36:	3301      	adds	r3, #1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0a2      	beq.n	8006c88 <_printf_float+0x88>
 8006d42:	232d      	movs	r3, #45	; 0x2d
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d48:	e79e      	b.n	8006c88 <_printf_float+0x88>
 8006d4a:	9904      	ldr	r1, [sp, #16]
 8006d4c:	2947      	cmp	r1, #71	; 0x47
 8006d4e:	d1c1      	bne.n	8006cd4 <_printf_float+0xd4>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1bf      	bne.n	8006cd4 <_printf_float+0xd4>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7bc      	b.n	8006cd2 <_printf_float+0xd2>
 8006d58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d5c:	d118      	bne.n	8006d90 <_printf_float+0x190>
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	dd0b      	ble.n	8006d7c <_printf_float+0x17c>
 8006d64:	6121      	str	r1, [r4, #16]
 8006d66:	b913      	cbnz	r3, 8006d6e <_printf_float+0x16e>
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	07d0      	lsls	r0, r2, #31
 8006d6c:	d502      	bpl.n	8006d74 <_printf_float+0x174>
 8006d6e:	3301      	adds	r3, #1
 8006d70:	440b      	add	r3, r1
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	2300      	movs	r3, #0
 8006d76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	e7de      	b.n	8006d3a <_printf_float+0x13a>
 8006d7c:	b913      	cbnz	r3, 8006d84 <_printf_float+0x184>
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	07d2      	lsls	r2, r2, #31
 8006d82:	d501      	bpl.n	8006d88 <_printf_float+0x188>
 8006d84:	3302      	adds	r3, #2
 8006d86:	e7f4      	b.n	8006d72 <_printf_float+0x172>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e7f2      	b.n	8006d72 <_printf_float+0x172>
 8006d8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	4299      	cmp	r1, r3
 8006d94:	db05      	blt.n	8006da2 <_printf_float+0x1a2>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	6121      	str	r1, [r4, #16]
 8006d9a:	07d8      	lsls	r0, r3, #31
 8006d9c:	d5ea      	bpl.n	8006d74 <_printf_float+0x174>
 8006d9e:	1c4b      	adds	r3, r1, #1
 8006da0:	e7e7      	b.n	8006d72 <_printf_float+0x172>
 8006da2:	2900      	cmp	r1, #0
 8006da4:	bfd4      	ite	le
 8006da6:	f1c1 0202 	rsble	r2, r1, #2
 8006daa:	2201      	movgt	r2, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	e7e0      	b.n	8006d72 <_printf_float+0x172>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	055a      	lsls	r2, r3, #21
 8006db4:	d407      	bmi.n	8006dc6 <_printf_float+0x1c6>
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	4642      	mov	r2, r8
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d12a      	bne.n	8006e1a <_printf_float+0x21a>
 8006dc4:	e76a      	b.n	8006c9c <_printf_float+0x9c>
 8006dc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dca:	f240 80e2 	bls.w	8006f92 <_printf_float+0x392>
 8006dce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006dd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dda:	d133      	bne.n	8006e44 <_printf_float+0x244>
 8006ddc:	4a38      	ldr	r2, [pc, #224]	; (8006ec0 <_printf_float+0x2c0>)
 8006dde:	2301      	movs	r3, #1
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f af58 	beq.w	8006c9c <_printf_float+0x9c>
 8006dec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	db02      	blt.n	8006dfa <_printf_float+0x1fa>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	07d8      	lsls	r0, r3, #31
 8006df8:	d50f      	bpl.n	8006e1a <_printf_float+0x21a>
 8006dfa:	4653      	mov	r3, sl
 8006dfc:	465a      	mov	r2, fp
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f af49 	beq.w	8006c9c <_printf_float+0x9c>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	f104 091a 	add.w	r9, r4, #26
 8006e12:	9b08      	ldr	r3, [sp, #32]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	4543      	cmp	r3, r8
 8006e18:	dc09      	bgt.n	8006e2e <_printf_float+0x22e>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	079b      	lsls	r3, r3, #30
 8006e1e:	f100 8108 	bmi.w	8007032 <_printf_float+0x432>
 8006e22:	68e0      	ldr	r0, [r4, #12]
 8006e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e26:	4298      	cmp	r0, r3
 8006e28:	bfb8      	it	lt
 8006e2a:	4618      	movlt	r0, r3
 8006e2c:	e738      	b.n	8006ca0 <_printf_float+0xa0>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	464a      	mov	r2, r9
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f43f af2f 	beq.w	8006c9c <_printf_float+0x9c>
 8006e3e:	f108 0801 	add.w	r8, r8, #1
 8006e42:	e7e6      	b.n	8006e12 <_printf_float+0x212>
 8006e44:	9b07      	ldr	r3, [sp, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	dc3c      	bgt.n	8006ec4 <_printf_float+0x2c4>
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <_printf_float+0x2c0>)
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f af21 	beq.w	8006c9c <_printf_float+0x9c>
 8006e5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d102      	bne.n	8006e68 <_printf_float+0x268>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	07d9      	lsls	r1, r3, #31
 8006e66:	d5d8      	bpl.n	8006e1a <_printf_float+0x21a>
 8006e68:	4653      	mov	r3, sl
 8006e6a:	465a      	mov	r2, fp
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af12 	beq.w	8006c9c <_printf_float+0x9c>
 8006e78:	f04f 0900 	mov.w	r9, #0
 8006e7c:	f104 0a1a 	add.w	sl, r4, #26
 8006e80:	9b07      	ldr	r3, [sp, #28]
 8006e82:	425b      	negs	r3, r3
 8006e84:	454b      	cmp	r3, r9
 8006e86:	dc01      	bgt.n	8006e8c <_printf_float+0x28c>
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	e795      	b.n	8006db8 <_printf_float+0x1b8>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f af00 	beq.w	8006c9c <_printf_float+0x9c>
 8006e9c:	f109 0901 	add.w	r9, r9, #1
 8006ea0:	e7ee      	b.n	8006e80 <_printf_float+0x280>
 8006ea2:	bf00      	nop
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	ffffffff 	.word	0xffffffff
 8006eac:	7fefffff 	.word	0x7fefffff
 8006eb0:	0800b390 	.word	0x0800b390
 8006eb4:	0800b394 	.word	0x0800b394
 8006eb8:	0800b39c 	.word	0x0800b39c
 8006ebc:	0800b398 	.word	0x0800b398
 8006ec0:	0800b3a0 	.word	0x0800b3a0
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	bfa8      	it	ge
 8006ecc:	461a      	movge	r2, r3
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	4691      	mov	r9, r2
 8006ed2:	dc38      	bgt.n	8006f46 <_printf_float+0x346>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006edc:	f104 021a 	add.w	r2, r4, #26
 8006ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee2:	9905      	ldr	r1, [sp, #20]
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	eba3 0309 	sub.w	r3, r3, r9
 8006eea:	428b      	cmp	r3, r1
 8006eec:	dc33      	bgt.n	8006f56 <_printf_float+0x356>
 8006eee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	db3c      	blt.n	8006f70 <_printf_float+0x370>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07da      	lsls	r2, r3, #31
 8006efa:	d439      	bmi.n	8006f70 <_printf_float+0x370>
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	9907      	ldr	r1, [sp, #28]
 8006f02:	1a9a      	subs	r2, r3, r2
 8006f04:	eba3 0901 	sub.w	r9, r3, r1
 8006f08:	4591      	cmp	r9, r2
 8006f0a:	bfa8      	it	ge
 8006f0c:	4691      	movge	r9, r2
 8006f0e:	f1b9 0f00 	cmp.w	r9, #0
 8006f12:	dc35      	bgt.n	8006f80 <_printf_float+0x380>
 8006f14:	f04f 0800 	mov.w	r8, #0
 8006f18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f1c:	f104 0a1a 	add.w	sl, r4, #26
 8006f20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	eba3 0309 	sub.w	r3, r3, r9
 8006f2a:	4543      	cmp	r3, r8
 8006f2c:	f77f af75 	ble.w	8006e1a <_printf_float+0x21a>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4652      	mov	r2, sl
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f aeae 	beq.w	8006c9c <_printf_float+0x9c>
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	e7ec      	b.n	8006f20 <_printf_float+0x320>
 8006f46:	4613      	mov	r3, r2
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4642      	mov	r2, r8
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	d1bf      	bne.n	8006ed4 <_printf_float+0x2d4>
 8006f54:	e6a2      	b.n	8006c9c <_printf_float+0x9c>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	9204      	str	r2, [sp, #16]
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f ae9b 	beq.w	8006c9c <_printf_float+0x9c>
 8006f66:	9b05      	ldr	r3, [sp, #20]
 8006f68:	9a04      	ldr	r2, [sp, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	e7b7      	b.n	8006ee0 <_printf_float+0x2e0>
 8006f70:	4653      	mov	r3, sl
 8006f72:	465a      	mov	r2, fp
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d1be      	bne.n	8006efc <_printf_float+0x2fc>
 8006f7e:	e68d      	b.n	8006c9c <_printf_float+0x9c>
 8006f80:	9a04      	ldr	r2, [sp, #16]
 8006f82:	464b      	mov	r3, r9
 8006f84:	4442      	add	r2, r8
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d1c1      	bne.n	8006f14 <_printf_float+0x314>
 8006f90:	e684      	b.n	8006c9c <_printf_float+0x9c>
 8006f92:	9a08      	ldr	r2, [sp, #32]
 8006f94:	2a01      	cmp	r2, #1
 8006f96:	dc01      	bgt.n	8006f9c <_printf_float+0x39c>
 8006f98:	07db      	lsls	r3, r3, #31
 8006f9a:	d537      	bpl.n	800700c <_printf_float+0x40c>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4642      	mov	r2, r8
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b8      	blx	r7
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	f43f ae78 	beq.w	8006c9c <_printf_float+0x9c>
 8006fac:	4653      	mov	r3, sl
 8006fae:	465a      	mov	r2, fp
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f ae70 	beq.w	8006c9c <_printf_float+0x9c>
 8006fbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006fc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc8:	d01b      	beq.n	8007002 <_printf_float+0x402>
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	f108 0201 	add.w	r2, r8, #1
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d10e      	bne.n	8006ffa <_printf_float+0x3fa>
 8006fdc:	e65e      	b.n	8006c9c <_printf_float+0x9c>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	464a      	mov	r2, r9
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae57 	beq.w	8006c9c <_printf_float+0x9c>
 8006fee:	f108 0801 	add.w	r8, r8, #1
 8006ff2:	9b08      	ldr	r3, [sp, #32]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	4543      	cmp	r3, r8
 8006ff8:	dcf1      	bgt.n	8006fde <_printf_float+0x3de>
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007000:	e6db      	b.n	8006dba <_printf_float+0x1ba>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	f104 091a 	add.w	r9, r4, #26
 800700a:	e7f2      	b.n	8006ff2 <_printf_float+0x3f2>
 800700c:	2301      	movs	r3, #1
 800700e:	4642      	mov	r2, r8
 8007010:	e7df      	b.n	8006fd2 <_printf_float+0x3d2>
 8007012:	2301      	movs	r3, #1
 8007014:	464a      	mov	r2, r9
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f ae3d 	beq.w	8006c9c <_printf_float+0x9c>
 8007022:	f108 0801 	add.w	r8, r8, #1
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	4543      	cmp	r3, r8
 800702e:	dcf0      	bgt.n	8007012 <_printf_float+0x412>
 8007030:	e6f7      	b.n	8006e22 <_printf_float+0x222>
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	f104 0919 	add.w	r9, r4, #25
 800703a:	e7f4      	b.n	8007026 <_printf_float+0x426>

0800703c <_printf_common>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4616      	mov	r6, r2
 8007042:	4699      	mov	r9, r3
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800704c:	4293      	cmp	r3, r2
 800704e:	bfb8      	it	lt
 8007050:	4613      	movlt	r3, r2
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007058:	4607      	mov	r7, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b10a      	cbz	r2, 8007062 <_printf_common+0x26>
 800705e:	3301      	adds	r3, #1
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0699      	lsls	r1, r3, #26
 8007066:	bf42      	ittt	mi
 8007068:	6833      	ldrmi	r3, [r6, #0]
 800706a:	3302      	addmi	r3, #2
 800706c:	6033      	strmi	r3, [r6, #0]
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	f015 0506 	ands.w	r5, r5, #6
 8007074:	d106      	bne.n	8007084 <_printf_common+0x48>
 8007076:	f104 0a19 	add.w	sl, r4, #25
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc26      	bgt.n	80070d2 <_printf_common+0x96>
 8007084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007088:	1e13      	subs	r3, r2, #0
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	bf18      	it	ne
 800708e:	2301      	movne	r3, #1
 8007090:	0692      	lsls	r2, r2, #26
 8007092:	d42b      	bmi.n	80070ec <_printf_common+0xb0>
 8007094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007098:	4649      	mov	r1, r9
 800709a:	4638      	mov	r0, r7
 800709c:	47c0      	blx	r8
 800709e:	3001      	adds	r0, #1
 80070a0:	d01e      	beq.n	80070e0 <_printf_common+0xa4>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	68e5      	ldr	r5, [r4, #12]
 80070a6:	6832      	ldr	r2, [r6, #0]
 80070a8:	f003 0306 	and.w	r3, r3, #6
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	bf08      	it	eq
 80070b0:	1aad      	subeq	r5, r5, r2
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	4293      	cmp	r3, r2
 80070c0:	bfc4      	itt	gt
 80070c2:	1a9b      	subgt	r3, r3, r2
 80070c4:	18ed      	addgt	r5, r5, r3
 80070c6:	2600      	movs	r6, #0
 80070c8:	341a      	adds	r4, #26
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	d11a      	bne.n	8007104 <_printf_common+0xc8>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e008      	b.n	80070e4 <_printf_common+0xa8>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4649      	mov	r1, r9
 80070d8:	4638      	mov	r0, r7
 80070da:	47c0      	blx	r8
 80070dc:	3001      	adds	r0, #1
 80070de:	d103      	bne.n	80070e8 <_printf_common+0xac>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7c6      	b.n	800707a <_printf_common+0x3e>
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	2030      	movs	r0, #48	; 0x30
 80070f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070f6:	4422      	add	r2, r4
 80070f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007100:	3302      	adds	r3, #2
 8007102:	e7c7      	b.n	8007094 <_printf_common+0x58>
 8007104:	2301      	movs	r3, #1
 8007106:	4622      	mov	r2, r4
 8007108:	4649      	mov	r1, r9
 800710a:	4638      	mov	r0, r7
 800710c:	47c0      	blx	r8
 800710e:	3001      	adds	r0, #1
 8007110:	d0e6      	beq.n	80070e0 <_printf_common+0xa4>
 8007112:	3601      	adds	r6, #1
 8007114:	e7d9      	b.n	80070ca <_printf_common+0x8e>
	...

08007118 <_printf_i>:
 8007118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	7e0f      	ldrb	r7, [r1, #24]
 800711e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007120:	2f78      	cmp	r7, #120	; 0x78
 8007122:	4691      	mov	r9, r2
 8007124:	4680      	mov	r8, r0
 8007126:	460c      	mov	r4, r1
 8007128:	469a      	mov	sl, r3
 800712a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800712e:	d807      	bhi.n	8007140 <_printf_i+0x28>
 8007130:	2f62      	cmp	r7, #98	; 0x62
 8007132:	d80a      	bhi.n	800714a <_printf_i+0x32>
 8007134:	2f00      	cmp	r7, #0
 8007136:	f000 80d8 	beq.w	80072ea <_printf_i+0x1d2>
 800713a:	2f58      	cmp	r7, #88	; 0x58
 800713c:	f000 80a3 	beq.w	8007286 <_printf_i+0x16e>
 8007140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007148:	e03a      	b.n	80071c0 <_printf_i+0xa8>
 800714a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800714e:	2b15      	cmp	r3, #21
 8007150:	d8f6      	bhi.n	8007140 <_printf_i+0x28>
 8007152:	a101      	add	r1, pc, #4	; (adr r1, 8007158 <_printf_i+0x40>)
 8007154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071c5 	.word	0x080071c5
 8007160:	08007141 	.word	0x08007141
 8007164:	08007141 	.word	0x08007141
 8007168:	08007141 	.word	0x08007141
 800716c:	08007141 	.word	0x08007141
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007141 	.word	0x08007141
 8007178:	08007141 	.word	0x08007141
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	080072d1 	.word	0x080072d1
 8007188:	080071f5 	.word	0x080071f5
 800718c:	080072b3 	.word	0x080072b3
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072f3 	.word	0x080072f3
 800719c:	08007141 	.word	0x08007141
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	080072bb 	.word	0x080072bb
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	602a      	str	r2, [r5, #0]
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071c0:	2301      	movs	r3, #1
 80071c2:	e0a3      	b.n	800730c <_printf_i+0x1f4>
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	6829      	ldr	r1, [r5, #0]
 80071c8:	0606      	lsls	r6, r0, #24
 80071ca:	f101 0304 	add.w	r3, r1, #4
 80071ce:	d50a      	bpl.n	80071e6 <_printf_i+0xce>
 80071d0:	680e      	ldr	r6, [r1, #0]
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	2e00      	cmp	r6, #0
 80071d6:	da03      	bge.n	80071e0 <_printf_i+0xc8>
 80071d8:	232d      	movs	r3, #45	; 0x2d
 80071da:	4276      	negs	r6, r6
 80071dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e0:	485e      	ldr	r0, [pc, #376]	; (800735c <_printf_i+0x244>)
 80071e2:	230a      	movs	r3, #10
 80071e4:	e019      	b.n	800721a <_printf_i+0x102>
 80071e6:	680e      	ldr	r6, [r1, #0]
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071ee:	bf18      	it	ne
 80071f0:	b236      	sxthne	r6, r6
 80071f2:	e7ef      	b.n	80071d4 <_printf_i+0xbc>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	6029      	str	r1, [r5, #0]
 80071fc:	0601      	lsls	r1, r0, #24
 80071fe:	d501      	bpl.n	8007204 <_printf_i+0xec>
 8007200:	681e      	ldr	r6, [r3, #0]
 8007202:	e002      	b.n	800720a <_printf_i+0xf2>
 8007204:	0646      	lsls	r6, r0, #25
 8007206:	d5fb      	bpl.n	8007200 <_printf_i+0xe8>
 8007208:	881e      	ldrh	r6, [r3, #0]
 800720a:	4854      	ldr	r0, [pc, #336]	; (800735c <_printf_i+0x244>)
 800720c:	2f6f      	cmp	r7, #111	; 0x6f
 800720e:	bf0c      	ite	eq
 8007210:	2308      	moveq	r3, #8
 8007212:	230a      	movne	r3, #10
 8007214:	2100      	movs	r1, #0
 8007216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800721a:	6865      	ldr	r5, [r4, #4]
 800721c:	60a5      	str	r5, [r4, #8]
 800721e:	2d00      	cmp	r5, #0
 8007220:	bfa2      	ittt	ge
 8007222:	6821      	ldrge	r1, [r4, #0]
 8007224:	f021 0104 	bicge.w	r1, r1, #4
 8007228:	6021      	strge	r1, [r4, #0]
 800722a:	b90e      	cbnz	r6, 8007230 <_printf_i+0x118>
 800722c:	2d00      	cmp	r5, #0
 800722e:	d04d      	beq.n	80072cc <_printf_i+0x1b4>
 8007230:	4615      	mov	r5, r2
 8007232:	fbb6 f1f3 	udiv	r1, r6, r3
 8007236:	fb03 6711 	mls	r7, r3, r1, r6
 800723a:	5dc7      	ldrb	r7, [r0, r7]
 800723c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007240:	4637      	mov	r7, r6
 8007242:	42bb      	cmp	r3, r7
 8007244:	460e      	mov	r6, r1
 8007246:	d9f4      	bls.n	8007232 <_printf_i+0x11a>
 8007248:	2b08      	cmp	r3, #8
 800724a:	d10b      	bne.n	8007264 <_printf_i+0x14c>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	07de      	lsls	r6, r3, #31
 8007250:	d508      	bpl.n	8007264 <_printf_i+0x14c>
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	6861      	ldr	r1, [r4, #4]
 8007256:	4299      	cmp	r1, r3
 8007258:	bfde      	ittt	le
 800725a:	2330      	movle	r3, #48	; 0x30
 800725c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007260:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007264:	1b52      	subs	r2, r2, r5
 8007266:	6122      	str	r2, [r4, #16]
 8007268:	f8cd a000 	str.w	sl, [sp]
 800726c:	464b      	mov	r3, r9
 800726e:	aa03      	add	r2, sp, #12
 8007270:	4621      	mov	r1, r4
 8007272:	4640      	mov	r0, r8
 8007274:	f7ff fee2 	bl	800703c <_printf_common>
 8007278:	3001      	adds	r0, #1
 800727a:	d14c      	bne.n	8007316 <_printf_i+0x1fe>
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	b004      	add	sp, #16
 8007282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007286:	4835      	ldr	r0, [pc, #212]	; (800735c <_printf_i+0x244>)
 8007288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800728c:	6829      	ldr	r1, [r5, #0]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	f851 6b04 	ldr.w	r6, [r1], #4
 8007294:	6029      	str	r1, [r5, #0]
 8007296:	061d      	lsls	r5, r3, #24
 8007298:	d514      	bpl.n	80072c4 <_printf_i+0x1ac>
 800729a:	07df      	lsls	r7, r3, #31
 800729c:	bf44      	itt	mi
 800729e:	f043 0320 	orrmi.w	r3, r3, #32
 80072a2:	6023      	strmi	r3, [r4, #0]
 80072a4:	b91e      	cbnz	r6, 80072ae <_printf_i+0x196>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	f023 0320 	bic.w	r3, r3, #32
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	2310      	movs	r3, #16
 80072b0:	e7b0      	b.n	8007214 <_printf_i+0xfc>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f043 0320 	orr.w	r3, r3, #32
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	2378      	movs	r3, #120	; 0x78
 80072bc:	4828      	ldr	r0, [pc, #160]	; (8007360 <_printf_i+0x248>)
 80072be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072c2:	e7e3      	b.n	800728c <_printf_i+0x174>
 80072c4:	0659      	lsls	r1, r3, #25
 80072c6:	bf48      	it	mi
 80072c8:	b2b6      	uxthmi	r6, r6
 80072ca:	e7e6      	b.n	800729a <_printf_i+0x182>
 80072cc:	4615      	mov	r5, r2
 80072ce:	e7bb      	b.n	8007248 <_printf_i+0x130>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	6826      	ldr	r6, [r4, #0]
 80072d4:	6961      	ldr	r1, [r4, #20]
 80072d6:	1d18      	adds	r0, r3, #4
 80072d8:	6028      	str	r0, [r5, #0]
 80072da:	0635      	lsls	r5, r6, #24
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	d501      	bpl.n	80072e4 <_printf_i+0x1cc>
 80072e0:	6019      	str	r1, [r3, #0]
 80072e2:	e002      	b.n	80072ea <_printf_i+0x1d2>
 80072e4:	0670      	lsls	r0, r6, #25
 80072e6:	d5fb      	bpl.n	80072e0 <_printf_i+0x1c8>
 80072e8:	8019      	strh	r1, [r3, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	4615      	mov	r5, r2
 80072f0:	e7ba      	b.n	8007268 <_printf_i+0x150>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	1d1a      	adds	r2, r3, #4
 80072f6:	602a      	str	r2, [r5, #0]
 80072f8:	681d      	ldr	r5, [r3, #0]
 80072fa:	6862      	ldr	r2, [r4, #4]
 80072fc:	2100      	movs	r1, #0
 80072fe:	4628      	mov	r0, r5
 8007300:	f7f8 fff6 	bl	80002f0 <memchr>
 8007304:	b108      	cbz	r0, 800730a <_printf_i+0x1f2>
 8007306:	1b40      	subs	r0, r0, r5
 8007308:	6060      	str	r0, [r4, #4]
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	2300      	movs	r3, #0
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007314:	e7a8      	b.n	8007268 <_printf_i+0x150>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	462a      	mov	r2, r5
 800731a:	4649      	mov	r1, r9
 800731c:	4640      	mov	r0, r8
 800731e:	47d0      	blx	sl
 8007320:	3001      	adds	r0, #1
 8007322:	d0ab      	beq.n	800727c <_printf_i+0x164>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	079b      	lsls	r3, r3, #30
 8007328:	d413      	bmi.n	8007352 <_printf_i+0x23a>
 800732a:	68e0      	ldr	r0, [r4, #12]
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	4298      	cmp	r0, r3
 8007330:	bfb8      	it	lt
 8007332:	4618      	movlt	r0, r3
 8007334:	e7a4      	b.n	8007280 <_printf_i+0x168>
 8007336:	2301      	movs	r3, #1
 8007338:	4632      	mov	r2, r6
 800733a:	4649      	mov	r1, r9
 800733c:	4640      	mov	r0, r8
 800733e:	47d0      	blx	sl
 8007340:	3001      	adds	r0, #1
 8007342:	d09b      	beq.n	800727c <_printf_i+0x164>
 8007344:	3501      	adds	r5, #1
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	9903      	ldr	r1, [sp, #12]
 800734a:	1a5b      	subs	r3, r3, r1
 800734c:	42ab      	cmp	r3, r5
 800734e:	dcf2      	bgt.n	8007336 <_printf_i+0x21e>
 8007350:	e7eb      	b.n	800732a <_printf_i+0x212>
 8007352:	2500      	movs	r5, #0
 8007354:	f104 0619 	add.w	r6, r4, #25
 8007358:	e7f5      	b.n	8007346 <_printf_i+0x22e>
 800735a:	bf00      	nop
 800735c:	0800b3a2 	.word	0x0800b3a2
 8007360:	0800b3b3 	.word	0x0800b3b3

08007364 <_scanf_float>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	b087      	sub	sp, #28
 800736a:	4617      	mov	r7, r2
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	688b      	ldr	r3, [r1, #8]
 8007370:	1e5a      	subs	r2, r3, #1
 8007372:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007376:	bf83      	ittte	hi
 8007378:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800737c:	195b      	addhi	r3, r3, r5
 800737e:	9302      	strhi	r3, [sp, #8]
 8007380:	2300      	movls	r3, #0
 8007382:	bf86      	itte	hi
 8007384:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007388:	608b      	strhi	r3, [r1, #8]
 800738a:	9302      	strls	r3, [sp, #8]
 800738c:	680b      	ldr	r3, [r1, #0]
 800738e:	468b      	mov	fp, r1
 8007390:	2500      	movs	r5, #0
 8007392:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007396:	f84b 3b1c 	str.w	r3, [fp], #28
 800739a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800739e:	4680      	mov	r8, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	465e      	mov	r6, fp
 80073a4:	46aa      	mov	sl, r5
 80073a6:	46a9      	mov	r9, r5
 80073a8:	9501      	str	r5, [sp, #4]
 80073aa:	68a2      	ldr	r2, [r4, #8]
 80073ac:	b152      	cbz	r2, 80073c4 <_scanf_float+0x60>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b4e      	cmp	r3, #78	; 0x4e
 80073b4:	d864      	bhi.n	8007480 <_scanf_float+0x11c>
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d83c      	bhi.n	8007434 <_scanf_float+0xd0>
 80073ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073be:	b2c8      	uxtb	r0, r1
 80073c0:	280e      	cmp	r0, #14
 80073c2:	d93a      	bls.n	800743a <_scanf_float+0xd6>
 80073c4:	f1b9 0f00 	cmp.w	r9, #0
 80073c8:	d003      	beq.n	80073d2 <_scanf_float+0x6e>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073d6:	f1ba 0f01 	cmp.w	sl, #1
 80073da:	f200 8113 	bhi.w	8007604 <_scanf_float+0x2a0>
 80073de:	455e      	cmp	r6, fp
 80073e0:	f200 8105 	bhi.w	80075ee <_scanf_float+0x28a>
 80073e4:	2501      	movs	r5, #1
 80073e6:	4628      	mov	r0, r5
 80073e8:	b007      	add	sp, #28
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073f2:	2a0d      	cmp	r2, #13
 80073f4:	d8e6      	bhi.n	80073c4 <_scanf_float+0x60>
 80073f6:	a101      	add	r1, pc, #4	; (adr r1, 80073fc <_scanf_float+0x98>)
 80073f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073fc:	0800753b 	.word	0x0800753b
 8007400:	080073c5 	.word	0x080073c5
 8007404:	080073c5 	.word	0x080073c5
 8007408:	080073c5 	.word	0x080073c5
 800740c:	0800759b 	.word	0x0800759b
 8007410:	08007573 	.word	0x08007573
 8007414:	080073c5 	.word	0x080073c5
 8007418:	080073c5 	.word	0x080073c5
 800741c:	08007549 	.word	0x08007549
 8007420:	080073c5 	.word	0x080073c5
 8007424:	080073c5 	.word	0x080073c5
 8007428:	080073c5 	.word	0x080073c5
 800742c:	080073c5 	.word	0x080073c5
 8007430:	08007501 	.word	0x08007501
 8007434:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007438:	e7db      	b.n	80073f2 <_scanf_float+0x8e>
 800743a:	290e      	cmp	r1, #14
 800743c:	d8c2      	bhi.n	80073c4 <_scanf_float+0x60>
 800743e:	a001      	add	r0, pc, #4	; (adr r0, 8007444 <_scanf_float+0xe0>)
 8007440:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007444:	080074f3 	.word	0x080074f3
 8007448:	080073c5 	.word	0x080073c5
 800744c:	080074f3 	.word	0x080074f3
 8007450:	08007587 	.word	0x08007587
 8007454:	080073c5 	.word	0x080073c5
 8007458:	080074a1 	.word	0x080074a1
 800745c:	080074dd 	.word	0x080074dd
 8007460:	080074dd 	.word	0x080074dd
 8007464:	080074dd 	.word	0x080074dd
 8007468:	080074dd 	.word	0x080074dd
 800746c:	080074dd 	.word	0x080074dd
 8007470:	080074dd 	.word	0x080074dd
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074dd 	.word	0x080074dd
 8007480:	2b6e      	cmp	r3, #110	; 0x6e
 8007482:	d809      	bhi.n	8007498 <_scanf_float+0x134>
 8007484:	2b60      	cmp	r3, #96	; 0x60
 8007486:	d8b2      	bhi.n	80073ee <_scanf_float+0x8a>
 8007488:	2b54      	cmp	r3, #84	; 0x54
 800748a:	d077      	beq.n	800757c <_scanf_float+0x218>
 800748c:	2b59      	cmp	r3, #89	; 0x59
 800748e:	d199      	bne.n	80073c4 <_scanf_float+0x60>
 8007490:	2d07      	cmp	r5, #7
 8007492:	d197      	bne.n	80073c4 <_scanf_float+0x60>
 8007494:	2508      	movs	r5, #8
 8007496:	e029      	b.n	80074ec <_scanf_float+0x188>
 8007498:	2b74      	cmp	r3, #116	; 0x74
 800749a:	d06f      	beq.n	800757c <_scanf_float+0x218>
 800749c:	2b79      	cmp	r3, #121	; 0x79
 800749e:	e7f6      	b.n	800748e <_scanf_float+0x12a>
 80074a0:	6821      	ldr	r1, [r4, #0]
 80074a2:	05c8      	lsls	r0, r1, #23
 80074a4:	d51a      	bpl.n	80074dc <_scanf_float+0x178>
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074ac:	6021      	str	r1, [r4, #0]
 80074ae:	f109 0901 	add.w	r9, r9, #1
 80074b2:	b11b      	cbz	r3, 80074bc <_scanf_float+0x158>
 80074b4:	3b01      	subs	r3, #1
 80074b6:	3201      	adds	r2, #1
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	60a2      	str	r2, [r4, #8]
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	f340 8084 	ble.w	80075dc <_scanf_float+0x278>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	e766      	b.n	80073aa <_scanf_float+0x46>
 80074dc:	eb1a 0f05 	cmn.w	sl, r5
 80074e0:	f47f af70 	bne.w	80073c4 <_scanf_float+0x60>
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	f806 3b01 	strb.w	r3, [r6], #1
 80074f0:	e7e4      	b.n	80074bc <_scanf_float+0x158>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	0610      	lsls	r0, r2, #24
 80074f6:	f57f af65 	bpl.w	80073c4 <_scanf_float+0x60>
 80074fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074fe:	e7f4      	b.n	80074ea <_scanf_float+0x186>
 8007500:	f1ba 0f00 	cmp.w	sl, #0
 8007504:	d10e      	bne.n	8007524 <_scanf_float+0x1c0>
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	d10e      	bne.n	800752a <_scanf_float+0x1c6>
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007512:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007516:	d108      	bne.n	800752a <_scanf_float+0x1c6>
 8007518:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	f04f 0a01 	mov.w	sl, #1
 8007522:	e7e3      	b.n	80074ec <_scanf_float+0x188>
 8007524:	f1ba 0f02 	cmp.w	sl, #2
 8007528:	d055      	beq.n	80075d6 <_scanf_float+0x272>
 800752a:	2d01      	cmp	r5, #1
 800752c:	d002      	beq.n	8007534 <_scanf_float+0x1d0>
 800752e:	2d04      	cmp	r5, #4
 8007530:	f47f af48 	bne.w	80073c4 <_scanf_float+0x60>
 8007534:	3501      	adds	r5, #1
 8007536:	b2ed      	uxtb	r5, r5
 8007538:	e7d8      	b.n	80074ec <_scanf_float+0x188>
 800753a:	f1ba 0f01 	cmp.w	sl, #1
 800753e:	f47f af41 	bne.w	80073c4 <_scanf_float+0x60>
 8007542:	f04f 0a02 	mov.w	sl, #2
 8007546:	e7d1      	b.n	80074ec <_scanf_float+0x188>
 8007548:	b97d      	cbnz	r5, 800756a <_scanf_float+0x206>
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	f47f af3c 	bne.w	80073ca <_scanf_float+0x66>
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007558:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800755c:	f47f af39 	bne.w	80073d2 <_scanf_float+0x6e>
 8007560:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	2501      	movs	r5, #1
 8007568:	e7c0      	b.n	80074ec <_scanf_float+0x188>
 800756a:	2d03      	cmp	r5, #3
 800756c:	d0e2      	beq.n	8007534 <_scanf_float+0x1d0>
 800756e:	2d05      	cmp	r5, #5
 8007570:	e7de      	b.n	8007530 <_scanf_float+0x1cc>
 8007572:	2d02      	cmp	r5, #2
 8007574:	f47f af26 	bne.w	80073c4 <_scanf_float+0x60>
 8007578:	2503      	movs	r5, #3
 800757a:	e7b7      	b.n	80074ec <_scanf_float+0x188>
 800757c:	2d06      	cmp	r5, #6
 800757e:	f47f af21 	bne.w	80073c4 <_scanf_float+0x60>
 8007582:	2507      	movs	r5, #7
 8007584:	e7b2      	b.n	80074ec <_scanf_float+0x188>
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	0591      	lsls	r1, r2, #22
 800758a:	f57f af1b 	bpl.w	80073c4 <_scanf_float+0x60>
 800758e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	f8cd 9004 	str.w	r9, [sp, #4]
 8007598:	e7a8      	b.n	80074ec <_scanf_float+0x188>
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075a4:	d006      	beq.n	80075b4 <_scanf_float+0x250>
 80075a6:	0550      	lsls	r0, r2, #21
 80075a8:	f57f af0c 	bpl.w	80073c4 <_scanf_float+0x60>
 80075ac:	f1b9 0f00 	cmp.w	r9, #0
 80075b0:	f43f af0f 	beq.w	80073d2 <_scanf_float+0x6e>
 80075b4:	0591      	lsls	r1, r2, #22
 80075b6:	bf58      	it	pl
 80075b8:	9901      	ldrpl	r1, [sp, #4]
 80075ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075be:	bf58      	it	pl
 80075c0:	eba9 0101 	subpl.w	r1, r9, r1
 80075c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075c8:	bf58      	it	pl
 80075ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	e78a      	b.n	80074ec <_scanf_float+0x188>
 80075d6:	f04f 0a03 	mov.w	sl, #3
 80075da:	e787      	b.n	80074ec <_scanf_float+0x188>
 80075dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075e0:	4639      	mov	r1, r7
 80075e2:	4640      	mov	r0, r8
 80075e4:	4798      	blx	r3
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f43f aedf 	beq.w	80073aa <_scanf_float+0x46>
 80075ec:	e6ea      	b.n	80073c4 <_scanf_float+0x60>
 80075ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075f6:	463a      	mov	r2, r7
 80075f8:	4640      	mov	r0, r8
 80075fa:	4798      	blx	r3
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	3b01      	subs	r3, #1
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	e6ec      	b.n	80073de <_scanf_float+0x7a>
 8007604:	1e6b      	subs	r3, r5, #1
 8007606:	2b06      	cmp	r3, #6
 8007608:	d825      	bhi.n	8007656 <_scanf_float+0x2f2>
 800760a:	2d02      	cmp	r5, #2
 800760c:	d836      	bhi.n	800767c <_scanf_float+0x318>
 800760e:	455e      	cmp	r6, fp
 8007610:	f67f aee8 	bls.w	80073e4 <_scanf_float+0x80>
 8007614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007618:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800761c:	463a      	mov	r2, r7
 800761e:	4640      	mov	r0, r8
 8007620:	4798      	blx	r3
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	3b01      	subs	r3, #1
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	e7f1      	b.n	800760e <_scanf_float+0x2aa>
 800762a:	9802      	ldr	r0, [sp, #8]
 800762c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007630:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007634:	9002      	str	r0, [sp, #8]
 8007636:	463a      	mov	r2, r7
 8007638:	4640      	mov	r0, r8
 800763a:	4798      	blx	r3
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	3b01      	subs	r3, #1
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007646:	fa5f fa8a 	uxtb.w	sl, sl
 800764a:	f1ba 0f02 	cmp.w	sl, #2
 800764e:	d1ec      	bne.n	800762a <_scanf_float+0x2c6>
 8007650:	3d03      	subs	r5, #3
 8007652:	b2ed      	uxtb	r5, r5
 8007654:	1b76      	subs	r6, r6, r5
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	05da      	lsls	r2, r3, #23
 800765a:	d52f      	bpl.n	80076bc <_scanf_float+0x358>
 800765c:	055b      	lsls	r3, r3, #21
 800765e:	d510      	bpl.n	8007682 <_scanf_float+0x31e>
 8007660:	455e      	cmp	r6, fp
 8007662:	f67f aebf 	bls.w	80073e4 <_scanf_float+0x80>
 8007666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800766a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800766e:	463a      	mov	r2, r7
 8007670:	4640      	mov	r0, r8
 8007672:	4798      	blx	r3
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	3b01      	subs	r3, #1
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	e7f1      	b.n	8007660 <_scanf_float+0x2fc>
 800767c:	46aa      	mov	sl, r5
 800767e:	9602      	str	r6, [sp, #8]
 8007680:	e7df      	b.n	8007642 <_scanf_float+0x2de>
 8007682:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	2965      	cmp	r1, #101	; 0x65
 800768a:	f103 33ff 	add.w	r3, r3, #4294967295
 800768e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	d00c      	beq.n	80076b0 <_scanf_float+0x34c>
 8007696:	2945      	cmp	r1, #69	; 0x45
 8007698:	d00a      	beq.n	80076b0 <_scanf_float+0x34c>
 800769a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800769e:	463a      	mov	r2, r7
 80076a0:	4640      	mov	r0, r8
 80076a2:	4798      	blx	r3
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	1eb5      	subs	r5, r6, #2
 80076ae:	6123      	str	r3, [r4, #16]
 80076b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076b4:	463a      	mov	r2, r7
 80076b6:	4640      	mov	r0, r8
 80076b8:	4798      	blx	r3
 80076ba:	462e      	mov	r6, r5
 80076bc:	6825      	ldr	r5, [r4, #0]
 80076be:	f015 0510 	ands.w	r5, r5, #16
 80076c2:	d14e      	bne.n	8007762 <_scanf_float+0x3fe>
 80076c4:	7035      	strb	r5, [r6, #0]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d0:	d119      	bne.n	8007706 <_scanf_float+0x3a2>
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	454b      	cmp	r3, r9
 80076d6:	eba3 0209 	sub.w	r2, r3, r9
 80076da:	d121      	bne.n	8007720 <_scanf_float+0x3bc>
 80076dc:	2200      	movs	r2, #0
 80076de:	4659      	mov	r1, fp
 80076e0:	4640      	mov	r0, r8
 80076e2:	f000 fecb 	bl	800847c <_strtod_r>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	f012 0f02 	tst.w	r2, #2
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	d021      	beq.n	8007736 <_scanf_float+0x3d2>
 80076f2:	9903      	ldr	r1, [sp, #12]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	600a      	str	r2, [r1, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	ed83 0b00 	vstr	d0, [r3]
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60e3      	str	r3, [r4, #12]
 8007704:	e66f      	b.n	80073e6 <_scanf_float+0x82>
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0e7      	beq.n	80076dc <_scanf_float+0x378>
 800770c:	9905      	ldr	r1, [sp, #20]
 800770e:	230a      	movs	r3, #10
 8007710:	462a      	mov	r2, r5
 8007712:	3101      	adds	r1, #1
 8007714:	4640      	mov	r0, r8
 8007716:	f000 ff39 	bl	800858c <_strtol_r>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	9e05      	ldr	r6, [sp, #20]
 800771e:	1ac2      	subs	r2, r0, r3
 8007720:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007724:	429e      	cmp	r6, r3
 8007726:	bf28      	it	cs
 8007728:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800772c:	490e      	ldr	r1, [pc, #56]	; (8007768 <_scanf_float+0x404>)
 800772e:	4630      	mov	r0, r6
 8007730:	f000 f8b2 	bl	8007898 <siprintf>
 8007734:	e7d2      	b.n	80076dc <_scanf_float+0x378>
 8007736:	9903      	ldr	r1, [sp, #12]
 8007738:	f012 0f04 	tst.w	r2, #4
 800773c:	f103 0204 	add.w	r2, r3, #4
 8007740:	600a      	str	r2, [r1, #0]
 8007742:	d1d9      	bne.n	80076f8 <_scanf_float+0x394>
 8007744:	eeb4 0b40 	vcmp.f64	d0, d0
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	681e      	ldr	r6, [r3, #0]
 800774e:	d705      	bvc.n	800775c <_scanf_float+0x3f8>
 8007750:	4806      	ldr	r0, [pc, #24]	; (800776c <_scanf_float+0x408>)
 8007752:	f000 f89b 	bl	800788c <nanf>
 8007756:	ed86 0a00 	vstr	s0, [r6]
 800775a:	e7d0      	b.n	80076fe <_scanf_float+0x39a>
 800775c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007760:	e7f9      	b.n	8007756 <_scanf_float+0x3f2>
 8007762:	2500      	movs	r5, #0
 8007764:	e63f      	b.n	80073e6 <_scanf_float+0x82>
 8007766:	bf00      	nop
 8007768:	0800b3c4 	.word	0x0800b3c4
 800776c:	0800b838 	.word	0x0800b838

08007770 <iprintf>:
 8007770:	b40f      	push	{r0, r1, r2, r3}
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <iprintf+0x2c>)
 8007774:	b513      	push	{r0, r1, r4, lr}
 8007776:	681c      	ldr	r4, [r3, #0]
 8007778:	b124      	cbz	r4, 8007784 <iprintf+0x14>
 800777a:	69a3      	ldr	r3, [r4, #24]
 800777c:	b913      	cbnz	r3, 8007784 <iprintf+0x14>
 800777e:	4620      	mov	r0, r4
 8007780:	f001 feda 	bl	8009538 <__sinit>
 8007784:	ab05      	add	r3, sp, #20
 8007786:	9a04      	ldr	r2, [sp, #16]
 8007788:	68a1      	ldr	r1, [r4, #8]
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	4620      	mov	r0, r4
 800778e:	f003 fa9f 	bl	800acd0 <_vfiprintf_r>
 8007792:	b002      	add	sp, #8
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	b004      	add	sp, #16
 800779a:	4770      	bx	lr
 800779c:	24000010 	.word	0x24000010

080077a0 <_puts_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	4605      	mov	r5, r0
 80077a6:	b118      	cbz	r0, 80077b0 <_puts_r+0x10>
 80077a8:	6983      	ldr	r3, [r0, #24]
 80077aa:	b90b      	cbnz	r3, 80077b0 <_puts_r+0x10>
 80077ac:	f001 fec4 	bl	8009538 <__sinit>
 80077b0:	69ab      	ldr	r3, [r5, #24]
 80077b2:	68ac      	ldr	r4, [r5, #8]
 80077b4:	b913      	cbnz	r3, 80077bc <_puts_r+0x1c>
 80077b6:	4628      	mov	r0, r5
 80077b8:	f001 febe 	bl	8009538 <__sinit>
 80077bc:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <_puts_r+0xd0>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d120      	bne.n	8007804 <_puts_r+0x64>
 80077c2:	686c      	ldr	r4, [r5, #4]
 80077c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_puts_r+0x36>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	0598      	lsls	r0, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_puts_r+0x36>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f002 fac2 	bl	8009d5a <__retarget_lock_acquire_recursive>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	0719      	lsls	r1, r3, #28
 80077da:	d51d      	bpl.n	8007818 <_puts_r+0x78>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	b1db      	cbz	r3, 8007818 <_puts_r+0x78>
 80077e0:	3e01      	subs	r6, #1
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077e8:	3b01      	subs	r3, #1
 80077ea:	60a3      	str	r3, [r4, #8]
 80077ec:	bb39      	cbnz	r1, 800783e <_puts_r+0x9e>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da38      	bge.n	8007864 <_puts_r+0xc4>
 80077f2:	4622      	mov	r2, r4
 80077f4:	210a      	movs	r1, #10
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 feca 	bl	8008590 <__swbuf_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d011      	beq.n	8007824 <_puts_r+0x84>
 8007800:	250a      	movs	r5, #10
 8007802:	e011      	b.n	8007828 <_puts_r+0x88>
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <_puts_r+0xd4>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d101      	bne.n	800780e <_puts_r+0x6e>
 800780a:	68ac      	ldr	r4, [r5, #8]
 800780c:	e7da      	b.n	80077c4 <_puts_r+0x24>
 800780e:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <_puts_r+0xd8>)
 8007810:	429c      	cmp	r4, r3
 8007812:	bf08      	it	eq
 8007814:	68ec      	ldreq	r4, [r5, #12]
 8007816:	e7d5      	b.n	80077c4 <_puts_r+0x24>
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 ff0a 	bl	8008634 <__swsetup_r>
 8007820:	2800      	cmp	r0, #0
 8007822:	d0dd      	beq.n	80077e0 <_puts_r+0x40>
 8007824:	f04f 35ff 	mov.w	r5, #4294967295
 8007828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800782a:	07da      	lsls	r2, r3, #31
 800782c:	d405      	bmi.n	800783a <_puts_r+0x9a>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	059b      	lsls	r3, r3, #22
 8007832:	d402      	bmi.n	800783a <_puts_r+0x9a>
 8007834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007836:	f002 fa91 	bl	8009d5c <__retarget_lock_release_recursive>
 800783a:	4628      	mov	r0, r5
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	2b00      	cmp	r3, #0
 8007840:	da04      	bge.n	800784c <_puts_r+0xac>
 8007842:	69a2      	ldr	r2, [r4, #24]
 8007844:	429a      	cmp	r2, r3
 8007846:	dc06      	bgt.n	8007856 <_puts_r+0xb6>
 8007848:	290a      	cmp	r1, #10
 800784a:	d004      	beq.n	8007856 <_puts_r+0xb6>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	6022      	str	r2, [r4, #0]
 8007852:	7019      	strb	r1, [r3, #0]
 8007854:	e7c5      	b.n	80077e2 <_puts_r+0x42>
 8007856:	4622      	mov	r2, r4
 8007858:	4628      	mov	r0, r5
 800785a:	f000 fe99 	bl	8008590 <__swbuf_r>
 800785e:	3001      	adds	r0, #1
 8007860:	d1bf      	bne.n	80077e2 <_puts_r+0x42>
 8007862:	e7df      	b.n	8007824 <_puts_r+0x84>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	250a      	movs	r5, #10
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	6022      	str	r2, [r4, #0]
 800786c:	701d      	strb	r5, [r3, #0]
 800786e:	e7db      	b.n	8007828 <_puts_r+0x88>
 8007870:	0800b5d4 	.word	0x0800b5d4
 8007874:	0800b5f4 	.word	0x0800b5f4
 8007878:	0800b5b4 	.word	0x0800b5b4

0800787c <puts>:
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <puts+0xc>)
 800787e:	4601      	mov	r1, r0
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f7ff bf8d 	b.w	80077a0 <_puts_r>
 8007886:	bf00      	nop
 8007888:	24000010 	.word	0x24000010

0800788c <nanf>:
 800788c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007894 <nanf+0x8>
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	7fc00000 	.word	0x7fc00000

08007898 <siprintf>:
 8007898:	b40e      	push	{r1, r2, r3}
 800789a:	b500      	push	{lr}
 800789c:	b09c      	sub	sp, #112	; 0x70
 800789e:	ab1d      	add	r3, sp, #116	; 0x74
 80078a0:	9002      	str	r0, [sp, #8]
 80078a2:	9006      	str	r0, [sp, #24]
 80078a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a8:	4809      	ldr	r0, [pc, #36]	; (80078d0 <siprintf+0x38>)
 80078aa:	9107      	str	r1, [sp, #28]
 80078ac:	9104      	str	r1, [sp, #16]
 80078ae:	4909      	ldr	r1, [pc, #36]	; (80078d4 <siprintf+0x3c>)
 80078b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b4:	9105      	str	r1, [sp, #20]
 80078b6:	6800      	ldr	r0, [r0, #0]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	a902      	add	r1, sp, #8
 80078bc:	f003 f8de 	bl	800aa7c <_svfiprintf_r>
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	b01c      	add	sp, #112	; 0x70
 80078c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078cc:	b003      	add	sp, #12
 80078ce:	4770      	bx	lr
 80078d0:	24000010 	.word	0x24000010
 80078d4:	ffff0208 	.word	0xffff0208

080078d8 <sulp>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	4616      	mov	r6, r2
 80078e0:	ec45 4b10 	vmov	d0, r4, r5
 80078e4:	f002 fe2c 	bl	800a540 <__ulp>
 80078e8:	b17e      	cbz	r6, 800790a <sulp+0x32>
 80078ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd09      	ble.n	800790a <sulp+0x32>
 80078f6:	051b      	lsls	r3, r3, #20
 80078f8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80078fc:	2000      	movs	r0, #0
 80078fe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007902:	ec41 0b17 	vmov	d7, r0, r1
 8007906:	ee20 0b07 	vmul.f64	d0, d0, d7
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	0000      	movs	r0, r0
	...

08007910 <_strtod_l>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	ed2d 8b0e 	vpush	{d8-d14}
 8007918:	b097      	sub	sp, #92	; 0x5c
 800791a:	461f      	mov	r7, r3
 800791c:	2300      	movs	r3, #0
 800791e:	9312      	str	r3, [sp, #72]	; 0x48
 8007920:	4ba1      	ldr	r3, [pc, #644]	; (8007ba8 <_strtod_l+0x298>)
 8007922:	920d      	str	r2, [sp, #52]	; 0x34
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	4604      	mov	r4, r0
 800792a:	4618      	mov	r0, r3
 800792c:	468b      	mov	fp, r1
 800792e:	f7f8 fcd7 	bl	80002e0 <strlen>
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	4605      	mov	r5, r0
 8007938:	f04f 0900 	mov.w	r9, #0
 800793c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007940:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007942:	7813      	ldrb	r3, [r2, #0]
 8007944:	2b2b      	cmp	r3, #43	; 0x2b
 8007946:	d04d      	beq.n	80079e4 <_strtod_l+0xd4>
 8007948:	d83a      	bhi.n	80079c0 <_strtod_l+0xb0>
 800794a:	2b0d      	cmp	r3, #13
 800794c:	d833      	bhi.n	80079b6 <_strtod_l+0xa6>
 800794e:	2b08      	cmp	r3, #8
 8007950:	d833      	bhi.n	80079ba <_strtod_l+0xaa>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d03d      	beq.n	80079d2 <_strtod_l+0xc2>
 8007956:	2300      	movs	r3, #0
 8007958:	9308      	str	r3, [sp, #32]
 800795a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800795c:	7833      	ldrb	r3, [r6, #0]
 800795e:	2b30      	cmp	r3, #48	; 0x30
 8007960:	f040 80b0 	bne.w	8007ac4 <_strtod_l+0x1b4>
 8007964:	7873      	ldrb	r3, [r6, #1]
 8007966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800796a:	2b58      	cmp	r3, #88	; 0x58
 800796c:	d167      	bne.n	8007a3e <_strtod_l+0x12e>
 800796e:	9b08      	ldr	r3, [sp, #32]
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	ab12      	add	r3, sp, #72	; 0x48
 8007974:	9702      	str	r7, [sp, #8]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4a8c      	ldr	r2, [pc, #560]	; (8007bac <_strtod_l+0x29c>)
 800797a:	ab13      	add	r3, sp, #76	; 0x4c
 800797c:	a911      	add	r1, sp, #68	; 0x44
 800797e:	4620      	mov	r0, r4
 8007980:	f001 fede 	bl	8009740 <__gethex>
 8007984:	f010 0507 	ands.w	r5, r0, #7
 8007988:	4607      	mov	r7, r0
 800798a:	d005      	beq.n	8007998 <_strtod_l+0x88>
 800798c:	2d06      	cmp	r5, #6
 800798e:	d12b      	bne.n	80079e8 <_strtod_l+0xd8>
 8007990:	3601      	adds	r6, #1
 8007992:	2300      	movs	r3, #0
 8007994:	9611      	str	r6, [sp, #68]	; 0x44
 8007996:	9308      	str	r3, [sp, #32]
 8007998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 854e 	bne.w	800843c <_strtod_l+0xb2c>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	b1e3      	cbz	r3, 80079de <_strtod_l+0xce>
 80079a4:	ec49 8b17 	vmov	d7, r8, r9
 80079a8:	eeb1 0b47 	vneg.f64	d0, d7
 80079ac:	b017      	add	sp, #92	; 0x5c
 80079ae:	ecbd 8b0e 	vpop	{d8-d14}
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d1cd      	bne.n	8007956 <_strtod_l+0x46>
 80079ba:	3201      	adds	r2, #1
 80079bc:	9211      	str	r2, [sp, #68]	; 0x44
 80079be:	e7bf      	b.n	8007940 <_strtod_l+0x30>
 80079c0:	2b2d      	cmp	r3, #45	; 0x2d
 80079c2:	d1c8      	bne.n	8007956 <_strtod_l+0x46>
 80079c4:	2301      	movs	r3, #1
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	1c53      	adds	r3, r2, #1
 80079ca:	9311      	str	r3, [sp, #68]	; 0x44
 80079cc:	7853      	ldrb	r3, [r2, #1]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1c3      	bne.n	800795a <_strtod_l+0x4a>
 80079d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 852d 	bne.w	8008438 <_strtod_l+0xb28>
 80079de:	ec49 8b10 	vmov	d0, r8, r9
 80079e2:	e7e3      	b.n	80079ac <_strtod_l+0x9c>
 80079e4:	2300      	movs	r3, #0
 80079e6:	e7ee      	b.n	80079c6 <_strtod_l+0xb6>
 80079e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079ea:	b13a      	cbz	r2, 80079fc <_strtod_l+0xec>
 80079ec:	2135      	movs	r1, #53	; 0x35
 80079ee:	a814      	add	r0, sp, #80	; 0x50
 80079f0:	f002 feae 	bl	800a750 <__copybits>
 80079f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80079f6:	4620      	mov	r0, r4
 80079f8:	f002 fa70 	bl	8009edc <_Bfree>
 80079fc:	3d01      	subs	r5, #1
 80079fe:	2d04      	cmp	r5, #4
 8007a00:	d806      	bhi.n	8007a10 <_strtod_l+0x100>
 8007a02:	e8df f005 	tbb	[pc, r5]
 8007a06:	030a      	.short	0x030a
 8007a08:	1714      	.short	0x1714
 8007a0a:	0a          	.byte	0x0a
 8007a0b:	00          	.byte	0x00
 8007a0c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007a10:	073f      	lsls	r7, r7, #28
 8007a12:	d5c1      	bpl.n	8007998 <_strtod_l+0x88>
 8007a14:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007a18:	e7be      	b.n	8007998 <_strtod_l+0x88>
 8007a1a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007a1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a2c:	e7f0      	b.n	8007a10 <_strtod_l+0x100>
 8007a2e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8007bb0 <_strtod_l+0x2a0>
 8007a32:	e7ed      	b.n	8007a10 <_strtod_l+0x100>
 8007a34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a38:	f04f 38ff 	mov.w	r8, #4294967295
 8007a3c:	e7e8      	b.n	8007a10 <_strtod_l+0x100>
 8007a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	9211      	str	r2, [sp, #68]	; 0x44
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d0f9      	beq.n	8007a3e <_strtod_l+0x12e>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0a4      	beq.n	8007998 <_strtod_l+0x88>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f04f 0a00 	mov.w	sl, #0
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a58:	930a      	str	r3, [sp, #40]	; 0x28
 8007a5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007a5e:	f8cd a018 	str.w	sl, [sp, #24]
 8007a62:	220a      	movs	r2, #10
 8007a64:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007a66:	7807      	ldrb	r7, [r0, #0]
 8007a68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007a6c:	b2d9      	uxtb	r1, r3
 8007a6e:	2909      	cmp	r1, #9
 8007a70:	d92a      	bls.n	8007ac8 <_strtod_l+0x1b8>
 8007a72:	9907      	ldr	r1, [sp, #28]
 8007a74:	462a      	mov	r2, r5
 8007a76:	f003 fab6 	bl	800afe6 <strncmp>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d033      	beq.n	8007ae6 <_strtod_l+0x1d6>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	9b06      	ldr	r3, [sp, #24]
 8007a82:	463a      	mov	r2, r7
 8007a84:	4601      	mov	r1, r0
 8007a86:	4607      	mov	r7, r0
 8007a88:	2a65      	cmp	r2, #101	; 0x65
 8007a8a:	d001      	beq.n	8007a90 <_strtod_l+0x180>
 8007a8c:	2a45      	cmp	r2, #69	; 0x45
 8007a8e:	d117      	bne.n	8007ac0 <_strtod_l+0x1b0>
 8007a90:	b91b      	cbnz	r3, 8007a9a <_strtod_l+0x18a>
 8007a92:	9b04      	ldr	r3, [sp, #16]
 8007a94:	4303      	orrs	r3, r0
 8007a96:	d09c      	beq.n	80079d2 <_strtod_l+0xc2>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8007a9e:	f10b 0201 	add.w	r2, fp, #1
 8007aa2:	9211      	str	r2, [sp, #68]	; 0x44
 8007aa4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8007aa8:	2a2b      	cmp	r2, #43	; 0x2b
 8007aaa:	d071      	beq.n	8007b90 <_strtod_l+0x280>
 8007aac:	2a2d      	cmp	r2, #45	; 0x2d
 8007aae:	d077      	beq.n	8007ba0 <_strtod_l+0x290>
 8007ab0:	f04f 0e00 	mov.w	lr, #0
 8007ab4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007ab8:	2d09      	cmp	r5, #9
 8007aba:	d97f      	bls.n	8007bbc <_strtod_l+0x2ac>
 8007abc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007ac0:	2500      	movs	r5, #0
 8007ac2:	e09b      	b.n	8007bfc <_strtod_l+0x2ec>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e7c3      	b.n	8007a50 <_strtod_l+0x140>
 8007ac8:	9906      	ldr	r1, [sp, #24]
 8007aca:	2908      	cmp	r1, #8
 8007acc:	bfdd      	ittte	le
 8007ace:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007ad0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ad4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007ad6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007ada:	9b06      	ldr	r3, [sp, #24]
 8007adc:	3001      	adds	r0, #1
 8007ade:	3301      	adds	r3, #1
 8007ae0:	9306      	str	r3, [sp, #24]
 8007ae2:	9011      	str	r0, [sp, #68]	; 0x44
 8007ae4:	e7be      	b.n	8007a64 <_strtod_l+0x154>
 8007ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ae8:	195a      	adds	r2, r3, r5
 8007aea:	9211      	str	r2, [sp, #68]	; 0x44
 8007aec:	5d5a      	ldrb	r2, [r3, r5]
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	b3a3      	cbz	r3, 8007b5c <_strtod_l+0x24c>
 8007af2:	4607      	mov	r7, r0
 8007af4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007af8:	2909      	cmp	r1, #9
 8007afa:	d912      	bls.n	8007b22 <_strtod_l+0x212>
 8007afc:	2101      	movs	r1, #1
 8007afe:	e7c3      	b.n	8007a88 <_strtod_l+0x178>
 8007b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	9211      	str	r2, [sp, #68]	; 0x44
 8007b06:	785a      	ldrb	r2, [r3, #1]
 8007b08:	3001      	adds	r0, #1
 8007b0a:	2a30      	cmp	r2, #48	; 0x30
 8007b0c:	d0f8      	beq.n	8007b00 <_strtod_l+0x1f0>
 8007b0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	f200 8497 	bhi.w	8008446 <_strtod_l+0xb36>
 8007b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	2000      	movs	r0, #0
 8007b20:	4603      	mov	r3, r0
 8007b22:	3a30      	subs	r2, #48	; 0x30
 8007b24:	f100 0101 	add.w	r1, r0, #1
 8007b28:	d012      	beq.n	8007b50 <_strtod_l+0x240>
 8007b2a:	440f      	add	r7, r1
 8007b2c:	eb00 0c03 	add.w	ip, r0, r3
 8007b30:	4619      	mov	r1, r3
 8007b32:	250a      	movs	r5, #10
 8007b34:	4561      	cmp	r1, ip
 8007b36:	d113      	bne.n	8007b60 <_strtod_l+0x250>
 8007b38:	1819      	adds	r1, r3, r0
 8007b3a:	2908      	cmp	r1, #8
 8007b3c:	f103 0301 	add.w	r3, r3, #1
 8007b40:	4403      	add	r3, r0
 8007b42:	dc1c      	bgt.n	8007b7e <_strtod_l+0x26e>
 8007b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b46:	210a      	movs	r1, #10
 8007b48:	fb01 2200 	mla	r2, r1, r0, r2
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	2100      	movs	r1, #0
 8007b50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b52:	1c50      	adds	r0, r2, #1
 8007b54:	9011      	str	r0, [sp, #68]	; 0x44
 8007b56:	7852      	ldrb	r2, [r2, #1]
 8007b58:	4608      	mov	r0, r1
 8007b5a:	e7cb      	b.n	8007af4 <_strtod_l+0x1e4>
 8007b5c:	9806      	ldr	r0, [sp, #24]
 8007b5e:	e7d4      	b.n	8007b0a <_strtod_l+0x1fa>
 8007b60:	2908      	cmp	r1, #8
 8007b62:	dc04      	bgt.n	8007b6e <_strtod_l+0x25e>
 8007b64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b66:	436e      	muls	r6, r5
 8007b68:	9609      	str	r6, [sp, #36]	; 0x24
 8007b6a:	3101      	adds	r1, #1
 8007b6c:	e7e2      	b.n	8007b34 <_strtod_l+0x224>
 8007b6e:	f101 0e01 	add.w	lr, r1, #1
 8007b72:	f1be 0f10 	cmp.w	lr, #16
 8007b76:	bfd8      	it	le
 8007b78:	fb05 fa0a 	mulle.w	sl, r5, sl
 8007b7c:	e7f5      	b.n	8007b6a <_strtod_l+0x25a>
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	bfdc      	itt	le
 8007b82:	210a      	movle	r1, #10
 8007b84:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8007b88:	e7e1      	b.n	8007b4e <_strtod_l+0x23e>
 8007b8a:	2700      	movs	r7, #0
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	e780      	b.n	8007a92 <_strtod_l+0x182>
 8007b90:	f04f 0e00 	mov.w	lr, #0
 8007b94:	f10b 0202 	add.w	r2, fp, #2
 8007b98:	9211      	str	r2, [sp, #68]	; 0x44
 8007b9a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8007b9e:	e789      	b.n	8007ab4 <_strtod_l+0x1a4>
 8007ba0:	f04f 0e01 	mov.w	lr, #1
 8007ba4:	e7f6      	b.n	8007b94 <_strtod_l+0x284>
 8007ba6:	bf00      	nop
 8007ba8:	0800b67c 	.word	0x0800b67c
 8007bac:	0800b3cc 	.word	0x0800b3cc
 8007bb0:	7ff00000 	.word	0x7ff00000
 8007bb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bb6:	1c55      	adds	r5, r2, #1
 8007bb8:	9511      	str	r5, [sp, #68]	; 0x44
 8007bba:	7852      	ldrb	r2, [r2, #1]
 8007bbc:	2a30      	cmp	r2, #48	; 0x30
 8007bbe:	d0f9      	beq.n	8007bb4 <_strtod_l+0x2a4>
 8007bc0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007bc4:	2d08      	cmp	r5, #8
 8007bc6:	f63f af7b 	bhi.w	8007ac0 <_strtod_l+0x1b0>
 8007bca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007bce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bd0:	9207      	str	r2, [sp, #28]
 8007bd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bd4:	1c55      	adds	r5, r2, #1
 8007bd6:	9511      	str	r5, [sp, #68]	; 0x44
 8007bd8:	7852      	ldrb	r2, [r2, #1]
 8007bda:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007bde:	2e09      	cmp	r6, #9
 8007be0:	d937      	bls.n	8007c52 <_strtod_l+0x342>
 8007be2:	9e07      	ldr	r6, [sp, #28]
 8007be4:	1bad      	subs	r5, r5, r6
 8007be6:	2d08      	cmp	r5, #8
 8007be8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007bec:	dc02      	bgt.n	8007bf4 <_strtod_l+0x2e4>
 8007bee:	4565      	cmp	r5, ip
 8007bf0:	bfa8      	it	ge
 8007bf2:	4665      	movge	r5, ip
 8007bf4:	f1be 0f00 	cmp.w	lr, #0
 8007bf8:	d000      	beq.n	8007bfc <_strtod_l+0x2ec>
 8007bfa:	426d      	negs	r5, r5
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d14d      	bne.n	8007c9c <_strtod_l+0x38c>
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	4303      	orrs	r3, r0
 8007c04:	f47f aec8 	bne.w	8007998 <_strtod_l+0x88>
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	f47f aee2 	bne.w	80079d2 <_strtod_l+0xc2>
 8007c0e:	2a69      	cmp	r2, #105	; 0x69
 8007c10:	d027      	beq.n	8007c62 <_strtod_l+0x352>
 8007c12:	dc24      	bgt.n	8007c5e <_strtod_l+0x34e>
 8007c14:	2a49      	cmp	r2, #73	; 0x49
 8007c16:	d024      	beq.n	8007c62 <_strtod_l+0x352>
 8007c18:	2a4e      	cmp	r2, #78	; 0x4e
 8007c1a:	f47f aeda 	bne.w	80079d2 <_strtod_l+0xc2>
 8007c1e:	4996      	ldr	r1, [pc, #600]	; (8007e78 <_strtod_l+0x568>)
 8007c20:	a811      	add	r0, sp, #68	; 0x44
 8007c22:	f001 ffe5 	bl	8009bf0 <__match>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f aed3 	beq.w	80079d2 <_strtod_l+0xc2>
 8007c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b28      	cmp	r3, #40	; 0x28
 8007c32:	d12d      	bne.n	8007c90 <_strtod_l+0x380>
 8007c34:	4991      	ldr	r1, [pc, #580]	; (8007e7c <_strtod_l+0x56c>)
 8007c36:	aa14      	add	r2, sp, #80	; 0x50
 8007c38:	a811      	add	r0, sp, #68	; 0x44
 8007c3a:	f001 ffed 	bl	8009c18 <__hexnan>
 8007c3e:	2805      	cmp	r0, #5
 8007c40:	d126      	bne.n	8007c90 <_strtod_l+0x380>
 8007c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c44:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007c48:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c4c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c50:	e6a2      	b.n	8007998 <_strtod_l+0x88>
 8007c52:	250a      	movs	r5, #10
 8007c54:	fb05 250c 	mla	r5, r5, ip, r2
 8007c58:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007c5c:	e7b9      	b.n	8007bd2 <_strtod_l+0x2c2>
 8007c5e:	2a6e      	cmp	r2, #110	; 0x6e
 8007c60:	e7db      	b.n	8007c1a <_strtod_l+0x30a>
 8007c62:	4987      	ldr	r1, [pc, #540]	; (8007e80 <_strtod_l+0x570>)
 8007c64:	a811      	add	r0, sp, #68	; 0x44
 8007c66:	f001 ffc3 	bl	8009bf0 <__match>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f aeb1 	beq.w	80079d2 <_strtod_l+0xc2>
 8007c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c72:	4984      	ldr	r1, [pc, #528]	; (8007e84 <_strtod_l+0x574>)
 8007c74:	3b01      	subs	r3, #1
 8007c76:	a811      	add	r0, sp, #68	; 0x44
 8007c78:	9311      	str	r3, [sp, #68]	; 0x44
 8007c7a:	f001 ffb9 	bl	8009bf0 <__match>
 8007c7e:	b910      	cbnz	r0, 8007c86 <_strtod_l+0x376>
 8007c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c82:	3301      	adds	r3, #1
 8007c84:	9311      	str	r3, [sp, #68]	; 0x44
 8007c86:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007e98 <_strtod_l+0x588>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	e683      	b.n	8007998 <_strtod_l+0x88>
 8007c90:	487d      	ldr	r0, [pc, #500]	; (8007e88 <_strtod_l+0x578>)
 8007c92:	f003 f94d 	bl	800af30 <nan>
 8007c96:	ec59 8b10 	vmov	r8, r9, d0
 8007c9a:	e67d      	b.n	8007998 <_strtod_l+0x88>
 8007c9c:	1bea      	subs	r2, r5, r7
 8007c9e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8007ca2:	9207      	str	r2, [sp, #28]
 8007ca4:	9a06      	ldr	r2, [sp, #24]
 8007ca6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	bf08      	it	eq
 8007cae:	461a      	moveq	r2, r3
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	9206      	str	r2, [sp, #24]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	bfa8      	it	ge
 8007cb8:	2210      	movge	r2, #16
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	ec59 8b17 	vmov	r8, r9, d7
 8007cc0:	dd0c      	ble.n	8007cdc <_strtod_l+0x3cc>
 8007cc2:	4972      	ldr	r1, [pc, #456]	; (8007e8c <_strtod_l+0x57c>)
 8007cc4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007cc8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8007ccc:	ee06 aa90 	vmov	s13, sl
 8007cd0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007cd4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007cd8:	ec59 8b16 	vmov	r8, r9, d6
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	dc36      	bgt.n	8007d4e <_strtod_l+0x43e>
 8007ce0:	9907      	ldr	r1, [sp, #28]
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	f43f ae58 	beq.w	8007998 <_strtod_l+0x88>
 8007ce8:	dd23      	ble.n	8007d32 <_strtod_l+0x422>
 8007cea:	2916      	cmp	r1, #22
 8007cec:	dc0b      	bgt.n	8007d06 <_strtod_l+0x3f6>
 8007cee:	4b67      	ldr	r3, [pc, #412]	; (8007e8c <_strtod_l+0x57c>)
 8007cf0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007cf4:	ed93 7b00 	vldr	d7, [r3]
 8007cf8:	ec49 8b16 	vmov	d6, r8, r9
 8007cfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d00:	ec59 8b17 	vmov	r8, r9, d7
 8007d04:	e648      	b.n	8007998 <_strtod_l+0x88>
 8007d06:	9807      	ldr	r0, [sp, #28]
 8007d08:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007d0c:	4281      	cmp	r1, r0
 8007d0e:	db1e      	blt.n	8007d4e <_strtod_l+0x43e>
 8007d10:	4a5e      	ldr	r2, [pc, #376]	; (8007e8c <_strtod_l+0x57c>)
 8007d12:	f1c3 030f 	rsb	r3, r3, #15
 8007d16:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007d1a:	ed91 7b00 	vldr	d7, [r1]
 8007d1e:	ec49 8b16 	vmov	d6, r8, r9
 8007d22:	1ac3      	subs	r3, r0, r3
 8007d24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007d28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d2c:	ed92 6b00 	vldr	d6, [r2]
 8007d30:	e7e4      	b.n	8007cfc <_strtod_l+0x3ec>
 8007d32:	9907      	ldr	r1, [sp, #28]
 8007d34:	3116      	adds	r1, #22
 8007d36:	db0a      	blt.n	8007d4e <_strtod_l+0x43e>
 8007d38:	4b54      	ldr	r3, [pc, #336]	; (8007e8c <_strtod_l+0x57c>)
 8007d3a:	1b7d      	subs	r5, r7, r5
 8007d3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d40:	ed95 7b00 	vldr	d7, [r5]
 8007d44:	ec49 8b16 	vmov	d6, r8, r9
 8007d48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d4c:	e7d8      	b.n	8007d00 <_strtod_l+0x3f0>
 8007d4e:	9907      	ldr	r1, [sp, #28]
 8007d50:	1a9a      	subs	r2, r3, r2
 8007d52:	440a      	add	r2, r1
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	dd6f      	ble.n	8007e38 <_strtod_l+0x528>
 8007d58:	f012 000f 	ands.w	r0, r2, #15
 8007d5c:	d00a      	beq.n	8007d74 <_strtod_l+0x464>
 8007d5e:	494b      	ldr	r1, [pc, #300]	; (8007e8c <_strtod_l+0x57c>)
 8007d60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007d64:	ed91 7b00 	vldr	d7, [r1]
 8007d68:	ec49 8b16 	vmov	d6, r8, r9
 8007d6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d70:	ec59 8b17 	vmov	r8, r9, d7
 8007d74:	f032 020f 	bics.w	r2, r2, #15
 8007d78:	d04f      	beq.n	8007e1a <_strtod_l+0x50a>
 8007d7a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007d7e:	dd22      	ble.n	8007dc6 <_strtod_l+0x4b6>
 8007d80:	2500      	movs	r5, #0
 8007d82:	462e      	mov	r6, r5
 8007d84:	9506      	str	r5, [sp, #24]
 8007d86:	462f      	mov	r7, r5
 8007d88:	2322      	movs	r3, #34	; 0x22
 8007d8a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007e98 <_strtod_l+0x588>
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f43f adfe 	beq.w	8007998 <_strtod_l+0x88>
 8007d9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f002 f89c 	bl	8009edc <_Bfree>
 8007da4:	4639      	mov	r1, r7
 8007da6:	4620      	mov	r0, r4
 8007da8:	f002 f898 	bl	8009edc <_Bfree>
 8007dac:	4631      	mov	r1, r6
 8007dae:	4620      	mov	r0, r4
 8007db0:	f002 f894 	bl	8009edc <_Bfree>
 8007db4:	9906      	ldr	r1, [sp, #24]
 8007db6:	4620      	mov	r0, r4
 8007db8:	f002 f890 	bl	8009edc <_Bfree>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f002 f88c 	bl	8009edc <_Bfree>
 8007dc4:	e5e8      	b.n	8007998 <_strtod_l+0x88>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	ec49 8b17 	vmov	d7, r8, r9
 8007dcc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8007e90 <_strtod_l+0x580>
 8007dd0:	1112      	asrs	r2, r2, #4
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	2a01      	cmp	r2, #1
 8007dd6:	dc23      	bgt.n	8007e20 <_strtod_l+0x510>
 8007dd8:	b108      	cbz	r0, 8007dde <_strtod_l+0x4ce>
 8007dda:	ec59 8b17 	vmov	r8, r9, d7
 8007dde:	4a2c      	ldr	r2, [pc, #176]	; (8007e90 <_strtod_l+0x580>)
 8007de0:	482c      	ldr	r0, [pc, #176]	; (8007e94 <_strtod_l+0x584>)
 8007de2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007de6:	ed92 7b00 	vldr	d7, [r2]
 8007dea:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007dee:	ec49 8b16 	vmov	d6, r8, r9
 8007df2:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <_strtod_l+0x588>)
 8007df4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007df8:	ee17 1a90 	vmov	r1, s15
 8007dfc:	400a      	ands	r2, r1
 8007dfe:	4282      	cmp	r2, r0
 8007e00:	ec59 8b17 	vmov	r8, r9, d7
 8007e04:	d8bc      	bhi.n	8007d80 <_strtod_l+0x470>
 8007e06:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007e0a:	4282      	cmp	r2, r0
 8007e0c:	bf86      	itte	hi
 8007e0e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007e9c <_strtod_l+0x58c>
 8007e12:	f04f 38ff 	movhi.w	r8, #4294967295
 8007e16:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9204      	str	r2, [sp, #16]
 8007e1e:	e078      	b.n	8007f12 <_strtod_l+0x602>
 8007e20:	07d6      	lsls	r6, r2, #31
 8007e22:	d504      	bpl.n	8007e2e <_strtod_l+0x51e>
 8007e24:	ed9c 6b00 	vldr	d6, [ip]
 8007e28:	2001      	movs	r0, #1
 8007e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e2e:	3101      	adds	r1, #1
 8007e30:	1052      	asrs	r2, r2, #1
 8007e32:	f10c 0c08 	add.w	ip, ip, #8
 8007e36:	e7cd      	b.n	8007dd4 <_strtod_l+0x4c4>
 8007e38:	d0ef      	beq.n	8007e1a <_strtod_l+0x50a>
 8007e3a:	4252      	negs	r2, r2
 8007e3c:	f012 000f 	ands.w	r0, r2, #15
 8007e40:	d00a      	beq.n	8007e58 <_strtod_l+0x548>
 8007e42:	4912      	ldr	r1, [pc, #72]	; (8007e8c <_strtod_l+0x57c>)
 8007e44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007e48:	ed91 7b00 	vldr	d7, [r1]
 8007e4c:	ec49 8b16 	vmov	d6, r8, r9
 8007e50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e54:	ec59 8b17 	vmov	r8, r9, d7
 8007e58:	1112      	asrs	r2, r2, #4
 8007e5a:	d0de      	beq.n	8007e1a <_strtod_l+0x50a>
 8007e5c:	2a1f      	cmp	r2, #31
 8007e5e:	dd1f      	ble.n	8007ea0 <_strtod_l+0x590>
 8007e60:	2500      	movs	r5, #0
 8007e62:	462e      	mov	r6, r5
 8007e64:	9506      	str	r5, [sp, #24]
 8007e66:	462f      	mov	r7, r5
 8007e68:	2322      	movs	r3, #34	; 0x22
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	e78e      	b.n	8007d94 <_strtod_l+0x484>
 8007e76:	bf00      	nop
 8007e78:	0800b39d 	.word	0x0800b39d
 8007e7c:	0800b3e0 	.word	0x0800b3e0
 8007e80:	0800b395 	.word	0x0800b395
 8007e84:	0800b524 	.word	0x0800b524
 8007e88:	0800b838 	.word	0x0800b838
 8007e8c:	0800b718 	.word	0x0800b718
 8007e90:	0800b6f0 	.word	0x0800b6f0
 8007e94:	7ca00000 	.word	0x7ca00000
 8007e98:	7ff00000 	.word	0x7ff00000
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	f012 0110 	ands.w	r1, r2, #16
 8007ea4:	bf18      	it	ne
 8007ea6:	216a      	movne	r1, #106	; 0x6a
 8007ea8:	9104      	str	r1, [sp, #16]
 8007eaa:	ec49 8b17 	vmov	d7, r8, r9
 8007eae:	49be      	ldr	r1, [pc, #760]	; (80081a8 <_strtod_l+0x898>)
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	07d6      	lsls	r6, r2, #31
 8007eb4:	d504      	bpl.n	8007ec0 <_strtod_l+0x5b0>
 8007eb6:	ed91 6b00 	vldr	d6, [r1]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ec0:	1052      	asrs	r2, r2, #1
 8007ec2:	f101 0108 	add.w	r1, r1, #8
 8007ec6:	d1f4      	bne.n	8007eb2 <_strtod_l+0x5a2>
 8007ec8:	b108      	cbz	r0, 8007ece <_strtod_l+0x5be>
 8007eca:	ec59 8b17 	vmov	r8, r9, d7
 8007ece:	9a04      	ldr	r2, [sp, #16]
 8007ed0:	b1c2      	cbz	r2, 8007f04 <_strtod_l+0x5f4>
 8007ed2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8007ed6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	4648      	mov	r0, r9
 8007ede:	dd11      	ble.n	8007f04 <_strtod_l+0x5f4>
 8007ee0:	2a1f      	cmp	r2, #31
 8007ee2:	f340 812e 	ble.w	8008142 <_strtod_l+0x832>
 8007ee6:	2a34      	cmp	r2, #52	; 0x34
 8007ee8:	bfde      	ittt	le
 8007eea:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8007eee:	f04f 32ff 	movle.w	r2, #4294967295
 8007ef2:	fa02 f101 	lslle.w	r1, r2, r1
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	bfcc      	ite	gt
 8007efc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007f00:	ea01 0900 	andle.w	r9, r1, r0
 8007f04:	ec49 8b17 	vmov	d7, r8, r9
 8007f08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f10:	d0a6      	beq.n	8007e60 <_strtod_l+0x550>
 8007f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f14:	9200      	str	r2, [sp, #0]
 8007f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f002 f846 	bl	8009fac <__s2b>
 8007f20:	9006      	str	r0, [sp, #24]
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f43f af2c 	beq.w	8007d80 <_strtod_l+0x470>
 8007f28:	9b07      	ldr	r3, [sp, #28]
 8007f2a:	1b7d      	subs	r5, r7, r5
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfb4      	ite	lt
 8007f30:	462b      	movlt	r3, r5
 8007f32:	2300      	movge	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	; 0x24
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008188 <_strtod_l+0x878>
 8007f3c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008190 <_strtod_l+0x880>
 8007f40:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008198 <_strtod_l+0x888>
 8007f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f48:	2500      	movs	r5, #0
 8007f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f4c:	462e      	mov	r6, r5
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	4620      	mov	r0, r4
 8007f52:	6859      	ldr	r1, [r3, #4]
 8007f54:	f001 ff82 	bl	8009e5c <_Balloc>
 8007f58:	4607      	mov	r7, r0
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f43f af14 	beq.w	8007d88 <_strtod_l+0x478>
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	3202      	adds	r2, #2
 8007f66:	f103 010c 	add.w	r1, r3, #12
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	300c      	adds	r0, #12
 8007f6e:	f7fe fda1 	bl	8006ab4 <memcpy>
 8007f72:	ec49 8b10 	vmov	d0, r8, r9
 8007f76:	aa14      	add	r2, sp, #80	; 0x50
 8007f78:	a913      	add	r1, sp, #76	; 0x4c
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f002 fb5c 	bl	800a638 <__d2b>
 8007f80:	ec49 8b18 	vmov	d8, r8, r9
 8007f84:	9012      	str	r0, [sp, #72]	; 0x48
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f43f aefe 	beq.w	8007d88 <_strtod_l+0x478>
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f002 f8a6 	bl	800a0e0 <__i2b>
 8007f94:	4606      	mov	r6, r0
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f aef6 	beq.w	8007d88 <_strtod_l+0x478>
 8007f9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f9e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bfab      	itete	ge
 8007fa4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8007fa6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007fa8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8007fac:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8007fb0:	bfac      	ite	ge
 8007fb2:	eb03 0b02 	addge.w	fp, r3, r2
 8007fb6:	eba2 0a03 	sublt.w	sl, r2, r3
 8007fba:	9a04      	ldr	r2, [sp, #16]
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	4a7a      	ldr	r2, [pc, #488]	; (80081ac <_strtod_l+0x89c>)
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007fca:	f280 80cd 	bge.w	8008168 <_strtod_l+0x858>
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	2a1f      	cmp	r2, #31
 8007fd2:	eba1 0102 	sub.w	r1, r1, r2
 8007fd6:	f04f 0001 	mov.w	r0, #1
 8007fda:	f300 80b9 	bgt.w	8008150 <_strtod_l+0x840>
 8007fde:	fa00 f302 	lsl.w	r3, r0, r2
 8007fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe8:	eb0b 0301 	add.w	r3, fp, r1
 8007fec:	9a04      	ldr	r2, [sp, #16]
 8007fee:	459b      	cmp	fp, r3
 8007ff0:	448a      	add	sl, r1
 8007ff2:	4492      	add	sl, r2
 8007ff4:	465a      	mov	r2, fp
 8007ff6:	bfa8      	it	ge
 8007ff8:	461a      	movge	r2, r3
 8007ffa:	4552      	cmp	r2, sl
 8007ffc:	bfa8      	it	ge
 8007ffe:	4652      	movge	r2, sl
 8008000:	2a00      	cmp	r2, #0
 8008002:	bfc2      	ittt	gt
 8008004:	1a9b      	subgt	r3, r3, r2
 8008006:	ebaa 0a02 	subgt.w	sl, sl, r2
 800800a:	ebab 0b02 	subgt.w	fp, fp, r2
 800800e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008010:	2a00      	cmp	r2, #0
 8008012:	dd18      	ble.n	8008046 <_strtod_l+0x736>
 8008014:	4631      	mov	r1, r6
 8008016:	4620      	mov	r0, r4
 8008018:	930f      	str	r3, [sp, #60]	; 0x3c
 800801a:	f002 f921 	bl	800a260 <__pow5mult>
 800801e:	4606      	mov	r6, r0
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f aeb1 	beq.w	8007d88 <_strtod_l+0x478>
 8008026:	4601      	mov	r1, r0
 8008028:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800802a:	4620      	mov	r0, r4
 800802c:	f002 f86e 	bl	800a10c <__multiply>
 8008030:	900e      	str	r0, [sp, #56]	; 0x38
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f aea8 	beq.w	8007d88 <_strtod_l+0x478>
 8008038:	9912      	ldr	r1, [sp, #72]	; 0x48
 800803a:	4620      	mov	r0, r4
 800803c:	f001 ff4e 	bl	8009edc <_Bfree>
 8008040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008044:	9212      	str	r2, [sp, #72]	; 0x48
 8008046:	2b00      	cmp	r3, #0
 8008048:	f300 8093 	bgt.w	8008172 <_strtod_l+0x862>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd08      	ble.n	8008064 <_strtod_l+0x754>
 8008052:	4639      	mov	r1, r7
 8008054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008056:	4620      	mov	r0, r4
 8008058:	f002 f902 	bl	800a260 <__pow5mult>
 800805c:	4607      	mov	r7, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f ae92 	beq.w	8007d88 <_strtod_l+0x478>
 8008064:	f1ba 0f00 	cmp.w	sl, #0
 8008068:	dd08      	ble.n	800807c <_strtod_l+0x76c>
 800806a:	4639      	mov	r1, r7
 800806c:	4652      	mov	r2, sl
 800806e:	4620      	mov	r0, r4
 8008070:	f002 f950 	bl	800a314 <__lshift>
 8008074:	4607      	mov	r7, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f ae86 	beq.w	8007d88 <_strtod_l+0x478>
 800807c:	f1bb 0f00 	cmp.w	fp, #0
 8008080:	dd08      	ble.n	8008094 <_strtod_l+0x784>
 8008082:	4631      	mov	r1, r6
 8008084:	465a      	mov	r2, fp
 8008086:	4620      	mov	r0, r4
 8008088:	f002 f944 	bl	800a314 <__lshift>
 800808c:	4606      	mov	r6, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f ae7a 	beq.w	8007d88 <_strtod_l+0x478>
 8008094:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008096:	463a      	mov	r2, r7
 8008098:	4620      	mov	r0, r4
 800809a:	f002 f9c7 	bl	800a42c <__mdiff>
 800809e:	4605      	mov	r5, r0
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f43f ae71 	beq.w	8007d88 <_strtod_l+0x478>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80080ac:	60c3      	str	r3, [r0, #12]
 80080ae:	4631      	mov	r1, r6
 80080b0:	f002 f9a0 	bl	800a3f4 <__mcmp>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	da7d      	bge.n	80081b4 <_strtod_l+0x8a4>
 80080b8:	ea5a 0308 	orrs.w	r3, sl, r8
 80080bc:	f040 80a3 	bne.w	8008206 <_strtod_l+0x8f6>
 80080c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 809e 	bne.w	8008206 <_strtod_l+0x8f6>
 80080ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080d6:	f240 8096 	bls.w	8008206 <_strtod_l+0x8f6>
 80080da:	696b      	ldr	r3, [r5, #20]
 80080dc:	b91b      	cbnz	r3, 80080e6 <_strtod_l+0x7d6>
 80080de:	692b      	ldr	r3, [r5, #16]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f340 8090 	ble.w	8008206 <_strtod_l+0x8f6>
 80080e6:	4629      	mov	r1, r5
 80080e8:	2201      	movs	r2, #1
 80080ea:	4620      	mov	r0, r4
 80080ec:	f002 f912 	bl	800a314 <__lshift>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4605      	mov	r5, r0
 80080f4:	f002 f97e 	bl	800a3f4 <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f340 8084 	ble.w	8008206 <_strtod_l+0x8f6>
 80080fe:	9904      	ldr	r1, [sp, #16]
 8008100:	4a2b      	ldr	r2, [pc, #172]	; (80081b0 <_strtod_l+0x8a0>)
 8008102:	464b      	mov	r3, r9
 8008104:	2900      	cmp	r1, #0
 8008106:	f000 809d 	beq.w	8008244 <_strtod_l+0x934>
 800810a:	ea02 0109 	and.w	r1, r2, r9
 800810e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008112:	f300 8097 	bgt.w	8008244 <_strtod_l+0x934>
 8008116:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800811a:	f77f aea5 	ble.w	8007e68 <_strtod_l+0x558>
 800811e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80081a0 <_strtod_l+0x890>
 8008122:	ec49 8b16 	vmov	d6, r8, r9
 8008126:	ee26 7b07 	vmul.f64	d7, d6, d7
 800812a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800812e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	bf08      	it	eq
 8008136:	2322      	moveq	r3, #34	; 0x22
 8008138:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800813c:	bf08      	it	eq
 800813e:	6023      	streq	r3, [r4, #0]
 8008140:	e62c      	b.n	8007d9c <_strtod_l+0x48c>
 8008142:	f04f 31ff 	mov.w	r1, #4294967295
 8008146:	fa01 f202 	lsl.w	r2, r1, r2
 800814a:	ea02 0808 	and.w	r8, r2, r8
 800814e:	e6d9      	b.n	8007f04 <_strtod_l+0x5f4>
 8008150:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008154:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008158:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800815c:	33e2      	adds	r3, #226	; 0xe2
 800815e:	fa00 f303 	lsl.w	r3, r0, r3
 8008162:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008166:	e73f      	b.n	8007fe8 <_strtod_l+0x6d8>
 8008168:	2200      	movs	r2, #0
 800816a:	2301      	movs	r3, #1
 800816c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008170:	e73a      	b.n	8007fe8 <_strtod_l+0x6d8>
 8008172:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008174:	461a      	mov	r2, r3
 8008176:	4620      	mov	r0, r4
 8008178:	f002 f8cc 	bl	800a314 <__lshift>
 800817c:	9012      	str	r0, [sp, #72]	; 0x48
 800817e:	2800      	cmp	r0, #0
 8008180:	f47f af64 	bne.w	800804c <_strtod_l+0x73c>
 8008184:	e600      	b.n	8007d88 <_strtod_l+0x478>
 8008186:	bf00      	nop
 8008188:	94a03595 	.word	0x94a03595
 800818c:	3fcfffff 	.word	0x3fcfffff
 8008190:	94a03595 	.word	0x94a03595
 8008194:	3fdfffff 	.word	0x3fdfffff
 8008198:	35afe535 	.word	0x35afe535
 800819c:	3fe00000 	.word	0x3fe00000
 80081a0:	00000000 	.word	0x00000000
 80081a4:	39500000 	.word	0x39500000
 80081a8:	0800b3f8 	.word	0x0800b3f8
 80081ac:	fffffc02 	.word	0xfffffc02
 80081b0:	7ff00000 	.word	0x7ff00000
 80081b4:	46cb      	mov	fp, r9
 80081b6:	d15f      	bne.n	8008278 <_strtod_l+0x968>
 80081b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081bc:	f1ba 0f00 	cmp.w	sl, #0
 80081c0:	d02a      	beq.n	8008218 <_strtod_l+0x908>
 80081c2:	4aa7      	ldr	r2, [pc, #668]	; (8008460 <_strtod_l+0xb50>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d12b      	bne.n	8008220 <_strtod_l+0x910>
 80081c8:	9b04      	ldr	r3, [sp, #16]
 80081ca:	4642      	mov	r2, r8
 80081cc:	b1fb      	cbz	r3, 800820e <_strtod_l+0x8fe>
 80081ce:	4ba5      	ldr	r3, [pc, #660]	; (8008464 <_strtod_l+0xb54>)
 80081d0:	ea09 0303 	and.w	r3, r9, r3
 80081d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081d8:	f04f 31ff 	mov.w	r1, #4294967295
 80081dc:	d81a      	bhi.n	8008214 <_strtod_l+0x904>
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081e4:	fa01 f303 	lsl.w	r3, r1, r3
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d119      	bne.n	8008220 <_strtod_l+0x910>
 80081ec:	4b9e      	ldr	r3, [pc, #632]	; (8008468 <_strtod_l+0xb58>)
 80081ee:	459b      	cmp	fp, r3
 80081f0:	d102      	bne.n	80081f8 <_strtod_l+0x8e8>
 80081f2:	3201      	adds	r2, #1
 80081f4:	f43f adc8 	beq.w	8007d88 <_strtod_l+0x478>
 80081f8:	4b9a      	ldr	r3, [pc, #616]	; (8008464 <_strtod_l+0xb54>)
 80081fa:	ea0b 0303 	and.w	r3, fp, r3
 80081fe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008202:	f04f 0800 	mov.w	r8, #0
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d188      	bne.n	800811e <_strtod_l+0x80e>
 800820c:	e5c6      	b.n	8007d9c <_strtod_l+0x48c>
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	e7e9      	b.n	80081e8 <_strtod_l+0x8d8>
 8008214:	460b      	mov	r3, r1
 8008216:	e7e7      	b.n	80081e8 <_strtod_l+0x8d8>
 8008218:	ea53 0308 	orrs.w	r3, r3, r8
 800821c:	f43f af6f 	beq.w	80080fe <_strtod_l+0x7ee>
 8008220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008222:	b1cb      	cbz	r3, 8008258 <_strtod_l+0x948>
 8008224:	ea13 0f0b 	tst.w	r3, fp
 8008228:	d0ed      	beq.n	8008206 <_strtod_l+0x8f6>
 800822a:	9a04      	ldr	r2, [sp, #16]
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	d014      	beq.n	8008260 <_strtod_l+0x950>
 8008236:	f7ff fb4f 	bl	80078d8 <sulp>
 800823a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800823e:	ec59 8b17 	vmov	r8, r9, d7
 8008242:	e7e0      	b.n	8008206 <_strtod_l+0x8f6>
 8008244:	4013      	ands	r3, r2
 8008246:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800824a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800824e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008252:	f04f 38ff 	mov.w	r8, #4294967295
 8008256:	e7d6      	b.n	8008206 <_strtod_l+0x8f6>
 8008258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825a:	ea13 0f08 	tst.w	r3, r8
 800825e:	e7e3      	b.n	8008228 <_strtod_l+0x918>
 8008260:	f7ff fb3a 	bl	80078d8 <sulp>
 8008264:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008268:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	ec59 8b10 	vmov	r8, r9, d0
 8008274:	d1c7      	bne.n	8008206 <_strtod_l+0x8f6>
 8008276:	e5f7      	b.n	8007e68 <_strtod_l+0x558>
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	f002 fa38 	bl	800a6f0 <__ratio>
 8008280:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008284:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828c:	d865      	bhi.n	800835a <_strtod_l+0xa4a>
 800828e:	f1ba 0f00 	cmp.w	sl, #0
 8008292:	d042      	beq.n	800831a <_strtod_l+0xa0a>
 8008294:	4b75      	ldr	r3, [pc, #468]	; (800846c <_strtod_l+0xb5c>)
 8008296:	2200      	movs	r2, #0
 8008298:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800829c:	4871      	ldr	r0, [pc, #452]	; (8008464 <_strtod_l+0xb54>)
 800829e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008478 <_strtod_l+0xb68>
 80082a2:	ea0b 0100 	and.w	r1, fp, r0
 80082a6:	4561      	cmp	r1, ip
 80082a8:	f040 808e 	bne.w	80083c8 <_strtod_l+0xab8>
 80082ac:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80082b0:	ec49 8b10 	vmov	d0, r8, r9
 80082b4:	ec43 2b1c 	vmov	d12, r2, r3
 80082b8:	910a      	str	r1, [sp, #40]	; 0x28
 80082ba:	f002 f941 	bl	800a540 <__ulp>
 80082be:	ec49 8b1e 	vmov	d14, r8, r9
 80082c2:	4868      	ldr	r0, [pc, #416]	; (8008464 <_strtod_l+0xb54>)
 80082c4:	eeac eb00 	vfma.f64	d14, d12, d0
 80082c8:	ee1e 3a90 	vmov	r3, s29
 80082cc:	4a68      	ldr	r2, [pc, #416]	; (8008470 <_strtod_l+0xb60>)
 80082ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082d0:	4018      	ands	r0, r3
 80082d2:	4290      	cmp	r0, r2
 80082d4:	ec59 8b1e 	vmov	r8, r9, d14
 80082d8:	d94e      	bls.n	8008378 <_strtod_l+0xa68>
 80082da:	ee18 3a90 	vmov	r3, s17
 80082de:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d104      	bne.n	80082f0 <_strtod_l+0x9e0>
 80082e6:	ee18 3a10 	vmov	r3, s16
 80082ea:	3301      	adds	r3, #1
 80082ec:	f43f ad4c 	beq.w	8007d88 <_strtod_l+0x478>
 80082f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008468 <_strtod_l+0xb58>
 80082f4:	f04f 38ff 	mov.w	r8, #4294967295
 80082f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082fa:	4620      	mov	r0, r4
 80082fc:	f001 fdee 	bl	8009edc <_Bfree>
 8008300:	4639      	mov	r1, r7
 8008302:	4620      	mov	r0, r4
 8008304:	f001 fdea 	bl	8009edc <_Bfree>
 8008308:	4631      	mov	r1, r6
 800830a:	4620      	mov	r0, r4
 800830c:	f001 fde6 	bl	8009edc <_Bfree>
 8008310:	4629      	mov	r1, r5
 8008312:	4620      	mov	r0, r4
 8008314:	f001 fde2 	bl	8009edc <_Bfree>
 8008318:	e619      	b.n	8007f4e <_strtod_l+0x63e>
 800831a:	f1b8 0f00 	cmp.w	r8, #0
 800831e:	d112      	bne.n	8008346 <_strtod_l+0xa36>
 8008320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008324:	b9b3      	cbnz	r3, 8008354 <_strtod_l+0xa44>
 8008326:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800832a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008336:	bf58      	it	pl
 8008338:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800833c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008340:	ec53 2b17 	vmov	r2, r3, d7
 8008344:	e7aa      	b.n	800829c <_strtod_l+0x98c>
 8008346:	f1b8 0f01 	cmp.w	r8, #1
 800834a:	d103      	bne.n	8008354 <_strtod_l+0xa44>
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	f43f ad8a 	beq.w	8007e68 <_strtod_l+0x558>
 8008354:	4b47      	ldr	r3, [pc, #284]	; (8008474 <_strtod_l+0xb64>)
 8008356:	2200      	movs	r2, #0
 8008358:	e79e      	b.n	8008298 <_strtod_l+0x988>
 800835a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800835e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008362:	f1ba 0f00 	cmp.w	sl, #0
 8008366:	d104      	bne.n	8008372 <_strtod_l+0xa62>
 8008368:	eeb1 7b4d 	vneg.f64	d7, d13
 800836c:	ec53 2b17 	vmov	r2, r3, d7
 8008370:	e794      	b.n	800829c <_strtod_l+0x98c>
 8008372:	eeb0 7b4d 	vmov.f64	d7, d13
 8008376:	e7f9      	b.n	800836c <_strtod_l+0xa5c>
 8008378:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ba      	bne.n	80082f8 <_strtod_l+0x9e8>
 8008382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008386:	0d1b      	lsrs	r3, r3, #20
 8008388:	051b      	lsls	r3, r3, #20
 800838a:	4299      	cmp	r1, r3
 800838c:	d1b4      	bne.n	80082f8 <_strtod_l+0x9e8>
 800838e:	ec51 0b1d 	vmov	r0, r1, d13
 8008392:	f7f8 f9d1 	bl	8000738 <__aeabi_d2lz>
 8008396:	f7f8 f989 	bl	80006ac <__aeabi_l2d>
 800839a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800839e:	ec41 0b17 	vmov	d7, r0, r1
 80083a2:	ea43 0308 	orr.w	r3, r3, r8
 80083a6:	ea53 030a 	orrs.w	r3, r3, sl
 80083aa:	ee3d db47 	vsub.f64	d13, d13, d7
 80083ae:	d03c      	beq.n	800842a <_strtod_l+0xb1a>
 80083b0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80083b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b8:	f53f acf0 	bmi.w	8007d9c <_strtod_l+0x48c>
 80083bc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80083c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c4:	dd98      	ble.n	80082f8 <_strtod_l+0x9e8>
 80083c6:	e4e9      	b.n	8007d9c <_strtod_l+0x48c>
 80083c8:	9804      	ldr	r0, [sp, #16]
 80083ca:	b1f0      	cbz	r0, 800840a <_strtod_l+0xafa>
 80083cc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80083d0:	d81b      	bhi.n	800840a <_strtod_l+0xafa>
 80083d2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008458 <_strtod_l+0xb48>
 80083d6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80083da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083de:	d811      	bhi.n	8008404 <_strtod_l+0xaf4>
 80083e0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80083e4:	ee1d 3a10 	vmov	r3, s26
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	bf38      	it	cc
 80083ec:	2301      	movcc	r3, #1
 80083ee:	ee0d 3a10 	vmov	s26, r3
 80083f2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	d113      	bne.n	8008424 <_strtod_l+0xb14>
 80083fc:	eeb1 7b4d 	vneg.f64	d7, d13
 8008400:	ec53 2b17 	vmov	r2, r3, d7
 8008404:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008408:	1a43      	subs	r3, r0, r1
 800840a:	eeb0 0b48 	vmov.f64	d0, d8
 800840e:	ec43 2b1c 	vmov	d12, r2, r3
 8008412:	910a      	str	r1, [sp, #40]	; 0x28
 8008414:	f002 f894 	bl	800a540 <__ulp>
 8008418:	990a      	ldr	r1, [sp, #40]	; 0x28
 800841a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800841e:	ec59 8b18 	vmov	r8, r9, d8
 8008422:	e7ab      	b.n	800837c <_strtod_l+0xa6c>
 8008424:	eeb0 7b4d 	vmov.f64	d7, d13
 8008428:	e7ea      	b.n	8008400 <_strtod_l+0xaf0>
 800842a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008432:	f57f af61 	bpl.w	80082f8 <_strtod_l+0x9e8>
 8008436:	e4b1      	b.n	8007d9c <_strtod_l+0x48c>
 8008438:	2300      	movs	r3, #0
 800843a:	9308      	str	r3, [sp, #32]
 800843c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	f7ff baad 	b.w	80079a0 <_strtod_l+0x90>
 8008446:	2a65      	cmp	r2, #101	; 0x65
 8008448:	f43f ab9f 	beq.w	8007b8a <_strtod_l+0x27a>
 800844c:	2a45      	cmp	r2, #69	; 0x45
 800844e:	f43f ab9c 	beq.w	8007b8a <_strtod_l+0x27a>
 8008452:	2101      	movs	r1, #1
 8008454:	f7ff bbd4 	b.w	8007c00 <_strtod_l+0x2f0>
 8008458:	ffc00000 	.word	0xffc00000
 800845c:	41dfffff 	.word	0x41dfffff
 8008460:	000fffff 	.word	0x000fffff
 8008464:	7ff00000 	.word	0x7ff00000
 8008468:	7fefffff 	.word	0x7fefffff
 800846c:	3ff00000 	.word	0x3ff00000
 8008470:	7c9fffff 	.word	0x7c9fffff
 8008474:	bff00000 	.word	0xbff00000
 8008478:	7fe00000 	.word	0x7fe00000

0800847c <_strtod_r>:
 800847c:	4b01      	ldr	r3, [pc, #4]	; (8008484 <_strtod_r+0x8>)
 800847e:	f7ff ba47 	b.w	8007910 <_strtod_l>
 8008482:	bf00      	nop
 8008484:	24000078 	.word	0x24000078

08008488 <_strtol_l.constprop.0>:
 8008488:	2b01      	cmp	r3, #1
 800848a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848e:	d001      	beq.n	8008494 <_strtol_l.constprop.0+0xc>
 8008490:	2b24      	cmp	r3, #36	; 0x24
 8008492:	d906      	bls.n	80084a2 <_strtol_l.constprop.0+0x1a>
 8008494:	f7fe fae4 	bl	8006a60 <__errno>
 8008498:	2316      	movs	r3, #22
 800849a:	6003      	str	r3, [r0, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008588 <_strtol_l.constprop.0+0x100>
 80084a6:	460d      	mov	r5, r1
 80084a8:	462e      	mov	r6, r5
 80084aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80084b2:	f017 0708 	ands.w	r7, r7, #8
 80084b6:	d1f7      	bne.n	80084a8 <_strtol_l.constprop.0+0x20>
 80084b8:	2c2d      	cmp	r4, #45	; 0x2d
 80084ba:	d132      	bne.n	8008522 <_strtol_l.constprop.0+0x9a>
 80084bc:	782c      	ldrb	r4, [r5, #0]
 80084be:	2701      	movs	r7, #1
 80084c0:	1cb5      	adds	r5, r6, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d05b      	beq.n	800857e <_strtol_l.constprop.0+0xf6>
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d109      	bne.n	80084de <_strtol_l.constprop.0+0x56>
 80084ca:	2c30      	cmp	r4, #48	; 0x30
 80084cc:	d107      	bne.n	80084de <_strtol_l.constprop.0+0x56>
 80084ce:	782c      	ldrb	r4, [r5, #0]
 80084d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084d4:	2c58      	cmp	r4, #88	; 0x58
 80084d6:	d14d      	bne.n	8008574 <_strtol_l.constprop.0+0xec>
 80084d8:	786c      	ldrb	r4, [r5, #1]
 80084da:	2310      	movs	r3, #16
 80084dc:	3502      	adds	r5, #2
 80084de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80084e6:	f04f 0c00 	mov.w	ip, #0
 80084ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80084ee:	4666      	mov	r6, ip
 80084f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80084f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084f8:	f1be 0f09 	cmp.w	lr, #9
 80084fc:	d816      	bhi.n	800852c <_strtol_l.constprop.0+0xa4>
 80084fe:	4674      	mov	r4, lr
 8008500:	42a3      	cmp	r3, r4
 8008502:	dd24      	ble.n	800854e <_strtol_l.constprop.0+0xc6>
 8008504:	f1bc 0f00 	cmp.w	ip, #0
 8008508:	db1e      	blt.n	8008548 <_strtol_l.constprop.0+0xc0>
 800850a:	45b1      	cmp	r9, r6
 800850c:	d31c      	bcc.n	8008548 <_strtol_l.constprop.0+0xc0>
 800850e:	d101      	bne.n	8008514 <_strtol_l.constprop.0+0x8c>
 8008510:	45a2      	cmp	sl, r4
 8008512:	db19      	blt.n	8008548 <_strtol_l.constprop.0+0xc0>
 8008514:	fb06 4603 	mla	r6, r6, r3, r4
 8008518:	f04f 0c01 	mov.w	ip, #1
 800851c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008520:	e7e8      	b.n	80084f4 <_strtol_l.constprop.0+0x6c>
 8008522:	2c2b      	cmp	r4, #43	; 0x2b
 8008524:	bf04      	itt	eq
 8008526:	782c      	ldrbeq	r4, [r5, #0]
 8008528:	1cb5      	addeq	r5, r6, #2
 800852a:	e7ca      	b.n	80084c2 <_strtol_l.constprop.0+0x3a>
 800852c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008530:	f1be 0f19 	cmp.w	lr, #25
 8008534:	d801      	bhi.n	800853a <_strtol_l.constprop.0+0xb2>
 8008536:	3c37      	subs	r4, #55	; 0x37
 8008538:	e7e2      	b.n	8008500 <_strtol_l.constprop.0+0x78>
 800853a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800853e:	f1be 0f19 	cmp.w	lr, #25
 8008542:	d804      	bhi.n	800854e <_strtol_l.constprop.0+0xc6>
 8008544:	3c57      	subs	r4, #87	; 0x57
 8008546:	e7db      	b.n	8008500 <_strtol_l.constprop.0+0x78>
 8008548:	f04f 3cff 	mov.w	ip, #4294967295
 800854c:	e7e6      	b.n	800851c <_strtol_l.constprop.0+0x94>
 800854e:	f1bc 0f00 	cmp.w	ip, #0
 8008552:	da05      	bge.n	8008560 <_strtol_l.constprop.0+0xd8>
 8008554:	2322      	movs	r3, #34	; 0x22
 8008556:	6003      	str	r3, [r0, #0]
 8008558:	4646      	mov	r6, r8
 800855a:	b942      	cbnz	r2, 800856e <_strtol_l.constprop.0+0xe6>
 800855c:	4630      	mov	r0, r6
 800855e:	e79e      	b.n	800849e <_strtol_l.constprop.0+0x16>
 8008560:	b107      	cbz	r7, 8008564 <_strtol_l.constprop.0+0xdc>
 8008562:	4276      	negs	r6, r6
 8008564:	2a00      	cmp	r2, #0
 8008566:	d0f9      	beq.n	800855c <_strtol_l.constprop.0+0xd4>
 8008568:	f1bc 0f00 	cmp.w	ip, #0
 800856c:	d000      	beq.n	8008570 <_strtol_l.constprop.0+0xe8>
 800856e:	1e69      	subs	r1, r5, #1
 8008570:	6011      	str	r1, [r2, #0]
 8008572:	e7f3      	b.n	800855c <_strtol_l.constprop.0+0xd4>
 8008574:	2430      	movs	r4, #48	; 0x30
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1b1      	bne.n	80084de <_strtol_l.constprop.0+0x56>
 800857a:	2308      	movs	r3, #8
 800857c:	e7af      	b.n	80084de <_strtol_l.constprop.0+0x56>
 800857e:	2c30      	cmp	r4, #48	; 0x30
 8008580:	d0a5      	beq.n	80084ce <_strtol_l.constprop.0+0x46>
 8008582:	230a      	movs	r3, #10
 8008584:	e7ab      	b.n	80084de <_strtol_l.constprop.0+0x56>
 8008586:	bf00      	nop
 8008588:	0800b421 	.word	0x0800b421

0800858c <_strtol_r>:
 800858c:	f7ff bf7c 	b.w	8008488 <_strtol_l.constprop.0>

08008590 <__swbuf_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	460e      	mov	r6, r1
 8008594:	4614      	mov	r4, r2
 8008596:	4605      	mov	r5, r0
 8008598:	b118      	cbz	r0, 80085a2 <__swbuf_r+0x12>
 800859a:	6983      	ldr	r3, [r0, #24]
 800859c:	b90b      	cbnz	r3, 80085a2 <__swbuf_r+0x12>
 800859e:	f000 ffcb 	bl	8009538 <__sinit>
 80085a2:	4b21      	ldr	r3, [pc, #132]	; (8008628 <__swbuf_r+0x98>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d12b      	bne.n	8008600 <__swbuf_r+0x70>
 80085a8:	686c      	ldr	r4, [r5, #4]
 80085aa:	69a3      	ldr	r3, [r4, #24]
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	071a      	lsls	r2, r3, #28
 80085b2:	d52f      	bpl.n	8008614 <__swbuf_r+0x84>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	b36b      	cbz	r3, 8008614 <__swbuf_r+0x84>
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	6820      	ldr	r0, [r4, #0]
 80085bc:	1ac0      	subs	r0, r0, r3
 80085be:	6963      	ldr	r3, [r4, #20]
 80085c0:	b2f6      	uxtb	r6, r6
 80085c2:	4283      	cmp	r3, r0
 80085c4:	4637      	mov	r7, r6
 80085c6:	dc04      	bgt.n	80085d2 <__swbuf_r+0x42>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 ff20 	bl	8009410 <_fflush_r>
 80085d0:	bb30      	cbnz	r0, 8008620 <__swbuf_r+0x90>
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	60a3      	str	r3, [r4, #8]
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	6022      	str	r2, [r4, #0]
 80085de:	701e      	strb	r6, [r3, #0]
 80085e0:	6963      	ldr	r3, [r4, #20]
 80085e2:	3001      	adds	r0, #1
 80085e4:	4283      	cmp	r3, r0
 80085e6:	d004      	beq.n	80085f2 <__swbuf_r+0x62>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	07db      	lsls	r3, r3, #31
 80085ec:	d506      	bpl.n	80085fc <__swbuf_r+0x6c>
 80085ee:	2e0a      	cmp	r6, #10
 80085f0:	d104      	bne.n	80085fc <__swbuf_r+0x6c>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 ff0b 	bl	8009410 <_fflush_r>
 80085fa:	b988      	cbnz	r0, 8008620 <__swbuf_r+0x90>
 80085fc:	4638      	mov	r0, r7
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <__swbuf_r+0x9c>)
 8008602:	429c      	cmp	r4, r3
 8008604:	d101      	bne.n	800860a <__swbuf_r+0x7a>
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	e7cf      	b.n	80085aa <__swbuf_r+0x1a>
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <__swbuf_r+0xa0>)
 800860c:	429c      	cmp	r4, r3
 800860e:	bf08      	it	eq
 8008610:	68ec      	ldreq	r4, [r5, #12]
 8008612:	e7ca      	b.n	80085aa <__swbuf_r+0x1a>
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f80c 	bl	8008634 <__swsetup_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0cb      	beq.n	80085b8 <__swbuf_r+0x28>
 8008620:	f04f 37ff 	mov.w	r7, #4294967295
 8008624:	e7ea      	b.n	80085fc <__swbuf_r+0x6c>
 8008626:	bf00      	nop
 8008628:	0800b5d4 	.word	0x0800b5d4
 800862c:	0800b5f4 	.word	0x0800b5f4
 8008630:	0800b5b4 	.word	0x0800b5b4

08008634 <__swsetup_r>:
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <__swsetup_r+0xcc>)
 8008636:	b570      	push	{r4, r5, r6, lr}
 8008638:	681d      	ldr	r5, [r3, #0]
 800863a:	4606      	mov	r6, r0
 800863c:	460c      	mov	r4, r1
 800863e:	b125      	cbz	r5, 800864a <__swsetup_r+0x16>
 8008640:	69ab      	ldr	r3, [r5, #24]
 8008642:	b913      	cbnz	r3, 800864a <__swsetup_r+0x16>
 8008644:	4628      	mov	r0, r5
 8008646:	f000 ff77 	bl	8009538 <__sinit>
 800864a:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <__swsetup_r+0xd0>)
 800864c:	429c      	cmp	r4, r3
 800864e:	d10f      	bne.n	8008670 <__swsetup_r+0x3c>
 8008650:	686c      	ldr	r4, [r5, #4]
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008658:	0719      	lsls	r1, r3, #28
 800865a:	d42c      	bmi.n	80086b6 <__swsetup_r+0x82>
 800865c:	06dd      	lsls	r5, r3, #27
 800865e:	d411      	bmi.n	8008684 <__swsetup_r+0x50>
 8008660:	2309      	movs	r3, #9
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	e03e      	b.n	80086ee <__swsetup_r+0xba>
 8008670:	4b25      	ldr	r3, [pc, #148]	; (8008708 <__swsetup_r+0xd4>)
 8008672:	429c      	cmp	r4, r3
 8008674:	d101      	bne.n	800867a <__swsetup_r+0x46>
 8008676:	68ac      	ldr	r4, [r5, #8]
 8008678:	e7eb      	b.n	8008652 <__swsetup_r+0x1e>
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <__swsetup_r+0xd8>)
 800867c:	429c      	cmp	r4, r3
 800867e:	bf08      	it	eq
 8008680:	68ec      	ldreq	r4, [r5, #12]
 8008682:	e7e6      	b.n	8008652 <__swsetup_r+0x1e>
 8008684:	0758      	lsls	r0, r3, #29
 8008686:	d512      	bpl.n	80086ae <__swsetup_r+0x7a>
 8008688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800868a:	b141      	cbz	r1, 800869e <__swsetup_r+0x6a>
 800868c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008690:	4299      	cmp	r1, r3
 8008692:	d002      	beq.n	800869a <__swsetup_r+0x66>
 8008694:	4630      	mov	r0, r6
 8008696:	f002 f8b5 	bl	800a804 <_free_r>
 800869a:	2300      	movs	r3, #0
 800869c:	6363      	str	r3, [r4, #52]	; 0x34
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	2300      	movs	r3, #0
 80086a8:	6063      	str	r3, [r4, #4]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f043 0308 	orr.w	r3, r3, #8
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	b94b      	cbnz	r3, 80086ce <__swsetup_r+0x9a>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	d003      	beq.n	80086ce <__swsetup_r+0x9a>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4630      	mov	r0, r6
 80086ca:	f001 fb6d 	bl	8009da8 <__smakebuf_r>
 80086ce:	89a0      	ldrh	r0, [r4, #12]
 80086d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086d4:	f010 0301 	ands.w	r3, r0, #1
 80086d8:	d00a      	beq.n	80086f0 <__swsetup_r+0xbc>
 80086da:	2300      	movs	r3, #0
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	6963      	ldr	r3, [r4, #20]
 80086e0:	425b      	negs	r3, r3
 80086e2:	61a3      	str	r3, [r4, #24]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	b943      	cbnz	r3, 80086fa <__swsetup_r+0xc6>
 80086e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086ec:	d1ba      	bne.n	8008664 <__swsetup_r+0x30>
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	0781      	lsls	r1, r0, #30
 80086f2:	bf58      	it	pl
 80086f4:	6963      	ldrpl	r3, [r4, #20]
 80086f6:	60a3      	str	r3, [r4, #8]
 80086f8:	e7f4      	b.n	80086e4 <__swsetup_r+0xb0>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e7f7      	b.n	80086ee <__swsetup_r+0xba>
 80086fe:	bf00      	nop
 8008700:	24000010 	.word	0x24000010
 8008704:	0800b5d4 	.word	0x0800b5d4
 8008708:	0800b5f4 	.word	0x0800b5f4
 800870c:	0800b5b4 	.word	0x0800b5b4

08008710 <quorem>:
 8008710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	6903      	ldr	r3, [r0, #16]
 8008716:	690c      	ldr	r4, [r1, #16]
 8008718:	42a3      	cmp	r3, r4
 800871a:	4607      	mov	r7, r0
 800871c:	f2c0 8081 	blt.w	8008822 <quorem+0x112>
 8008720:	3c01      	subs	r4, #1
 8008722:	f101 0814 	add.w	r8, r1, #20
 8008726:	f100 0514 	add.w	r5, r0, #20
 800872a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008738:	3301      	adds	r3, #1
 800873a:	429a      	cmp	r2, r3
 800873c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008744:	fbb2 f6f3 	udiv	r6, r2, r3
 8008748:	d331      	bcc.n	80087ae <quorem+0x9e>
 800874a:	f04f 0e00 	mov.w	lr, #0
 800874e:	4640      	mov	r0, r8
 8008750:	46ac      	mov	ip, r5
 8008752:	46f2      	mov	sl, lr
 8008754:	f850 2b04 	ldr.w	r2, [r0], #4
 8008758:	b293      	uxth	r3, r2
 800875a:	fb06 e303 	mla	r3, r6, r3, lr
 800875e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008762:	b29b      	uxth	r3, r3
 8008764:	ebaa 0303 	sub.w	r3, sl, r3
 8008768:	f8dc a000 	ldr.w	sl, [ip]
 800876c:	0c12      	lsrs	r2, r2, #16
 800876e:	fa13 f38a 	uxtah	r3, r3, sl
 8008772:	fb06 e202 	mla	r2, r6, r2, lr
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	9b00      	ldr	r3, [sp, #0]
 800877a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800877e:	b292      	uxth	r2, r2
 8008780:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008788:	f8bd 3000 	ldrh.w	r3, [sp]
 800878c:	4581      	cmp	r9, r0
 800878e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008792:	f84c 3b04 	str.w	r3, [ip], #4
 8008796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800879a:	d2db      	bcs.n	8008754 <quorem+0x44>
 800879c:	f855 300b 	ldr.w	r3, [r5, fp]
 80087a0:	b92b      	cbnz	r3, 80087ae <quorem+0x9e>
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	3b04      	subs	r3, #4
 80087a6:	429d      	cmp	r5, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	d32e      	bcc.n	800880a <quorem+0xfa>
 80087ac:	613c      	str	r4, [r7, #16]
 80087ae:	4638      	mov	r0, r7
 80087b0:	f001 fe20 	bl	800a3f4 <__mcmp>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	db24      	blt.n	8008802 <quorem+0xf2>
 80087b8:	3601      	adds	r6, #1
 80087ba:	4628      	mov	r0, r5
 80087bc:	f04f 0c00 	mov.w	ip, #0
 80087c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80087c4:	f8d0 e000 	ldr.w	lr, [r0]
 80087c8:	b293      	uxth	r3, r2
 80087ca:	ebac 0303 	sub.w	r3, ip, r3
 80087ce:	0c12      	lsrs	r2, r2, #16
 80087d0:	fa13 f38e 	uxtah	r3, r3, lr
 80087d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087dc:	b29b      	uxth	r3, r3
 80087de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087e2:	45c1      	cmp	r9, r8
 80087e4:	f840 3b04 	str.w	r3, [r0], #4
 80087e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087ec:	d2e8      	bcs.n	80087c0 <quorem+0xb0>
 80087ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087f6:	b922      	cbnz	r2, 8008802 <quorem+0xf2>
 80087f8:	3b04      	subs	r3, #4
 80087fa:	429d      	cmp	r5, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	d30a      	bcc.n	8008816 <quorem+0x106>
 8008800:	613c      	str	r4, [r7, #16]
 8008802:	4630      	mov	r0, r6
 8008804:	b003      	add	sp, #12
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	3b04      	subs	r3, #4
 800880e:	2a00      	cmp	r2, #0
 8008810:	d1cc      	bne.n	80087ac <quorem+0x9c>
 8008812:	3c01      	subs	r4, #1
 8008814:	e7c7      	b.n	80087a6 <quorem+0x96>
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	3b04      	subs	r3, #4
 800881a:	2a00      	cmp	r2, #0
 800881c:	d1f0      	bne.n	8008800 <quorem+0xf0>
 800881e:	3c01      	subs	r4, #1
 8008820:	e7eb      	b.n	80087fa <quorem+0xea>
 8008822:	2000      	movs	r0, #0
 8008824:	e7ee      	b.n	8008804 <quorem+0xf4>
	...

08008828 <_dtoa_r>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	ed2d 8b02 	vpush	{d8}
 8008830:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008832:	b091      	sub	sp, #68	; 0x44
 8008834:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008838:	ec59 8b10 	vmov	r8, r9, d0
 800883c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800883e:	9106      	str	r1, [sp, #24]
 8008840:	4606      	mov	r6, r0
 8008842:	9208      	str	r2, [sp, #32]
 8008844:	930c      	str	r3, [sp, #48]	; 0x30
 8008846:	b975      	cbnz	r5, 8008866 <_dtoa_r+0x3e>
 8008848:	2010      	movs	r0, #16
 800884a:	f001 faed 	bl	8009e28 <malloc>
 800884e:	4602      	mov	r2, r0
 8008850:	6270      	str	r0, [r6, #36]	; 0x24
 8008852:	b920      	cbnz	r0, 800885e <_dtoa_r+0x36>
 8008854:	4baa      	ldr	r3, [pc, #680]	; (8008b00 <_dtoa_r+0x2d8>)
 8008856:	21ea      	movs	r1, #234	; 0xea
 8008858:	48aa      	ldr	r0, [pc, #680]	; (8008b04 <_dtoa_r+0x2dc>)
 800885a:	f002 fbf7 	bl	800b04c <__assert_func>
 800885e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008862:	6005      	str	r5, [r0, #0]
 8008864:	60c5      	str	r5, [r0, #12]
 8008866:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	b151      	cbz	r1, 8008882 <_dtoa_r+0x5a>
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	604a      	str	r2, [r1, #4]
 8008870:	2301      	movs	r3, #1
 8008872:	4093      	lsls	r3, r2
 8008874:	608b      	str	r3, [r1, #8]
 8008876:	4630      	mov	r0, r6
 8008878:	f001 fb30 	bl	8009edc <_Bfree>
 800887c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	f1b9 0300 	subs.w	r3, r9, #0
 8008886:	bfbb      	ittet	lt
 8008888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800888c:	9303      	strlt	r3, [sp, #12]
 800888e:	2300      	movge	r3, #0
 8008890:	2201      	movlt	r2, #1
 8008892:	bfac      	ite	ge
 8008894:	6023      	strge	r3, [r4, #0]
 8008896:	6022      	strlt	r2, [r4, #0]
 8008898:	4b9b      	ldr	r3, [pc, #620]	; (8008b08 <_dtoa_r+0x2e0>)
 800889a:	9c03      	ldr	r4, [sp, #12]
 800889c:	43a3      	bics	r3, r4
 800889e:	d11c      	bne.n	80088da <_dtoa_r+0xb2>
 80088a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80088ac:	ea53 0308 	orrs.w	r3, r3, r8
 80088b0:	f000 84fd 	beq.w	80092ae <_dtoa_r+0xa86>
 80088b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088b6:	b963      	cbnz	r3, 80088d2 <_dtoa_r+0xaa>
 80088b8:	4b94      	ldr	r3, [pc, #592]	; (8008b0c <_dtoa_r+0x2e4>)
 80088ba:	e01f      	b.n	80088fc <_dtoa_r+0xd4>
 80088bc:	4b94      	ldr	r3, [pc, #592]	; (8008b10 <_dtoa_r+0x2e8>)
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	3308      	adds	r3, #8
 80088c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	9801      	ldr	r0, [sp, #4]
 80088c8:	b011      	add	sp, #68	; 0x44
 80088ca:	ecbd 8b02 	vpop	{d8}
 80088ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d2:	4b8e      	ldr	r3, [pc, #568]	; (8008b0c <_dtoa_r+0x2e4>)
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	3303      	adds	r3, #3
 80088d8:	e7f3      	b.n	80088c2 <_dtoa_r+0x9a>
 80088da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80088de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	d10b      	bne.n	8008900 <_dtoa_r+0xd8>
 80088e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ea:	2301      	movs	r3, #1
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 84d9 	beq.w	80092a8 <_dtoa_r+0xa80>
 80088f6:	4887      	ldr	r0, [pc, #540]	; (8008b14 <_dtoa_r+0x2ec>)
 80088f8:	6018      	str	r0, [r3, #0]
 80088fa:	1e43      	subs	r3, r0, #1
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	e7e2      	b.n	80088c6 <_dtoa_r+0x9e>
 8008900:	a90f      	add	r1, sp, #60	; 0x3c
 8008902:	aa0e      	add	r2, sp, #56	; 0x38
 8008904:	4630      	mov	r0, r6
 8008906:	eeb0 0b48 	vmov.f64	d0, d8
 800890a:	f001 fe95 	bl	800a638 <__d2b>
 800890e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008912:	4605      	mov	r5, r0
 8008914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008916:	2900      	cmp	r1, #0
 8008918:	d046      	beq.n	80089a8 <_dtoa_r+0x180>
 800891a:	ee18 4a90 	vmov	r4, s17
 800891e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008922:	ec53 2b18 	vmov	r2, r3, d8
 8008926:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800892a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800892e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008932:	2400      	movs	r4, #0
 8008934:	ec43 2b16 	vmov	d6, r2, r3
 8008938:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800893c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008ae8 <_dtoa_r+0x2c0>
 8008940:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008944:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008af0 <_dtoa_r+0x2c8>
 8008948:	eea7 6b05 	vfma.f64	d6, d7, d5
 800894c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008af8 <_dtoa_r+0x2d0>
 8008950:	ee07 1a90 	vmov	s15, r1
 8008954:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008958:	eeb0 7b46 	vmov.f64	d7, d6
 800895c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008960:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008964:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896c:	ee16 ba90 	vmov	fp, s13
 8008970:	940a      	str	r4, [sp, #40]	; 0x28
 8008972:	d508      	bpl.n	8008986 <_dtoa_r+0x15e>
 8008974:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008978:	eeb4 6b47 	vcmp.f64	d6, d7
 800897c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008980:	bf18      	it	ne
 8008982:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008986:	f1bb 0f16 	cmp.w	fp, #22
 800898a:	d82f      	bhi.n	80089ec <_dtoa_r+0x1c4>
 800898c:	4b62      	ldr	r3, [pc, #392]	; (8008b18 <_dtoa_r+0x2f0>)
 800898e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008992:	ed93 7b00 	vldr	d7, [r3]
 8008996:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800899a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899e:	d501      	bpl.n	80089a4 <_dtoa_r+0x17c>
 80089a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089a4:	2300      	movs	r3, #0
 80089a6:	e022      	b.n	80089ee <_dtoa_r+0x1c6>
 80089a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089aa:	4401      	add	r1, r0
 80089ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	bfc1      	itttt	gt
 80089b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80089bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80089c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80089c4:	bfd6      	itet	le
 80089c6:	f1c3 0320 	rsble	r3, r3, #32
 80089ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80089ce:	fa08 f803 	lslle.w	r8, r8, r3
 80089d2:	ee07 8a90 	vmov	s15, r8
 80089d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80089da:	3901      	subs	r1, #1
 80089dc:	ee17 4a90 	vmov	r4, s15
 80089e0:	ec53 2b17 	vmov	r2, r3, d7
 80089e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80089e8:	2401      	movs	r4, #1
 80089ea:	e7a3      	b.n	8008934 <_dtoa_r+0x10c>
 80089ec:	2301      	movs	r3, #1
 80089ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80089f0:	1a43      	subs	r3, r0, r1
 80089f2:	1e5a      	subs	r2, r3, #1
 80089f4:	bf45      	ittet	mi
 80089f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80089fa:	9304      	strmi	r3, [sp, #16]
 80089fc:	2300      	movpl	r3, #0
 80089fe:	2300      	movmi	r3, #0
 8008a00:	9205      	str	r2, [sp, #20]
 8008a02:	bf54      	ite	pl
 8008a04:	9304      	strpl	r3, [sp, #16]
 8008a06:	9305      	strmi	r3, [sp, #20]
 8008a08:	f1bb 0f00 	cmp.w	fp, #0
 8008a0c:	db18      	blt.n	8008a40 <_dtoa_r+0x218>
 8008a0e:	9b05      	ldr	r3, [sp, #20]
 8008a10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008a14:	445b      	add	r3, fp
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9a06      	ldr	r2, [sp, #24]
 8008a1c:	2a09      	cmp	r2, #9
 8008a1e:	d849      	bhi.n	8008ab4 <_dtoa_r+0x28c>
 8008a20:	2a05      	cmp	r2, #5
 8008a22:	bfc4      	itt	gt
 8008a24:	3a04      	subgt	r2, #4
 8008a26:	9206      	strgt	r2, [sp, #24]
 8008a28:	9a06      	ldr	r2, [sp, #24]
 8008a2a:	f1a2 0202 	sub.w	r2, r2, #2
 8008a2e:	bfcc      	ite	gt
 8008a30:	2400      	movgt	r4, #0
 8008a32:	2401      	movle	r4, #1
 8008a34:	2a03      	cmp	r2, #3
 8008a36:	d848      	bhi.n	8008aca <_dtoa_r+0x2a2>
 8008a38:	e8df f002 	tbb	[pc, r2]
 8008a3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	2200      	movs	r2, #0
 8008a44:	eba3 030b 	sub.w	r3, r3, fp
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a4c:	f1cb 0300 	rsb	r3, fp, #0
 8008a50:	e7e3      	b.n	8008a1a <_dtoa_r+0x1f2>
 8008a52:	2200      	movs	r2, #0
 8008a54:	9207      	str	r2, [sp, #28]
 8008a56:	9a08      	ldr	r2, [sp, #32]
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	dc39      	bgt.n	8008ad0 <_dtoa_r+0x2a8>
 8008a5c:	f04f 0a01 	mov.w	sl, #1
 8008a60:	46d1      	mov	r9, sl
 8008a62:	4652      	mov	r2, sl
 8008a64:	f8cd a020 	str.w	sl, [sp, #32]
 8008a68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6079      	str	r1, [r7, #4]
 8008a6e:	2004      	movs	r0, #4
 8008a70:	f100 0c14 	add.w	ip, r0, #20
 8008a74:	4594      	cmp	ip, r2
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	d92f      	bls.n	8008ada <_dtoa_r+0x2b2>
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a7e:	f001 f9ed 	bl	8009e5c <_Balloc>
 8008a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a84:	9001      	str	r0, [sp, #4]
 8008a86:	4602      	mov	r2, r0
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d149      	bne.n	8008b20 <_dtoa_r+0x2f8>
 8008a8c:	4b23      	ldr	r3, [pc, #140]	; (8008b1c <_dtoa_r+0x2f4>)
 8008a8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a92:	e6e1      	b.n	8008858 <_dtoa_r+0x30>
 8008a94:	2201      	movs	r2, #1
 8008a96:	e7dd      	b.n	8008a54 <_dtoa_r+0x22c>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	9207      	str	r2, [sp, #28]
 8008a9c:	9a08      	ldr	r2, [sp, #32]
 8008a9e:	eb0b 0a02 	add.w	sl, fp, r2
 8008aa2:	f10a 0901 	add.w	r9, sl, #1
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	2a01      	cmp	r2, #1
 8008aaa:	bfb8      	it	lt
 8008aac:	2201      	movlt	r2, #1
 8008aae:	e7db      	b.n	8008a68 <_dtoa_r+0x240>
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	e7f2      	b.n	8008a9a <_dtoa_r+0x272>
 8008ab4:	2401      	movs	r4, #1
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008abc:	f04f 3aff 	mov.w	sl, #4294967295
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	46d1      	mov	r9, sl
 8008ac4:	2212      	movs	r2, #18
 8008ac6:	9108      	str	r1, [sp, #32]
 8008ac8:	e7ce      	b.n	8008a68 <_dtoa_r+0x240>
 8008aca:	2201      	movs	r2, #1
 8008acc:	9207      	str	r2, [sp, #28]
 8008ace:	e7f5      	b.n	8008abc <_dtoa_r+0x294>
 8008ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ad4:	46d1      	mov	r9, sl
 8008ad6:	4652      	mov	r2, sl
 8008ad8:	e7c6      	b.n	8008a68 <_dtoa_r+0x240>
 8008ada:	3101      	adds	r1, #1
 8008adc:	6079      	str	r1, [r7, #4]
 8008ade:	0040      	lsls	r0, r0, #1
 8008ae0:	e7c6      	b.n	8008a70 <_dtoa_r+0x248>
 8008ae2:	bf00      	nop
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	636f4361 	.word	0x636f4361
 8008aec:	3fd287a7 	.word	0x3fd287a7
 8008af0:	8b60c8b3 	.word	0x8b60c8b3
 8008af4:	3fc68a28 	.word	0x3fc68a28
 8008af8:	509f79fb 	.word	0x509f79fb
 8008afc:	3fd34413 	.word	0x3fd34413
 8008b00:	0800b52e 	.word	0x0800b52e
 8008b04:	0800b545 	.word	0x0800b545
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	0800b52a 	.word	0x0800b52a
 8008b10:	0800b521 	.word	0x0800b521
 8008b14:	0800b3a1 	.word	0x0800b3a1
 8008b18:	0800b718 	.word	0x0800b718
 8008b1c:	0800b5a0 	.word	0x0800b5a0
 8008b20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008b22:	9901      	ldr	r1, [sp, #4]
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	f1b9 0f0e 	cmp.w	r9, #14
 8008b2a:	d86c      	bhi.n	8008c06 <_dtoa_r+0x3de>
 8008b2c:	2c00      	cmp	r4, #0
 8008b2e:	d06a      	beq.n	8008c06 <_dtoa_r+0x3de>
 8008b30:	f1bb 0f00 	cmp.w	fp, #0
 8008b34:	f340 80a0 	ble.w	8008c78 <_dtoa_r+0x450>
 8008b38:	49c1      	ldr	r1, [pc, #772]	; (8008e40 <_dtoa_r+0x618>)
 8008b3a:	f00b 020f 	and.w	r2, fp, #15
 8008b3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008b42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b46:	ed92 7b00 	vldr	d7, [r2]
 8008b4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008b4e:	f000 8087 	beq.w	8008c60 <_dtoa_r+0x438>
 8008b52:	4abc      	ldr	r2, [pc, #752]	; (8008e44 <_dtoa_r+0x61c>)
 8008b54:	ed92 6b08 	vldr	d6, [r2, #32]
 8008b58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008b60:	f001 010f 	and.w	r1, r1, #15
 8008b64:	2203      	movs	r2, #3
 8008b66:	48b7      	ldr	r0, [pc, #732]	; (8008e44 <_dtoa_r+0x61c>)
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d17b      	bne.n	8008c64 <_dtoa_r+0x43c>
 8008b6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008b70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	f000 80a2 	beq.w	8008cc4 <_dtoa_r+0x49c>
 8008b80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b90:	f140 8098 	bpl.w	8008cc4 <_dtoa_r+0x49c>
 8008b94:	f1b9 0f00 	cmp.w	r9, #0
 8008b98:	f000 8094 	beq.w	8008cc4 <_dtoa_r+0x49c>
 8008b9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ba0:	dd2f      	ble.n	8008c02 <_dtoa_r+0x3da>
 8008ba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008baa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bae:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008bba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008bbe:	ee07 2a90 	vmov	s15, r2
 8008bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008bc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008bca:	ee15 4a90 	vmov	r4, s11
 8008bce:	ec52 1b15 	vmov	r1, r2, d5
 8008bd2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d177      	bne.n	8008cca <_dtoa_r+0x4a2>
 8008bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008be2:	ec42 1b17 	vmov	d7, r1, r2
 8008be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	f300 8263 	bgt.w	80090b8 <_dtoa_r+0x890>
 8008bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8008bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfe:	f100 8258 	bmi.w	80090b2 <_dtoa_r+0x88a>
 8008c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	f2c0 811d 	blt.w	8008e48 <_dtoa_r+0x620>
 8008c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8008c12:	f300 8119 	bgt.w	8008e48 <_dtoa_r+0x620>
 8008c16:	4b8a      	ldr	r3, [pc, #552]	; (8008e40 <_dtoa_r+0x618>)
 8008c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c1c:	ed93 6b00 	vldr	d6, [r3]
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f280 80b7 	bge.w	8008d96 <_dtoa_r+0x56e>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	f300 80b3 	bgt.w	8008d96 <_dtoa_r+0x56e>
 8008c30:	f040 823f 	bne.w	80090b2 <_dtoa_r+0x88a>
 8008c34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008c38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c48:	464c      	mov	r4, r9
 8008c4a:	464f      	mov	r7, r9
 8008c4c:	f280 8215 	bge.w	800907a <_dtoa_r+0x852>
 8008c50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c54:	2331      	movs	r3, #49	; 0x31
 8008c56:	f808 3b01 	strb.w	r3, [r8], #1
 8008c5a:	f10b 0b01 	add.w	fp, fp, #1
 8008c5e:	e211      	b.n	8009084 <_dtoa_r+0x85c>
 8008c60:	2202      	movs	r2, #2
 8008c62:	e780      	b.n	8008b66 <_dtoa_r+0x33e>
 8008c64:	07cc      	lsls	r4, r1, #31
 8008c66:	d504      	bpl.n	8008c72 <_dtoa_r+0x44a>
 8008c68:	ed90 6b00 	vldr	d6, [r0]
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c72:	1049      	asrs	r1, r1, #1
 8008c74:	3008      	adds	r0, #8
 8008c76:	e777      	b.n	8008b68 <_dtoa_r+0x340>
 8008c78:	d022      	beq.n	8008cc0 <_dtoa_r+0x498>
 8008c7a:	f1cb 0100 	rsb	r1, fp, #0
 8008c7e:	4a70      	ldr	r2, [pc, #448]	; (8008e40 <_dtoa_r+0x618>)
 8008c80:	f001 000f 	and.w	r0, r1, #15
 8008c84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008c88:	ed92 7b00 	vldr	d7, [r2]
 8008c8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c94:	486b      	ldr	r0, [pc, #428]	; (8008e44 <_dtoa_r+0x61c>)
 8008c96:	1109      	asrs	r1, r1, #4
 8008c98:	2400      	movs	r4, #0
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	b929      	cbnz	r1, 8008caa <_dtoa_r+0x482>
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	f43f af6a 	beq.w	8008b78 <_dtoa_r+0x350>
 8008ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ca8:	e766      	b.n	8008b78 <_dtoa_r+0x350>
 8008caa:	07cf      	lsls	r7, r1, #31
 8008cac:	d505      	bpl.n	8008cba <_dtoa_r+0x492>
 8008cae:	ed90 6b00 	vldr	d6, [r0]
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	2401      	movs	r4, #1
 8008cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cba:	1049      	asrs	r1, r1, #1
 8008cbc:	3008      	adds	r0, #8
 8008cbe:	e7ed      	b.n	8008c9c <_dtoa_r+0x474>
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	e759      	b.n	8008b78 <_dtoa_r+0x350>
 8008cc4:	465f      	mov	r7, fp
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	e775      	b.n	8008bb6 <_dtoa_r+0x38e>
 8008cca:	ec42 1b17 	vmov	d7, r1, r2
 8008cce:	4a5c      	ldr	r2, [pc, #368]	; (8008e40 <_dtoa_r+0x618>)
 8008cd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008cd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	1814      	adds	r4, r2, r0
 8008cdc:	9a07      	ldr	r2, [sp, #28]
 8008cde:	b352      	cbz	r2, 8008d36 <_dtoa_r+0x50e>
 8008ce0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008ce4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008ce8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008cec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008cfc:	ee14 2a90 	vmov	r2, s9
 8008d00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008d04:	3230      	adds	r2, #48	; 0x30
 8008d06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d12:	f808 2b01 	strb.w	r2, [r8], #1
 8008d16:	d439      	bmi.n	8008d8c <_dtoa_r+0x564>
 8008d18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008d1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	d472      	bmi.n	8008e0c <_dtoa_r+0x5e4>
 8008d26:	45a0      	cmp	r8, r4
 8008d28:	f43f af6b 	beq.w	8008c02 <_dtoa_r+0x3da>
 8008d2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008d34:	e7e0      	b.n	8008cf8 <_dtoa_r+0x4d0>
 8008d36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d3e:	4621      	mov	r1, r4
 8008d40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008d48:	ee14 2a90 	vmov	r2, s9
 8008d4c:	3230      	adds	r2, #48	; 0x30
 8008d4e:	f808 2b01 	strb.w	r2, [r8], #1
 8008d52:	45a0      	cmp	r8, r4
 8008d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d5c:	d118      	bne.n	8008d90 <_dtoa_r+0x568>
 8008d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	dc4d      	bgt.n	8008e0c <_dtoa_r+0x5e4>
 8008d70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	f57f af41 	bpl.w	8008c02 <_dtoa_r+0x3da>
 8008d80:	4688      	mov	r8, r1
 8008d82:	3901      	subs	r1, #1
 8008d84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008d88:	2b30      	cmp	r3, #48	; 0x30
 8008d8a:	d0f9      	beq.n	8008d80 <_dtoa_r+0x558>
 8008d8c:	46bb      	mov	fp, r7
 8008d8e:	e02a      	b.n	8008de6 <_dtoa_r+0x5be>
 8008d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008d94:	e7d6      	b.n	8008d44 <_dtoa_r+0x51c>
 8008d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008da2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008da6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008daa:	ee15 3a10 	vmov	r3, s10
 8008dae:	3330      	adds	r3, #48	; 0x30
 8008db0:	f808 3b01 	strb.w	r3, [r8], #1
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	eba8 0303 	sub.w	r3, r8, r3
 8008dba:	4599      	cmp	r9, r3
 8008dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008dc4:	d133      	bne.n	8008e2e <_dtoa_r+0x606>
 8008dc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008dca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	dc1a      	bgt.n	8008e0a <_dtoa_r+0x5e2>
 8008dd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8008dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ddc:	d103      	bne.n	8008de6 <_dtoa_r+0x5be>
 8008dde:	ee15 3a10 	vmov	r3, s10
 8008de2:	07d9      	lsls	r1, r3, #31
 8008de4:	d411      	bmi.n	8008e0a <_dtoa_r+0x5e2>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	f001 f877 	bl	8009edc <_Bfree>
 8008dee:	2300      	movs	r3, #0
 8008df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008df2:	f888 3000 	strb.w	r3, [r8]
 8008df6:	f10b 0301 	add.w	r3, fp, #1
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f43f ad61 	beq.w	80088c6 <_dtoa_r+0x9e>
 8008e04:	f8c3 8000 	str.w	r8, [r3]
 8008e08:	e55d      	b.n	80088c6 <_dtoa_r+0x9e>
 8008e0a:	465f      	mov	r7, fp
 8008e0c:	4643      	mov	r3, r8
 8008e0e:	4698      	mov	r8, r3
 8008e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e14:	2a39      	cmp	r2, #57	; 0x39
 8008e16:	d106      	bne.n	8008e26 <_dtoa_r+0x5fe>
 8008e18:	9a01      	ldr	r2, [sp, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d1f7      	bne.n	8008e0e <_dtoa_r+0x5e6>
 8008e1e:	9901      	ldr	r1, [sp, #4]
 8008e20:	2230      	movs	r2, #48	; 0x30
 8008e22:	3701      	adds	r7, #1
 8008e24:	700a      	strb	r2, [r1, #0]
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	3201      	adds	r2, #1
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	e7ae      	b.n	8008d8c <_dtoa_r+0x564>
 8008e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	d1b2      	bne.n	8008da2 <_dtoa_r+0x57a>
 8008e3c:	e7d3      	b.n	8008de6 <_dtoa_r+0x5be>
 8008e3e:	bf00      	nop
 8008e40:	0800b718 	.word	0x0800b718
 8008e44:	0800b6f0 	.word	0x0800b6f0
 8008e48:	9907      	ldr	r1, [sp, #28]
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	f000 80d0 	beq.w	8008ff0 <_dtoa_r+0x7c8>
 8008e50:	9906      	ldr	r1, [sp, #24]
 8008e52:	2901      	cmp	r1, #1
 8008e54:	f300 80b4 	bgt.w	8008fc0 <_dtoa_r+0x798>
 8008e58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e5a:	2900      	cmp	r1, #0
 8008e5c:	f000 80ac 	beq.w	8008fb8 <_dtoa_r+0x790>
 8008e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e68:	461c      	mov	r4, r3
 8008e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	4413      	add	r3, r2
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	2101      	movs	r1, #1
 8008e76:	4413      	add	r3, r2
 8008e78:	4630      	mov	r0, r6
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	f001 f930 	bl	800a0e0 <__i2b>
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	4607      	mov	r7, r0
 8008e84:	f1b8 0f00 	cmp.w	r8, #0
 8008e88:	dd0d      	ble.n	8008ea6 <_dtoa_r+0x67e>
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	dd0a      	ble.n	8008ea6 <_dtoa_r+0x67e>
 8008e90:	4542      	cmp	r2, r8
 8008e92:	9904      	ldr	r1, [sp, #16]
 8008e94:	bfa8      	it	ge
 8008e96:	4642      	movge	r2, r8
 8008e98:	1a89      	subs	r1, r1, r2
 8008e9a:	9104      	str	r1, [sp, #16]
 8008e9c:	9905      	ldr	r1, [sp, #20]
 8008e9e:	eba8 0802 	sub.w	r8, r8, r2
 8008ea2:	1a8a      	subs	r2, r1, r2
 8008ea4:	9205      	str	r2, [sp, #20]
 8008ea6:	b303      	cbz	r3, 8008eea <_dtoa_r+0x6c2>
 8008ea8:	9a07      	ldr	r2, [sp, #28]
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	f000 80a5 	beq.w	8008ffa <_dtoa_r+0x7d2>
 8008eb0:	2c00      	cmp	r4, #0
 8008eb2:	dd13      	ble.n	8008edc <_dtoa_r+0x6b4>
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	4630      	mov	r0, r6
 8008eba:	930d      	str	r3, [sp, #52]	; 0x34
 8008ebc:	f001 f9d0 	bl	800a260 <__pow5mult>
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f001 f920 	bl	800a10c <__multiply>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	900a      	str	r0, [sp, #40]	; 0x28
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f001 f803 	bl	8009edc <_Bfree>
 8008ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eda:	4615      	mov	r5, r2
 8008edc:	1b1a      	subs	r2, r3, r4
 8008ede:	d004      	beq.n	8008eea <_dtoa_r+0x6c2>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f001 f9bc 	bl	800a260 <__pow5mult>
 8008ee8:	4605      	mov	r5, r0
 8008eea:	2101      	movs	r1, #1
 8008eec:	4630      	mov	r0, r6
 8008eee:	f001 f8f7 	bl	800a0e0 <__i2b>
 8008ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	f340 8081 	ble.w	8008ffe <_dtoa_r+0x7d6>
 8008efc:	461a      	mov	r2, r3
 8008efe:	4601      	mov	r1, r0
 8008f00:	4630      	mov	r0, r6
 8008f02:	f001 f9ad 	bl	800a260 <__pow5mult>
 8008f06:	9b06      	ldr	r3, [sp, #24]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	dd7a      	ble.n	8009004 <_dtoa_r+0x7dc>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	6922      	ldr	r2, [r4, #16]
 8008f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008f18:	6910      	ldr	r0, [r2, #16]
 8008f1a:	f001 f891 	bl	800a040 <__hi0bits>
 8008f1e:	f1c0 0020 	rsb	r0, r0, #32
 8008f22:	9b05      	ldr	r3, [sp, #20]
 8008f24:	4418      	add	r0, r3
 8008f26:	f010 001f 	ands.w	r0, r0, #31
 8008f2a:	f000 808c 	beq.w	8009046 <_dtoa_r+0x81e>
 8008f2e:	f1c0 0220 	rsb	r2, r0, #32
 8008f32:	2a04      	cmp	r2, #4
 8008f34:	f340 8085 	ble.w	8009042 <_dtoa_r+0x81a>
 8008f38:	f1c0 001c 	rsb	r0, r0, #28
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	4403      	add	r3, r0
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	9b05      	ldr	r3, [sp, #20]
 8008f44:	4403      	add	r3, r0
 8008f46:	4480      	add	r8, r0
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	9b04      	ldr	r3, [sp, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd05      	ble.n	8008f5c <_dtoa_r+0x734>
 8008f50:	4629      	mov	r1, r5
 8008f52:	461a      	mov	r2, r3
 8008f54:	4630      	mov	r0, r6
 8008f56:	f001 f9dd 	bl	800a314 <__lshift>
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	9b05      	ldr	r3, [sp, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd05      	ble.n	8008f6e <_dtoa_r+0x746>
 8008f62:	4621      	mov	r1, r4
 8008f64:	461a      	mov	r2, r3
 8008f66:	4630      	mov	r0, r6
 8008f68:	f001 f9d4 	bl	800a314 <__lshift>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d06a      	beq.n	800904a <_dtoa_r+0x822>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	f001 fa3c 	bl	800a3f4 <__mcmp>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	da64      	bge.n	800904a <_dtoa_r+0x822>
 8008f80:	2300      	movs	r3, #0
 8008f82:	4629      	mov	r1, r5
 8008f84:	220a      	movs	r2, #10
 8008f86:	4630      	mov	r0, r6
 8008f88:	f000 ffca 	bl	8009f20 <__multadd>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f92:	4605      	mov	r5, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8191 	beq.w	80092bc <_dtoa_r+0xa94>
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	220a      	movs	r2, #10
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 ffbd 	bl	8009f20 <__multadd>
 8008fa6:	f1ba 0f00 	cmp.w	sl, #0
 8008faa:	4607      	mov	r7, r0
 8008fac:	f300 808d 	bgt.w	80090ca <_dtoa_r+0x8a2>
 8008fb0:	9b06      	ldr	r3, [sp, #24]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	dc50      	bgt.n	8009058 <_dtoa_r+0x830>
 8008fb6:	e088      	b.n	80090ca <_dtoa_r+0x8a2>
 8008fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fbe:	e751      	b.n	8008e64 <_dtoa_r+0x63c>
 8008fc0:	f109 34ff 	add.w	r4, r9, #4294967295
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	bfbf      	itttt	lt
 8008fc8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008fca:	1ae3      	sublt	r3, r4, r3
 8008fcc:	18d2      	addlt	r2, r2, r3
 8008fce:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008fd0:	bfb6      	itet	lt
 8008fd2:	4623      	movlt	r3, r4
 8008fd4:	1b1c      	subge	r4, r3, r4
 8008fd6:	2400      	movlt	r4, #0
 8008fd8:	f1b9 0f00 	cmp.w	r9, #0
 8008fdc:	bfb5      	itete	lt
 8008fde:	9a04      	ldrlt	r2, [sp, #16]
 8008fe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008fe4:	eba2 0809 	sublt.w	r8, r2, r9
 8008fe8:	464a      	movge	r2, r9
 8008fea:	bfb8      	it	lt
 8008fec:	2200      	movlt	r2, #0
 8008fee:	e73c      	b.n	8008e6a <_dtoa_r+0x642>
 8008ff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ff4:	9f07      	ldr	r7, [sp, #28]
 8008ff6:	461c      	mov	r4, r3
 8008ff8:	e744      	b.n	8008e84 <_dtoa_r+0x65c>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	e770      	b.n	8008ee0 <_dtoa_r+0x6b8>
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	2b01      	cmp	r3, #1
 8009002:	dc18      	bgt.n	8009036 <_dtoa_r+0x80e>
 8009004:	9b02      	ldr	r3, [sp, #8]
 8009006:	b9b3      	cbnz	r3, 8009036 <_dtoa_r+0x80e>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800900e:	b9a2      	cbnz	r2, 800903a <_dtoa_r+0x812>
 8009010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009014:	0d12      	lsrs	r2, r2, #20
 8009016:	0512      	lsls	r2, r2, #20
 8009018:	b18a      	cbz	r2, 800903e <_dtoa_r+0x816>
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	3301      	adds	r3, #1
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	3301      	adds	r3, #1
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	2301      	movs	r3, #1
 8009028:	930a      	str	r3, [sp, #40]	; 0x28
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	f47f af70 	bne.w	8008f12 <_dtoa_r+0x6ea>
 8009032:	2001      	movs	r0, #1
 8009034:	e775      	b.n	8008f22 <_dtoa_r+0x6fa>
 8009036:	2300      	movs	r3, #0
 8009038:	e7f6      	b.n	8009028 <_dtoa_r+0x800>
 800903a:	9b02      	ldr	r3, [sp, #8]
 800903c:	e7f4      	b.n	8009028 <_dtoa_r+0x800>
 800903e:	920a      	str	r2, [sp, #40]	; 0x28
 8009040:	e7f3      	b.n	800902a <_dtoa_r+0x802>
 8009042:	d082      	beq.n	8008f4a <_dtoa_r+0x722>
 8009044:	4610      	mov	r0, r2
 8009046:	301c      	adds	r0, #28
 8009048:	e778      	b.n	8008f3c <_dtoa_r+0x714>
 800904a:	f1b9 0f00 	cmp.w	r9, #0
 800904e:	dc37      	bgt.n	80090c0 <_dtoa_r+0x898>
 8009050:	9b06      	ldr	r3, [sp, #24]
 8009052:	2b02      	cmp	r3, #2
 8009054:	dd34      	ble.n	80090c0 <_dtoa_r+0x898>
 8009056:	46ca      	mov	sl, r9
 8009058:	f1ba 0f00 	cmp.w	sl, #0
 800905c:	d10d      	bne.n	800907a <_dtoa_r+0x852>
 800905e:	4621      	mov	r1, r4
 8009060:	4653      	mov	r3, sl
 8009062:	2205      	movs	r2, #5
 8009064:	4630      	mov	r0, r6
 8009066:	f000 ff5b 	bl	8009f20 <__multadd>
 800906a:	4601      	mov	r1, r0
 800906c:	4604      	mov	r4, r0
 800906e:	4628      	mov	r0, r5
 8009070:	f001 f9c0 	bl	800a3f4 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	f73f adeb 	bgt.w	8008c50 <_dtoa_r+0x428>
 800907a:	9b08      	ldr	r3, [sp, #32]
 800907c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009080:	ea6f 0b03 	mvn.w	fp, r3
 8009084:	f04f 0900 	mov.w	r9, #0
 8009088:	4621      	mov	r1, r4
 800908a:	4630      	mov	r0, r6
 800908c:	f000 ff26 	bl	8009edc <_Bfree>
 8009090:	2f00      	cmp	r7, #0
 8009092:	f43f aea8 	beq.w	8008de6 <_dtoa_r+0x5be>
 8009096:	f1b9 0f00 	cmp.w	r9, #0
 800909a:	d005      	beq.n	80090a8 <_dtoa_r+0x880>
 800909c:	45b9      	cmp	r9, r7
 800909e:	d003      	beq.n	80090a8 <_dtoa_r+0x880>
 80090a0:	4649      	mov	r1, r9
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 ff1a 	bl	8009edc <_Bfree>
 80090a8:	4639      	mov	r1, r7
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 ff16 	bl	8009edc <_Bfree>
 80090b0:	e699      	b.n	8008de6 <_dtoa_r+0x5be>
 80090b2:	2400      	movs	r4, #0
 80090b4:	4627      	mov	r7, r4
 80090b6:	e7e0      	b.n	800907a <_dtoa_r+0x852>
 80090b8:	46bb      	mov	fp, r7
 80090ba:	4604      	mov	r4, r0
 80090bc:	4607      	mov	r7, r0
 80090be:	e5c7      	b.n	8008c50 <_dtoa_r+0x428>
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	46ca      	mov	sl, r9
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8100 	beq.w	80092ca <_dtoa_r+0xaa2>
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	dd05      	ble.n	80090dc <_dtoa_r+0x8b4>
 80090d0:	4639      	mov	r1, r7
 80090d2:	4642      	mov	r2, r8
 80090d4:	4630      	mov	r0, r6
 80090d6:	f001 f91d 	bl	800a314 <__lshift>
 80090da:	4607      	mov	r7, r0
 80090dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d05d      	beq.n	800919e <_dtoa_r+0x976>
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 feb9 	bl	8009e5c <_Balloc>
 80090ea:	4680      	mov	r8, r0
 80090ec:	b928      	cbnz	r0, 80090fa <_dtoa_r+0x8d2>
 80090ee:	4b82      	ldr	r3, [pc, #520]	; (80092f8 <_dtoa_r+0xad0>)
 80090f0:	4602      	mov	r2, r0
 80090f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090f6:	f7ff bbaf 	b.w	8008858 <_dtoa_r+0x30>
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	3202      	adds	r2, #2
 80090fe:	0092      	lsls	r2, r2, #2
 8009100:	f107 010c 	add.w	r1, r7, #12
 8009104:	300c      	adds	r0, #12
 8009106:	f7fd fcd5 	bl	8006ab4 <memcpy>
 800910a:	2201      	movs	r2, #1
 800910c:	4641      	mov	r1, r8
 800910e:	4630      	mov	r0, r6
 8009110:	f001 f900 	bl	800a314 <__lshift>
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	3301      	adds	r3, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	4453      	add	r3, sl
 800911e:	9308      	str	r3, [sp, #32]
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	46b9      	mov	r9, r7
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	4607      	mov	r7, r0
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	4621      	mov	r1, r4
 8009130:	3b01      	subs	r3, #1
 8009132:	4628      	mov	r0, r5
 8009134:	9302      	str	r3, [sp, #8]
 8009136:	f7ff faeb 	bl	8008710 <quorem>
 800913a:	4603      	mov	r3, r0
 800913c:	3330      	adds	r3, #48	; 0x30
 800913e:	9005      	str	r0, [sp, #20]
 8009140:	4649      	mov	r1, r9
 8009142:	4628      	mov	r0, r5
 8009144:	9309      	str	r3, [sp, #36]	; 0x24
 8009146:	f001 f955 	bl	800a3f4 <__mcmp>
 800914a:	463a      	mov	r2, r7
 800914c:	4682      	mov	sl, r0
 800914e:	4621      	mov	r1, r4
 8009150:	4630      	mov	r0, r6
 8009152:	f001 f96b 	bl	800a42c <__mdiff>
 8009156:	68c2      	ldr	r2, [r0, #12]
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	4680      	mov	r8, r0
 800915c:	bb0a      	cbnz	r2, 80091a2 <_dtoa_r+0x97a>
 800915e:	4601      	mov	r1, r0
 8009160:	4628      	mov	r0, r5
 8009162:	f001 f947 	bl	800a3f4 <__mcmp>
 8009166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009168:	4602      	mov	r2, r0
 800916a:	4641      	mov	r1, r8
 800916c:	4630      	mov	r0, r6
 800916e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009172:	f000 feb3 	bl	8009edc <_Bfree>
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800917a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800917e:	ea43 0102 	orr.w	r1, r3, r2
 8009182:	9b07      	ldr	r3, [sp, #28]
 8009184:	430b      	orrs	r3, r1
 8009186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009188:	d10d      	bne.n	80091a6 <_dtoa_r+0x97e>
 800918a:	2b39      	cmp	r3, #57	; 0x39
 800918c:	d029      	beq.n	80091e2 <_dtoa_r+0x9ba>
 800918e:	f1ba 0f00 	cmp.w	sl, #0
 8009192:	dd01      	ble.n	8009198 <_dtoa_r+0x970>
 8009194:	9b05      	ldr	r3, [sp, #20]
 8009196:	3331      	adds	r3, #49	; 0x31
 8009198:	9a02      	ldr	r2, [sp, #8]
 800919a:	7013      	strb	r3, [r2, #0]
 800919c:	e774      	b.n	8009088 <_dtoa_r+0x860>
 800919e:	4638      	mov	r0, r7
 80091a0:	e7b8      	b.n	8009114 <_dtoa_r+0x8ec>
 80091a2:	2201      	movs	r2, #1
 80091a4:	e7e1      	b.n	800916a <_dtoa_r+0x942>
 80091a6:	f1ba 0f00 	cmp.w	sl, #0
 80091aa:	db06      	blt.n	80091ba <_dtoa_r+0x992>
 80091ac:	9906      	ldr	r1, [sp, #24]
 80091ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80091b2:	9907      	ldr	r1, [sp, #28]
 80091b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80091b8:	d120      	bne.n	80091fc <_dtoa_r+0x9d4>
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	ddec      	ble.n	8009198 <_dtoa_r+0x970>
 80091be:	4629      	mov	r1, r5
 80091c0:	2201      	movs	r2, #1
 80091c2:	4630      	mov	r0, r6
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	f001 f8a5 	bl	800a314 <__lshift>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4605      	mov	r5, r0
 80091ce:	f001 f911 	bl	800a3f4 <__mcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	9b04      	ldr	r3, [sp, #16]
 80091d6:	dc02      	bgt.n	80091de <_dtoa_r+0x9b6>
 80091d8:	d1de      	bne.n	8009198 <_dtoa_r+0x970>
 80091da:	07da      	lsls	r2, r3, #31
 80091dc:	d5dc      	bpl.n	8009198 <_dtoa_r+0x970>
 80091de:	2b39      	cmp	r3, #57	; 0x39
 80091e0:	d1d8      	bne.n	8009194 <_dtoa_r+0x96c>
 80091e2:	9a02      	ldr	r2, [sp, #8]
 80091e4:	2339      	movs	r3, #57	; 0x39
 80091e6:	7013      	strb	r3, [r2, #0]
 80091e8:	4643      	mov	r3, r8
 80091ea:	4698      	mov	r8, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80091f2:	2a39      	cmp	r2, #57	; 0x39
 80091f4:	d051      	beq.n	800929a <_dtoa_r+0xa72>
 80091f6:	3201      	adds	r2, #1
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e745      	b.n	8009088 <_dtoa_r+0x860>
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	dd03      	ble.n	8009208 <_dtoa_r+0x9e0>
 8009200:	2b39      	cmp	r3, #57	; 0x39
 8009202:	d0ee      	beq.n	80091e2 <_dtoa_r+0x9ba>
 8009204:	3301      	adds	r3, #1
 8009206:	e7c7      	b.n	8009198 <_dtoa_r+0x970>
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	9908      	ldr	r1, [sp, #32]
 800920c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009210:	428a      	cmp	r2, r1
 8009212:	d02b      	beq.n	800926c <_dtoa_r+0xa44>
 8009214:	4629      	mov	r1, r5
 8009216:	2300      	movs	r3, #0
 8009218:	220a      	movs	r2, #10
 800921a:	4630      	mov	r0, r6
 800921c:	f000 fe80 	bl	8009f20 <__multadd>
 8009220:	45b9      	cmp	r9, r7
 8009222:	4605      	mov	r5, r0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	f04f 020a 	mov.w	r2, #10
 800922c:	4649      	mov	r1, r9
 800922e:	4630      	mov	r0, r6
 8009230:	d107      	bne.n	8009242 <_dtoa_r+0xa1a>
 8009232:	f000 fe75 	bl	8009f20 <__multadd>
 8009236:	4681      	mov	r9, r0
 8009238:	4607      	mov	r7, r0
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	3301      	adds	r3, #1
 800923e:	9304      	str	r3, [sp, #16]
 8009240:	e774      	b.n	800912c <_dtoa_r+0x904>
 8009242:	f000 fe6d 	bl	8009f20 <__multadd>
 8009246:	4639      	mov	r1, r7
 8009248:	4681      	mov	r9, r0
 800924a:	2300      	movs	r3, #0
 800924c:	220a      	movs	r2, #10
 800924e:	4630      	mov	r0, r6
 8009250:	f000 fe66 	bl	8009f20 <__multadd>
 8009254:	4607      	mov	r7, r0
 8009256:	e7f0      	b.n	800923a <_dtoa_r+0xa12>
 8009258:	f1ba 0f00 	cmp.w	sl, #0
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	bfcc      	ite	gt
 8009260:	46d0      	movgt	r8, sl
 8009262:	f04f 0801 	movle.w	r8, #1
 8009266:	4490      	add	r8, r2
 8009268:	f04f 0900 	mov.w	r9, #0
 800926c:	4629      	mov	r1, r5
 800926e:	2201      	movs	r2, #1
 8009270:	4630      	mov	r0, r6
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	f001 f84e 	bl	800a314 <__lshift>
 8009278:	4621      	mov	r1, r4
 800927a:	4605      	mov	r5, r0
 800927c:	f001 f8ba 	bl	800a3f4 <__mcmp>
 8009280:	2800      	cmp	r0, #0
 8009282:	dcb1      	bgt.n	80091e8 <_dtoa_r+0x9c0>
 8009284:	d102      	bne.n	800928c <_dtoa_r+0xa64>
 8009286:	9b02      	ldr	r3, [sp, #8]
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d4ad      	bmi.n	80091e8 <_dtoa_r+0x9c0>
 800928c:	4643      	mov	r3, r8
 800928e:	4698      	mov	r8, r3
 8009290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009294:	2a30      	cmp	r2, #48	; 0x30
 8009296:	d0fa      	beq.n	800928e <_dtoa_r+0xa66>
 8009298:	e6f6      	b.n	8009088 <_dtoa_r+0x860>
 800929a:	9a01      	ldr	r2, [sp, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d1a4      	bne.n	80091ea <_dtoa_r+0x9c2>
 80092a0:	f10b 0b01 	add.w	fp, fp, #1
 80092a4:	2331      	movs	r3, #49	; 0x31
 80092a6:	e778      	b.n	800919a <_dtoa_r+0x972>
 80092a8:	4b14      	ldr	r3, [pc, #80]	; (80092fc <_dtoa_r+0xad4>)
 80092aa:	f7ff bb27 	b.w	80088fc <_dtoa_r+0xd4>
 80092ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f47f ab03 	bne.w	80088bc <_dtoa_r+0x94>
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <_dtoa_r+0xad8>)
 80092b8:	f7ff bb20 	b.w	80088fc <_dtoa_r+0xd4>
 80092bc:	f1ba 0f00 	cmp.w	sl, #0
 80092c0:	dc03      	bgt.n	80092ca <_dtoa_r+0xaa2>
 80092c2:	9b06      	ldr	r3, [sp, #24]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f73f aec7 	bgt.w	8009058 <_dtoa_r+0x830>
 80092ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f7ff fa1d 	bl	8008710 <quorem>
 80092d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092da:	f808 3b01 	strb.w	r3, [r8], #1
 80092de:	9a01      	ldr	r2, [sp, #4]
 80092e0:	eba8 0202 	sub.w	r2, r8, r2
 80092e4:	4592      	cmp	sl, r2
 80092e6:	ddb7      	ble.n	8009258 <_dtoa_r+0xa30>
 80092e8:	4629      	mov	r1, r5
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 fe16 	bl	8009f20 <__multadd>
 80092f4:	4605      	mov	r5, r0
 80092f6:	e7ea      	b.n	80092ce <_dtoa_r+0xaa6>
 80092f8:	0800b5a0 	.word	0x0800b5a0
 80092fc:	0800b3a0 	.word	0x0800b3a0
 8009300:	0800b521 	.word	0x0800b521

08009304 <__sflush_r>:
 8009304:	898a      	ldrh	r2, [r1, #12]
 8009306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	4605      	mov	r5, r0
 800930c:	0710      	lsls	r0, r2, #28
 800930e:	460c      	mov	r4, r1
 8009310:	d458      	bmi.n	80093c4 <__sflush_r+0xc0>
 8009312:	684b      	ldr	r3, [r1, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc05      	bgt.n	8009324 <__sflush_r+0x20>
 8009318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	dc02      	bgt.n	8009324 <__sflush_r+0x20>
 800931e:	2000      	movs	r0, #0
 8009320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009326:	2e00      	cmp	r6, #0
 8009328:	d0f9      	beq.n	800931e <__sflush_r+0x1a>
 800932a:	2300      	movs	r3, #0
 800932c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009330:	682f      	ldr	r7, [r5, #0]
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	d032      	beq.n	800939c <__sflush_r+0x98>
 8009336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	075a      	lsls	r2, r3, #29
 800933c:	d505      	bpl.n	800934a <__sflush_r+0x46>
 800933e:	6863      	ldr	r3, [r4, #4]
 8009340:	1ac0      	subs	r0, r0, r3
 8009342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009344:	b10b      	cbz	r3, 800934a <__sflush_r+0x46>
 8009346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009348:	1ac0      	subs	r0, r0, r3
 800934a:	2300      	movs	r3, #0
 800934c:	4602      	mov	r2, r0
 800934e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009350:	6a21      	ldr	r1, [r4, #32]
 8009352:	4628      	mov	r0, r5
 8009354:	47b0      	blx	r6
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	d106      	bne.n	800936a <__sflush_r+0x66>
 800935c:	6829      	ldr	r1, [r5, #0]
 800935e:	291d      	cmp	r1, #29
 8009360:	d82c      	bhi.n	80093bc <__sflush_r+0xb8>
 8009362:	4a2a      	ldr	r2, [pc, #168]	; (800940c <__sflush_r+0x108>)
 8009364:	40ca      	lsrs	r2, r1
 8009366:	07d6      	lsls	r6, r2, #31
 8009368:	d528      	bpl.n	80093bc <__sflush_r+0xb8>
 800936a:	2200      	movs	r2, #0
 800936c:	6062      	str	r2, [r4, #4]
 800936e:	04d9      	lsls	r1, r3, #19
 8009370:	6922      	ldr	r2, [r4, #16]
 8009372:	6022      	str	r2, [r4, #0]
 8009374:	d504      	bpl.n	8009380 <__sflush_r+0x7c>
 8009376:	1c42      	adds	r2, r0, #1
 8009378:	d101      	bne.n	800937e <__sflush_r+0x7a>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b903      	cbnz	r3, 8009380 <__sflush_r+0x7c>
 800937e:	6560      	str	r0, [r4, #84]	; 0x54
 8009380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009382:	602f      	str	r7, [r5, #0]
 8009384:	2900      	cmp	r1, #0
 8009386:	d0ca      	beq.n	800931e <__sflush_r+0x1a>
 8009388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800938c:	4299      	cmp	r1, r3
 800938e:	d002      	beq.n	8009396 <__sflush_r+0x92>
 8009390:	4628      	mov	r0, r5
 8009392:	f001 fa37 	bl	800a804 <_free_r>
 8009396:	2000      	movs	r0, #0
 8009398:	6360      	str	r0, [r4, #52]	; 0x34
 800939a:	e7c1      	b.n	8009320 <__sflush_r+0x1c>
 800939c:	6a21      	ldr	r1, [r4, #32]
 800939e:	2301      	movs	r3, #1
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b0      	blx	r6
 80093a4:	1c41      	adds	r1, r0, #1
 80093a6:	d1c7      	bne.n	8009338 <__sflush_r+0x34>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c4      	beq.n	8009338 <__sflush_r+0x34>
 80093ae:	2b1d      	cmp	r3, #29
 80093b0:	d001      	beq.n	80093b6 <__sflush_r+0xb2>
 80093b2:	2b16      	cmp	r3, #22
 80093b4:	d101      	bne.n	80093ba <__sflush_r+0xb6>
 80093b6:	602f      	str	r7, [r5, #0]
 80093b8:	e7b1      	b.n	800931e <__sflush_r+0x1a>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	e7ad      	b.n	8009320 <__sflush_r+0x1c>
 80093c4:	690f      	ldr	r7, [r1, #16]
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	d0a9      	beq.n	800931e <__sflush_r+0x1a>
 80093ca:	0793      	lsls	r3, r2, #30
 80093cc:	680e      	ldr	r6, [r1, #0]
 80093ce:	bf08      	it	eq
 80093d0:	694b      	ldreq	r3, [r1, #20]
 80093d2:	600f      	str	r7, [r1, #0]
 80093d4:	bf18      	it	ne
 80093d6:	2300      	movne	r3, #0
 80093d8:	eba6 0807 	sub.w	r8, r6, r7
 80093dc:	608b      	str	r3, [r1, #8]
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	dd9c      	ble.n	800931e <__sflush_r+0x1a>
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093e8:	4643      	mov	r3, r8
 80093ea:	463a      	mov	r2, r7
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b0      	blx	r6
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dc06      	bgt.n	8009402 <__sflush_r+0xfe>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e78e      	b.n	8009320 <__sflush_r+0x1c>
 8009402:	4407      	add	r7, r0
 8009404:	eba8 0800 	sub.w	r8, r8, r0
 8009408:	e7e9      	b.n	80093de <__sflush_r+0xda>
 800940a:	bf00      	nop
 800940c:	20400001 	.word	0x20400001

08009410 <_fflush_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	690b      	ldr	r3, [r1, #16]
 8009414:	4605      	mov	r5, r0
 8009416:	460c      	mov	r4, r1
 8009418:	b913      	cbnz	r3, 8009420 <_fflush_r+0x10>
 800941a:	2500      	movs	r5, #0
 800941c:	4628      	mov	r0, r5
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	b118      	cbz	r0, 800942a <_fflush_r+0x1a>
 8009422:	6983      	ldr	r3, [r0, #24]
 8009424:	b90b      	cbnz	r3, 800942a <_fflush_r+0x1a>
 8009426:	f000 f887 	bl	8009538 <__sinit>
 800942a:	4b14      	ldr	r3, [pc, #80]	; (800947c <_fflush_r+0x6c>)
 800942c:	429c      	cmp	r4, r3
 800942e:	d11b      	bne.n	8009468 <_fflush_r+0x58>
 8009430:	686c      	ldr	r4, [r5, #4]
 8009432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0ef      	beq.n	800941a <_fflush_r+0xa>
 800943a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800943c:	07d0      	lsls	r0, r2, #31
 800943e:	d404      	bmi.n	800944a <_fflush_r+0x3a>
 8009440:	0599      	lsls	r1, r3, #22
 8009442:	d402      	bmi.n	800944a <_fflush_r+0x3a>
 8009444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009446:	f000 fc88 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800944a:	4628      	mov	r0, r5
 800944c:	4621      	mov	r1, r4
 800944e:	f7ff ff59 	bl	8009304 <__sflush_r>
 8009452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009454:	07da      	lsls	r2, r3, #31
 8009456:	4605      	mov	r5, r0
 8009458:	d4e0      	bmi.n	800941c <_fflush_r+0xc>
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	059b      	lsls	r3, r3, #22
 800945e:	d4dd      	bmi.n	800941c <_fflush_r+0xc>
 8009460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009462:	f000 fc7b 	bl	8009d5c <__retarget_lock_release_recursive>
 8009466:	e7d9      	b.n	800941c <_fflush_r+0xc>
 8009468:	4b05      	ldr	r3, [pc, #20]	; (8009480 <_fflush_r+0x70>)
 800946a:	429c      	cmp	r4, r3
 800946c:	d101      	bne.n	8009472 <_fflush_r+0x62>
 800946e:	68ac      	ldr	r4, [r5, #8]
 8009470:	e7df      	b.n	8009432 <_fflush_r+0x22>
 8009472:	4b04      	ldr	r3, [pc, #16]	; (8009484 <_fflush_r+0x74>)
 8009474:	429c      	cmp	r4, r3
 8009476:	bf08      	it	eq
 8009478:	68ec      	ldreq	r4, [r5, #12]
 800947a:	e7da      	b.n	8009432 <_fflush_r+0x22>
 800947c:	0800b5d4 	.word	0x0800b5d4
 8009480:	0800b5f4 	.word	0x0800b5f4
 8009484:	0800b5b4 	.word	0x0800b5b4

08009488 <std>:
 8009488:	2300      	movs	r3, #0
 800948a:	b510      	push	{r4, lr}
 800948c:	4604      	mov	r4, r0
 800948e:	e9c0 3300 	strd	r3, r3, [r0]
 8009492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009496:	6083      	str	r3, [r0, #8]
 8009498:	8181      	strh	r1, [r0, #12]
 800949a:	6643      	str	r3, [r0, #100]	; 0x64
 800949c:	81c2      	strh	r2, [r0, #14]
 800949e:	6183      	str	r3, [r0, #24]
 80094a0:	4619      	mov	r1, r3
 80094a2:	2208      	movs	r2, #8
 80094a4:	305c      	adds	r0, #92	; 0x5c
 80094a6:	f7fd fb13 	bl	8006ad0 <memset>
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <std+0x38>)
 80094ac:	6263      	str	r3, [r4, #36]	; 0x24
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <std+0x3c>)
 80094b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <std+0x40>)
 80094b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <std+0x44>)
 80094b8:	6224      	str	r4, [r4, #32]
 80094ba:	6323      	str	r3, [r4, #48]	; 0x30
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	bf00      	nop
 80094c0:	0800af61 	.word	0x0800af61
 80094c4:	0800af83 	.word	0x0800af83
 80094c8:	0800afbb 	.word	0x0800afbb
 80094cc:	0800afdf 	.word	0x0800afdf

080094d0 <_cleanup_r>:
 80094d0:	4901      	ldr	r1, [pc, #4]	; (80094d8 <_cleanup_r+0x8>)
 80094d2:	f000 b8af 	b.w	8009634 <_fwalk_reent>
 80094d6:	bf00      	nop
 80094d8:	08009411 	.word	0x08009411

080094dc <__sfmoreglue>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	2268      	movs	r2, #104	; 0x68
 80094e0:	1e4d      	subs	r5, r1, #1
 80094e2:	4355      	muls	r5, r2
 80094e4:	460e      	mov	r6, r1
 80094e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094ea:	f001 f9f7 	bl	800a8dc <_malloc_r>
 80094ee:	4604      	mov	r4, r0
 80094f0:	b140      	cbz	r0, 8009504 <__sfmoreglue+0x28>
 80094f2:	2100      	movs	r1, #0
 80094f4:	e9c0 1600 	strd	r1, r6, [r0]
 80094f8:	300c      	adds	r0, #12
 80094fa:	60a0      	str	r0, [r4, #8]
 80094fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009500:	f7fd fae6 	bl	8006ad0 <memset>
 8009504:	4620      	mov	r0, r4
 8009506:	bd70      	pop	{r4, r5, r6, pc}

08009508 <__sfp_lock_acquire>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__sfp_lock_acquire+0x8>)
 800950a:	f000 bc26 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800950e:	bf00      	nop
 8009510:	240003dd 	.word	0x240003dd

08009514 <__sfp_lock_release>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__sfp_lock_release+0x8>)
 8009516:	f000 bc21 	b.w	8009d5c <__retarget_lock_release_recursive>
 800951a:	bf00      	nop
 800951c:	240003dd 	.word	0x240003dd

08009520 <__sinit_lock_acquire>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__sinit_lock_acquire+0x8>)
 8009522:	f000 bc1a 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009526:	bf00      	nop
 8009528:	240003de 	.word	0x240003de

0800952c <__sinit_lock_release>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__sinit_lock_release+0x8>)
 800952e:	f000 bc15 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009532:	bf00      	nop
 8009534:	240003de 	.word	0x240003de

08009538 <__sinit>:
 8009538:	b510      	push	{r4, lr}
 800953a:	4604      	mov	r4, r0
 800953c:	f7ff fff0 	bl	8009520 <__sinit_lock_acquire>
 8009540:	69a3      	ldr	r3, [r4, #24]
 8009542:	b11b      	cbz	r3, 800954c <__sinit+0x14>
 8009544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009548:	f7ff bff0 	b.w	800952c <__sinit_lock_release>
 800954c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009550:	6523      	str	r3, [r4, #80]	; 0x50
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <__sinit+0x68>)
 8009554:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <__sinit+0x6c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	62a2      	str	r2, [r4, #40]	; 0x28
 800955a:	42a3      	cmp	r3, r4
 800955c:	bf04      	itt	eq
 800955e:	2301      	moveq	r3, #1
 8009560:	61a3      	streq	r3, [r4, #24]
 8009562:	4620      	mov	r0, r4
 8009564:	f000 f820 	bl	80095a8 <__sfp>
 8009568:	6060      	str	r0, [r4, #4]
 800956a:	4620      	mov	r0, r4
 800956c:	f000 f81c 	bl	80095a8 <__sfp>
 8009570:	60a0      	str	r0, [r4, #8]
 8009572:	4620      	mov	r0, r4
 8009574:	f000 f818 	bl	80095a8 <__sfp>
 8009578:	2200      	movs	r2, #0
 800957a:	60e0      	str	r0, [r4, #12]
 800957c:	2104      	movs	r1, #4
 800957e:	6860      	ldr	r0, [r4, #4]
 8009580:	f7ff ff82 	bl	8009488 <std>
 8009584:	68a0      	ldr	r0, [r4, #8]
 8009586:	2201      	movs	r2, #1
 8009588:	2109      	movs	r1, #9
 800958a:	f7ff ff7d 	bl	8009488 <std>
 800958e:	68e0      	ldr	r0, [r4, #12]
 8009590:	2202      	movs	r2, #2
 8009592:	2112      	movs	r1, #18
 8009594:	f7ff ff78 	bl	8009488 <std>
 8009598:	2301      	movs	r3, #1
 800959a:	61a3      	str	r3, [r4, #24]
 800959c:	e7d2      	b.n	8009544 <__sinit+0xc>
 800959e:	bf00      	nop
 80095a0:	0800b38c 	.word	0x0800b38c
 80095a4:	080094d1 	.word	0x080094d1

080095a8 <__sfp>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	4607      	mov	r7, r0
 80095ac:	f7ff ffac 	bl	8009508 <__sfp_lock_acquire>
 80095b0:	4b1e      	ldr	r3, [pc, #120]	; (800962c <__sfp+0x84>)
 80095b2:	681e      	ldr	r6, [r3, #0]
 80095b4:	69b3      	ldr	r3, [r6, #24]
 80095b6:	b913      	cbnz	r3, 80095be <__sfp+0x16>
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff ffbd 	bl	8009538 <__sinit>
 80095be:	3648      	adds	r6, #72	; 0x48
 80095c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	d503      	bpl.n	80095d0 <__sfp+0x28>
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	b30b      	cbz	r3, 8009610 <__sfp+0x68>
 80095cc:	6836      	ldr	r6, [r6, #0]
 80095ce:	e7f7      	b.n	80095c0 <__sfp+0x18>
 80095d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095d4:	b9d5      	cbnz	r5, 800960c <__sfp+0x64>
 80095d6:	4b16      	ldr	r3, [pc, #88]	; (8009630 <__sfp+0x88>)
 80095d8:	60e3      	str	r3, [r4, #12]
 80095da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095de:	6665      	str	r5, [r4, #100]	; 0x64
 80095e0:	f000 fbba 	bl	8009d58 <__retarget_lock_init_recursive>
 80095e4:	f7ff ff96 	bl	8009514 <__sfp_lock_release>
 80095e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095f0:	6025      	str	r5, [r4, #0]
 80095f2:	61a5      	str	r5, [r4, #24]
 80095f4:	2208      	movs	r2, #8
 80095f6:	4629      	mov	r1, r5
 80095f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095fc:	f7fd fa68 	bl	8006ad0 <memset>
 8009600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009608:	4620      	mov	r0, r4
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960c:	3468      	adds	r4, #104	; 0x68
 800960e:	e7d9      	b.n	80095c4 <__sfp+0x1c>
 8009610:	2104      	movs	r1, #4
 8009612:	4638      	mov	r0, r7
 8009614:	f7ff ff62 	bl	80094dc <__sfmoreglue>
 8009618:	4604      	mov	r4, r0
 800961a:	6030      	str	r0, [r6, #0]
 800961c:	2800      	cmp	r0, #0
 800961e:	d1d5      	bne.n	80095cc <__sfp+0x24>
 8009620:	f7ff ff78 	bl	8009514 <__sfp_lock_release>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	e7ee      	b.n	8009608 <__sfp+0x60>
 800962a:	bf00      	nop
 800962c:	0800b38c 	.word	0x0800b38c
 8009630:	ffff0001 	.word	0xffff0001

08009634 <_fwalk_reent>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4606      	mov	r6, r0
 800963a:	4688      	mov	r8, r1
 800963c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009640:	2700      	movs	r7, #0
 8009642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009646:	f1b9 0901 	subs.w	r9, r9, #1
 800964a:	d505      	bpl.n	8009658 <_fwalk_reent+0x24>
 800964c:	6824      	ldr	r4, [r4, #0]
 800964e:	2c00      	cmp	r4, #0
 8009650:	d1f7      	bne.n	8009642 <_fwalk_reent+0xe>
 8009652:	4638      	mov	r0, r7
 8009654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009658:	89ab      	ldrh	r3, [r5, #12]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d907      	bls.n	800966e <_fwalk_reent+0x3a>
 800965e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009662:	3301      	adds	r3, #1
 8009664:	d003      	beq.n	800966e <_fwalk_reent+0x3a>
 8009666:	4629      	mov	r1, r5
 8009668:	4630      	mov	r0, r6
 800966a:	47c0      	blx	r8
 800966c:	4307      	orrs	r7, r0
 800966e:	3568      	adds	r5, #104	; 0x68
 8009670:	e7e9      	b.n	8009646 <_fwalk_reent+0x12>

08009672 <rshift>:
 8009672:	6903      	ldr	r3, [r0, #16]
 8009674:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800967c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009680:	f100 0414 	add.w	r4, r0, #20
 8009684:	dd45      	ble.n	8009712 <rshift+0xa0>
 8009686:	f011 011f 	ands.w	r1, r1, #31
 800968a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800968e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009692:	d10c      	bne.n	80096ae <rshift+0x3c>
 8009694:	f100 0710 	add.w	r7, r0, #16
 8009698:	4629      	mov	r1, r5
 800969a:	42b1      	cmp	r1, r6
 800969c:	d334      	bcc.n	8009708 <rshift+0x96>
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	1eea      	subs	r2, r5, #3
 80096a4:	4296      	cmp	r6, r2
 80096a6:	bf38      	it	cc
 80096a8:	2300      	movcc	r3, #0
 80096aa:	4423      	add	r3, r4
 80096ac:	e015      	b.n	80096da <rshift+0x68>
 80096ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096b2:	f1c1 0820 	rsb	r8, r1, #32
 80096b6:	40cf      	lsrs	r7, r1
 80096b8:	f105 0e04 	add.w	lr, r5, #4
 80096bc:	46a1      	mov	r9, r4
 80096be:	4576      	cmp	r6, lr
 80096c0:	46f4      	mov	ip, lr
 80096c2:	d815      	bhi.n	80096f0 <rshift+0x7e>
 80096c4:	1a9a      	subs	r2, r3, r2
 80096c6:	0092      	lsls	r2, r2, #2
 80096c8:	3a04      	subs	r2, #4
 80096ca:	3501      	adds	r5, #1
 80096cc:	42ae      	cmp	r6, r5
 80096ce:	bf38      	it	cc
 80096d0:	2200      	movcc	r2, #0
 80096d2:	18a3      	adds	r3, r4, r2
 80096d4:	50a7      	str	r7, [r4, r2]
 80096d6:	b107      	cbz	r7, 80096da <rshift+0x68>
 80096d8:	3304      	adds	r3, #4
 80096da:	1b1a      	subs	r2, r3, r4
 80096dc:	42a3      	cmp	r3, r4
 80096de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096e2:	bf08      	it	eq
 80096e4:	2300      	moveq	r3, #0
 80096e6:	6102      	str	r2, [r0, #16]
 80096e8:	bf08      	it	eq
 80096ea:	6143      	streq	r3, [r0, #20]
 80096ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f0:	f8dc c000 	ldr.w	ip, [ip]
 80096f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f8:	ea4c 0707 	orr.w	r7, ip, r7
 80096fc:	f849 7b04 	str.w	r7, [r9], #4
 8009700:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009704:	40cf      	lsrs	r7, r1
 8009706:	e7da      	b.n	80096be <rshift+0x4c>
 8009708:	f851 cb04 	ldr.w	ip, [r1], #4
 800970c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009710:	e7c3      	b.n	800969a <rshift+0x28>
 8009712:	4623      	mov	r3, r4
 8009714:	e7e1      	b.n	80096da <rshift+0x68>

08009716 <__hexdig_fun>:
 8009716:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800971a:	2b09      	cmp	r3, #9
 800971c:	d802      	bhi.n	8009724 <__hexdig_fun+0xe>
 800971e:	3820      	subs	r0, #32
 8009720:	b2c0      	uxtb	r0, r0
 8009722:	4770      	bx	lr
 8009724:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009728:	2b05      	cmp	r3, #5
 800972a:	d801      	bhi.n	8009730 <__hexdig_fun+0x1a>
 800972c:	3847      	subs	r0, #71	; 0x47
 800972e:	e7f7      	b.n	8009720 <__hexdig_fun+0xa>
 8009730:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009734:	2b05      	cmp	r3, #5
 8009736:	d801      	bhi.n	800973c <__hexdig_fun+0x26>
 8009738:	3827      	subs	r0, #39	; 0x27
 800973a:	e7f1      	b.n	8009720 <__hexdig_fun+0xa>
 800973c:	2000      	movs	r0, #0
 800973e:	4770      	bx	lr

08009740 <__gethex>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	b089      	sub	sp, #36	; 0x24
 800974a:	ee08 0a10 	vmov	s16, r0
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	4bb4      	ldr	r3, [pc, #720]	; (8009a24 <__gethex+0x2e4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	4618      	mov	r0, r3
 8009758:	468b      	mov	fp, r1
 800975a:	4690      	mov	r8, r2
 800975c:	f7f6 fdc0 	bl	80002e0 <strlen>
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	f8db 2000 	ldr.w	r2, [fp]
 8009766:	4403      	add	r3, r0
 8009768:	4682      	mov	sl, r0
 800976a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800976e:	9305      	str	r3, [sp, #20]
 8009770:	1c93      	adds	r3, r2, #2
 8009772:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009776:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800977a:	32fe      	adds	r2, #254	; 0xfe
 800977c:	18d1      	adds	r1, r2, r3
 800977e:	461f      	mov	r7, r3
 8009780:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009784:	9100      	str	r1, [sp, #0]
 8009786:	2830      	cmp	r0, #48	; 0x30
 8009788:	d0f8      	beq.n	800977c <__gethex+0x3c>
 800978a:	f7ff ffc4 	bl	8009716 <__hexdig_fun>
 800978e:	4604      	mov	r4, r0
 8009790:	2800      	cmp	r0, #0
 8009792:	d13a      	bne.n	800980a <__gethex+0xca>
 8009794:	9901      	ldr	r1, [sp, #4]
 8009796:	4652      	mov	r2, sl
 8009798:	4638      	mov	r0, r7
 800979a:	f001 fc24 	bl	800afe6 <strncmp>
 800979e:	4605      	mov	r5, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d168      	bne.n	8009876 <__gethex+0x136>
 80097a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097a8:	eb07 060a 	add.w	r6, r7, sl
 80097ac:	f7ff ffb3 	bl	8009716 <__hexdig_fun>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d062      	beq.n	800987a <__gethex+0x13a>
 80097b4:	4633      	mov	r3, r6
 80097b6:	7818      	ldrb	r0, [r3, #0]
 80097b8:	2830      	cmp	r0, #48	; 0x30
 80097ba:	461f      	mov	r7, r3
 80097bc:	f103 0301 	add.w	r3, r3, #1
 80097c0:	d0f9      	beq.n	80097b6 <__gethex+0x76>
 80097c2:	f7ff ffa8 	bl	8009716 <__hexdig_fun>
 80097c6:	2301      	movs	r3, #1
 80097c8:	fab0 f480 	clz	r4, r0
 80097cc:	0964      	lsrs	r4, r4, #5
 80097ce:	4635      	mov	r5, r6
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	463a      	mov	r2, r7
 80097d4:	4616      	mov	r6, r2
 80097d6:	3201      	adds	r2, #1
 80097d8:	7830      	ldrb	r0, [r6, #0]
 80097da:	f7ff ff9c 	bl	8009716 <__hexdig_fun>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1f8      	bne.n	80097d4 <__gethex+0x94>
 80097e2:	9901      	ldr	r1, [sp, #4]
 80097e4:	4652      	mov	r2, sl
 80097e6:	4630      	mov	r0, r6
 80097e8:	f001 fbfd 	bl	800afe6 <strncmp>
 80097ec:	b980      	cbnz	r0, 8009810 <__gethex+0xd0>
 80097ee:	b94d      	cbnz	r5, 8009804 <__gethex+0xc4>
 80097f0:	eb06 050a 	add.w	r5, r6, sl
 80097f4:	462a      	mov	r2, r5
 80097f6:	4616      	mov	r6, r2
 80097f8:	3201      	adds	r2, #1
 80097fa:	7830      	ldrb	r0, [r6, #0]
 80097fc:	f7ff ff8b 	bl	8009716 <__hexdig_fun>
 8009800:	2800      	cmp	r0, #0
 8009802:	d1f8      	bne.n	80097f6 <__gethex+0xb6>
 8009804:	1bad      	subs	r5, r5, r6
 8009806:	00ad      	lsls	r5, r5, #2
 8009808:	e004      	b.n	8009814 <__gethex+0xd4>
 800980a:	2400      	movs	r4, #0
 800980c:	4625      	mov	r5, r4
 800980e:	e7e0      	b.n	80097d2 <__gethex+0x92>
 8009810:	2d00      	cmp	r5, #0
 8009812:	d1f7      	bne.n	8009804 <__gethex+0xc4>
 8009814:	7833      	ldrb	r3, [r6, #0]
 8009816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800981a:	2b50      	cmp	r3, #80	; 0x50
 800981c:	d13b      	bne.n	8009896 <__gethex+0x156>
 800981e:	7873      	ldrb	r3, [r6, #1]
 8009820:	2b2b      	cmp	r3, #43	; 0x2b
 8009822:	d02c      	beq.n	800987e <__gethex+0x13e>
 8009824:	2b2d      	cmp	r3, #45	; 0x2d
 8009826:	d02e      	beq.n	8009886 <__gethex+0x146>
 8009828:	1c71      	adds	r1, r6, #1
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	7808      	ldrb	r0, [r1, #0]
 8009830:	f7ff ff71 	bl	8009716 <__hexdig_fun>
 8009834:	1e43      	subs	r3, r0, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b18      	cmp	r3, #24
 800983a:	d82c      	bhi.n	8009896 <__gethex+0x156>
 800983c:	f1a0 0210 	sub.w	r2, r0, #16
 8009840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009844:	f7ff ff67 	bl	8009716 <__hexdig_fun>
 8009848:	1e43      	subs	r3, r0, #1
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b18      	cmp	r3, #24
 800984e:	d91d      	bls.n	800988c <__gethex+0x14c>
 8009850:	f1b9 0f00 	cmp.w	r9, #0
 8009854:	d000      	beq.n	8009858 <__gethex+0x118>
 8009856:	4252      	negs	r2, r2
 8009858:	4415      	add	r5, r2
 800985a:	f8cb 1000 	str.w	r1, [fp]
 800985e:	b1e4      	cbz	r4, 800989a <__gethex+0x15a>
 8009860:	9b00      	ldr	r3, [sp, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2700      	movne	r7, #0
 8009868:	2706      	moveq	r7, #6
 800986a:	4638      	mov	r0, r7
 800986c:	b009      	add	sp, #36	; 0x24
 800986e:	ecbd 8b02 	vpop	{d8}
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	463e      	mov	r6, r7
 8009878:	4625      	mov	r5, r4
 800987a:	2401      	movs	r4, #1
 800987c:	e7ca      	b.n	8009814 <__gethex+0xd4>
 800987e:	f04f 0900 	mov.w	r9, #0
 8009882:	1cb1      	adds	r1, r6, #2
 8009884:	e7d3      	b.n	800982e <__gethex+0xee>
 8009886:	f04f 0901 	mov.w	r9, #1
 800988a:	e7fa      	b.n	8009882 <__gethex+0x142>
 800988c:	230a      	movs	r3, #10
 800988e:	fb03 0202 	mla	r2, r3, r2, r0
 8009892:	3a10      	subs	r2, #16
 8009894:	e7d4      	b.n	8009840 <__gethex+0x100>
 8009896:	4631      	mov	r1, r6
 8009898:	e7df      	b.n	800985a <__gethex+0x11a>
 800989a:	1bf3      	subs	r3, r6, r7
 800989c:	3b01      	subs	r3, #1
 800989e:	4621      	mov	r1, r4
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	dc0b      	bgt.n	80098bc <__gethex+0x17c>
 80098a4:	ee18 0a10 	vmov	r0, s16
 80098a8:	f000 fad8 	bl	8009e5c <_Balloc>
 80098ac:	4604      	mov	r4, r0
 80098ae:	b940      	cbnz	r0, 80098c2 <__gethex+0x182>
 80098b0:	4b5d      	ldr	r3, [pc, #372]	; (8009a28 <__gethex+0x2e8>)
 80098b2:	4602      	mov	r2, r0
 80098b4:	21de      	movs	r1, #222	; 0xde
 80098b6:	485d      	ldr	r0, [pc, #372]	; (8009a2c <__gethex+0x2ec>)
 80098b8:	f001 fbc8 	bl	800b04c <__assert_func>
 80098bc:	3101      	adds	r1, #1
 80098be:	105b      	asrs	r3, r3, #1
 80098c0:	e7ee      	b.n	80098a0 <__gethex+0x160>
 80098c2:	f100 0914 	add.w	r9, r0, #20
 80098c6:	f04f 0b00 	mov.w	fp, #0
 80098ca:	f1ca 0301 	rsb	r3, sl, #1
 80098ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80098d2:	f8cd b000 	str.w	fp, [sp]
 80098d6:	9306      	str	r3, [sp, #24]
 80098d8:	42b7      	cmp	r7, r6
 80098da:	d340      	bcc.n	800995e <__gethex+0x21e>
 80098dc:	9802      	ldr	r0, [sp, #8]
 80098de:	9b00      	ldr	r3, [sp, #0]
 80098e0:	f840 3b04 	str.w	r3, [r0], #4
 80098e4:	eba0 0009 	sub.w	r0, r0, r9
 80098e8:	1080      	asrs	r0, r0, #2
 80098ea:	0146      	lsls	r6, r0, #5
 80098ec:	6120      	str	r0, [r4, #16]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fba6 	bl	800a040 <__hi0bits>
 80098f4:	1a30      	subs	r0, r6, r0
 80098f6:	f8d8 6000 	ldr.w	r6, [r8]
 80098fa:	42b0      	cmp	r0, r6
 80098fc:	dd63      	ble.n	80099c6 <__gethex+0x286>
 80098fe:	1b87      	subs	r7, r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	4620      	mov	r0, r4
 8009904:	f000 ff47 	bl	800a796 <__any_on>
 8009908:	4682      	mov	sl, r0
 800990a:	b1a8      	cbz	r0, 8009938 <__gethex+0x1f8>
 800990c:	1e7b      	subs	r3, r7, #1
 800990e:	1159      	asrs	r1, r3, #5
 8009910:	f003 021f 	and.w	r2, r3, #31
 8009914:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009918:	f04f 0a01 	mov.w	sl, #1
 800991c:	fa0a f202 	lsl.w	r2, sl, r2
 8009920:	420a      	tst	r2, r1
 8009922:	d009      	beq.n	8009938 <__gethex+0x1f8>
 8009924:	4553      	cmp	r3, sl
 8009926:	dd05      	ble.n	8009934 <__gethex+0x1f4>
 8009928:	1eb9      	subs	r1, r7, #2
 800992a:	4620      	mov	r0, r4
 800992c:	f000 ff33 	bl	800a796 <__any_on>
 8009930:	2800      	cmp	r0, #0
 8009932:	d145      	bne.n	80099c0 <__gethex+0x280>
 8009934:	f04f 0a02 	mov.w	sl, #2
 8009938:	4639      	mov	r1, r7
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff fe99 	bl	8009672 <rshift>
 8009940:	443d      	add	r5, r7
 8009942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009946:	42ab      	cmp	r3, r5
 8009948:	da4c      	bge.n	80099e4 <__gethex+0x2a4>
 800994a:	ee18 0a10 	vmov	r0, s16
 800994e:	4621      	mov	r1, r4
 8009950:	f000 fac4 	bl	8009edc <_Bfree>
 8009954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009956:	2300      	movs	r3, #0
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	27a3      	movs	r7, #163	; 0xa3
 800995c:	e785      	b.n	800986a <__gethex+0x12a>
 800995e:	1e73      	subs	r3, r6, #1
 8009960:	9a05      	ldr	r2, [sp, #20]
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009968:	4293      	cmp	r3, r2
 800996a:	d019      	beq.n	80099a0 <__gethex+0x260>
 800996c:	f1bb 0f20 	cmp.w	fp, #32
 8009970:	d107      	bne.n	8009982 <__gethex+0x242>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	9a00      	ldr	r2, [sp, #0]
 8009976:	f843 2b04 	str.w	r2, [r3], #4
 800997a:	9302      	str	r3, [sp, #8]
 800997c:	2300      	movs	r3, #0
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	469b      	mov	fp, r3
 8009982:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009986:	f7ff fec6 	bl	8009716 <__hexdig_fun>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	f000 000f 	and.w	r0, r0, #15
 8009990:	fa00 f00b 	lsl.w	r0, r0, fp
 8009994:	4303      	orrs	r3, r0
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	f10b 0b04 	add.w	fp, fp, #4
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	e00d      	b.n	80099bc <__gethex+0x27c>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	9a06      	ldr	r2, [sp, #24]
 80099a4:	4413      	add	r3, r2
 80099a6:	42bb      	cmp	r3, r7
 80099a8:	d3e0      	bcc.n	800996c <__gethex+0x22c>
 80099aa:	4618      	mov	r0, r3
 80099ac:	9901      	ldr	r1, [sp, #4]
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	4652      	mov	r2, sl
 80099b2:	f001 fb18 	bl	800afe6 <strncmp>
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1d7      	bne.n	800996c <__gethex+0x22c>
 80099bc:	461e      	mov	r6, r3
 80099be:	e78b      	b.n	80098d8 <__gethex+0x198>
 80099c0:	f04f 0a03 	mov.w	sl, #3
 80099c4:	e7b8      	b.n	8009938 <__gethex+0x1f8>
 80099c6:	da0a      	bge.n	80099de <__gethex+0x29e>
 80099c8:	1a37      	subs	r7, r6, r0
 80099ca:	4621      	mov	r1, r4
 80099cc:	ee18 0a10 	vmov	r0, s16
 80099d0:	463a      	mov	r2, r7
 80099d2:	f000 fc9f 	bl	800a314 <__lshift>
 80099d6:	1bed      	subs	r5, r5, r7
 80099d8:	4604      	mov	r4, r0
 80099da:	f100 0914 	add.w	r9, r0, #20
 80099de:	f04f 0a00 	mov.w	sl, #0
 80099e2:	e7ae      	b.n	8009942 <__gethex+0x202>
 80099e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099e8:	42a8      	cmp	r0, r5
 80099ea:	dd72      	ble.n	8009ad2 <__gethex+0x392>
 80099ec:	1b45      	subs	r5, r0, r5
 80099ee:	42ae      	cmp	r6, r5
 80099f0:	dc36      	bgt.n	8009a60 <__gethex+0x320>
 80099f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d02a      	beq.n	8009a50 <__gethex+0x310>
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d02c      	beq.n	8009a58 <__gethex+0x318>
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d11c      	bne.n	8009a3c <__gethex+0x2fc>
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	d11a      	bne.n	8009a3c <__gethex+0x2fc>
 8009a06:	2e01      	cmp	r6, #1
 8009a08:	d112      	bne.n	8009a30 <__gethex+0x2f0>
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	2301      	movs	r3, #1
 8009a14:	6123      	str	r3, [r4, #16]
 8009a16:	f8c9 3000 	str.w	r3, [r9]
 8009a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a1c:	2762      	movs	r7, #98	; 0x62
 8009a1e:	601c      	str	r4, [r3, #0]
 8009a20:	e723      	b.n	800986a <__gethex+0x12a>
 8009a22:	bf00      	nop
 8009a24:	0800b67c 	.word	0x0800b67c
 8009a28:	0800b5a0 	.word	0x0800b5a0
 8009a2c:	0800b614 	.word	0x0800b614
 8009a30:	1e71      	subs	r1, r6, #1
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 feaf 	bl	800a796 <__any_on>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1e6      	bne.n	8009a0a <__gethex+0x2ca>
 8009a3c:	ee18 0a10 	vmov	r0, s16
 8009a40:	4621      	mov	r1, r4
 8009a42:	f000 fa4b 	bl	8009edc <_Bfree>
 8009a46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	2750      	movs	r7, #80	; 0x50
 8009a4e:	e70c      	b.n	800986a <__gethex+0x12a>
 8009a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f2      	bne.n	8009a3c <__gethex+0x2fc>
 8009a56:	e7d8      	b.n	8009a0a <__gethex+0x2ca>
 8009a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1d5      	bne.n	8009a0a <__gethex+0x2ca>
 8009a5e:	e7ed      	b.n	8009a3c <__gethex+0x2fc>
 8009a60:	1e6f      	subs	r7, r5, #1
 8009a62:	f1ba 0f00 	cmp.w	sl, #0
 8009a66:	d131      	bne.n	8009acc <__gethex+0x38c>
 8009a68:	b127      	cbz	r7, 8009a74 <__gethex+0x334>
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 fe92 	bl	800a796 <__any_on>
 8009a72:	4682      	mov	sl, r0
 8009a74:	117b      	asrs	r3, r7, #5
 8009a76:	2101      	movs	r1, #1
 8009a78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a7c:	f007 071f 	and.w	r7, r7, #31
 8009a80:	fa01 f707 	lsl.w	r7, r1, r7
 8009a84:	421f      	tst	r7, r3
 8009a86:	4629      	mov	r1, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bf18      	it	ne
 8009a8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a90:	1b76      	subs	r6, r6, r5
 8009a92:	f7ff fdee 	bl	8009672 <rshift>
 8009a96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a9a:	2702      	movs	r7, #2
 8009a9c:	f1ba 0f00 	cmp.w	sl, #0
 8009aa0:	d048      	beq.n	8009b34 <__gethex+0x3f4>
 8009aa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d015      	beq.n	8009ad6 <__gethex+0x396>
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d017      	beq.n	8009ade <__gethex+0x39e>
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d109      	bne.n	8009ac6 <__gethex+0x386>
 8009ab2:	f01a 0f02 	tst.w	sl, #2
 8009ab6:	d006      	beq.n	8009ac6 <__gethex+0x386>
 8009ab8:	f8d9 0000 	ldr.w	r0, [r9]
 8009abc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ac0:	f01a 0f01 	tst.w	sl, #1
 8009ac4:	d10e      	bne.n	8009ae4 <__gethex+0x3a4>
 8009ac6:	f047 0710 	orr.w	r7, r7, #16
 8009aca:	e033      	b.n	8009b34 <__gethex+0x3f4>
 8009acc:	f04f 0a01 	mov.w	sl, #1
 8009ad0:	e7d0      	b.n	8009a74 <__gethex+0x334>
 8009ad2:	2701      	movs	r7, #1
 8009ad4:	e7e2      	b.n	8009a9c <__gethex+0x35c>
 8009ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ad8:	f1c3 0301 	rsb	r3, r3, #1
 8009adc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <__gethex+0x386>
 8009ae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ae8:	f104 0314 	add.w	r3, r4, #20
 8009aec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009af0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009af4:	f04f 0c00 	mov.w	ip, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b02:	d01c      	beq.n	8009b3e <__gethex+0x3fe>
 8009b04:	3201      	adds	r2, #1
 8009b06:	6002      	str	r2, [r0, #0]
 8009b08:	2f02      	cmp	r7, #2
 8009b0a:	f104 0314 	add.w	r3, r4, #20
 8009b0e:	d13f      	bne.n	8009b90 <__gethex+0x450>
 8009b10:	f8d8 2000 	ldr.w	r2, [r8]
 8009b14:	3a01      	subs	r2, #1
 8009b16:	42b2      	cmp	r2, r6
 8009b18:	d10a      	bne.n	8009b30 <__gethex+0x3f0>
 8009b1a:	1171      	asrs	r1, r6, #5
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b22:	f006 061f 	and.w	r6, r6, #31
 8009b26:	fa02 f606 	lsl.w	r6, r2, r6
 8009b2a:	421e      	tst	r6, r3
 8009b2c:	bf18      	it	ne
 8009b2e:	4617      	movne	r7, r2
 8009b30:	f047 0720 	orr.w	r7, r7, #32
 8009b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b36:	601c      	str	r4, [r3, #0]
 8009b38:	9b04      	ldr	r3, [sp, #16]
 8009b3a:	601d      	str	r5, [r3, #0]
 8009b3c:	e695      	b.n	800986a <__gethex+0x12a>
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b44:	d8d8      	bhi.n	8009af8 <__gethex+0x3b8>
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	459b      	cmp	fp, r3
 8009b4a:	db19      	blt.n	8009b80 <__gethex+0x440>
 8009b4c:	6861      	ldr	r1, [r4, #4]
 8009b4e:	ee18 0a10 	vmov	r0, s16
 8009b52:	3101      	adds	r1, #1
 8009b54:	f000 f982 	bl	8009e5c <_Balloc>
 8009b58:	4681      	mov	r9, r0
 8009b5a:	b918      	cbnz	r0, 8009b64 <__gethex+0x424>
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <__gethex+0x488>)
 8009b5e:	4602      	mov	r2, r0
 8009b60:	2184      	movs	r1, #132	; 0x84
 8009b62:	e6a8      	b.n	80098b6 <__gethex+0x176>
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	3202      	adds	r2, #2
 8009b68:	f104 010c 	add.w	r1, r4, #12
 8009b6c:	0092      	lsls	r2, r2, #2
 8009b6e:	300c      	adds	r0, #12
 8009b70:	f7fc ffa0 	bl	8006ab4 <memcpy>
 8009b74:	4621      	mov	r1, r4
 8009b76:	ee18 0a10 	vmov	r0, s16
 8009b7a:	f000 f9af 	bl	8009edc <_Bfree>
 8009b7e:	464c      	mov	r4, r9
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b88:	6122      	str	r2, [r4, #16]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	615a      	str	r2, [r3, #20]
 8009b8e:	e7bb      	b.n	8009b08 <__gethex+0x3c8>
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	455a      	cmp	r2, fp
 8009b94:	dd0b      	ble.n	8009bae <__gethex+0x46e>
 8009b96:	2101      	movs	r1, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7ff fd6a 	bl	8009672 <rshift>
 8009b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	f6ff aed0 	blt.w	800994a <__gethex+0x20a>
 8009baa:	2701      	movs	r7, #1
 8009bac:	e7c0      	b.n	8009b30 <__gethex+0x3f0>
 8009bae:	f016 061f 	ands.w	r6, r6, #31
 8009bb2:	d0fa      	beq.n	8009baa <__gethex+0x46a>
 8009bb4:	4453      	add	r3, sl
 8009bb6:	f1c6 0620 	rsb	r6, r6, #32
 8009bba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bbe:	f000 fa3f 	bl	800a040 <__hi0bits>
 8009bc2:	42b0      	cmp	r0, r6
 8009bc4:	dbe7      	blt.n	8009b96 <__gethex+0x456>
 8009bc6:	e7f0      	b.n	8009baa <__gethex+0x46a>
 8009bc8:	0800b5a0 	.word	0x0800b5a0

08009bcc <L_shift>:
 8009bcc:	f1c2 0208 	rsb	r2, r2, #8
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	f1c2 0620 	rsb	r6, r2, #32
 8009bd8:	6843      	ldr	r3, [r0, #4]
 8009bda:	6804      	ldr	r4, [r0, #0]
 8009bdc:	fa03 f506 	lsl.w	r5, r3, r6
 8009be0:	432c      	orrs	r4, r5
 8009be2:	40d3      	lsrs	r3, r2
 8009be4:	6004      	str	r4, [r0, #0]
 8009be6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bea:	4288      	cmp	r0, r1
 8009bec:	d3f4      	bcc.n	8009bd8 <L_shift+0xc>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}

08009bf0 <__match>:
 8009bf0:	b530      	push	{r4, r5, lr}
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bfa:	b914      	cbnz	r4, 8009c02 <__match+0x12>
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	2001      	movs	r0, #1
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c0a:	2d19      	cmp	r5, #25
 8009c0c:	bf98      	it	ls
 8009c0e:	3220      	addls	r2, #32
 8009c10:	42a2      	cmp	r2, r4
 8009c12:	d0f0      	beq.n	8009bf6 <__match+0x6>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7f3      	b.n	8009c00 <__match+0x10>

08009c18 <__hexnan>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	680b      	ldr	r3, [r1, #0]
 8009c1e:	115e      	asrs	r6, r3, #5
 8009c20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c24:	f013 031f 	ands.w	r3, r3, #31
 8009c28:	b087      	sub	sp, #28
 8009c2a:	bf18      	it	ne
 8009c2c:	3604      	addne	r6, #4
 8009c2e:	2500      	movs	r5, #0
 8009c30:	1f37      	subs	r7, r6, #4
 8009c32:	4690      	mov	r8, r2
 8009c34:	6802      	ldr	r2, [r0, #0]
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	4682      	mov	sl, r0
 8009c3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c3e:	46b9      	mov	r9, r7
 8009c40:	463c      	mov	r4, r7
 8009c42:	9502      	str	r5, [sp, #8]
 8009c44:	46ab      	mov	fp, r5
 8009c46:	7851      	ldrb	r1, [r2, #1]
 8009c48:	1c53      	adds	r3, r2, #1
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	b341      	cbz	r1, 8009ca0 <__hexnan+0x88>
 8009c4e:	4608      	mov	r0, r1
 8009c50:	9205      	str	r2, [sp, #20]
 8009c52:	9104      	str	r1, [sp, #16]
 8009c54:	f7ff fd5f 	bl	8009716 <__hexdig_fun>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d14f      	bne.n	8009cfc <__hexnan+0xe4>
 8009c5c:	9904      	ldr	r1, [sp, #16]
 8009c5e:	9a05      	ldr	r2, [sp, #20]
 8009c60:	2920      	cmp	r1, #32
 8009c62:	d818      	bhi.n	8009c96 <__hexnan+0x7e>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	459b      	cmp	fp, r3
 8009c68:	dd13      	ble.n	8009c92 <__hexnan+0x7a>
 8009c6a:	454c      	cmp	r4, r9
 8009c6c:	d206      	bcs.n	8009c7c <__hexnan+0x64>
 8009c6e:	2d07      	cmp	r5, #7
 8009c70:	dc04      	bgt.n	8009c7c <__hexnan+0x64>
 8009c72:	462a      	mov	r2, r5
 8009c74:	4649      	mov	r1, r9
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff ffa8 	bl	8009bcc <L_shift>
 8009c7c:	4544      	cmp	r4, r8
 8009c7e:	d950      	bls.n	8009d22 <__hexnan+0x10a>
 8009c80:	2300      	movs	r3, #0
 8009c82:	f1a4 0904 	sub.w	r9, r4, #4
 8009c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c8e:	464c      	mov	r4, r9
 8009c90:	461d      	mov	r5, r3
 8009c92:	9a03      	ldr	r2, [sp, #12]
 8009c94:	e7d7      	b.n	8009c46 <__hexnan+0x2e>
 8009c96:	2929      	cmp	r1, #41	; 0x29
 8009c98:	d156      	bne.n	8009d48 <__hexnan+0x130>
 8009c9a:	3202      	adds	r2, #2
 8009c9c:	f8ca 2000 	str.w	r2, [sl]
 8009ca0:	f1bb 0f00 	cmp.w	fp, #0
 8009ca4:	d050      	beq.n	8009d48 <__hexnan+0x130>
 8009ca6:	454c      	cmp	r4, r9
 8009ca8:	d206      	bcs.n	8009cb8 <__hexnan+0xa0>
 8009caa:	2d07      	cmp	r5, #7
 8009cac:	dc04      	bgt.n	8009cb8 <__hexnan+0xa0>
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7ff ff8a 	bl	8009bcc <L_shift>
 8009cb8:	4544      	cmp	r4, r8
 8009cba:	d934      	bls.n	8009d26 <__hexnan+0x10e>
 8009cbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cca:	429f      	cmp	r7, r3
 8009ccc:	d2f9      	bcs.n	8009cc2 <__hexnan+0xaa>
 8009cce:	1b3b      	subs	r3, r7, r4
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	3e03      	subs	r6, #3
 8009cda:	42b4      	cmp	r4, r6
 8009cdc:	bf88      	it	hi
 8009cde:	2304      	movhi	r3, #4
 8009ce0:	4443      	add	r3, r8
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f843 2b04 	str.w	r2, [r3], #4
 8009ce8:	429f      	cmp	r7, r3
 8009cea:	d2fb      	bcs.n	8009ce4 <__hexnan+0xcc>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	b91b      	cbnz	r3, 8009cf8 <__hexnan+0xe0>
 8009cf0:	4547      	cmp	r7, r8
 8009cf2:	d127      	bne.n	8009d44 <__hexnan+0x12c>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	2005      	movs	r0, #5
 8009cfa:	e026      	b.n	8009d4a <__hexnan+0x132>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	2d08      	cmp	r5, #8
 8009d00:	f10b 0b01 	add.w	fp, fp, #1
 8009d04:	dd06      	ble.n	8009d14 <__hexnan+0xfc>
 8009d06:	4544      	cmp	r4, r8
 8009d08:	d9c3      	bls.n	8009c92 <__hexnan+0x7a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d10:	2501      	movs	r5, #1
 8009d12:	3c04      	subs	r4, #4
 8009d14:	6822      	ldr	r2, [r4, #0]
 8009d16:	f000 000f 	and.w	r0, r0, #15
 8009d1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	e7b7      	b.n	8009c92 <__hexnan+0x7a>
 8009d22:	2508      	movs	r5, #8
 8009d24:	e7b5      	b.n	8009c92 <__hexnan+0x7a>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0df      	beq.n	8009cec <__hexnan+0xd4>
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	f1c3 0320 	rsb	r3, r3, #32
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
 8009d38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d3c:	401a      	ands	r2, r3
 8009d3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d42:	e7d3      	b.n	8009cec <__hexnan+0xd4>
 8009d44:	3f04      	subs	r7, #4
 8009d46:	e7d1      	b.n	8009cec <__hexnan+0xd4>
 8009d48:	2004      	movs	r0, #4
 8009d4a:	b007      	add	sp, #28
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d50 <_localeconv_r>:
 8009d50:	4800      	ldr	r0, [pc, #0]	; (8009d54 <_localeconv_r+0x4>)
 8009d52:	4770      	bx	lr
 8009d54:	24000168 	.word	0x24000168

08009d58 <__retarget_lock_init_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_acquire_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__retarget_lock_release_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <__swhatbuf_r>:
 8009d5e:	b570      	push	{r4, r5, r6, lr}
 8009d60:	460e      	mov	r6, r1
 8009d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d66:	2900      	cmp	r1, #0
 8009d68:	b096      	sub	sp, #88	; 0x58
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	461d      	mov	r5, r3
 8009d6e:	da08      	bge.n	8009d82 <__swhatbuf_r+0x24>
 8009d70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	602a      	str	r2, [r5, #0]
 8009d78:	061a      	lsls	r2, r3, #24
 8009d7a:	d410      	bmi.n	8009d9e <__swhatbuf_r+0x40>
 8009d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d80:	e00e      	b.n	8009da0 <__swhatbuf_r+0x42>
 8009d82:	466a      	mov	r2, sp
 8009d84:	f001 f9a2 	bl	800b0cc <_fstat_r>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	dbf1      	blt.n	8009d70 <__swhatbuf_r+0x12>
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d96:	425a      	negs	r2, r3
 8009d98:	415a      	adcs	r2, r3
 8009d9a:	602a      	str	r2, [r5, #0]
 8009d9c:	e7ee      	b.n	8009d7c <__swhatbuf_r+0x1e>
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	2000      	movs	r0, #0
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	b016      	add	sp, #88	; 0x58
 8009da6:	bd70      	pop	{r4, r5, r6, pc}

08009da8 <__smakebuf_r>:
 8009da8:	898b      	ldrh	r3, [r1, #12]
 8009daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dac:	079d      	lsls	r5, r3, #30
 8009dae:	4606      	mov	r6, r0
 8009db0:	460c      	mov	r4, r1
 8009db2:	d507      	bpl.n	8009dc4 <__smakebuf_r+0x1c>
 8009db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	ab01      	add	r3, sp, #4
 8009dc6:	466a      	mov	r2, sp
 8009dc8:	f7ff ffc9 	bl	8009d5e <__swhatbuf_r>
 8009dcc:	9900      	ldr	r1, [sp, #0]
 8009dce:	4605      	mov	r5, r0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f000 fd83 	bl	800a8dc <_malloc_r>
 8009dd6:	b948      	cbnz	r0, 8009dec <__smakebuf_r+0x44>
 8009dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ddc:	059a      	lsls	r2, r3, #22
 8009dde:	d4ef      	bmi.n	8009dc0 <__smakebuf_r+0x18>
 8009de0:	f023 0303 	bic.w	r3, r3, #3
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	e7e3      	b.n	8009db4 <__smakebuf_r+0xc>
 8009dec:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <__smakebuf_r+0x7c>)
 8009dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	6120      	str	r0, [r4, #16]
 8009e02:	b15b      	cbz	r3, 8009e1c <__smakebuf_r+0x74>
 8009e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f001 f971 	bl	800b0f0 <_isatty_r>
 8009e0e:	b128      	cbz	r0, 8009e1c <__smakebuf_r+0x74>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	f043 0301 	orr.w	r3, r3, #1
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	89a0      	ldrh	r0, [r4, #12]
 8009e1e:	4305      	orrs	r5, r0
 8009e20:	81a5      	strh	r5, [r4, #12]
 8009e22:	e7cd      	b.n	8009dc0 <__smakebuf_r+0x18>
 8009e24:	080094d1 	.word	0x080094d1

08009e28 <malloc>:
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <malloc+0xc>)
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	f000 bd55 	b.w	800a8dc <_malloc_r>
 8009e32:	bf00      	nop
 8009e34:	24000010 	.word	0x24000010

08009e38 <__ascii_mbtowc>:
 8009e38:	b082      	sub	sp, #8
 8009e3a:	b901      	cbnz	r1, 8009e3e <__ascii_mbtowc+0x6>
 8009e3c:	a901      	add	r1, sp, #4
 8009e3e:	b142      	cbz	r2, 8009e52 <__ascii_mbtowc+0x1a>
 8009e40:	b14b      	cbz	r3, 8009e56 <__ascii_mbtowc+0x1e>
 8009e42:	7813      	ldrb	r3, [r2, #0]
 8009e44:	600b      	str	r3, [r1, #0]
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	1e10      	subs	r0, r2, #0
 8009e4a:	bf18      	it	ne
 8009e4c:	2001      	movne	r0, #1
 8009e4e:	b002      	add	sp, #8
 8009e50:	4770      	bx	lr
 8009e52:	4610      	mov	r0, r2
 8009e54:	e7fb      	b.n	8009e4e <__ascii_mbtowc+0x16>
 8009e56:	f06f 0001 	mvn.w	r0, #1
 8009e5a:	e7f8      	b.n	8009e4e <__ascii_mbtowc+0x16>

08009e5c <_Balloc>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	b976      	cbnz	r6, 8009e84 <_Balloc+0x28>
 8009e66:	2010      	movs	r0, #16
 8009e68:	f7ff ffde 	bl	8009e28 <malloc>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e70:	b920      	cbnz	r0, 8009e7c <_Balloc+0x20>
 8009e72:	4b18      	ldr	r3, [pc, #96]	; (8009ed4 <_Balloc+0x78>)
 8009e74:	4818      	ldr	r0, [pc, #96]	; (8009ed8 <_Balloc+0x7c>)
 8009e76:	2166      	movs	r1, #102	; 0x66
 8009e78:	f001 f8e8 	bl	800b04c <__assert_func>
 8009e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e80:	6006      	str	r6, [r0, #0]
 8009e82:	60c6      	str	r6, [r0, #12]
 8009e84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e86:	68f3      	ldr	r3, [r6, #12]
 8009e88:	b183      	cbz	r3, 8009eac <_Balloc+0x50>
 8009e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e92:	b9b8      	cbnz	r0, 8009ec4 <_Balloc+0x68>
 8009e94:	2101      	movs	r1, #1
 8009e96:	fa01 f605 	lsl.w	r6, r1, r5
 8009e9a:	1d72      	adds	r2, r6, #5
 8009e9c:	0092      	lsls	r2, r2, #2
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fc9a 	bl	800a7d8 <_calloc_r>
 8009ea4:	b160      	cbz	r0, 8009ec0 <_Balloc+0x64>
 8009ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eaa:	e00e      	b.n	8009eca <_Balloc+0x6e>
 8009eac:	2221      	movs	r2, #33	; 0x21
 8009eae:	2104      	movs	r1, #4
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fc91 	bl	800a7d8 <_calloc_r>
 8009eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb8:	60f0      	str	r0, [r6, #12]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e4      	bne.n	8009e8a <_Balloc+0x2e>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	6802      	ldr	r2, [r0, #0]
 8009ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ed0:	e7f7      	b.n	8009ec2 <_Balloc+0x66>
 8009ed2:	bf00      	nop
 8009ed4:	0800b52e 	.word	0x0800b52e
 8009ed8:	0800b690 	.word	0x0800b690

08009edc <_Bfree>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	b976      	cbnz	r6, 8009f04 <_Bfree+0x28>
 8009ee6:	2010      	movs	r0, #16
 8009ee8:	f7ff ff9e 	bl	8009e28 <malloc>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6268      	str	r0, [r5, #36]	; 0x24
 8009ef0:	b920      	cbnz	r0, 8009efc <_Bfree+0x20>
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <_Bfree+0x3c>)
 8009ef4:	4809      	ldr	r0, [pc, #36]	; (8009f1c <_Bfree+0x40>)
 8009ef6:	218a      	movs	r1, #138	; 0x8a
 8009ef8:	f001 f8a8 	bl	800b04c <__assert_func>
 8009efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f00:	6006      	str	r6, [r0, #0]
 8009f02:	60c6      	str	r6, [r0, #12]
 8009f04:	b13c      	cbz	r4, 8009f16 <_Bfree+0x3a>
 8009f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f08:	6862      	ldr	r2, [r4, #4]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f10:	6021      	str	r1, [r4, #0]
 8009f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f16:	bd70      	pop	{r4, r5, r6, pc}
 8009f18:	0800b52e 	.word	0x0800b52e
 8009f1c:	0800b690 	.word	0x0800b690

08009f20 <__multadd>:
 8009f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f24:	690d      	ldr	r5, [r1, #16]
 8009f26:	4607      	mov	r7, r0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	461e      	mov	r6, r3
 8009f2c:	f101 0c14 	add.w	ip, r1, #20
 8009f30:	2000      	movs	r0, #0
 8009f32:	f8dc 3000 	ldr.w	r3, [ip]
 8009f36:	b299      	uxth	r1, r3
 8009f38:	fb02 6101 	mla	r1, r2, r1, r6
 8009f3c:	0c1e      	lsrs	r6, r3, #16
 8009f3e:	0c0b      	lsrs	r3, r1, #16
 8009f40:	fb02 3306 	mla	r3, r2, r6, r3
 8009f44:	b289      	uxth	r1, r1
 8009f46:	3001      	adds	r0, #1
 8009f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f4c:	4285      	cmp	r5, r0
 8009f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f56:	dcec      	bgt.n	8009f32 <__multadd+0x12>
 8009f58:	b30e      	cbz	r6, 8009f9e <__multadd+0x7e>
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	42ab      	cmp	r3, r5
 8009f5e:	dc19      	bgt.n	8009f94 <__multadd+0x74>
 8009f60:	6861      	ldr	r1, [r4, #4]
 8009f62:	4638      	mov	r0, r7
 8009f64:	3101      	adds	r1, #1
 8009f66:	f7ff ff79 	bl	8009e5c <_Balloc>
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	b928      	cbnz	r0, 8009f7a <__multadd+0x5a>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	4b0c      	ldr	r3, [pc, #48]	; (8009fa4 <__multadd+0x84>)
 8009f72:	480d      	ldr	r0, [pc, #52]	; (8009fa8 <__multadd+0x88>)
 8009f74:	21b5      	movs	r1, #181	; 0xb5
 8009f76:	f001 f869 	bl	800b04c <__assert_func>
 8009f7a:	6922      	ldr	r2, [r4, #16]
 8009f7c:	3202      	adds	r2, #2
 8009f7e:	f104 010c 	add.w	r1, r4, #12
 8009f82:	0092      	lsls	r2, r2, #2
 8009f84:	300c      	adds	r0, #12
 8009f86:	f7fc fd95 	bl	8006ab4 <memcpy>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff ffa5 	bl	8009edc <_Bfree>
 8009f92:	4644      	mov	r4, r8
 8009f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f98:	3501      	adds	r5, #1
 8009f9a:	615e      	str	r6, [r3, #20]
 8009f9c:	6125      	str	r5, [r4, #16]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa4:	0800b5a0 	.word	0x0800b5a0
 8009fa8:	0800b690 	.word	0x0800b690

08009fac <__s2b>:
 8009fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	4615      	mov	r5, r2
 8009fb4:	461f      	mov	r7, r3
 8009fb6:	2209      	movs	r2, #9
 8009fb8:	3308      	adds	r3, #8
 8009fba:	4606      	mov	r6, r0
 8009fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	db09      	blt.n	8009fdc <__s2b+0x30>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ff47 	bl	8009e5c <_Balloc>
 8009fce:	b940      	cbnz	r0, 8009fe2 <__s2b+0x36>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	4b19      	ldr	r3, [pc, #100]	; (800a038 <__s2b+0x8c>)
 8009fd4:	4819      	ldr	r0, [pc, #100]	; (800a03c <__s2b+0x90>)
 8009fd6:	21ce      	movs	r1, #206	; 0xce
 8009fd8:	f001 f838 	bl	800b04c <__assert_func>
 8009fdc:	0052      	lsls	r2, r2, #1
 8009fde:	3101      	adds	r1, #1
 8009fe0:	e7f0      	b.n	8009fc4 <__s2b+0x18>
 8009fe2:	9b08      	ldr	r3, [sp, #32]
 8009fe4:	6143      	str	r3, [r0, #20]
 8009fe6:	2d09      	cmp	r5, #9
 8009fe8:	f04f 0301 	mov.w	r3, #1
 8009fec:	6103      	str	r3, [r0, #16]
 8009fee:	dd16      	ble.n	800a01e <__s2b+0x72>
 8009ff0:	f104 0909 	add.w	r9, r4, #9
 8009ff4:	46c8      	mov	r8, r9
 8009ff6:	442c      	add	r4, r5
 8009ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	3b30      	subs	r3, #48	; 0x30
 800a000:	220a      	movs	r2, #10
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff ff8c 	bl	8009f20 <__multadd>
 800a008:	45a0      	cmp	r8, r4
 800a00a:	d1f5      	bne.n	8009ff8 <__s2b+0x4c>
 800a00c:	f1a5 0408 	sub.w	r4, r5, #8
 800a010:	444c      	add	r4, r9
 800a012:	1b2d      	subs	r5, r5, r4
 800a014:	1963      	adds	r3, r4, r5
 800a016:	42bb      	cmp	r3, r7
 800a018:	db04      	blt.n	800a024 <__s2b+0x78>
 800a01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01e:	340a      	adds	r4, #10
 800a020:	2509      	movs	r5, #9
 800a022:	e7f6      	b.n	800a012 <__s2b+0x66>
 800a024:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a028:	4601      	mov	r1, r0
 800a02a:	3b30      	subs	r3, #48	; 0x30
 800a02c:	220a      	movs	r2, #10
 800a02e:	4630      	mov	r0, r6
 800a030:	f7ff ff76 	bl	8009f20 <__multadd>
 800a034:	e7ee      	b.n	800a014 <__s2b+0x68>
 800a036:	bf00      	nop
 800a038:	0800b5a0 	.word	0x0800b5a0
 800a03c:	0800b690 	.word	0x0800b690

0800a040 <__hi0bits>:
 800a040:	0c03      	lsrs	r3, r0, #16
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	b9d3      	cbnz	r3, 800a07c <__hi0bits+0x3c>
 800a046:	0400      	lsls	r0, r0, #16
 800a048:	2310      	movs	r3, #16
 800a04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a04e:	bf04      	itt	eq
 800a050:	0200      	lsleq	r0, r0, #8
 800a052:	3308      	addeq	r3, #8
 800a054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a058:	bf04      	itt	eq
 800a05a:	0100      	lsleq	r0, r0, #4
 800a05c:	3304      	addeq	r3, #4
 800a05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a062:	bf04      	itt	eq
 800a064:	0080      	lsleq	r0, r0, #2
 800a066:	3302      	addeq	r3, #2
 800a068:	2800      	cmp	r0, #0
 800a06a:	db05      	blt.n	800a078 <__hi0bits+0x38>
 800a06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a070:	f103 0301 	add.w	r3, r3, #1
 800a074:	bf08      	it	eq
 800a076:	2320      	moveq	r3, #32
 800a078:	4618      	mov	r0, r3
 800a07a:	4770      	bx	lr
 800a07c:	2300      	movs	r3, #0
 800a07e:	e7e4      	b.n	800a04a <__hi0bits+0xa>

0800a080 <__lo0bits>:
 800a080:	6803      	ldr	r3, [r0, #0]
 800a082:	f013 0207 	ands.w	r2, r3, #7
 800a086:	4601      	mov	r1, r0
 800a088:	d00b      	beq.n	800a0a2 <__lo0bits+0x22>
 800a08a:	07da      	lsls	r2, r3, #31
 800a08c:	d423      	bmi.n	800a0d6 <__lo0bits+0x56>
 800a08e:	0798      	lsls	r0, r3, #30
 800a090:	bf49      	itett	mi
 800a092:	085b      	lsrmi	r3, r3, #1
 800a094:	089b      	lsrpl	r3, r3, #2
 800a096:	2001      	movmi	r0, #1
 800a098:	600b      	strmi	r3, [r1, #0]
 800a09a:	bf5c      	itt	pl
 800a09c:	600b      	strpl	r3, [r1, #0]
 800a09e:	2002      	movpl	r0, #2
 800a0a0:	4770      	bx	lr
 800a0a2:	b298      	uxth	r0, r3
 800a0a4:	b9a8      	cbnz	r0, 800a0d2 <__lo0bits+0x52>
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	2010      	movs	r0, #16
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	b90a      	cbnz	r2, 800a0b2 <__lo0bits+0x32>
 800a0ae:	3008      	adds	r0, #8
 800a0b0:	0a1b      	lsrs	r3, r3, #8
 800a0b2:	071a      	lsls	r2, r3, #28
 800a0b4:	bf04      	itt	eq
 800a0b6:	091b      	lsreq	r3, r3, #4
 800a0b8:	3004      	addeq	r0, #4
 800a0ba:	079a      	lsls	r2, r3, #30
 800a0bc:	bf04      	itt	eq
 800a0be:	089b      	lsreq	r3, r3, #2
 800a0c0:	3002      	addeq	r0, #2
 800a0c2:	07da      	lsls	r2, r3, #31
 800a0c4:	d403      	bmi.n	800a0ce <__lo0bits+0x4e>
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	f100 0001 	add.w	r0, r0, #1
 800a0cc:	d005      	beq.n	800a0da <__lo0bits+0x5a>
 800a0ce:	600b      	str	r3, [r1, #0]
 800a0d0:	4770      	bx	lr
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	e7e9      	b.n	800a0aa <__lo0bits+0x2a>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	4770      	bx	lr
 800a0da:	2020      	movs	r0, #32
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <__i2b>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	f7ff feb9 	bl	8009e5c <_Balloc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	b928      	cbnz	r0, 800a0fa <__i2b+0x1a>
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <__i2b+0x24>)
 800a0f0:	4805      	ldr	r0, [pc, #20]	; (800a108 <__i2b+0x28>)
 800a0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0f6:	f000 ffa9 	bl	800b04c <__assert_func>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	6144      	str	r4, [r0, #20]
 800a0fe:	6103      	str	r3, [r0, #16]
 800a100:	bd10      	pop	{r4, pc}
 800a102:	bf00      	nop
 800a104:	0800b5a0 	.word	0x0800b5a0
 800a108:	0800b690 	.word	0x0800b690

0800a10c <__multiply>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	4691      	mov	r9, r2
 800a112:	690a      	ldr	r2, [r1, #16]
 800a114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a118:	429a      	cmp	r2, r3
 800a11a:	bfb8      	it	lt
 800a11c:	460b      	movlt	r3, r1
 800a11e:	460c      	mov	r4, r1
 800a120:	bfbc      	itt	lt
 800a122:	464c      	movlt	r4, r9
 800a124:	4699      	movlt	r9, r3
 800a126:	6927      	ldr	r7, [r4, #16]
 800a128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	6861      	ldr	r1, [r4, #4]
 800a130:	eb07 060a 	add.w	r6, r7, sl
 800a134:	42b3      	cmp	r3, r6
 800a136:	b085      	sub	sp, #20
 800a138:	bfb8      	it	lt
 800a13a:	3101      	addlt	r1, #1
 800a13c:	f7ff fe8e 	bl	8009e5c <_Balloc>
 800a140:	b930      	cbnz	r0, 800a150 <__multiply+0x44>
 800a142:	4602      	mov	r2, r0
 800a144:	4b44      	ldr	r3, [pc, #272]	; (800a258 <__multiply+0x14c>)
 800a146:	4845      	ldr	r0, [pc, #276]	; (800a25c <__multiply+0x150>)
 800a148:	f240 115d 	movw	r1, #349	; 0x15d
 800a14c:	f000 ff7e 	bl	800b04c <__assert_func>
 800a150:	f100 0514 	add.w	r5, r0, #20
 800a154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a158:	462b      	mov	r3, r5
 800a15a:	2200      	movs	r2, #0
 800a15c:	4543      	cmp	r3, r8
 800a15e:	d321      	bcc.n	800a1a4 <__multiply+0x98>
 800a160:	f104 0314 	add.w	r3, r4, #20
 800a164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a168:	f109 0314 	add.w	r3, r9, #20
 800a16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	1b3a      	subs	r2, r7, r4
 800a174:	3a15      	subs	r2, #21
 800a176:	f022 0203 	bic.w	r2, r2, #3
 800a17a:	3204      	adds	r2, #4
 800a17c:	f104 0115 	add.w	r1, r4, #21
 800a180:	428f      	cmp	r7, r1
 800a182:	bf38      	it	cc
 800a184:	2204      	movcc	r2, #4
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9a02      	ldr	r2, [sp, #8]
 800a18a:	9303      	str	r3, [sp, #12]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d80c      	bhi.n	800a1aa <__multiply+0x9e>
 800a190:	2e00      	cmp	r6, #0
 800a192:	dd03      	ble.n	800a19c <__multiply+0x90>
 800a194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d05a      	beq.n	800a252 <__multiply+0x146>
 800a19c:	6106      	str	r6, [r0, #16]
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	f843 2b04 	str.w	r2, [r3], #4
 800a1a8:	e7d8      	b.n	800a15c <__multiply+0x50>
 800a1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1ae:	f1ba 0f00 	cmp.w	sl, #0
 800a1b2:	d024      	beq.n	800a1fe <__multiply+0xf2>
 800a1b4:	f104 0e14 	add.w	lr, r4, #20
 800a1b8:	46a9      	mov	r9, r5
 800a1ba:	f04f 0c00 	mov.w	ip, #0
 800a1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800a1c6:	fa1f fb82 	uxth.w	fp, r2
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1d8:	4461      	add	r1, ip
 800a1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ec:	4577      	cmp	r7, lr
 800a1ee:	f849 1b04 	str.w	r1, [r9], #4
 800a1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1f6:	d8e2      	bhi.n	800a1be <__multiply+0xb2>
 800a1f8:	9a01      	ldr	r2, [sp, #4]
 800a1fa:	f845 c002 	str.w	ip, [r5, r2]
 800a1fe:	9a03      	ldr	r2, [sp, #12]
 800a200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a204:	3304      	adds	r3, #4
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	d020      	beq.n	800a24e <__multiply+0x142>
 800a20c:	6829      	ldr	r1, [r5, #0]
 800a20e:	f104 0c14 	add.w	ip, r4, #20
 800a212:	46ae      	mov	lr, r5
 800a214:	f04f 0a00 	mov.w	sl, #0
 800a218:	f8bc b000 	ldrh.w	fp, [ip]
 800a21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a220:	fb09 220b 	mla	r2, r9, fp, r2
 800a224:	4492      	add	sl, r2
 800a226:	b289      	uxth	r1, r1
 800a228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a22c:	f84e 1b04 	str.w	r1, [lr], #4
 800a230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a234:	f8be 1000 	ldrh.w	r1, [lr]
 800a238:	0c12      	lsrs	r2, r2, #16
 800a23a:	fb09 1102 	mla	r1, r9, r2, r1
 800a23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a242:	4567      	cmp	r7, ip
 800a244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a248:	d8e6      	bhi.n	800a218 <__multiply+0x10c>
 800a24a:	9a01      	ldr	r2, [sp, #4]
 800a24c:	50a9      	str	r1, [r5, r2]
 800a24e:	3504      	adds	r5, #4
 800a250:	e79a      	b.n	800a188 <__multiply+0x7c>
 800a252:	3e01      	subs	r6, #1
 800a254:	e79c      	b.n	800a190 <__multiply+0x84>
 800a256:	bf00      	nop
 800a258:	0800b5a0 	.word	0x0800b5a0
 800a25c:	0800b690 	.word	0x0800b690

0800a260 <__pow5mult>:
 800a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a264:	4615      	mov	r5, r2
 800a266:	f012 0203 	ands.w	r2, r2, #3
 800a26a:	4606      	mov	r6, r0
 800a26c:	460f      	mov	r7, r1
 800a26e:	d007      	beq.n	800a280 <__pow5mult+0x20>
 800a270:	4c25      	ldr	r4, [pc, #148]	; (800a308 <__pow5mult+0xa8>)
 800a272:	3a01      	subs	r2, #1
 800a274:	2300      	movs	r3, #0
 800a276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a27a:	f7ff fe51 	bl	8009f20 <__multadd>
 800a27e:	4607      	mov	r7, r0
 800a280:	10ad      	asrs	r5, r5, #2
 800a282:	d03d      	beq.n	800a300 <__pow5mult+0xa0>
 800a284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a286:	b97c      	cbnz	r4, 800a2a8 <__pow5mult+0x48>
 800a288:	2010      	movs	r0, #16
 800a28a:	f7ff fdcd 	bl	8009e28 <malloc>
 800a28e:	4602      	mov	r2, r0
 800a290:	6270      	str	r0, [r6, #36]	; 0x24
 800a292:	b928      	cbnz	r0, 800a2a0 <__pow5mult+0x40>
 800a294:	4b1d      	ldr	r3, [pc, #116]	; (800a30c <__pow5mult+0xac>)
 800a296:	481e      	ldr	r0, [pc, #120]	; (800a310 <__pow5mult+0xb0>)
 800a298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a29c:	f000 fed6 	bl	800b04c <__assert_func>
 800a2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2a4:	6004      	str	r4, [r0, #0]
 800a2a6:	60c4      	str	r4, [r0, #12]
 800a2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b0:	b94c      	cbnz	r4, 800a2c6 <__pow5mult+0x66>
 800a2b2:	f240 2171 	movw	r1, #625	; 0x271
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7ff ff12 	bl	800a0e0 <__i2b>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	6003      	str	r3, [r0, #0]
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	07eb      	lsls	r3, r5, #31
 800a2cc:	d50a      	bpl.n	800a2e4 <__pow5mult+0x84>
 800a2ce:	4639      	mov	r1, r7
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ff1a 	bl	800a10c <__multiply>
 800a2d8:	4639      	mov	r1, r7
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff fdfd 	bl	8009edc <_Bfree>
 800a2e2:	4647      	mov	r7, r8
 800a2e4:	106d      	asrs	r5, r5, #1
 800a2e6:	d00b      	beq.n	800a300 <__pow5mult+0xa0>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	b938      	cbnz	r0, 800a2fc <__pow5mult+0x9c>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ff0b 	bl	800a10c <__multiply>
 800a2f6:	6020      	str	r0, [r4, #0]
 800a2f8:	f8c0 9000 	str.w	r9, [r0]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	e7e4      	b.n	800a2ca <__pow5mult+0x6a>
 800a300:	4638      	mov	r0, r7
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	bf00      	nop
 800a308:	0800b7e0 	.word	0x0800b7e0
 800a30c:	0800b52e 	.word	0x0800b52e
 800a310:	0800b690 	.word	0x0800b690

0800a314 <__lshift>:
 800a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a318:	460c      	mov	r4, r1
 800a31a:	6849      	ldr	r1, [r1, #4]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	4607      	mov	r7, r0
 800a326:	4691      	mov	r9, r2
 800a328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a32c:	f108 0601 	add.w	r6, r8, #1
 800a330:	42b3      	cmp	r3, r6
 800a332:	db0b      	blt.n	800a34c <__lshift+0x38>
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff fd91 	bl	8009e5c <_Balloc>
 800a33a:	4605      	mov	r5, r0
 800a33c:	b948      	cbnz	r0, 800a352 <__lshift+0x3e>
 800a33e:	4602      	mov	r2, r0
 800a340:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <__lshift+0xd8>)
 800a342:	482b      	ldr	r0, [pc, #172]	; (800a3f0 <__lshift+0xdc>)
 800a344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a348:	f000 fe80 	bl	800b04c <__assert_func>
 800a34c:	3101      	adds	r1, #1
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	e7ee      	b.n	800a330 <__lshift+0x1c>
 800a352:	2300      	movs	r3, #0
 800a354:	f100 0114 	add.w	r1, r0, #20
 800a358:	f100 0210 	add.w	r2, r0, #16
 800a35c:	4618      	mov	r0, r3
 800a35e:	4553      	cmp	r3, sl
 800a360:	db37      	blt.n	800a3d2 <__lshift+0xbe>
 800a362:	6920      	ldr	r0, [r4, #16]
 800a364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a368:	f104 0314 	add.w	r3, r4, #20
 800a36c:	f019 091f 	ands.w	r9, r9, #31
 800a370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a378:	d02f      	beq.n	800a3da <__lshift+0xc6>
 800a37a:	f1c9 0e20 	rsb	lr, r9, #32
 800a37e:	468a      	mov	sl, r1
 800a380:	f04f 0c00 	mov.w	ip, #0
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	fa02 f209 	lsl.w	r2, r2, r9
 800a38a:	ea42 020c 	orr.w	r2, r2, ip
 800a38e:	f84a 2b04 	str.w	r2, [sl], #4
 800a392:	f853 2b04 	ldr.w	r2, [r3], #4
 800a396:	4298      	cmp	r0, r3
 800a398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a39c:	d8f2      	bhi.n	800a384 <__lshift+0x70>
 800a39e:	1b03      	subs	r3, r0, r4
 800a3a0:	3b15      	subs	r3, #21
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	f104 0215 	add.w	r2, r4, #21
 800a3ac:	4290      	cmp	r0, r2
 800a3ae:	bf38      	it	cc
 800a3b0:	2304      	movcc	r3, #4
 800a3b2:	f841 c003 	str.w	ip, [r1, r3]
 800a3b6:	f1bc 0f00 	cmp.w	ip, #0
 800a3ba:	d001      	beq.n	800a3c0 <__lshift+0xac>
 800a3bc:	f108 0602 	add.w	r6, r8, #2
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	612e      	str	r6, [r5, #16]
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7ff fd88 	bl	8009edc <_Bfree>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	e7c1      	b.n	800a35e <__lshift+0x4a>
 800a3da:	3904      	subs	r1, #4
 800a3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	d8f9      	bhi.n	800a3dc <__lshift+0xc8>
 800a3e8:	e7ea      	b.n	800a3c0 <__lshift+0xac>
 800a3ea:	bf00      	nop
 800a3ec:	0800b5a0 	.word	0x0800b5a0
 800a3f0:	0800b690 	.word	0x0800b690

0800a3f4 <__mcmp>:
 800a3f4:	b530      	push	{r4, r5, lr}
 800a3f6:	6902      	ldr	r2, [r0, #16]
 800a3f8:	690c      	ldr	r4, [r1, #16]
 800a3fa:	1b12      	subs	r2, r2, r4
 800a3fc:	d10e      	bne.n	800a41c <__mcmp+0x28>
 800a3fe:	f100 0314 	add.w	r3, r0, #20
 800a402:	3114      	adds	r1, #20
 800a404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a414:	42a5      	cmp	r5, r4
 800a416:	d003      	beq.n	800a420 <__mcmp+0x2c>
 800a418:	d305      	bcc.n	800a426 <__mcmp+0x32>
 800a41a:	2201      	movs	r2, #1
 800a41c:	4610      	mov	r0, r2
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	4283      	cmp	r3, r0
 800a422:	d3f3      	bcc.n	800a40c <__mcmp+0x18>
 800a424:	e7fa      	b.n	800a41c <__mcmp+0x28>
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	e7f7      	b.n	800a41c <__mcmp+0x28>

0800a42c <__mdiff>:
 800a42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	4606      	mov	r6, r0
 800a434:	4611      	mov	r1, r2
 800a436:	4620      	mov	r0, r4
 800a438:	4690      	mov	r8, r2
 800a43a:	f7ff ffdb 	bl	800a3f4 <__mcmp>
 800a43e:	1e05      	subs	r5, r0, #0
 800a440:	d110      	bne.n	800a464 <__mdiff+0x38>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fd09 	bl	8009e5c <_Balloc>
 800a44a:	b930      	cbnz	r0, 800a45a <__mdiff+0x2e>
 800a44c:	4b3a      	ldr	r3, [pc, #232]	; (800a538 <__mdiff+0x10c>)
 800a44e:	4602      	mov	r2, r0
 800a450:	f240 2132 	movw	r1, #562	; 0x232
 800a454:	4839      	ldr	r0, [pc, #228]	; (800a53c <__mdiff+0x110>)
 800a456:	f000 fdf9 	bl	800b04c <__assert_func>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	bfa4      	itt	ge
 800a466:	4643      	movge	r3, r8
 800a468:	46a0      	movge	r8, r4
 800a46a:	4630      	mov	r0, r6
 800a46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a470:	bfa6      	itte	ge
 800a472:	461c      	movge	r4, r3
 800a474:	2500      	movge	r5, #0
 800a476:	2501      	movlt	r5, #1
 800a478:	f7ff fcf0 	bl	8009e5c <_Balloc>
 800a47c:	b920      	cbnz	r0, 800a488 <__mdiff+0x5c>
 800a47e:	4b2e      	ldr	r3, [pc, #184]	; (800a538 <__mdiff+0x10c>)
 800a480:	4602      	mov	r2, r0
 800a482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a486:	e7e5      	b.n	800a454 <__mdiff+0x28>
 800a488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a48c:	6926      	ldr	r6, [r4, #16]
 800a48e:	60c5      	str	r5, [r0, #12]
 800a490:	f104 0914 	add.w	r9, r4, #20
 800a494:	f108 0514 	add.w	r5, r8, #20
 800a498:	f100 0e14 	add.w	lr, r0, #20
 800a49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4a4:	f108 0210 	add.w	r2, r8, #16
 800a4a8:	46f2      	mov	sl, lr
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4b4:	fa1f f883 	uxth.w	r8, r3
 800a4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	eba1 0808 	sub.w	r8, r1, r8
 800a4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4ca:	fa1f f888 	uxth.w	r8, r8
 800a4ce:	1419      	asrs	r1, r3, #16
 800a4d0:	454e      	cmp	r6, r9
 800a4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a4da:	d8e7      	bhi.n	800a4ac <__mdiff+0x80>
 800a4dc:	1b33      	subs	r3, r6, r4
 800a4de:	3b15      	subs	r3, #21
 800a4e0:	f023 0303 	bic.w	r3, r3, #3
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	3415      	adds	r4, #21
 800a4e8:	42a6      	cmp	r6, r4
 800a4ea:	bf38      	it	cc
 800a4ec:	2304      	movcc	r3, #4
 800a4ee:	441d      	add	r5, r3
 800a4f0:	4473      	add	r3, lr
 800a4f2:	469e      	mov	lr, r3
 800a4f4:	462e      	mov	r6, r5
 800a4f6:	4566      	cmp	r6, ip
 800a4f8:	d30e      	bcc.n	800a518 <__mdiff+0xec>
 800a4fa:	f10c 0203 	add.w	r2, ip, #3
 800a4fe:	1b52      	subs	r2, r2, r5
 800a500:	f022 0203 	bic.w	r2, r2, #3
 800a504:	3d03      	subs	r5, #3
 800a506:	45ac      	cmp	ip, r5
 800a508:	bf38      	it	cc
 800a50a:	2200      	movcc	r2, #0
 800a50c:	441a      	add	r2, r3
 800a50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a512:	b17b      	cbz	r3, 800a534 <__mdiff+0x108>
 800a514:	6107      	str	r7, [r0, #16]
 800a516:	e7a3      	b.n	800a460 <__mdiff+0x34>
 800a518:	f856 8b04 	ldr.w	r8, [r6], #4
 800a51c:	fa11 f288 	uxtah	r2, r1, r8
 800a520:	1414      	asrs	r4, r2, #16
 800a522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a526:	b292      	uxth	r2, r2
 800a528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a52c:	f84e 2b04 	str.w	r2, [lr], #4
 800a530:	1421      	asrs	r1, r4, #16
 800a532:	e7e0      	b.n	800a4f6 <__mdiff+0xca>
 800a534:	3f01      	subs	r7, #1
 800a536:	e7ea      	b.n	800a50e <__mdiff+0xe2>
 800a538:	0800b5a0 	.word	0x0800b5a0
 800a53c:	0800b690 	.word	0x0800b690

0800a540 <__ulp>:
 800a540:	b082      	sub	sp, #8
 800a542:	ed8d 0b00 	vstr	d0, [sp]
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	4912      	ldr	r1, [pc, #72]	; (800a594 <__ulp+0x54>)
 800a54a:	4019      	ands	r1, r3
 800a54c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a550:	2900      	cmp	r1, #0
 800a552:	dd05      	ble.n	800a560 <__ulp+0x20>
 800a554:	2200      	movs	r2, #0
 800a556:	460b      	mov	r3, r1
 800a558:	ec43 2b10 	vmov	d0, r2, r3
 800a55c:	b002      	add	sp, #8
 800a55e:	4770      	bx	lr
 800a560:	4249      	negs	r1, r1
 800a562:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a566:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	f04f 0300 	mov.w	r3, #0
 800a572:	da04      	bge.n	800a57e <__ulp+0x3e>
 800a574:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a578:	fa41 f300 	asr.w	r3, r1, r0
 800a57c:	e7ec      	b.n	800a558 <__ulp+0x18>
 800a57e:	f1a0 0114 	sub.w	r1, r0, #20
 800a582:	291e      	cmp	r1, #30
 800a584:	bfda      	itte	le
 800a586:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a58a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a58e:	2101      	movgt	r1, #1
 800a590:	460a      	mov	r2, r1
 800a592:	e7e1      	b.n	800a558 <__ulp+0x18>
 800a594:	7ff00000 	.word	0x7ff00000

0800a598 <__b2d>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	6905      	ldr	r5, [r0, #16]
 800a59c:	f100 0714 	add.w	r7, r0, #20
 800a5a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a5a4:	1f2e      	subs	r6, r5, #4
 800a5a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff fd48 	bl	800a040 <__hi0bits>
 800a5b0:	f1c0 0320 	rsb	r3, r0, #32
 800a5b4:	280a      	cmp	r0, #10
 800a5b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a634 <__b2d+0x9c>
 800a5ba:	600b      	str	r3, [r1, #0]
 800a5bc:	dc14      	bgt.n	800a5e8 <__b2d+0x50>
 800a5be:	f1c0 0e0b 	rsb	lr, r0, #11
 800a5c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a5c6:	42b7      	cmp	r7, r6
 800a5c8:	ea41 030c 	orr.w	r3, r1, ip
 800a5cc:	bf34      	ite	cc
 800a5ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5d2:	2100      	movcs	r1, #0
 800a5d4:	3015      	adds	r0, #21
 800a5d6:	fa04 f000 	lsl.w	r0, r4, r0
 800a5da:	fa21 f10e 	lsr.w	r1, r1, lr
 800a5de:	ea40 0201 	orr.w	r2, r0, r1
 800a5e2:	ec43 2b10 	vmov	d0, r2, r3
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e8:	42b7      	cmp	r7, r6
 800a5ea:	bf3a      	itte	cc
 800a5ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5f4:	2100      	movcs	r1, #0
 800a5f6:	380b      	subs	r0, #11
 800a5f8:	d017      	beq.n	800a62a <__b2d+0x92>
 800a5fa:	f1c0 0c20 	rsb	ip, r0, #32
 800a5fe:	fa04 f500 	lsl.w	r5, r4, r0
 800a602:	42be      	cmp	r6, r7
 800a604:	fa21 f40c 	lsr.w	r4, r1, ip
 800a608:	ea45 0504 	orr.w	r5, r5, r4
 800a60c:	bf8c      	ite	hi
 800a60e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a612:	2400      	movls	r4, #0
 800a614:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a618:	fa01 f000 	lsl.w	r0, r1, r0
 800a61c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a620:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a624:	ea40 0204 	orr.w	r2, r0, r4
 800a628:	e7db      	b.n	800a5e2 <__b2d+0x4a>
 800a62a:	ea44 030c 	orr.w	r3, r4, ip
 800a62e:	460a      	mov	r2, r1
 800a630:	e7d7      	b.n	800a5e2 <__b2d+0x4a>
 800a632:	bf00      	nop
 800a634:	3ff00000 	.word	0x3ff00000

0800a638 <__d2b>:
 800a638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4689      	mov	r9, r1
 800a63e:	2101      	movs	r1, #1
 800a640:	ec57 6b10 	vmov	r6, r7, d0
 800a644:	4690      	mov	r8, r2
 800a646:	f7ff fc09 	bl	8009e5c <_Balloc>
 800a64a:	4604      	mov	r4, r0
 800a64c:	b930      	cbnz	r0, 800a65c <__d2b+0x24>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b25      	ldr	r3, [pc, #148]	; (800a6e8 <__d2b+0xb0>)
 800a652:	4826      	ldr	r0, [pc, #152]	; (800a6ec <__d2b+0xb4>)
 800a654:	f240 310a 	movw	r1, #778	; 0x30a
 800a658:	f000 fcf8 	bl	800b04c <__assert_func>
 800a65c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a664:	bb35      	cbnz	r5, 800a6b4 <__d2b+0x7c>
 800a666:	2e00      	cmp	r6, #0
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	d028      	beq.n	800a6be <__d2b+0x86>
 800a66c:	4668      	mov	r0, sp
 800a66e:	9600      	str	r6, [sp, #0]
 800a670:	f7ff fd06 	bl	800a080 <__lo0bits>
 800a674:	9900      	ldr	r1, [sp, #0]
 800a676:	b300      	cbz	r0, 800a6ba <__d2b+0x82>
 800a678:	9a01      	ldr	r2, [sp, #4]
 800a67a:	f1c0 0320 	rsb	r3, r0, #32
 800a67e:	fa02 f303 	lsl.w	r3, r2, r3
 800a682:	430b      	orrs	r3, r1
 800a684:	40c2      	lsrs	r2, r0
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	9201      	str	r2, [sp, #4]
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	61a3      	str	r3, [r4, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bf14      	ite	ne
 800a692:	2202      	movne	r2, #2
 800a694:	2201      	moveq	r2, #1
 800a696:	6122      	str	r2, [r4, #16]
 800a698:	b1d5      	cbz	r5, 800a6d0 <__d2b+0x98>
 800a69a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a69e:	4405      	add	r5, r0
 800a6a0:	f8c9 5000 	str.w	r5, [r9]
 800a6a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6a8:	f8c8 0000 	str.w	r0, [r8]
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	b003      	add	sp, #12
 800a6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6b8:	e7d5      	b.n	800a666 <__d2b+0x2e>
 800a6ba:	6161      	str	r1, [r4, #20]
 800a6bc:	e7e5      	b.n	800a68a <__d2b+0x52>
 800a6be:	a801      	add	r0, sp, #4
 800a6c0:	f7ff fcde 	bl	800a080 <__lo0bits>
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6163      	str	r3, [r4, #20]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	6122      	str	r2, [r4, #16]
 800a6cc:	3020      	adds	r0, #32
 800a6ce:	e7e3      	b.n	800a698 <__d2b+0x60>
 800a6d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6d8:	f8c9 0000 	str.w	r0, [r9]
 800a6dc:	6918      	ldr	r0, [r3, #16]
 800a6de:	f7ff fcaf 	bl	800a040 <__hi0bits>
 800a6e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6e6:	e7df      	b.n	800a6a8 <__d2b+0x70>
 800a6e8:	0800b5a0 	.word	0x0800b5a0
 800a6ec:	0800b690 	.word	0x0800b690

0800a6f0 <__ratio>:
 800a6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	4688      	mov	r8, r1
 800a6f6:	4669      	mov	r1, sp
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	f7ff ff4d 	bl	800a598 <__b2d>
 800a6fe:	a901      	add	r1, sp, #4
 800a700:	4640      	mov	r0, r8
 800a702:	ec55 4b10 	vmov	r4, r5, d0
 800a706:	ee10 aa10 	vmov	sl, s0
 800a70a:	f7ff ff45 	bl	800a598 <__b2d>
 800a70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a712:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a716:	1a59      	subs	r1, r3, r1
 800a718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a722:	ec57 6b10 	vmov	r6, r7, d0
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfd6      	itet	le
 800a72a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a72e:	462a      	movgt	r2, r5
 800a730:	463a      	movle	r2, r7
 800a732:	46ab      	mov	fp, r5
 800a734:	bfd6      	itet	le
 800a736:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a73a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a73e:	ee00 3a90 	vmovle	s1, r3
 800a742:	ec4b ab17 	vmov	d7, sl, fp
 800a746:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a74a:	b003      	add	sp, #12
 800a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a750 <__copybits>:
 800a750:	3901      	subs	r1, #1
 800a752:	b570      	push	{r4, r5, r6, lr}
 800a754:	1149      	asrs	r1, r1, #5
 800a756:	6914      	ldr	r4, [r2, #16]
 800a758:	3101      	adds	r1, #1
 800a75a:	f102 0314 	add.w	r3, r2, #20
 800a75e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a762:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a766:	1f05      	subs	r5, r0, #4
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d30c      	bcc.n	800a786 <__copybits+0x36>
 800a76c:	1aa3      	subs	r3, r4, r2
 800a76e:	3b11      	subs	r3, #17
 800a770:	f023 0303 	bic.w	r3, r3, #3
 800a774:	3211      	adds	r2, #17
 800a776:	42a2      	cmp	r2, r4
 800a778:	bf88      	it	hi
 800a77a:	2300      	movhi	r3, #0
 800a77c:	4418      	add	r0, r3
 800a77e:	2300      	movs	r3, #0
 800a780:	4288      	cmp	r0, r1
 800a782:	d305      	bcc.n	800a790 <__copybits+0x40>
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	f853 6b04 	ldr.w	r6, [r3], #4
 800a78a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a78e:	e7eb      	b.n	800a768 <__copybits+0x18>
 800a790:	f840 3b04 	str.w	r3, [r0], #4
 800a794:	e7f4      	b.n	800a780 <__copybits+0x30>

0800a796 <__any_on>:
 800a796:	f100 0214 	add.w	r2, r0, #20
 800a79a:	6900      	ldr	r0, [r0, #16]
 800a79c:	114b      	asrs	r3, r1, #5
 800a79e:	4298      	cmp	r0, r3
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	db11      	blt.n	800a7c8 <__any_on+0x32>
 800a7a4:	dd0a      	ble.n	800a7bc <__any_on+0x26>
 800a7a6:	f011 011f 	ands.w	r1, r1, #31
 800a7aa:	d007      	beq.n	800a7bc <__any_on+0x26>
 800a7ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7b0:	fa24 f001 	lsr.w	r0, r4, r1
 800a7b4:	fa00 f101 	lsl.w	r1, r0, r1
 800a7b8:	428c      	cmp	r4, r1
 800a7ba:	d10b      	bne.n	800a7d4 <__any_on+0x3e>
 800a7bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d803      	bhi.n	800a7cc <__any_on+0x36>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	bd10      	pop	{r4, pc}
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	e7f7      	b.n	800a7bc <__any_on+0x26>
 800a7cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d0f5      	beq.n	800a7c0 <__any_on+0x2a>
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	e7f6      	b.n	800a7c6 <__any_on+0x30>

0800a7d8 <_calloc_r>:
 800a7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7da:	fba1 2402 	umull	r2, r4, r1, r2
 800a7de:	b94c      	cbnz	r4, 800a7f4 <_calloc_r+0x1c>
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	9201      	str	r2, [sp, #4]
 800a7e4:	f000 f87a 	bl	800a8dc <_malloc_r>
 800a7e8:	9a01      	ldr	r2, [sp, #4]
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b930      	cbnz	r0, 800a7fc <_calloc_r+0x24>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	b003      	add	sp, #12
 800a7f2:	bd30      	pop	{r4, r5, pc}
 800a7f4:	220c      	movs	r2, #12
 800a7f6:	6002      	str	r2, [r0, #0]
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	e7f8      	b.n	800a7ee <_calloc_r+0x16>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7fc f967 	bl	8006ad0 <memset>
 800a802:	e7f4      	b.n	800a7ee <_calloc_r+0x16>

0800a804 <_free_r>:
 800a804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a806:	2900      	cmp	r1, #0
 800a808:	d044      	beq.n	800a894 <_free_r+0x90>
 800a80a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80e:	9001      	str	r0, [sp, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	f1a1 0404 	sub.w	r4, r1, #4
 800a816:	bfb8      	it	lt
 800a818:	18e4      	addlt	r4, r4, r3
 800a81a:	f000 fca5 	bl	800b168 <__malloc_lock>
 800a81e:	4a1e      	ldr	r2, [pc, #120]	; (800a898 <_free_r+0x94>)
 800a820:	9801      	ldr	r0, [sp, #4]
 800a822:	6813      	ldr	r3, [r2, #0]
 800a824:	b933      	cbnz	r3, 800a834 <_free_r+0x30>
 800a826:	6063      	str	r3, [r4, #4]
 800a828:	6014      	str	r4, [r2, #0]
 800a82a:	b003      	add	sp, #12
 800a82c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a830:	f000 bca0 	b.w	800b174 <__malloc_unlock>
 800a834:	42a3      	cmp	r3, r4
 800a836:	d908      	bls.n	800a84a <_free_r+0x46>
 800a838:	6825      	ldr	r5, [r4, #0]
 800a83a:	1961      	adds	r1, r4, r5
 800a83c:	428b      	cmp	r3, r1
 800a83e:	bf01      	itttt	eq
 800a840:	6819      	ldreq	r1, [r3, #0]
 800a842:	685b      	ldreq	r3, [r3, #4]
 800a844:	1949      	addeq	r1, r1, r5
 800a846:	6021      	streq	r1, [r4, #0]
 800a848:	e7ed      	b.n	800a826 <_free_r+0x22>
 800a84a:	461a      	mov	r2, r3
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	b10b      	cbz	r3, 800a854 <_free_r+0x50>
 800a850:	42a3      	cmp	r3, r4
 800a852:	d9fa      	bls.n	800a84a <_free_r+0x46>
 800a854:	6811      	ldr	r1, [r2, #0]
 800a856:	1855      	adds	r5, r2, r1
 800a858:	42a5      	cmp	r5, r4
 800a85a:	d10b      	bne.n	800a874 <_free_r+0x70>
 800a85c:	6824      	ldr	r4, [r4, #0]
 800a85e:	4421      	add	r1, r4
 800a860:	1854      	adds	r4, r2, r1
 800a862:	42a3      	cmp	r3, r4
 800a864:	6011      	str	r1, [r2, #0]
 800a866:	d1e0      	bne.n	800a82a <_free_r+0x26>
 800a868:	681c      	ldr	r4, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	6053      	str	r3, [r2, #4]
 800a86e:	4421      	add	r1, r4
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	e7da      	b.n	800a82a <_free_r+0x26>
 800a874:	d902      	bls.n	800a87c <_free_r+0x78>
 800a876:	230c      	movs	r3, #12
 800a878:	6003      	str	r3, [r0, #0]
 800a87a:	e7d6      	b.n	800a82a <_free_r+0x26>
 800a87c:	6825      	ldr	r5, [r4, #0]
 800a87e:	1961      	adds	r1, r4, r5
 800a880:	428b      	cmp	r3, r1
 800a882:	bf04      	itt	eq
 800a884:	6819      	ldreq	r1, [r3, #0]
 800a886:	685b      	ldreq	r3, [r3, #4]
 800a888:	6063      	str	r3, [r4, #4]
 800a88a:	bf04      	itt	eq
 800a88c:	1949      	addeq	r1, r1, r5
 800a88e:	6021      	streq	r1, [r4, #0]
 800a890:	6054      	str	r4, [r2, #4]
 800a892:	e7ca      	b.n	800a82a <_free_r+0x26>
 800a894:	b003      	add	sp, #12
 800a896:	bd30      	pop	{r4, r5, pc}
 800a898:	240003e0 	.word	0x240003e0

0800a89c <sbrk_aligned>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4e0e      	ldr	r6, [pc, #56]	; (800a8d8 <sbrk_aligned+0x3c>)
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	6831      	ldr	r1, [r6, #0]
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	b911      	cbnz	r1, 800a8ae <sbrk_aligned+0x12>
 800a8a8:	f000 fb4a 	bl	800af40 <_sbrk_r>
 800a8ac:	6030      	str	r0, [r6, #0]
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f000 fb45 	bl	800af40 <_sbrk_r>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d00a      	beq.n	800a8d0 <sbrk_aligned+0x34>
 800a8ba:	1cc4      	adds	r4, r0, #3
 800a8bc:	f024 0403 	bic.w	r4, r4, #3
 800a8c0:	42a0      	cmp	r0, r4
 800a8c2:	d007      	beq.n	800a8d4 <sbrk_aligned+0x38>
 800a8c4:	1a21      	subs	r1, r4, r0
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 fb3a 	bl	800af40 <_sbrk_r>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d101      	bne.n	800a8d4 <sbrk_aligned+0x38>
 800a8d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	240003e4 	.word	0x240003e4

0800a8dc <_malloc_r>:
 800a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e0:	1ccd      	adds	r5, r1, #3
 800a8e2:	f025 0503 	bic.w	r5, r5, #3
 800a8e6:	3508      	adds	r5, #8
 800a8e8:	2d0c      	cmp	r5, #12
 800a8ea:	bf38      	it	cc
 800a8ec:	250c      	movcc	r5, #12
 800a8ee:	2d00      	cmp	r5, #0
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	db01      	blt.n	800a8f8 <_malloc_r+0x1c>
 800a8f4:	42a9      	cmp	r1, r5
 800a8f6:	d905      	bls.n	800a904 <_malloc_r+0x28>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	2600      	movs	r6, #0
 800a8fe:	4630      	mov	r0, r6
 800a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a904:	4e2e      	ldr	r6, [pc, #184]	; (800a9c0 <_malloc_r+0xe4>)
 800a906:	f000 fc2f 	bl	800b168 <__malloc_lock>
 800a90a:	6833      	ldr	r3, [r6, #0]
 800a90c:	461c      	mov	r4, r3
 800a90e:	bb34      	cbnz	r4, 800a95e <_malloc_r+0x82>
 800a910:	4629      	mov	r1, r5
 800a912:	4638      	mov	r0, r7
 800a914:	f7ff ffc2 	bl	800a89c <sbrk_aligned>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	4604      	mov	r4, r0
 800a91c:	d14d      	bne.n	800a9ba <_malloc_r+0xde>
 800a91e:	6834      	ldr	r4, [r6, #0]
 800a920:	4626      	mov	r6, r4
 800a922:	2e00      	cmp	r6, #0
 800a924:	d140      	bne.n	800a9a8 <_malloc_r+0xcc>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	4631      	mov	r1, r6
 800a92a:	4638      	mov	r0, r7
 800a92c:	eb04 0803 	add.w	r8, r4, r3
 800a930:	f000 fb06 	bl	800af40 <_sbrk_r>
 800a934:	4580      	cmp	r8, r0
 800a936:	d13a      	bne.n	800a9ae <_malloc_r+0xd2>
 800a938:	6821      	ldr	r1, [r4, #0]
 800a93a:	3503      	adds	r5, #3
 800a93c:	1a6d      	subs	r5, r5, r1
 800a93e:	f025 0503 	bic.w	r5, r5, #3
 800a942:	3508      	adds	r5, #8
 800a944:	2d0c      	cmp	r5, #12
 800a946:	bf38      	it	cc
 800a948:	250c      	movcc	r5, #12
 800a94a:	4629      	mov	r1, r5
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff ffa5 	bl	800a89c <sbrk_aligned>
 800a952:	3001      	adds	r0, #1
 800a954:	d02b      	beq.n	800a9ae <_malloc_r+0xd2>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	442b      	add	r3, r5
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	e00e      	b.n	800a97c <_malloc_r+0xa0>
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	1b52      	subs	r2, r2, r5
 800a962:	d41e      	bmi.n	800a9a2 <_malloc_r+0xc6>
 800a964:	2a0b      	cmp	r2, #11
 800a966:	d916      	bls.n	800a996 <_malloc_r+0xba>
 800a968:	1961      	adds	r1, r4, r5
 800a96a:	42a3      	cmp	r3, r4
 800a96c:	6025      	str	r5, [r4, #0]
 800a96e:	bf18      	it	ne
 800a970:	6059      	strne	r1, [r3, #4]
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	bf08      	it	eq
 800a976:	6031      	streq	r1, [r6, #0]
 800a978:	5162      	str	r2, [r4, r5]
 800a97a:	604b      	str	r3, [r1, #4]
 800a97c:	4638      	mov	r0, r7
 800a97e:	f104 060b 	add.w	r6, r4, #11
 800a982:	f000 fbf7 	bl	800b174 <__malloc_unlock>
 800a986:	f026 0607 	bic.w	r6, r6, #7
 800a98a:	1d23      	adds	r3, r4, #4
 800a98c:	1af2      	subs	r2, r6, r3
 800a98e:	d0b6      	beq.n	800a8fe <_malloc_r+0x22>
 800a990:	1b9b      	subs	r3, r3, r6
 800a992:	50a3      	str	r3, [r4, r2]
 800a994:	e7b3      	b.n	800a8fe <_malloc_r+0x22>
 800a996:	6862      	ldr	r2, [r4, #4]
 800a998:	42a3      	cmp	r3, r4
 800a99a:	bf0c      	ite	eq
 800a99c:	6032      	streq	r2, [r6, #0]
 800a99e:	605a      	strne	r2, [r3, #4]
 800a9a0:	e7ec      	b.n	800a97c <_malloc_r+0xa0>
 800a9a2:	4623      	mov	r3, r4
 800a9a4:	6864      	ldr	r4, [r4, #4]
 800a9a6:	e7b2      	b.n	800a90e <_malloc_r+0x32>
 800a9a8:	4634      	mov	r4, r6
 800a9aa:	6876      	ldr	r6, [r6, #4]
 800a9ac:	e7b9      	b.n	800a922 <_malloc_r+0x46>
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	603b      	str	r3, [r7, #0]
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f000 fbde 	bl	800b174 <__malloc_unlock>
 800a9b8:	e7a1      	b.n	800a8fe <_malloc_r+0x22>
 800a9ba:	6025      	str	r5, [r4, #0]
 800a9bc:	e7de      	b.n	800a97c <_malloc_r+0xa0>
 800a9be:	bf00      	nop
 800a9c0:	240003e0 	.word	0x240003e0

0800a9c4 <__ssputs_r>:
 800a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	688e      	ldr	r6, [r1, #8]
 800a9ca:	429e      	cmp	r6, r3
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	4690      	mov	r8, r2
 800a9d2:	461f      	mov	r7, r3
 800a9d4:	d838      	bhi.n	800aa48 <__ssputs_r+0x84>
 800a9d6:	898a      	ldrh	r2, [r1, #12]
 800a9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9dc:	d032      	beq.n	800aa44 <__ssputs_r+0x80>
 800a9de:	6825      	ldr	r5, [r4, #0]
 800a9e0:	6909      	ldr	r1, [r1, #16]
 800a9e2:	eba5 0901 	sub.w	r9, r5, r1
 800a9e6:	6965      	ldr	r5, [r4, #20]
 800a9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	444b      	add	r3, r9
 800a9f4:	106d      	asrs	r5, r5, #1
 800a9f6:	429d      	cmp	r5, r3
 800a9f8:	bf38      	it	cc
 800a9fa:	461d      	movcc	r5, r3
 800a9fc:	0553      	lsls	r3, r2, #21
 800a9fe:	d531      	bpl.n	800aa64 <__ssputs_r+0xa0>
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7ff ff6b 	bl	800a8dc <_malloc_r>
 800aa06:	4606      	mov	r6, r0
 800aa08:	b950      	cbnz	r0, 800aa20 <__ssputs_r+0x5c>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	f8ca 3000 	str.w	r3, [sl]
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa16:	81a3      	strh	r3, [r4, #12]
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	6921      	ldr	r1, [r4, #16]
 800aa22:	464a      	mov	r2, r9
 800aa24:	f7fc f846 	bl	8006ab4 <memcpy>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	6126      	str	r6, [r4, #16]
 800aa36:	6165      	str	r5, [r4, #20]
 800aa38:	444e      	add	r6, r9
 800aa3a:	eba5 0509 	sub.w	r5, r5, r9
 800aa3e:	6026      	str	r6, [r4, #0]
 800aa40:	60a5      	str	r5, [r4, #8]
 800aa42:	463e      	mov	r6, r7
 800aa44:	42be      	cmp	r6, r7
 800aa46:	d900      	bls.n	800aa4a <__ssputs_r+0x86>
 800aa48:	463e      	mov	r6, r7
 800aa4a:	6820      	ldr	r0, [r4, #0]
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	4641      	mov	r1, r8
 800aa50:	f000 fb70 	bl	800b134 <memmove>
 800aa54:	68a3      	ldr	r3, [r4, #8]
 800aa56:	1b9b      	subs	r3, r3, r6
 800aa58:	60a3      	str	r3, [r4, #8]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	4433      	add	r3, r6
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	2000      	movs	r0, #0
 800aa62:	e7db      	b.n	800aa1c <__ssputs_r+0x58>
 800aa64:	462a      	mov	r2, r5
 800aa66:	f000 fb8b 	bl	800b180 <_realloc_r>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1e1      	bne.n	800aa34 <__ssputs_r+0x70>
 800aa70:	6921      	ldr	r1, [r4, #16]
 800aa72:	4650      	mov	r0, sl
 800aa74:	f7ff fec6 	bl	800a804 <_free_r>
 800aa78:	e7c7      	b.n	800aa0a <__ssputs_r+0x46>
	...

0800aa7c <_svfiprintf_r>:
 800aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	4698      	mov	r8, r3
 800aa82:	898b      	ldrh	r3, [r1, #12]
 800aa84:	061b      	lsls	r3, r3, #24
 800aa86:	b09d      	sub	sp, #116	; 0x74
 800aa88:	4607      	mov	r7, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	4614      	mov	r4, r2
 800aa8e:	d50e      	bpl.n	800aaae <_svfiprintf_r+0x32>
 800aa90:	690b      	ldr	r3, [r1, #16]
 800aa92:	b963      	cbnz	r3, 800aaae <_svfiprintf_r+0x32>
 800aa94:	2140      	movs	r1, #64	; 0x40
 800aa96:	f7ff ff21 	bl	800a8dc <_malloc_r>
 800aa9a:	6028      	str	r0, [r5, #0]
 800aa9c:	6128      	str	r0, [r5, #16]
 800aa9e:	b920      	cbnz	r0, 800aaaa <_svfiprintf_r+0x2e>
 800aaa0:	230c      	movs	r3, #12
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	e0d1      	b.n	800ac4e <_svfiprintf_r+0x1d2>
 800aaaa:	2340      	movs	r3, #64	; 0x40
 800aaac:	616b      	str	r3, [r5, #20]
 800aaae:	2300      	movs	r3, #0
 800aab0:	9309      	str	r3, [sp, #36]	; 0x24
 800aab2:	2320      	movs	r3, #32
 800aab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aabc:	2330      	movs	r3, #48	; 0x30
 800aabe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac68 <_svfiprintf_r+0x1ec>
 800aac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aac6:	f04f 0901 	mov.w	r9, #1
 800aaca:	4623      	mov	r3, r4
 800aacc:	469a      	mov	sl, r3
 800aace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad2:	b10a      	cbz	r2, 800aad8 <_svfiprintf_r+0x5c>
 800aad4:	2a25      	cmp	r2, #37	; 0x25
 800aad6:	d1f9      	bne.n	800aacc <_svfiprintf_r+0x50>
 800aad8:	ebba 0b04 	subs.w	fp, sl, r4
 800aadc:	d00b      	beq.n	800aaf6 <_svfiprintf_r+0x7a>
 800aade:	465b      	mov	r3, fp
 800aae0:	4622      	mov	r2, r4
 800aae2:	4629      	mov	r1, r5
 800aae4:	4638      	mov	r0, r7
 800aae6:	f7ff ff6d 	bl	800a9c4 <__ssputs_r>
 800aaea:	3001      	adds	r0, #1
 800aaec:	f000 80aa 	beq.w	800ac44 <_svfiprintf_r+0x1c8>
 800aaf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaf2:	445a      	add	r2, fp
 800aaf4:	9209      	str	r2, [sp, #36]	; 0x24
 800aaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 80a2 	beq.w	800ac44 <_svfiprintf_r+0x1c8>
 800ab00:	2300      	movs	r3, #0
 800ab02:	f04f 32ff 	mov.w	r2, #4294967295
 800ab06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab0a:	f10a 0a01 	add.w	sl, sl, #1
 800ab0e:	9304      	str	r3, [sp, #16]
 800ab10:	9307      	str	r3, [sp, #28]
 800ab12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab16:	931a      	str	r3, [sp, #104]	; 0x68
 800ab18:	4654      	mov	r4, sl
 800ab1a:	2205      	movs	r2, #5
 800ab1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab20:	4851      	ldr	r0, [pc, #324]	; (800ac68 <_svfiprintf_r+0x1ec>)
 800ab22:	f7f5 fbe5 	bl	80002f0 <memchr>
 800ab26:	9a04      	ldr	r2, [sp, #16]
 800ab28:	b9d8      	cbnz	r0, 800ab62 <_svfiprintf_r+0xe6>
 800ab2a:	06d0      	lsls	r0, r2, #27
 800ab2c:	bf44      	itt	mi
 800ab2e:	2320      	movmi	r3, #32
 800ab30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab34:	0711      	lsls	r1, r2, #28
 800ab36:	bf44      	itt	mi
 800ab38:	232b      	movmi	r3, #43	; 0x2b
 800ab3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab42:	2b2a      	cmp	r3, #42	; 0x2a
 800ab44:	d015      	beq.n	800ab72 <_svfiprintf_r+0xf6>
 800ab46:	9a07      	ldr	r2, [sp, #28]
 800ab48:	4654      	mov	r4, sl
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f04f 0c0a 	mov.w	ip, #10
 800ab50:	4621      	mov	r1, r4
 800ab52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab56:	3b30      	subs	r3, #48	; 0x30
 800ab58:	2b09      	cmp	r3, #9
 800ab5a:	d94e      	bls.n	800abfa <_svfiprintf_r+0x17e>
 800ab5c:	b1b0      	cbz	r0, 800ab8c <_svfiprintf_r+0x110>
 800ab5e:	9207      	str	r2, [sp, #28]
 800ab60:	e014      	b.n	800ab8c <_svfiprintf_r+0x110>
 800ab62:	eba0 0308 	sub.w	r3, r0, r8
 800ab66:	fa09 f303 	lsl.w	r3, r9, r3
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	46a2      	mov	sl, r4
 800ab70:	e7d2      	b.n	800ab18 <_svfiprintf_r+0x9c>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	1d19      	adds	r1, r3, #4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	9103      	str	r1, [sp, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	bfbb      	ittet	lt
 800ab7e:	425b      	neglt	r3, r3
 800ab80:	f042 0202 	orrlt.w	r2, r2, #2
 800ab84:	9307      	strge	r3, [sp, #28]
 800ab86:	9307      	strlt	r3, [sp, #28]
 800ab88:	bfb8      	it	lt
 800ab8a:	9204      	strlt	r2, [sp, #16]
 800ab8c:	7823      	ldrb	r3, [r4, #0]
 800ab8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab90:	d10c      	bne.n	800abac <_svfiprintf_r+0x130>
 800ab92:	7863      	ldrb	r3, [r4, #1]
 800ab94:	2b2a      	cmp	r3, #42	; 0x2a
 800ab96:	d135      	bne.n	800ac04 <_svfiprintf_r+0x188>
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	1d1a      	adds	r2, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	9203      	str	r2, [sp, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfb8      	it	lt
 800aba4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aba8:	3402      	adds	r4, #2
 800abaa:	9305      	str	r3, [sp, #20]
 800abac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac78 <_svfiprintf_r+0x1fc>
 800abb0:	7821      	ldrb	r1, [r4, #0]
 800abb2:	2203      	movs	r2, #3
 800abb4:	4650      	mov	r0, sl
 800abb6:	f7f5 fb9b 	bl	80002f0 <memchr>
 800abba:	b140      	cbz	r0, 800abce <_svfiprintf_r+0x152>
 800abbc:	2340      	movs	r3, #64	; 0x40
 800abbe:	eba0 000a 	sub.w	r0, r0, sl
 800abc2:	fa03 f000 	lsl.w	r0, r3, r0
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	4303      	orrs	r3, r0
 800abca:	3401      	adds	r4, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd2:	4826      	ldr	r0, [pc, #152]	; (800ac6c <_svfiprintf_r+0x1f0>)
 800abd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abd8:	2206      	movs	r2, #6
 800abda:	f7f5 fb89 	bl	80002f0 <memchr>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d038      	beq.n	800ac54 <_svfiprintf_r+0x1d8>
 800abe2:	4b23      	ldr	r3, [pc, #140]	; (800ac70 <_svfiprintf_r+0x1f4>)
 800abe4:	bb1b      	cbnz	r3, 800ac2e <_svfiprintf_r+0x1b2>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	3307      	adds	r3, #7
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	3308      	adds	r3, #8
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf4:	4433      	add	r3, r6
 800abf6:	9309      	str	r3, [sp, #36]	; 0x24
 800abf8:	e767      	b.n	800aaca <_svfiprintf_r+0x4e>
 800abfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800abfe:	460c      	mov	r4, r1
 800ac00:	2001      	movs	r0, #1
 800ac02:	e7a5      	b.n	800ab50 <_svfiprintf_r+0xd4>
 800ac04:	2300      	movs	r3, #0
 800ac06:	3401      	adds	r4, #1
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	f04f 0c0a 	mov.w	ip, #10
 800ac10:	4620      	mov	r0, r4
 800ac12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac16:	3a30      	subs	r2, #48	; 0x30
 800ac18:	2a09      	cmp	r2, #9
 800ac1a:	d903      	bls.n	800ac24 <_svfiprintf_r+0x1a8>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0c5      	beq.n	800abac <_svfiprintf_r+0x130>
 800ac20:	9105      	str	r1, [sp, #20]
 800ac22:	e7c3      	b.n	800abac <_svfiprintf_r+0x130>
 800ac24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac28:	4604      	mov	r4, r0
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e7f0      	b.n	800ac10 <_svfiprintf_r+0x194>
 800ac2e:	ab03      	add	r3, sp, #12
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	462a      	mov	r2, r5
 800ac34:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <_svfiprintf_r+0x1f8>)
 800ac36:	a904      	add	r1, sp, #16
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f7fb ffe1 	bl	8006c00 <_printf_float>
 800ac3e:	1c42      	adds	r2, r0, #1
 800ac40:	4606      	mov	r6, r0
 800ac42:	d1d6      	bne.n	800abf2 <_svfiprintf_r+0x176>
 800ac44:	89ab      	ldrh	r3, [r5, #12]
 800ac46:	065b      	lsls	r3, r3, #25
 800ac48:	f53f af2c 	bmi.w	800aaa4 <_svfiprintf_r+0x28>
 800ac4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac4e:	b01d      	add	sp, #116	; 0x74
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	ab03      	add	r3, sp, #12
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <_svfiprintf_r+0x1f8>)
 800ac5c:	a904      	add	r1, sp, #16
 800ac5e:	4638      	mov	r0, r7
 800ac60:	f7fc fa5a 	bl	8007118 <_printf_i>
 800ac64:	e7eb      	b.n	800ac3e <_svfiprintf_r+0x1c2>
 800ac66:	bf00      	nop
 800ac68:	0800b7ec 	.word	0x0800b7ec
 800ac6c:	0800b7f6 	.word	0x0800b7f6
 800ac70:	08006c01 	.word	0x08006c01
 800ac74:	0800a9c5 	.word	0x0800a9c5
 800ac78:	0800b7f2 	.word	0x0800b7f2

0800ac7c <__sfputc_r>:
 800ac7c:	6893      	ldr	r3, [r2, #8]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	b410      	push	{r4}
 800ac84:	6093      	str	r3, [r2, #8]
 800ac86:	da08      	bge.n	800ac9a <__sfputc_r+0x1e>
 800ac88:	6994      	ldr	r4, [r2, #24]
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	db01      	blt.n	800ac92 <__sfputc_r+0x16>
 800ac8e:	290a      	cmp	r1, #10
 800ac90:	d103      	bne.n	800ac9a <__sfputc_r+0x1e>
 800ac92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac96:	f7fd bc7b 	b.w	8008590 <__swbuf_r>
 800ac9a:	6813      	ldr	r3, [r2, #0]
 800ac9c:	1c58      	adds	r0, r3, #1
 800ac9e:	6010      	str	r0, [r2, #0]
 800aca0:	7019      	strb	r1, [r3, #0]
 800aca2:	4608      	mov	r0, r1
 800aca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <__sfputs_r>:
 800acaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	18d5      	adds	r5, r2, r3
 800acb4:	42ac      	cmp	r4, r5
 800acb6:	d101      	bne.n	800acbc <__sfputs_r+0x12>
 800acb8:	2000      	movs	r0, #0
 800acba:	e007      	b.n	800accc <__sfputs_r+0x22>
 800acbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc0:	463a      	mov	r2, r7
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7ff ffda 	bl	800ac7c <__sfputc_r>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d1f3      	bne.n	800acb4 <__sfputs_r+0xa>
 800accc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd0 <_vfiprintf_r>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	460d      	mov	r5, r1
 800acd6:	b09d      	sub	sp, #116	; 0x74
 800acd8:	4614      	mov	r4, r2
 800acda:	4698      	mov	r8, r3
 800acdc:	4606      	mov	r6, r0
 800acde:	b118      	cbz	r0, 800ace8 <_vfiprintf_r+0x18>
 800ace0:	6983      	ldr	r3, [r0, #24]
 800ace2:	b90b      	cbnz	r3, 800ace8 <_vfiprintf_r+0x18>
 800ace4:	f7fe fc28 	bl	8009538 <__sinit>
 800ace8:	4b89      	ldr	r3, [pc, #548]	; (800af10 <_vfiprintf_r+0x240>)
 800acea:	429d      	cmp	r5, r3
 800acec:	d11b      	bne.n	800ad26 <_vfiprintf_r+0x56>
 800acee:	6875      	ldr	r5, [r6, #4]
 800acf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acf2:	07d9      	lsls	r1, r3, #31
 800acf4:	d405      	bmi.n	800ad02 <_vfiprintf_r+0x32>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	059a      	lsls	r2, r3, #22
 800acfa:	d402      	bmi.n	800ad02 <_vfiprintf_r+0x32>
 800acfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acfe:	f7ff f82c 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800ad02:	89ab      	ldrh	r3, [r5, #12]
 800ad04:	071b      	lsls	r3, r3, #28
 800ad06:	d501      	bpl.n	800ad0c <_vfiprintf_r+0x3c>
 800ad08:	692b      	ldr	r3, [r5, #16]
 800ad0a:	b9eb      	cbnz	r3, 800ad48 <_vfiprintf_r+0x78>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7fd fc90 	bl	8008634 <__swsetup_r>
 800ad14:	b1c0      	cbz	r0, 800ad48 <_vfiprintf_r+0x78>
 800ad16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad18:	07dc      	lsls	r4, r3, #31
 800ad1a:	d50e      	bpl.n	800ad3a <_vfiprintf_r+0x6a>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	b01d      	add	sp, #116	; 0x74
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	4b7b      	ldr	r3, [pc, #492]	; (800af14 <_vfiprintf_r+0x244>)
 800ad28:	429d      	cmp	r5, r3
 800ad2a:	d101      	bne.n	800ad30 <_vfiprintf_r+0x60>
 800ad2c:	68b5      	ldr	r5, [r6, #8]
 800ad2e:	e7df      	b.n	800acf0 <_vfiprintf_r+0x20>
 800ad30:	4b79      	ldr	r3, [pc, #484]	; (800af18 <_vfiprintf_r+0x248>)
 800ad32:	429d      	cmp	r5, r3
 800ad34:	bf08      	it	eq
 800ad36:	68f5      	ldreq	r5, [r6, #12]
 800ad38:	e7da      	b.n	800acf0 <_vfiprintf_r+0x20>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	0598      	lsls	r0, r3, #22
 800ad3e:	d4ed      	bmi.n	800ad1c <_vfiprintf_r+0x4c>
 800ad40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad42:	f7ff f80b 	bl	8009d5c <__retarget_lock_release_recursive>
 800ad46:	e7e9      	b.n	800ad1c <_vfiprintf_r+0x4c>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad52:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad56:	2330      	movs	r3, #48	; 0x30
 800ad58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af1c <_vfiprintf_r+0x24c>
 800ad5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad60:	f04f 0901 	mov.w	r9, #1
 800ad64:	4623      	mov	r3, r4
 800ad66:	469a      	mov	sl, r3
 800ad68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad6c:	b10a      	cbz	r2, 800ad72 <_vfiprintf_r+0xa2>
 800ad6e:	2a25      	cmp	r2, #37	; 0x25
 800ad70:	d1f9      	bne.n	800ad66 <_vfiprintf_r+0x96>
 800ad72:	ebba 0b04 	subs.w	fp, sl, r4
 800ad76:	d00b      	beq.n	800ad90 <_vfiprintf_r+0xc0>
 800ad78:	465b      	mov	r3, fp
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff ff93 	bl	800acaa <__sfputs_r>
 800ad84:	3001      	adds	r0, #1
 800ad86:	f000 80aa 	beq.w	800aede <_vfiprintf_r+0x20e>
 800ad8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad8c:	445a      	add	r2, fp
 800ad8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad90:	f89a 3000 	ldrb.w	r3, [sl]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 80a2 	beq.w	800aede <_vfiprintf_r+0x20e>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f04f 32ff 	mov.w	r2, #4294967295
 800ada0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada4:	f10a 0a01 	add.w	sl, sl, #1
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	9307      	str	r3, [sp, #28]
 800adac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb0:	931a      	str	r3, [sp, #104]	; 0x68
 800adb2:	4654      	mov	r4, sl
 800adb4:	2205      	movs	r2, #5
 800adb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adba:	4858      	ldr	r0, [pc, #352]	; (800af1c <_vfiprintf_r+0x24c>)
 800adbc:	f7f5 fa98 	bl	80002f0 <memchr>
 800adc0:	9a04      	ldr	r2, [sp, #16]
 800adc2:	b9d8      	cbnz	r0, 800adfc <_vfiprintf_r+0x12c>
 800adc4:	06d1      	lsls	r1, r2, #27
 800adc6:	bf44      	itt	mi
 800adc8:	2320      	movmi	r3, #32
 800adca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adce:	0713      	lsls	r3, r2, #28
 800add0:	bf44      	itt	mi
 800add2:	232b      	movmi	r3, #43	; 0x2b
 800add4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add8:	f89a 3000 	ldrb.w	r3, [sl]
 800addc:	2b2a      	cmp	r3, #42	; 0x2a
 800adde:	d015      	beq.n	800ae0c <_vfiprintf_r+0x13c>
 800ade0:	9a07      	ldr	r2, [sp, #28]
 800ade2:	4654      	mov	r4, sl
 800ade4:	2000      	movs	r0, #0
 800ade6:	f04f 0c0a 	mov.w	ip, #10
 800adea:	4621      	mov	r1, r4
 800adec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf0:	3b30      	subs	r3, #48	; 0x30
 800adf2:	2b09      	cmp	r3, #9
 800adf4:	d94e      	bls.n	800ae94 <_vfiprintf_r+0x1c4>
 800adf6:	b1b0      	cbz	r0, 800ae26 <_vfiprintf_r+0x156>
 800adf8:	9207      	str	r2, [sp, #28]
 800adfa:	e014      	b.n	800ae26 <_vfiprintf_r+0x156>
 800adfc:	eba0 0308 	sub.w	r3, r0, r8
 800ae00:	fa09 f303 	lsl.w	r3, r9, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	9304      	str	r3, [sp, #16]
 800ae08:	46a2      	mov	sl, r4
 800ae0a:	e7d2      	b.n	800adb2 <_vfiprintf_r+0xe2>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	1d19      	adds	r1, r3, #4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	9103      	str	r1, [sp, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bfbb      	ittet	lt
 800ae18:	425b      	neglt	r3, r3
 800ae1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae1e:	9307      	strge	r3, [sp, #28]
 800ae20:	9307      	strlt	r3, [sp, #28]
 800ae22:	bfb8      	it	lt
 800ae24:	9204      	strlt	r2, [sp, #16]
 800ae26:	7823      	ldrb	r3, [r4, #0]
 800ae28:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2a:	d10c      	bne.n	800ae46 <_vfiprintf_r+0x176>
 800ae2c:	7863      	ldrb	r3, [r4, #1]
 800ae2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae30:	d135      	bne.n	800ae9e <_vfiprintf_r+0x1ce>
 800ae32:	9b03      	ldr	r3, [sp, #12]
 800ae34:	1d1a      	adds	r2, r3, #4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	9203      	str	r2, [sp, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	bfb8      	it	lt
 800ae3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae42:	3402      	adds	r4, #2
 800ae44:	9305      	str	r3, [sp, #20]
 800ae46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af2c <_vfiprintf_r+0x25c>
 800ae4a:	7821      	ldrb	r1, [r4, #0]
 800ae4c:	2203      	movs	r2, #3
 800ae4e:	4650      	mov	r0, sl
 800ae50:	f7f5 fa4e 	bl	80002f0 <memchr>
 800ae54:	b140      	cbz	r0, 800ae68 <_vfiprintf_r+0x198>
 800ae56:	2340      	movs	r3, #64	; 0x40
 800ae58:	eba0 000a 	sub.w	r0, r0, sl
 800ae5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	4303      	orrs	r3, r0
 800ae64:	3401      	adds	r4, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6c:	482c      	ldr	r0, [pc, #176]	; (800af20 <_vfiprintf_r+0x250>)
 800ae6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae72:	2206      	movs	r2, #6
 800ae74:	f7f5 fa3c 	bl	80002f0 <memchr>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d03f      	beq.n	800aefc <_vfiprintf_r+0x22c>
 800ae7c:	4b29      	ldr	r3, [pc, #164]	; (800af24 <_vfiprintf_r+0x254>)
 800ae7e:	bb1b      	cbnz	r3, 800aec8 <_vfiprintf_r+0x1f8>
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	3307      	adds	r3, #7
 800ae84:	f023 0307 	bic.w	r3, r3, #7
 800ae88:	3308      	adds	r3, #8
 800ae8a:	9303      	str	r3, [sp, #12]
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	443b      	add	r3, r7
 800ae90:	9309      	str	r3, [sp, #36]	; 0x24
 800ae92:	e767      	b.n	800ad64 <_vfiprintf_r+0x94>
 800ae94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae98:	460c      	mov	r4, r1
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	e7a5      	b.n	800adea <_vfiprintf_r+0x11a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	3401      	adds	r4, #1
 800aea2:	9305      	str	r3, [sp, #20]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f04f 0c0a 	mov.w	ip, #10
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb0:	3a30      	subs	r2, #48	; 0x30
 800aeb2:	2a09      	cmp	r2, #9
 800aeb4:	d903      	bls.n	800aebe <_vfiprintf_r+0x1ee>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0c5      	beq.n	800ae46 <_vfiprintf_r+0x176>
 800aeba:	9105      	str	r1, [sp, #20]
 800aebc:	e7c3      	b.n	800ae46 <_vfiprintf_r+0x176>
 800aebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800aec2:	4604      	mov	r4, r0
 800aec4:	2301      	movs	r3, #1
 800aec6:	e7f0      	b.n	800aeaa <_vfiprintf_r+0x1da>
 800aec8:	ab03      	add	r3, sp, #12
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	462a      	mov	r2, r5
 800aece:	4b16      	ldr	r3, [pc, #88]	; (800af28 <_vfiprintf_r+0x258>)
 800aed0:	a904      	add	r1, sp, #16
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7fb fe94 	bl	8006c00 <_printf_float>
 800aed8:	4607      	mov	r7, r0
 800aeda:	1c78      	adds	r0, r7, #1
 800aedc:	d1d6      	bne.n	800ae8c <_vfiprintf_r+0x1bc>
 800aede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee0:	07d9      	lsls	r1, r3, #31
 800aee2:	d405      	bmi.n	800aef0 <_vfiprintf_r+0x220>
 800aee4:	89ab      	ldrh	r3, [r5, #12]
 800aee6:	059a      	lsls	r2, r3, #22
 800aee8:	d402      	bmi.n	800aef0 <_vfiprintf_r+0x220>
 800aeea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeec:	f7fe ff36 	bl	8009d5c <__retarget_lock_release_recursive>
 800aef0:	89ab      	ldrh	r3, [r5, #12]
 800aef2:	065b      	lsls	r3, r3, #25
 800aef4:	f53f af12 	bmi.w	800ad1c <_vfiprintf_r+0x4c>
 800aef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefa:	e711      	b.n	800ad20 <_vfiprintf_r+0x50>
 800aefc:	ab03      	add	r3, sp, #12
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	462a      	mov	r2, r5
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <_vfiprintf_r+0x258>)
 800af04:	a904      	add	r1, sp, #16
 800af06:	4630      	mov	r0, r6
 800af08:	f7fc f906 	bl	8007118 <_printf_i>
 800af0c:	e7e4      	b.n	800aed8 <_vfiprintf_r+0x208>
 800af0e:	bf00      	nop
 800af10:	0800b5d4 	.word	0x0800b5d4
 800af14:	0800b5f4 	.word	0x0800b5f4
 800af18:	0800b5b4 	.word	0x0800b5b4
 800af1c:	0800b7ec 	.word	0x0800b7ec
 800af20:	0800b7f6 	.word	0x0800b7f6
 800af24:	08006c01 	.word	0x08006c01
 800af28:	0800acab 	.word	0x0800acab
 800af2c:	0800b7f2 	.word	0x0800b7f2

0800af30 <nan>:
 800af30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af38 <nan+0x8>
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	00000000 	.word	0x00000000
 800af3c:	7ff80000 	.word	0x7ff80000

0800af40 <_sbrk_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d06      	ldr	r5, [pc, #24]	; (800af5c <_sbrk_r+0x1c>)
 800af44:	2300      	movs	r3, #0
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	f7f6 fba0 	bl	8001690 <_sbrk>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_sbrk_r+0x1a>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_sbrk_r+0x1a>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	240003e8 	.word	0x240003e8

0800af60 <__sread>:
 800af60:	b510      	push	{r4, lr}
 800af62:	460c      	mov	r4, r1
 800af64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af68:	f000 f93a 	bl	800b1e0 <_read_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	bfab      	itete	ge
 800af70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af72:	89a3      	ldrhlt	r3, [r4, #12]
 800af74:	181b      	addge	r3, r3, r0
 800af76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af7a:	bfac      	ite	ge
 800af7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af7e:	81a3      	strhlt	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__swrite>:
 800af82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	461f      	mov	r7, r3
 800af88:	898b      	ldrh	r3, [r1, #12]
 800af8a:	05db      	lsls	r3, r3, #23
 800af8c:	4605      	mov	r5, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	4616      	mov	r6, r2
 800af92:	d505      	bpl.n	800afa0 <__swrite+0x1e>
 800af94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af98:	2302      	movs	r3, #2
 800af9a:	2200      	movs	r2, #0
 800af9c:	f000 f8b8 	bl	800b110 <_lseek_r>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	4628      	mov	r0, r5
 800afb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	f000 b837 	b.w	800b028 <_write_r>

0800afba <__sseek>:
 800afba:	b510      	push	{r4, lr}
 800afbc:	460c      	mov	r4, r1
 800afbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc2:	f000 f8a5 	bl	800b110 <_lseek_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	bf15      	itete	ne
 800afcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800afce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afd6:	81a3      	strheq	r3, [r4, #12]
 800afd8:	bf18      	it	ne
 800afda:	81a3      	strhne	r3, [r4, #12]
 800afdc:	bd10      	pop	{r4, pc}

0800afde <__sclose>:
 800afde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe2:	f000 b851 	b.w	800b088 <_close_r>

0800afe6 <strncmp>:
 800afe6:	b510      	push	{r4, lr}
 800afe8:	b17a      	cbz	r2, 800b00a <strncmp+0x24>
 800afea:	4603      	mov	r3, r0
 800afec:	3901      	subs	r1, #1
 800afee:	1884      	adds	r4, r0, r2
 800aff0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aff4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aff8:	4290      	cmp	r0, r2
 800affa:	d101      	bne.n	800b000 <strncmp+0x1a>
 800affc:	42a3      	cmp	r3, r4
 800affe:	d101      	bne.n	800b004 <strncmp+0x1e>
 800b000:	1a80      	subs	r0, r0, r2
 800b002:	bd10      	pop	{r4, pc}
 800b004:	2800      	cmp	r0, #0
 800b006:	d1f3      	bne.n	800aff0 <strncmp+0xa>
 800b008:	e7fa      	b.n	800b000 <strncmp+0x1a>
 800b00a:	4610      	mov	r0, r2
 800b00c:	e7f9      	b.n	800b002 <strncmp+0x1c>

0800b00e <__ascii_wctomb>:
 800b00e:	b149      	cbz	r1, 800b024 <__ascii_wctomb+0x16>
 800b010:	2aff      	cmp	r2, #255	; 0xff
 800b012:	bf85      	ittet	hi
 800b014:	238a      	movhi	r3, #138	; 0x8a
 800b016:	6003      	strhi	r3, [r0, #0]
 800b018:	700a      	strbls	r2, [r1, #0]
 800b01a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b01e:	bf98      	it	ls
 800b020:	2001      	movls	r0, #1
 800b022:	4770      	bx	lr
 800b024:	4608      	mov	r0, r1
 800b026:	4770      	bx	lr

0800b028 <_write_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	; (800b048 <_write_r+0x20>)
 800b02c:	4604      	mov	r4, r0
 800b02e:	4608      	mov	r0, r1
 800b030:	4611      	mov	r1, r2
 800b032:	2200      	movs	r2, #0
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7f6 fad9 	bl	80015ee <_write>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_write_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_write_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	240003e8 	.word	0x240003e8

0800b04c <__assert_func>:
 800b04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b04e:	4614      	mov	r4, r2
 800b050:	461a      	mov	r2, r3
 800b052:	4b09      	ldr	r3, [pc, #36]	; (800b078 <__assert_func+0x2c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4605      	mov	r5, r0
 800b058:	68d8      	ldr	r0, [r3, #12]
 800b05a:	b14c      	cbz	r4, 800b070 <__assert_func+0x24>
 800b05c:	4b07      	ldr	r3, [pc, #28]	; (800b07c <__assert_func+0x30>)
 800b05e:	9100      	str	r1, [sp, #0]
 800b060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b064:	4906      	ldr	r1, [pc, #24]	; (800b080 <__assert_func+0x34>)
 800b066:	462b      	mov	r3, r5
 800b068:	f000 f81e 	bl	800b0a8 <fiprintf>
 800b06c:	f000 f8ca 	bl	800b204 <abort>
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <__assert_func+0x38>)
 800b072:	461c      	mov	r4, r3
 800b074:	e7f3      	b.n	800b05e <__assert_func+0x12>
 800b076:	bf00      	nop
 800b078:	24000010 	.word	0x24000010
 800b07c:	0800b7fd 	.word	0x0800b7fd
 800b080:	0800b80a 	.word	0x0800b80a
 800b084:	0800b838 	.word	0x0800b838

0800b088 <_close_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d06      	ldr	r5, [pc, #24]	; (800b0a4 <_close_r+0x1c>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f7f6 fac7 	bl	8001626 <_close>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_close_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_close_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	240003e8 	.word	0x240003e8

0800b0a8 <fiprintf>:
 800b0a8:	b40e      	push	{r1, r2, r3}
 800b0aa:	b503      	push	{r0, r1, lr}
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	ab03      	add	r3, sp, #12
 800b0b0:	4805      	ldr	r0, [pc, #20]	; (800b0c8 <fiprintf+0x20>)
 800b0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b6:	6800      	ldr	r0, [r0, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f7ff fe09 	bl	800acd0 <_vfiprintf_r>
 800b0be:	b002      	add	sp, #8
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4770      	bx	lr
 800b0c8:	24000010 	.word	0x24000010

0800b0cc <_fstat_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	; (800b0ec <_fstat_r+0x20>)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	f7f6 fab0 	bl	800163e <_fstat>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d102      	bne.n	800b0e8 <_fstat_r+0x1c>
 800b0e2:	682b      	ldr	r3, [r5, #0]
 800b0e4:	b103      	cbz	r3, 800b0e8 <_fstat_r+0x1c>
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ea:	bf00      	nop
 800b0ec:	240003e8 	.word	0x240003e8

0800b0f0 <_isatty_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	; (800b10c <_isatty_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f6 faaf 	bl	800165e <_isatty>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_isatty_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_isatty_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	240003e8 	.word	0x240003e8

0800b110 <_lseek_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d07      	ldr	r5, [pc, #28]	; (800b130 <_lseek_r+0x20>)
 800b114:	4604      	mov	r4, r0
 800b116:	4608      	mov	r0, r1
 800b118:	4611      	mov	r1, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	602a      	str	r2, [r5, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	f7f6 faa8 	bl	8001674 <_lseek>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_lseek_r+0x1e>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_lseek_r+0x1e>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	240003e8 	.word	0x240003e8

0800b134 <memmove>:
 800b134:	4288      	cmp	r0, r1
 800b136:	b510      	push	{r4, lr}
 800b138:	eb01 0402 	add.w	r4, r1, r2
 800b13c:	d902      	bls.n	800b144 <memmove+0x10>
 800b13e:	4284      	cmp	r4, r0
 800b140:	4623      	mov	r3, r4
 800b142:	d807      	bhi.n	800b154 <memmove+0x20>
 800b144:	1e43      	subs	r3, r0, #1
 800b146:	42a1      	cmp	r1, r4
 800b148:	d008      	beq.n	800b15c <memmove+0x28>
 800b14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b152:	e7f8      	b.n	800b146 <memmove+0x12>
 800b154:	4402      	add	r2, r0
 800b156:	4601      	mov	r1, r0
 800b158:	428a      	cmp	r2, r1
 800b15a:	d100      	bne.n	800b15e <memmove+0x2a>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b166:	e7f7      	b.n	800b158 <memmove+0x24>

0800b168 <__malloc_lock>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__malloc_lock+0x8>)
 800b16a:	f7fe bdf6 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	240003dc 	.word	0x240003dc

0800b174 <__malloc_unlock>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__malloc_unlock+0x8>)
 800b176:	f7fe bdf1 	b.w	8009d5c <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	240003dc 	.word	0x240003dc

0800b180 <_realloc_r>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	4680      	mov	r8, r0
 800b186:	4614      	mov	r4, r2
 800b188:	460e      	mov	r6, r1
 800b18a:	b921      	cbnz	r1, 800b196 <_realloc_r+0x16>
 800b18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	4611      	mov	r1, r2
 800b192:	f7ff bba3 	b.w	800a8dc <_malloc_r>
 800b196:	b92a      	cbnz	r2, 800b1a4 <_realloc_r+0x24>
 800b198:	f7ff fb34 	bl	800a804 <_free_r>
 800b19c:	4625      	mov	r5, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	f000 f835 	bl	800b212 <_malloc_usable_size_r>
 800b1a8:	4284      	cmp	r4, r0
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	d802      	bhi.n	800b1b4 <_realloc_r+0x34>
 800b1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1b2:	d812      	bhi.n	800b1da <_realloc_r+0x5a>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	f7ff fb90 	bl	800a8dc <_malloc_r>
 800b1bc:	4605      	mov	r5, r0
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0ed      	beq.n	800b19e <_realloc_r+0x1e>
 800b1c2:	42bc      	cmp	r4, r7
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	bf28      	it	cs
 800b1ca:	463a      	movcs	r2, r7
 800b1cc:	f7fb fc72 	bl	8006ab4 <memcpy>
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	f7ff fb16 	bl	800a804 <_free_r>
 800b1d8:	e7e1      	b.n	800b19e <_realloc_r+0x1e>
 800b1da:	4635      	mov	r5, r6
 800b1dc:	e7df      	b.n	800b19e <_realloc_r+0x1e>
	...

0800b1e0 <_read_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_read_r+0x20>)
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	602a      	str	r2, [r5, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f7f6 f9e0 	bl	80015b4 <_read>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_read_r+0x1e>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_read_r+0x1e>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	240003e8 	.word	0x240003e8

0800b204 <abort>:
 800b204:	b508      	push	{r3, lr}
 800b206:	2006      	movs	r0, #6
 800b208:	f000 f834 	bl	800b274 <raise>
 800b20c:	2001      	movs	r0, #1
 800b20e:	f7f6 f9c7 	bl	80015a0 <_exit>

0800b212 <_malloc_usable_size_r>:
 800b212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b216:	1f18      	subs	r0, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbc      	itt	lt
 800b21c:	580b      	ldrlt	r3, [r1, r0]
 800b21e:	18c0      	addlt	r0, r0, r3
 800b220:	4770      	bx	lr

0800b222 <_raise_r>:
 800b222:	291f      	cmp	r1, #31
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	460d      	mov	r5, r1
 800b22a:	d904      	bls.n	800b236 <_raise_r+0x14>
 800b22c:	2316      	movs	r3, #22
 800b22e:	6003      	str	r3, [r0, #0]
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b238:	b112      	cbz	r2, 800b240 <_raise_r+0x1e>
 800b23a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b23e:	b94b      	cbnz	r3, 800b254 <_raise_r+0x32>
 800b240:	4620      	mov	r0, r4
 800b242:	f000 f831 	bl	800b2a8 <_getpid_r>
 800b246:	462a      	mov	r2, r5
 800b248:	4601      	mov	r1, r0
 800b24a:	4620      	mov	r0, r4
 800b24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b250:	f000 b818 	b.w	800b284 <_kill_r>
 800b254:	2b01      	cmp	r3, #1
 800b256:	d00a      	beq.n	800b26e <_raise_r+0x4c>
 800b258:	1c59      	adds	r1, r3, #1
 800b25a:	d103      	bne.n	800b264 <_raise_r+0x42>
 800b25c:	2316      	movs	r3, #22
 800b25e:	6003      	str	r3, [r0, #0]
 800b260:	2001      	movs	r0, #1
 800b262:	e7e7      	b.n	800b234 <_raise_r+0x12>
 800b264:	2400      	movs	r4, #0
 800b266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b26a:	4628      	mov	r0, r5
 800b26c:	4798      	blx	r3
 800b26e:	2000      	movs	r0, #0
 800b270:	e7e0      	b.n	800b234 <_raise_r+0x12>
	...

0800b274 <raise>:
 800b274:	4b02      	ldr	r3, [pc, #8]	; (800b280 <raise+0xc>)
 800b276:	4601      	mov	r1, r0
 800b278:	6818      	ldr	r0, [r3, #0]
 800b27a:	f7ff bfd2 	b.w	800b222 <_raise_r>
 800b27e:	bf00      	nop
 800b280:	24000010 	.word	0x24000010

0800b284 <_kill_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d07      	ldr	r5, [pc, #28]	; (800b2a4 <_kill_r+0x20>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	4611      	mov	r1, r2
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f7f6 f975 	bl	8001580 <_kill>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d102      	bne.n	800b2a0 <_kill_r+0x1c>
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	b103      	cbz	r3, 800b2a0 <_kill_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd38      	pop	{r3, r4, r5, pc}
 800b2a2:	bf00      	nop
 800b2a4:	240003e8 	.word	0x240003e8

0800b2a8 <_getpid_r>:
 800b2a8:	f7f6 b962 	b.w	8001570 <_getpid>

0800b2ac <_init>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr

0800b2b8 <_fini>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr
