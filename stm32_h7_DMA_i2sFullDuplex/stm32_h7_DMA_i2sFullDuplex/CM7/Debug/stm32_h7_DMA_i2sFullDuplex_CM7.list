
stm32_h7_DMA_i2sFullDuplex_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800849c  0800849c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a4  080084a4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  080084ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005e010  24000024  080084d0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2405e034  080084d0  0002e034  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125ec  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002491  00000000  00000000  00032681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00034b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a20  00000000  00000000  00035838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038e85  00000000  00000000  00036258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134be  00000000  00000000  0006f0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00179ad6  00000000  00000000  0008259b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003634  00000000  00000000  001fc074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  001ff6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008444 	.word	0x08008444

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08008444 	.word	0x08008444

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[0];
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 800070c:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[0];
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000712:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000414 	.word	0x24000414
 800072c:	24000214 	.word	0x24000214
 8000730:	24000008 	.word	0x24000008
 8000734:	24000314 	.word	0x24000314
 8000738:	2405e01c 	.word	0x2405e01c

0800073c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[BUFFER_SIZE/2];
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000748:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[BUFFER_SIZE/2];
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2SEx_TxRxCpltCallback+0x30>)
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 800074e:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	24000414 	.word	0x24000414
 8000768:	24000294 	.word	0x24000294
 800076c:	24000008 	.word	0x24000008
 8000770:	24000394 	.word	0x24000394
 8000774:	2405e01c 	.word	0x2405e01c

08000778 <processaudio_setup>:

void processaudio_setup( void ) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
    int i;

    // zero delay lines used for echo effect
    for (i=0;i<DELAY_LINE_SIZE;i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e010      	b.n	80007a6 <processaudio_setup+0x2e>
        delay_line_left[i] = 0.0;
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <processaudio_setup+0x48>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
        delay_line_right[i] = 0.0;
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <processaudio_setup+0x4c>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
    for (i=0;i<DELAY_LINE_SIZE;i++) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80007ac:	4293      	cmp	r3, r2
 80007ae:	dde9      	ble.n	8000784 <processaudio_setup+0xc>
    }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	24000418 	.word	0x24000418
 80007c4:	2402f218 	.word	0x2402f218

080007c8 <processData>:

void processData() {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for(uint8_t n = 0; n < (BUFFER_SIZE/2) -1; n+=2){
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	e0dc      	b.n	800098e <processData+0x1c6>
		leftIn = (1.0f/32768.0f)* inBufPtr[n];
 80007d4:	4b74      	ldr	r3, [pc, #464]	; (80009a8 <processData+0x1e0>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ea:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80009ac <processData+0x1e4>
 80007ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f2:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <processData+0x1e8>)
 80007f4:	edc3 7a00 	vstr	s15, [r3]
		if(leftIn > 1.0f) {
 80007f8:	4b6d      	ldr	r3, [pc, #436]	; (80009b0 <processData+0x1e8>)
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	dd09      	ble.n	8000820 <processData+0x58>
			leftIn -= 2.0f;
 800080c:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <processData+0x1e8>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800081a:	4b65      	ldr	r3, [pc, #404]	; (80009b0 <processData+0x1e8>)
 800081c:	edc3 7a00 	vstr	s15, [r3]
		}
		float delayed_left = delay_line_left[delay_line_index];
 8000820:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <processData+0x1ec>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <processData+0x1f0>)
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60bb      	str	r3, [r7, #8]
		leftOut = (leftIn * delay_dry_mix) + (delayed_left * delay_wet_mix);
 800082e:	4b60      	ldr	r3, [pc, #384]	; (80009b0 <processData+0x1e8>)
 8000830:	ed93 7a00 	vldr	s14, [r3]
 8000834:	4b61      	ldr	r3, [pc, #388]	; (80009bc <processData+0x1f4>)
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800083e:	4b60      	ldr	r3, [pc, #384]	; (80009c0 <processData+0x1f8>)
 8000840:	edd3 6a00 	vldr	s13, [r3]
 8000844:	edd7 7a02 	vldr	s15, [r7, #8]
 8000848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800084c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000850:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <processData+0x1fc>)
 8000852:	edc3 7a00 	vstr	s15, [r3]
//		leftOut = leftIn;
		delay_line_left[delay_line_index] = delay_feedback * (delayed_left + leftIn);
 8000856:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <processData+0x1e8>)
 8000858:	ed93 7a00 	vldr	s14, [r3]
 800085c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <processData+0x200>)
 8000866:	edd3 7a00 	vldr	s15, [r3]
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <processData+0x1ec>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000872:	4a51      	ldr	r2, [pc, #324]	; (80009b8 <processData+0x1f0>)
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	edc3 7a00 	vstr	s15, [r3]

		outBufPtr[n] = (int16_t) ((32768.0f)* leftOut);
 800087c:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <processData+0x1fc>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80009cc <processData+0x204>
 8000886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <processData+0x208>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000898:	ee17 2a90 	vmov	r2, s15
 800089c:	b212      	sxth	r2, r2
 800089e:	801a      	strh	r2, [r3, #0]

		rightIn = (1.0f /32768.0f) * inBufPtr[n+1];
 80008a0:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <processData+0x1e0>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3301      	adds	r3, #1
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80009ac <processData+0x1e4>
 80008bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c0:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <processData+0x20c>)
 80008c2:	edc3 7a00 	vstr	s15, [r3]
		if(rightIn > 1.0f) {
 80008c6:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <processData+0x20c>)
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d8:	dd09      	ble.n	80008ee <processData+0x126>
			rightIn -= 2.0f;
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <processData+0x20c>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80008e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008e8:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <processData+0x20c>)
 80008ea:	edc3 7a00 	vstr	s15, [r3]
		}
		float delayed_right = delay_line_right[delay_line_index];
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <processData+0x1ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a39      	ldr	r2, [pc, #228]	; (80009d8 <processData+0x210>)
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	607b      	str	r3, [r7, #4]
		rightOut = (rightIn * delay_dry_mix) + (delayed_right * delay_wet_mix);
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <processData+0x20c>)
 80008fe:	ed93 7a00 	vldr	s14, [r3]
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <processData+0x1f4>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <processData+0x1f8>)
 800090e:	edd3 6a00 	vldr	s13, [r3]
 8000912:	edd7 7a01 	vldr	s15, [r7, #4]
 8000916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <processData+0x214>)
 8000920:	edc3 7a00 	vstr	s15, [r3]
//		rightOut = rightIn;
		delay_line_right[delay_line_index] = delay_feedback * (delayed_right + rightIn);
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <processData+0x20c>)
 8000926:	ed93 7a00 	vldr	s14, [r3]
 800092a:	edd7 7a01 	vldr	s15, [r7, #4]
 800092e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <processData+0x200>)
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <processData+0x1ec>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <processData+0x210>)
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	edc3 7a00 	vstr	s15, [r3]

		outBufPtr[n+1] = (int16_t) ((32768.0f)* rightOut);
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <processData+0x214>)
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80009cc <processData+0x204>
 8000954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <processData+0x208>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	3301      	adds	r3, #1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000968:	ee17 2a90 	vmov	r2, s15
 800096c:	b212      	sxth	r2, r2
 800096e:	801a      	strh	r2, [r3, #0]
		if (delay_line_index++ >= delay_len_samples) {
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <processData+0x1ec>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	490f      	ldr	r1, [pc, #60]	; (80009b4 <processData+0x1ec>)
 8000978:	600a      	str	r2, [r1, #0]
 800097a:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <processData+0x218>)
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	4293      	cmp	r3, r2
 8000980:	d302      	bcc.n	8000988 <processData+0x1c0>
			delay_line_index = 0;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <processData+0x1ec>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < (BUFFER_SIZE/2) -1; n+=2){
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	3302      	adds	r3, #2
 800098c:	73fb      	strb	r3, [r7, #15]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	2b3e      	cmp	r3, #62	; 0x3e
 8000992:	f67f af1f 	bls.w	80007d4 <processData+0xc>
		}

	}
	dataReadyFlag = 0;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <processData+0x21c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	24000414 	.word	0x24000414
 80009ac:	38000000 	.word	0x38000000
 80009b0:	2405e020 	.word	0x2405e020
 80009b4:	2405e018 	.word	0x2405e018
 80009b8:	24000418 	.word	0x24000418
 80009bc:	24000014 	.word	0x24000014
 80009c0:	24000010 	.word	0x24000010
 80009c4:	2405e024 	.word	0x2405e024
 80009c8:	24000018 	.word	0x24000018
 80009cc:	47000000 	.word	0x47000000
 80009d0:	24000008 	.word	0x24000008
 80009d4:	2405e028 	.word	0x2405e028
 80009d8:	2402f218 	.word	0x2402f218
 80009dc:	2405e02c 	.word	0x2405e02c
 80009e0:	2400000c 	.word	0x2400000c
 80009e4:	2405e01c 	.word	0x2405e01c

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/

  timeout = 0xFFFF;
 80009ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009f4:	bf00      	nop
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <main+0xb8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <main+0x24>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	dcf4      	bgt.n	80009f6 <main+0xe>
  if ( timeout < 0 )
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da01      	bge.n	8000a16 <main+0x2e>
  {
  Error_Handler();
 8000a12:	f000 f9f3 	bl	8000dfc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 fc0f 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f84b 	bl	8000ab4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <main+0xb8>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <main+0xb8>)
 8000a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <main+0xb8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f003 f84b 	bl	8003ad8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f003 f861 	bl	8003b0c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a50:	bf00      	nop
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <main+0xb8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d104      	bne.n	8000a68 <main+0x80>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dcf4      	bgt.n	8000a52 <main+0x6a>
if ( timeout < 0 )
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da01      	bge.n	8000a72 <main+0x8a>
{
Error_Handler();
 8000a6e:	f000 f9c5 	bl	8000dfc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 f941 	bl	8000cf8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a76:	f000 f8cb 	bl	8000c10 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000a7a:	f000 f915 	bl	8000ca8 <MX_DMA_Init>
  MX_I2S3_Init();
 8000a7e:	f000 f893 	bl	8000ba8 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t*) dacData, (uint16_t*) adcData, BUFFER_SIZE);
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <main+0xbc>)
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <main+0xc0>)
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <main+0xc4>)
 8000a8a:	f003 f973 	bl	8003d74 <HAL_I2SEx_TransmitReceive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  processaudio_setup();
 8000a8e:	f7ff fe73 	bl	8000778 <processaudio_setup>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(dataReadyFlag) {
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <main+0xc8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0fb      	beq.n	8000a92 <main+0xaa>
		  processData();
 8000a9a:	f7ff fe95 	bl	80007c8 <processData>
	  if(dataReadyFlag) {
 8000a9e:	e7f8      	b.n	8000a92 <main+0xaa>
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	24000214 	.word	0x24000214
 8000aa8:	24000314 	.word	0x24000314
 8000aac:	24000040 	.word	0x24000040
 8000ab0:	2405e01c 	.word	0x2405e01c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	224c      	movs	r2, #76	; 0x4c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f007 fc92 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f007 fc8c 	bl	80083ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f003 fa79 	bl	8003fcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <SystemClock_Config+0xec>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <SystemClock_Config+0xec>)
 8000ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SystemClock_Config+0xec>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0c:	bf00      	nop
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <SystemClock_Config+0xec>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1a:	d1f8      	bne.n	8000b0e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b32:	2378      	movs	r3, #120	; 0x78
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b42:	230c      	movs	r3, #12
 8000b44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fa94 	bl	8004080 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b5e:	f000 f94d 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	233f      	movs	r3, #63	; 0x3f
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2303      	movs	r3, #3
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2104      	movs	r1, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fea7 	bl	80048dc <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b94:	f000 f932 	bl	8000dfc <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3770      	adds	r7, #112	; 0x70
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024800 	.word	0x58024800
 8000ba4:	58000400 	.word	0x58000400

08000ba8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <MX_I2S3_Init+0x64>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bb4:	220a      	movs	r2, #10
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2S3_Init+0x60>)
 8000bf4:	f002 ff9e 	bl	8003b34 <HAL_I2S_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2S3_Init+0x5a>
  {
    Error_Handler();
 8000bfe:	f000 f8fd 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000040 	.word	0x24000040
 8000c0c:	40003c00 	.word	0x40003c00

08000c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <MX_USART3_UART_Init+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c5a:	f006 fb57 	bl	800730c <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 f8ca 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	f007 faf4 	bl	8008258 <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f000 f8c1 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c7e:	f007 fb29 	bl	80082d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 f8b8 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f007 faaa 	bl	80081e6 <HAL_UARTEx_DisableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f8b0 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000184 	.word	0x24000184
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f000 fc2a 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f000 fc41 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	200c      	movs	r0, #12
 8000ce2:	f000 fc22 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ce6:	200c      	movs	r0, #12
 8000ce8:	f000 fc39 	bl	800155e <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58024400 	.word	0x58024400

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a36      	ldr	r2, [pc, #216]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000daa:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_GPIO_Init+0xfc>)
 8000dac:	f002 fe7a 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_GPIO_Init+0x100>)
 8000dc6:	f002 fcbd 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000dca:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_GPIO_Init+0xfc>)
 8000de4:	f002 fcae 	bl	8003744 <HAL_GPIO_Init>

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400
 8000df4:	58020400 	.word	0x58020400
 8000df8:	58020800 	.word	0x58020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x30>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58024400 	.word	0x58024400

08000e3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0ba      	sub	sp, #232	; 0xe8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	22bc      	movs	r2, #188	; 0xbc
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f007 fac5 	bl	80083ec <memset>
  if(hi2s->Instance==SPI3)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a84      	ldr	r2, [pc, #528]	; (8001078 <HAL_I2S_MspInit+0x23c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	f040 8101 	bne.w	8001070 <HAL_I2S_MspInit+0x234>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f8b9 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e88:	f7ff ffb8 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e8c:	4b7b      	ldr	r3, [pc, #492]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e92:	4a7a      	ldr	r2, [pc, #488]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e9c:	4b77      	ldr	r3, [pc, #476]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a72      	ldr	r2, [pc, #456]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b6c      	ldr	r3, [pc, #432]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a6b      	ldr	r2, [pc, #428]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b65      	ldr	r3, [pc, #404]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a63      	ldr	r2, [pc, #396]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b61      	ldr	r3, [pc, #388]	; (800107c <HAL_I2S_MspInit+0x240>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PB3 (JTDO/TRACESWO)     ------> I2S3_CK
    PB4 (NJTRST)     ------> I2S3_SDI
    PB5     ------> I2S3_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f04:	2310      	movs	r3, #16
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4855      	ldr	r0, [pc, #340]	; (8001080 <HAL_I2S_MspInit+0x244>)
 8000f2a:	f002 fc0b 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f46:	2306      	movs	r3, #6
 8000f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f50:	4619      	mov	r1, r3
 8000f52:	484c      	ldr	r0, [pc, #304]	; (8001084 <HAL_I2S_MspInit+0x248>)
 8000f54:	f002 fbf6 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f58:	2318      	movs	r3, #24
 8000f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f70:	2306      	movs	r3, #6
 8000f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4842      	ldr	r0, [pc, #264]	; (8001088 <HAL_I2S_MspInit+0x24c>)
 8000f7e:	f002 fbe1 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f82:	2320      	movs	r3, #32
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4838      	ldr	r0, [pc, #224]	; (8001088 <HAL_I2S_MspInit+0x24c>)
 8000fa8:	f002 fbcc 	bl	8003744 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fae:	4a38      	ldr	r2, [pc, #224]	; (8001090 <HAL_I2S_MspInit+0x254>)
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fb4:	223e      	movs	r2, #62	; 0x3e
 8000fb6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fba:	2240      	movs	r2, #64	; 0x40
 8000fbc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fda:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fe6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fea:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000ff2:	4826      	ldr	r0, [pc, #152]	; (800108c <HAL_I2S_MspInit+0x250>)
 8000ff4:	f000 face 	bl	8001594 <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000ffe:	f7ff fefd 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <HAL_I2S_MspInit+0x250>)
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
 8001008:	4a20      	ldr	r2, [pc, #128]	; (800108c <HAL_I2S_MspInit+0x250>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_I2S_MspInit+0x25c>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001016:	223d      	movs	r2, #61	; 0x3d
 8001018:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_I2S_MspInit+0x258>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001034:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001044:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001048:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800104c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001056:	f000 fa9d 	bl	8001594 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2S_MspInit+0x228>
    {
      Error_Handler();
 8001060:	f7ff fecc 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_I2S_MspInit+0x258>)
 8001068:	649a      	str	r2, [r3, #72]	; 0x48
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_I2S_MspInit+0x258>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	; 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40003c00 	.word	0x40003c00
 800107c:	58024400 	.word	0x58024400
 8001080:	58020000 	.word	0x58020000
 8001084:	58020800 	.word	0x58020800
 8001088:	58020400 	.word	0x58020400
 800108c:	24000094 	.word	0x24000094
 8001090:	40020010 	.word	0x40020010
 8001094:	2400010c 	.word	0x2400010c
 8001098:	40020028 	.word	0x40020028

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0b8      	sub	sp, #224	; 0xe0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22bc      	movs	r2, #188	; 0xbc
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 f995 	bl	80083ec <memset>
  if(huart->Instance==USART3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_UART_MspInit+0xc0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d142      	bne.n	8001152 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 ff8a 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010e6:	f7ff fe89 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0xc4>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_UART_MspInit+0xc4>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0xc4>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0xc8>)
 800114e:	f002 faf9 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	37e0      	adds	r7, #224	; 0xe0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004800 	.word	0x40004800
 8001160:	58024400 	.word	0x58024400
 8001164:	58020c00 	.word	0x58020c00

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f8b2 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Stream0_IRQHandler+0x10>)
 80011c2:	f000 ffad 	bl	8002120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000094 	.word	0x24000094

080011d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Stream1_IRQHandler+0x10>)
 80011d6:	f000 ffa3 	bl	8002120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2400010c 	.word	0x2400010c

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff f9f4 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f007 f8f3 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fbe7 	bl	80009e8 <main>
  bx  lr
 800121a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001224:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001228:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 800122c:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001230:	2405e034 	.word	0x2405e034

08001234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC3_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 f968 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001244:	f003 fd00 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_Init+0x68>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <HAL_Init+0x6c>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_Init+0x6c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x70>)
 800127a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f814 	bl	80012b0 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e002      	b.n	8001298 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fdb9 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	0800845c 	.word	0x0800845c
 80012a8:	24000004 	.word	0x24000004
 80012ac:	24000000 	.word	0x24000000

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_InitTick+0x60>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e021      	b.n	8001308 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_InitTick+0x64>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f94d 	bl	800157a <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f917 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x68>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24000020 	.word	0x24000020
 8001314:	24000000 	.word	0x24000000
 8001318:	2400001c 	.word	0x2400001c

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	24000020 	.word	0x24000020
 8001340:	2405e030 	.word	0x2405e030

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2405e030 	.word	0x2405e030

0800135c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetREVID+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0c1b      	lsrs	r3, r3, #16
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	5c001000 	.word	0x5c001000

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff40 	bl	80013bc <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa4 	bl	80014d0 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fed2 	bl	8001344 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e316      	b.n	8001bda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a66      	ldr	r2, [pc, #408]	; (800174c <HAL_DMA_Init+0x1b8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d04a      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_DMA_Init+0x1bc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d045      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a63      	ldr	r2, [pc, #396]	; (8001754 <HAL_DMA_Init+0x1c0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d040      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a62      	ldr	r2, [pc, #392]	; (8001758 <HAL_DMA_Init+0x1c4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d03b      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a60      	ldr	r2, [pc, #384]	; (800175c <HAL_DMA_Init+0x1c8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d036      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <HAL_DMA_Init+0x1cc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d031      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <HAL_DMA_Init+0x1d0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d02c      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_DMA_Init+0x1d4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d027      	beq.n	800164c <HAL_DMA_Init+0xb8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a5a      	ldr	r2, [pc, #360]	; (800176c <HAL_DMA_Init+0x1d8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d022      	beq.n	800164c <HAL_DMA_Init+0xb8>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a59      	ldr	r2, [pc, #356]	; (8001770 <HAL_DMA_Init+0x1dc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d01d      	beq.n	800164c <HAL_DMA_Init+0xb8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a57      	ldr	r2, [pc, #348]	; (8001774 <HAL_DMA_Init+0x1e0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d018      	beq.n	800164c <HAL_DMA_Init+0xb8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a56      	ldr	r2, [pc, #344]	; (8001778 <HAL_DMA_Init+0x1e4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_DMA_Init+0xb8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_DMA_Init+0x1e8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00e      	beq.n	800164c <HAL_DMA_Init+0xb8>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_DMA_Init+0x1ec>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d009      	beq.n	800164c <HAL_DMA_Init+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_DMA_Init+0x1f0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d004      	beq.n	800164c <HAL_DMA_Init+0xb8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a50      	ldr	r2, [pc, #320]	; (8001788 <HAL_DMA_Init+0x1f4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_DMA_Init+0xbc>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_DMA_Init+0xbe>
 8001650:	2300      	movs	r3, #0
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 813b 	beq.w	80018ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_DMA_Init+0x1b8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d04a      	beq.n	8001708 <HAL_DMA_Init+0x174>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a36      	ldr	r2, [pc, #216]	; (8001750 <HAL_DMA_Init+0x1bc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d045      	beq.n	8001708 <HAL_DMA_Init+0x174>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_DMA_Init+0x1c0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d040      	beq.n	8001708 <HAL_DMA_Init+0x174>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_DMA_Init+0x1c4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d03b      	beq.n	8001708 <HAL_DMA_Init+0x174>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <HAL_DMA_Init+0x1c8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d036      	beq.n	8001708 <HAL_DMA_Init+0x174>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a30      	ldr	r2, [pc, #192]	; (8001760 <HAL_DMA_Init+0x1cc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d031      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <HAL_DMA_Init+0x1d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02c      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <HAL_DMA_Init+0x1d4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d027      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_DMA_Init+0x1d8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d022      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2a      	ldr	r2, [pc, #168]	; (8001770 <HAL_DMA_Init+0x1dc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d01d      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_DMA_Init+0x1e0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d018      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_DMA_Init+0x1e4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d013      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a25      	ldr	r2, [pc, #148]	; (800177c <HAL_DMA_Init+0x1e8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00e      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a24      	ldr	r2, [pc, #144]	; (8001780 <HAL_DMA_Init+0x1ec>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d009      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_DMA_Init+0x1f0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_Init+0x174>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <HAL_DMA_Init+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d108      	bne.n	800171a <HAL_DMA_Init+0x186>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_DMA_Init+0x196>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800172a:	e02f      	b.n	800178c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172c:	f7ff fe0a 	bl	8001344 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b05      	cmp	r3, #5
 8001738:	d928      	bls.n	800178c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2220      	movs	r2, #32
 800173e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e246      	b.n	8001bda <HAL_DMA_Init+0x646>
 800174c:	40020010 	.word	0x40020010
 8001750:	40020028 	.word	0x40020028
 8001754:	40020040 	.word	0x40020040
 8001758:	40020058 	.word	0x40020058
 800175c:	40020070 	.word	0x40020070
 8001760:	40020088 	.word	0x40020088
 8001764:	400200a0 	.word	0x400200a0
 8001768:	400200b8 	.word	0x400200b8
 800176c:	40020410 	.word	0x40020410
 8001770:	40020428 	.word	0x40020428
 8001774:	40020440 	.word	0x40020440
 8001778:	40020458 	.word	0x40020458
 800177c:	40020470 	.word	0x40020470
 8001780:	40020488 	.word	0x40020488
 8001784:	400204a0 	.word	0x400204a0
 8001788:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1c8      	bne.n	800172c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_DMA_Init+0x420>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d107      	bne.n	80017f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4313      	orrs	r3, r2
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017f0:	4b71      	ldr	r3, [pc, #452]	; (80019b8 <HAL_DMA_Init+0x424>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <HAL_DMA_Init+0x428>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017fc:	d328      	bcc.n	8001850 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b28      	cmp	r3, #40	; 0x28
 8001804:	d903      	bls.n	800180e <HAL_DMA_Init+0x27a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b2e      	cmp	r3, #46	; 0x2e
 800180c:	d917      	bls.n	800183e <HAL_DMA_Init+0x2aa>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b3e      	cmp	r3, #62	; 0x3e
 8001814:	d903      	bls.n	800181e <HAL_DMA_Init+0x28a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b42      	cmp	r3, #66	; 0x42
 800181c:	d90f      	bls.n	800183e <HAL_DMA_Init+0x2aa>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b46      	cmp	r3, #70	; 0x46
 8001824:	d903      	bls.n	800182e <HAL_DMA_Init+0x29a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b48      	cmp	r3, #72	; 0x48
 800182c:	d907      	bls.n	800183e <HAL_DMA_Init+0x2aa>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b4e      	cmp	r3, #78	; 0x4e
 8001834:	d905      	bls.n	8001842 <HAL_DMA_Init+0x2ae>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b52      	cmp	r3, #82	; 0x52
 800183c:	d801      	bhi.n	8001842 <HAL_DMA_Init+0x2ae>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Init+0x2b0>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800184e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b04      	cmp	r3, #4
 8001878:	d117      	bne.n	80018aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 fdcf 	bl	8003430 <DMA_CheckFifoParam>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e197      	b.n	8001bda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f001 fd0a 	bl	80032cc <DMA_CalcBaseAndBitshift>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	223f      	movs	r2, #63	; 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e0cd      	b.n	8001a6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_DMA_Init+0x42c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_Init+0x38a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <HAL_DMA_Init+0x430>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_Init+0x38a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <HAL_DMA_Init+0x434>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d018      	beq.n	800191e <HAL_DMA_Init+0x38a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a36      	ldr	r2, [pc, #216]	; (80019cc <HAL_DMA_Init+0x438>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_DMA_Init+0x38a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a35      	ldr	r2, [pc, #212]	; (80019d0 <HAL_DMA_Init+0x43c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Init+0x38a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_DMA_Init+0x440>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_DMA_Init+0x38a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_DMA_Init+0x444>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_DMA_Init+0x38a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_DMA_Init+0x448>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Init+0x38e>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_DMA_Init+0x390>
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_DMA_Init+0x42c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d021      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_DMA_Init+0x430>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01c      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_DMA_Init+0x434>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d017      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_DMA_Init+0x438>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d012      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_DMA_Init+0x43c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_DMA_Init+0x440>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d008      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_DMA_Init+0x444>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d003      	beq.n	8001978 <HAL_DMA_Init+0x3e4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_DMA_Init+0x448>)
 8001976:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_DMA_Init+0x44c>)
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b40      	cmp	r3, #64	; 0x40
 800199e:	d021      	beq.n	80019e4 <HAL_DMA_Init+0x450>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d102      	bne.n	80019ae <HAL_DMA_Init+0x41a>
 80019a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ac:	e01b      	b.n	80019e6 <HAL_DMA_Init+0x452>
 80019ae:	2300      	movs	r3, #0
 80019b0:	e019      	b.n	80019e6 <HAL_DMA_Init+0x452>
 80019b2:	bf00      	nop
 80019b4:	fe10803f 	.word	0xfe10803f
 80019b8:	5c001000 	.word	0x5c001000
 80019bc:	ffff0000 	.word	0xffff0000
 80019c0:	58025408 	.word	0x58025408
 80019c4:	5802541c 	.word	0x5802541c
 80019c8:	58025430 	.word	0x58025430
 80019cc:	58025444 	.word	0x58025444
 80019d0:	58025458 	.word	0x58025458
 80019d4:	5802546c 	.word	0x5802546c
 80019d8:	58025480 	.word	0x58025480
 80019dc:	58025494 	.word	0x58025494
 80019e0:	fffe000f 	.word	0xfffe000f
 80019e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68d2      	ldr	r2, [r2, #12]
 80019ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <HAL_DMA_Init+0x650>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_DMA_Init+0x654>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f001 fc45 	bl	80032cc <DMA_CalcBaseAndBitshift>
 8001a42:	4603      	mov	r3, r0
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	e008      	b.n	8001a6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0b7      	b.n	8001bda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5f      	ldr	r2, [pc, #380]	; (8001bec <HAL_DMA_Init+0x658>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d072      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5d      	ldr	r2, [pc, #372]	; (8001bf0 <HAL_DMA_Init+0x65c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d06d      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5c      	ldr	r2, [pc, #368]	; (8001bf4 <HAL_DMA_Init+0x660>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d068      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <HAL_DMA_Init+0x664>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d063      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a59      	ldr	r2, [pc, #356]	; (8001bfc <HAL_DMA_Init+0x668>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05e      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <HAL_DMA_Init+0x66c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d059      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_DMA_Init+0x670>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d054      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a54      	ldr	r2, [pc, #336]	; (8001c08 <HAL_DMA_Init+0x674>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d04f      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a53      	ldr	r2, [pc, #332]	; (8001c0c <HAL_DMA_Init+0x678>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04a      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_DMA_Init+0x67c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d045      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_DMA_Init+0x680>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d040      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4e      	ldr	r2, [pc, #312]	; (8001c18 <HAL_DMA_Init+0x684>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d03b      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_DMA_Init+0x688>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d036      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_DMA_Init+0x68c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d031      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_DMA_Init+0x690>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d02c      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_DMA_Init+0x694>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d027      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a47      	ldr	r2, [pc, #284]	; (8001c2c <HAL_DMA_Init+0x698>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d022      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <HAL_DMA_Init+0x69c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01d      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <HAL_DMA_Init+0x6a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d018      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <HAL_DMA_Init+0x6a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_DMA_Init+0x6a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00e      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_DMA_Init+0x6ac>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d009      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <HAL_DMA_Init+0x6b0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d004      	beq.n	8001b5a <HAL_DMA_Init+0x5c6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3c      	ldr	r2, [pc, #240]	; (8001c48 <HAL_DMA_Init+0x6b4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_DMA_Init+0x5ca>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_DMA_Init+0x5cc>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d032      	beq.n	8001bca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f001 fcdf 	bl	8003528 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b80      	cmp	r3, #128	; 0x80
 8001b70:	d102      	bne.n	8001b78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_DMA_Init+0x624>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d80c      	bhi.n	8001bb8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f001 fd5c 	bl	800365c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	a7fdabf8 	.word	0xa7fdabf8
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	40020010 	.word	0x40020010
 8001bf0:	40020028 	.word	0x40020028
 8001bf4:	40020040 	.word	0x40020040
 8001bf8:	40020058 	.word	0x40020058
 8001bfc:	40020070 	.word	0x40020070
 8001c00:	40020088 	.word	0x40020088
 8001c04:	400200a0 	.word	0x400200a0
 8001c08:	400200b8 	.word	0x400200b8
 8001c0c:	40020410 	.word	0x40020410
 8001c10:	40020428 	.word	0x40020428
 8001c14:	40020440 	.word	0x40020440
 8001c18:	40020458 	.word	0x40020458
 8001c1c:	40020470 	.word	0x40020470
 8001c20:	40020488 	.word	0x40020488
 8001c24:	400204a0 	.word	0x400204a0
 8001c28:	400204b8 	.word	0x400204b8
 8001c2c:	58025408 	.word	0x58025408
 8001c30:	5802541c 	.word	0x5802541c
 8001c34:	58025430 	.word	0x58025430
 8001c38:	58025444 	.word	0x58025444
 8001c3c:	58025458 	.word	0x58025458
 8001c40:	5802546c 	.word	0x5802546c
 8001c44:	58025480 	.word	0x58025480
 8001c48:	58025494 	.word	0x58025494

08001c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e226      	b.n	80020b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA_Start_IT+0x2a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e21f      	b.n	80020b6 <HAL_DMA_Start_IT+0x46a>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f040 820a 	bne.w	80020a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <HAL_DMA_Start_IT+0x1f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04a      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_DMA_Start_IT+0x1f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d045      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_DMA_Start_IT+0x1fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d040      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_DMA_Start_IT+0x200>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d03b      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a62      	ldr	r2, [pc, #392]	; (8001e50 <HAL_DMA_Start_IT+0x204>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d036      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_DMA_Start_IT+0x208>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d031      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_DMA_Start_IT+0x20c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d02c      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_DMA_Start_IT+0x210>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <HAL_DMA_Start_IT+0x214>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_DMA_Start_IT+0x218>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01d      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <HAL_DMA_Start_IT+0x21c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_DMA_Start_IT+0x220>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_DMA_Start_IT+0x224>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_DMA_Start_IT+0x228>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <HAL_DMA_Start_IT+0x22c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_DMA_Start_IT+0x230>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_Start_IT+0x100>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e007      	b.n	8001d5c <HAL_DMA_Start_IT+0x110>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f001 f906 	bl	8002f74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_DMA_Start_IT+0x1f4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04a      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_DMA_Start_IT+0x1f8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d045      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DMA_Start_IT+0x1fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d040      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DMA_Start_IT+0x200>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d03b      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_DMA_Start_IT+0x204>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d036      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_DMA_Start_IT+0x208>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d031      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Start_IT+0x20c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02c      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_DMA_Start_IT+0x210>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d027      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Start_IT+0x214>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_Start_IT+0x218>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01d      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Start_IT+0x21c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_DMA_Start_IT+0x220>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Start_IT+0x224>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Start_IT+0x228>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_DMA_Start_IT+0x22c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_Start_IT+0x1bc>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_DMA_Start_IT+0x230>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_Start_IT+0x1c0>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_DMA_Start_IT+0x1c2>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d036      	beq.n	8001e80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 021e 	bic.w	r2, r3, #30
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0216 	orr.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03e      	beq.n	8001eac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0208 	orr.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e035      	b.n	8001eac <HAL_DMA_Start_IT+0x260>
 8001e40:	40020010 	.word	0x40020010
 8001e44:	40020028 	.word	0x40020028
 8001e48:	40020040 	.word	0x40020040
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40020070 	.word	0x40020070
 8001e54:	40020088 	.word	0x40020088
 8001e58:	400200a0 	.word	0x400200a0
 8001e5c:	400200b8 	.word	0x400200b8
 8001e60:	40020410 	.word	0x40020410
 8001e64:	40020428 	.word	0x40020428
 8001e68:	40020440 	.word	0x40020440
 8001e6c:	40020458 	.word	0x40020458
 8001e70:	40020470 	.word	0x40020470
 8001e74:	40020488 	.word	0x40020488
 8001e78:	400204a0 	.word	0x400204a0
 8001e7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 020e 	bic.w	r2, r3, #14
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 020a 	orr.w	r2, r2, #10
 8001e92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0204 	orr.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a83      	ldr	r2, [pc, #524]	; (80020c0 <HAL_DMA_Start_IT+0x474>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d072      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_DMA_Start_IT+0x478>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d06d      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a80      	ldr	r2, [pc, #512]	; (80020c8 <HAL_DMA_Start_IT+0x47c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d068      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7f      	ldr	r2, [pc, #508]	; (80020cc <HAL_DMA_Start_IT+0x480>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d063      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7d      	ldr	r2, [pc, #500]	; (80020d0 <HAL_DMA_Start_IT+0x484>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d05e      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7c      	ldr	r2, [pc, #496]	; (80020d4 <HAL_DMA_Start_IT+0x488>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d059      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <HAL_DMA_Start_IT+0x48c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d054      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a79      	ldr	r2, [pc, #484]	; (80020dc <HAL_DMA_Start_IT+0x490>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04f      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <HAL_DMA_Start_IT+0x494>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04a      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a76      	ldr	r2, [pc, #472]	; (80020e4 <HAL_DMA_Start_IT+0x498>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d045      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a74      	ldr	r2, [pc, #464]	; (80020e8 <HAL_DMA_Start_IT+0x49c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a73      	ldr	r2, [pc, #460]	; (80020ec <HAL_DMA_Start_IT+0x4a0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d03b      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a71      	ldr	r2, [pc, #452]	; (80020f0 <HAL_DMA_Start_IT+0x4a4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a70      	ldr	r2, [pc, #448]	; (80020f4 <HAL_DMA_Start_IT+0x4a8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_DMA_Start_IT+0x4ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02c      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6d      	ldr	r2, [pc, #436]	; (80020fc <HAL_DMA_Start_IT+0x4b0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d027      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6b      	ldr	r2, [pc, #428]	; (8002100 <HAL_DMA_Start_IT+0x4b4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_DMA_Start_IT+0x4b8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01d      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a68      	ldr	r2, [pc, #416]	; (8002108 <HAL_DMA_Start_IT+0x4bc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d018      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_DMA_Start_IT+0x4c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_DMA_Start_IT+0x4c4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a64      	ldr	r2, [pc, #400]	; (8002114 <HAL_DMA_Start_IT+0x4c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a62      	ldr	r2, [pc, #392]	; (8002118 <HAL_DMA_Start_IT+0x4cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Start_IT+0x350>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_DMA_Start_IT+0x4d0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Start_IT+0x354>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_Start_IT+0x356>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01a      	beq.n	8001fdc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a37      	ldr	r2, [pc, #220]	; (80020c0 <HAL_DMA_Start_IT+0x474>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_DMA_Start_IT+0x478>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_DMA_Start_IT+0x47c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_DMA_Start_IT+0x480>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_DMA_Start_IT+0x484>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <HAL_DMA_Start_IT+0x488>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_DMA_Start_IT+0x48c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_DMA_Start_IT+0x490>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_DMA_Start_IT+0x494>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_DMA_Start_IT+0x498>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_DMA_Start_IT+0x49c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a27      	ldr	r2, [pc, #156]	; (80020ec <HAL_DMA_Start_IT+0x4a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <HAL_DMA_Start_IT+0x4a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_DMA_Start_IT+0x4a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_DMA_Start_IT+0x4ac>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Start_IT+0x430>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_DMA_Start_IT+0x4b0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <HAL_DMA_Start_IT+0x442>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e012      	b.n	80020b4 <HAL_DMA_Start_IT+0x468>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e009      	b.n	80020b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40020010 	.word	0x40020010
 80020c4:	40020028 	.word	0x40020028
 80020c8:	40020040 	.word	0x40020040
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020070 	.word	0x40020070
 80020d4:	40020088 	.word	0x40020088
 80020d8:	400200a0 	.word	0x400200a0
 80020dc:	400200b8 	.word	0x400200b8
 80020e0:	40020410 	.word	0x40020410
 80020e4:	40020428 	.word	0x40020428
 80020e8:	40020440 	.word	0x40020440
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020470 	.word	0x40020470
 80020f4:	40020488 	.word	0x40020488
 80020f8:	400204a0 	.word	0x400204a0
 80020fc:	400204b8 	.word	0x400204b8
 8002100:	58025408 	.word	0x58025408
 8002104:	5802541c 	.word	0x5802541c
 8002108:	58025430 	.word	0x58025430
 800210c:	58025444 	.word	0x58025444
 8002110:	58025458 	.word	0x58025458
 8002114:	5802546c 	.word	0x5802546c
 8002118:	58025480 	.word	0x58025480
 800211c:	58025494 	.word	0x58025494

08002120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_DMA_IRQHandler+0x1ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_DMA_IRQHandler+0x1b0>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a5f      	ldr	r2, [pc, #380]	; (80022d4 <HAL_DMA_IRQHandler+0x1b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d04a      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_DMA_IRQHandler+0x1b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d045      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5c      	ldr	r2, [pc, #368]	; (80022dc <HAL_DMA_IRQHandler+0x1bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d040      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <HAL_DMA_IRQHandler+0x1c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d03b      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <HAL_DMA_IRQHandler+0x1c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d036      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_DMA_IRQHandler+0x1c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a56      	ldr	r2, [pc, #344]	; (80022ec <HAL_DMA_IRQHandler+0x1cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d02c      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_DMA_IRQHandler+0x1d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d027      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a53      	ldr	r2, [pc, #332]	; (80022f4 <HAL_DMA_IRQHandler+0x1d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_DMA_IRQHandler+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01d      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_DMA_IRQHandler+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d018      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_DMA_IRQHandler+0x1e0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_DMA_IRQHandler+0x1e4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_DMA_IRQHandler+0x1e8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_DMA_IRQHandler+0x1ec>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_DMA_IRQHandler+0x1f0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_IRQHandler+0xd6>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_DMA_IRQHandler+0xd8>
 80021f6:	2300      	movs	r3, #0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 842b 	beq.w	8002a54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2208      	movs	r2, #8
 8002208:	409a      	lsls	r2, r3
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a2 	beq.w	8002358 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <HAL_DMA_IRQHandler+0x1b4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_DMA_IRQHandler+0x1b8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_DMA_IRQHandler+0x1bc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_DMA_IRQHandler+0x1c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_DMA_IRQHandler+0x1c4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_DMA_IRQHandler+0x1c8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_DMA_IRQHandler+0x1cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_DMA_IRQHandler+0x1d0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_DMA_IRQHandler+0x1d4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_DMA_IRQHandler+0x1d8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_DMA_IRQHandler+0x1dc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_DMA_IRQHandler+0x1e0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_DMA_IRQHandler+0x1e4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_DMA_IRQHandler+0x1e8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_DMA_IRQHandler+0x1ec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_DMA_IRQHandler+0x1f0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d12f      	bne.n	8002314 <HAL_DMA_IRQHandler+0x1f4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	e02e      	b.n	8002328 <HAL_DMA_IRQHandler+0x208>
 80022ca:	bf00      	nop
 80022cc:	24000000 	.word	0x24000000
 80022d0:	1b4e81b5 	.word	0x1b4e81b5
 80022d4:	40020010 	.word	0x40020010
 80022d8:	40020028 	.word	0x40020028
 80022dc:	40020040 	.word	0x40020040
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40020070 	.word	0x40020070
 80022e8:	40020088 	.word	0x40020088
 80022ec:	400200a0 	.word	0x400200a0
 80022f0:	400200b8 	.word	0x400200b8
 80022f4:	40020410 	.word	0x40020410
 80022f8:	40020428 	.word	0x40020428
 80022fc:	40020440 	.word	0x40020440
 8002300:	40020458 	.word	0x40020458
 8002304:	40020470 	.word	0x40020470
 8002308:	40020488 	.word	0x40020488
 800230c:	400204a0 	.word	0x400204a0
 8002310:	400204b8 	.word	0x400204b8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2208      	movs	r2, #8
 8002346:	409a      	lsls	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06e      	beq.n	800244c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a69      	ldr	r2, [pc, #420]	; (8002518 <HAL_DMA_IRQHandler+0x3f8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a67      	ldr	r2, [pc, #412]	; (800251c <HAL_DMA_IRQHandler+0x3fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_DMA_IRQHandler+0x400>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a64      	ldr	r2, [pc, #400]	; (8002524 <HAL_DMA_IRQHandler+0x404>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_DMA_IRQHandler+0x408>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a61      	ldr	r2, [pc, #388]	; (800252c <HAL_DMA_IRQHandler+0x40c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_DMA_IRQHandler+0x410>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5e      	ldr	r2, [pc, #376]	; (8002534 <HAL_DMA_IRQHandler+0x414>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_DMA_IRQHandler+0x418>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5b      	ldr	r2, [pc, #364]	; (800253c <HAL_DMA_IRQHandler+0x41c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_DMA_IRQHandler+0x420>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_DMA_IRQHandler+0x424>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_DMA_IRQHandler+0x428>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_DMA_IRQHandler+0x42c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_DMA_IRQHandler+0x430>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_DMA_IRQHandler+0x434>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10a      	bne.n	8002424 <HAL_DMA_IRQHandler+0x304>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e003      	b.n	800242c <HAL_DMA_IRQHandler+0x30c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2201      	movs	r2, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 808f 	beq.w	8002580 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <HAL_DMA_IRQHandler+0x3f8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_DMA_IRQHandler+0x3fc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_DMA_IRQHandler+0x400>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_DMA_IRQHandler+0x404>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a26      	ldr	r2, [pc, #152]	; (8002528 <HAL_DMA_IRQHandler+0x408>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_DMA_IRQHandler+0x40c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <HAL_DMA_IRQHandler+0x410>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_DMA_IRQHandler+0x414>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_DMA_IRQHandler+0x418>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_DMA_IRQHandler+0x41c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_DMA_IRQHandler+0x420>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_DMA_IRQHandler+0x424>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <HAL_DMA_IRQHandler+0x428>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_DMA_IRQHandler+0x42c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_DMA_IRQHandler+0x430>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_DMA_IRQHandler+0x434>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12a      	bne.n	8002558 <HAL_DMA_IRQHandler+0x438>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e023      	b.n	8002560 <HAL_DMA_IRQHandler+0x440>
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2210      	movs	r2, #16
 800258a:	409a      	lsls	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a85      	ldr	r2, [pc, #532]	; (80027b0 <HAL_DMA_IRQHandler+0x690>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a83      	ldr	r2, [pc, #524]	; (80027b4 <HAL_DMA_IRQHandler+0x694>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a82      	ldr	r2, [pc, #520]	; (80027b8 <HAL_DMA_IRQHandler+0x698>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_DMA_IRQHandler+0x69c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_DMA_IRQHandler+0x6a0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_DMA_IRQHandler+0x6a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_DMA_IRQHandler+0x6a8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_DMA_IRQHandler+0x6ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a79      	ldr	r2, [pc, #484]	; (80027d0 <HAL_DMA_IRQHandler+0x6b0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_DMA_IRQHandler+0x6b4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a76      	ldr	r2, [pc, #472]	; (80027d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a74      	ldr	r2, [pc, #464]	; (80027dc <HAL_DMA_IRQHandler+0x6bc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_DMA_IRQHandler+0x6c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a70      	ldr	r2, [pc, #448]	; (80027e8 <HAL_DMA_IRQHandler+0x6c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_DMA_IRQHandler+0x6cc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10a      	bne.n	800264c <HAL_DMA_IRQHandler+0x52c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e009      	b.n	8002660 <HAL_DMA_IRQHandler+0x540>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03e      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2210      	movs	r2, #16
 800266e:	409a      	lsls	r2, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d108      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d024      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e01f      	b.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
 80026b2:	e016      	b.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2220      	movs	r2, #32
 80026ec:	409a      	lsls	r2, r3
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8110 	beq.w	8002918 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <HAL_DMA_IRQHandler+0x690>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_DMA_IRQHandler+0x694>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_DMA_IRQHandler+0x698>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_DMA_IRQHandler+0x69c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_DMA_IRQHandler+0x6a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <HAL_DMA_IRQHandler+0x6a4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <HAL_DMA_IRQHandler+0x6a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_DMA_IRQHandler+0x6ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_DMA_IRQHandler+0x6b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_DMA_IRQHandler+0x6b4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_DMA_IRQHandler+0x6bc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_DMA_IRQHandler+0x6c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_DMA_IRQHandler+0x6c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_DMA_IRQHandler+0x6cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d12b      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x6d0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e02a      	b.n	8002804 <HAL_DMA_IRQHandler+0x6e4>
 80027ae:	bf00      	nop
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	40020040 	.word	0x40020040
 80027bc:	40020058 	.word	0x40020058
 80027c0:	40020070 	.word	0x40020070
 80027c4:	40020088 	.word	0x40020088
 80027c8:	400200a0 	.word	0x400200a0
 80027cc:	400200b8 	.word	0x400200b8
 80027d0:	40020410 	.word	0x40020410
 80027d4:	40020428 	.word	0x40020428
 80027d8:	40020440 	.word	0x40020440
 80027dc:	40020458 	.word	0x40020458
 80027e0:	40020470 	.word	0x40020470
 80027e4:	40020488 	.word	0x40020488
 80027e8:	400204a0 	.word	0x400204a0
 80027ec:	400204b8 	.word	0x400204b8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8087 	beq.w	8002918 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2220      	movs	r2, #32
 8002814:	409a      	lsls	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b04      	cmp	r3, #4
 8002824:	d139      	bne.n	800289a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0216 	bic.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002844:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_DMA_IRQHandler+0x736>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	223f      	movs	r2, #63	; 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 834a 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
          }
          return;
 8002898:	e344      	b.n	8002f24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
 80028c6:	e027      	b.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e01e      	b.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0210 	bic.w	r2, r2, #16
 80028f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8306 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8088 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a7a      	ldr	r2, [pc, #488]	; (8002b28 <HAL_DMA_IRQHandler+0xa08>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <HAL_DMA_IRQHandler+0xa0c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d045      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a77      	ldr	r2, [pc, #476]	; (8002b30 <HAL_DMA_IRQHandler+0xa10>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d040      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <HAL_DMA_IRQHandler+0xa14>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d03b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a74      	ldr	r2, [pc, #464]	; (8002b38 <HAL_DMA_IRQHandler+0xa18>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d036      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_DMA_IRQHandler+0xa1c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d031      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a71      	ldr	r2, [pc, #452]	; (8002b40 <HAL_DMA_IRQHandler+0xa20>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_DMA_IRQHandler+0xa24>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d027      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_DMA_IRQHandler+0xa28>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d022      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6d      	ldr	r2, [pc, #436]	; (8002b4c <HAL_DMA_IRQHandler+0xa2c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01d      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_DMA_IRQHandler+0xa30>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6a      	ldr	r2, [pc, #424]	; (8002b54 <HAL_DMA_IRQHandler+0xa34>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a68      	ldr	r2, [pc, #416]	; (8002b58 <HAL_DMA_IRQHandler+0xa38>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_DMA_IRQHandler+0xa3c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a65      	ldr	r2, [pc, #404]	; (8002b60 <HAL_DMA_IRQHandler+0xa40>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a64      	ldr	r2, [pc, #400]	; (8002b64 <HAL_DMA_IRQHandler+0xa44>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <HAL_DMA_IRQHandler+0x8ca>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e007      	b.n	80029fa <HAL_DMA_IRQHandler+0x8da>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d307      	bcc.n	8002a16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f2      	bne.n	80029fa <HAL_DMA_IRQHandler+0x8da>
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a2e:	e003      	b.n	8002a38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8272 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	e26c      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_DMA_IRQHandler+0xa48>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_DMA_IRQHandler+0xa4c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HAL_DMA_IRQHandler+0xa50>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <HAL_DMA_IRQHandler+0xa54>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3d      	ldr	r2, [pc, #244]	; (8002b78 <HAL_DMA_IRQHandler+0xa58>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	; (8002b7c <HAL_DMA_IRQHandler+0xa5c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_DMA_IRQHandler+0xa60>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <HAL_DMA_IRQHandler+0xa64>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x988>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0x98a>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 823f 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80cd 	beq.w	8002c68 <HAL_DMA_IRQHandler+0xb48>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80c7 	beq.w	8002c68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d049      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8210 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b10:	e20a      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8206 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b24:	e200      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
 8002b26:	bf00      	nop
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
 8002b68:	58025408 	.word	0x58025408
 8002b6c:	5802541c 	.word	0x5802541c
 8002b70:	58025430 	.word	0x58025430
 8002b74:	58025444 	.word	0x58025444
 8002b78:	58025458 	.word	0x58025458
 8002b7c:	5802546c 	.word	0x5802546c
 8002b80:	58025480 	.word	0x58025480
 8002b84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d160      	bne.n	8002c54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7f      	ldr	r2, [pc, #508]	; (8002d94 <HAL_DMA_IRQHandler+0xc74>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7d      	ldr	r2, [pc, #500]	; (8002d98 <HAL_DMA_IRQHandler+0xc78>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7c      	ldr	r2, [pc, #496]	; (8002d9c <HAL_DMA_IRQHandler+0xc7c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_DMA_IRQHandler+0xc80>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <HAL_DMA_IRQHandler+0xc84>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_DMA_IRQHandler+0xc88>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_DMA_IRQHandler+0xc8c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a74      	ldr	r2, [pc, #464]	; (8002db0 <HAL_DMA_IRQHandler+0xc90>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	; (8002db4 <HAL_DMA_IRQHandler+0xc94>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a71      	ldr	r2, [pc, #452]	; (8002db8 <HAL_DMA_IRQHandler+0xc98>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a70      	ldr	r2, [pc, #448]	; (8002dbc <HAL_DMA_IRQHandler+0xc9c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_DMA_IRQHandler+0xca0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6d      	ldr	r2, [pc, #436]	; (8002dc4 <HAL_DMA_IRQHandler+0xca4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <HAL_DMA_IRQHandler+0xca8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6a      	ldr	r2, [pc, #424]	; (8002dcc <HAL_DMA_IRQHandler+0xcac>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a68      	ldr	r2, [pc, #416]	; (8002dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <HAL_DMA_IRQHandler+0xb24>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0208 	bic.w	r2, r2, #8
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e007      	b.n	8002c54 <HAL_DMA_IRQHandler+0xb34>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8165 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c66:	e15f      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2202      	movs	r2, #2
 8002c72:	409a      	lsls	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80c5 	beq.w	8002e08 <HAL_DMA_IRQHandler+0xce8>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80bf 	beq.w	8002e08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2202      	movs	r2, #2
 8002c94:	409a      	lsls	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 813a 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	e134      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8130 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd4:	e12a      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8089 	bne.w	8002df4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_DMA_IRQHandler+0xc74>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04a      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_DMA_IRQHandler+0xc78>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d045      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_DMA_IRQHandler+0xc7c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_DMA_IRQHandler+0xc80>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_DMA_IRQHandler+0xc84>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_DMA_IRQHandler+0xc88>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d031      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_DMA_IRQHandler+0xc8c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d02c      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_DMA_IRQHandler+0xc90>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_DMA_IRQHandler+0xc94>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_DMA_IRQHandler+0xc98>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_DMA_IRQHandler+0xc9c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_DMA_IRQHandler+0xca0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_DMA_IRQHandler+0xca4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_DMA_IRQHandler+0xca8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_DMA_IRQHandler+0xcac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xc62>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d128      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0xcb4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0214 	bic.w	r2, r2, #20
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e027      	b.n	8002de4 <HAL_DMA_IRQHandler+0xcc4>
 8002d94:	40020010 	.word	0x40020010
 8002d98:	40020028 	.word	0x40020028
 8002d9c:	40020040 	.word	0x40020040
 8002da0:	40020058 	.word	0x40020058
 8002da4:	40020070 	.word	0x40020070
 8002da8:	40020088 	.word	0x40020088
 8002dac:	400200a0 	.word	0x400200a0
 8002db0:	400200b8 	.word	0x400200b8
 8002db4:	40020410 	.word	0x40020410
 8002db8:	40020428 	.word	0x40020428
 8002dbc:	40020440 	.word	0x40020440
 8002dc0:	40020458 	.word	0x40020458
 8002dc4:	40020470 	.word	0x40020470
 8002dc8:	40020488 	.word	0x40020488
 8002dcc:	400204a0 	.word	0x400204a0
 8002dd0:	400204b8 	.word	0x400204b8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020a 	bic.w	r2, r2, #10
 8002de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8097 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e06:	e091      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2208      	movs	r2, #8
 8002e12:	409a      	lsls	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8088 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8082 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <HAL_DMA_IRQHandler+0xe14>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3f      	ldr	r2, [pc, #252]	; (8002f38 <HAL_DMA_IRQHandler+0xe18>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <HAL_DMA_IRQHandler+0xe1c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <HAL_DMA_IRQHandler+0xe20>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_DMA_IRQHandler+0xe24>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_DMA_IRQHandler+0xe28>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_DMA_IRQHandler+0xe2c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <HAL_DMA_IRQHandler+0xe30>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a35      	ldr	r2, [pc, #212]	; (8002f54 <HAL_DMA_IRQHandler+0xe34>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_DMA_IRQHandler+0xe38>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <HAL_DMA_IRQHandler+0xe3c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_DMA_IRQHandler+0xe40>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_DMA_IRQHandler+0xe44>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_DMA_IRQHandler+0xe48>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <HAL_DMA_IRQHandler+0xe4c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_DMA_IRQHandler+0xe50>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <HAL_DMA_IRQHandler+0xdbc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 021c 	bic.w	r2, r2, #28
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e007      	b.n	8002eec <HAL_DMA_IRQHandler+0xdcc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
 8002f22:	e004      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40020010 	.word	0x40020010
 8002f38:	40020028 	.word	0x40020028
 8002f3c:	40020040 	.word	0x40020040
 8002f40:	40020058 	.word	0x40020058
 8002f44:	40020070 	.word	0x40020070
 8002f48:	40020088 	.word	0x40020088
 8002f4c:	400200a0 	.word	0x400200a0
 8002f50:	400200b8 	.word	0x400200b8
 8002f54:	40020410 	.word	0x40020410
 8002f58:	40020428 	.word	0x40020428
 8002f5c:	40020440 	.word	0x40020440
 8002f60:	40020458 	.word	0x40020458
 8002f64:	40020470 	.word	0x40020470
 8002f68:	40020488 	.word	0x40020488
 8002f6c:	400204a0 	.word	0x400204a0
 8002f70:	400204b8 	.word	0x400204b8

08002f74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7f      	ldr	r2, [pc, #508]	; (8003190 <DMA_SetConfig+0x21c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d072      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7d      	ldr	r2, [pc, #500]	; (8003194 <DMA_SetConfig+0x220>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d06d      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7c      	ldr	r2, [pc, #496]	; (8003198 <DMA_SetConfig+0x224>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d068      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7a      	ldr	r2, [pc, #488]	; (800319c <DMA_SetConfig+0x228>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d063      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a79      	ldr	r2, [pc, #484]	; (80031a0 <DMA_SetConfig+0x22c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <DMA_SetConfig+0x230>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d059      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a76      	ldr	r2, [pc, #472]	; (80031a8 <DMA_SetConfig+0x234>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d054      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a74      	ldr	r2, [pc, #464]	; (80031ac <DMA_SetConfig+0x238>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d04f      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	; (80031b0 <DMA_SetConfig+0x23c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d04a      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a71      	ldr	r2, [pc, #452]	; (80031b4 <DMA_SetConfig+0x240>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d045      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	; (80031b8 <DMA_SetConfig+0x244>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d040      	beq.n	800307e <DMA_SetConfig+0x10a>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	; (80031bc <DMA_SetConfig+0x248>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d03b      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6d      	ldr	r2, [pc, #436]	; (80031c0 <DMA_SetConfig+0x24c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d036      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6b      	ldr	r2, [pc, #428]	; (80031c4 <DMA_SetConfig+0x250>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d031      	beq.n	800307e <DMA_SetConfig+0x10a>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6a      	ldr	r2, [pc, #424]	; (80031c8 <DMA_SetConfig+0x254>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d02c      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a68      	ldr	r2, [pc, #416]	; (80031cc <DMA_SetConfig+0x258>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d027      	beq.n	800307e <DMA_SetConfig+0x10a>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a67      	ldr	r2, [pc, #412]	; (80031d0 <DMA_SetConfig+0x25c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <DMA_SetConfig+0x260>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a64      	ldr	r2, [pc, #400]	; (80031d8 <DMA_SetConfig+0x264>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <DMA_SetConfig+0x10a>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a62      	ldr	r2, [pc, #392]	; (80031dc <DMA_SetConfig+0x268>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <DMA_SetConfig+0x26c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5f      	ldr	r2, [pc, #380]	; (80031e4 <DMA_SetConfig+0x270>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <DMA_SetConfig+0x10a>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <DMA_SetConfig+0x274>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <DMA_SetConfig+0x10a>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <DMA_SetConfig+0x278>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <DMA_SetConfig+0x10e>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <DMA_SetConfig+0x110>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003090:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a39      	ldr	r2, [pc, #228]	; (8003190 <DMA_SetConfig+0x21c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04a      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a38      	ldr	r2, [pc, #224]	; (8003194 <DMA_SetConfig+0x220>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a36      	ldr	r2, [pc, #216]	; (8003198 <DMA_SetConfig+0x224>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d040      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a35      	ldr	r2, [pc, #212]	; (800319c <DMA_SetConfig+0x228>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03b      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <DMA_SetConfig+0x22c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d036      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <DMA_SetConfig+0x230>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d031      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <DMA_SetConfig+0x234>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02c      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <DMA_SetConfig+0x238>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d027      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <DMA_SetConfig+0x23c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2c      	ldr	r2, [pc, #176]	; (80031b4 <DMA_SetConfig+0x240>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <DMA_SetConfig+0x244>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a29      	ldr	r2, [pc, #164]	; (80031bc <DMA_SetConfig+0x248>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <DMA_SetConfig+0x24c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <DMA_SetConfig+0x250>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <DMA_SetConfig+0x254>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <DMA_SetConfig+0x1d0>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a23      	ldr	r2, [pc, #140]	; (80031cc <DMA_SetConfig+0x258>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <DMA_SetConfig+0x1d4>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <DMA_SetConfig+0x1d6>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d059      	beq.n	8003202 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	223f      	movs	r2, #63	; 0x3f
 8003158:	409a      	lsls	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d138      	bne.n	80031f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800318e:	e086      	b.n	800329e <DMA_SetConfig+0x32a>
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8
 80031d0:	58025408 	.word	0x58025408
 80031d4:	5802541c 	.word	0x5802541c
 80031d8:	58025430 	.word	0x58025430
 80031dc:	58025444 	.word	0x58025444
 80031e0:	58025458 	.word	0x58025458
 80031e4:	5802546c 	.word	0x5802546c
 80031e8:	58025480 	.word	0x58025480
 80031ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
}
 8003200:	e04d      	b.n	800329e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <DMA_SetConfig+0x338>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <DMA_SetConfig+0x2de>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <DMA_SetConfig+0x33c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01d      	beq.n	8003252 <DMA_SetConfig+0x2de>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <DMA_SetConfig+0x340>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <DMA_SetConfig+0x2de>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <DMA_SetConfig+0x344>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <DMA_SetConfig+0x2de>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a23      	ldr	r2, [pc, #140]	; (80032bc <DMA_SetConfig+0x348>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <DMA_SetConfig+0x2de>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <DMA_SetConfig+0x34c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <DMA_SetConfig+0x2de>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <DMA_SetConfig+0x350>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <DMA_SetConfig+0x2de>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <DMA_SetConfig+0x354>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <DMA_SetConfig+0x2e2>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <DMA_SetConfig+0x2e4>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d108      	bne.n	800328e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	60da      	str	r2, [r3, #12]
}
 800328c:	e007      	b.n	800329e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	60da      	str	r2, [r3, #12]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58025408 	.word	0x58025408
 80032b0:	5802541c 	.word	0x5802541c
 80032b4:	58025430 	.word	0x58025430
 80032b8:	58025444 	.word	0x58025444
 80032bc:	58025458 	.word	0x58025458
 80032c0:	5802546c 	.word	0x5802546c
 80032c4:	58025480 	.word	0x58025480
 80032c8:	58025494 	.word	0x58025494

080032cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <DMA_CalcBaseAndBitshift+0x118>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <DMA_CalcBaseAndBitshift+0x120>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <DMA_CalcBaseAndBitshift+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <DMA_CalcBaseAndBitshift+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a39      	ldr	r2, [pc, #228]	; (80033fc <DMA_CalcBaseAndBitshift+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a38      	ldr	r2, [pc, #224]	; (8003400 <DMA_CalcBaseAndBitshift+0x134>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a36      	ldr	r2, [pc, #216]	; (8003404 <DMA_CalcBaseAndBitshift+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a35      	ldr	r2, [pc, #212]	; (8003408 <DMA_CalcBaseAndBitshift+0x13c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a33      	ldr	r2, [pc, #204]	; (800340c <DMA_CalcBaseAndBitshift+0x140>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a32      	ldr	r2, [pc, #200]	; (8003410 <DMA_CalcBaseAndBitshift+0x144>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a30      	ldr	r2, [pc, #192]	; (8003414 <DMA_CalcBaseAndBitshift+0x148>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <DMA_CalcBaseAndBitshift+0x14c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2d      	ldr	r2, [pc, #180]	; (800341c <DMA_CalcBaseAndBitshift+0x150>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <DMA_CalcBaseAndBitshift+0xa8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2c      	ldr	r2, [pc, #176]	; (8003420 <DMA_CalcBaseAndBitshift+0x154>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <DMA_CalcBaseAndBitshift+0xac>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <DMA_CalcBaseAndBitshift+0xae>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3b10      	subs	r3, #16
 8003386:	4a27      	ldr	r2, [pc, #156]	; (8003424 <DMA_CalcBaseAndBitshift+0x158>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	4a24      	ldr	r2, [pc, #144]	; (8003428 <DMA_CalcBaseAndBitshift+0x15c>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	461a      	mov	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d908      	bls.n	80033b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <DMA_CalcBaseAndBitshift+0x160>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	1d1a      	adds	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	; 0x58
 80033b6:	e00d      	b.n	80033d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <DMA_CalcBaseAndBitshift+0x160>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
 80033c6:	e005      	b.n	80033d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	aaaaaaab 	.word	0xaaaaaaab
 8003428:	0800846c 	.word	0x0800846c
 800342c:	fffffc00 	.word	0xfffffc00

08003430 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d120      	bne.n	8003486 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2b03      	cmp	r3, #3
 800344a:	d858      	bhi.n	80034fe <DMA_CheckFifoParam+0xce>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <DMA_CheckFifoParam+0x24>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003465 	.word	0x08003465
 8003458:	08003477 	.word	0x08003477
 800345c:	08003465 	.word	0x08003465
 8003460:	080034ff 	.word	0x080034ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d048      	beq.n	8003502 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003474:	e045      	b.n	8003502 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800347e:	d142      	bne.n	8003506 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003484:	e03f      	b.n	8003506 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d123      	bne.n	80034d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	2b03      	cmp	r3, #3
 8003496:	d838      	bhi.n	800350a <DMA_CheckFifoParam+0xda>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x70>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b7 	.word	0x080034b7
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	080034c9 	.word	0x080034c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
        break;
 80034b4:	e030      	b.n	8003518 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d025      	beq.n	800350e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034c6:	e022      	b.n	800350e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034d6:	e01c      	b.n	8003512 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <DMA_CheckFifoParam+0xb6>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d003      	beq.n	80034ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034e4:	e018      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ea:	e015      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
    break;
 80034fc:	e00b      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
        break;
 80034fe:	bf00      	nop
 8003500:	e00a      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        break;
 8003502:	bf00      	nop
 8003504:	e008      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        break;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
    break;
 8003516:	bf00      	nop
    }
  }

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a38      	ldr	r2, [pc, #224]	; (800361c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a36      	ldr	r2, [pc, #216]	; (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a35      	ldr	r2, [pc, #212]	; (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a33      	ldr	r2, [pc, #204]	; (8003628 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a30      	ldr	r2, [pc, #192]	; (8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01a      	beq.n	80035c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b08      	subs	r3, #8
 8003598:	4a28      	ldr	r2, [pc, #160]	; (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a24      	ldr	r2, [pc, #144]	; (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80035c4:	e024      	b.n	8003610 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3b10      	subs	r3, #16
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d806      	bhi.n	80035ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d902      	bls.n	80035ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3308      	adds	r3, #8
 80035ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003600:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2201      	movs	r2, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	58025408 	.word	0x58025408
 8003620:	5802541c 	.word	0x5802541c
 8003624:	58025430 	.word	0x58025430
 8003628:	58025444 	.word	0x58025444
 800362c:	58025458 	.word	0x58025458
 8003630:	5802546c 	.word	0x5802546c
 8003634:	58025480 	.word	0x58025480
 8003638:	58025494 	.word	0x58025494
 800363c:	cccccccd 	.word	0xcccccccd
 8003640:	16009600 	.word	0x16009600
 8003644:	58025880 	.word	0x58025880
 8003648:	aaaaaaab 	.word	0xaaaaaaab
 800364c:	400204b8 	.word	0x400204b8
 8003650:	4002040f 	.word	0x4002040f
 8003654:	10008200 	.word	0x10008200
 8003658:	40020880 	.word	0x40020880

0800365c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d04a      	beq.n	8003708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d847      	bhi.n	8003708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a25      	ldr	r2, [pc, #148]	; (8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a21      	ldr	r2, [pc, #132]	; (8003720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1c      	ldr	r2, [pc, #112]	; (800372c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036e4:	671a      	str	r2, [r3, #112]	; 0x70
 80036e6:	e009      	b.n	80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	58025408 	.word	0x58025408
 8003718:	5802541c 	.word	0x5802541c
 800371c:	58025430 	.word	0x58025430
 8003720:	58025444 	.word	0x58025444
 8003724:	58025458 	.word	0x58025458
 8003728:	5802546c 	.word	0x5802546c
 800372c:	58025480 	.word	0x58025480
 8003730:	58025494 	.word	0x58025494
 8003734:	1600963f 	.word	0x1600963f
 8003738:	58025940 	.word	0x58025940
 800373c:	1000823f 	.word	0x1000823f
 8003740:	40020940 	.word	0x40020940

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003752:	4b89      	ldr	r3, [pc, #548]	; (8003978 <HAL_GPIO_Init+0x234>)
 8003754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003756:	e194      	b.n	8003a82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8186 	beq.w	8003a7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d005      	beq.n	8003788 <HAL_GPIO_Init+0x44>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d130      	bne.n	80037ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037be:	2201      	movs	r2, #1
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0201 	and.w	r2, r3, #1
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d017      	beq.n	8003826 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d123      	bne.n	800387a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	08da      	lsrs	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3208      	adds	r2, #8
 800383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0203 	and.w	r2, r3, #3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80e0 	beq.w	8003a7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_GPIO_Init+0x238>)
 80038be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c2:	4a2e      	ldr	r2, [pc, #184]	; (800397c <HAL_GPIO_Init+0x238>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_GPIO_Init+0x238>)
 80038ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_GPIO_Init+0x23c>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_GPIO_Init+0x240>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d052      	beq.n	80039ac <HAL_GPIO_Init+0x268>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <HAL_GPIO_Init+0x244>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_GPIO_Init+0x22e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_GPIO_Init+0x248>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <HAL_GPIO_Init+0x22a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_GPIO_Init+0x24c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x226>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_GPIO_Init+0x250>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x222>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_GPIO_Init+0x254>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x21e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_GPIO_Init+0x258>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x21a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_GPIO_Init+0x25c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x216>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_GPIO_Init+0x260>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x212>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_GPIO_Init+0x264>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x20e>
 800394e:	2309      	movs	r3, #9
 8003950:	e02d      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003952:	230a      	movs	r3, #10
 8003954:	e02b      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003956:	2308      	movs	r3, #8
 8003958:	e029      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 800395a:	2307      	movs	r3, #7
 800395c:	e027      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 800395e:	2306      	movs	r3, #6
 8003960:	e025      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003962:	2305      	movs	r3, #5
 8003964:	e023      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003966:	2304      	movs	r3, #4
 8003968:	e021      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 800396a:	2303      	movs	r3, #3
 800396c:	e01f      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 800396e:	2302      	movs	r3, #2
 8003970:	e01d      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003972:	2301      	movs	r3, #1
 8003974:	e01b      	b.n	80039ae <HAL_GPIO_Init+0x26a>
 8003976:	bf00      	nop
 8003978:	58000080 	.word	0x58000080
 800397c:	58024400 	.word	0x58024400
 8003980:	58000400 	.word	0x58000400
 8003984:	58020000 	.word	0x58020000
 8003988:	58020400 	.word	0x58020400
 800398c:	58020800 	.word	0x58020800
 8003990:	58020c00 	.word	0x58020c00
 8003994:	58021000 	.word	0x58021000
 8003998:	58021400 	.word	0x58021400
 800399c:	58021800 	.word	0x58021800
 80039a0:	58021c00 	.word	0x58021c00
 80039a4:	58022000 	.word	0x58022000
 80039a8:	58022400 	.word	0x58022400
 80039ac:	2300      	movs	r3, #0
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f002 0203 	and.w	r2, r2, #3
 80039b4:	0092      	lsls	r2, r2, #2
 80039b6:	4093      	lsls	r3, r2
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039be:	4938      	ldr	r1, [pc, #224]	; (8003aa0 <HAL_GPIO_Init+0x35c>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f47f ae63 	bne.w	8003758 <HAL_GPIO_Init+0x14>
  }
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	3724      	adds	r7, #36	; 0x24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	58000400 	.word	0x58000400

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <HAL_HSEM_FastTake+0x2c>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_HSEM_FastTake+0x30>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	58026400 	.word	0x58026400
 8003b08:	80000300 	.word	0x80000300

08003b0c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003b16:	4906      	ldr	r1, [pc, #24]	; (8003b30 <HAL_HSEM_Release+0x24>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	58026400 	.word	0x58026400

08003b34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e10b      	b.n	8003d5e <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f96e 	bl	8000e3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d008      	beq.n	8003ba8 <HAL_I2S_Init+0x74>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d004      	beq.n	8003ba8 <HAL_I2S_Init+0x74>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	f040 8085 	bne.w	8003cb2 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d058      	beq.n	8003c62 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b30      	cmp	r3, #48	; 0x30
 8003bc8:	d003      	beq.n	8003bd2 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003bce:	2bb0      	cmp	r3, #176	; 0xb0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e001      	b.n	8003bdc <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003bdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003be0:	f002 f94e 	bl	8005e80 <HAL_RCCEx_GetPeriphCLKFreq>
 8003be4:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bee:	d113      	bne.n	8003c18 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	461a      	mov	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	3305      	adds	r3, #5
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	e014      	b.n	8003c42 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003c18:	2220      	movs	r2, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	3305      	adds	r3, #5
 8003c40:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_I2S_Init+0x234>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e003      	b.n	8003c6a <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003c62:	2302      	movs	r3, #2
 8003c64:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_I2S_Init+0x142>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d002      	beq.n	8003c7c <HAL_I2S_Init+0x148>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2bff      	cmp	r3, #255	; 0xff
 8003c7a:	d907      	bls.n	8003c8c <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	f043 0210 	orr.w	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e068      	b.n	8003d5e <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9c:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_I2S_Init+0x238>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	0411      	lsls	r1, r2, #16
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	0612      	lsls	r2, r2, #24
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_I2S_Init+0x23c>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6851      	ldr	r1, [r2, #4]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6992      	ldr	r2, [r2, #24]
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a12      	ldr	r2, [r2, #32]
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cdc:	4311      	orrs	r1, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6912      	ldr	r2, [r2, #16]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f640 72f8 	movw	r2, #4088	; 0xff8
 8003cf8:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d08:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d007      	beq.n	8003d38 <HAL_I2S_Init+0x204>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d003      	beq.n	8003d38 <HAL_I2S_Init+0x204>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d10a      	bne.n	8003d4e <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	cccccccd 	.word	0xcccccccd
 8003d6c:	fe00ffff 	.word	0xfe00ffff
 8003d70:	fdff9040 	.word	0xfdff9040

08003d74 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0c0      	b.n	8003f1e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0b8      	b.n	8003f1e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2SEx_TransmitReceive_DMA+0x48>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e0b0      	b.n	8003f1e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = pTxData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2205      	movs	r2, #5
 8003df2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003e04:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	4a47      	ldr	r2, [pc, #284]	; (8003f28 <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e12:	4a46      	ldr	r2, [pc, #280]	; (8003f2c <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	4a45      	ldr	r2, [pc, #276]	; (8003f30 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 8003e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4619      	mov	r1, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3320      	adds	r3, #32
 8003e2e:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003e36:	f7fd ff09 	bl	8001c4c <HAL_DMA_Start_IT>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d011      	beq.n	8003e64 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	f043 0208 	orr.w	r2, r3, #8
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	e05c      	b.n	8003f1e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e80:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3330      	adds	r3, #48	; 0x30
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003e98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003e9a:	f7fd fed7 	bl	8001c4c <HAL_DMA_Start_IT>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	f043 0208 	orr.w	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e02a      	b.n	8003f1e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08003f65 	.word	0x08003f65
 8003f2c:	08003f49 	.word	0x08003f49
 8003f30:	08003f81 	.word	0x08003f81

08003f34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7fc fbf0 	bl	800073c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7fc fbc4 	bl	8000700 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f9c:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	f043 0208 	orr.w	r2, r3, #8
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff ffb8 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d00a      	beq.n	8003ff6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e040      	b.n	8004074 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e03e      	b.n	8004074 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ffe:	491f      	ldr	r1, [pc, #124]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4313      	orrs	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004006:	f7fd f99d 	bl	8001344 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800400c:	e009      	b.n	8004022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800400e:	f7fd f999 	bl	8001344 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401c:	d901      	bls.n	8004022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e028      	b.n	8004074 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800402a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402e:	d1ee      	bne.n	800400e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b1e      	cmp	r3, #30
 8004034:	d008      	beq.n	8004048 <HAL_PWREx_ConfigSupply+0x7c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b2e      	cmp	r3, #46	; 0x2e
 800403a:	d005      	beq.n	8004048 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b1d      	cmp	r3, #29
 8004040:	d002      	beq.n	8004048 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b2d      	cmp	r3, #45	; 0x2d
 8004046:	d114      	bne.n	8004072 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004048:	f7fd f97c 	bl	8001344 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800404e:	e009      	b.n	8004064 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004050:	f7fd f978 	bl	8001344 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800405e:	d901      	bls.n	8004064 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_PWREx_ConfigSupply+0xb0>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d1ee      	bne.n	8004050 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024800 	.word	0x58024800

08004080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f000 bc1d 	b.w	80048ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8087 	beq.w	80041b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d007      	beq.n	80040c8 <HAL_RCC_OscConfig+0x48>
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b18      	cmp	r3, #24
 80040bc:	d110      	bne.n	80040e0 <HAL_RCC_OscConfig+0x60>
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d06c      	beq.n	80041ae <HAL_RCC_OscConfig+0x12e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d168      	bne.n	80041ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e3f6      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCC_OscConfig+0x78>
 80040ea:	4b87      	ldr	r3, [pc, #540]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a86      	ldr	r2, [pc, #536]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e02e      	b.n	8004156 <HAL_RCC_OscConfig+0xd6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10c      	bne.n	800411a <HAL_RCC_OscConfig+0x9a>
 8004100:	4b81      	ldr	r3, [pc, #516]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a80      	ldr	r2, [pc, #512]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e01d      	b.n	8004156 <HAL_RCC_OscConfig+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004122:	d10c      	bne.n	800413e <HAL_RCC_OscConfig+0xbe>
 8004124:	4b78      	ldr	r3, [pc, #480]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a77      	ldr	r2, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800412a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b75      	ldr	r3, [pc, #468]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e00b      	b.n	8004156 <HAL_RCC_OscConfig+0xd6>
 800413e:	4b72      	ldr	r3, [pc, #456]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a71      	ldr	r2, [pc, #452]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6e      	ldr	r2, [pc, #440]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d013      	beq.n	8004186 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fd f8f1 	bl	8001344 <HAL_GetTick>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004166:	f7fd f8ed 	bl	8001344 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	; 0x64
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e3aa      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0xe6>
 8004184:	e014      	b.n	80041b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd f8dd 	bl	8001344 <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418e:	f7fd f8d9 	bl	8001344 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	; 0x64
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e396      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x10e>
 80041ac:	e000      	b.n	80041b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80cb 	beq.w	8004354 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041be:	4b52      	ldr	r3, [pc, #328]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041c8:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_RCC_OscConfig+0x164>
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b18      	cmp	r3, #24
 80041d8:	d156      	bne.n	8004288 <HAL_RCC_OscConfig+0x208>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d151      	bne.n	8004288 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e4:	4b48      	ldr	r3, [pc, #288]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_OscConfig+0x17c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e368      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041fc:	4b42      	ldr	r3, [pc, #264]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 0219 	bic.w	r2, r3, #25
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800420e:	f7fd f899 	bl	8001344 <HAL_GetTick>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004216:	f7fd f895 	bl	8001344 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e352      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004228:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	f7fd f892 	bl	800135c <HAL_GetREVID>
 8004238:	4603      	mov	r3, r0
 800423a:	f241 0203 	movw	r2, #4099	; 0x1003
 800423e:	4293      	cmp	r3, r2
 8004240:	d817      	bhi.n	8004272 <HAL_RCC_OscConfig+0x1f2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d108      	bne.n	800425c <HAL_RCC_OscConfig+0x1dc>
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004252:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425a:	e07b      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	031b      	lsls	r3, r3, #12
 800426a:	4927      	ldr	r1, [pc, #156]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004270:	e070      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	4921      	ldr	r1, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004286:	e065      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d048      	beq.n	8004322 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 0219 	bic.w	r2, r3, #25
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	491a      	ldr	r1, [pc, #104]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd f84f 	bl	8001344 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fd f84b 	bl	8001344 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e308      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	f7fd f848 	bl	800135c <HAL_GetREVID>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d81a      	bhi.n	800430c <HAL_RCC_OscConfig+0x28c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d108      	bne.n	80042f0 <HAL_RCC_OscConfig+0x270>
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	6053      	str	r3, [r2, #4]
 80042ee:	e031      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	4902      	ldr	r1, [pc, #8]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	e026      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
 8004306:	bf00      	nop
 8004308:	58024400 	.word	0x58024400
 800430c:	4b9a      	ldr	r3, [pc, #616]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4997      	ldr	r1, [pc, #604]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
 8004320:	e018      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a94      	ldr	r2, [pc, #592]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd f809 	bl	8001344 <HAL_GetTick>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fd f805 	bl	8001344 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e2c2      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004348:	4b8b      	ldr	r3, [pc, #556]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a9 	beq.w	80044b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b85      	ldr	r3, [pc, #532]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800436c:	4b82      	ldr	r3, [pc, #520]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x308>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b18      	cmp	r3, #24
 800437c:	d13a      	bne.n	80043f4 <HAL_RCC_OscConfig+0x374>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d135      	bne.n	80043f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_OscConfig+0x320>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e296      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a0:	f7fc ffdc 	bl	800135c <HAL_GetREVID>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d817      	bhi.n	80043de <HAL_RCC_OscConfig+0x35e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_OscConfig+0x348>
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043be:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c6:	e075      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c8:	4b6b      	ldr	r3, [pc, #428]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	4968      	ldr	r1, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043dc:	e06a      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043de:	4b66      	ldr	r3, [pc, #408]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	4962      	ldr	r1, [pc, #392]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f2:	e05f      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d042      	beq.n	8004482 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043fc:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a5d      	ldr	r2, [pc, #372]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fc ff9c 	bl	8001344 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004410:	f7fc ff98 	bl	8001344 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e255      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004422:	4b55      	ldr	r3, [pc, #340]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800442e:	f7fc ff95 	bl	800135c <HAL_GetREVID>
 8004432:	4603      	mov	r3, r0
 8004434:	f241 0203 	movw	r2, #4099	; 0x1003
 8004438:	4293      	cmp	r3, r2
 800443a:	d817      	bhi.n	800446c <HAL_RCC_OscConfig+0x3ec>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d108      	bne.n	8004456 <HAL_RCC_OscConfig+0x3d6>
 8004444:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800444c:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800444e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004452:	6053      	str	r3, [r2, #4]
 8004454:	e02e      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	069b      	lsls	r3, r3, #26
 8004464:	4944      	ldr	r1, [pc, #272]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
 800446a:	e023      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
 800446c:	4b42      	ldr	r3, [pc, #264]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	493f      	ldr	r1, [pc, #252]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	60cb      	str	r3, [r1, #12]
 8004480:	e018      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fc ff59 	bl	8001344 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004496:	f7fc ff55 	bl	8001344 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e212      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d036      	beq.n	800452e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d019      	beq.n	80044fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fc ff36 	bl	8001344 <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fc ff32 	bl	8001344 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1ef      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x45c>
 80044fa:	e018      	b.n	800452e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fc ff1c 	bl	8001344 <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004510:	f7fc ff18 	bl	8001344 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1d5      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d039      	beq.n	80045ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800454c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800454e:	f7fc fef9 	bl	8001344 <HAL_GetTick>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004556:	f7fc fef5 	bl	8001344 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e1b2      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x4d6>
 8004574:	e01b      	b.n	80045ae <HAL_RCC_OscConfig+0x52e>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800457c:	4b9b      	ldr	r3, [pc, #620]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a9a      	ldr	r2, [pc, #616]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004586:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004588:	f7fc fedc 	bl	8001344 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004590:	f7fc fed8 	bl	8001344 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e195      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8081 	beq.w	80046be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045bc:	4b8c      	ldr	r3, [pc, #560]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a8b      	ldr	r2, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c8:	f7fc febc 	bl	8001344 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fc feb8 	bl	8001344 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e175      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e2:	4b83      	ldr	r3, [pc, #524]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x584>
 80045f6:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	e02d      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x5a6>
 800460c:	4b77      	ldr	r3, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a76      	ldr	r2, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a73      	ldr	r2, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c8>
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a6b      	ldr	r2, [pc, #428]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a64      	ldr	r2, [pc, #400]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fc fe6c 	bl	8001344 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fc fe68 	bl	8001344 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e123      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x5f0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fc fe56 	bl	8001344 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fc fe52 	bl	8001344 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e10d      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046b2:	4b4e      	ldr	r3, [pc, #312]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8102 	beq.w	80048cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046c8:	4b48      	ldr	r3, [pc, #288]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d0:	2b18      	cmp	r3, #24
 80046d2:	f000 80bd 	beq.w	8004850 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 809e 	bne.w	800481c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a41      	ldr	r2, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fc fe2a 	bl	8001344 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fc fe26 	bl	8001344 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0e3      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x774>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	430a      	orrs	r2, r1
 8004726:	4931      	ldr	r1, [pc, #196]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	628b      	str	r3, [r1, #40]	; 0x28
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	3b01      	subs	r3, #1
 8004732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	3b01      	subs	r3, #1
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	b29b      	uxth	r3, r3
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	3b01      	subs	r3, #1
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800475c:	4923      	ldr	r1, [pc, #140]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a21      	ldr	r2, [pc, #132]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCC_OscConfig+0x778>)
 8004774:	4013      	ands	r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800477a:	00d2      	lsls	r2, r2, #3
 800477c:	491b      	ldr	r1, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f023 020c 	bic.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4917      	ldr	r1, [pc, #92]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004794:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f023 0202 	bic.w	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	4912      	ldr	r1, [pc, #72]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a04      	ldr	r2, [pc, #16]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fc fdaf 	bl	8001344 <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e8:	e011      	b.n	800480e <HAL_RCC_OscConfig+0x78e>
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	58024800 	.word	0x58024800
 80047f4:	fffffc0c 	.word	0xfffffc0c
 80047f8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fc fda2 	bl	8001344 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e05f      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x77c>
 800481a:	e057      	b.n	80048cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481c:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc fd8c 	bl	8001344 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc fd88 	bl	8001344 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e045      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004842:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x7b0>
 800484e:	e03d      	b.n	80048cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_OscConfig+0x858>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b01      	cmp	r3, #1
 8004862:	d031      	beq.n	80048c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0203 	and.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d12a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d122      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d11a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0a5b      	lsrs	r3, r3, #9
 8004896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d111      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d108      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3730      	adds	r7, #48	; 0x30
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400

080048dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e19c      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b8a      	ldr	r3, [pc, #552]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b87      	ldr	r3, [pc, #540]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	4985      	ldr	r1, [pc, #532]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b83      	ldr	r3, [pc, #524]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e184      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004938:	429a      	cmp	r2, r3
 800493a:	d908      	bls.n	800494e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800493c:	4b78      	ldr	r3, [pc, #480]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4975      	ldr	r1, [pc, #468]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 800494a:	4313      	orrs	r3, r2
 800494c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	4b70      	ldr	r3, [pc, #448]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004966:	429a      	cmp	r2, r3
 8004968:	d908      	bls.n	800497c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800496a:	4b6d      	ldr	r3, [pc, #436]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	496a      	ldr	r1, [pc, #424]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004978:	4313      	orrs	r3, r2
 800497a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	4b64      	ldr	r3, [pc, #400]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004994:	429a      	cmp	r2, r3
 8004996:	d908      	bls.n	80049aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	495e      	ldr	r1, [pc, #376]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d010      	beq.n	80049d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d908      	bls.n	80049d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049c6:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4953      	ldr	r1, [pc, #332]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d908      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f023 020f 	bic.w	r2, r3, #15
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4947      	ldr	r1, [pc, #284]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d055      	beq.n	8004abe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a12:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4940      	ldr	r1, [pc, #256]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d121      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0f6      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a44:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d115      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0ea      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a5c:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0de      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0d6      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4925      	ldr	r1, [pc, #148]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fc fc59 	bl	8001344 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a96:	f7fc fc55 	bl	8001344 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0be      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aac:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d1eb      	bne.n	8004a96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d010      	beq.n	8004aec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d208      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	490e      	ldr	r1, [pc, #56]	; (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d214      	bcs.n	8004b24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 020f 	bic.w	r2, r3, #15
 8004b02:	4906      	ldr	r1, [pc, #24]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e086      	b.n	8004c2a <HAL_RCC_ClockConfig+0x34e>
 8004b1c:	52002000 	.word	0x52002000
 8004b20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d208      	bcs.n	8004b52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b40:	4b3c      	ldr	r3, [pc, #240]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	4939      	ldr	r1, [pc, #228]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d010      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d208      	bcs.n	8004b80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	492e      	ldr	r1, [pc, #184]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d208      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	4922      	ldr	r1, [pc, #136]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d208      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4917      	ldr	r1, [pc, #92]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bdc:	f000 f834 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	4912      	ldr	r1, [pc, #72]	; (8004c38 <HAL_RCC_ClockConfig+0x35c>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_RCC_ClockConfig+0x358>)
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <HAL_RCC_ClockConfig+0x35c>)
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x360>)
 8004c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x364>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_RCC_ClockConfig+0x368>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc fb46 	bl	80012b0 <HAL_InitTick>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	0800845c 	.word	0x0800845c
 8004c3c:	24000004 	.word	0x24000004
 8004c40:	24000000 	.word	0x24000000
 8004c44:	2400001c 	.word	0x2400001c

08004c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4e:	4bb3      	ldr	r3, [pc, #716]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c56:	2b18      	cmp	r3, #24
 8004c58:	f200 8155 	bhi.w	8004f06 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004f07 	.word	0x08004f07
 8004c6c:	08004f07 	.word	0x08004f07
 8004c70:	08004f07 	.word	0x08004f07
 8004c74:	08004f07 	.word	0x08004f07
 8004c78:	08004f07 	.word	0x08004f07
 8004c7c:	08004f07 	.word	0x08004f07
 8004c80:	08004f07 	.word	0x08004f07
 8004c84:	08004cef 	.word	0x08004cef
 8004c88:	08004f07 	.word	0x08004f07
 8004c8c:	08004f07 	.word	0x08004f07
 8004c90:	08004f07 	.word	0x08004f07
 8004c94:	08004f07 	.word	0x08004f07
 8004c98:	08004f07 	.word	0x08004f07
 8004c9c:	08004f07 	.word	0x08004f07
 8004ca0:	08004f07 	.word	0x08004f07
 8004ca4:	08004cf5 	.word	0x08004cf5
 8004ca8:	08004f07 	.word	0x08004f07
 8004cac:	08004f07 	.word	0x08004f07
 8004cb0:	08004f07 	.word	0x08004f07
 8004cb4:	08004f07 	.word	0x08004f07
 8004cb8:	08004f07 	.word	0x08004f07
 8004cbc:	08004f07 	.word	0x08004f07
 8004cc0:	08004f07 	.word	0x08004f07
 8004cc4:	08004cfb 	.word	0x08004cfb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc8:	4b94      	ldr	r3, [pc, #592]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cd4:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	4a90      	ldr	r2, [pc, #576]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ce6:	e111      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ce8:	4b8d      	ldr	r3, [pc, #564]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cea:	61bb      	str	r3, [r7, #24]
    break;
 8004cec:	e10e      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cee:	4b8d      	ldr	r3, [pc, #564]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cf0:	61bb      	str	r3, [r7, #24]
    break;
 8004cf2:	e10b      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004cf4:	4b8c      	ldr	r3, [pc, #560]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cf6:	61bb      	str	r3, [r7, #24]
    break;
 8004cf8:	e108      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d04:	4b85      	ldr	r3, [pc, #532]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d10:	4b82      	ldr	r3, [pc, #520]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d1a:	4b80      	ldr	r3, [pc, #512]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80e1 	beq.w	8004f00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	f000 8083 	beq.w	8004e4c <HAL_RCC_GetSysClockFreq+0x204>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	f200 80a1 	bhi.w	8004e90 <HAL_RCC_GetSysClockFreq+0x248>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x114>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d056      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d5a:	e099      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02d      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d68:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	08db      	lsrs	r3, r3, #3
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	4a6b      	ldr	r2, [pc, #428]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b62      	ldr	r3, [pc, #392]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004dc2:	e087      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e06:	e065      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b40      	ldr	r3, [pc, #256]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	e043      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e021      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ed4:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	0a5b      	lsrs	r3, r3, #9
 8004eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ede:	3301      	adds	r3, #1
 8004ee0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef8:	ee17 3a90 	vmov	r3, s15
 8004efc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004efe:	e005      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    break;
 8004f04:	e002      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f08:	61bb      	str	r3, [r7, #24]
    break;
 8004f0a:	bf00      	nop
  }

  return sysclockfreq;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	03d09000 	.word	0x03d09000
 8004f24:	003d0900 	.word	0x003d0900
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	46000000 	.word	0x46000000
 8004f30:	4c742400 	.word	0x4c742400
 8004f34:	4a742400 	.word	0x4a742400
 8004f38:	4af42400 	.word	0x4af42400

08004f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f42:	f7ff fe81 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490f      	ldr	r1, [pc, #60]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f6a:	5cd3      	ldrb	r3, [r2, r3]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	fa22 f303 	lsr.w	r3, r2, r3
 8004f76:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f7a:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	0800845c 	.word	0x0800845c
 8004f94:	24000004 	.word	0x24000004
 8004f98:	24000000 	.word	0x24000000

08004f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004fa0:	f7ff ffcc 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	0800845c 	.word	0x0800845c

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fcc:	f7ff ffb6 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4904      	ldr	r1, [pc, #16]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	0800845c 	.word	0x0800845c

08004ff4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005000:	2300      	movs	r3, #0
 8005002:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d03f      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005014:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005018:	d02a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800501a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800501e:	d824      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005024:	d018      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800502a:	d81e      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005034:	d007      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005036:	e018      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005038:	4ba3      	ldr	r3, [pc, #652]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	4aa2      	ldr	r2, [pc, #648]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800503e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005044:	e015      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	2102      	movs	r1, #2
 800504c:	4618      	mov	r0, r3
 800504e:	f001 fff9 	bl	8007044 <RCCEx_PLL2_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005056:	e00c      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3324      	adds	r3, #36	; 0x24
 800505c:	2102      	movs	r1, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f002 f8a2 	bl	80071a8 <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
      break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005072:	7dfb      	ldrb	r3, [r7, #23]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005078:	4b93      	ldr	r3, [pc, #588]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005084:	4990      	ldr	r1, [pc, #576]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005086:	4313      	orrs	r3, r2
 8005088:	650b      	str	r3, [r1, #80]	; 0x50
 800508a:	e001      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03d      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d826      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050c1 	.word	0x080050c1
 80050b0:	080050cf 	.word	0x080050cf
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	080050f9 	.word	0x080050f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a80      	ldr	r2, [pc, #512]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e015      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 ffb5 	bl	8007044 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050de:	e00c      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3324      	adds	r3, #36	; 0x24
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 f85e 	bl	80071a8 <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050f0:	e003      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
      break;
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80050f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005100:	4b71      	ldr	r3, [pc, #452]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	f023 0207 	bic.w	r2, r3, #7
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	496e      	ldr	r1, [pc, #440]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	650b      	str	r3, [r1, #80]	; 0x50
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005120:	2b00      	cmp	r3, #0
 8005122:	d042      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d02b      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d825      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005134:	2bc0      	cmp	r3, #192	; 0xc0
 8005136:	d028      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005138:	2bc0      	cmp	r3, #192	; 0xc0
 800513a:	d821      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d016      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005140:	2b80      	cmp	r3, #128	; 0x80
 8005142:	d81d      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d007      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800514c:	e018      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514e:	4b5e      	ldr	r3, [pc, #376]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800515a:	e017      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f001 ff6e 	bl	8007044 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800516c:	e00e      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f002 f817 	bl	80071a8 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800517e:	e005      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	e002      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800518a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005192:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	494a      	ldr	r1, [pc, #296]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	650b      	str	r3, [r1, #80]	; 0x50
 80051a4:	e001      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d049      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c0:	d030      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c6:	d82a      	bhi.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051cc:	d02c      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80051ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051d2:	d824      	bhi.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d8:	d018      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d81e      	bhi.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e8:	d007      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80051ea:	e018      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051f8:	e017      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f001 ff1f 	bl	8007044 <RCCEx_PLL2_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800520a:	e00e      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f001 ffc8 	bl	80071a8 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800521c:	e005      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
      break;
 8005222:	e002      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005230:	4b25      	ldr	r3, [pc, #148]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800523e:	4922      	ldr	r1, [pc, #136]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	658b      	str	r3, [r1, #88]	; 0x58
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04b      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800525c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005260:	d030      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005266:	d82a      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005268:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800526c:	d02e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800526e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005272:	d824      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005278:	d018      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800527a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800527e:	d81e      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005288:	d007      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800528a:	e018      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005298:	e019      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fecf 	bl	8007044 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052aa:	e010      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 ff78 	bl	80071a8 <RCCEx_PLL3_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052bc:	e007      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
      break;
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80052c8:	58024400 	.word	0x58024400
      break;
 80052cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052d4:	4b99      	ldr	r3, [pc, #612]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052e2:	4996      	ldr	r1, [pc, #600]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	658b      	str	r3, [r1, #88]	; 0x58
 80052e8:	e001      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d032      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d01c      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005302:	2b30      	cmp	r3, #48	; 0x30
 8005304:	d817      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005306:	2b20      	cmp	r3, #32
 8005308:	d00c      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800530a:	2b20      	cmp	r3, #32
 800530c:	d813      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005312:	2b10      	cmp	r3, #16
 8005314:	d10f      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005316:	4b89      	ldr	r3, [pc, #548]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a88      	ldr	r2, [pc, #544]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800531c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005322:	e00e      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fe8a 	bl	8007044 <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005334:	e005      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
      break;
 800533a:	e002      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005348:	4b7c      	ldr	r3, [pc, #496]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005354:	4979      	ldr	r1, [pc, #484]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005356:	4313      	orrs	r3, r2
 8005358:	64cb      	str	r3, [r1, #76]	; 0x4c
 800535a:	e001      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d047      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005374:	d030      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800537a:	d82a      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800537c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005380:	d02c      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005386:	d824      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538c:	d018      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d81e      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d007      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800539e:	e018      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a0:	4b66      	ldr	r3, [pc, #408]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	4a65      	ldr	r2, [pc, #404]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053ac:	e017      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 fe45 	bl	8007044 <RCCEx_PLL2_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053be:	e00e      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3324      	adds	r3, #36	; 0x24
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 feee 	bl	80071a8 <RCCEx_PLL3_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053d0:	e005      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
      break;
 80053d6:	e002      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053e4:	4b55      	ldr	r3, [pc, #340]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f0:	4952      	ldr	r1, [pc, #328]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	650b      	str	r3, [r1, #80]	; 0x50
 80053f6:	e001      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d049      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005410:	d02e      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005416:	d828      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800541c:	d02a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800541e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005422:	d822      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005424:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005428:	d026      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800542a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800542e:	d81c      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005434:	d010      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543a:	d816      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d111      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f001 fdf9 	bl	8007044 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005456:	e012      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3324      	adds	r3, #36	; 0x24
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fea2 	bl	80071a8 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005468:	e009      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
      break;
 800546e:	e006      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005470:	bf00      	nop
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005474:	bf00      	nop
 8005476:	e002      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800547c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d109      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005484:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	492a      	ldr	r1, [pc, #168]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005492:	4313      	orrs	r3, r2
 8005494:	650b      	str	r3, [r1, #80]	; 0x50
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d04d      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b2:	d02e      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80054b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b8:	d828      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d02a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d822      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054ca:	d026      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80054cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054d0:	d81c      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d6:	d010      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 80054d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054dc:	d816      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01d      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d111      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 fda8 	bl	8007044 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054f8:	e012      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f001 fe51 	bl	80071a8 <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800550a:	e009      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	e006      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005512:	bf00      	nop
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800551e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005534:	4901      	ldr	r1, [pc, #4]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005536:	4313      	orrs	r3, r2
 8005538:	658b      	str	r3, [r1, #88]	; 0x58
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800553c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d02f      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005558:	d00e      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800555a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555e:	d814      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005568:	d10f      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556a:	4baf      	ldr	r3, [pc, #700]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	4aae      	ldr	r2, [pc, #696]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005576:	e00c      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fd60 	bl	8007044 <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
      break;
 800558e:	e000      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005598:	4ba3      	ldr	r3, [pc, #652]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a4:	49a0      	ldr	r1, [pc, #640]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	650b      	str	r3, [r1, #80]	; 0x50
 80055aa:	e001      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d032      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d81b      	bhi.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	08005603 	.word	0x08005603
 80055d0:	080055dd 	.word	0x080055dd
 80055d4:	080055eb 	.word	0x080055eb
 80055d8:	08005603 	.word	0x08005603
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b92      	ldr	r3, [pc, #584]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a91      	ldr	r2, [pc, #580]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055e8:	e00c      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fd27 	bl	8007044 <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800560a:	4b87      	ldr	r3, [pc, #540]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	f023 0203 	bic.w	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	4984      	ldr	r1, [pc, #528]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005618:	4313      	orrs	r3, r2
 800561a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800561c:	e001      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8086 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005630:	4b7e      	ldr	r3, [pc, #504]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a7d      	ldr	r2, [pc, #500]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800563c:	f7fb fe82 	bl	8001344 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fb fe7e 	bl	8001344 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d902      	bls.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	75fb      	strb	r3, [r7, #23]
        break;
 8005656:	e005      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005658:	4b74      	ldr	r3, [pc, #464]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ef      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d166      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800566c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005674:	4053      	eors	r3, r2
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	2b00      	cmp	r3, #0
 800567c:	d013      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005688:	4b67      	ldr	r3, [pc, #412]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	4a66      	ldr	r2, [pc, #408]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a63      	ldr	r2, [pc, #396]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056a0:	4a61      	ldr	r2, [pc, #388]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b0:	d115      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fb fe47 	bl	8001344 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b8:	e00b      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fb fe43 	bl	8001344 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d902      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	75fb      	strb	r3, [r7, #23]
            break;
 80056d0:	e005      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ed      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d126      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f2:	d10d      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80056f4:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005702:	0919      	lsrs	r1, r3, #4
 8005704:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005706:	400b      	ands	r3, r1
 8005708:	4947      	ldr	r1, [pc, #284]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]
 800570e:	e005      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005710:	4b45      	ldr	r3, [pc, #276]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	4a44      	ldr	r2, [pc, #272]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005716:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800571a:	6113      	str	r3, [r2, #16]
 800571c:	4b42      	ldr	r3, [pc, #264]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800571e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572a:	493f      	ldr	r1, [pc, #252]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800572c:	4313      	orrs	r3, r2
 800572e:	670b      	str	r3, [r1, #112]	; 0x70
 8005730:	e004      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	75bb      	strb	r3, [r7, #22]
 8005736:	e001      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8085 	beq.w	8005854 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800574e:	2b28      	cmp	r3, #40	; 0x28
 8005750:	d866      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005835 	.word	0x08005835
 800575c:	08005821 	.word	0x08005821
 8005760:	08005821 	.word	0x08005821
 8005764:	08005821 	.word	0x08005821
 8005768:	08005821 	.word	0x08005821
 800576c:	08005821 	.word	0x08005821
 8005770:	08005821 	.word	0x08005821
 8005774:	08005821 	.word	0x08005821
 8005778:	080057fd 	.word	0x080057fd
 800577c:	08005821 	.word	0x08005821
 8005780:	08005821 	.word	0x08005821
 8005784:	08005821 	.word	0x08005821
 8005788:	08005821 	.word	0x08005821
 800578c:	08005821 	.word	0x08005821
 8005790:	08005821 	.word	0x08005821
 8005794:	08005821 	.word	0x08005821
 8005798:	0800580f 	.word	0x0800580f
 800579c:	08005821 	.word	0x08005821
 80057a0:	08005821 	.word	0x08005821
 80057a4:	08005821 	.word	0x08005821
 80057a8:	08005821 	.word	0x08005821
 80057ac:	08005821 	.word	0x08005821
 80057b0:	08005821 	.word	0x08005821
 80057b4:	08005821 	.word	0x08005821
 80057b8:	08005835 	.word	0x08005835
 80057bc:	08005821 	.word	0x08005821
 80057c0:	08005821 	.word	0x08005821
 80057c4:	08005821 	.word	0x08005821
 80057c8:	08005821 	.word	0x08005821
 80057cc:	08005821 	.word	0x08005821
 80057d0:	08005821 	.word	0x08005821
 80057d4:	08005821 	.word	0x08005821
 80057d8:	08005835 	.word	0x08005835
 80057dc:	08005821 	.word	0x08005821
 80057e0:	08005821 	.word	0x08005821
 80057e4:	08005821 	.word	0x08005821
 80057e8:	08005821 	.word	0x08005821
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005821 	.word	0x08005821
 80057f4:	08005821 	.word	0x08005821
 80057f8:	08005835 	.word	0x08005835
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2101      	movs	r1, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fc1e 	bl	8007044 <RCCEx_PLL2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800580c:	e013      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3324      	adds	r3, #36	; 0x24
 8005812:	2101      	movs	r1, #1
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fcc7 	bl	80071a8 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800581e:	e00a      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
      break;
 8005824:	e007      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	58024800 	.word	0x58024800
 8005830:	00ffffcf 	.word	0x00ffffcf
      break;
 8005834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800583c:	4b96      	ldr	r3, [pc, #600]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005848:	4993      	ldr	r1, [pc, #588]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	654b      	str	r3, [r1, #84]	; 0x54
 800584e:	e001      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d038      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	2b05      	cmp	r3, #5
 8005866:	d821      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	080058b3 	.word	0x080058b3
 8005874:	08005889 	.word	0x08005889
 8005878:	0800589b 	.word	0x0800589b
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058b3 	.word	0x080058b3
 8005884:	080058b3 	.word	0x080058b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	2101      	movs	r1, #1
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fbd8 	bl	8007044 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005898:	e00c      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fc81 	bl	80071a8 <RCCEx_PLL3_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80058b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058ba:	4b77      	ldr	r3, [pc, #476]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f023 0207 	bic.w	r2, r3, #7
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	4974      	ldr	r1, [pc, #464]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	654b      	str	r3, [r1, #84]	; 0x54
 80058cc:	e001      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d03a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	d821      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005933 	.word	0x08005933
 80058f4:	08005909 	.word	0x08005909
 80058f8:	0800591b 	.word	0x0800591b
 80058fc:	08005933 	.word	0x08005933
 8005900:	08005933 	.word	0x08005933
 8005904:	08005933 	.word	0x08005933
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	2101      	movs	r1, #1
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fb98 	bl	8007044 <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005918:	e00c      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3324      	adds	r3, #36	; 0x24
 800591e:	2101      	movs	r1, #1
 8005920:	4618      	mov	r0, r3
 8005922:	f001 fc41 	bl	80071a8 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800592a:	e003      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
      break;
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005934:	7dfb      	ldrb	r3, [r7, #23]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800593a:	4b57      	ldr	r3, [pc, #348]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f023 0207 	bic.w	r2, r3, #7
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	4953      	ldr	r1, [pc, #332]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	658b      	str	r3, [r1, #88]	; 0x58
 800594e:	e001      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d04b      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800596a:	d02e      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800596c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005970:	d828      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d02a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d822      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800597e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005982:	d026      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005984:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005988:	d81c      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800598a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598e:	d010      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005994:	d816      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01d      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800599a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800599e:	d111      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fb4c 	bl	8007044 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059b0:	e012      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2102      	movs	r1, #2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fbf5 	bl	80071a8 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059c2:	e009      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ec:	492a      	ldr	r1, [pc, #168]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	654b      	str	r3, [r1, #84]	; 0x54
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d04d      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a0e:	d02e      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005a10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a14:	d828      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1a:	d02a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d822      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a26:	d026      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a2c:	d81c      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a32:	d010      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a38:	d816      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01d      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d111      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fafa 	bl	8007044 <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a54:	e012      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3324      	adds	r3, #36	; 0x24
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 fba3 	bl	80071a8 <RCCEx_PLL3_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a66:	e009      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a90:	4901      	ldr	r1, [pc, #4]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	658b      	str	r3, [r1, #88]	; 0x58
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d04b      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ab6:	d02e      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005abc:	d828      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d02a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac8:	d822      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005aca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ace:	d026      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005ad0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ad4:	d81c      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ada:	d010      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae0:	d816      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01d      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aea:	d111      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 faa6 	bl	8007044 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005afc:	e012      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3324      	adds	r3, #36	; 0x24
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fb4f 	bl	80071a8 <RCCEx_PLL3_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b0e:	e009      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	e006      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b2a:	4b9d      	ldr	r3, [pc, #628]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b38:	4999      	ldr	r1, [pc, #612]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8005b3e:	e001      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d10a      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3324      	adds	r3, #36	; 0x24
 8005b60:	2102      	movs	r1, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fb20 	bl	80071a8 <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b72:	4b8b      	ldr	r3, [pc, #556]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b80:	4987      	ldr	r1, [pc, #540]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3324      	adds	r3, #36	; 0x24
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 faff 	bl	80071a8 <RCCEx_PLL3_Config>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bb4:	4b7a      	ldr	r3, [pc, #488]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc2:	4977      	ldr	r1, [pc, #476]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d034      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bde:	d01d      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be4:	d817      	bhi.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bee:	d009      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005bf0:	e011      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fa23 	bl	8007044 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c02:	e00c      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	2102      	movs	r1, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 facc 	bl	80071a8 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	e000      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c24:	4b5e      	ldr	r3, [pc, #376]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c32:	495b      	ldr	r1, [pc, #364]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	658b      	str	r3, [r1, #88]	; 0x58
 8005c38:	e001      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d033      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c54:	d01c      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c5a:	d816      	bhi.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c60:	d003      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c66:	d007      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005c68:	e00f      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	4a4c      	ldr	r2, [pc, #304]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c76:	e00c      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fa92 	bl	80071a8 <RCCEx_PLL3_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8e:	e000      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	493e      	ldr	r1, [pc, #248]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	654b      	str	r3, [r1, #84]	; 0x54
 8005cac:	e001      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d029      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d007      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005ccc:	e00f      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cce:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a33      	ldr	r2, [pc, #204]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f9ae 	bl	8007044 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cfa:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4926      	ldr	r1, [pc, #152]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d0c:	e001      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3324      	adds	r3, #36	; 0x24
 8005d22:	2102      	movs	r1, #2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fa3f 	bl	80071a8 <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d033      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d48:	d017      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4e:	d811      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d013      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5a:	d80b      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d64:	d106      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d66:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	4a0d      	ldr	r2, [pc, #52]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d72:	e007      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
      break;
 8005d78:	e004      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d96:	4902      	ldr	r1, [pc, #8]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	654b      	str	r3, [r1, #84]	; 0x54
 8005d9c:	e004      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	492e      	ldr	r1, [pc, #184]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005de0:	4926      	ldr	r1, [pc, #152]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfe:	491f      	ldr	r1, [pc, #124]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e10:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e1a:	6113      	str	r3, [r2, #16]
 8005e1c:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e26:	4915      	ldr	r1, [pc, #84]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da08      	bge.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e34:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	490e      	ldr	r1, [pc, #56]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	4906      	ldr	r1, [pc, #24]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005e66:	7dbb      	ldrb	r3, [r7, #22]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400

08005e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b090      	sub	sp, #64	; 0x40
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8e:	f040 8095 	bne.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005e92:	4b97      	ldr	r3, [pc, #604]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	f200 8088 	bhi.w	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ec1 	.word	0x08005ec1
 8005eb0:	08005ee9 	.word	0x08005ee9
 8005eb4:	08005f11 	.word	0x08005f11
 8005eb8:	08005fad 	.word	0x08005fad
 8005ebc:	08005f39 	.word	0x08005f39
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ec0:	4b8b      	ldr	r3, [pc, #556]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ecc:	d108      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ff64 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005edc:	f000 bc94 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ee4:	f000 bc90 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ee8:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef4:	d108      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef6:	f107 0318 	add.w	r3, r7, #24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fca8 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f04:	f000 bc80 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f0c:	f000 bc7c 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f10:	4b77      	ldr	r3, [pc, #476]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1c:	d108      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f1e:	f107 030c 	add.w	r3, r7, #12
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fde8 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f2c:	f000 bc6c 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f34:	f000 bc68 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f38:	4b6d      	ldr	r3, [pc, #436]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f42:	4b6b      	ldr	r3, [pc, #428]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f54:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a65      	ldr	r2, [pc, #404]	; (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f66:	e01f      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f68:	4b61      	ldr	r3, [pc, #388]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f74:	d106      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7c:	d102      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f7e:	4b5e      	ldr	r3, [pc, #376]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f82:	e011      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f84:	4b5a      	ldr	r3, [pc, #360]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f90:	d106      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f9a:	4b58      	ldr	r3, [pc, #352]	; (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005fa4:	f000 bc30 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005fa8:	f000 bc2e 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fac:	4b54      	ldr	r3, [pc, #336]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb0:	f000 bc2a 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb8:	f000 bc26 	b.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc2:	f040 809f 	bne.w	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd6:	d04d      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fde:	f200 8084 	bhi.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe6:	d07d      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2bc0      	cmp	r3, #192	; 0xc0
 8005fec:	d87d      	bhi.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d02d      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	d877      	bhi.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d012      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006006:	e070      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006008:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006014:	d107      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fec0 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006024:	e3f0      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800602a:	e3ed      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602c:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603a:	f107 0318 	add.w	r3, r7, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fc06 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006048:	e3de      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800604e:	e3db      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006050:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605c:	d107      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fd48 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800606c:	e3cc      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006072:	e3c9      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006074:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800607c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800607e:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b04      	cmp	r3, #4
 8006088:	d10c      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a2:	e01e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060a4:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060b8:	d102      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060ba:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060be:	e010      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060cc:	d106      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d4:	d102      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060da:	e002      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060e0:	e392      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060e2:	e391      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060e8:	e38e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ee:	e38b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060f0:	58024400 	.word	0x58024400
 80060f4:	03d09000 	.word	0x03d09000
 80060f8:	003d0900 	.word	0x003d0900
 80060fc:	007a1200 	.word	0x007a1200
 8006100:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	f040 809c 	bne.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800610e:	4b9d      	ldr	r3, [pc, #628]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006116:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800611e:	d054      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006126:	f200 808b 	bhi.w	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006130:	f000 8083 	beq.w	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800613a:	f200 8081 	bhi.w	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006144:	d02f      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800614c:	d878      	bhi.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800615a:	d012      	beq.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800615c:	e070      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800615e:	4b89      	ldr	r3, [pc, #548]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800616a:	d107      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800616c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fe15 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800617a:	e345      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006180:	e342      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006182:	4b80      	ldr	r3, [pc, #512]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800618e:	d107      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006190:	f107 0318 	add.w	r3, r7, #24
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb5b 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800619e:	e333      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061a4:	e330      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061a6:	4b77      	ldr	r3, [pc, #476]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b2:	d107      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b4:	f107 030c 	add.w	r3, r7, #12
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fc9d 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061c2:	e321      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061c8:	e31e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061ca:	4b6e      	ldr	r3, [pc, #440]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061d4:	4b6b      	ldr	r3, [pc, #428]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d10c      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061e6:	4b67      	ldr	r3, [pc, #412]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	4a65      	ldr	r2, [pc, #404]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80061f2:	fa22 f303 	lsr.w	r3, r2, r3
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f8:	e01e      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061fa:	4b62      	ldr	r3, [pc, #392]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d106      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620e:	d102      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006210:	4b5e      	ldr	r3, [pc, #376]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006214:	e010      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006222:	d106      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622a:	d102      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800622c:	4b58      	ldr	r3, [pc, #352]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006236:	e2e7      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006238:	e2e6      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800623a:	4b56      	ldr	r3, [pc, #344]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800623e:	e2e3      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006244:	e2e0      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624c:	f040 80a7 	bne.w	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006250:	4b4c      	ldr	r3, [pc, #304]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006258:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006260:	d055      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006268:	f200 8096 	bhi.w	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006272:	f000 8084 	beq.w	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800627c:	f200 808c 	bhi.w	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006286:	d030      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800628e:	f200 8083 	bhi.w	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800629e:	d012      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80062a0:	e07a      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062a2:	4b38      	ldr	r3, [pc, #224]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ae:	d107      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fd73 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062be:	e2a3      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062c4:	e2a0      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d2:	d107      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d4:	f107 0318 	add.w	r3, r7, #24
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fab9 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80062e2:	e291      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062e8:	e28e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f8:	f107 030c 	add.w	r3, r7, #12
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fbfb 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006306:	e27f      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800630c:	e27c      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006316:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006318:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b04      	cmp	r3, #4
 8006322:	d10c      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	4a14      	ldr	r2, [pc, #80]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633c:	e01e      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634a:	d106      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006352:	d102      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006358:	e010      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006366:	d106      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636e:	d102      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006374:	e002      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800637a:	e245      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800637c:	e244      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006382:	e241      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006384:	58024400 	.word	0x58024400
 8006388:	03d09000 	.word	0x03d09000
 800638c:	003d0900 	.word	0x003d0900
 8006390:	007a1200 	.word	0x007a1200
 8006394:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800639c:	e234      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a4:	f040 809c 	bne.w	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80063a8:	4b9b      	ldr	r3, [pc, #620]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b8:	d054      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c0:	f200 808b 	bhi.w	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ca:	f000 8083 	beq.w	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063d4:	f200 8081 	bhi.w	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063de:	d02f      	beq.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	d878      	bhi.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d012      	beq.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80063f6:	e070      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063f8:	4b87      	ldr	r3, [pc, #540]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006404:	d107      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fcc8 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006414:	e1f8      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800641a:	e1f5      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800641c:	4b7e      	ldr	r3, [pc, #504]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642a:	f107 0318 	add.w	r3, r7, #24
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa0e 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006438:	e1e6      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800643e:	e1e3      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006440:	4b75      	ldr	r3, [pc, #468]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d107      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fb50 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800645c:	e1d4      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006462:	e1d1      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006464:	4b6c      	ldr	r3, [pc, #432]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800646c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800646e:	4b6a      	ldr	r3, [pc, #424]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b04      	cmp	r3, #4
 8006478:	d10c      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006480:	4b65      	ldr	r3, [pc, #404]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	4a64      	ldr	r2, [pc, #400]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006492:	e01e      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006494:	4b60      	ldr	r3, [pc, #384]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d106      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a8:	d102      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064aa:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ae:	e010      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064b0:	4b59      	ldr	r3, [pc, #356]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064bc:	d106      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c4:	d102      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064c6:	4b57      	ldr	r3, [pc, #348]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ca:	e002      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064d0:	e19a      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80064d2:	e199      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064d4:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d8:	e196      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064de:	e193      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064e6:	d173      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80064e8:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f8:	d02f      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006500:	d863      	bhi.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650e:	d012      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006510:	e05b      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006512:	4b41      	ldr	r3, [pc, #260]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800651e:	d107      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006520:	f107 0318 	add.w	r3, r7, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f993 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800652e:	e16b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006534:	e168      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006536:	4b38      	ldr	r3, [pc, #224]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d107      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fad5 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006552:	e159      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006558:	e156      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800655a:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006562:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006564:	4b2c      	ldr	r3, [pc, #176]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b04      	cmp	r3, #4
 800656e:	d10c      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a26      	ldr	r2, [pc, #152]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006588:	e01e      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006596:	d106      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a4:	e010      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a6:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ba:	d102      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e002      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065c6:	e11f      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065c8:	e11e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ce:	e11b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d13e      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ee:	d01d      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80065f0:	e02e      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fe:	d107      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fbcb 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800660e:	e0fb      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006614:	e0f8      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006616:	bf00      	nop
 8006618:	58024400 	.word	0x58024400
 800661c:	03d09000 	.word	0x03d09000
 8006620:	003d0900 	.word	0x003d0900
 8006624:	007a1200 	.word	0x007a1200
 8006628:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800662c:	4b79      	ldr	r3, [pc, #484]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d107      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800663a:	f107 0318 	add.w	r3, r7, #24
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f906 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006648:	e0de      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e0db      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006654:	e0d8      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665c:	f040 8085 	bne.w	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006660:	4b6c      	ldr	r3, [pc, #432]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006670:	d06b      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006678:	d874      	bhi.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d056      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006688:	d86c      	bhi.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006690:	d03b      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006698:	d864      	bhi.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a0:	d021      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a8:	d85c      	bhi.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b6:	d004      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80066b8:	e054      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80066ba:	f000 f8b3 	bl	8006824 <HAL_RCCEx_GetD3PCLK1Freq>
 80066be:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80066c0:	e0a2      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066c2:	4b54      	ldr	r3, [pc, #336]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ce:	d107      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f8bb 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066de:	e093      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e4:	e090      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066e6:	4b4b      	ldr	r3, [pc, #300]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f2:	d107      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f9fd 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006702:	e081      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006708:	e07e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800670a:	4b42      	ldr	r3, [pc, #264]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b04      	cmp	r3, #4
 8006714:	d109      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006716:	4b3f      	ldr	r3, [pc, #252]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	08db      	lsrs	r3, r3, #3
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	4a3d      	ldr	r2, [pc, #244]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006722:	fa22 f303 	lsr.w	r3, r2, r3
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006728:	e06e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	e06b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006730:	4b38      	ldr	r3, [pc, #224]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673c:	d102      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800673e:	4b37      	ldr	r3, [pc, #220]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006742:	e061      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006748:	e05e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800674a:	4b32      	ldr	r3, [pc, #200]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006756:	d102      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006758:	4b31      	ldr	r3, [pc, #196]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800675c:	e054      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006762:	e051      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006768:	e04e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006770:	d148      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006772:	4b28      	ldr	r3, [pc, #160]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800677a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006782:	d02a      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800678a:	d838      	bhi.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006798:	d00d      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800679a:	e030      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a8:	d102      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80067aa:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067ae:	e02b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b4:	e028      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b6:	4b17      	ldr	r3, [pc, #92]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fae9 	bl	8006da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067d2:	e019      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d8:	e016      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e6:	d107      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e8:	f107 0318 	add.w	r3, r7, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f82f 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067f6:	e007      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fc:	e004      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006802:	e001      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800680a:	4618      	mov	r0, r3
 800680c:	3740      	adds	r7, #64	; 0x40
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	58024400 	.word	0x58024400
 8006818:	03d09000 	.word	0x03d09000
 800681c:	003d0900 	.word	0x003d0900
 8006820:	007a1200 	.word	0x007a1200

08006824 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006828:	f7fe fb88 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	4904      	ldr	r1, [pc, #16]	; (800684c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006844:	4618      	mov	r0, r3
 8006846:	bd80      	pop	{r7, pc}
 8006848:	58024400 	.word	0x58024400
 800684c:	0800845c 	.word	0x0800845c

08006850 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006858:	4ba1      	ldr	r3, [pc, #644]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006862:	4b9f      	ldr	r3, [pc, #636]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	0b1b      	lsrs	r3, r3, #12
 8006868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800686c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800686e:	4b9c      	ldr	r3, [pc, #624]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800687a:	4b99      	ldr	r3, [pc, #612]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8111 	beq.w	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	f000 8083 	beq.w	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f200 80a1 	bhi.w	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d056      	beq.n	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068ba:	e099      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068bc:	4b88      	ldr	r3, [pc, #544]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02d      	beq.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c8:	4b85      	ldr	r3, [pc, #532]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	4a84      	ldr	r2, [pc, #528]	; (8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
 80068d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b7b      	ldr	r3, [pc, #492]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006922:	e087      	b.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b6a      	ldr	r3, [pc, #424]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006966:	e065      	b.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b59      	ldr	r3, [pc, #356]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a03 	vldr	s12, [r7, #12]
 800698e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069aa:	e043      	b.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b48      	ldr	r3, [pc, #288]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ee:	e021      	b.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a34:	4b2a      	ldr	r3, [pc, #168]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	0a5b      	lsrs	r3, r3, #9
 8006a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a5a:	ee17 2a90 	vmov	r2, s15
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a62:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a88:	ee17 2a90 	vmov	r2, s15
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	0e1b      	lsrs	r3, r3, #24
 8006a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab6:	ee17 2a90 	vmov	r2, s15
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006abe:	e008      	b.n	8006ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
}
 8006ad2:	bf00      	nop
 8006ad4:	3724      	adds	r7, #36	; 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	03d09000 	.word	0x03d09000
 8006ae8:	46000000 	.word	0x46000000
 8006aec:	4c742400 	.word	0x4c742400
 8006af0:	4a742400 	.word	0x4a742400
 8006af4:	4af42400 	.word	0x4af42400

08006af8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	; 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b00:	4ba1      	ldr	r3, [pc, #644]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b0a:	4b9f      	ldr	r3, [pc, #636]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	0d1b      	lsrs	r3, r3, #20
 8006b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b16:	4b9c      	ldr	r3, [pc, #624]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b22:	4b99      	ldr	r3, [pc, #612]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	08db      	lsrs	r3, r3, #3
 8006b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8111 	beq.w	8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	f000 8083 	beq.w	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	f200 80a1 	bhi.w	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d056      	beq.n	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b62:	e099      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b64:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d02d      	beq.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b70:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	4a84      	ldr	r2, [pc, #528]	; (8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b7b      	ldr	r3, [pc, #492]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bca:	e087      	b.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b6a      	ldr	r3, [pc, #424]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0e:	e065      	b.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b59      	ldr	r3, [pc, #356]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c52:	e043      	b.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b48      	ldr	r3, [pc, #288]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c96:	e021      	b.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b37      	ldr	r3, [pc, #220]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006cdc:	4b2a      	ldr	r3, [pc, #168]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	0a5b      	lsrs	r3, r3, #9
 8006ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d02:	ee17 2a90 	vmov	r2, s15
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d30:	ee17 2a90 	vmov	r2, s15
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d38:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	0e1b      	lsrs	r3, r3, #24
 8006d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5e:	ee17 2a90 	vmov	r2, s15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d66:	e008      	b.n	8006d7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
}
 8006d7a:	bf00      	nop
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	46000000 	.word	0x46000000
 8006d94:	4c742400 	.word	0x4c742400
 8006d98:	4a742400 	.word	0x4a742400
 8006d9c:	4af42400 	.word	0x4af42400

08006da0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b089      	sub	sp, #36	; 0x24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da8:	4ba0      	ldr	r3, [pc, #640]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006db2:	4b9e      	ldr	r3, [pc, #632]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dbc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006dbe:	4b9b      	ldr	r3, [pc, #620]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006dc8:	4b98      	ldr	r3, [pc, #608]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8111 	beq.w	800700e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	f000 8083 	beq.w	8006efa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	f200 80a1 	bhi.w	8006f3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d056      	beq.n	8006eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006e08:	e099      	b.n	8006f3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0a:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d02d      	beq.n	8006e72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e16:	4b85      	ldr	r3, [pc, #532]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	4a83      	ldr	r2, [pc, #524]	; (8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e40:	4b7a      	ldr	r3, [pc, #488]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e70:	e087      	b.n	8006f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007038 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e84:	4b69      	ldr	r3, [pc, #420]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb4:	e065      	b.n	8006f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800703c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec8:	4b58      	ldr	r3, [pc, #352]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006edc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef8:	e043      	b.n	8006f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	ee07 3a90 	vmov	s15, r3
 8006f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007040 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0c:	4b47      	ldr	r3, [pc, #284]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f3c:	e021      	b.n	8006f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f48:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007038 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f50:	4b36      	ldr	r3, [pc, #216]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006f82:	4b2a      	ldr	r3, [pc, #168]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	0a5b      	lsrs	r3, r3, #9
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa8:	ee17 2a90 	vmov	r2, s15
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006fb0:	4b1e      	ldr	r3, [pc, #120]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006fde:	4b13      	ldr	r3, [pc, #76]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007004:	ee17 2a90 	vmov	r2, s15
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800700c:	e008      	b.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
}
 8007020:	bf00      	nop
 8007022:	3724      	adds	r7, #36	; 0x24
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	58024400 	.word	0x58024400
 8007030:	03d09000 	.word	0x03d09000
 8007034:	46000000 	.word	0x46000000
 8007038:	4c742400 	.word	0x4c742400
 800703c:	4a742400 	.word	0x4a742400
 8007040:	4af42400 	.word	0x4af42400

08007044 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007052:	4b53      	ldr	r3, [pc, #332]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	2b03      	cmp	r3, #3
 800705c:	d101      	bne.n	8007062 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e099      	b.n	8007196 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007062:	4b4f      	ldr	r3, [pc, #316]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a4e      	ldr	r2, [pc, #312]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007068:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800706c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800706e:	f7fa f969 	bl	8001344 <HAL_GetTick>
 8007072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007074:	e008      	b.n	8007088 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007076:	f7fa f965 	bl	8001344 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e086      	b.n	8007196 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007088:	4b45      	ldr	r3, [pc, #276]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f0      	bne.n	8007076 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	493f      	ldr	r1, [pc, #252]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	628b      	str	r3, [r1, #40]	; 0x28
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	025b      	lsls	r3, r3, #9
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070d8:	4931      	ldr	r1, [pc, #196]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	492d      	ldr	r1, [pc, #180]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070f0:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	f023 0220 	bic.w	r2, r3, #32
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	4928      	ldr	r1, [pc, #160]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <RCCEx_PLL2_Config+0x160>)
 8007114:	4013      	ands	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	69d2      	ldr	r2, [r2, #28]
 800711a:	00d2      	lsls	r2, r2, #3
 800711c:	4920      	ldr	r1, [pc, #128]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007122:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a1e      	ldr	r2, [pc, #120]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007128:	f043 0310 	orr.w	r3, r3, #16
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800713a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007140:	e00f      	b.n	8007162 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d106      	bne.n	8007156 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007154:	e005      	b.n	8007162 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800715c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800716c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800716e:	f7fa f8e9 	bl	8001344 <HAL_GetTick>
 8007172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007174:	e008      	b.n	8007188 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007176:	f7fa f8e5 	bl	8001344 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e006      	b.n	8007196 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	58024400 	.word	0x58024400
 80071a4:	ffff0007 	.word	0xffff0007

080071a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071b6:	4b53      	ldr	r3, [pc, #332]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d101      	bne.n	80071c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e099      	b.n	80072fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071c6:	4b4f      	ldr	r3, [pc, #316]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a4e      	ldr	r2, [pc, #312]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d2:	f7fa f8b7 	bl	8001344 <HAL_GetTick>
 80071d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071d8:	e008      	b.n	80071ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071da:	f7fa f8b3 	bl	8001344 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e086      	b.n	80072fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071ec:	4b45      	ldr	r3, [pc, #276]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f0      	bne.n	80071da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	051b      	lsls	r3, r3, #20
 8007206:	493f      	ldr	r1, [pc, #252]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007208:	4313      	orrs	r3, r2
 800720a:	628b      	str	r3, [r1, #40]	; 0x28
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	3b01      	subs	r3, #1
 8007212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	3b01      	subs	r3, #1
 800721c:	025b      	lsls	r3, r3, #9
 800721e:	b29b      	uxth	r3, r3
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	3b01      	subs	r3, #1
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	3b01      	subs	r3, #1
 8007236:	061b      	lsls	r3, r3, #24
 8007238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800723c:	4931      	ldr	r1, [pc, #196]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007242:	4b30      	ldr	r3, [pc, #192]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	492d      	ldr	r1, [pc, #180]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007254:	4b2b      	ldr	r3, [pc, #172]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	4928      	ldr	r1, [pc, #160]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007266:	4b27      	ldr	r3, [pc, #156]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	4a26      	ldr	r2, [pc, #152]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800726c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <RCCEx_PLL3_Config+0x160>)
 8007278:	4013      	ands	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	69d2      	ldr	r2, [r2, #28]
 800727e:	00d2      	lsls	r2, r2, #3
 8007280:	4920      	ldr	r1, [pc, #128]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007282:	4313      	orrs	r3, r2
 8007284:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800728c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a19      	ldr	r2, [pc, #100]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800729e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072a4:	e00f      	b.n	80072c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d106      	bne.n	80072ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072ac:	4b15      	ldr	r3, [pc, #84]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	4a14      	ldr	r2, [pc, #80]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b8:	e005      	b.n	80072c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	4a11      	ldr	r2, [pc, #68]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072d2:	f7fa f837 	bl	8001344 <HAL_GetTick>
 80072d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d8:	e008      	b.n	80072ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072da:	f7fa f833 	bl	8001344 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e006      	b.n	80072fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
 8007308:	ffff0007 	.word	0xffff0007

0800730c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e042      	b.n	80073a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7f9 feb3 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2224      	movs	r2, #36	; 0x24
 800733a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f82c 	bl	80073ac <UART_SetConfig>
 8007354:	4603      	mov	r3, r0
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e022      	b.n	80073a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fd88 	bl	8007e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800737a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800738a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fe0f 	bl	8007fc0 <UART_CheckIdleState>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b0:	b092      	sub	sp, #72	; 0x48
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4bbe      	ldr	r3, [pc, #760]	; (80076d4 <UART_SetConfig+0x328>)
 80073dc:	4013      	ands	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073e4:	430b      	orrs	r3, r1
 80073e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4ab3      	ldr	r2, [pc, #716]	; (80076d8 <UART_SetConfig+0x32c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007414:	4313      	orrs	r3, r2
 8007416:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	4baf      	ldr	r3, [pc, #700]	; (80076dc <UART_SetConfig+0x330>)
 8007420:	4013      	ands	r3, r2
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007428:	430b      	orrs	r3, r1
 800742a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	f023 010f 	bic.w	r1, r3, #15
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4aa6      	ldr	r2, [pc, #664]	; (80076e0 <UART_SetConfig+0x334>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d177      	bne.n	800753c <UART_SetConfig+0x190>
 800744c:	4ba5      	ldr	r3, [pc, #660]	; (80076e4 <UART_SetConfig+0x338>)
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007454:	2b28      	cmp	r3, #40	; 0x28
 8007456:	d86d      	bhi.n	8007534 <UART_SetConfig+0x188>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0xb4>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007505 	.word	0x08007505
 8007464:	08007535 	.word	0x08007535
 8007468:	08007535 	.word	0x08007535
 800746c:	08007535 	.word	0x08007535
 8007470:	08007535 	.word	0x08007535
 8007474:	08007535 	.word	0x08007535
 8007478:	08007535 	.word	0x08007535
 800747c:	08007535 	.word	0x08007535
 8007480:	0800750d 	.word	0x0800750d
 8007484:	08007535 	.word	0x08007535
 8007488:	08007535 	.word	0x08007535
 800748c:	08007535 	.word	0x08007535
 8007490:	08007535 	.word	0x08007535
 8007494:	08007535 	.word	0x08007535
 8007498:	08007535 	.word	0x08007535
 800749c:	08007535 	.word	0x08007535
 80074a0:	08007515 	.word	0x08007515
 80074a4:	08007535 	.word	0x08007535
 80074a8:	08007535 	.word	0x08007535
 80074ac:	08007535 	.word	0x08007535
 80074b0:	08007535 	.word	0x08007535
 80074b4:	08007535 	.word	0x08007535
 80074b8:	08007535 	.word	0x08007535
 80074bc:	08007535 	.word	0x08007535
 80074c0:	0800751d 	.word	0x0800751d
 80074c4:	08007535 	.word	0x08007535
 80074c8:	08007535 	.word	0x08007535
 80074cc:	08007535 	.word	0x08007535
 80074d0:	08007535 	.word	0x08007535
 80074d4:	08007535 	.word	0x08007535
 80074d8:	08007535 	.word	0x08007535
 80074dc:	08007535 	.word	0x08007535
 80074e0:	08007525 	.word	0x08007525
 80074e4:	08007535 	.word	0x08007535
 80074e8:	08007535 	.word	0x08007535
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007535 	.word	0x08007535
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007535 	.word	0x08007535
 8007500:	0800752d 	.word	0x0800752d
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e222      	b.n	8007952 <UART_SetConfig+0x5a6>
 800750c:	2304      	movs	r3, #4
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e21e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007514:	2308      	movs	r3, #8
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e21a      	b.n	8007952 <UART_SetConfig+0x5a6>
 800751c:	2310      	movs	r3, #16
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e216      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007524:	2320      	movs	r3, #32
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e212      	b.n	8007952 <UART_SetConfig+0x5a6>
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e20e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007534:	2380      	movs	r3, #128	; 0x80
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753a:	e20a      	b.n	8007952 <UART_SetConfig+0x5a6>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a69      	ldr	r2, [pc, #420]	; (80076e8 <UART_SetConfig+0x33c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d130      	bne.n	80075a8 <UART_SetConfig+0x1fc>
 8007546:	4b67      	ldr	r3, [pc, #412]	; (80076e4 <UART_SetConfig+0x338>)
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b05      	cmp	r3, #5
 8007550:	d826      	bhi.n	80075a0 <UART_SetConfig+0x1f4>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <UART_SetConfig+0x1ac>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007571 	.word	0x08007571
 800755c:	08007579 	.word	0x08007579
 8007560:	08007581 	.word	0x08007581
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	2300      	movs	r3, #0
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e1ec      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007578:	2304      	movs	r3, #4
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e1e8      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007580:	2308      	movs	r3, #8
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e1e4      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007588:	2310      	movs	r3, #16
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e1e0      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007590:	2320      	movs	r3, #32
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e1dc      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007598:	2340      	movs	r3, #64	; 0x40
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e1d8      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075a0:	2380      	movs	r3, #128	; 0x80
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a6:	e1d4      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a4f      	ldr	r2, [pc, #316]	; (80076ec <UART_SetConfig+0x340>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d130      	bne.n	8007614 <UART_SetConfig+0x268>
 80075b2:	4b4c      	ldr	r3, [pc, #304]	; (80076e4 <UART_SetConfig+0x338>)
 80075b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d826      	bhi.n	800760c <UART_SetConfig+0x260>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x218>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075dd 	.word	0x080075dd
 80075c8:	080075e5 	.word	0x080075e5
 80075cc:	080075ed 	.word	0x080075ed
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	080075fd 	.word	0x080075fd
 80075d8:	08007605 	.word	0x08007605
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e1b6      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e1b2      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e1ae      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e1aa      	b.n	8007952 <UART_SetConfig+0x5a6>
 80075fc:	2320      	movs	r3, #32
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e1a6      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007604:	2340      	movs	r3, #64	; 0x40
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e1a2      	b.n	8007952 <UART_SetConfig+0x5a6>
 800760c:	2380      	movs	r3, #128	; 0x80
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e19e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a35      	ldr	r2, [pc, #212]	; (80076f0 <UART_SetConfig+0x344>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d130      	bne.n	8007680 <UART_SetConfig+0x2d4>
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <UART_SetConfig+0x338>)
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b05      	cmp	r3, #5
 8007628:	d826      	bhi.n	8007678 <UART_SetConfig+0x2cc>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0x284>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007649 	.word	0x08007649
 8007634:	08007651 	.word	0x08007651
 8007638:	08007659 	.word	0x08007659
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e180      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007650:	2304      	movs	r3, #4
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e17c      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007658:	2308      	movs	r3, #8
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e178      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007660:	2310      	movs	r3, #16
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e174      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007668:	2320      	movs	r3, #32
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e170      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e16c      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007678:	2380      	movs	r3, #128	; 0x80
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e168      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <UART_SetConfig+0x348>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d142      	bne.n	8007710 <UART_SetConfig+0x364>
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <UART_SetConfig+0x338>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	2b05      	cmp	r3, #5
 8007694:	d838      	bhi.n	8007708 <UART_SetConfig+0x35c>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <UART_SetConfig+0x2f0>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	080076c5 	.word	0x080076c5
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076f9 	.word	0x080076f9
 80076b0:	08007701 	.word	0x08007701
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e14a      	b.n	8007952 <UART_SetConfig+0x5a6>
 80076bc:	2304      	movs	r3, #4
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e146      	b.n	8007952 <UART_SetConfig+0x5a6>
 80076c4:	2308      	movs	r3, #8
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e142      	b.n	8007952 <UART_SetConfig+0x5a6>
 80076cc:	2310      	movs	r3, #16
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e13e      	b.n	8007952 <UART_SetConfig+0x5a6>
 80076d4:	cfff69f3 	.word	0xcfff69f3
 80076d8:	58000c00 	.word	0x58000c00
 80076dc:	11fff4ff 	.word	0x11fff4ff
 80076e0:	40011000 	.word	0x40011000
 80076e4:	58024400 	.word	0x58024400
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40004800 	.word	0x40004800
 80076f0:	40004c00 	.word	0x40004c00
 80076f4:	40005000 	.word	0x40005000
 80076f8:	2320      	movs	r3, #32
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e128      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007700:	2340      	movs	r3, #64	; 0x40
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e124      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007708:	2380      	movs	r3, #128	; 0x80
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e120      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4acb      	ldr	r2, [pc, #812]	; (8007a44 <UART_SetConfig+0x698>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d176      	bne.n	8007808 <UART_SetConfig+0x45c>
 800771a:	4bcb      	ldr	r3, [pc, #812]	; (8007a48 <UART_SetConfig+0x69c>)
 800771c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007722:	2b28      	cmp	r3, #40	; 0x28
 8007724:	d86c      	bhi.n	8007800 <UART_SetConfig+0x454>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0x380>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	080077d1 	.word	0x080077d1
 8007730:	08007801 	.word	0x08007801
 8007734:	08007801 	.word	0x08007801
 8007738:	08007801 	.word	0x08007801
 800773c:	08007801 	.word	0x08007801
 8007740:	08007801 	.word	0x08007801
 8007744:	08007801 	.word	0x08007801
 8007748:	08007801 	.word	0x08007801
 800774c:	080077d9 	.word	0x080077d9
 8007750:	08007801 	.word	0x08007801
 8007754:	08007801 	.word	0x08007801
 8007758:	08007801 	.word	0x08007801
 800775c:	08007801 	.word	0x08007801
 8007760:	08007801 	.word	0x08007801
 8007764:	08007801 	.word	0x08007801
 8007768:	08007801 	.word	0x08007801
 800776c:	080077e1 	.word	0x080077e1
 8007770:	08007801 	.word	0x08007801
 8007774:	08007801 	.word	0x08007801
 8007778:	08007801 	.word	0x08007801
 800777c:	08007801 	.word	0x08007801
 8007780:	08007801 	.word	0x08007801
 8007784:	08007801 	.word	0x08007801
 8007788:	08007801 	.word	0x08007801
 800778c:	080077e9 	.word	0x080077e9
 8007790:	08007801 	.word	0x08007801
 8007794:	08007801 	.word	0x08007801
 8007798:	08007801 	.word	0x08007801
 800779c:	08007801 	.word	0x08007801
 80077a0:	08007801 	.word	0x08007801
 80077a4:	08007801 	.word	0x08007801
 80077a8:	08007801 	.word	0x08007801
 80077ac:	080077f1 	.word	0x080077f1
 80077b0:	08007801 	.word	0x08007801
 80077b4:	08007801 	.word	0x08007801
 80077b8:	08007801 	.word	0x08007801
 80077bc:	08007801 	.word	0x08007801
 80077c0:	08007801 	.word	0x08007801
 80077c4:	08007801 	.word	0x08007801
 80077c8:	08007801 	.word	0x08007801
 80077cc:	080077f9 	.word	0x080077f9
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d6:	e0bc      	b.n	8007952 <UART_SetConfig+0x5a6>
 80077d8:	2304      	movs	r3, #4
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077de:	e0b8      	b.n	8007952 <UART_SetConfig+0x5a6>
 80077e0:	2308      	movs	r3, #8
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e6:	e0b4      	b.n	8007952 <UART_SetConfig+0x5a6>
 80077e8:	2310      	movs	r3, #16
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ee:	e0b0      	b.n	8007952 <UART_SetConfig+0x5a6>
 80077f0:	2320      	movs	r3, #32
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f6:	e0ac      	b.n	8007952 <UART_SetConfig+0x5a6>
 80077f8:	2340      	movs	r3, #64	; 0x40
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fe:	e0a8      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007806:	e0a4      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a8f      	ldr	r2, [pc, #572]	; (8007a4c <UART_SetConfig+0x6a0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d130      	bne.n	8007874 <UART_SetConfig+0x4c8>
 8007812:	4b8d      	ldr	r3, [pc, #564]	; (8007a48 <UART_SetConfig+0x69c>)
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b05      	cmp	r3, #5
 800781c:	d826      	bhi.n	800786c <UART_SetConfig+0x4c0>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0x478>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007845 	.word	0x08007845
 800782c:	0800784d 	.word	0x0800784d
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e086      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007844:	2304      	movs	r3, #4
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784a:	e082      	b.n	8007952 <UART_SetConfig+0x5a6>
 800784c:	2308      	movs	r3, #8
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e07e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007854:	2310      	movs	r3, #16
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e07a      	b.n	8007952 <UART_SetConfig+0x5a6>
 800785c:	2320      	movs	r3, #32
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e076      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007864:	2340      	movs	r3, #64	; 0x40
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e072      	b.n	8007952 <UART_SetConfig+0x5a6>
 800786c:	2380      	movs	r3, #128	; 0x80
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e06e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a75      	ldr	r2, [pc, #468]	; (8007a50 <UART_SetConfig+0x6a4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d130      	bne.n	80078e0 <UART_SetConfig+0x534>
 800787e:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <UART_SetConfig+0x69c>)
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b05      	cmp	r3, #5
 8007888:	d826      	bhi.n	80078d8 <UART_SetConfig+0x52c>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <UART_SetConfig+0x4e4>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078a9 	.word	0x080078a9
 8007894:	080078b1 	.word	0x080078b1
 8007898:	080078b9 	.word	0x080078b9
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078d1 	.word	0x080078d1
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e050      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078b0:	2304      	movs	r3, #4
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b6:	e04c      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078b8:	2308      	movs	r3, #8
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078be:	e048      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078c0:	2310      	movs	r3, #16
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e044      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078c8:	2320      	movs	r3, #32
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e040      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078d0:	2340      	movs	r3, #64	; 0x40
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e03c      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e038      	b.n	8007952 <UART_SetConfig+0x5a6>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a5b      	ldr	r2, [pc, #364]	; (8007a54 <UART_SetConfig+0x6a8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d130      	bne.n	800794c <UART_SetConfig+0x5a0>
 80078ea:	4b57      	ldr	r3, [pc, #348]	; (8007a48 <UART_SetConfig+0x69c>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	2b05      	cmp	r3, #5
 80078f4:	d826      	bhi.n	8007944 <UART_SetConfig+0x598>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x550>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007915 	.word	0x08007915
 8007900:	0800791d 	.word	0x0800791d
 8007904:	08007925 	.word	0x08007925
 8007908:	0800792d 	.word	0x0800792d
 800790c:	08007935 	.word	0x08007935
 8007910:	0800793d 	.word	0x0800793d
 8007914:	2302      	movs	r3, #2
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e01a      	b.n	8007952 <UART_SetConfig+0x5a6>
 800791c:	2304      	movs	r3, #4
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007922:	e016      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007924:	2308      	movs	r3, #8
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e012      	b.n	8007952 <UART_SetConfig+0x5a6>
 800792c:	2310      	movs	r3, #16
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e00e      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007934:	2320      	movs	r3, #32
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e00a      	b.n	8007952 <UART_SetConfig+0x5a6>
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e006      	b.n	8007952 <UART_SetConfig+0x5a6>
 8007944:	2380      	movs	r3, #128	; 0x80
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e002      	b.n	8007952 <UART_SetConfig+0x5a6>
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a3f      	ldr	r2, [pc, #252]	; (8007a54 <UART_SetConfig+0x6a8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	f040 80f8 	bne.w	8007b4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800795e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007962:	2b20      	cmp	r3, #32
 8007964:	dc46      	bgt.n	80079f4 <UART_SetConfig+0x648>
 8007966:	2b02      	cmp	r3, #2
 8007968:	f2c0 8082 	blt.w	8007a70 <UART_SetConfig+0x6c4>
 800796c:	3b02      	subs	r3, #2
 800796e:	2b1e      	cmp	r3, #30
 8007970:	d87e      	bhi.n	8007a70 <UART_SetConfig+0x6c4>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0x5cc>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	080079fb 	.word	0x080079fb
 800797c:	08007a71 	.word	0x08007a71
 8007980:	08007a03 	.word	0x08007a03
 8007984:	08007a71 	.word	0x08007a71
 8007988:	08007a71 	.word	0x08007a71
 800798c:	08007a71 	.word	0x08007a71
 8007990:	08007a13 	.word	0x08007a13
 8007994:	08007a71 	.word	0x08007a71
 8007998:	08007a71 	.word	0x08007a71
 800799c:	08007a71 	.word	0x08007a71
 80079a0:	08007a71 	.word	0x08007a71
 80079a4:	08007a71 	.word	0x08007a71
 80079a8:	08007a71 	.word	0x08007a71
 80079ac:	08007a71 	.word	0x08007a71
 80079b0:	08007a23 	.word	0x08007a23
 80079b4:	08007a71 	.word	0x08007a71
 80079b8:	08007a71 	.word	0x08007a71
 80079bc:	08007a71 	.word	0x08007a71
 80079c0:	08007a71 	.word	0x08007a71
 80079c4:	08007a71 	.word	0x08007a71
 80079c8:	08007a71 	.word	0x08007a71
 80079cc:	08007a71 	.word	0x08007a71
 80079d0:	08007a71 	.word	0x08007a71
 80079d4:	08007a71 	.word	0x08007a71
 80079d8:	08007a71 	.word	0x08007a71
 80079dc:	08007a71 	.word	0x08007a71
 80079e0:	08007a71 	.word	0x08007a71
 80079e4:	08007a71 	.word	0x08007a71
 80079e8:	08007a71 	.word	0x08007a71
 80079ec:	08007a71 	.word	0x08007a71
 80079f0:	08007a63 	.word	0x08007a63
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d037      	beq.n	8007a68 <UART_SetConfig+0x6bc>
 80079f8:	e03a      	b.n	8007a70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079fa:	f7fe ff13 	bl	8006824 <HAL_RCCEx_GetD3PCLK1Freq>
 80079fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a00:	e03c      	b.n	8007a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe ff22 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a10:	e034      	b.n	8007a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a12:	f107 0318 	add.w	r3, r7, #24
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f86e 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a20:	e02c      	b.n	8007a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <UART_SetConfig+0x69c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d016      	beq.n	8007a5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <UART_SetConfig+0x69c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	4a07      	ldr	r2, [pc, #28]	; (8007a58 <UART_SetConfig+0x6ac>)
 8007a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a40:	e01c      	b.n	8007a7c <UART_SetConfig+0x6d0>
 8007a42:	bf00      	nop
 8007a44:	40011400 	.word	0x40011400
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	40007800 	.word	0x40007800
 8007a50:	40007c00 	.word	0x40007c00
 8007a54:	58000c00 	.word	0x58000c00
 8007a58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a5c:	4b9d      	ldr	r3, [pc, #628]	; (8007cd4 <UART_SetConfig+0x928>)
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a60:	e00c      	b.n	8007a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a62:	4b9d      	ldr	r3, [pc, #628]	; (8007cd8 <UART_SetConfig+0x92c>)
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a66:	e009      	b.n	8007a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a6e:	e005      	b.n	8007a7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 81de 	beq.w	8007e40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	4a94      	ldr	r2, [pc, #592]	; (8007cdc <UART_SetConfig+0x930>)
 8007a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a96:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d305      	bcc.n	8007ab4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d903      	bls.n	8007abc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007aba:	e1c1      	b.n	8007e40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	60fa      	str	r2, [r7, #12]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	4a84      	ldr	r2, [pc, #528]	; (8007cdc <UART_SetConfig+0x930>)
 8007aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ade:	f7f8 fbfb 	bl	80002d8 <__aeabi_uldivmod>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	020b      	lsls	r3, r1, #8
 8007af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007af8:	0202      	lsls	r2, r0, #8
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	6849      	ldr	r1, [r1, #4]
 8007afe:	0849      	lsrs	r1, r1, #1
 8007b00:	2000      	movs	r0, #0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4605      	mov	r5, r0
 8007b06:	eb12 0804 	adds.w	r8, r2, r4
 8007b0a:	eb43 0905 	adc.w	r9, r3, r5
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	469a      	mov	sl, r3
 8007b16:	4693      	mov	fp, r2
 8007b18:	4652      	mov	r2, sl
 8007b1a:	465b      	mov	r3, fp
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f8 fbda 	bl	80002d8 <__aeabi_uldivmod>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4613      	mov	r3, r2
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d308      	bcc.n	8007b46 <UART_SetConfig+0x79a>
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3a:	d204      	bcs.n	8007b46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e17c      	b.n	8007e40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b4c:	e178      	b.n	8007e40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b56:	f040 80c5 	bne.w	8007ce4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	dc48      	bgt.n	8007bf4 <UART_SetConfig+0x848>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	db7b      	blt.n	8007c5e <UART_SetConfig+0x8b2>
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d879      	bhi.n	8007c5e <UART_SetConfig+0x8b2>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <UART_SetConfig+0x7c4>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007bfb 	.word	0x08007bfb
 8007b74:	08007c03 	.word	0x08007c03
 8007b78:	08007c5f 	.word	0x08007c5f
 8007b7c:	08007c5f 	.word	0x08007c5f
 8007b80:	08007c0b 	.word	0x08007c0b
 8007b84:	08007c5f 	.word	0x08007c5f
 8007b88:	08007c5f 	.word	0x08007c5f
 8007b8c:	08007c5f 	.word	0x08007c5f
 8007b90:	08007c1b 	.word	0x08007c1b
 8007b94:	08007c5f 	.word	0x08007c5f
 8007b98:	08007c5f 	.word	0x08007c5f
 8007b9c:	08007c5f 	.word	0x08007c5f
 8007ba0:	08007c5f 	.word	0x08007c5f
 8007ba4:	08007c5f 	.word	0x08007c5f
 8007ba8:	08007c5f 	.word	0x08007c5f
 8007bac:	08007c5f 	.word	0x08007c5f
 8007bb0:	08007c2b 	.word	0x08007c2b
 8007bb4:	08007c5f 	.word	0x08007c5f
 8007bb8:	08007c5f 	.word	0x08007c5f
 8007bbc:	08007c5f 	.word	0x08007c5f
 8007bc0:	08007c5f 	.word	0x08007c5f
 8007bc4:	08007c5f 	.word	0x08007c5f
 8007bc8:	08007c5f 	.word	0x08007c5f
 8007bcc:	08007c5f 	.word	0x08007c5f
 8007bd0:	08007c5f 	.word	0x08007c5f
 8007bd4:	08007c5f 	.word	0x08007c5f
 8007bd8:	08007c5f 	.word	0x08007c5f
 8007bdc:	08007c5f 	.word	0x08007c5f
 8007be0:	08007c5f 	.word	0x08007c5f
 8007be4:	08007c5f 	.word	0x08007c5f
 8007be8:	08007c5f 	.word	0x08007c5f
 8007bec:	08007c5f 	.word	0x08007c5f
 8007bf0:	08007c51 	.word	0x08007c51
 8007bf4:	2b40      	cmp	r3, #64	; 0x40
 8007bf6:	d02e      	beq.n	8007c56 <UART_SetConfig+0x8aa>
 8007bf8:	e031      	b.n	8007c5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bfa:	f7fd f9cf 	bl	8004f9c <HAL_RCC_GetPCLK1Freq>
 8007bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c00:	e033      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c02:	f7fd f9e1 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8007c06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c08:	e02f      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe1e 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c18:	e027      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c1a:	f107 0318 	add.w	r3, r7, #24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe ff6a 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c28:	e01f      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c2a:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <UART_SetConfig+0x934>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <UART_SetConfig+0x934>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	08db      	lsrs	r3, r3, #3
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	4a24      	ldr	r2, [pc, #144]	; (8007cd4 <UART_SetConfig+0x928>)
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c48:	e00f      	b.n	8007c6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c4a:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <UART_SetConfig+0x928>)
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4e:	e00c      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c50:	4b21      	ldr	r3, [pc, #132]	; (8007cd8 <UART_SetConfig+0x92c>)
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c54:	e009      	b.n	8007c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c5c:	e005      	b.n	8007c6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80e7 	beq.w	8007e40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <UART_SetConfig+0x930>)
 8007c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c84:	005a      	lsls	r2, r3, #1
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	441a      	add	r2, r3
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b0f      	cmp	r3, #15
 8007c9c:	d916      	bls.n	8007ccc <UART_SetConfig+0x920>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca4:	d212      	bcs.n	8007ccc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f023 030f 	bic.w	r3, r3, #15
 8007cae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e0b9      	b.n	8007e40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007cd2:	e0b5      	b.n	8007e40 <UART_SetConfig+0xa94>
 8007cd4:	03d09000 	.word	0x03d09000
 8007cd8:	003d0900 	.word	0x003d0900
 8007cdc:	08008474 	.word	0x08008474
 8007ce0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	dc49      	bgt.n	8007d80 <UART_SetConfig+0x9d4>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db7c      	blt.n	8007dea <UART_SetConfig+0xa3e>
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d87a      	bhi.n	8007dea <UART_SetConfig+0xa3e>
 8007cf4:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <UART_SetConfig+0x950>)
 8007cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfa:	bf00      	nop
 8007cfc:	08007d87 	.word	0x08007d87
 8007d00:	08007d8f 	.word	0x08007d8f
 8007d04:	08007deb 	.word	0x08007deb
 8007d08:	08007deb 	.word	0x08007deb
 8007d0c:	08007d97 	.word	0x08007d97
 8007d10:	08007deb 	.word	0x08007deb
 8007d14:	08007deb 	.word	0x08007deb
 8007d18:	08007deb 	.word	0x08007deb
 8007d1c:	08007da7 	.word	0x08007da7
 8007d20:	08007deb 	.word	0x08007deb
 8007d24:	08007deb 	.word	0x08007deb
 8007d28:	08007deb 	.word	0x08007deb
 8007d2c:	08007deb 	.word	0x08007deb
 8007d30:	08007deb 	.word	0x08007deb
 8007d34:	08007deb 	.word	0x08007deb
 8007d38:	08007deb 	.word	0x08007deb
 8007d3c:	08007db7 	.word	0x08007db7
 8007d40:	08007deb 	.word	0x08007deb
 8007d44:	08007deb 	.word	0x08007deb
 8007d48:	08007deb 	.word	0x08007deb
 8007d4c:	08007deb 	.word	0x08007deb
 8007d50:	08007deb 	.word	0x08007deb
 8007d54:	08007deb 	.word	0x08007deb
 8007d58:	08007deb 	.word	0x08007deb
 8007d5c:	08007deb 	.word	0x08007deb
 8007d60:	08007deb 	.word	0x08007deb
 8007d64:	08007deb 	.word	0x08007deb
 8007d68:	08007deb 	.word	0x08007deb
 8007d6c:	08007deb 	.word	0x08007deb
 8007d70:	08007deb 	.word	0x08007deb
 8007d74:	08007deb 	.word	0x08007deb
 8007d78:	08007deb 	.word	0x08007deb
 8007d7c:	08007ddd 	.word	0x08007ddd
 8007d80:	2b40      	cmp	r3, #64	; 0x40
 8007d82:	d02e      	beq.n	8007de2 <UART_SetConfig+0xa36>
 8007d84:	e031      	b.n	8007dea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d86:	f7fd f909 	bl	8004f9c <HAL_RCC_GetPCLK1Freq>
 8007d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d8c:	e033      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d8e:	f7fd f91b 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8007d92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d94:	e02f      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fd58 	bl	8006850 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da4:	e027      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da6:	f107 0318 	add.w	r3, r7, #24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fea4 	bl	8006af8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db4:	e01f      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db6:	4b2d      	ldr	r3, [pc, #180]	; (8007e6c <UART_SetConfig+0xac0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dc2:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <UART_SetConfig+0xac0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	08db      	lsrs	r3, r3, #3
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	4a28      	ldr	r2, [pc, #160]	; (8007e70 <UART_SetConfig+0xac4>)
 8007dce:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dd4:	e00f      	b.n	8007df6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <UART_SetConfig+0xac4>)
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dda:	e00c      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ddc:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <UART_SetConfig+0xac8>)
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007de0:	e009      	b.n	8007df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007de8:	e005      	b.n	8007df6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007df4:	bf00      	nop
    }

    if (pclk != 0U)
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d021      	beq.n	8007e40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	4a1d      	ldr	r2, [pc, #116]	; (8007e78 <UART_SetConfig+0xacc>)
 8007e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d909      	bls.n	8007e3a <UART_SetConfig+0xa8e>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d205      	bcs.n	8007e3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60da      	str	r2, [r3, #12]
 8007e38:	e002      	b.n	8007e40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3748      	adds	r7, #72	; 0x48
 8007e64:	46bd      	mov	sp, r7
 8007e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	03d09000 	.word	0x03d09000
 8007e74:	003d0900 	.word	0x003d0900
 8007e78:	08008474 	.word	0x08008474

08007e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01a      	beq.n	8007f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f7a:	d10a      	bne.n	8007f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fd0:	f7f9 f9b8 	bl	8001344 <HAL_GetTick>
 8007fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d10e      	bne.n	8008002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82f 	bl	8008056 <UART_WaitOnFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e025      	b.n	800804e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b04      	cmp	r3, #4
 800800e:	d10e      	bne.n	800802e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f819 	bl	8008056 <UART_WaitOnFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e00f      	b.n	800804e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b09c      	sub	sp, #112	; 0x70
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	603b      	str	r3, [r7, #0]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008066:	e0a9      	b.n	80081bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	f000 80a5 	beq.w	80081bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7f9 f967 	bl	8001344 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <UART_WaitOnFlagUntilTimeout+0x32>
 8008082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008084:	2b00      	cmp	r3, #0
 8008086:	d140      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800809c:	667b      	str	r3, [r7, #100]	; 0x64
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f023 0301 	bic.w	r3, r3, #1
 80080d0:	663b      	str	r3, [r7, #96]	; 0x60
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080da:	64ba      	str	r2, [r7, #72]	; 0x48
 80080dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e5      	bne.n	80080ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e069      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d051      	beq.n	80081bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008126:	d149      	bne.n	80081bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008130:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
 8008152:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e6      	bne.n	8008132 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	613b      	str	r3, [r7, #16]
   return(result);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	66bb      	str	r3, [r7, #104]	; 0x68
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008184:	623a      	str	r2, [r7, #32]
 8008186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	6a3a      	ldr	r2, [r7, #32]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	61bb      	str	r3, [r7, #24]
   return(result);
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e5      	bne.n	8008164 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e010      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69da      	ldr	r2, [r3, #28]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4013      	ands	r3, r2
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	bf0c      	ite	eq
 80081cc:	2301      	moveq	r3, #1
 80081ce:	2300      	movne	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	f43f af46 	beq.w	8008068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3770      	adds	r7, #112	; 0x70
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_UARTEx_DisableFifoMode+0x16>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e027      	b.n	800824c <HAL_UARTEx_DisableFifoMode+0x66>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2224      	movs	r2, #36	; 0x24
 8008208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800822a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800826c:	2302      	movs	r3, #2
 800826e:	e02d      	b.n	80082cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f84f 	bl	8008350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e02d      	b.n	8008348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2224      	movs	r2, #36	; 0x24
 80082f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f811 	bl	8008350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	2b00      	cmp	r3, #0
 800835e:	d108      	bne.n	8008372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008370:	e031      	b.n	80083d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008372:	2310      	movs	r3, #16
 8008374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008376:	2310      	movs	r3, #16
 8008378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	0e5b      	lsrs	r3, r3, #25
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	0f5b      	lsrs	r3, r3, #29
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	7b3a      	ldrb	r2, [r7, #12]
 800839e:	4911      	ldr	r1, [pc, #68]	; (80083e4 <UARTEx_SetNbDataToProcess+0x94>)
 80083a0:	5c8a      	ldrb	r2, [r1, r2]
 80083a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083a6:	7b3a      	ldrb	r2, [r7, #12]
 80083a8:	490f      	ldr	r1, [pc, #60]	; (80083e8 <UARTEx_SetNbDataToProcess+0x98>)
 80083aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	7b7a      	ldrb	r2, [r7, #13]
 80083bc:	4909      	ldr	r1, [pc, #36]	; (80083e4 <UARTEx_SetNbDataToProcess+0x94>)
 80083be:	5c8a      	ldrb	r2, [r1, r2]
 80083c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083c4:	7b7a      	ldrb	r2, [r7, #13]
 80083c6:	4908      	ldr	r1, [pc, #32]	; (80083e8 <UARTEx_SetNbDataToProcess+0x98>)
 80083c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	0800848c 	.word	0x0800848c
 80083e8:	08008494 	.word	0x08008494

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4d0d      	ldr	r5, [pc, #52]	; (8008434 <__libc_init_array+0x38>)
 8008400:	4c0d      	ldr	r4, [pc, #52]	; (8008438 <__libc_init_array+0x3c>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	2600      	movs	r6, #0
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	4d0b      	ldr	r5, [pc, #44]	; (800843c <__libc_init_array+0x40>)
 800840e:	4c0c      	ldr	r4, [pc, #48]	; (8008440 <__libc_init_array+0x44>)
 8008410:	f000 f818 	bl	8008444 <_init>
 8008414:	1b64      	subs	r4, r4, r5
 8008416:	10a4      	asrs	r4, r4, #2
 8008418:	2600      	movs	r6, #0
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	f855 3b04 	ldr.w	r3, [r5], #4
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	f855 3b04 	ldr.w	r3, [r5], #4
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	080084a4 	.word	0x080084a4
 8008438:	080084a4 	.word	0x080084a4
 800843c:	080084a4 	.word	0x080084a4
 8008440:	080084a8 	.word	0x080084a8

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
