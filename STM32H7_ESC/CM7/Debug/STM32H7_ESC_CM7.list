
STM32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008cb8  08008cb8  00018cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090dc  080090dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090dc  080090dc  000190dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e4  080090e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  080090ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  240001e0  080092cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002f0  080092cc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171dd  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac4  00000000  00000000  000373eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be29  00000000  00000000  0003c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019314  00000000  00000000  00077ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001885a2  00000000  00000000  00091205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002197a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  002197f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008ca0 	.word	0x08008ca0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08008ca0 	.word	0x08008ca0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xf8>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xfc>)
 8000874:	f000 fffc 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0x100>)
 800088e:	f000 fe3f 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000892:	f244 0301 	movw	r3, #16385	; 0x4001
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xfc>)
 80008ac:	f000 fe30 	bl	8001510 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020400 	.word	0x58020400
 80008c0:	58020800 	.word	0x58020800
 80008c4:	00000000 	.word	0x00000000

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008d4:	bf00      	nop
 80008d6:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <main+0x260>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d004      	beq.n	80008ec <main+0x24>
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	637a      	str	r2, [r7, #52]	; 0x34
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dcf4      	bgt.n	80008d6 <main+0xe>
  if ( timeout < 0 )
 80008ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da01      	bge.n	80008f6 <main+0x2e>
  {
  Error_Handler();
 80008f2:	f000 f999 	bl	8000c28 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fc65 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f91b 	bl	8000b34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008fe:	4b8a      	ldr	r3, [pc, #552]	; (8000b28 <main+0x260>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a88      	ldr	r2, [pc, #544]	; (8000b28 <main+0x260>)
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b86      	ldr	r3, [pc, #536]	; (8000b28 <main+0x260>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800091c:	2000      	movs	r0, #0
 800091e:	f000 ffc1 	bl	80018a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000922:	2100      	movs	r1, #0
 8000924:	2000      	movs	r0, #0
 8000926:	f000 ffd7 	bl	80018d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000930:	bf00      	nop
 8000932:	4b7d      	ldr	r3, [pc, #500]	; (8000b28 <main+0x260>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d104      	bne.n	8000948 <main+0x80>
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	637a      	str	r2, [r7, #52]	; 0x34
 8000944:	2b00      	cmp	r3, #0
 8000946:	dcf4      	bgt.n	8000932 <main+0x6a>
if ( timeout < 0 )
 8000948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094a:	2b00      	cmp	r3, #0
 800094c:	da01      	bge.n	8000952 <main+0x8a>
{
Error_Handler();
 800094e:	f000 f96b 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f7ff ff35 	bl	80007c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000956:	f000 fb59 	bl	800100c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800095a:	f000 fa87 	bl	8000e6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800095e:	2100      	movs	r1, #0
 8000960:	4872      	ldr	r0, [pc, #456]	; (8000b2c <main+0x264>)
 8000962:	f003 fc01 	bl	8004168 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  double pulseWidth = 0.0015;
 8000966:	a366      	add	r3, pc, #408	; (adr r3, 8000b00 <main+0x238>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double ccr = 0;
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	e9c7 2302 	strd	r2, r3, [r7, #8]

  double i = 0;
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	e9c7 2308 	strd	r2, r3, [r7, #32]

  do{
	  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000988:	4b68      	ldr	r3, [pc, #416]	; (8000b2c <main+0x264>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000994:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000998:	ee26 6b07 	vmul.f64	d6, d6, d7
 800099c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8000b08 <main+0x240>
 80009a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009a4:	ed87 7b02 	vstr	d7, [r7, #8]
	  htim2.Instance->CCR1 = ccr;
 80009a8:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <main+0x264>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80009b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009b4:	ee17 2a90 	vmov	r2, s15
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f000 fc94 	bl	80012e8 <HAL_Delay>

	  printf("pulseWidth = %f \r\n", pulseWidth);
 80009c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80009c4:	485a      	ldr	r0, [pc, #360]	; (8000b30 <main+0x268>)
 80009c6:	f006 f925 	bl	8006c14 <iprintf>
	  i += 0.000001;
 80009ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80009ce:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000b10 <main+0x248>
 80009d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009d6:	ed87 7b08 	vstr	d7, [r7, #32]

	  pulseWidth += i;
 80009da:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80009de:	ed97 7b08 	vldr	d7, [r7, #32]
 80009e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009e6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

  }while(pulseWidth < 0.002);
 80009ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80009ee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000b18 <main+0x250>
 80009f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80009f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fa:	d4c5      	bmi.n	8000988 <main+0xc0>

  while (1)
  {
	  for(int i = 0; i<50;i++){
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e023      	b.n	8000a4a <main+0x182>
		  pulseWidth = 0.001;
 8000a02:	a347      	add	r3, pc, #284	; (adr r3, 8000b20 <main+0x258>)
 8000a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <main+0x264>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a18:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000a1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a20:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000b08 <main+0x240>
 8000a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a28:	ed87 7b02 	vstr	d7, [r7, #8]
		  htim2.Instance->CCR1 = ccr;
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <main+0x264>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a38:	ee17 2a90 	vmov	r2, s15
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f000 fc52 	bl	80012e8 <HAL_Delay>
	  for(int i = 0; i<50;i++){
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	3301      	adds	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	2b31      	cmp	r3, #49	; 0x31
 8000a4e:	ddd8      	ble.n	8000a02 <main+0x13a>
	  }
	  for(int i = 0; i<20;i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	e023      	b.n	8000a9e <main+0x1d6>
	 		  pulseWidth = 0.0015;
 8000a56:	a32a      	add	r3, pc, #168	; (adr r3, 8000b00 <main+0x238>)
 8000a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	 		  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <main+0x264>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a6c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000a70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a74:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000b08 <main+0x240>
 8000a78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a7c:	ed87 7b02 	vstr	d7, [r7, #8]
	 		  htim2.Instance->CCR1 = ccr;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <main+0x264>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a8c:	ee17 2a90 	vmov	r2, s15
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
	 		  HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f000 fc28 	bl	80012e8 <HAL_Delay>
	  for(int i = 0; i<20;i++){
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	2b13      	cmp	r3, #19
 8000aa2:	ddd8      	ble.n	8000a56 <main+0x18e>
	 }
	  for(int i = 0; i<50;i++){
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e023      	b.n	8000af2 <main+0x22a>
		  pulseWidth = 0.002;
 8000aaa:	a31b      	add	r3, pc, #108	; (adr r3, 8000b18 <main+0x250>)
 8000aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <main+0x264>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ac0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ac4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ac8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000b08 <main+0x240>
 8000acc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ad0:	ed87 7b02 	vstr	d7, [r7, #8]
		  htim2.Instance->CCR1 = ccr;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <main+0x264>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ae0:	ee17 2a90 	vmov	r2, s15
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fbfe 	bl	80012e8 <HAL_Delay>
	  for(int i = 0; i<50;i++){
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2b31      	cmp	r3, #49	; 0x31
 8000af6:	ddd8      	ble.n	8000aaa <main+0x1e2>
	  for(int i = 0; i<50;i++){
 8000af8:	e780      	b.n	80009fc <main+0x134>
 8000afa:	bf00      	nop
 8000afc:	f3af 8000 	nop.w
 8000b00:	bc6a7efa 	.word	0xbc6a7efa
 8000b04:	3f589374 	.word	0x3f589374
 8000b08:	47ae147b 	.word	0x47ae147b
 8000b0c:	3f947ae1 	.word	0x3f947ae1
 8000b10:	a0b5ed8d 	.word	0xa0b5ed8d
 8000b14:	3eb0c6f7 	.word	0x3eb0c6f7
 8000b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b1c:	3f60624d 	.word	0x3f60624d
 8000b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b24:	3f50624d 	.word	0x3f50624d
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	24000200 	.word	0x24000200
 8000b30:	08008cb8 	.word	0x08008cb8

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	; 0x70
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	224c      	movs	r2, #76	; 0x4c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 fc1c 	bl	8006380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 fc16 	bl	8006380 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b54:	2004      	movs	r0, #4
 8000b56:	f000 fed3 	bl	8001900 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <SystemClock_Config+0xec>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <SystemClock_Config+0xec>)
 8000b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <SystemClock_Config+0xec>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <SystemClock_Config+0xf0>)
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	4a2a      	ldr	r2, [pc, #168]	; (8000c24 <SystemClock_Config+0xf0>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <SystemClock_Config+0xf0>)
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8c:	bf00      	nop
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <SystemClock_Config+0xec>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b9a:	d1f8      	bne.n	8000b8e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ba0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	2302      	movs	r3, #2
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000bb2:	23f0      	movs	r3, #240	; 0xf0
 8000bb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 feee 	bl	80019b4 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bde:	f000 f823 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	233f      	movs	r3, #63	; 0x3f
 8000be4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2303      	movs	r3, #3
 8000be8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2104      	movs	r1, #4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fb01 	bl	8002210 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c14:	f000 f808 	bl	8000c28 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3770      	adds	r7, #112	; 0x70
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024800 	.word	0x58024800
 8000c24:	58000400 	.word	0x58000400

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	2201      	movs	r2, #1
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <__io_putchar+0x20>)
 8000c46:	f004 fabb 	bl	80051c0 <HAL_UART_Transmit>
  return ch;
 8000c4a:	687b      	ldr	r3, [r7, #4]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2400024c 	.word	0x2400024c

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_MspInit+0x30>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x30>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x30>)
 8000c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	58024400 	.word	0x58024400

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 fae6 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_kill>:

int _kill(int pid, int sig)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cfa:	f005 fb17 	bl	800632c <__errno>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2216      	movs	r2, #22
 8000d02:	601a      	str	r2, [r3, #0]
	return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_exit>:

void _exit (int status)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ffe7 	bl	8000cf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d22:	e7fe      	b.n	8000d22 <_exit+0x12>

08000d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
	}

return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5b 	bl	8000c34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
	}
	return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f005 fa7c 	bl	800632c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24080000 	.word	0x24080000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	240001fc 	.word	0x240001fc
 8000e68:	240002f0 	.word	0x240002f0

08000e6c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	; 0x38
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ea8:	2248      	movs	r2, #72	; 0x48
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ec8:	f003 f896 	bl	8003ff8 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f7ff fea9 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ee4:	f003 fb62 	bl	80045ac <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000eee:	f7ff fe9b 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000ef4:	f003 f8d7 	bl	80040a6 <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000efe:	f7ff fe93 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4810      	ldr	r0, [pc, #64]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000f12:	f004 f877 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f1c:	f7ff fe84 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000f38:	f003 fa24 	bl	8004384 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f42:	f7ff fe71 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM2_Init+0xe8>)
 8000f48:	f000 f826 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	; 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000200 	.word	0x24000200

08000f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d10e      	bne.n	8000f88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_Base_MspInit+0x3c>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_TIM_Base_MspInit+0x3c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_TIM_Base_MspInit+0x3c>)
 8000f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58024400 	.word	0x58024400

08000f98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d11f      	bne.n	8000ffa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <HAL_TIM_MspPostInit+0x70>)
 8000ff6:	f000 fa8b 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58024400 	.word	0x58024400
 8001008:	58020000 	.word	0x58020000

0800100c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <MX_USART3_UART_Init+0x94>)
 8001014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_USART3_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART3_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001056:	f004 f863 	bl	8005120 <HAL_UART_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001060:	f7ff fde2 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_USART3_UART_Init+0x90>)
 8001068:	f005 f896 	bl	8006198 <HAL_UARTEx_SetTxFifoThreshold>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001072:	f7ff fdd9 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <MX_USART3_UART_Init+0x90>)
 800107a:	f005 f8cb 	bl	8006214 <HAL_UARTEx_SetRxFifoThreshold>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001084:	f7ff fdd0 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_USART3_UART_Init+0x90>)
 800108a:	f005 f84c 	bl	8006126 <HAL_UARTEx_DisableFifoMode>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001094:	f7ff fdc8 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2400024c 	.word	0x2400024c
 80010a0:	40004800 	.word	0x40004800

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b8      	sub	sp, #224	; 0xe0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22bc      	movs	r2, #188	; 0xbc
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f95b 	bl	8006380 <memset>
  if(uartHandle->Instance==USART3)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a25      	ldr	r2, [pc, #148]	; (8001164 <HAL_UART_MspInit+0xc0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d142      	bne.n	800115a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fc20 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ee:	f7ff fd9b 	bl	8000c28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_UART_MspInit+0xc4>)
 80010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_UART_MspInit+0xc4>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_UART_MspInit+0xc4>)
 8001104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0xc4>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_UART_MspInit+0xc4>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0xc4>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001132:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_UART_MspInit+0xc8>)
 8001156:	f000 f9db 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	37e0      	adds	r7, #224	; 0xe0
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40004800 	.word	0x40004800
 8001168:	58024400 	.word	0x58024400
 800116c:	58020c00 	.word	0x58020c00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001174:	f7ff fa8e 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f005 f8cb 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fb91 	bl	80008c8 <main>
  bx  lr
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011b0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80011b4:	080090ec 	.word	0x080090ec
  ldr r2, =_sbss
 80011b8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80011bc:	240002f0 	.word	0x240002f0

080011c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC3_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f96e 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011d0:	f001 f9d4 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_Init+0x68>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	4913      	ldr	r1, [pc, #76]	; (8001230 <HAL_Init+0x6c>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_Init+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_Init+0x6c>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_Init+0x70>)
 8001206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_Init+0x74>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f814 	bl	800123c <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e002      	b.n	8001224 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800121e:	f7ff fd1b 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58024400 	.word	0x58024400
 8001230:	08008ccc 	.word	0x08008ccc
 8001234:	24000004 	.word	0x24000004
 8001238:	24000000 	.word	0x24000000

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e021      	b.n	8001294 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_InitTick+0x64>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_InitTick+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f945 	bl	80014f6 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f91d 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x68>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2400000c 	.word	0x2400000c
 80012a0:	24000000 	.word	0x24000000
 80012a4:	24000008 	.word	0x24000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2400000c 	.word	0x2400000c
 80012cc:	240002dc 	.word	0x240002dc

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	240002dc 	.word	0x240002dc

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2400000c 	.word	0x2400000c

08001330 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetREVID+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1b      	lsrs	r3, r3, #16
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	5c001000 	.word	0x5c001000

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	4313      	orrs	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	05fa0000 	.word	0x05fa0000

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff47 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb2 	bl	8001468 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_GPIO_Init+0x234>)
 8001520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001522:	e194      	b.n	800184e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8186 	beq.w	8001848 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d005      	beq.n	8001554 <HAL_GPIO_Init+0x44>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d130      	bne.n	80015b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800158a:	2201      	movs	r2, #1
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	f003 0201 	and.w	r2, r3, #1
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d017      	beq.n	80015f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d123      	bne.n	8001646 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0203 	and.w	r2, r3, #3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80e0 	beq.w	8001848 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x238>)
 800168a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <HAL_GPIO_Init+0x238>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_GPIO_Init+0x238>)
 800169a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_GPIO_Init+0x23c>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_GPIO_Init+0x240>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d052      	beq.n	8001778 <HAL_GPIO_Init+0x268>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_GPIO_Init+0x244>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d031      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_GPIO_Init+0x248>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d02b      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_GPIO_Init+0x24c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d025      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_GPIO_Init+0x250>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01f      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x254>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x258>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_GPIO_Init+0x25c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_GPIO_Init+0x260>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_GPIO_Init+0x264>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x20e>
 800171a:	2309      	movs	r3, #9
 800171c:	e02d      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800171e:	230a      	movs	r3, #10
 8001720:	e02b      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001722:	2308      	movs	r3, #8
 8001724:	e029      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001726:	2307      	movs	r3, #7
 8001728:	e027      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800172a:	2306      	movs	r3, #6
 800172c:	e025      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800172e:	2305      	movs	r3, #5
 8001730:	e023      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001732:	2304      	movs	r3, #4
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001736:	2303      	movs	r3, #3
 8001738:	e01f      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800173a:	2302      	movs	r3, #2
 800173c:	e01d      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800173e:	2301      	movs	r3, #1
 8001740:	e01b      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001742:	bf00      	nop
 8001744:	58000080 	.word	0x58000080
 8001748:	58024400 	.word	0x58024400
 800174c:	58000400 	.word	0x58000400
 8001750:	58020000 	.word	0x58020000
 8001754:	58020400 	.word	0x58020400
 8001758:	58020800 	.word	0x58020800
 800175c:	58020c00 	.word	0x58020c00
 8001760:	58021000 	.word	0x58021000
 8001764:	58021400 	.word	0x58021400
 8001768:	58021800 	.word	0x58021800
 800176c:	58021c00 	.word	0x58021c00
 8001770:	58022000 	.word	0x58022000
 8001774:	58022400 	.word	0x58022400
 8001778:	2300      	movs	r3, #0
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	4093      	lsls	r3, r2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178a:	4938      	ldr	r1, [pc, #224]	; (800186c <HAL_GPIO_Init+0x35c>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	f47f ae63 	bne.w	8001524 <HAL_GPIO_Init+0x14>
  }
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3724      	adds	r7, #36	; 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58000400 	.word	0x58000400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_HSEM_FastTake+0x2c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3320      	adds	r3, #32
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_HSEM_FastTake+0x30>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	58026400 	.word	0x58026400
 80018d4:	80000300 	.word	0x80000300

080018d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018e2:	4906      	ldr	r1, [pc, #24]	; (80018fc <HAL_HSEM_Release+0x24>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58026400 	.word	0x58026400

08001900 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	2b06      	cmp	r3, #6
 8001912:	d00a      	beq.n	800192a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e040      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e03e      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001932:	491f      	ldr	r1, [pc, #124]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4313      	orrs	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800193a:	f7ff fcc9 	bl	80012d0 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001940:	e009      	b.n	8001956 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001942:	f7ff fcc5 	bl	80012d0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001950:	d901      	bls.n	8001956 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e028      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001962:	d1ee      	bne.n	8001942 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b1e      	cmp	r3, #30
 8001968:	d008      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b2e      	cmp	r3, #46	; 0x2e
 800196e:	d005      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b1d      	cmp	r3, #29
 8001974:	d002      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b2d      	cmp	r3, #45	; 0x2d
 800197a:	d114      	bne.n	80019a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800197c:	f7ff fca8 	bl	80012d0 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001982:	e009      	b.n	8001998 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001984:	f7ff fca4 	bl	80012d0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001992:	d901      	bls.n	8001998 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d1ee      	bne.n	8001984 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58024800 	.word	0x58024800

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 bc1d 	b.w	8002202 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8087 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d6:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_OscConfig+0x48>
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	2b18      	cmp	r3, #24
 80019f0:	d110      	bne.n	8001a14 <HAL_RCC_OscConfig+0x60>
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d10b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d06c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d168      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e3f6      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x78>
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a86      	ldr	r2, [pc, #536]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e02e      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x9a>
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e01d      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0xbe>
 8001a58:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a71      	ldr	r2, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d013      	beq.n	8001aba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fc1d 	bl	80012d0 <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fc19 	bl	80012d0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e3aa      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0xe6>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fc09 	bl	80012d0 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fc05 	bl	80012d0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e396      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80cb 	beq.w	8001c88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001afa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_RCC_OscConfig+0x164>
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	2b18      	cmp	r3, #24
 8001b0c:	d156      	bne.n	8001bbc <HAL_RCC_OscConfig+0x208>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d151      	bne.n	8001bbc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x17c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e368      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 0219 	bic.w	r2, r3, #25
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	493f      	ldr	r1, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b42:	f7ff fbc5 	bl	80012d0 <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fbc1 	bl	80012d0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e352      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	f7ff fbe2 	bl	8001330 <HAL_GetREVID>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d817      	bhi.n	8001ba6 <HAL_RCC_OscConfig+0x1f2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1dc>
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b8e:	e07b      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	031b      	lsls	r3, r3, #12
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba4:	e070      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	061b      	lsls	r3, r3, #24
 8001bb4:	4921      	ldr	r1, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bba:	e065      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d048      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0219 	bic.w	r2, r3, #25
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	491a      	ldr	r1, [pc, #104]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb7b 	bl	80012d0 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fb77 	bl	80012d0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e308      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	f7ff fb98 	bl	8001330 <HAL_GetREVID>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d81a      	bhi.n	8001c40 <HAL_RCC_OscConfig+0x28c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x270>
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	6053      	str	r3, [r2, #4]
 8001c22:	e031      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	031b      	lsls	r3, r3, #12
 8001c32:	4902      	ldr	r1, [pc, #8]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e026      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
 8001c3a:	bf00      	nop
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	4b9a      	ldr	r3, [pc, #616]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	4997      	ldr	r1, [pc, #604]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e018      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b95      	ldr	r3, [pc, #596]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a94      	ldr	r2, [pc, #592]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb35 	bl	80012d0 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb31 	bl	80012d0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2c2      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c7c:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a9 	beq.w	8001de8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b85      	ldr	r3, [pc, #532]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_OscConfig+0x308>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b18      	cmp	r3, #24
 8001cb0:	d13a      	bne.n	8001d28 <HAL_RCC_OscConfig+0x374>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d135      	bne.n	8001d28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cbc:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x320>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e296      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cd4:	f7ff fb2c 	bl	8001330 <HAL_GetREVID>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d817      	bhi.n	8001d12 <HAL_RCC_OscConfig+0x35e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x348>
 8001cea:	4b70      	ldr	r3, [pc, #448]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cfa:	e075      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	4968      	ldr	r1, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d10:	e06a      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	4962      	ldr	r1, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d26:	e05f      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d042      	beq.n	8001db6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fac8 	bl	80012d0 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d44:	f7ff fac4 	bl	80012d0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e255      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d62:	f7ff fae5 	bl	8001330 <HAL_GetREVID>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d817      	bhi.n	8001da0 <HAL_RCC_OscConfig+0x3ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d108      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3d6>
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d80:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d86:	6053      	str	r3, [r2, #4]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	069b      	lsls	r3, r3, #26
 8001d98:	4944      	ldr	r1, [pc, #272]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e023      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	493f      	ldr	r1, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fa85 	bl	80012d0 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa81 	bl	80012d0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e212      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d036      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa62 	bl	80012d0 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa5e 	bl	80012d0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1ef      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x45c>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fa48 	bl	80012d0 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fa44 	bl	80012d0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1d5      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d039      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa25 	bl	80012d0 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e8a:	f7ff fa21 	bl	80012d0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1b2      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4d6>
 8001ea8:	e01b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
 8001eaa:	bf00      	nop
 8001eac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa08 	bl	80012d0 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ec4:	f7ff fa04 	bl	80012d0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e195      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8081 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a8b      	ldr	r2, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f9e8 	bl	80012d0 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff f9e4 	bl	80012d0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e175      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f16:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x584>
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e02d      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5a6>
 8001f40:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a76      	ldr	r2, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a73      	ldr	r2, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c8>
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a64      	ldr	r2, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f998 	bl	80012d0 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f994 	bl	80012d0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e123      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fba:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x5f0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f982 	bl	80012d0 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f97e 	bl	80012d0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e10d      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ee      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8102 	beq.w	8002200 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002004:	2b18      	cmp	r3, #24
 8002006:	f000 80bd 	beq.w	8002184 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 809e 	bne.w	8002150 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a41      	ldr	r2, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800201a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f956 	bl	80012d0 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f952 	bl	80012d0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0e3      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_OscConfig+0x774>)
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	430a      	orrs	r2, r1
 800205a:	4931      	ldr	r1, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	628b      	str	r3, [r1, #40]	; 0x28
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	3b01      	subs	r3, #1
 8002066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	3b01      	subs	r3, #1
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	b29b      	uxth	r3, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	3b01      	subs	r3, #1
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002090:	4923      	ldr	r1, [pc, #140]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x778>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ae:	00d2      	lsls	r2, r2, #3
 80020b0:	491b      	ldr	r1, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f023 020c 	bic.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4917      	ldr	r1, [pc, #92]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f023 0202 	bic.w	r2, r3, #2
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	4912      	ldr	r1, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f8db 	bl	80012d0 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800211c:	e011      	b.n	8002142 <HAL_RCC_OscConfig+0x78e>
 800211e:	bf00      	nop
 8002120:	58024400 	.word	0x58024400
 8002124:	58024800 	.word	0x58024800
 8002128:	fffffc0c 	.word	0xfffffc0c
 800212c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff f8ce 	bl	80012d0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e05f      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002142:	4b32      	ldr	r3, [pc, #200]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x77c>
 800214e:	e057      	b.n	8002200 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2d      	ldr	r2, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f8b8 	bl	80012d0 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff f8b4 	bl	80012d0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e045      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x7b0>
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_RCC_OscConfig+0x858>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2b01      	cmp	r3, #1
 8002196:	d031      	beq.n	80021fc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0203 	and.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d12a      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d122      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0a5b      	lsrs	r3, r3, #9
 80021ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0e1b      	lsrs	r3, r3, #24
 80021ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	58024400 	.word	0x58024400

08002210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e19c      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b8a      	ldr	r3, [pc, #552]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b87      	ldr	r3, [pc, #540]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	4985      	ldr	r1, [pc, #532]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e184      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226c:	429a      	cmp	r2, r3
 800226e:	d908      	bls.n	8002282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002270:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4975      	ldr	r1, [pc, #468]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d908      	bls.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d908      	bls.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	495e      	ldr	r1, [pc, #376]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d908      	bls.n	800230c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022fa:	4b56      	ldr	r3, [pc, #344]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4953      	ldr	r1, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4947      	ldr	r1, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002336:	4313      	orrs	r3, r2
 8002338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d055      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4940      	ldr	r1, [pc, #256]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002354:	4313      	orrs	r3, r2
 8002356:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d121      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ea      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0de      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4925      	ldr	r1, [pc, #148]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe ff85 	bl	80012d0 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe ff81 	bl	80012d0 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0be      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1eb      	bne.n	80023ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	429a      	cmp	r2, r3
 800240c:	d208      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800241c:	4313      	orrs	r3, r2
 800241e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d214      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	4906      	ldr	r1, [pc, #24]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e086      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
 8002450:	52002000 	.word	0x52002000
 8002454:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002470:	429a      	cmp	r2, r3
 8002472:	d208      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4939      	ldr	r1, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002482:	4313      	orrs	r3, r2
 8002484:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800249e:	429a      	cmp	r2, r3
 80024a0:	d208      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a2:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	492e      	ldr	r1, [pc, #184]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d208      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d208      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4917      	ldr	r1, [pc, #92]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 800250c:	4313      	orrs	r3, r2
 800250e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002510:	f000 f834 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	4912      	ldr	r1, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x360>)
 8002546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x364>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x368>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fe72 	bl	800123c <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	08008ccc 	.word	0x08008ccc
 8002570:	24000004 	.word	0x24000004
 8002574:	24000000 	.word	0x24000000
 8002578:	24000008 	.word	0x24000008

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002582:	4bb3      	ldr	r3, [pc, #716]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258a:	2b18      	cmp	r3, #24
 800258c:	f200 8155 	bhi.w	800283a <HAL_RCC_GetSysClockFreq+0x2be>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025fd 	.word	0x080025fd
 800259c:	0800283b 	.word	0x0800283b
 80025a0:	0800283b 	.word	0x0800283b
 80025a4:	0800283b 	.word	0x0800283b
 80025a8:	0800283b 	.word	0x0800283b
 80025ac:	0800283b 	.word	0x0800283b
 80025b0:	0800283b 	.word	0x0800283b
 80025b4:	0800283b 	.word	0x0800283b
 80025b8:	08002623 	.word	0x08002623
 80025bc:	0800283b 	.word	0x0800283b
 80025c0:	0800283b 	.word	0x0800283b
 80025c4:	0800283b 	.word	0x0800283b
 80025c8:	0800283b 	.word	0x0800283b
 80025cc:	0800283b 	.word	0x0800283b
 80025d0:	0800283b 	.word	0x0800283b
 80025d4:	0800283b 	.word	0x0800283b
 80025d8:	08002629 	.word	0x08002629
 80025dc:	0800283b 	.word	0x0800283b
 80025e0:	0800283b 	.word	0x0800283b
 80025e4:	0800283b 	.word	0x0800283b
 80025e8:	0800283b 	.word	0x0800283b
 80025ec:	0800283b 	.word	0x0800283b
 80025f0:	0800283b 	.word	0x0800283b
 80025f4:	0800283b 	.word	0x0800283b
 80025f8:	0800262f 	.word	0x0800262f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800261a:	e111      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800261c:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261e:	61bb      	str	r3, [r7, #24]
    break;
 8002620:	e10e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002622:	4b8d      	ldr	r3, [pc, #564]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002624:	61bb      	str	r3, [r7, #24]
    break;
 8002626:	e10b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800262a:	61bb      	str	r3, [r7, #24]
    break;
 800262c:	e108      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002638:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002644:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800264e:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80e1 	beq.w	8002834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f000 8083 	beq.w	8002780 <HAL_RCC_GetSysClockFreq+0x204>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x114>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d056      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x1c0>
 800268e:	e099      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026f6:	e087      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	ed97 6a02 	vldr	s12, [r7, #8]
 800271e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800273a:	e065      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800277e:	e043      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800286c <HAL_RCC_GetSysClockFreq+0x2f0>
 800278e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027c2:	e021      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	3301      	adds	r3, #1
 8002814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	edd7 6a07 	vldr	s13, [r7, #28]
 8002824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 3a90 	vmov	r3, s15
 8002830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    break;
 8002838:	e002      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800283c:	61bb      	str	r3, [r7, #24]
    break;
 800283e:	bf00      	nop
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	03d09000 	.word	0x03d09000
 8002858:	003d0900 	.word	0x003d0900
 800285c:	007a1200 	.word	0x007a1200
 8002860:	46000000 	.word	0x46000000
 8002864:	4c742400 	.word	0x4c742400
 8002868:	4a742400 	.word	0x4a742400
 800286c:	4af42400 	.word	0x4af42400

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002876:	f7ff fe81 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490f      	ldr	r1, [pc, #60]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08008ccc 	.word	0x08008ccc
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028d4:	f7ff ffcc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	08008ccc 	.word	0x08008ccc

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002900:	f7ff ffb6 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400
 8002924:	08008ccc 	.word	0x08008ccc

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002934:	2300      	movs	r3, #0
 8002936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800294c:	d02a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800294e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002952:	d824      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d018      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295e:	d81e      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d007      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296c:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	4aa2      	ldr	r2, [pc, #648]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9d5 	bl	8003d30 <RCCEx_PLL2_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fa7e 	bl	8003e94 <RCCEx_PLL3_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ac:	4b93      	ldr	r3, [pc, #588]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b8:	4990      	ldr	r1, [pc, #576]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	650b      	str	r3, [r1, #80]	; 0x50
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d826      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f5 	.word	0x080029f5
 80029e4:	08002a03 	.word	0x08002a03
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a2d 	.word	0x08002a2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a00:	e015      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 f991 	bl	8003d30 <RCCEx_PLL2_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fa3a 	bl	8003e94 <RCCEx_PLL3_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a34:	4b71      	ldr	r3, [pc, #452]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f023 0207 	bic.w	r2, r3, #7
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	496e      	ldr	r1, [pc, #440]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	650b      	str	r3, [r1, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d042      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d02b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d825      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a68:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6a:	d028      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6e:	d821      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a70:	2b80      	cmp	r3, #128	; 0x80
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d81d      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d007      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a5d      	ldr	r2, [pc, #372]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e017      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f94a 	bl	8003d30 <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 f9f3 	bl	8003e94 <RCCEx_PLL3_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ac6:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	494a      	ldr	r1, [pc, #296]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ad8:	e001      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d049      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002af4:	d030      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afa:	d82a      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002afc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b00:	d02c      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b06:	d824      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0c:	d018      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d81e      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b2c:	e017      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f8fb 	bl	8003d30 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b3e:	e00e      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f9a4 	bl	8003e94 <RCCEx_PLL3_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b72:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	658b      	str	r3, [r1, #88]	; 0x58
 8002b78:	e001      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d04b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b94:	d030      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d82a      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba0:	d02e      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002ba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bac:	d018      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bb2:	d81e      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d007      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e019      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f8ab 	bl	8003d30 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bde:	e010      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f954 	bl	8003e94 <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e007      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	e004      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e002      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bfc:	58024400 	.word	0x58024400
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c08:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c16:	4996      	ldr	r1, [pc, #600]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8002c1c:	e001      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d032      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d01c      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002c36:	2b30      	cmp	r3, #48	; 0x30
 8002c38:	d817      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d813      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4a:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a88      	ldr	r2, [pc, #544]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c56:	e00e      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f866 	bl	8003d30 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c68:	e005      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c7c:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	4979      	ldr	r1, [pc, #484]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c8e:	e001      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d047      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca8:	d030      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cae:	d82a      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cb4:	d02c      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cba:	d824      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d018      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	d81e      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d007      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ce0:	e017      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f821 	bl	8003d30 <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf2:	e00e      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f8ca 	bl	8003e94 <RCCEx_PLL3_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d04:	e005      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	4952      	ldr	r1, [pc, #328]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	650b      	str	r3, [r1, #80]	; 0x50
 8002d2a:	e001      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d049      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d02e      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4a:	d828      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d50:	d02a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d56:	d822      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5c:	d026      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d62:	d81c      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d68:	d010      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6e:	d816      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d111      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 ffd5 	bl	8003d30 <RCCEx_PLL2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d8a:	e012      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3324      	adds	r3, #36	; 0x24
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f87e 	bl	8003e94 <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d9c:	e009      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
      break;
 8002da2:	e006      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002da4:	bf00      	nop
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	492a      	ldr	r1, [pc, #168]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8002dca:	e001      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d04d      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de6:	d02e      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dec:	d828      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d02a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d822      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dfe:	d026      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e04:	d81c      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d816      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 ff84 	bl	8003d30 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e2c:	e012      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f82d 	bl	8003e94 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e68:	4901      	ldr	r1, [pc, #4]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d00e      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e92:	d814      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9e:	4baf      	ldr	r3, [pc, #700]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	4aae      	ldr	r2, [pc, #696]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 ff3c 	bl	8003d30 <RCCEx_PLL2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ecc:	4ba3      	ldr	r3, [pc, #652]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed8:	49a0      	ldr	r1, [pc, #640]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ede:	e001      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d81b      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f37 	.word	0x08002f37
 8002f04:	08002f11 	.word	0x08002f11
 8002f08:	08002f1f 	.word	0x08002f1f
 8002f0c:	08002f37 	.word	0x08002f37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4a91      	ldr	r2, [pc, #580]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f1c:	e00c      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 ff03 	bl	8003d30 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f3e:	4b87      	ldr	r3, [pc, #540]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4984      	ldr	r1, [pc, #528]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f50:	e001      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8086 	beq.w	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b7e      	ldr	r3, [pc, #504]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f70:	f7fe f9ae 	bl	80012d0 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe f9aa 	bl	80012d0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d902      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	75fb      	strb	r3, [r7, #23]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8c:	4b74      	ldr	r3, [pc, #464]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d166      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fa8:	4053      	eors	r3, r2
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d013      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a66      	ldr	r2, [pc, #408]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fd4:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d115      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe f973 	bl	80012d0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	e00b      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f96f 	bl	80012d0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d902      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	75fb      	strb	r3, [r7, #23]
            break;
 8003004:	e005      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	4b55      	ldr	r3, [pc, #340]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ed      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d126      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003026:	d10d      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003036:	0919      	lsrs	r1, r3, #4
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800303a:	400b      	ands	r3, r1
 800303c:	4947      	ldr	r1, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303e:	4313      	orrs	r3, r2
 8003040:	610b      	str	r3, [r1, #16]
 8003042:	e005      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a44      	ldr	r2, [pc, #272]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800304e:	6113      	str	r3, [r2, #16]
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	493f      	ldr	r1, [pc, #252]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003060:	4313      	orrs	r3, r2
 8003062:	670b      	str	r3, [r1, #112]	; 0x70
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	75bb      	strb	r3, [r7, #22]
 800306a:	e001      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8085 	beq.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003082:	2b28      	cmp	r3, #40	; 0x28
 8003084:	d866      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	08003169 	.word	0x08003169
 8003090:	08003155 	.word	0x08003155
 8003094:	08003155 	.word	0x08003155
 8003098:	08003155 	.word	0x08003155
 800309c:	08003155 	.word	0x08003155
 80030a0:	08003155 	.word	0x08003155
 80030a4:	08003155 	.word	0x08003155
 80030a8:	08003155 	.word	0x08003155
 80030ac:	08003131 	.word	0x08003131
 80030b0:	08003155 	.word	0x08003155
 80030b4:	08003155 	.word	0x08003155
 80030b8:	08003155 	.word	0x08003155
 80030bc:	08003155 	.word	0x08003155
 80030c0:	08003155 	.word	0x08003155
 80030c4:	08003155 	.word	0x08003155
 80030c8:	08003155 	.word	0x08003155
 80030cc:	08003143 	.word	0x08003143
 80030d0:	08003155 	.word	0x08003155
 80030d4:	08003155 	.word	0x08003155
 80030d8:	08003155 	.word	0x08003155
 80030dc:	08003155 	.word	0x08003155
 80030e0:	08003155 	.word	0x08003155
 80030e4:	08003155 	.word	0x08003155
 80030e8:	08003155 	.word	0x08003155
 80030ec:	08003169 	.word	0x08003169
 80030f0:	08003155 	.word	0x08003155
 80030f4:	08003155 	.word	0x08003155
 80030f8:	08003155 	.word	0x08003155
 80030fc:	08003155 	.word	0x08003155
 8003100:	08003155 	.word	0x08003155
 8003104:	08003155 	.word	0x08003155
 8003108:	08003155 	.word	0x08003155
 800310c:	08003169 	.word	0x08003169
 8003110:	08003155 	.word	0x08003155
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
 8003120:	08003155 	.word	0x08003155
 8003124:	08003155 	.word	0x08003155
 8003128:	08003155 	.word	0x08003155
 800312c:	08003169 	.word	0x08003169
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fdfa 	bl	8003d30 <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003140:	e013      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3324      	adds	r3, #36	; 0x24
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fea3 	bl	8003e94 <RCCEx_PLL3_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003152:	e00a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	e007      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
 8003160:	58024800 	.word	0x58024800
 8003164:	00ffffcf 	.word	0x00ffffcf
      break;
 8003168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003170:	4b96      	ldr	r3, [pc, #600]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317c:	4993      	ldr	r1, [pc, #588]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	654b      	str	r3, [r1, #84]	; 0x54
 8003182:	e001      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d038      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	2b05      	cmp	r3, #5
 800319a:	d821      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031e7 	.word	0x080031e7
 80031a8:	080031bd 	.word	0x080031bd
 80031ac:	080031cf 	.word	0x080031cf
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fdb4 	bl	8003d30 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031cc:	e00c      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3324      	adds	r3, #36	; 0x24
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fe5d 	bl	8003e94 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031de:	e003      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
      break;
 80031e4:	e000      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80031e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4974      	ldr	r1, [pc, #464]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003200:	e001      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	2b05      	cmp	r3, #5
 800321a:	d821      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003267 	.word	0x08003267
 8003228:	0800323d 	.word	0x0800323d
 800322c:	0800324f 	.word	0x0800324f
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fd74 	bl	8003d30 <RCCEx_PLL2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800324c:	e00c      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fe1d 	bl	8003e94 <RCCEx_PLL3_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800325e:	e003      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	4953      	ldr	r1, [pc, #332]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	658b      	str	r3, [r1, #88]	; 0x58
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d04b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329e:	d02e      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a4:	d828      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d02a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d822      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032b6:	d026      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80032b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032bc:	d81c      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c2:	d010      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d816      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01d      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80032ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d2:	d111      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fd28 	bl	8003d30 <RCCEx_PLL2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032e4:	e012      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3324      	adds	r3, #36	; 0x24
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fdd1 	bl	8003e94 <RCCEx_PLL3_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
      break;
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032fe:	bf00      	nop
 8003300:	e004      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800330a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	492a      	ldr	r1, [pc, #168]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	654b      	str	r3, [r1, #84]	; 0x54
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d04d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003342:	d02e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003344:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003348:	d828      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d02a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d822      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335a:	d026      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003360:	d81c      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003366:	d010      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d816      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d111      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcd6 	bl	8003d30 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003388:	e012      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd7f 	bl	8003e94 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c4:	4901      	ldr	r1, [pc, #4]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	658b      	str	r3, [r1, #88]	; 0x58
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80033cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04b      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033ea:	d02e      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f0:	d828      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d02a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fc:	d822      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003402:	d026      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003404:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003408:	d81c      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340e:	d010      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d816      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d111      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fc82 	bl	8003d30 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003430:	e012      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3324      	adds	r3, #36	; 0x24
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fd2b 	bl	8003e94 <RCCEx_PLL3_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
      break;
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800344a:	bf00      	nop
 800344c:	e004      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800344e:	bf00      	nop
 8003450:	e002      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346c:	4999      	ldr	r1, [pc, #612]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	658b      	str	r3, [r1, #88]	; 0x58
 8003472:	e001      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d10a      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3324      	adds	r3, #36	; 0x24
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fcfc 	bl	8003e94 <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b4:	4987      	ldr	r1, [pc, #540]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d0:	d10a      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3324      	adds	r3, #36	; 0x24
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fcdb 	bl	8003e94 <RCCEx_PLL3_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e8:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	4977      	ldr	r1, [pc, #476]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d034      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800350e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003512:	d01d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003518:	d817      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003524:	e011      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fbff 	bl	8003d30 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003536:	e00c      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	2102      	movs	r1, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fca8 	bl	8003e94 <RCCEx_PLL3_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003548:	e003      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
      break;
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003566:	495b      	ldr	r1, [pc, #364]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	658b      	str	r3, [r1, #88]	; 0x58
 800356c:	e001      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d033      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003588:	d01c      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800358a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358e:	d816      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359a:	d007      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4a4c      	ldr	r2, [pc, #304]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc6e 	bl	8003e94 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	493e      	ldr	r1, [pc, #248]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	654b      	str	r3, [r1, #84]	; 0x54
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d029      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d007      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003600:	e00f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800360e:	e00b      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fb8a 	bl	8003d30 <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
      break;
 8003626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4926      	ldr	r1, [pc, #152]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800363c:	4313      	orrs	r3, r2
 800363e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003640:	e001      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3324      	adds	r3, #36	; 0x24
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fc1b 	bl	8003e94 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d033      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367c:	d017      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800367e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003682:	d811      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d013      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800368a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368e:	d80b      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003698:	d106      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036a6:	e007      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	e004      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ca:	4902      	ldr	r1, [pc, #8]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	654b      	str	r3, [r1, #84]	; 0x54
 80036d0:	e004      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	492e      	ldr	r1, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003714:	4926      	ldr	r1, [pc, #152]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003732:	491f      	ldr	r1, [pc, #124]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003734:	4313      	orrs	r3, r2
 8003736:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800374a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800374e:	6113      	str	r3, [r2, #16]
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	da08      	bge.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003776:	4313      	orrs	r3, r2
 8003778:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003796:	4313      	orrs	r3, r2
 8003798:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800379a:	7dbb      	ldrb	r3, [r7, #22]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037b8:	f7ff f85a 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	58024400 	.word	0x58024400
 80037dc:	08008ccc 	.word	0x08008ccc

080037e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037e8:	4ba1      	ldr	r3, [pc, #644]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037f2:	4b9f      	ldr	r3, [pc, #636]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	0b1b      	lsrs	r3, r3, #12
 80037f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037fe:	4b9c      	ldr	r3, [pc, #624]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800380a:	4b99      	ldr	r3, [pc, #612]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8111 	beq.w	8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	f000 8083 	beq.w	800393c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f200 80a1 	bhi.w	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d056      	beq.n	80038f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800384a:	e099      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02d      	beq.n	80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003858:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	4a84      	ldr	r2, [pc, #528]	; (8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b7b      	ldr	r3, [pc, #492]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a03 	vldr	s12, [r7, #12]
 8003896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038b2:	e087      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f6:	e065      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393a:	e043      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b48      	ldr	r3, [pc, #288]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397e:	e021      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039de:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ea:	ee17 2a90 	vmov	r2, s15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a18:	ee17 2a90 	vmov	r2, s15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 2a90 	vmov	r2, s15
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400
 8003a74:	03d09000 	.word	0x03d09000
 8003a78:	46000000 	.word	0x46000000
 8003a7c:	4c742400 	.word	0x4c742400
 8003a80:	4a742400 	.word	0x4a742400
 8003a84:	4af42400 	.word	0x4af42400

08003a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a90:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a9a:	4b9f      	ldr	r3, [pc, #636]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	0d1b      	lsrs	r3, r3, #20
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003aa6:	4b9c      	ldr	r3, [pc, #624]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ab2:	4b99      	ldr	r3, [pc, #612]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	08db      	lsrs	r3, r3, #3
 8003ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8111 	beq.w	8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f000 8083 	beq.w	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f200 80a1 	bhi.w	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d056      	beq.n	8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003af2:	e099      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02d      	beq.n	8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b00:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	4a84      	ldr	r2, [pc, #528]	; (8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b5a:	e087      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b9e:	e065      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003be2:	e043      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c26:	e021      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	ee17 2a90 	vmov	r2, s15
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	ee17 2a90 	vmov	r2, s15
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cee:	ee17 2a90 	vmov	r2, s15
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
}
 8003d0a:	bf00      	nop
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	03d09000 	.word	0x03d09000
 8003d20:	46000000 	.word	0x46000000
 8003d24:	4c742400 	.word	0x4c742400
 8003d28:	4a742400 	.word	0x4a742400
 8003d2c:	4af42400 	.word	0x4af42400

08003d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d101      	bne.n	8003d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e099      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d4e:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a4e      	ldr	r2, [pc, #312]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fab9 	bl	80012d0 <HAL_GetTick>
 8003d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d62:	f7fd fab5 	bl	80012d0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e086      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d74:	4b45      	ldr	r3, [pc, #276]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d80:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	493f      	ldr	r1, [pc, #252]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	628b      	str	r3, [r1, #40]	; 0x28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	025b      	lsls	r3, r3, #9
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dc4:	4931      	ldr	r1, [pc, #196]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dca:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	492d      	ldr	r1, [pc, #180]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f023 0220 	bic.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4928      	ldr	r1, [pc, #160]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dee:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	4a26      	ldr	r2, [pc, #152]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <RCCEx_PLL2_Config+0x160>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	69d2      	ldr	r2, [r2, #28]
 8003e06:	00d2      	lsls	r2, r2, #3
 8003e08:	4920      	ldr	r1, [pc, #128]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e14:	f043 0310 	orr.w	r3, r3, #16
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e2c:	e00f      	b.n	8003e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d106      	bne.n	8003e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e40:	e005      	b.n	8003e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fa39 	bl	80012d0 <HAL_GetTick>
 8003e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e60:	e008      	b.n	8003e74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e62:	f7fd fa35 	bl	80012d0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	ffff0007 	.word	0xffff0007

08003e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea2:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d101      	bne.n	8003eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e099      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fa07 	bl	80012d0 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ec6:	f7fd fa03 	bl	80012d0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e086      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f28:	4931      	ldr	r1, [pc, #196]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	492d      	ldr	r1, [pc, #180]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4928      	ldr	r1, [pc, #160]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <RCCEx_PLL3_Config+0x160>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69d2      	ldr	r2, [r2, #28]
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4920      	ldr	r1, [pc, #128]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f72:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f90:	e00f      	b.n	8003fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fa4:	e005      	b.n	8003fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd f987 	bl	80012d0 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fc6:	f7fd f983 	bl	80012d0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	ffff0007 	.word	0xffff0007

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e049      	b.n	800409e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff9a 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fbb0 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e049      	b.n	800414c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f841 	bl	8004154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fb59 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_TIM_PWM_Start+0x24>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e03c      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d109      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x3e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e02f      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d109      	bne.n	80041c0 <HAL_TIM_PWM_Start+0x58>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e022      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d109      	bne.n	80041da <HAL_TIM_PWM_Start+0x72>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e015      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e008      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0a1      	b.n	8004352 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xb6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0xc6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	e01b      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start+0xd6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e013      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0xe6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800424c:	e00b      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0xf6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425c:	e003      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fea2 	bl	8004fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_TIM_PWM_Start+0x1f4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a37      	ldr	r2, [pc, #220]	; (8004360 <HAL_TIM_PWM_Start+0x1f8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a35      	ldr	r2, [pc, #212]	; (8004364 <HAL_TIM_PWM_Start+0x1fc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a34      	ldr	r2, [pc, #208]	; (8004368 <HAL_TIM_PWM_Start+0x200>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a32      	ldr	r2, [pc, #200]	; (800436c <HAL_TIM_PWM_Start+0x204>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_PWM_Start+0x142>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_TIM_PWM_Start+0x144>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a25      	ldr	r2, [pc, #148]	; (800435c <HAL_TIM_PWM_Start+0x1f4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d01d      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <HAL_TIM_PWM_Start+0x208>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a24      	ldr	r2, [pc, #144]	; (8004374 <HAL_TIM_PWM_Start+0x20c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <HAL_TIM_PWM_Start+0x210>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_TIM_PWM_Start+0x1f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <HAL_TIM_PWM_Start+0x214>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1a8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_TIM_PWM_Start+0x1fc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d115      	bne.n	800433c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_TIM_PWM_Start+0x218>)
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d015      	beq.n	800434e <HAL_TIM_PWM_Start+0x1e6>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d011      	beq.n	800434e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e008      	b.n	800434e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e000      	b.n	8004350 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00
 800437c:	40001800 	.word	0x40001800
 8004380:	00010007 	.word	0x00010007

08004384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e0ff      	b.n	80045a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b14      	cmp	r3, #20
 80043ae:	f200 80f0 	bhi.w	8004592 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	08004593 	.word	0x08004593
 80043c0:	08004593 	.word	0x08004593
 80043c4:	08004593 	.word	0x08004593
 80043c8:	0800444d 	.word	0x0800444d
 80043cc:	08004593 	.word	0x08004593
 80043d0:	08004593 	.word	0x08004593
 80043d4:	08004593 	.word	0x08004593
 80043d8:	0800448f 	.word	0x0800448f
 80043dc:	08004593 	.word	0x08004593
 80043e0:	08004593 	.word	0x08004593
 80043e4:	08004593 	.word	0x08004593
 80043e8:	080044cf 	.word	0x080044cf
 80043ec:	08004593 	.word	0x08004593
 80043f0:	08004593 	.word	0x08004593
 80043f4:	08004593 	.word	0x08004593
 80043f8:	08004511 	.word	0x08004511
 80043fc:	08004593 	.word	0x08004593
 8004400:	08004593 	.word	0x08004593
 8004404:	08004593 	.word	0x08004593
 8004408:	08004551 	.word	0x08004551
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa5c 	bl	80048d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0208 	orr.w	r2, r2, #8
 8004426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0204 	bic.w	r2, r2, #4
 8004436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6999      	ldr	r1, [r3, #24]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	619a      	str	r2, [r3, #24]
      break;
 800444a:	e0a5      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 facc 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	619a      	str	r2, [r3, #24]
      break;
 800448c:	e084      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fb35 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0208 	orr.w	r2, r2, #8
 80044a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0204 	bic.w	r2, r2, #4
 80044b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69d9      	ldr	r1, [r3, #28]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]
      break;
 80044cc:	e064      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fb9d 	bl	8004c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69d9      	ldr	r1, [r3, #28]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	021a      	lsls	r2, r3, #8
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	61da      	str	r2, [r3, #28]
      break;
 800450e:	e043      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fbe6 	bl	8004ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0208 	orr.w	r2, r2, #8
 800452a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0204 	bic.w	r2, r2, #4
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800454e:	e023      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fc2a 	bl	8004db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	021a      	lsls	r2, r3, #8
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004590:	e002      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
      break;
 8004596:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop

080045ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIM_ConfigClockSource+0x1c>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e0dc      	b.n	8004782 <HAL_TIM_ConfigClockSource+0x1d6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_TIM_ConfigClockSource+0x1e0>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a64      	ldr	r2, [pc, #400]	; (8004790 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f000 80a9 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004604:	4a62      	ldr	r2, [pc, #392]	; (8004790 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f200 80ae 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800460c:	4a61      	ldr	r2, [pc, #388]	; (8004794 <HAL_TIM_ConfigClockSource+0x1e8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f000 80a1 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004614:	4a5f      	ldr	r2, [pc, #380]	; (8004794 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f200 80a6 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800461c:	4a5e      	ldr	r2, [pc, #376]	; (8004798 <HAL_TIM_ConfigClockSource+0x1ec>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f000 8099 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004624:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004626:	4293      	cmp	r3, r2
 8004628:	f200 809e 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800462c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004630:	f000 8091 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004638:	f200 8096 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004640:	f000 8089 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004648:	f200 808e 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d03e      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x124>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f200 8087 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	f000 8086 	beq.w	800476e <HAL_TIM_ConfigClockSource+0x1c2>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d87f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d01a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xf6>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d87b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d050      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x16a>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d877      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d03c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x14a>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d873      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d058      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x18a>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d86f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d064      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d86b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d060      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d867      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05c      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d05a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x1aa>
 80046a0:	e062      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 fc61 	bl	8004f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e04f      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 fc4a 	bl	8004f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	609a      	str	r2, [r3, #8]
      break;
 80046f4:	e03c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fbba 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2150      	movs	r1, #80	; 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fc14 	bl	8004f3c <TIM_ITRx_SetConfig>
      break;
 8004714:	e02c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fbd9 	bl	8004eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2160      	movs	r1, #96	; 0x60
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fc04 	bl	8004f3c <TIM_ITRx_SetConfig>
      break;
 8004734:	e01c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fb9a 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fbf4 	bl	8004f3c <TIM_ITRx_SetConfig>
      break;
 8004754:	e00c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 fbeb 	bl	8004f3c <TIM_ITRx_SetConfig>
      break;
 8004766:	e003      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e000      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800476e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	ffceff88 	.word	0xffceff88
 8004790:	00100040 	.word	0x00100040
 8004794:	00100030 	.word	0x00100030
 8004798:	00100020 	.word	0x00100020

0800479c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a40      	ldr	r2, [pc, #256]	; (80048b0 <TIM_Base_SetConfig+0x114>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d00f      	beq.n	80047dc <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3d      	ldr	r2, [pc, #244]	; (80048b4 <TIM_Base_SetConfig+0x118>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3c      	ldr	r2, [pc, #240]	; (80048b8 <TIM_Base_SetConfig+0x11c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3b      	ldr	r2, [pc, #236]	; (80048bc <TIM_Base_SetConfig+0x120>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <TIM_Base_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d108      	bne.n	80047ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <TIM_Base_SetConfig+0x114>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01f      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fc:	d01b      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2c      	ldr	r2, [pc, #176]	; (80048b4 <TIM_Base_SetConfig+0x118>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d017      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <TIM_Base_SetConfig+0x11c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <TIM_Base_SetConfig+0x120>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00f      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <TIM_Base_SetConfig+0x124>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <TIM_Base_SetConfig+0x128>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_Base_SetConfig+0x12c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x9a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <TIM_Base_SetConfig+0x130>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <TIM_Base_SetConfig+0x114>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00f      	beq.n	8004894 <TIM_Base_SetConfig+0xf8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <TIM_Base_SetConfig+0x124>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <TIM_Base_SetConfig+0x128>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <TIM_Base_SetConfig+0x12c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0xf8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <TIM_Base_SetConfig+0x130>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d103      	bne.n	800489c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	615a      	str	r2, [r3, #20]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <TIM_OC1_SetConfig+0x108>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0302 	bic.w	r3, r3, #2
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <TIM_OC1_SetConfig+0x10c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00f      	beq.n	800494c <TIM_OC1_SetConfig+0x7c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <TIM_OC1_SetConfig+0x110>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_OC1_SetConfig+0x7c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a2b      	ldr	r2, [pc, #172]	; (80049e4 <TIM_OC1_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_OC1_SetConfig+0x7c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <TIM_OC1_SetConfig+0x118>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC1_SetConfig+0x7c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <TIM_OC1_SetConfig+0x11c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10c      	bne.n	8004966 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0308 	bic.w	r3, r3, #8
 8004952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <TIM_OC1_SetConfig+0x10c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00f      	beq.n	800498e <TIM_OC1_SetConfig+0xbe>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <TIM_OC1_SetConfig+0x110>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_OC1_SetConfig+0xbe>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <TIM_OC1_SetConfig+0x114>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_OC1_SetConfig+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_OC1_SetConfig+0x118>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_OC1_SetConfig+0xbe>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_OC1_SetConfig+0x11c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d111      	bne.n	80049b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800499c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	fffeff8f 	.word	0xfffeff8f
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4b34      	ldr	r3, [pc, #208]	; (8004aec <TIM_OC2_SetConfig+0xfc>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0320 	bic.w	r3, r3, #32
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_OC2_SetConfig+0x100>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <TIM_OC2_SetConfig+0x104>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10d      	bne.n	8004a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <TIM_OC2_SetConfig+0x100>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <TIM_OC2_SetConfig+0xac>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <TIM_OC2_SetConfig+0x104>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_OC2_SetConfig+0xac>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <TIM_OC2_SetConfig+0x108>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_OC2_SetConfig+0xac>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <TIM_OC2_SetConfig+0x10c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_OC2_SetConfig+0xac>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <TIM_OC2_SetConfig+0x110>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d113      	bne.n	8004ac4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	feff8fff 	.word	0xfeff8fff
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <TIM_OC3_SetConfig+0xf8>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_OC3_SetConfig+0xfc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_OC3_SetConfig+0x66>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_OC3_SetConfig+0x100>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_OC3_SetConfig+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_OC3_SetConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <TIM_OC3_SetConfig+0x100>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_OC3_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC3_SetConfig+0x104>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_OC3_SetConfig+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <TIM_OC3_SetConfig+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC3_SetConfig+0xaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <TIM_OC3_SetConfig+0x10c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d113      	bne.n	8004bd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	fffeff8f 	.word	0xfffeff8f
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <TIM_OC4_SetConfig+0xbc>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <TIM_OC4_SetConfig+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00f      	beq.n	8004c94 <TIM_OC4_SetConfig+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <TIM_OC4_SetConfig+0xc4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_OC4_SetConfig+0x80>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <TIM_OC4_SetConfig+0xc8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC4_SetConfig+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <TIM_OC4_SetConfig+0xcc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC4_SetConfig+0x80>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <TIM_OC4_SetConfig+0xd0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d109      	bne.n	8004ca8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	feff8fff 	.word	0xfeff8fff
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800

08004ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <TIM_OC5_SetConfig+0xb0>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <TIM_OC5_SetConfig+0xb4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_OC5_SetConfig+0x76>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <TIM_OC5_SetConfig+0xb8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_OC5_SetConfig+0x76>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <TIM_OC5_SetConfig+0xbc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_OC5_SetConfig+0x76>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC5_SetConfig+0xc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_OC5_SetConfig+0x76>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <TIM_OC5_SetConfig+0xc4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d109      	bne.n	8004d72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	fffeff8f 	.word	0xfffeff8f
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800

08004db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <TIM_OC6_SetConfig+0xb4>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	051b      	lsls	r3, r3, #20
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <TIM_OC6_SetConfig+0xb8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00f      	beq.n	8004e28 <TIM_OC6_SetConfig+0x78>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_OC6_SetConfig+0xbc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_OC6_SetConfig+0x78>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <TIM_OC6_SetConfig+0xc0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_OC6_SetConfig+0x78>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC6_SetConfig+0xc4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC6_SetConfig+0x78>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC6_SetConfig+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d109      	bne.n	8004e3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	feff8fff 	.word	0xfeff8fff
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40010400 	.word	0x40010400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800

08004e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 030a 	bic.w	r3, r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0210 	bic.w	r2, r3, #16
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <TIM_ITRx_SetConfig+0x38>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f043 0307 	orr.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	609a      	str	r2, [r3, #8]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	ffcfff8f 	.word	0xffcfff8f

08004f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e06d      	b.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a20      	ldr	r2, [pc, #128]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d01d      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1d      	ldr	r2, [pc, #116]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a16      	ldr	r2, [pc, #88]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10c      	bne.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40001800 	.word	0x40001800
 800511c:	40014000 	.word	0x40014000

08005120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e042      	b.n	80051b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fb ffad 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2224      	movs	r2, #36	; 0x24
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8c2 	bl	80052ec <UART_SetConfig>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e022      	b.n	80051b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fe1e 	bl	8005dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800519e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fea5 	bl	8005f00 <UART_CheckIdleState>
 80051b6:	4603      	mov	r3, r0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	f040 8083 	bne.w	80052e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_UART_Transmit+0x28>
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e07b      	b.n	80052e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Transmit+0x3a>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e074      	b.n	80052e4 <HAL_UART_Transmit+0x124>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	; 0x21
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005212:	f7fc f85d 	bl	80012d0 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005230:	d108      	bne.n	8005244 <HAL_UART_Transmit+0x84>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e003      	b.n	800524c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005254:	e02c      	b.n	80052b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fe98 	bl	8005f96 <UART_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e039      	b.n	80052e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	3302      	adds	r3, #2
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e007      	b.n	800529e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1cc      	bne.n	8005256 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fe65 	bl	8005f96 <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e006      	b.n	80052e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e000      	b.n	80052e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f0:	b092      	sub	sp, #72	; 0x48
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	431a      	orrs	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	431a      	orrs	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4313      	orrs	r3, r2
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4bbe      	ldr	r3, [pc, #760]	; (8005614 <UART_SetConfig+0x328>)
 800531c:	4013      	ands	r3, r2
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005324:	430b      	orrs	r3, r1
 8005326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4ab3      	ldr	r2, [pc, #716]	; (8005618 <UART_SetConfig+0x32c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005354:	4313      	orrs	r3, r2
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4baf      	ldr	r3, [pc, #700]	; (800561c <UART_SetConfig+0x330>)
 8005360:	4013      	ands	r3, r2
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005368:	430b      	orrs	r3, r1
 800536a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f023 010f 	bic.w	r1, r3, #15
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4aa6      	ldr	r2, [pc, #664]	; (8005620 <UART_SetConfig+0x334>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d177      	bne.n	800547c <UART_SetConfig+0x190>
 800538c:	4ba5      	ldr	r3, [pc, #660]	; (8005624 <UART_SetConfig+0x338>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005394:	2b28      	cmp	r3, #40	; 0x28
 8005396:	d86d      	bhi.n	8005474 <UART_SetConfig+0x188>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0xb4>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	08005445 	.word	0x08005445
 80053a4:	08005475 	.word	0x08005475
 80053a8:	08005475 	.word	0x08005475
 80053ac:	08005475 	.word	0x08005475
 80053b0:	08005475 	.word	0x08005475
 80053b4:	08005475 	.word	0x08005475
 80053b8:	08005475 	.word	0x08005475
 80053bc:	08005475 	.word	0x08005475
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	08005475 	.word	0x08005475
 80053c8:	08005475 	.word	0x08005475
 80053cc:	08005475 	.word	0x08005475
 80053d0:	08005475 	.word	0x08005475
 80053d4:	08005475 	.word	0x08005475
 80053d8:	08005475 	.word	0x08005475
 80053dc:	08005475 	.word	0x08005475
 80053e0:	08005455 	.word	0x08005455
 80053e4:	08005475 	.word	0x08005475
 80053e8:	08005475 	.word	0x08005475
 80053ec:	08005475 	.word	0x08005475
 80053f0:	08005475 	.word	0x08005475
 80053f4:	08005475 	.word	0x08005475
 80053f8:	08005475 	.word	0x08005475
 80053fc:	08005475 	.word	0x08005475
 8005400:	0800545d 	.word	0x0800545d
 8005404:	08005475 	.word	0x08005475
 8005408:	08005475 	.word	0x08005475
 800540c:	08005475 	.word	0x08005475
 8005410:	08005475 	.word	0x08005475
 8005414:	08005475 	.word	0x08005475
 8005418:	08005475 	.word	0x08005475
 800541c:	08005475 	.word	0x08005475
 8005420:	08005465 	.word	0x08005465
 8005424:	08005475 	.word	0x08005475
 8005428:	08005475 	.word	0x08005475
 800542c:	08005475 	.word	0x08005475
 8005430:	08005475 	.word	0x08005475
 8005434:	08005475 	.word	0x08005475
 8005438:	08005475 	.word	0x08005475
 800543c:	08005475 	.word	0x08005475
 8005440:	0800546d 	.word	0x0800546d
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e222      	b.n	8005892 <UART_SetConfig+0x5a6>
 800544c:	2304      	movs	r3, #4
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e21e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005454:	2308      	movs	r3, #8
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e21a      	b.n	8005892 <UART_SetConfig+0x5a6>
 800545c:	2310      	movs	r3, #16
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e216      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005464:	2320      	movs	r3, #32
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e212      	b.n	8005892 <UART_SetConfig+0x5a6>
 800546c:	2340      	movs	r3, #64	; 0x40
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e20e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e20a      	b.n	8005892 <UART_SetConfig+0x5a6>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a69      	ldr	r2, [pc, #420]	; (8005628 <UART_SetConfig+0x33c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d130      	bne.n	80054e8 <UART_SetConfig+0x1fc>
 8005486:	4b67      	ldr	r3, [pc, #412]	; (8005624 <UART_SetConfig+0x338>)
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	2b05      	cmp	r3, #5
 8005490:	d826      	bhi.n	80054e0 <UART_SetConfig+0x1f4>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x1ac>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054b1 	.word	0x080054b1
 800549c:	080054b9 	.word	0x080054b9
 80054a0:	080054c1 	.word	0x080054c1
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e1ec      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054b8:	2304      	movs	r3, #4
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e1e8      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054c0:	2308      	movs	r3, #8
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e1e4      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054c8:	2310      	movs	r3, #16
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e1e0      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054d0:	2320      	movs	r3, #32
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e1dc      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054d8:	2340      	movs	r3, #64	; 0x40
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e1d8      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e1d4      	b.n	8005892 <UART_SetConfig+0x5a6>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a4f      	ldr	r2, [pc, #316]	; (800562c <UART_SetConfig+0x340>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d130      	bne.n	8005554 <UART_SetConfig+0x268>
 80054f2:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <UART_SetConfig+0x338>)
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d826      	bhi.n	800554c <UART_SetConfig+0x260>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x218>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	0800551d 	.word	0x0800551d
 8005508:	08005525 	.word	0x08005525
 800550c:	0800552d 	.word	0x0800552d
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e1b6      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e1b2      	b.n	8005892 <UART_SetConfig+0x5a6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e1ae      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e1aa      	b.n	8005892 <UART_SetConfig+0x5a6>
 800553c:	2320      	movs	r3, #32
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e1a6      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e1a2      	b.n	8005892 <UART_SetConfig+0x5a6>
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e19e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a35      	ldr	r2, [pc, #212]	; (8005630 <UART_SetConfig+0x344>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d130      	bne.n	80055c0 <UART_SetConfig+0x2d4>
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <UART_SetConfig+0x338>)
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b05      	cmp	r3, #5
 8005568:	d826      	bhi.n	80055b8 <UART_SetConfig+0x2cc>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x284>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005589 	.word	0x08005589
 8005574:	08005591 	.word	0x08005591
 8005578:	08005599 	.word	0x08005599
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055b1 	.word	0x080055b1
 8005588:	2300      	movs	r3, #0
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e180      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e17c      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e178      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e174      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055a8:	2320      	movs	r3, #32
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e170      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055b0:	2340      	movs	r3, #64	; 0x40
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e16c      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e168      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <UART_SetConfig+0x348>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d142      	bne.n	8005650 <UART_SetConfig+0x364>
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <UART_SetConfig+0x338>)
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d838      	bhi.n	8005648 <UART_SetConfig+0x35c>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x2f0>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	08005605 	.word	0x08005605
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005639 	.word	0x08005639
 80055f0:	08005641 	.word	0x08005641
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e14a      	b.n	8005892 <UART_SetConfig+0x5a6>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e146      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e142      	b.n	8005892 <UART_SetConfig+0x5a6>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e13e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005614:	cfff69f3 	.word	0xcfff69f3
 8005618:	58000c00 	.word	0x58000c00
 800561c:	11fff4ff 	.word	0x11fff4ff
 8005620:	40011000 	.word	0x40011000
 8005624:	58024400 	.word	0x58024400
 8005628:	40004400 	.word	0x40004400
 800562c:	40004800 	.word	0x40004800
 8005630:	40004c00 	.word	0x40004c00
 8005634:	40005000 	.word	0x40005000
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563e:	e128      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e124      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e120      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4acb      	ldr	r2, [pc, #812]	; (8005984 <UART_SetConfig+0x698>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d176      	bne.n	8005748 <UART_SetConfig+0x45c>
 800565a:	4bcb      	ldr	r3, [pc, #812]	; (8005988 <UART_SetConfig+0x69c>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005662:	2b28      	cmp	r3, #40	; 0x28
 8005664:	d86c      	bhi.n	8005740 <UART_SetConfig+0x454>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <UART_SetConfig+0x380>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	08005711 	.word	0x08005711
 8005670:	08005741 	.word	0x08005741
 8005674:	08005741 	.word	0x08005741
 8005678:	08005741 	.word	0x08005741
 800567c:	08005741 	.word	0x08005741
 8005680:	08005741 	.word	0x08005741
 8005684:	08005741 	.word	0x08005741
 8005688:	08005741 	.word	0x08005741
 800568c:	08005719 	.word	0x08005719
 8005690:	08005741 	.word	0x08005741
 8005694:	08005741 	.word	0x08005741
 8005698:	08005741 	.word	0x08005741
 800569c:	08005741 	.word	0x08005741
 80056a0:	08005741 	.word	0x08005741
 80056a4:	08005741 	.word	0x08005741
 80056a8:	08005741 	.word	0x08005741
 80056ac:	08005721 	.word	0x08005721
 80056b0:	08005741 	.word	0x08005741
 80056b4:	08005741 	.word	0x08005741
 80056b8:	08005741 	.word	0x08005741
 80056bc:	08005741 	.word	0x08005741
 80056c0:	08005741 	.word	0x08005741
 80056c4:	08005741 	.word	0x08005741
 80056c8:	08005741 	.word	0x08005741
 80056cc:	08005729 	.word	0x08005729
 80056d0:	08005741 	.word	0x08005741
 80056d4:	08005741 	.word	0x08005741
 80056d8:	08005741 	.word	0x08005741
 80056dc:	08005741 	.word	0x08005741
 80056e0:	08005741 	.word	0x08005741
 80056e4:	08005741 	.word	0x08005741
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005741 	.word	0x08005741
 80056fc:	08005741 	.word	0x08005741
 8005700:	08005741 	.word	0x08005741
 8005704:	08005741 	.word	0x08005741
 8005708:	08005741 	.word	0x08005741
 800570c:	08005739 	.word	0x08005739
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005716:	e0bc      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005718:	2304      	movs	r3, #4
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e0b8      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005720:	2308      	movs	r3, #8
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e0b4      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005728:	2310      	movs	r3, #16
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e0b0      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005730:	2320      	movs	r3, #32
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e0ac      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005738:	2340      	movs	r3, #64	; 0x40
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e0a8      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e0a4      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a8f      	ldr	r2, [pc, #572]	; (800598c <UART_SetConfig+0x6a0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d130      	bne.n	80057b4 <UART_SetConfig+0x4c8>
 8005752:	4b8d      	ldr	r3, [pc, #564]	; (8005988 <UART_SetConfig+0x69c>)
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b05      	cmp	r3, #5
 800575c:	d826      	bhi.n	80057ac <UART_SetConfig+0x4c0>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x478>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	0800577d 	.word	0x0800577d
 8005768:	08005785 	.word	0x08005785
 800576c:	0800578d 	.word	0x0800578d
 8005770:	08005795 	.word	0x08005795
 8005774:	0800579d 	.word	0x0800579d
 8005778:	080057a5 	.word	0x080057a5
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e086      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005784:	2304      	movs	r3, #4
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e082      	b.n	8005892 <UART_SetConfig+0x5a6>
 800578c:	2308      	movs	r3, #8
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e07e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e07a      	b.n	8005892 <UART_SetConfig+0x5a6>
 800579c:	2320      	movs	r3, #32
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e076      	b.n	8005892 <UART_SetConfig+0x5a6>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e072      	b.n	8005892 <UART_SetConfig+0x5a6>
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e06e      	b.n	8005892 <UART_SetConfig+0x5a6>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a75      	ldr	r2, [pc, #468]	; (8005990 <UART_SetConfig+0x6a4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d130      	bne.n	8005820 <UART_SetConfig+0x534>
 80057be:	4b72      	ldr	r3, [pc, #456]	; (8005988 <UART_SetConfig+0x69c>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d826      	bhi.n	8005818 <UART_SetConfig+0x52c>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x4e4>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e9 	.word	0x080057e9
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	080057f9 	.word	0x080057f9
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e050      	b.n	8005892 <UART_SetConfig+0x5a6>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e04c      	b.n	8005892 <UART_SetConfig+0x5a6>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e048      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e044      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005808:	2320      	movs	r3, #32
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e040      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e03c      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e038      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <UART_SetConfig+0x6a8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d130      	bne.n	800588c <UART_SetConfig+0x5a0>
 800582a:	4b57      	ldr	r3, [pc, #348]	; (8005988 <UART_SetConfig+0x69c>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b05      	cmp	r3, #5
 8005834:	d826      	bhi.n	8005884 <UART_SetConfig+0x598>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x550>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005855 	.word	0x08005855
 8005840:	0800585d 	.word	0x0800585d
 8005844:	08005865 	.word	0x08005865
 8005848:	0800586d 	.word	0x0800586d
 800584c:	08005875 	.word	0x08005875
 8005850:	0800587d 	.word	0x0800587d
 8005854:	2302      	movs	r3, #2
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e01a      	b.n	8005892 <UART_SetConfig+0x5a6>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e016      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e012      	b.n	8005892 <UART_SetConfig+0x5a6>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e00e      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005874:	2320      	movs	r3, #32
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e00a      	b.n	8005892 <UART_SetConfig+0x5a6>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e006      	b.n	8005892 <UART_SetConfig+0x5a6>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e002      	b.n	8005892 <UART_SetConfig+0x5a6>
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <UART_SetConfig+0x6a8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	f040 80f8 	bne.w	8005a8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800589e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	dc46      	bgt.n	8005934 <UART_SetConfig+0x648>
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	f2c0 8082 	blt.w	80059b0 <UART_SetConfig+0x6c4>
 80058ac:	3b02      	subs	r3, #2
 80058ae:	2b1e      	cmp	r3, #30
 80058b0:	d87e      	bhi.n	80059b0 <UART_SetConfig+0x6c4>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0x5cc>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	0800593b 	.word	0x0800593b
 80058bc:	080059b1 	.word	0x080059b1
 80058c0:	08005943 	.word	0x08005943
 80058c4:	080059b1 	.word	0x080059b1
 80058c8:	080059b1 	.word	0x080059b1
 80058cc:	080059b1 	.word	0x080059b1
 80058d0:	08005953 	.word	0x08005953
 80058d4:	080059b1 	.word	0x080059b1
 80058d8:	080059b1 	.word	0x080059b1
 80058dc:	080059b1 	.word	0x080059b1
 80058e0:	080059b1 	.word	0x080059b1
 80058e4:	080059b1 	.word	0x080059b1
 80058e8:	080059b1 	.word	0x080059b1
 80058ec:	080059b1 	.word	0x080059b1
 80058f0:	08005963 	.word	0x08005963
 80058f4:	080059b1 	.word	0x080059b1
 80058f8:	080059b1 	.word	0x080059b1
 80058fc:	080059b1 	.word	0x080059b1
 8005900:	080059b1 	.word	0x080059b1
 8005904:	080059b1 	.word	0x080059b1
 8005908:	080059b1 	.word	0x080059b1
 800590c:	080059b1 	.word	0x080059b1
 8005910:	080059b1 	.word	0x080059b1
 8005914:	080059b1 	.word	0x080059b1
 8005918:	080059b1 	.word	0x080059b1
 800591c:	080059b1 	.word	0x080059b1
 8005920:	080059b1 	.word	0x080059b1
 8005924:	080059b1 	.word	0x080059b1
 8005928:	080059b1 	.word	0x080059b1
 800592c:	080059b1 	.word	0x080059b1
 8005930:	080059a3 	.word	0x080059a3
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d037      	beq.n	80059a8 <UART_SetConfig+0x6bc>
 8005938:	e03a      	b.n	80059b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800593a:	f7fd ff3b 	bl	80037b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800593e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005940:	e03c      	b.n	80059bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd ff4a 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005950:	e034      	b.n	80059bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005952:	f107 0318 	add.w	r3, r7, #24
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe f896 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005960:	e02c      	b.n	80059bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <UART_SetConfig+0x69c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <UART_SetConfig+0x69c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	4a07      	ldr	r2, [pc, #28]	; (8005998 <UART_SetConfig+0x6ac>)
 800597a:	fa22 f303 	lsr.w	r3, r2, r3
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005980:	e01c      	b.n	80059bc <UART_SetConfig+0x6d0>
 8005982:	bf00      	nop
 8005984:	40011400 	.word	0x40011400
 8005988:	58024400 	.word	0x58024400
 800598c:	40007800 	.word	0x40007800
 8005990:	40007c00 	.word	0x40007c00
 8005994:	58000c00 	.word	0x58000c00
 8005998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800599c:	4b9d      	ldr	r3, [pc, #628]	; (8005c14 <UART_SetConfig+0x928>)
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059a0:	e00c      	b.n	80059bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a2:	4b9d      	ldr	r3, [pc, #628]	; (8005c18 <UART_SetConfig+0x92c>)
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059a6:	e009      	b.n	80059bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ae:	e005      	b.n	80059bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80059ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 81de 	beq.w	8005d80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	4a94      	ldr	r2, [pc, #592]	; (8005c1c <UART_SetConfig+0x930>)
 80059ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ce:	461a      	mov	r2, r3
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d305      	bcc.n	80059f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059fa:	e1c1      	b.n	8005d80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fe:	2200      	movs	r2, #0
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	60fa      	str	r2, [r7, #12]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	4a84      	ldr	r2, [pc, #528]	; (8005c1c <UART_SetConfig+0x930>)
 8005a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2200      	movs	r2, #0
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a1e:	f7fa fcb7 	bl	8000390 <__aeabi_uldivmod>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	020b      	lsls	r3, r1, #8
 8005a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a38:	0202      	lsls	r2, r0, #8
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	6849      	ldr	r1, [r1, #4]
 8005a3e:	0849      	lsrs	r1, r1, #1
 8005a40:	2000      	movs	r0, #0
 8005a42:	460c      	mov	r4, r1
 8005a44:	4605      	mov	r5, r0
 8005a46:	eb12 0804 	adds.w	r8, r2, r4
 8005a4a:	eb43 0905 	adc.w	r9, r3, r5
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	469a      	mov	sl, r3
 8005a56:	4693      	mov	fp, r2
 8005a58:	4652      	mov	r2, sl
 8005a5a:	465b      	mov	r3, fp
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fa fc96 	bl	8000390 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a72:	d308      	bcc.n	8005a86 <UART_SetConfig+0x79a>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7a:	d204      	bcs.n	8005a86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a82:	60da      	str	r2, [r3, #12]
 8005a84:	e17c      	b.n	8005d80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a8c:	e178      	b.n	8005d80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a96:	f040 80c5 	bne.w	8005c24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	dc48      	bgt.n	8005b34 <UART_SetConfig+0x848>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	db7b      	blt.n	8005b9e <UART_SetConfig+0x8b2>
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d879      	bhi.n	8005b9e <UART_SetConfig+0x8b2>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x7c4>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005b3b 	.word	0x08005b3b
 8005ab4:	08005b43 	.word	0x08005b43
 8005ab8:	08005b9f 	.word	0x08005b9f
 8005abc:	08005b9f 	.word	0x08005b9f
 8005ac0:	08005b4b 	.word	0x08005b4b
 8005ac4:	08005b9f 	.word	0x08005b9f
 8005ac8:	08005b9f 	.word	0x08005b9f
 8005acc:	08005b9f 	.word	0x08005b9f
 8005ad0:	08005b5b 	.word	0x08005b5b
 8005ad4:	08005b9f 	.word	0x08005b9f
 8005ad8:	08005b9f 	.word	0x08005b9f
 8005adc:	08005b9f 	.word	0x08005b9f
 8005ae0:	08005b9f 	.word	0x08005b9f
 8005ae4:	08005b9f 	.word	0x08005b9f
 8005ae8:	08005b9f 	.word	0x08005b9f
 8005aec:	08005b9f 	.word	0x08005b9f
 8005af0:	08005b6b 	.word	0x08005b6b
 8005af4:	08005b9f 	.word	0x08005b9f
 8005af8:	08005b9f 	.word	0x08005b9f
 8005afc:	08005b9f 	.word	0x08005b9f
 8005b00:	08005b9f 	.word	0x08005b9f
 8005b04:	08005b9f 	.word	0x08005b9f
 8005b08:	08005b9f 	.word	0x08005b9f
 8005b0c:	08005b9f 	.word	0x08005b9f
 8005b10:	08005b9f 	.word	0x08005b9f
 8005b14:	08005b9f 	.word	0x08005b9f
 8005b18:	08005b9f 	.word	0x08005b9f
 8005b1c:	08005b9f 	.word	0x08005b9f
 8005b20:	08005b9f 	.word	0x08005b9f
 8005b24:	08005b9f 	.word	0x08005b9f
 8005b28:	08005b9f 	.word	0x08005b9f
 8005b2c:	08005b9f 	.word	0x08005b9f
 8005b30:	08005b91 	.word	0x08005b91
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d02e      	beq.n	8005b96 <UART_SetConfig+0x8aa>
 8005b38:	e031      	b.n	8005b9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7fc fec9 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8005b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b40:	e033      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b42:	f7fc fedb 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8005b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b48:	e02f      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd fe46 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b58:	e027      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5a:	f107 0318 	add.w	r3, r7, #24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fd ff92 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b68:	e01f      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <UART_SetConfig+0x934>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <UART_SetConfig+0x934>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <UART_SetConfig+0x928>)
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b88:	e00f      	b.n	8005baa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b8a:	4b22      	ldr	r3, [pc, #136]	; (8005c14 <UART_SetConfig+0x928>)
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b8e:	e00c      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <UART_SetConfig+0x92c>)
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b94:	e009      	b.n	8005baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9c:	e005      	b.n	8005baa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80e7 	beq.w	8005d80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <UART_SetConfig+0x930>)
 8005bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc4:	005a      	lsls	r2, r3, #1
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	441a      	add	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d916      	bls.n	8005c0c <UART_SetConfig+0x920>
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d212      	bcs.n	8005c0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f023 030f 	bic.w	r3, r3, #15
 8005bee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e0b9      	b.n	8005d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c12:	e0b5      	b.n	8005d80 <UART_SetConfig+0xa94>
 8005c14:	03d09000 	.word	0x03d09000
 8005c18:	003d0900 	.word	0x003d0900
 8005c1c:	08008cdc 	.word	0x08008cdc
 8005c20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	dc49      	bgt.n	8005cc0 <UART_SetConfig+0x9d4>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db7c      	blt.n	8005d2a <UART_SetConfig+0xa3e>
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d87a      	bhi.n	8005d2a <UART_SetConfig+0xa3e>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x950>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005cc7 	.word	0x08005cc7
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005d2b 	.word	0x08005d2b
 8005c48:	08005d2b 	.word	0x08005d2b
 8005c4c:	08005cd7 	.word	0x08005cd7
 8005c50:	08005d2b 	.word	0x08005d2b
 8005c54:	08005d2b 	.word	0x08005d2b
 8005c58:	08005d2b 	.word	0x08005d2b
 8005c5c:	08005ce7 	.word	0x08005ce7
 8005c60:	08005d2b 	.word	0x08005d2b
 8005c64:	08005d2b 	.word	0x08005d2b
 8005c68:	08005d2b 	.word	0x08005d2b
 8005c6c:	08005d2b 	.word	0x08005d2b
 8005c70:	08005d2b 	.word	0x08005d2b
 8005c74:	08005d2b 	.word	0x08005d2b
 8005c78:	08005d2b 	.word	0x08005d2b
 8005c7c:	08005cf7 	.word	0x08005cf7
 8005c80:	08005d2b 	.word	0x08005d2b
 8005c84:	08005d2b 	.word	0x08005d2b
 8005c88:	08005d2b 	.word	0x08005d2b
 8005c8c:	08005d2b 	.word	0x08005d2b
 8005c90:	08005d2b 	.word	0x08005d2b
 8005c94:	08005d2b 	.word	0x08005d2b
 8005c98:	08005d2b 	.word	0x08005d2b
 8005c9c:	08005d2b 	.word	0x08005d2b
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d2b 	.word	0x08005d2b
 8005ca8:	08005d2b 	.word	0x08005d2b
 8005cac:	08005d2b 	.word	0x08005d2b
 8005cb0:	08005d2b 	.word	0x08005d2b
 8005cb4:	08005d2b 	.word	0x08005d2b
 8005cb8:	08005d2b 	.word	0x08005d2b
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d02e      	beq.n	8005d22 <UART_SetConfig+0xa36>
 8005cc4:	e031      	b.n	8005d2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7fc fe03 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8005cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ccc:	e033      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cce:	f7fc fe15 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8005cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd4:	e02f      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fd fd80 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce4:	e027      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce6:	f107 0318 	add.w	r3, r7, #24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd fecc 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	e01f      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <UART_SetConfig+0xac0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <UART_SetConfig+0xac0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <UART_SetConfig+0xac4>)
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d14:	e00f      	b.n	8005d36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d16:	4b26      	ldr	r3, [pc, #152]	; (8005db0 <UART_SetConfig+0xac4>)
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1a:	e00c      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <UART_SetConfig+0xac8>)
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d34:	bf00      	nop
    }

    if (pclk != 0U)
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d021      	beq.n	8005d80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <UART_SetConfig+0xacc>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d909      	bls.n	8005d7a <UART_SetConfig+0xa8e>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d205      	bcs.n	8005d7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60da      	str	r2, [r3, #12]
 8005d78:	e002      	b.n	8005d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3748      	adds	r7, #72	; 0x48
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
 8005db0:	03d09000 	.word	0x03d09000
 8005db4:	003d0900 	.word	0x003d0900
 8005db8:	08008cdc 	.word	0x08008cdc

08005dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eba:	d10a      	bne.n	8005ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f10:	f7fb f9de 	bl	80012d0 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d10e      	bne.n	8005f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f82f 	bl	8005f96 <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e025      	b.n	8005f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d10e      	bne.n	8005f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f819 	bl	8005f96 <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e00f      	b.n	8005f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b09c      	sub	sp, #112	; 0x70
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa6:	e0a9      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	f000 80a5 	beq.w	80060fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fb f98d 	bl	80012d0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d140      	bne.n	800604a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e6      	bne.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	663b      	str	r3, [r7, #96]	; 0x60
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800601a:	64ba      	str	r2, [r7, #72]	; 0x48
 800601c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e069      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d051      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006066:	d149      	bne.n	80060fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006070:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006086:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
 8006092:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060c4:	623a      	str	r2, [r7, #32]
 80060c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	69f9      	ldr	r1, [r7, #28]
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e5      	bne.n	80060a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e010      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69da      	ldr	r2, [r3, #28]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	f43f af46 	beq.w	8005fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3770      	adds	r7, #112	; 0x70
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_UARTEx_DisableFifoMode+0x16>
 8006138:	2302      	movs	r3, #2
 800613a:	e027      	b.n	800618c <HAL_UARTEx_DisableFifoMode+0x66>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2224      	movs	r2, #36	; 0x24
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800616a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e02d      	b.n	800620c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f84f 	bl	8006290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e02d      	b.n	8006288 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f811 	bl	8006290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629c:	2b00      	cmp	r3, #0
 800629e:	d108      	bne.n	80062b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062b0:	e031      	b.n	8006316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062b2:	2310      	movs	r3, #16
 80062b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062b6:	2310      	movs	r3, #16
 80062b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	0e5b      	lsrs	r3, r3, #25
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	0f5b      	lsrs	r3, r3, #29
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	7b3a      	ldrb	r2, [r7, #12]
 80062de:	4911      	ldr	r1, [pc, #68]	; (8006324 <UARTEx_SetNbDataToProcess+0x94>)
 80062e0:	5c8a      	ldrb	r2, [r1, r2]
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062e6:	7b3a      	ldrb	r2, [r7, #12]
 80062e8:	490f      	ldr	r1, [pc, #60]	; (8006328 <UARTEx_SetNbDataToProcess+0x98>)
 80062ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	7b7a      	ldrb	r2, [r7, #13]
 80062fc:	4909      	ldr	r1, [pc, #36]	; (8006324 <UARTEx_SetNbDataToProcess+0x94>)
 80062fe:	5c8a      	ldrb	r2, [r1, r2]
 8006300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006304:	7b7a      	ldrb	r2, [r7, #13]
 8006306:	4908      	ldr	r1, [pc, #32]	; (8006328 <UARTEx_SetNbDataToProcess+0x98>)
 8006308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800630a:	fb93 f3f2 	sdiv	r3, r3, r2
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	08008cf4 	.word	0x08008cf4
 8006328:	08008cfc 	.word	0x08008cfc

0800632c <__errno>:
 800632c:	4b01      	ldr	r3, [pc, #4]	; (8006334 <__errno+0x8>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	24000010 	.word	0x24000010

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4d0d      	ldr	r5, [pc, #52]	; (8006370 <__libc_init_array+0x38>)
 800633c:	4c0d      	ldr	r4, [pc, #52]	; (8006374 <__libc_init_array+0x3c>)
 800633e:	1b64      	subs	r4, r4, r5
 8006340:	10a4      	asrs	r4, r4, #2
 8006342:	2600      	movs	r6, #0
 8006344:	42a6      	cmp	r6, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	4d0b      	ldr	r5, [pc, #44]	; (8006378 <__libc_init_array+0x40>)
 800634a:	4c0c      	ldr	r4, [pc, #48]	; (800637c <__libc_init_array+0x44>)
 800634c:	f002 fca8 	bl	8008ca0 <_init>
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	2600      	movs	r6, #0
 8006356:	42a6      	cmp	r6, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006360:	4798      	blx	r3
 8006362:	3601      	adds	r6, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f855 3b04 	ldr.w	r3, [r5], #4
 800636a:	4798      	blx	r3
 800636c:	3601      	adds	r6, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	080090e4 	.word	0x080090e4
 8006374:	080090e4 	.word	0x080090e4
 8006378:	080090e4 	.word	0x080090e4
 800637c:	080090e8 	.word	0x080090e8

08006380 <memset>:
 8006380:	4402      	add	r2, r0
 8006382:	4603      	mov	r3, r0
 8006384:	4293      	cmp	r3, r2
 8006386:	d100      	bne.n	800638a <memset+0xa>
 8006388:	4770      	bx	lr
 800638a:	f803 1b01 	strb.w	r1, [r3], #1
 800638e:	e7f9      	b.n	8006384 <memset+0x4>

08006390 <__cvt>:
 8006390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006392:	ed2d 8b02 	vpush	{d8}
 8006396:	eeb0 8b40 	vmov.f64	d8, d0
 800639a:	b085      	sub	sp, #20
 800639c:	4617      	mov	r7, r2
 800639e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80063a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063a2:	ee18 2a90 	vmov	r2, s17
 80063a6:	f025 0520 	bic.w	r5, r5, #32
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	bfb6      	itet	lt
 80063ae:	222d      	movlt	r2, #45	; 0x2d
 80063b0:	2200      	movge	r2, #0
 80063b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80063b6:	2d46      	cmp	r5, #70	; 0x46
 80063b8:	460c      	mov	r4, r1
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	d004      	beq.n	80063c8 <__cvt+0x38>
 80063be:	2d45      	cmp	r5, #69	; 0x45
 80063c0:	d100      	bne.n	80063c4 <__cvt+0x34>
 80063c2:	3401      	adds	r4, #1
 80063c4:	2102      	movs	r1, #2
 80063c6:	e000      	b.n	80063ca <__cvt+0x3a>
 80063c8:	2103      	movs	r1, #3
 80063ca:	ab03      	add	r3, sp, #12
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	ab02      	add	r3, sp, #8
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4622      	mov	r2, r4
 80063d4:	4633      	mov	r3, r6
 80063d6:	eeb0 0b48 	vmov.f64	d0, d8
 80063da:	f000 fcc1 	bl	8006d60 <_dtoa_r>
 80063de:	2d47      	cmp	r5, #71	; 0x47
 80063e0:	d101      	bne.n	80063e6 <__cvt+0x56>
 80063e2:	07fb      	lsls	r3, r7, #31
 80063e4:	d51a      	bpl.n	800641c <__cvt+0x8c>
 80063e6:	2d46      	cmp	r5, #70	; 0x46
 80063e8:	eb00 0204 	add.w	r2, r0, r4
 80063ec:	d10c      	bne.n	8006408 <__cvt+0x78>
 80063ee:	7803      	ldrb	r3, [r0, #0]
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d107      	bne.n	8006404 <__cvt+0x74>
 80063f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fc:	bf1c      	itt	ne
 80063fe:	f1c4 0401 	rsbne	r4, r4, #1
 8006402:	6034      	strne	r4, [r6, #0]
 8006404:	6833      	ldr	r3, [r6, #0]
 8006406:	441a      	add	r2, r3
 8006408:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006410:	bf08      	it	eq
 8006412:	9203      	streq	r2, [sp, #12]
 8006414:	2130      	movs	r1, #48	; 0x30
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	4293      	cmp	r3, r2
 800641a:	d307      	bcc.n	800642c <__cvt+0x9c>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006420:	1a1b      	subs	r3, r3, r0
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	b005      	add	sp, #20
 8006426:	ecbd 8b02 	vpop	{d8}
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	1c5c      	adds	r4, r3, #1
 800642e:	9403      	str	r4, [sp, #12]
 8006430:	7019      	strb	r1, [r3, #0]
 8006432:	e7f0      	b.n	8006416 <__cvt+0x86>

08006434 <__exponent>:
 8006434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006436:	4603      	mov	r3, r0
 8006438:	2900      	cmp	r1, #0
 800643a:	bfb8      	it	lt
 800643c:	4249      	neglt	r1, r1
 800643e:	f803 2b02 	strb.w	r2, [r3], #2
 8006442:	bfb4      	ite	lt
 8006444:	222d      	movlt	r2, #45	; 0x2d
 8006446:	222b      	movge	r2, #43	; 0x2b
 8006448:	2909      	cmp	r1, #9
 800644a:	7042      	strb	r2, [r0, #1]
 800644c:	dd2a      	ble.n	80064a4 <__exponent+0x70>
 800644e:	f10d 0407 	add.w	r4, sp, #7
 8006452:	46a4      	mov	ip, r4
 8006454:	270a      	movs	r7, #10
 8006456:	46a6      	mov	lr, r4
 8006458:	460a      	mov	r2, r1
 800645a:	fb91 f6f7 	sdiv	r6, r1, r7
 800645e:	fb07 1516 	mls	r5, r7, r6, r1
 8006462:	3530      	adds	r5, #48	; 0x30
 8006464:	2a63      	cmp	r2, #99	; 0x63
 8006466:	f104 34ff 	add.w	r4, r4, #4294967295
 800646a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800646e:	4631      	mov	r1, r6
 8006470:	dcf1      	bgt.n	8006456 <__exponent+0x22>
 8006472:	3130      	adds	r1, #48	; 0x30
 8006474:	f1ae 0502 	sub.w	r5, lr, #2
 8006478:	f804 1c01 	strb.w	r1, [r4, #-1]
 800647c:	1c44      	adds	r4, r0, #1
 800647e:	4629      	mov	r1, r5
 8006480:	4561      	cmp	r1, ip
 8006482:	d30a      	bcc.n	800649a <__exponent+0x66>
 8006484:	f10d 0209 	add.w	r2, sp, #9
 8006488:	eba2 020e 	sub.w	r2, r2, lr
 800648c:	4565      	cmp	r5, ip
 800648e:	bf88      	it	hi
 8006490:	2200      	movhi	r2, #0
 8006492:	4413      	add	r3, r2
 8006494:	1a18      	subs	r0, r3, r0
 8006496:	b003      	add	sp, #12
 8006498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800649e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064a2:	e7ed      	b.n	8006480 <__exponent+0x4c>
 80064a4:	2330      	movs	r3, #48	; 0x30
 80064a6:	3130      	adds	r1, #48	; 0x30
 80064a8:	7083      	strb	r3, [r0, #2]
 80064aa:	70c1      	strb	r1, [r0, #3]
 80064ac:	1d03      	adds	r3, r0, #4
 80064ae:	e7f1      	b.n	8006494 <__exponent+0x60>

080064b0 <_printf_float>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	b08b      	sub	sp, #44	; 0x2c
 80064b6:	460c      	mov	r4, r1
 80064b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80064bc:	4616      	mov	r6, r2
 80064be:	461f      	mov	r7, r3
 80064c0:	4605      	mov	r5, r0
 80064c2:	f001 fab1 	bl	8007a28 <_localeconv_r>
 80064c6:	f8d0 b000 	ldr.w	fp, [r0]
 80064ca:	4658      	mov	r0, fp
 80064cc:	f7f9 ff08 	bl	80002e0 <strlen>
 80064d0:	2300      	movs	r3, #0
 80064d2:	9308      	str	r3, [sp, #32]
 80064d4:	f8d8 3000 	ldr.w	r3, [r8]
 80064d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	f103 0108 	add.w	r1, r3, #8
 80064e8:	f8c8 1000 	str.w	r1, [r8]
 80064ec:	4682      	mov	sl, r0
 80064ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80064f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006758 <_printf_float+0x2a8>
 80064fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80064fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8006502:	eeb4 6b47 	vcmp.f64	d6, d7
 8006506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650a:	dd24      	ble.n	8006556 <_printf_float+0xa6>
 800650c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006514:	d502      	bpl.n	800651c <_printf_float+0x6c>
 8006516:	232d      	movs	r3, #45	; 0x2d
 8006518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800651c:	4b90      	ldr	r3, [pc, #576]	; (8006760 <_printf_float+0x2b0>)
 800651e:	4891      	ldr	r0, [pc, #580]	; (8006764 <_printf_float+0x2b4>)
 8006520:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006524:	bf94      	ite	ls
 8006526:	4698      	movls	r8, r3
 8006528:	4680      	movhi	r8, r0
 800652a:	2303      	movs	r3, #3
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	2300      	movs	r3, #0
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9700      	str	r7, [sp, #0]
 800653a:	4633      	mov	r3, r6
 800653c:	aa09      	add	r2, sp, #36	; 0x24
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f9d3 	bl	80068ec <_printf_common>
 8006546:	3001      	adds	r0, #1
 8006548:	f040 808a 	bne.w	8006660 <_printf_float+0x1b0>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b00b      	add	sp, #44	; 0x2c
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	eeb4 0b40 	vcmp.f64	d0, d0
 800655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655e:	d709      	bvc.n	8006574 <_printf_float+0xc4>
 8006560:	ee10 3a90 	vmov	r3, s1
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbc      	itt	lt
 8006568:	232d      	movlt	r3, #45	; 0x2d
 800656a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800656e:	487e      	ldr	r0, [pc, #504]	; (8006768 <_printf_float+0x2b8>)
 8006570:	4b7e      	ldr	r3, [pc, #504]	; (800676c <_printf_float+0x2bc>)
 8006572:	e7d5      	b.n	8006520 <_printf_float+0x70>
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800657a:	9104      	str	r1, [sp, #16]
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	d13c      	bne.n	80065fa <_printf_float+0x14a>
 8006580:	2306      	movs	r3, #6
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	2300      	movs	r3, #0
 8006586:	9303      	str	r3, [sp, #12]
 8006588:	ab08      	add	r3, sp, #32
 800658a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800658e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006592:	ab07      	add	r3, sp, #28
 8006594:	6861      	ldr	r1, [r4, #4]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	f10d 031b 	add.w	r3, sp, #27
 800659e:	4628      	mov	r0, r5
 80065a0:	f7ff fef6 	bl	8006390 <__cvt>
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	9907      	ldr	r1, [sp, #28]
 80065a8:	2b47      	cmp	r3, #71	; 0x47
 80065aa:	4680      	mov	r8, r0
 80065ac:	d108      	bne.n	80065c0 <_printf_float+0x110>
 80065ae:	1cc8      	adds	r0, r1, #3
 80065b0:	db02      	blt.n	80065b8 <_printf_float+0x108>
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	4299      	cmp	r1, r3
 80065b6:	dd41      	ble.n	800663c <_printf_float+0x18c>
 80065b8:	f1a9 0902 	sub.w	r9, r9, #2
 80065bc:	fa5f f989 	uxtb.w	r9, r9
 80065c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065c4:	d820      	bhi.n	8006608 <_printf_float+0x158>
 80065c6:	3901      	subs	r1, #1
 80065c8:	464a      	mov	r2, r9
 80065ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065ce:	9107      	str	r1, [sp, #28]
 80065d0:	f7ff ff30 	bl	8006434 <__exponent>
 80065d4:	9a08      	ldr	r2, [sp, #32]
 80065d6:	9004      	str	r0, [sp, #16]
 80065d8:	1813      	adds	r3, r2, r0
 80065da:	2a01      	cmp	r2, #1
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	dc02      	bgt.n	80065e6 <_printf_float+0x136>
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	07d2      	lsls	r2, r2, #31
 80065e4:	d501      	bpl.n	80065ea <_printf_float+0x13a>
 80065e6:	3301      	adds	r3, #1
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0a2      	beq.n	8006538 <_printf_float+0x88>
 80065f2:	232d      	movs	r3, #45	; 0x2d
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	e79e      	b.n	8006538 <_printf_float+0x88>
 80065fa:	9904      	ldr	r1, [sp, #16]
 80065fc:	2947      	cmp	r1, #71	; 0x47
 80065fe:	d1c1      	bne.n	8006584 <_printf_float+0xd4>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1bf      	bne.n	8006584 <_printf_float+0xd4>
 8006604:	2301      	movs	r3, #1
 8006606:	e7bc      	b.n	8006582 <_printf_float+0xd2>
 8006608:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800660c:	d118      	bne.n	8006640 <_printf_float+0x190>
 800660e:	2900      	cmp	r1, #0
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	dd0b      	ble.n	800662c <_printf_float+0x17c>
 8006614:	6121      	str	r1, [r4, #16]
 8006616:	b913      	cbnz	r3, 800661e <_printf_float+0x16e>
 8006618:	6822      	ldr	r2, [r4, #0]
 800661a:	07d0      	lsls	r0, r2, #31
 800661c:	d502      	bpl.n	8006624 <_printf_float+0x174>
 800661e:	3301      	adds	r3, #1
 8006620:	440b      	add	r3, r1
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	2300      	movs	r3, #0
 8006626:	65a1      	str	r1, [r4, #88]	; 0x58
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	e7de      	b.n	80065ea <_printf_float+0x13a>
 800662c:	b913      	cbnz	r3, 8006634 <_printf_float+0x184>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	07d2      	lsls	r2, r2, #31
 8006632:	d501      	bpl.n	8006638 <_printf_float+0x188>
 8006634:	3302      	adds	r3, #2
 8006636:	e7f4      	b.n	8006622 <_printf_float+0x172>
 8006638:	2301      	movs	r3, #1
 800663a:	e7f2      	b.n	8006622 <_printf_float+0x172>
 800663c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006640:	9b08      	ldr	r3, [sp, #32]
 8006642:	4299      	cmp	r1, r3
 8006644:	db05      	blt.n	8006652 <_printf_float+0x1a2>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	6121      	str	r1, [r4, #16]
 800664a:	07d8      	lsls	r0, r3, #31
 800664c:	d5ea      	bpl.n	8006624 <_printf_float+0x174>
 800664e:	1c4b      	adds	r3, r1, #1
 8006650:	e7e7      	b.n	8006622 <_printf_float+0x172>
 8006652:	2900      	cmp	r1, #0
 8006654:	bfd4      	ite	le
 8006656:	f1c1 0202 	rsble	r2, r1, #2
 800665a:	2201      	movgt	r2, #1
 800665c:	4413      	add	r3, r2
 800665e:	e7e0      	b.n	8006622 <_printf_float+0x172>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	055a      	lsls	r2, r3, #21
 8006664:	d407      	bmi.n	8006676 <_printf_float+0x1c6>
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	4642      	mov	r2, r8
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d12a      	bne.n	80066ca <_printf_float+0x21a>
 8006674:	e76a      	b.n	800654c <_printf_float+0x9c>
 8006676:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800667a:	f240 80e2 	bls.w	8006842 <_printf_float+0x392>
 800667e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006682:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	d133      	bne.n	80066f4 <_printf_float+0x244>
 800668c:	4a38      	ldr	r2, [pc, #224]	; (8006770 <_printf_float+0x2c0>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af58 	beq.w	800654c <_printf_float+0x9c>
 800669c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	db02      	blt.n	80066aa <_printf_float+0x1fa>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d8      	lsls	r0, r3, #31
 80066a8:	d50f      	bpl.n	80066ca <_printf_float+0x21a>
 80066aa:	4653      	mov	r3, sl
 80066ac:	465a      	mov	r2, fp
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f af49 	beq.w	800654c <_printf_float+0x9c>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	f104 091a 	add.w	r9, r4, #26
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4543      	cmp	r3, r8
 80066c8:	dc09      	bgt.n	80066de <_printf_float+0x22e>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	079b      	lsls	r3, r3, #30
 80066ce:	f100 8108 	bmi.w	80068e2 <_printf_float+0x432>
 80066d2:	68e0      	ldr	r0, [r4, #12]
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	4298      	cmp	r0, r3
 80066d8:	bfb8      	it	lt
 80066da:	4618      	movlt	r0, r3
 80066dc:	e738      	b.n	8006550 <_printf_float+0xa0>
 80066de:	2301      	movs	r3, #1
 80066e0:	464a      	mov	r2, r9
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	f43f af2f 	beq.w	800654c <_printf_float+0x9c>
 80066ee:	f108 0801 	add.w	r8, r8, #1
 80066f2:	e7e6      	b.n	80066c2 <_printf_float+0x212>
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dc3c      	bgt.n	8006774 <_printf_float+0x2c4>
 80066fa:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <_printf_float+0x2c0>)
 80066fc:	2301      	movs	r3, #1
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f af21 	beq.w	800654c <_printf_float+0x9c>
 800670a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	d102      	bne.n	8006718 <_printf_float+0x268>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	07d9      	lsls	r1, r3, #31
 8006716:	d5d8      	bpl.n	80066ca <_printf_float+0x21a>
 8006718:	4653      	mov	r3, sl
 800671a:	465a      	mov	r2, fp
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af12 	beq.w	800654c <_printf_float+0x9c>
 8006728:	f04f 0900 	mov.w	r9, #0
 800672c:	f104 0a1a 	add.w	sl, r4, #26
 8006730:	9b07      	ldr	r3, [sp, #28]
 8006732:	425b      	negs	r3, r3
 8006734:	454b      	cmp	r3, r9
 8006736:	dc01      	bgt.n	800673c <_printf_float+0x28c>
 8006738:	9b08      	ldr	r3, [sp, #32]
 800673a:	e795      	b.n	8006668 <_printf_float+0x1b8>
 800673c:	2301      	movs	r3, #1
 800673e:	4652      	mov	r2, sl
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af00 	beq.w	800654c <_printf_float+0x9c>
 800674c:	f109 0901 	add.w	r9, r9, #1
 8006750:	e7ee      	b.n	8006730 <_printf_float+0x280>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
 8006758:	ffffffff 	.word	0xffffffff
 800675c:	7fefffff 	.word	0x7fefffff
 8006760:	08008d08 	.word	0x08008d08
 8006764:	08008d0c 	.word	0x08008d0c
 8006768:	08008d14 	.word	0x08008d14
 800676c:	08008d10 	.word	0x08008d10
 8006770:	08008d18 	.word	0x08008d18
 8006774:	9a08      	ldr	r2, [sp, #32]
 8006776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006778:	429a      	cmp	r2, r3
 800677a:	bfa8      	it	ge
 800677c:	461a      	movge	r2, r3
 800677e:	2a00      	cmp	r2, #0
 8006780:	4691      	mov	r9, r2
 8006782:	dc38      	bgt.n	80067f6 <_printf_float+0x346>
 8006784:	2300      	movs	r3, #0
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800678c:	f104 021a 	add.w	r2, r4, #26
 8006790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006792:	9905      	ldr	r1, [sp, #20]
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	eba3 0309 	sub.w	r3, r3, r9
 800679a:	428b      	cmp	r3, r1
 800679c:	dc33      	bgt.n	8006806 <_printf_float+0x356>
 800679e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	db3c      	blt.n	8006820 <_printf_float+0x370>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	07da      	lsls	r2, r3, #31
 80067aa:	d439      	bmi.n	8006820 <_printf_float+0x370>
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	9a04      	ldr	r2, [sp, #16]
 80067b0:	9907      	ldr	r1, [sp, #28]
 80067b2:	1a9a      	subs	r2, r3, r2
 80067b4:	eba3 0901 	sub.w	r9, r3, r1
 80067b8:	4591      	cmp	r9, r2
 80067ba:	bfa8      	it	ge
 80067bc:	4691      	movge	r9, r2
 80067be:	f1b9 0f00 	cmp.w	r9, #0
 80067c2:	dc35      	bgt.n	8006830 <_printf_float+0x380>
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067cc:	f104 0a1a 	add.w	sl, r4, #26
 80067d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	eba3 0309 	sub.w	r3, r3, r9
 80067da:	4543      	cmp	r3, r8
 80067dc:	f77f af75 	ble.w	80066ca <_printf_float+0x21a>
 80067e0:	2301      	movs	r3, #1
 80067e2:	4652      	mov	r2, sl
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	f43f aeae 	beq.w	800654c <_printf_float+0x9c>
 80067f0:	f108 0801 	add.w	r8, r8, #1
 80067f4:	e7ec      	b.n	80067d0 <_printf_float+0x320>
 80067f6:	4613      	mov	r3, r2
 80067f8:	4631      	mov	r1, r6
 80067fa:	4642      	mov	r2, r8
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	d1bf      	bne.n	8006784 <_printf_float+0x2d4>
 8006804:	e6a2      	b.n	800654c <_printf_float+0x9c>
 8006806:	2301      	movs	r3, #1
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	9204      	str	r2, [sp, #16]
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae9b 	beq.w	800654c <_printf_float+0x9c>
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	3301      	adds	r3, #1
 800681c:	9305      	str	r3, [sp, #20]
 800681e:	e7b7      	b.n	8006790 <_printf_float+0x2e0>
 8006820:	4653      	mov	r3, sl
 8006822:	465a      	mov	r2, fp
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	d1be      	bne.n	80067ac <_printf_float+0x2fc>
 800682e:	e68d      	b.n	800654c <_printf_float+0x9c>
 8006830:	9a04      	ldr	r2, [sp, #16]
 8006832:	464b      	mov	r3, r9
 8006834:	4442      	add	r2, r8
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d1c1      	bne.n	80067c4 <_printf_float+0x314>
 8006840:	e684      	b.n	800654c <_printf_float+0x9c>
 8006842:	9a08      	ldr	r2, [sp, #32]
 8006844:	2a01      	cmp	r2, #1
 8006846:	dc01      	bgt.n	800684c <_printf_float+0x39c>
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d537      	bpl.n	80068bc <_printf_float+0x40c>
 800684c:	2301      	movs	r3, #1
 800684e:	4642      	mov	r2, r8
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f ae78 	beq.w	800654c <_printf_float+0x9c>
 800685c:	4653      	mov	r3, sl
 800685e:	465a      	mov	r2, fp
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f ae70 	beq.w	800654c <_printf_float+0x9c>
 800686c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006870:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006878:	d01b      	beq.n	80068b2 <_printf_float+0x402>
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	f108 0201 	add.w	r2, r8, #1
 8006880:	3b01      	subs	r3, #1
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d10e      	bne.n	80068aa <_printf_float+0x3fa>
 800688c:	e65e      	b.n	800654c <_printf_float+0x9c>
 800688e:	2301      	movs	r3, #1
 8006890:	464a      	mov	r2, r9
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae57 	beq.w	800654c <_printf_float+0x9c>
 800689e:	f108 0801 	add.w	r8, r8, #1
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dcf1      	bgt.n	800688e <_printf_float+0x3de>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068b0:	e6db      	b.n	800666a <_printf_float+0x1ba>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f104 091a 	add.w	r9, r4, #26
 80068ba:	e7f2      	b.n	80068a2 <_printf_float+0x3f2>
 80068bc:	2301      	movs	r3, #1
 80068be:	4642      	mov	r2, r8
 80068c0:	e7df      	b.n	8006882 <_printf_float+0x3d2>
 80068c2:	2301      	movs	r3, #1
 80068c4:	464a      	mov	r2, r9
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f ae3d 	beq.w	800654c <_printf_float+0x9c>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	4543      	cmp	r3, r8
 80068de:	dcf0      	bgt.n	80068c2 <_printf_float+0x412>
 80068e0:	e6f7      	b.n	80066d2 <_printf_float+0x222>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	f104 0919 	add.w	r9, r4, #25
 80068ea:	e7f4      	b.n	80068d6 <_printf_float+0x426>

080068ec <_printf_common>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	4616      	mov	r6, r2
 80068f2:	4699      	mov	r9, r3
 80068f4:	688a      	ldr	r2, [r1, #8]
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	bfb8      	it	lt
 8006900:	4613      	movlt	r3, r2
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006908:	4607      	mov	r7, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b10a      	cbz	r2, 8006912 <_printf_common+0x26>
 800690e:	3301      	adds	r3, #1
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	0699      	lsls	r1, r3, #26
 8006916:	bf42      	ittt	mi
 8006918:	6833      	ldrmi	r3, [r6, #0]
 800691a:	3302      	addmi	r3, #2
 800691c:	6033      	strmi	r3, [r6, #0]
 800691e:	6825      	ldr	r5, [r4, #0]
 8006920:	f015 0506 	ands.w	r5, r5, #6
 8006924:	d106      	bne.n	8006934 <_printf_common+0x48>
 8006926:	f104 0a19 	add.w	sl, r4, #25
 800692a:	68e3      	ldr	r3, [r4, #12]
 800692c:	6832      	ldr	r2, [r6, #0]
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	42ab      	cmp	r3, r5
 8006932:	dc26      	bgt.n	8006982 <_printf_common+0x96>
 8006934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006938:	1e13      	subs	r3, r2, #0
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	bf18      	it	ne
 800693e:	2301      	movne	r3, #1
 8006940:	0692      	lsls	r2, r2, #26
 8006942:	d42b      	bmi.n	800699c <_printf_common+0xb0>
 8006944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006948:	4649      	mov	r1, r9
 800694a:	4638      	mov	r0, r7
 800694c:	47c0      	blx	r8
 800694e:	3001      	adds	r0, #1
 8006950:	d01e      	beq.n	8006990 <_printf_common+0xa4>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	68e5      	ldr	r5, [r4, #12]
 8006956:	6832      	ldr	r2, [r6, #0]
 8006958:	f003 0306 	and.w	r3, r3, #6
 800695c:	2b04      	cmp	r3, #4
 800695e:	bf08      	it	eq
 8006960:	1aad      	subeq	r5, r5, r2
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	6922      	ldr	r2, [r4, #16]
 8006966:	bf0c      	ite	eq
 8006968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800696c:	2500      	movne	r5, #0
 800696e:	4293      	cmp	r3, r2
 8006970:	bfc4      	itt	gt
 8006972:	1a9b      	subgt	r3, r3, r2
 8006974:	18ed      	addgt	r5, r5, r3
 8006976:	2600      	movs	r6, #0
 8006978:	341a      	adds	r4, #26
 800697a:	42b5      	cmp	r5, r6
 800697c:	d11a      	bne.n	80069b4 <_printf_common+0xc8>
 800697e:	2000      	movs	r0, #0
 8006980:	e008      	b.n	8006994 <_printf_common+0xa8>
 8006982:	2301      	movs	r3, #1
 8006984:	4652      	mov	r2, sl
 8006986:	4649      	mov	r1, r9
 8006988:	4638      	mov	r0, r7
 800698a:	47c0      	blx	r8
 800698c:	3001      	adds	r0, #1
 800698e:	d103      	bne.n	8006998 <_printf_common+0xac>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006998:	3501      	adds	r5, #1
 800699a:	e7c6      	b.n	800692a <_printf_common+0x3e>
 800699c:	18e1      	adds	r1, r4, r3
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	2030      	movs	r0, #48	; 0x30
 80069a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a6:	4422      	add	r2, r4
 80069a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b0:	3302      	adds	r3, #2
 80069b2:	e7c7      	b.n	8006944 <_printf_common+0x58>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4622      	mov	r2, r4
 80069b8:	4649      	mov	r1, r9
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d0e6      	beq.n	8006990 <_printf_common+0xa4>
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7d9      	b.n	800697a <_printf_common+0x8e>
	...

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d0:	2f78      	cmp	r7, #120	; 0x78
 80069d2:	4691      	mov	r9, r2
 80069d4:	4680      	mov	r8, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	469a      	mov	sl, r3
 80069da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	; 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d8 	beq.w	8006b9a <_printf_i+0x1d2>
 80069ea:	2f58      	cmp	r7, #88	; 0x58
 80069ec:	f000 80a3 	beq.w	8006b36 <_printf_i+0x16e>
 80069f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	; (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b81 	.word	0x08006b81
 8006a38:	08006aa5 	.word	0x08006aa5
 8006a3c:	08006b63 	.word	0x08006b63
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006ba3 	.word	0x08006ba3
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b6b 	.word	0x08006b6b
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0a3      	b.n	8006bbc <_printf_i+0x1f4>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	6829      	ldr	r1, [r5, #0]
 8006a78:	0606      	lsls	r6, r0, #24
 8006a7a:	f101 0304 	add.w	r3, r1, #4
 8006a7e:	d50a      	bpl.n	8006a96 <_printf_i+0xce>
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	da03      	bge.n	8006a90 <_printf_i+0xc8>
 8006a88:	232d      	movs	r3, #45	; 0x2d
 8006a8a:	4276      	negs	r6, r6
 8006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a90:	485e      	ldr	r0, [pc, #376]	; (8006c0c <_printf_i+0x244>)
 8006a92:	230a      	movs	r3, #10
 8006a94:	e019      	b.n	8006aca <_printf_i+0x102>
 8006a96:	680e      	ldr	r6, [r1, #0]
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a9e:	bf18      	it	ne
 8006aa0:	b236      	sxthne	r6, r6
 8006aa2:	e7ef      	b.n	8006a84 <_printf_i+0xbc>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	1d19      	adds	r1, r3, #4
 8006aaa:	6029      	str	r1, [r5, #0]
 8006aac:	0601      	lsls	r1, r0, #24
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0xec>
 8006ab0:	681e      	ldr	r6, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0xf2>
 8006ab4:	0646      	lsls	r6, r0, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0xe8>
 8006ab8:	881e      	ldrh	r6, [r3, #0]
 8006aba:	4854      	ldr	r0, [pc, #336]	; (8006c0c <_printf_i+0x244>)
 8006abc:	2f6f      	cmp	r7, #111	; 0x6f
 8006abe:	bf0c      	ite	eq
 8006ac0:	2308      	moveq	r3, #8
 8006ac2:	230a      	movne	r3, #10
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aca:	6865      	ldr	r5, [r4, #4]
 8006acc:	60a5      	str	r5, [r4, #8]
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	bfa2      	ittt	ge
 8006ad2:	6821      	ldrge	r1, [r4, #0]
 8006ad4:	f021 0104 	bicge.w	r1, r1, #4
 8006ad8:	6021      	strge	r1, [r4, #0]
 8006ada:	b90e      	cbnz	r6, 8006ae0 <_printf_i+0x118>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d04d      	beq.n	8006b7c <_printf_i+0x1b4>
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aea:	5dc7      	ldrb	r7, [r0, r7]
 8006aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af0:	4637      	mov	r7, r6
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	460e      	mov	r6, r1
 8006af6:	d9f4      	bls.n	8006ae2 <_printf_i+0x11a>
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10b      	bne.n	8006b14 <_printf_i+0x14c>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07de      	lsls	r6, r3, #31
 8006b00:	d508      	bpl.n	8006b14 <_printf_i+0x14c>
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	4299      	cmp	r1, r3
 8006b08:	bfde      	ittt	le
 8006b0a:	2330      	movle	r3, #48	; 0x30
 8006b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b14:	1b52      	subs	r2, r2, r5
 8006b16:	6122      	str	r2, [r4, #16]
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	aa03      	add	r2, sp, #12
 8006b20:	4621      	mov	r1, r4
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff fee2 	bl	80068ec <_printf_common>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d14c      	bne.n	8006bc6 <_printf_i+0x1fe>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	b004      	add	sp, #16
 8006b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b36:	4835      	ldr	r0, [pc, #212]	; (8006c0c <_printf_i+0x244>)
 8006b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b3c:	6829      	ldr	r1, [r5, #0]
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b44:	6029      	str	r1, [r5, #0]
 8006b46:	061d      	lsls	r5, r3, #24
 8006b48:	d514      	bpl.n	8006b74 <_printf_i+0x1ac>
 8006b4a:	07df      	lsls	r7, r3, #31
 8006b4c:	bf44      	itt	mi
 8006b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b52:	6023      	strmi	r3, [r4, #0]
 8006b54:	b91e      	cbnz	r6, 8006b5e <_printf_i+0x196>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	f023 0320 	bic.w	r3, r3, #32
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	2310      	movs	r3, #16
 8006b60:	e7b0      	b.n	8006ac4 <_printf_i+0xfc>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f043 0320 	orr.w	r3, r3, #32
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	2378      	movs	r3, #120	; 0x78
 8006b6c:	4828      	ldr	r0, [pc, #160]	; (8006c10 <_printf_i+0x248>)
 8006b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b72:	e7e3      	b.n	8006b3c <_printf_i+0x174>
 8006b74:	0659      	lsls	r1, r3, #25
 8006b76:	bf48      	it	mi
 8006b78:	b2b6      	uxthmi	r6, r6
 8006b7a:	e7e6      	b.n	8006b4a <_printf_i+0x182>
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	e7bb      	b.n	8006af8 <_printf_i+0x130>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	6826      	ldr	r6, [r4, #0]
 8006b84:	6961      	ldr	r1, [r4, #20]
 8006b86:	1d18      	adds	r0, r3, #4
 8006b88:	6028      	str	r0, [r5, #0]
 8006b8a:	0635      	lsls	r5, r6, #24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0x1cc>
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0x1d2>
 8006b94:	0670      	lsls	r0, r6, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0x1c8>
 8006b98:	8019      	strh	r1, [r3, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	e7ba      	b.n	8006b18 <_printf_i+0x150>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fb9e 	bl	80002f0 <memchr>
 8006bb4:	b108      	cbz	r0, 8006bba <_printf_i+0x1f2>
 8006bb6:	1b40      	subs	r0, r0, r5
 8006bb8:	6060      	str	r0, [r4, #4]
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	e7a8      	b.n	8006b18 <_printf_i+0x150>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d0ab      	beq.n	8006b2c <_printf_i+0x164>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	d413      	bmi.n	8006c02 <_printf_i+0x23a>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	4298      	cmp	r0, r3
 8006be0:	bfb8      	it	lt
 8006be2:	4618      	movlt	r0, r3
 8006be4:	e7a4      	b.n	8006b30 <_printf_i+0x168>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d09b      	beq.n	8006b2c <_printf_i+0x164>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	9903      	ldr	r1, [sp, #12]
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dcf2      	bgt.n	8006be6 <_printf_i+0x21e>
 8006c00:	e7eb      	b.n	8006bda <_printf_i+0x212>
 8006c02:	2500      	movs	r5, #0
 8006c04:	f104 0619 	add.w	r6, r4, #25
 8006c08:	e7f5      	b.n	8006bf6 <_printf_i+0x22e>
 8006c0a:	bf00      	nop
 8006c0c:	08008d1a 	.word	0x08008d1a
 8006c10:	08008d2b 	.word	0x08008d2b

08006c14 <iprintf>:
 8006c14:	b40f      	push	{r0, r1, r2, r3}
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <iprintf+0x2c>)
 8006c18:	b513      	push	{r0, r1, r4, lr}
 8006c1a:	681c      	ldr	r4, [r3, #0]
 8006c1c:	b124      	cbz	r4, 8006c28 <iprintf+0x14>
 8006c1e:	69a3      	ldr	r3, [r4, #24]
 8006c20:	b913      	cbnz	r3, 8006c28 <iprintf+0x14>
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fe62 	bl	80078ec <__sinit>
 8006c28:	ab05      	add	r3, sp, #20
 8006c2a:	9a04      	ldr	r2, [sp, #16]
 8006c2c:	68a1      	ldr	r1, [r4, #8]
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 fbbb 	bl	80083ac <_vfiprintf_r>
 8006c36:	b002      	add	sp, #8
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3c:	b004      	add	sp, #16
 8006c3e:	4770      	bx	lr
 8006c40:	24000010 	.word	0x24000010

08006c44 <quorem>:
 8006c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	6903      	ldr	r3, [r0, #16]
 8006c4a:	690c      	ldr	r4, [r1, #16]
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	4607      	mov	r7, r0
 8006c50:	f2c0 8081 	blt.w	8006d56 <quorem+0x112>
 8006c54:	3c01      	subs	r4, #1
 8006c56:	f101 0814 	add.w	r8, r1, #20
 8006c5a:	f100 0514 	add.w	r5, r0, #20
 8006c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c7c:	d331      	bcc.n	8006ce2 <quorem+0x9e>
 8006c7e:	f04f 0e00 	mov.w	lr, #0
 8006c82:	4640      	mov	r0, r8
 8006c84:	46ac      	mov	ip, r5
 8006c86:	46f2      	mov	sl, lr
 8006c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c8c:	b293      	uxth	r3, r2
 8006c8e:	fb06 e303 	mla	r3, r6, r3, lr
 8006c92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ebaa 0303 	sub.w	r3, sl, r3
 8006c9c:	f8dc a000 	ldr.w	sl, [ip]
 8006ca0:	0c12      	lsrs	r2, r2, #16
 8006ca2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ca6:	fb06 e202 	mla	r2, r6, r2, lr
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	9b00      	ldr	r3, [sp, #0]
 8006cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cb2:	b292      	uxth	r2, r2
 8006cb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006cc0:	4581      	cmp	r9, r0
 8006cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cc6:	f84c 3b04 	str.w	r3, [ip], #4
 8006cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cce:	d2db      	bcs.n	8006c88 <quorem+0x44>
 8006cd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cd4:	b92b      	cbnz	r3, 8006ce2 <quorem+0x9e>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	d32e      	bcc.n	8006d3e <quorem+0xfa>
 8006ce0:	613c      	str	r4, [r7, #16]
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f001 f940 	bl	8007f68 <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	db24      	blt.n	8006d36 <quorem+0xf2>
 8006cec:	3601      	adds	r6, #1
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f04f 0c00 	mov.w	ip, #0
 8006cf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cf8:	f8d0 e000 	ldr.w	lr, [r0]
 8006cfc:	b293      	uxth	r3, r2
 8006cfe:	ebac 0303 	sub.w	r3, ip, r3
 8006d02:	0c12      	lsrs	r2, r2, #16
 8006d04:	fa13 f38e 	uxtah	r3, r3, lr
 8006d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d16:	45c1      	cmp	r9, r8
 8006d18:	f840 3b04 	str.w	r3, [r0], #4
 8006d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d20:	d2e8      	bcs.n	8006cf4 <quorem+0xb0>
 8006d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d2a:	b922      	cbnz	r2, 8006d36 <quorem+0xf2>
 8006d2c:	3b04      	subs	r3, #4
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	d30a      	bcc.n	8006d4a <quorem+0x106>
 8006d34:	613c      	str	r4, [r7, #16]
 8006d36:	4630      	mov	r0, r6
 8006d38:	b003      	add	sp, #12
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	3b04      	subs	r3, #4
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d1cc      	bne.n	8006ce0 <quorem+0x9c>
 8006d46:	3c01      	subs	r4, #1
 8006d48:	e7c7      	b.n	8006cda <quorem+0x96>
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	3b04      	subs	r3, #4
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d1f0      	bne.n	8006d34 <quorem+0xf0>
 8006d52:	3c01      	subs	r4, #1
 8006d54:	e7eb      	b.n	8006d2e <quorem+0xea>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e7ee      	b.n	8006d38 <quorem+0xf4>
 8006d5a:	0000      	movs	r0, r0
 8006d5c:	0000      	movs	r0, r0
	...

08006d60 <_dtoa_r>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	ed2d 8b02 	vpush	{d8}
 8006d68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d6a:	b091      	sub	sp, #68	; 0x44
 8006d6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d70:	ec59 8b10 	vmov	r8, r9, d0
 8006d74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006d76:	9106      	str	r1, [sp, #24]
 8006d78:	4606      	mov	r6, r0
 8006d7a:	9208      	str	r2, [sp, #32]
 8006d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d7e:	b975      	cbnz	r5, 8006d9e <_dtoa_r+0x3e>
 8006d80:	2010      	movs	r0, #16
 8006d82:	f000 fe59 	bl	8007a38 <malloc>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6270      	str	r0, [r6, #36]	; 0x24
 8006d8a:	b920      	cbnz	r0, 8006d96 <_dtoa_r+0x36>
 8006d8c:	4baa      	ldr	r3, [pc, #680]	; (8007038 <_dtoa_r+0x2d8>)
 8006d8e:	21ea      	movs	r1, #234	; 0xea
 8006d90:	48aa      	ldr	r0, [pc, #680]	; (800703c <_dtoa_r+0x2dc>)
 8006d92:	f001 fd61 	bl	8008858 <__assert_func>
 8006d96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d9a:	6005      	str	r5, [r0, #0]
 8006d9c:	60c5      	str	r5, [r0, #12]
 8006d9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	b151      	cbz	r1, 8006dba <_dtoa_r+0x5a>
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	604a      	str	r2, [r1, #4]
 8006da8:	2301      	movs	r3, #1
 8006daa:	4093      	lsls	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 fe98 	bl	8007ae4 <_Bfree>
 8006db4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	f1b9 0300 	subs.w	r3, r9, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dc4:	9303      	strlt	r3, [sp, #12]
 8006dc6:	2300      	movge	r3, #0
 8006dc8:	2201      	movlt	r2, #1
 8006dca:	bfac      	ite	ge
 8006dcc:	6023      	strge	r3, [r4, #0]
 8006dce:	6022      	strlt	r2, [r4, #0]
 8006dd0:	4b9b      	ldr	r3, [pc, #620]	; (8007040 <_dtoa_r+0x2e0>)
 8006dd2:	9c03      	ldr	r4, [sp, #12]
 8006dd4:	43a3      	bics	r3, r4
 8006dd6:	d11c      	bne.n	8006e12 <_dtoa_r+0xb2>
 8006dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006de4:	ea53 0308 	orrs.w	r3, r3, r8
 8006de8:	f000 84fd 	beq.w	80077e6 <_dtoa_r+0xa86>
 8006dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dee:	b963      	cbnz	r3, 8006e0a <_dtoa_r+0xaa>
 8006df0:	4b94      	ldr	r3, [pc, #592]	; (8007044 <_dtoa_r+0x2e4>)
 8006df2:	e01f      	b.n	8006e34 <_dtoa_r+0xd4>
 8006df4:	4b94      	ldr	r3, [pc, #592]	; (8007048 <_dtoa_r+0x2e8>)
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	9801      	ldr	r0, [sp, #4]
 8006e00:	b011      	add	sp, #68	; 0x44
 8006e02:	ecbd 8b02 	vpop	{d8}
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	4b8e      	ldr	r3, [pc, #568]	; (8007044 <_dtoa_r+0x2e4>)
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	3303      	adds	r3, #3
 8006e10:	e7f3      	b.n	8006dfa <_dtoa_r+0x9a>
 8006e12:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006e16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1e:	d10b      	bne.n	8006e38 <_dtoa_r+0xd8>
 8006e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e22:	2301      	movs	r3, #1
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 84d9 	beq.w	80077e0 <_dtoa_r+0xa80>
 8006e2e:	4887      	ldr	r0, [pc, #540]	; (800704c <_dtoa_r+0x2ec>)
 8006e30:	6018      	str	r0, [r3, #0]
 8006e32:	1e43      	subs	r3, r0, #1
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	e7e2      	b.n	8006dfe <_dtoa_r+0x9e>
 8006e38:	a90f      	add	r1, sp, #60	; 0x3c
 8006e3a:	aa0e      	add	r2, sp, #56	; 0x38
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	eeb0 0b48 	vmov.f64	d0, d8
 8006e42:	f001 f937 	bl	80080b4 <__d2b>
 8006e46:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	d046      	beq.n	8006ee0 <_dtoa_r+0x180>
 8006e52:	ee18 4a90 	vmov	r4, s17
 8006e56:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006e5a:	ec53 2b18 	vmov	r2, r3, d8
 8006e5e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	ec43 2b16 	vmov	d6, r2, r3
 8006e70:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006e74:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007020 <_dtoa_r+0x2c0>
 8006e78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e7c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007028 <_dtoa_r+0x2c8>
 8006e80:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006e84:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007030 <_dtoa_r+0x2d0>
 8006e88:	ee07 1a90 	vmov	s15, r1
 8006e8c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006e90:	eeb0 7b46 	vmov.f64	d7, d6
 8006e94:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006e98:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006e9c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea4:	ee16 ba90 	vmov	fp, s13
 8006ea8:	940a      	str	r4, [sp, #40]	; 0x28
 8006eaa:	d508      	bpl.n	8006ebe <_dtoa_r+0x15e>
 8006eac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006eb0:	eeb4 6b47 	vcmp.f64	d6, d7
 8006eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb8:	bf18      	it	ne
 8006eba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006ebe:	f1bb 0f16 	cmp.w	fp, #22
 8006ec2:	d82f      	bhi.n	8006f24 <_dtoa_r+0x1c4>
 8006ec4:	4b62      	ldr	r3, [pc, #392]	; (8007050 <_dtoa_r+0x2f0>)
 8006ec6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eca:	ed93 7b00 	vldr	d7, [r3]
 8006ece:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d501      	bpl.n	8006edc <_dtoa_r+0x17c>
 8006ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006edc:	2300      	movs	r3, #0
 8006ede:	e022      	b.n	8006f26 <_dtoa_r+0x1c6>
 8006ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ee2:	4401      	add	r1, r0
 8006ee4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	bfc1      	itttt	gt
 8006eec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ef0:	fa04 f303 	lslgt.w	r3, r4, r3
 8006ef4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006ef8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006efc:	bfd6      	itet	le
 8006efe:	f1c3 0320 	rsble	r3, r3, #32
 8006f02:	ea43 0808 	orrgt.w	r8, r3, r8
 8006f06:	fa08 f803 	lslle.w	r8, r8, r3
 8006f0a:	ee07 8a90 	vmov	s15, r8
 8006f0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f12:	3901      	subs	r1, #1
 8006f14:	ee17 4a90 	vmov	r4, s15
 8006f18:	ec53 2b17 	vmov	r2, r3, d7
 8006f1c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006f20:	2401      	movs	r4, #1
 8006f22:	e7a3      	b.n	8006e6c <_dtoa_r+0x10c>
 8006f24:	2301      	movs	r3, #1
 8006f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f28:	1a43      	subs	r3, r0, r1
 8006f2a:	1e5a      	subs	r2, r3, #1
 8006f2c:	bf45      	ittet	mi
 8006f2e:	f1c3 0301 	rsbmi	r3, r3, #1
 8006f32:	9304      	strmi	r3, [sp, #16]
 8006f34:	2300      	movpl	r3, #0
 8006f36:	2300      	movmi	r3, #0
 8006f38:	9205      	str	r2, [sp, #20]
 8006f3a:	bf54      	ite	pl
 8006f3c:	9304      	strpl	r3, [sp, #16]
 8006f3e:	9305      	strmi	r3, [sp, #20]
 8006f40:	f1bb 0f00 	cmp.w	fp, #0
 8006f44:	db18      	blt.n	8006f78 <_dtoa_r+0x218>
 8006f46:	9b05      	ldr	r3, [sp, #20]
 8006f48:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006f4c:	445b      	add	r3, fp
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	2300      	movs	r3, #0
 8006f52:	9a06      	ldr	r2, [sp, #24]
 8006f54:	2a09      	cmp	r2, #9
 8006f56:	d849      	bhi.n	8006fec <_dtoa_r+0x28c>
 8006f58:	2a05      	cmp	r2, #5
 8006f5a:	bfc4      	itt	gt
 8006f5c:	3a04      	subgt	r2, #4
 8006f5e:	9206      	strgt	r2, [sp, #24]
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	f1a2 0202 	sub.w	r2, r2, #2
 8006f66:	bfcc      	ite	gt
 8006f68:	2400      	movgt	r4, #0
 8006f6a:	2401      	movle	r4, #1
 8006f6c:	2a03      	cmp	r2, #3
 8006f6e:	d848      	bhi.n	8007002 <_dtoa_r+0x2a2>
 8006f70:	e8df f002 	tbb	[pc, r2]
 8006f74:	3a2c2e0b 	.word	0x3a2c2e0b
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	eba3 030b 	sub.w	r3, r3, fp
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	9209      	str	r2, [sp, #36]	; 0x24
 8006f84:	f1cb 0300 	rsb	r3, fp, #0
 8006f88:	e7e3      	b.n	8006f52 <_dtoa_r+0x1f2>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	9207      	str	r2, [sp, #28]
 8006f8e:	9a08      	ldr	r2, [sp, #32]
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	dc39      	bgt.n	8007008 <_dtoa_r+0x2a8>
 8006f94:	f04f 0a01 	mov.w	sl, #1
 8006f98:	46d1      	mov	r9, sl
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	f8cd a020 	str.w	sl, [sp, #32]
 8006fa0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6079      	str	r1, [r7, #4]
 8006fa6:	2004      	movs	r0, #4
 8006fa8:	f100 0c14 	add.w	ip, r0, #20
 8006fac:	4594      	cmp	ip, r2
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	d92f      	bls.n	8007012 <_dtoa_r+0x2b2>
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb6:	f000 fd55 	bl	8007a64 <_Balloc>
 8006fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fbc:	9001      	str	r0, [sp, #4]
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d149      	bne.n	8007058 <_dtoa_r+0x2f8>
 8006fc4:	4b23      	ldr	r3, [pc, #140]	; (8007054 <_dtoa_r+0x2f4>)
 8006fc6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fca:	e6e1      	b.n	8006d90 <_dtoa_r+0x30>
 8006fcc:	2201      	movs	r2, #1
 8006fce:	e7dd      	b.n	8006f8c <_dtoa_r+0x22c>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	9207      	str	r2, [sp, #28]
 8006fd4:	9a08      	ldr	r2, [sp, #32]
 8006fd6:	eb0b 0a02 	add.w	sl, fp, r2
 8006fda:	f10a 0901 	add.w	r9, sl, #1
 8006fde:	464a      	mov	r2, r9
 8006fe0:	2a01      	cmp	r2, #1
 8006fe2:	bfb8      	it	lt
 8006fe4:	2201      	movlt	r2, #1
 8006fe6:	e7db      	b.n	8006fa0 <_dtoa_r+0x240>
 8006fe8:	2201      	movs	r2, #1
 8006fea:	e7f2      	b.n	8006fd2 <_dtoa_r+0x272>
 8006fec:	2401      	movs	r4, #1
 8006fee:	2200      	movs	r2, #0
 8006ff0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	46d1      	mov	r9, sl
 8006ffc:	2212      	movs	r2, #18
 8006ffe:	9108      	str	r1, [sp, #32]
 8007000:	e7ce      	b.n	8006fa0 <_dtoa_r+0x240>
 8007002:	2201      	movs	r2, #1
 8007004:	9207      	str	r2, [sp, #28]
 8007006:	e7f5      	b.n	8006ff4 <_dtoa_r+0x294>
 8007008:	f8dd a020 	ldr.w	sl, [sp, #32]
 800700c:	46d1      	mov	r9, sl
 800700e:	4652      	mov	r2, sl
 8007010:	e7c6      	b.n	8006fa0 <_dtoa_r+0x240>
 8007012:	3101      	adds	r1, #1
 8007014:	6079      	str	r1, [r7, #4]
 8007016:	0040      	lsls	r0, r0, #1
 8007018:	e7c6      	b.n	8006fa8 <_dtoa_r+0x248>
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w
 8007020:	636f4361 	.word	0x636f4361
 8007024:	3fd287a7 	.word	0x3fd287a7
 8007028:	8b60c8b3 	.word	0x8b60c8b3
 800702c:	3fc68a28 	.word	0x3fc68a28
 8007030:	509f79fb 	.word	0x509f79fb
 8007034:	3fd34413 	.word	0x3fd34413
 8007038:	08008d49 	.word	0x08008d49
 800703c:	08008d60 	.word	0x08008d60
 8007040:	7ff00000 	.word	0x7ff00000
 8007044:	08008d45 	.word	0x08008d45
 8007048:	08008d3c 	.word	0x08008d3c
 800704c:	08008d19 	.word	0x08008d19
 8007050:	08008eb0 	.word	0x08008eb0
 8007054:	08008dbb 	.word	0x08008dbb
 8007058:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800705a:	9901      	ldr	r1, [sp, #4]
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	f1b9 0f0e 	cmp.w	r9, #14
 8007062:	d86c      	bhi.n	800713e <_dtoa_r+0x3de>
 8007064:	2c00      	cmp	r4, #0
 8007066:	d06a      	beq.n	800713e <_dtoa_r+0x3de>
 8007068:	f1bb 0f00 	cmp.w	fp, #0
 800706c:	f340 80a0 	ble.w	80071b0 <_dtoa_r+0x450>
 8007070:	49c1      	ldr	r1, [pc, #772]	; (8007378 <_dtoa_r+0x618>)
 8007072:	f00b 020f 	and.w	r2, fp, #15
 8007076:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800707a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800707e:	ed92 7b00 	vldr	d7, [r2]
 8007082:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007086:	f000 8087 	beq.w	8007198 <_dtoa_r+0x438>
 800708a:	4abc      	ldr	r2, [pc, #752]	; (800737c <_dtoa_r+0x61c>)
 800708c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007090:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007094:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007098:	f001 010f 	and.w	r1, r1, #15
 800709c:	2203      	movs	r2, #3
 800709e:	48b7      	ldr	r0, [pc, #732]	; (800737c <_dtoa_r+0x61c>)
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d17b      	bne.n	800719c <_dtoa_r+0x43c>
 80070a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80070ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b2:	2900      	cmp	r1, #0
 80070b4:	f000 80a2 	beq.w	80071fc <_dtoa_r+0x49c>
 80070b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80070bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	f140 8098 	bpl.w	80071fc <_dtoa_r+0x49c>
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	f000 8094 	beq.w	80071fc <_dtoa_r+0x49c>
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	dd2f      	ble.n	800713a <_dtoa_r+0x3da>
 80070da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80070de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80070ea:	3201      	adds	r2, #1
 80070ec:	4650      	mov	r0, sl
 80070ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80070f6:	ee07 2a90 	vmov	s15, r2
 80070fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007102:	ee15 4a90 	vmov	r4, s11
 8007106:	ec52 1b15 	vmov	r1, r2, d5
 800710a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800710e:	2800      	cmp	r0, #0
 8007110:	d177      	bne.n	8007202 <_dtoa_r+0x4a2>
 8007112:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007116:	ee36 6b47 	vsub.f64	d6, d6, d7
 800711a:	ec42 1b17 	vmov	d7, r1, r2
 800711e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	f300 8263 	bgt.w	80075f0 <_dtoa_r+0x890>
 800712a:	eeb1 7b47 	vneg.f64	d7, d7
 800712e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007136:	f100 8258 	bmi.w	80075ea <_dtoa_r+0x88a>
 800713a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800713e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007140:	2a00      	cmp	r2, #0
 8007142:	f2c0 811d 	blt.w	8007380 <_dtoa_r+0x620>
 8007146:	f1bb 0f0e 	cmp.w	fp, #14
 800714a:	f300 8119 	bgt.w	8007380 <_dtoa_r+0x620>
 800714e:	4b8a      	ldr	r3, [pc, #552]	; (8007378 <_dtoa_r+0x618>)
 8007150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007154:	ed93 6b00 	vldr	d6, [r3]
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f280 80b7 	bge.w	80072ce <_dtoa_r+0x56e>
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	f300 80b3 	bgt.w	80072ce <_dtoa_r+0x56e>
 8007168:	f040 823f 	bne.w	80075ea <_dtoa_r+0x88a>
 800716c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007170:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007178:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	464c      	mov	r4, r9
 8007182:	464f      	mov	r7, r9
 8007184:	f280 8215 	bge.w	80075b2 <_dtoa_r+0x852>
 8007188:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800718c:	2331      	movs	r3, #49	; 0x31
 800718e:	f808 3b01 	strb.w	r3, [r8], #1
 8007192:	f10b 0b01 	add.w	fp, fp, #1
 8007196:	e211      	b.n	80075bc <_dtoa_r+0x85c>
 8007198:	2202      	movs	r2, #2
 800719a:	e780      	b.n	800709e <_dtoa_r+0x33e>
 800719c:	07cc      	lsls	r4, r1, #31
 800719e:	d504      	bpl.n	80071aa <_dtoa_r+0x44a>
 80071a0:	ed90 6b00 	vldr	d6, [r0]
 80071a4:	3201      	adds	r2, #1
 80071a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071aa:	1049      	asrs	r1, r1, #1
 80071ac:	3008      	adds	r0, #8
 80071ae:	e777      	b.n	80070a0 <_dtoa_r+0x340>
 80071b0:	d022      	beq.n	80071f8 <_dtoa_r+0x498>
 80071b2:	f1cb 0100 	rsb	r1, fp, #0
 80071b6:	4a70      	ldr	r2, [pc, #448]	; (8007378 <_dtoa_r+0x618>)
 80071b8:	f001 000f 	and.w	r0, r1, #15
 80071bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80071c0:	ed92 7b00 	vldr	d7, [r2]
 80071c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80071c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071cc:	486b      	ldr	r0, [pc, #428]	; (800737c <_dtoa_r+0x61c>)
 80071ce:	1109      	asrs	r1, r1, #4
 80071d0:	2400      	movs	r4, #0
 80071d2:	2202      	movs	r2, #2
 80071d4:	b929      	cbnz	r1, 80071e2 <_dtoa_r+0x482>
 80071d6:	2c00      	cmp	r4, #0
 80071d8:	f43f af6a 	beq.w	80070b0 <_dtoa_r+0x350>
 80071dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071e0:	e766      	b.n	80070b0 <_dtoa_r+0x350>
 80071e2:	07cf      	lsls	r7, r1, #31
 80071e4:	d505      	bpl.n	80071f2 <_dtoa_r+0x492>
 80071e6:	ed90 6b00 	vldr	d6, [r0]
 80071ea:	3201      	adds	r2, #1
 80071ec:	2401      	movs	r4, #1
 80071ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071f2:	1049      	asrs	r1, r1, #1
 80071f4:	3008      	adds	r0, #8
 80071f6:	e7ed      	b.n	80071d4 <_dtoa_r+0x474>
 80071f8:	2202      	movs	r2, #2
 80071fa:	e759      	b.n	80070b0 <_dtoa_r+0x350>
 80071fc:	465f      	mov	r7, fp
 80071fe:	4648      	mov	r0, r9
 8007200:	e775      	b.n	80070ee <_dtoa_r+0x38e>
 8007202:	ec42 1b17 	vmov	d7, r1, r2
 8007206:	4a5c      	ldr	r2, [pc, #368]	; (8007378 <_dtoa_r+0x618>)
 8007208:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800720c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007210:	9a01      	ldr	r2, [sp, #4]
 8007212:	1814      	adds	r4, r2, r0
 8007214:	9a07      	ldr	r2, [sp, #28]
 8007216:	b352      	cbz	r2, 800726e <_dtoa_r+0x50e>
 8007218:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800721c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007220:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007224:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007228:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800722c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007230:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007234:	ee14 2a90 	vmov	r2, s9
 8007238:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800723c:	3230      	adds	r2, #48	; 0x30
 800723e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007242:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724a:	f808 2b01 	strb.w	r2, [r8], #1
 800724e:	d439      	bmi.n	80072c4 <_dtoa_r+0x564>
 8007250:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007254:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d472      	bmi.n	8007344 <_dtoa_r+0x5e4>
 800725e:	45a0      	cmp	r8, r4
 8007260:	f43f af6b 	beq.w	800713a <_dtoa_r+0x3da>
 8007264:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007268:	ee26 6b03 	vmul.f64	d6, d6, d3
 800726c:	e7e0      	b.n	8007230 <_dtoa_r+0x4d0>
 800726e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007272:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007276:	4621      	mov	r1, r4
 8007278:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800727c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007280:	ee14 2a90 	vmov	r2, s9
 8007284:	3230      	adds	r2, #48	; 0x30
 8007286:	f808 2b01 	strb.w	r2, [r8], #1
 800728a:	45a0      	cmp	r8, r4
 800728c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007290:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007294:	d118      	bne.n	80072c8 <_dtoa_r+0x568>
 8007296:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800729a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800729e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80072a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a6:	dc4d      	bgt.n	8007344 <_dtoa_r+0x5e4>
 80072a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80072ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	f57f af41 	bpl.w	800713a <_dtoa_r+0x3da>
 80072b8:	4688      	mov	r8, r1
 80072ba:	3901      	subs	r1, #1
 80072bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80072c0:	2b30      	cmp	r3, #48	; 0x30
 80072c2:	d0f9      	beq.n	80072b8 <_dtoa_r+0x558>
 80072c4:	46bb      	mov	fp, r7
 80072c6:	e02a      	b.n	800731e <_dtoa_r+0x5be>
 80072c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80072cc:	e7d6      	b.n	800727c <_dtoa_r+0x51c>
 80072ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80072d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80072de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80072e2:	ee15 3a10 	vmov	r3, s10
 80072e6:	3330      	adds	r3, #48	; 0x30
 80072e8:	f808 3b01 	strb.w	r3, [r8], #1
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	eba8 0303 	sub.w	r3, r8, r3
 80072f2:	4599      	cmp	r9, r3
 80072f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80072f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80072fc:	d133      	bne.n	8007366 <_dtoa_r+0x606>
 80072fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007302:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	dc1a      	bgt.n	8007342 <_dtoa_r+0x5e2>
 800730c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d103      	bne.n	800731e <_dtoa_r+0x5be>
 8007316:	ee15 3a10 	vmov	r3, s10
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d411      	bmi.n	8007342 <_dtoa_r+0x5e2>
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	f000 fbdf 	bl	8007ae4 <_Bfree>
 8007326:	2300      	movs	r3, #0
 8007328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800732a:	f888 3000 	strb.w	r3, [r8]
 800732e:	f10b 0301 	add.w	r3, fp, #1
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007336:	2b00      	cmp	r3, #0
 8007338:	f43f ad61 	beq.w	8006dfe <_dtoa_r+0x9e>
 800733c:	f8c3 8000 	str.w	r8, [r3]
 8007340:	e55d      	b.n	8006dfe <_dtoa_r+0x9e>
 8007342:	465f      	mov	r7, fp
 8007344:	4643      	mov	r3, r8
 8007346:	4698      	mov	r8, r3
 8007348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800734c:	2a39      	cmp	r2, #57	; 0x39
 800734e:	d106      	bne.n	800735e <_dtoa_r+0x5fe>
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d1f7      	bne.n	8007346 <_dtoa_r+0x5e6>
 8007356:	9901      	ldr	r1, [sp, #4]
 8007358:	2230      	movs	r2, #48	; 0x30
 800735a:	3701      	adds	r7, #1
 800735c:	700a      	strb	r2, [r1, #0]
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	3201      	adds	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e7ae      	b.n	80072c4 <_dtoa_r+0x564>
 8007366:	ee27 7b04 	vmul.f64	d7, d7, d4
 800736a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800736e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007372:	d1b2      	bne.n	80072da <_dtoa_r+0x57a>
 8007374:	e7d3      	b.n	800731e <_dtoa_r+0x5be>
 8007376:	bf00      	nop
 8007378:	08008eb0 	.word	0x08008eb0
 800737c:	08008e88 	.word	0x08008e88
 8007380:	9907      	ldr	r1, [sp, #28]
 8007382:	2900      	cmp	r1, #0
 8007384:	f000 80d0 	beq.w	8007528 <_dtoa_r+0x7c8>
 8007388:	9906      	ldr	r1, [sp, #24]
 800738a:	2901      	cmp	r1, #1
 800738c:	f300 80b4 	bgt.w	80074f8 <_dtoa_r+0x798>
 8007390:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007392:	2900      	cmp	r1, #0
 8007394:	f000 80ac 	beq.w	80074f0 <_dtoa_r+0x790>
 8007398:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800739c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80073a0:	461c      	mov	r4, r3
 80073a2:	930a      	str	r3, [sp, #40]	; 0x28
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	2101      	movs	r1, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	4630      	mov	r0, r6
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	f000 fc4e 	bl	8007c54 <__i2b>
 80073b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ba:	4607      	mov	r7, r0
 80073bc:	f1b8 0f00 	cmp.w	r8, #0
 80073c0:	dd0d      	ble.n	80073de <_dtoa_r+0x67e>
 80073c2:	9a05      	ldr	r2, [sp, #20]
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	dd0a      	ble.n	80073de <_dtoa_r+0x67e>
 80073c8:	4542      	cmp	r2, r8
 80073ca:	9904      	ldr	r1, [sp, #16]
 80073cc:	bfa8      	it	ge
 80073ce:	4642      	movge	r2, r8
 80073d0:	1a89      	subs	r1, r1, r2
 80073d2:	9104      	str	r1, [sp, #16]
 80073d4:	9905      	ldr	r1, [sp, #20]
 80073d6:	eba8 0802 	sub.w	r8, r8, r2
 80073da:	1a8a      	subs	r2, r1, r2
 80073dc:	9205      	str	r2, [sp, #20]
 80073de:	b303      	cbz	r3, 8007422 <_dtoa_r+0x6c2>
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	f000 80a5 	beq.w	8007532 <_dtoa_r+0x7d2>
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	dd13      	ble.n	8007414 <_dtoa_r+0x6b4>
 80073ec:	4639      	mov	r1, r7
 80073ee:	4622      	mov	r2, r4
 80073f0:	4630      	mov	r0, r6
 80073f2:	930d      	str	r3, [sp, #52]	; 0x34
 80073f4:	f000 fcee 	bl	8007dd4 <__pow5mult>
 80073f8:	462a      	mov	r2, r5
 80073fa:	4601      	mov	r1, r0
 80073fc:	4607      	mov	r7, r0
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 fc3e 	bl	8007c80 <__multiply>
 8007404:	4629      	mov	r1, r5
 8007406:	900a      	str	r0, [sp, #40]	; 0x28
 8007408:	4630      	mov	r0, r6
 800740a:	f000 fb6b 	bl	8007ae4 <_Bfree>
 800740e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007412:	4615      	mov	r5, r2
 8007414:	1b1a      	subs	r2, r3, r4
 8007416:	d004      	beq.n	8007422 <_dtoa_r+0x6c2>
 8007418:	4629      	mov	r1, r5
 800741a:	4630      	mov	r0, r6
 800741c:	f000 fcda 	bl	8007dd4 <__pow5mult>
 8007420:	4605      	mov	r5, r0
 8007422:	2101      	movs	r1, #1
 8007424:	4630      	mov	r0, r6
 8007426:	f000 fc15 	bl	8007c54 <__i2b>
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	f340 8081 	ble.w	8007536 <_dtoa_r+0x7d6>
 8007434:	461a      	mov	r2, r3
 8007436:	4601      	mov	r1, r0
 8007438:	4630      	mov	r0, r6
 800743a:	f000 fccb 	bl	8007dd4 <__pow5mult>
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	2b01      	cmp	r3, #1
 8007442:	4604      	mov	r4, r0
 8007444:	dd7a      	ble.n	800753c <_dtoa_r+0x7dc>
 8007446:	2300      	movs	r3, #0
 8007448:	930a      	str	r3, [sp, #40]	; 0x28
 800744a:	6922      	ldr	r2, [r4, #16]
 800744c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007450:	6910      	ldr	r0, [r2, #16]
 8007452:	f000 fbaf 	bl	8007bb4 <__hi0bits>
 8007456:	f1c0 0020 	rsb	r0, r0, #32
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	4418      	add	r0, r3
 800745e:	f010 001f 	ands.w	r0, r0, #31
 8007462:	f000 808c 	beq.w	800757e <_dtoa_r+0x81e>
 8007466:	f1c0 0220 	rsb	r2, r0, #32
 800746a:	2a04      	cmp	r2, #4
 800746c:	f340 8085 	ble.w	800757a <_dtoa_r+0x81a>
 8007470:	f1c0 001c 	rsb	r0, r0, #28
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	4403      	add	r3, r0
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	9b05      	ldr	r3, [sp, #20]
 800747c:	4403      	add	r3, r0
 800747e:	4480      	add	r8, r0
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	9b04      	ldr	r3, [sp, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd05      	ble.n	8007494 <_dtoa_r+0x734>
 8007488:	4629      	mov	r1, r5
 800748a:	461a      	mov	r2, r3
 800748c:	4630      	mov	r0, r6
 800748e:	f000 fcfb 	bl	8007e88 <__lshift>
 8007492:	4605      	mov	r5, r0
 8007494:	9b05      	ldr	r3, [sp, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd05      	ble.n	80074a6 <_dtoa_r+0x746>
 800749a:	4621      	mov	r1, r4
 800749c:	461a      	mov	r2, r3
 800749e:	4630      	mov	r0, r6
 80074a0:	f000 fcf2 	bl	8007e88 <__lshift>
 80074a4:	4604      	mov	r4, r0
 80074a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d06a      	beq.n	8007582 <_dtoa_r+0x822>
 80074ac:	4621      	mov	r1, r4
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fd5a 	bl	8007f68 <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	da64      	bge.n	8007582 <_dtoa_r+0x822>
 80074b8:	2300      	movs	r3, #0
 80074ba:	4629      	mov	r1, r5
 80074bc:	220a      	movs	r2, #10
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 fb32 	bl	8007b28 <__multadd>
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074ca:	4605      	mov	r5, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8191 	beq.w	80077f4 <_dtoa_r+0xa94>
 80074d2:	4639      	mov	r1, r7
 80074d4:	2300      	movs	r3, #0
 80074d6:	220a      	movs	r2, #10
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 fb25 	bl	8007b28 <__multadd>
 80074de:	f1ba 0f00 	cmp.w	sl, #0
 80074e2:	4607      	mov	r7, r0
 80074e4:	f300 808d 	bgt.w	8007602 <_dtoa_r+0x8a2>
 80074e8:	9b06      	ldr	r3, [sp, #24]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	dc50      	bgt.n	8007590 <_dtoa_r+0x830>
 80074ee:	e088      	b.n	8007602 <_dtoa_r+0x8a2>
 80074f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074f6:	e751      	b.n	800739c <_dtoa_r+0x63c>
 80074f8:	f109 34ff 	add.w	r4, r9, #4294967295
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	bfbf      	itttt	lt
 8007500:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007502:	1ae3      	sublt	r3, r4, r3
 8007504:	18d2      	addlt	r2, r2, r3
 8007506:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007508:	bfb6      	itet	lt
 800750a:	4623      	movlt	r3, r4
 800750c:	1b1c      	subge	r4, r3, r4
 800750e:	2400      	movlt	r4, #0
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	bfb5      	itete	lt
 8007516:	9a04      	ldrlt	r2, [sp, #16]
 8007518:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800751c:	eba2 0809 	sublt.w	r8, r2, r9
 8007520:	464a      	movge	r2, r9
 8007522:	bfb8      	it	lt
 8007524:	2200      	movlt	r2, #0
 8007526:	e73c      	b.n	80073a2 <_dtoa_r+0x642>
 8007528:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800752c:	9f07      	ldr	r7, [sp, #28]
 800752e:	461c      	mov	r4, r3
 8007530:	e744      	b.n	80073bc <_dtoa_r+0x65c>
 8007532:	461a      	mov	r2, r3
 8007534:	e770      	b.n	8007418 <_dtoa_r+0x6b8>
 8007536:	9b06      	ldr	r3, [sp, #24]
 8007538:	2b01      	cmp	r3, #1
 800753a:	dc18      	bgt.n	800756e <_dtoa_r+0x80e>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	b9b3      	cbnz	r3, 800756e <_dtoa_r+0x80e>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007546:	b9a2      	cbnz	r2, 8007572 <_dtoa_r+0x812>
 8007548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800754c:	0d12      	lsrs	r2, r2, #20
 800754e:	0512      	lsls	r2, r2, #20
 8007550:	b18a      	cbz	r2, 8007576 <_dtoa_r+0x816>
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	3301      	adds	r3, #1
 8007556:	9304      	str	r3, [sp, #16]
 8007558:	9b05      	ldr	r3, [sp, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	9305      	str	r3, [sp, #20]
 800755e:	2301      	movs	r3, #1
 8007560:	930a      	str	r3, [sp, #40]	; 0x28
 8007562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	f47f af70 	bne.w	800744a <_dtoa_r+0x6ea>
 800756a:	2001      	movs	r0, #1
 800756c:	e775      	b.n	800745a <_dtoa_r+0x6fa>
 800756e:	2300      	movs	r3, #0
 8007570:	e7f6      	b.n	8007560 <_dtoa_r+0x800>
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	e7f4      	b.n	8007560 <_dtoa_r+0x800>
 8007576:	920a      	str	r2, [sp, #40]	; 0x28
 8007578:	e7f3      	b.n	8007562 <_dtoa_r+0x802>
 800757a:	d082      	beq.n	8007482 <_dtoa_r+0x722>
 800757c:	4610      	mov	r0, r2
 800757e:	301c      	adds	r0, #28
 8007580:	e778      	b.n	8007474 <_dtoa_r+0x714>
 8007582:	f1b9 0f00 	cmp.w	r9, #0
 8007586:	dc37      	bgt.n	80075f8 <_dtoa_r+0x898>
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	2b02      	cmp	r3, #2
 800758c:	dd34      	ble.n	80075f8 <_dtoa_r+0x898>
 800758e:	46ca      	mov	sl, r9
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	d10d      	bne.n	80075b2 <_dtoa_r+0x852>
 8007596:	4621      	mov	r1, r4
 8007598:	4653      	mov	r3, sl
 800759a:	2205      	movs	r2, #5
 800759c:	4630      	mov	r0, r6
 800759e:	f000 fac3 	bl	8007b28 <__multadd>
 80075a2:	4601      	mov	r1, r0
 80075a4:	4604      	mov	r4, r0
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 fcde 	bl	8007f68 <__mcmp>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f73f adeb 	bgt.w	8007188 <_dtoa_r+0x428>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075b8:	ea6f 0b03 	mvn.w	fp, r3
 80075bc:	f04f 0900 	mov.w	r9, #0
 80075c0:	4621      	mov	r1, r4
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 fa8e 	bl	8007ae4 <_Bfree>
 80075c8:	2f00      	cmp	r7, #0
 80075ca:	f43f aea8 	beq.w	800731e <_dtoa_r+0x5be>
 80075ce:	f1b9 0f00 	cmp.w	r9, #0
 80075d2:	d005      	beq.n	80075e0 <_dtoa_r+0x880>
 80075d4:	45b9      	cmp	r9, r7
 80075d6:	d003      	beq.n	80075e0 <_dtoa_r+0x880>
 80075d8:	4649      	mov	r1, r9
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 fa82 	bl	8007ae4 <_Bfree>
 80075e0:	4639      	mov	r1, r7
 80075e2:	4630      	mov	r0, r6
 80075e4:	f000 fa7e 	bl	8007ae4 <_Bfree>
 80075e8:	e699      	b.n	800731e <_dtoa_r+0x5be>
 80075ea:	2400      	movs	r4, #0
 80075ec:	4627      	mov	r7, r4
 80075ee:	e7e0      	b.n	80075b2 <_dtoa_r+0x852>
 80075f0:	46bb      	mov	fp, r7
 80075f2:	4604      	mov	r4, r0
 80075f4:	4607      	mov	r7, r0
 80075f6:	e5c7      	b.n	8007188 <_dtoa_r+0x428>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	46ca      	mov	sl, r9
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8100 	beq.w	8007802 <_dtoa_r+0xaa2>
 8007602:	f1b8 0f00 	cmp.w	r8, #0
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x8b4>
 8007608:	4639      	mov	r1, r7
 800760a:	4642      	mov	r2, r8
 800760c:	4630      	mov	r0, r6
 800760e:	f000 fc3b 	bl	8007e88 <__lshift>
 8007612:	4607      	mov	r7, r0
 8007614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05d      	beq.n	80076d6 <_dtoa_r+0x976>
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4630      	mov	r0, r6
 800761e:	f000 fa21 	bl	8007a64 <_Balloc>
 8007622:	4680      	mov	r8, r0
 8007624:	b928      	cbnz	r0, 8007632 <_dtoa_r+0x8d2>
 8007626:	4b82      	ldr	r3, [pc, #520]	; (8007830 <_dtoa_r+0xad0>)
 8007628:	4602      	mov	r2, r0
 800762a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800762e:	f7ff bbaf 	b.w	8006d90 <_dtoa_r+0x30>
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	3202      	adds	r2, #2
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	f107 010c 	add.w	r1, r7, #12
 800763c:	300c      	adds	r0, #12
 800763e:	f000 fa03 	bl	8007a48 <memcpy>
 8007642:	2201      	movs	r2, #1
 8007644:	4641      	mov	r1, r8
 8007646:	4630      	mov	r0, r6
 8007648:	f000 fc1e 	bl	8007e88 <__lshift>
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	4453      	add	r3, sl
 8007656:	9308      	str	r3, [sp, #32]
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	46b9      	mov	r9, r7
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	4607      	mov	r7, r0
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	3b01      	subs	r3, #1
 800766a:	4628      	mov	r0, r5
 800766c:	9302      	str	r3, [sp, #8]
 800766e:	f7ff fae9 	bl	8006c44 <quorem>
 8007672:	4603      	mov	r3, r0
 8007674:	3330      	adds	r3, #48	; 0x30
 8007676:	9005      	str	r0, [sp, #20]
 8007678:	4649      	mov	r1, r9
 800767a:	4628      	mov	r0, r5
 800767c:	9309      	str	r3, [sp, #36]	; 0x24
 800767e:	f000 fc73 	bl	8007f68 <__mcmp>
 8007682:	463a      	mov	r2, r7
 8007684:	4682      	mov	sl, r0
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f000 fc89 	bl	8007fa0 <__mdiff>
 800768e:	68c2      	ldr	r2, [r0, #12]
 8007690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007692:	4680      	mov	r8, r0
 8007694:	bb0a      	cbnz	r2, 80076da <_dtoa_r+0x97a>
 8007696:	4601      	mov	r1, r0
 8007698:	4628      	mov	r0, r5
 800769a:	f000 fc65 	bl	8007f68 <__mcmp>
 800769e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a0:	4602      	mov	r2, r0
 80076a2:	4641      	mov	r1, r8
 80076a4:	4630      	mov	r0, r6
 80076a6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80076aa:	f000 fa1b 	bl	8007ae4 <_Bfree>
 80076ae:	9b06      	ldr	r3, [sp, #24]
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80076b6:	ea43 0102 	orr.w	r1, r3, r2
 80076ba:	9b07      	ldr	r3, [sp, #28]
 80076bc:	430b      	orrs	r3, r1
 80076be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c0:	d10d      	bne.n	80076de <_dtoa_r+0x97e>
 80076c2:	2b39      	cmp	r3, #57	; 0x39
 80076c4:	d029      	beq.n	800771a <_dtoa_r+0x9ba>
 80076c6:	f1ba 0f00 	cmp.w	sl, #0
 80076ca:	dd01      	ble.n	80076d0 <_dtoa_r+0x970>
 80076cc:	9b05      	ldr	r3, [sp, #20]
 80076ce:	3331      	adds	r3, #49	; 0x31
 80076d0:	9a02      	ldr	r2, [sp, #8]
 80076d2:	7013      	strb	r3, [r2, #0]
 80076d4:	e774      	b.n	80075c0 <_dtoa_r+0x860>
 80076d6:	4638      	mov	r0, r7
 80076d8:	e7b8      	b.n	800764c <_dtoa_r+0x8ec>
 80076da:	2201      	movs	r2, #1
 80076dc:	e7e1      	b.n	80076a2 <_dtoa_r+0x942>
 80076de:	f1ba 0f00 	cmp.w	sl, #0
 80076e2:	db06      	blt.n	80076f2 <_dtoa_r+0x992>
 80076e4:	9906      	ldr	r1, [sp, #24]
 80076e6:	ea41 0a0a 	orr.w	sl, r1, sl
 80076ea:	9907      	ldr	r1, [sp, #28]
 80076ec:	ea5a 0101 	orrs.w	r1, sl, r1
 80076f0:	d120      	bne.n	8007734 <_dtoa_r+0x9d4>
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	ddec      	ble.n	80076d0 <_dtoa_r+0x970>
 80076f6:	4629      	mov	r1, r5
 80076f8:	2201      	movs	r2, #1
 80076fa:	4630      	mov	r0, r6
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	f000 fbc3 	bl	8007e88 <__lshift>
 8007702:	4621      	mov	r1, r4
 8007704:	4605      	mov	r5, r0
 8007706:	f000 fc2f 	bl	8007f68 <__mcmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	dc02      	bgt.n	8007716 <_dtoa_r+0x9b6>
 8007710:	d1de      	bne.n	80076d0 <_dtoa_r+0x970>
 8007712:	07da      	lsls	r2, r3, #31
 8007714:	d5dc      	bpl.n	80076d0 <_dtoa_r+0x970>
 8007716:	2b39      	cmp	r3, #57	; 0x39
 8007718:	d1d8      	bne.n	80076cc <_dtoa_r+0x96c>
 800771a:	9a02      	ldr	r2, [sp, #8]
 800771c:	2339      	movs	r3, #57	; 0x39
 800771e:	7013      	strb	r3, [r2, #0]
 8007720:	4643      	mov	r3, r8
 8007722:	4698      	mov	r8, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800772a:	2a39      	cmp	r2, #57	; 0x39
 800772c:	d051      	beq.n	80077d2 <_dtoa_r+0xa72>
 800772e:	3201      	adds	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e745      	b.n	80075c0 <_dtoa_r+0x860>
 8007734:	2a00      	cmp	r2, #0
 8007736:	dd03      	ble.n	8007740 <_dtoa_r+0x9e0>
 8007738:	2b39      	cmp	r3, #57	; 0x39
 800773a:	d0ee      	beq.n	800771a <_dtoa_r+0x9ba>
 800773c:	3301      	adds	r3, #1
 800773e:	e7c7      	b.n	80076d0 <_dtoa_r+0x970>
 8007740:	9a04      	ldr	r2, [sp, #16]
 8007742:	9908      	ldr	r1, [sp, #32]
 8007744:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007748:	428a      	cmp	r2, r1
 800774a:	d02b      	beq.n	80077a4 <_dtoa_r+0xa44>
 800774c:	4629      	mov	r1, r5
 800774e:	2300      	movs	r3, #0
 8007750:	220a      	movs	r2, #10
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f9e8 	bl	8007b28 <__multadd>
 8007758:	45b9      	cmp	r9, r7
 800775a:	4605      	mov	r5, r0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f04f 020a 	mov.w	r2, #10
 8007764:	4649      	mov	r1, r9
 8007766:	4630      	mov	r0, r6
 8007768:	d107      	bne.n	800777a <_dtoa_r+0xa1a>
 800776a:	f000 f9dd 	bl	8007b28 <__multadd>
 800776e:	4681      	mov	r9, r0
 8007770:	4607      	mov	r7, r0
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	e774      	b.n	8007664 <_dtoa_r+0x904>
 800777a:	f000 f9d5 	bl	8007b28 <__multadd>
 800777e:	4639      	mov	r1, r7
 8007780:	4681      	mov	r9, r0
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	4630      	mov	r0, r6
 8007788:	f000 f9ce 	bl	8007b28 <__multadd>
 800778c:	4607      	mov	r7, r0
 800778e:	e7f0      	b.n	8007772 <_dtoa_r+0xa12>
 8007790:	f1ba 0f00 	cmp.w	sl, #0
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	bfcc      	ite	gt
 8007798:	46d0      	movgt	r8, sl
 800779a:	f04f 0801 	movle.w	r8, #1
 800779e:	4490      	add	r8, r2
 80077a0:	f04f 0900 	mov.w	r9, #0
 80077a4:	4629      	mov	r1, r5
 80077a6:	2201      	movs	r2, #1
 80077a8:	4630      	mov	r0, r6
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	f000 fb6c 	bl	8007e88 <__lshift>
 80077b0:	4621      	mov	r1, r4
 80077b2:	4605      	mov	r5, r0
 80077b4:	f000 fbd8 	bl	8007f68 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dcb1      	bgt.n	8007720 <_dtoa_r+0x9c0>
 80077bc:	d102      	bne.n	80077c4 <_dtoa_r+0xa64>
 80077be:	9b02      	ldr	r3, [sp, #8]
 80077c0:	07db      	lsls	r3, r3, #31
 80077c2:	d4ad      	bmi.n	8007720 <_dtoa_r+0x9c0>
 80077c4:	4643      	mov	r3, r8
 80077c6:	4698      	mov	r8, r3
 80077c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077cc:	2a30      	cmp	r2, #48	; 0x30
 80077ce:	d0fa      	beq.n	80077c6 <_dtoa_r+0xa66>
 80077d0:	e6f6      	b.n	80075c0 <_dtoa_r+0x860>
 80077d2:	9a01      	ldr	r2, [sp, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1a4      	bne.n	8007722 <_dtoa_r+0x9c2>
 80077d8:	f10b 0b01 	add.w	fp, fp, #1
 80077dc:	2331      	movs	r3, #49	; 0x31
 80077de:	e778      	b.n	80076d2 <_dtoa_r+0x972>
 80077e0:	4b14      	ldr	r3, [pc, #80]	; (8007834 <_dtoa_r+0xad4>)
 80077e2:	f7ff bb27 	b.w	8006e34 <_dtoa_r+0xd4>
 80077e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f47f ab03 	bne.w	8006df4 <_dtoa_r+0x94>
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <_dtoa_r+0xad8>)
 80077f0:	f7ff bb20 	b.w	8006e34 <_dtoa_r+0xd4>
 80077f4:	f1ba 0f00 	cmp.w	sl, #0
 80077f8:	dc03      	bgt.n	8007802 <_dtoa_r+0xaa2>
 80077fa:	9b06      	ldr	r3, [sp, #24]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f73f aec7 	bgt.w	8007590 <_dtoa_r+0x830>
 8007802:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f7ff fa1b 	bl	8006c44 <quorem>
 800780e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007812:	f808 3b01 	strb.w	r3, [r8], #1
 8007816:	9a01      	ldr	r2, [sp, #4]
 8007818:	eba8 0202 	sub.w	r2, r8, r2
 800781c:	4592      	cmp	sl, r2
 800781e:	ddb7      	ble.n	8007790 <_dtoa_r+0xa30>
 8007820:	4629      	mov	r1, r5
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f97e 	bl	8007b28 <__multadd>
 800782c:	4605      	mov	r5, r0
 800782e:	e7ea      	b.n	8007806 <_dtoa_r+0xaa6>
 8007830:	08008dbb 	.word	0x08008dbb
 8007834:	08008d18 	.word	0x08008d18
 8007838:	08008d3c 	.word	0x08008d3c

0800783c <std>:
 800783c:	2300      	movs	r3, #0
 800783e:	b510      	push	{r4, lr}
 8007840:	4604      	mov	r4, r0
 8007842:	e9c0 3300 	strd	r3, r3, [r0]
 8007846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800784a:	6083      	str	r3, [r0, #8]
 800784c:	8181      	strh	r1, [r0, #12]
 800784e:	6643      	str	r3, [r0, #100]	; 0x64
 8007850:	81c2      	strh	r2, [r0, #14]
 8007852:	6183      	str	r3, [r0, #24]
 8007854:	4619      	mov	r1, r3
 8007856:	2208      	movs	r2, #8
 8007858:	305c      	adds	r0, #92	; 0x5c
 800785a:	f7fe fd91 	bl	8006380 <memset>
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <std+0x38>)
 8007860:	6263      	str	r3, [r4, #36]	; 0x24
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <std+0x3c>)
 8007864:	62a3      	str	r3, [r4, #40]	; 0x28
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x40>)
 8007868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x44>)
 800786c:	6224      	str	r4, [r4, #32]
 800786e:	6323      	str	r3, [r4, #48]	; 0x30
 8007870:	bd10      	pop	{r4, pc}
 8007872:	bf00      	nop
 8007874:	0800862d 	.word	0x0800862d
 8007878:	0800864f 	.word	0x0800864f
 800787c:	08008687 	.word	0x08008687
 8007880:	080086ab 	.word	0x080086ab

08007884 <_cleanup_r>:
 8007884:	4901      	ldr	r1, [pc, #4]	; (800788c <_cleanup_r+0x8>)
 8007886:	f000 b8af 	b.w	80079e8 <_fwalk_reent>
 800788a:	bf00      	nop
 800788c:	080089c1 	.word	0x080089c1

08007890 <__sfmoreglue>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	2268      	movs	r2, #104	; 0x68
 8007894:	1e4d      	subs	r5, r1, #1
 8007896:	4355      	muls	r5, r2
 8007898:	460e      	mov	r6, r1
 800789a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800789e:	f000 fce7 	bl	8008270 <_malloc_r>
 80078a2:	4604      	mov	r4, r0
 80078a4:	b140      	cbz	r0, 80078b8 <__sfmoreglue+0x28>
 80078a6:	2100      	movs	r1, #0
 80078a8:	e9c0 1600 	strd	r1, r6, [r0]
 80078ac:	300c      	adds	r0, #12
 80078ae:	60a0      	str	r0, [r4, #8]
 80078b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078b4:	f7fe fd64 	bl	8006380 <memset>
 80078b8:	4620      	mov	r0, r4
 80078ba:	bd70      	pop	{r4, r5, r6, pc}

080078bc <__sfp_lock_acquire>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__sfp_lock_acquire+0x8>)
 80078be:	f000 b8b8 	b.w	8007a32 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	240002e1 	.word	0x240002e1

080078c8 <__sfp_lock_release>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__sfp_lock_release+0x8>)
 80078ca:	f000 b8b3 	b.w	8007a34 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	240002e1 	.word	0x240002e1

080078d4 <__sinit_lock_acquire>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sinit_lock_acquire+0x8>)
 80078d6:	f000 b8ac 	b.w	8007a32 <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	240002e2 	.word	0x240002e2

080078e0 <__sinit_lock_release>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sinit_lock_release+0x8>)
 80078e2:	f000 b8a7 	b.w	8007a34 <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	240002e2 	.word	0x240002e2

080078ec <__sinit>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	f7ff fff0 	bl	80078d4 <__sinit_lock_acquire>
 80078f4:	69a3      	ldr	r3, [r4, #24]
 80078f6:	b11b      	cbz	r3, 8007900 <__sinit+0x14>
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	f7ff bff0 	b.w	80078e0 <__sinit_lock_release>
 8007900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007904:	6523      	str	r3, [r4, #80]	; 0x50
 8007906:	4b13      	ldr	r3, [pc, #76]	; (8007954 <__sinit+0x68>)
 8007908:	4a13      	ldr	r2, [pc, #76]	; (8007958 <__sinit+0x6c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	62a2      	str	r2, [r4, #40]	; 0x28
 800790e:	42a3      	cmp	r3, r4
 8007910:	bf04      	itt	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	61a3      	streq	r3, [r4, #24]
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f820 	bl	800795c <__sfp>
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f81c 	bl	800795c <__sfp>
 8007924:	60a0      	str	r0, [r4, #8]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f818 	bl	800795c <__sfp>
 800792c:	2200      	movs	r2, #0
 800792e:	60e0      	str	r0, [r4, #12]
 8007930:	2104      	movs	r1, #4
 8007932:	6860      	ldr	r0, [r4, #4]
 8007934:	f7ff ff82 	bl	800783c <std>
 8007938:	68a0      	ldr	r0, [r4, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	2109      	movs	r1, #9
 800793e:	f7ff ff7d 	bl	800783c <std>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	2202      	movs	r2, #2
 8007946:	2112      	movs	r1, #18
 8007948:	f7ff ff78 	bl	800783c <std>
 800794c:	2301      	movs	r3, #1
 800794e:	61a3      	str	r3, [r4, #24]
 8007950:	e7d2      	b.n	80078f8 <__sinit+0xc>
 8007952:	bf00      	nop
 8007954:	08008d04 	.word	0x08008d04
 8007958:	08007885 	.word	0x08007885

0800795c <__sfp>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	4607      	mov	r7, r0
 8007960:	f7ff ffac 	bl	80078bc <__sfp_lock_acquire>
 8007964:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <__sfp+0x84>)
 8007966:	681e      	ldr	r6, [r3, #0]
 8007968:	69b3      	ldr	r3, [r6, #24]
 800796a:	b913      	cbnz	r3, 8007972 <__sfp+0x16>
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff ffbd 	bl	80078ec <__sinit>
 8007972:	3648      	adds	r6, #72	; 0x48
 8007974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	d503      	bpl.n	8007984 <__sfp+0x28>
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	b30b      	cbz	r3, 80079c4 <__sfp+0x68>
 8007980:	6836      	ldr	r6, [r6, #0]
 8007982:	e7f7      	b.n	8007974 <__sfp+0x18>
 8007984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007988:	b9d5      	cbnz	r5, 80079c0 <__sfp+0x64>
 800798a:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <__sfp+0x88>)
 800798c:	60e3      	str	r3, [r4, #12]
 800798e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007992:	6665      	str	r5, [r4, #100]	; 0x64
 8007994:	f000 f84c 	bl	8007a30 <__retarget_lock_init_recursive>
 8007998:	f7ff ff96 	bl	80078c8 <__sfp_lock_release>
 800799c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079a4:	6025      	str	r5, [r4, #0]
 80079a6:	61a5      	str	r5, [r4, #24]
 80079a8:	2208      	movs	r2, #8
 80079aa:	4629      	mov	r1, r5
 80079ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b0:	f7fe fce6 	bl	8006380 <memset>
 80079b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079bc:	4620      	mov	r0, r4
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	3468      	adds	r4, #104	; 0x68
 80079c2:	e7d9      	b.n	8007978 <__sfp+0x1c>
 80079c4:	2104      	movs	r1, #4
 80079c6:	4638      	mov	r0, r7
 80079c8:	f7ff ff62 	bl	8007890 <__sfmoreglue>
 80079cc:	4604      	mov	r4, r0
 80079ce:	6030      	str	r0, [r6, #0]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d1d5      	bne.n	8007980 <__sfp+0x24>
 80079d4:	f7ff ff78 	bl	80078c8 <__sfp_lock_release>
 80079d8:	230c      	movs	r3, #12
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	e7ee      	b.n	80079bc <__sfp+0x60>
 80079de:	bf00      	nop
 80079e0:	08008d04 	.word	0x08008d04
 80079e4:	ffff0001 	.word	0xffff0001

080079e8 <_fwalk_reent>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	4606      	mov	r6, r0
 80079ee:	4688      	mov	r8, r1
 80079f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079f4:	2700      	movs	r7, #0
 80079f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079fa:	f1b9 0901 	subs.w	r9, r9, #1
 80079fe:	d505      	bpl.n	8007a0c <_fwalk_reent+0x24>
 8007a00:	6824      	ldr	r4, [r4, #0]
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d1f7      	bne.n	80079f6 <_fwalk_reent+0xe>
 8007a06:	4638      	mov	r0, r7
 8007a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d907      	bls.n	8007a22 <_fwalk_reent+0x3a>
 8007a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a16:	3301      	adds	r3, #1
 8007a18:	d003      	beq.n	8007a22 <_fwalk_reent+0x3a>
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	47c0      	blx	r8
 8007a20:	4307      	orrs	r7, r0
 8007a22:	3568      	adds	r5, #104	; 0x68
 8007a24:	e7e9      	b.n	80079fa <_fwalk_reent+0x12>
	...

08007a28 <_localeconv_r>:
 8007a28:	4800      	ldr	r0, [pc, #0]	; (8007a2c <_localeconv_r+0x4>)
 8007a2a:	4770      	bx	lr
 8007a2c:	24000164 	.word	0x24000164

08007a30 <__retarget_lock_init_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <__retarget_lock_acquire_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <__retarget_lock_release_recursive>:
 8007a34:	4770      	bx	lr
	...

08007a38 <malloc>:
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <malloc+0xc>)
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	f000 bc17 	b.w	8008270 <_malloc_r>
 8007a42:	bf00      	nop
 8007a44:	24000010 	.word	0x24000010

08007a48 <memcpy>:
 8007a48:	440a      	add	r2, r1
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a50:	d100      	bne.n	8007a54 <memcpy+0xc>
 8007a52:	4770      	bx	lr
 8007a54:	b510      	push	{r4, lr}
 8007a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	d1f9      	bne.n	8007a56 <memcpy+0xe>
 8007a62:	bd10      	pop	{r4, pc}

08007a64 <_Balloc>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	b976      	cbnz	r6, 8007a8c <_Balloc+0x28>
 8007a6e:	2010      	movs	r0, #16
 8007a70:	f7ff ffe2 	bl	8007a38 <malloc>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6260      	str	r0, [r4, #36]	; 0x24
 8007a78:	b920      	cbnz	r0, 8007a84 <_Balloc+0x20>
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <_Balloc+0x78>)
 8007a7c:	4818      	ldr	r0, [pc, #96]	; (8007ae0 <_Balloc+0x7c>)
 8007a7e:	2166      	movs	r1, #102	; 0x66
 8007a80:	f000 feea 	bl	8008858 <__assert_func>
 8007a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a88:	6006      	str	r6, [r0, #0]
 8007a8a:	60c6      	str	r6, [r0, #12]
 8007a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a8e:	68f3      	ldr	r3, [r6, #12]
 8007a90:	b183      	cbz	r3, 8007ab4 <_Balloc+0x50>
 8007a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a9a:	b9b8      	cbnz	r0, 8007acc <_Balloc+0x68>
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007aa2:	1d72      	adds	r2, r6, #5
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fb60 	bl	800816c <_calloc_r>
 8007aac:	b160      	cbz	r0, 8007ac8 <_Balloc+0x64>
 8007aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ab2:	e00e      	b.n	8007ad2 <_Balloc+0x6e>
 8007ab4:	2221      	movs	r2, #33	; 0x21
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 fb57 	bl	800816c <_calloc_r>
 8007abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac0:	60f0      	str	r0, [r6, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e4      	bne.n	8007a92 <_Balloc+0x2e>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	6802      	ldr	r2, [r0, #0]
 8007ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad8:	e7f7      	b.n	8007aca <_Balloc+0x66>
 8007ada:	bf00      	nop
 8007adc:	08008d49 	.word	0x08008d49
 8007ae0:	08008e2c 	.word	0x08008e2c

08007ae4 <_Bfree>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b976      	cbnz	r6, 8007b0c <_Bfree+0x28>
 8007aee:	2010      	movs	r0, #16
 8007af0:	f7ff ffa2 	bl	8007a38 <malloc>
 8007af4:	4602      	mov	r2, r0
 8007af6:	6268      	str	r0, [r5, #36]	; 0x24
 8007af8:	b920      	cbnz	r0, 8007b04 <_Bfree+0x20>
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <_Bfree+0x3c>)
 8007afc:	4809      	ldr	r0, [pc, #36]	; (8007b24 <_Bfree+0x40>)
 8007afe:	218a      	movs	r1, #138	; 0x8a
 8007b00:	f000 feaa 	bl	8008858 <__assert_func>
 8007b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b08:	6006      	str	r6, [r0, #0]
 8007b0a:	60c6      	str	r6, [r0, #12]
 8007b0c:	b13c      	cbz	r4, 8007b1e <_Bfree+0x3a>
 8007b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b10:	6862      	ldr	r2, [r4, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b18:	6021      	str	r1, [r4, #0]
 8007b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	08008d49 	.word	0x08008d49
 8007b24:	08008e2c 	.word	0x08008e2c

08007b28 <__multadd>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	690d      	ldr	r5, [r1, #16]
 8007b2e:	4607      	mov	r7, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461e      	mov	r6, r3
 8007b34:	f101 0c14 	add.w	ip, r1, #20
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b3e:	b299      	uxth	r1, r3
 8007b40:	fb02 6101 	mla	r1, r2, r1, r6
 8007b44:	0c1e      	lsrs	r6, r3, #16
 8007b46:	0c0b      	lsrs	r3, r1, #16
 8007b48:	fb02 3306 	mla	r3, r2, r6, r3
 8007b4c:	b289      	uxth	r1, r1
 8007b4e:	3001      	adds	r0, #1
 8007b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b54:	4285      	cmp	r5, r0
 8007b56:	f84c 1b04 	str.w	r1, [ip], #4
 8007b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b5e:	dcec      	bgt.n	8007b3a <__multadd+0x12>
 8007b60:	b30e      	cbz	r6, 8007ba6 <__multadd+0x7e>
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dc19      	bgt.n	8007b9c <__multadd+0x74>
 8007b68:	6861      	ldr	r1, [r4, #4]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	f7ff ff79 	bl	8007a64 <_Balloc>
 8007b72:	4680      	mov	r8, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__multadd+0x5a>
 8007b76:	4602      	mov	r2, r0
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <__multadd+0x84>)
 8007b7a:	480d      	ldr	r0, [pc, #52]	; (8007bb0 <__multadd+0x88>)
 8007b7c:	21b5      	movs	r1, #181	; 0xb5
 8007b7e:	f000 fe6b 	bl	8008858 <__assert_func>
 8007b82:	6922      	ldr	r2, [r4, #16]
 8007b84:	3202      	adds	r2, #2
 8007b86:	f104 010c 	add.w	r1, r4, #12
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	f7ff ff5b 	bl	8007a48 <memcpy>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4638      	mov	r0, r7
 8007b96:	f7ff ffa5 	bl	8007ae4 <_Bfree>
 8007b9a:	4644      	mov	r4, r8
 8007b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	615e      	str	r6, [r3, #20]
 8007ba4:	6125      	str	r5, [r4, #16]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	08008dbb 	.word	0x08008dbb
 8007bb0:	08008e2c 	.word	0x08008e2c

08007bb4 <__hi0bits>:
 8007bb4:	0c03      	lsrs	r3, r0, #16
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	b9d3      	cbnz	r3, 8007bf0 <__hi0bits+0x3c>
 8007bba:	0400      	lsls	r0, r0, #16
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bc2:	bf04      	itt	eq
 8007bc4:	0200      	lsleq	r0, r0, #8
 8007bc6:	3308      	addeq	r3, #8
 8007bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bcc:	bf04      	itt	eq
 8007bce:	0100      	lsleq	r0, r0, #4
 8007bd0:	3304      	addeq	r3, #4
 8007bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bd6:	bf04      	itt	eq
 8007bd8:	0080      	lsleq	r0, r0, #2
 8007bda:	3302      	addeq	r3, #2
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	db05      	blt.n	8007bec <__hi0bits+0x38>
 8007be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007be4:	f103 0301 	add.w	r3, r3, #1
 8007be8:	bf08      	it	eq
 8007bea:	2320      	moveq	r3, #32
 8007bec:	4618      	mov	r0, r3
 8007bee:	4770      	bx	lr
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e7e4      	b.n	8007bbe <__hi0bits+0xa>

08007bf4 <__lo0bits>:
 8007bf4:	6803      	ldr	r3, [r0, #0]
 8007bf6:	f013 0207 	ands.w	r2, r3, #7
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	d00b      	beq.n	8007c16 <__lo0bits+0x22>
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d423      	bmi.n	8007c4a <__lo0bits+0x56>
 8007c02:	0798      	lsls	r0, r3, #30
 8007c04:	bf49      	itett	mi
 8007c06:	085b      	lsrmi	r3, r3, #1
 8007c08:	089b      	lsrpl	r3, r3, #2
 8007c0a:	2001      	movmi	r0, #1
 8007c0c:	600b      	strmi	r3, [r1, #0]
 8007c0e:	bf5c      	itt	pl
 8007c10:	600b      	strpl	r3, [r1, #0]
 8007c12:	2002      	movpl	r0, #2
 8007c14:	4770      	bx	lr
 8007c16:	b298      	uxth	r0, r3
 8007c18:	b9a8      	cbnz	r0, 8007c46 <__lo0bits+0x52>
 8007c1a:	0c1b      	lsrs	r3, r3, #16
 8007c1c:	2010      	movs	r0, #16
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	b90a      	cbnz	r2, 8007c26 <__lo0bits+0x32>
 8007c22:	3008      	adds	r0, #8
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	071a      	lsls	r2, r3, #28
 8007c28:	bf04      	itt	eq
 8007c2a:	091b      	lsreq	r3, r3, #4
 8007c2c:	3004      	addeq	r0, #4
 8007c2e:	079a      	lsls	r2, r3, #30
 8007c30:	bf04      	itt	eq
 8007c32:	089b      	lsreq	r3, r3, #2
 8007c34:	3002      	addeq	r0, #2
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d403      	bmi.n	8007c42 <__lo0bits+0x4e>
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	f100 0001 	add.w	r0, r0, #1
 8007c40:	d005      	beq.n	8007c4e <__lo0bits+0x5a>
 8007c42:	600b      	str	r3, [r1, #0]
 8007c44:	4770      	bx	lr
 8007c46:	4610      	mov	r0, r2
 8007c48:	e7e9      	b.n	8007c1e <__lo0bits+0x2a>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
 8007c4e:	2020      	movs	r0, #32
 8007c50:	4770      	bx	lr
	...

08007c54 <__i2b>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	460c      	mov	r4, r1
 8007c58:	2101      	movs	r1, #1
 8007c5a:	f7ff ff03 	bl	8007a64 <_Balloc>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	b928      	cbnz	r0, 8007c6e <__i2b+0x1a>
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <__i2b+0x24>)
 8007c64:	4805      	ldr	r0, [pc, #20]	; (8007c7c <__i2b+0x28>)
 8007c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c6a:	f000 fdf5 	bl	8008858 <__assert_func>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	6144      	str	r4, [r0, #20]
 8007c72:	6103      	str	r3, [r0, #16]
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	bf00      	nop
 8007c78:	08008dbb 	.word	0x08008dbb
 8007c7c:	08008e2c 	.word	0x08008e2c

08007c80 <__multiply>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	4691      	mov	r9, r2
 8007c86:	690a      	ldr	r2, [r1, #16]
 8007c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfb8      	it	lt
 8007c90:	460b      	movlt	r3, r1
 8007c92:	460c      	mov	r4, r1
 8007c94:	bfbc      	itt	lt
 8007c96:	464c      	movlt	r4, r9
 8007c98:	4699      	movlt	r9, r3
 8007c9a:	6927      	ldr	r7, [r4, #16]
 8007c9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	6861      	ldr	r1, [r4, #4]
 8007ca4:	eb07 060a 	add.w	r6, r7, sl
 8007ca8:	42b3      	cmp	r3, r6
 8007caa:	b085      	sub	sp, #20
 8007cac:	bfb8      	it	lt
 8007cae:	3101      	addlt	r1, #1
 8007cb0:	f7ff fed8 	bl	8007a64 <_Balloc>
 8007cb4:	b930      	cbnz	r0, 8007cc4 <__multiply+0x44>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b44      	ldr	r3, [pc, #272]	; (8007dcc <__multiply+0x14c>)
 8007cba:	4845      	ldr	r0, [pc, #276]	; (8007dd0 <__multiply+0x150>)
 8007cbc:	f240 115d 	movw	r1, #349	; 0x15d
 8007cc0:	f000 fdca 	bl	8008858 <__assert_func>
 8007cc4:	f100 0514 	add.w	r5, r0, #20
 8007cc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ccc:	462b      	mov	r3, r5
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	d321      	bcc.n	8007d18 <__multiply+0x98>
 8007cd4:	f104 0314 	add.w	r3, r4, #20
 8007cd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cdc:	f109 0314 	add.w	r3, r9, #20
 8007ce0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ce4:	9202      	str	r2, [sp, #8]
 8007ce6:	1b3a      	subs	r2, r7, r4
 8007ce8:	3a15      	subs	r2, #21
 8007cea:	f022 0203 	bic.w	r2, r2, #3
 8007cee:	3204      	adds	r2, #4
 8007cf0:	f104 0115 	add.w	r1, r4, #21
 8007cf4:	428f      	cmp	r7, r1
 8007cf6:	bf38      	it	cc
 8007cf8:	2204      	movcc	r2, #4
 8007cfa:	9201      	str	r2, [sp, #4]
 8007cfc:	9a02      	ldr	r2, [sp, #8]
 8007cfe:	9303      	str	r3, [sp, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d80c      	bhi.n	8007d1e <__multiply+0x9e>
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	dd03      	ble.n	8007d10 <__multiply+0x90>
 8007d08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05a      	beq.n	8007dc6 <__multiply+0x146>
 8007d10:	6106      	str	r6, [r0, #16]
 8007d12:	b005      	add	sp, #20
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d18:	f843 2b04 	str.w	r2, [r3], #4
 8007d1c:	e7d8      	b.n	8007cd0 <__multiply+0x50>
 8007d1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d024      	beq.n	8007d72 <__multiply+0xf2>
 8007d28:	f104 0e14 	add.w	lr, r4, #20
 8007d2c:	46a9      	mov	r9, r5
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d36:	f8d9 1000 	ldr.w	r1, [r9]
 8007d3a:	fa1f fb82 	uxth.w	fp, r2
 8007d3e:	b289      	uxth	r1, r1
 8007d40:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d48:	f8d9 2000 	ldr.w	r2, [r9]
 8007d4c:	4461      	add	r1, ip
 8007d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d52:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d5a:	b289      	uxth	r1, r1
 8007d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d60:	4577      	cmp	r7, lr
 8007d62:	f849 1b04 	str.w	r1, [r9], #4
 8007d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d6a:	d8e2      	bhi.n	8007d32 <__multiply+0xb2>
 8007d6c:	9a01      	ldr	r2, [sp, #4]
 8007d6e:	f845 c002 	str.w	ip, [r5, r2]
 8007d72:	9a03      	ldr	r2, [sp, #12]
 8007d74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	f1b9 0f00 	cmp.w	r9, #0
 8007d7e:	d020      	beq.n	8007dc2 <__multiply+0x142>
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	f104 0c14 	add.w	ip, r4, #20
 8007d86:	46ae      	mov	lr, r5
 8007d88:	f04f 0a00 	mov.w	sl, #0
 8007d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d94:	fb09 220b 	mla	r2, r9, fp, r2
 8007d98:	4492      	add	sl, r2
 8007d9a:	b289      	uxth	r1, r1
 8007d9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007da0:	f84e 1b04 	str.w	r1, [lr], #4
 8007da4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007da8:	f8be 1000 	ldrh.w	r1, [lr]
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	fb09 1102 	mla	r1, r9, r2, r1
 8007db2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007db6:	4567      	cmp	r7, ip
 8007db8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dbc:	d8e6      	bhi.n	8007d8c <__multiply+0x10c>
 8007dbe:	9a01      	ldr	r2, [sp, #4]
 8007dc0:	50a9      	str	r1, [r5, r2]
 8007dc2:	3504      	adds	r5, #4
 8007dc4:	e79a      	b.n	8007cfc <__multiply+0x7c>
 8007dc6:	3e01      	subs	r6, #1
 8007dc8:	e79c      	b.n	8007d04 <__multiply+0x84>
 8007dca:	bf00      	nop
 8007dcc:	08008dbb 	.word	0x08008dbb
 8007dd0:	08008e2c 	.word	0x08008e2c

08007dd4 <__pow5mult>:
 8007dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	4615      	mov	r5, r2
 8007dda:	f012 0203 	ands.w	r2, r2, #3
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	d007      	beq.n	8007df4 <__pow5mult+0x20>
 8007de4:	4c25      	ldr	r4, [pc, #148]	; (8007e7c <__pow5mult+0xa8>)
 8007de6:	3a01      	subs	r2, #1
 8007de8:	2300      	movs	r3, #0
 8007dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dee:	f7ff fe9b 	bl	8007b28 <__multadd>
 8007df2:	4607      	mov	r7, r0
 8007df4:	10ad      	asrs	r5, r5, #2
 8007df6:	d03d      	beq.n	8007e74 <__pow5mult+0xa0>
 8007df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dfa:	b97c      	cbnz	r4, 8007e1c <__pow5mult+0x48>
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f7ff fe1b 	bl	8007a38 <malloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	6270      	str	r0, [r6, #36]	; 0x24
 8007e06:	b928      	cbnz	r0, 8007e14 <__pow5mult+0x40>
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <__pow5mult+0xac>)
 8007e0a:	481e      	ldr	r0, [pc, #120]	; (8007e84 <__pow5mult+0xb0>)
 8007e0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e10:	f000 fd22 	bl	8008858 <__assert_func>
 8007e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	60c4      	str	r4, [r0, #12]
 8007e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e24:	b94c      	cbnz	r4, 8007e3a <__pow5mult+0x66>
 8007e26:	f240 2171 	movw	r1, #625	; 0x271
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff12 	bl	8007c54 <__i2b>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e36:	4604      	mov	r4, r0
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	07eb      	lsls	r3, r5, #31
 8007e40:	d50a      	bpl.n	8007e58 <__pow5mult+0x84>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4622      	mov	r2, r4
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ff1a 	bl	8007c80 <__multiply>
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fe47 	bl	8007ae4 <_Bfree>
 8007e56:	4647      	mov	r7, r8
 8007e58:	106d      	asrs	r5, r5, #1
 8007e5a:	d00b      	beq.n	8007e74 <__pow5mult+0xa0>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	b938      	cbnz	r0, 8007e70 <__pow5mult+0x9c>
 8007e60:	4622      	mov	r2, r4
 8007e62:	4621      	mov	r1, r4
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ff0b 	bl	8007c80 <__multiply>
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f8c0 9000 	str.w	r9, [r0]
 8007e70:	4604      	mov	r4, r0
 8007e72:	e7e4      	b.n	8007e3e <__pow5mult+0x6a>
 8007e74:	4638      	mov	r0, r7
 8007e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008f78 	.word	0x08008f78
 8007e80:	08008d49 	.word	0x08008d49
 8007e84:	08008e2c 	.word	0x08008e2c

08007e88 <__lshift>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	6849      	ldr	r1, [r1, #4]
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	4607      	mov	r7, r0
 8007e9a:	4691      	mov	r9, r2
 8007e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ea0:	f108 0601 	add.w	r6, r8, #1
 8007ea4:	42b3      	cmp	r3, r6
 8007ea6:	db0b      	blt.n	8007ec0 <__lshift+0x38>
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff fddb 	bl	8007a64 <_Balloc>
 8007eae:	4605      	mov	r5, r0
 8007eb0:	b948      	cbnz	r0, 8007ec6 <__lshift+0x3e>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <__lshift+0xd8>)
 8007eb6:	482b      	ldr	r0, [pc, #172]	; (8007f64 <__lshift+0xdc>)
 8007eb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ebc:	f000 fccc 	bl	8008858 <__assert_func>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	e7ee      	b.n	8007ea4 <__lshift+0x1c>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f100 0114 	add.w	r1, r0, #20
 8007ecc:	f100 0210 	add.w	r2, r0, #16
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	4553      	cmp	r3, sl
 8007ed4:	db37      	blt.n	8007f46 <__lshift+0xbe>
 8007ed6:	6920      	ldr	r0, [r4, #16]
 8007ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007edc:	f104 0314 	add.w	r3, r4, #20
 8007ee0:	f019 091f 	ands.w	r9, r9, #31
 8007ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007eec:	d02f      	beq.n	8007f4e <__lshift+0xc6>
 8007eee:	f1c9 0e20 	rsb	lr, r9, #32
 8007ef2:	468a      	mov	sl, r1
 8007ef4:	f04f 0c00 	mov.w	ip, #0
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	fa02 f209 	lsl.w	r2, r2, r9
 8007efe:	ea42 020c 	orr.w	r2, r2, ip
 8007f02:	f84a 2b04 	str.w	r2, [sl], #4
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f10:	d8f2      	bhi.n	8007ef8 <__lshift+0x70>
 8007f12:	1b03      	subs	r3, r0, r4
 8007f14:	3b15      	subs	r3, #21
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	f104 0215 	add.w	r2, r4, #21
 8007f20:	4290      	cmp	r0, r2
 8007f22:	bf38      	it	cc
 8007f24:	2304      	movcc	r3, #4
 8007f26:	f841 c003 	str.w	ip, [r1, r3]
 8007f2a:	f1bc 0f00 	cmp.w	ip, #0
 8007f2e:	d001      	beq.n	8007f34 <__lshift+0xac>
 8007f30:	f108 0602 	add.w	r6, r8, #2
 8007f34:	3e01      	subs	r6, #1
 8007f36:	4638      	mov	r0, r7
 8007f38:	612e      	str	r6, [r5, #16]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7ff fdd2 	bl	8007ae4 <_Bfree>
 8007f40:	4628      	mov	r0, r5
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	e7c1      	b.n	8007ed2 <__lshift+0x4a>
 8007f4e:	3904      	subs	r1, #4
 8007f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	d8f9      	bhi.n	8007f50 <__lshift+0xc8>
 8007f5c:	e7ea      	b.n	8007f34 <__lshift+0xac>
 8007f5e:	bf00      	nop
 8007f60:	08008dbb 	.word	0x08008dbb
 8007f64:	08008e2c 	.word	0x08008e2c

08007f68 <__mcmp>:
 8007f68:	b530      	push	{r4, r5, lr}
 8007f6a:	6902      	ldr	r2, [r0, #16]
 8007f6c:	690c      	ldr	r4, [r1, #16]
 8007f6e:	1b12      	subs	r2, r2, r4
 8007f70:	d10e      	bne.n	8007f90 <__mcmp+0x28>
 8007f72:	f100 0314 	add.w	r3, r0, #20
 8007f76:	3114      	adds	r1, #20
 8007f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f88:	42a5      	cmp	r5, r4
 8007f8a:	d003      	beq.n	8007f94 <__mcmp+0x2c>
 8007f8c:	d305      	bcc.n	8007f9a <__mcmp+0x32>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4610      	mov	r0, r2
 8007f92:	bd30      	pop	{r4, r5, pc}
 8007f94:	4283      	cmp	r3, r0
 8007f96:	d3f3      	bcc.n	8007f80 <__mcmp+0x18>
 8007f98:	e7fa      	b.n	8007f90 <__mcmp+0x28>
 8007f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9e:	e7f7      	b.n	8007f90 <__mcmp+0x28>

08007fa0 <__mdiff>:
 8007fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4620      	mov	r0, r4
 8007fac:	4690      	mov	r8, r2
 8007fae:	f7ff ffdb 	bl	8007f68 <__mcmp>
 8007fb2:	1e05      	subs	r5, r0, #0
 8007fb4:	d110      	bne.n	8007fd8 <__mdiff+0x38>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fd53 	bl	8007a64 <_Balloc>
 8007fbe:	b930      	cbnz	r0, 8007fce <__mdiff+0x2e>
 8007fc0:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <__mdiff+0x10c>)
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f240 2132 	movw	r1, #562	; 0x232
 8007fc8:	4839      	ldr	r0, [pc, #228]	; (80080b0 <__mdiff+0x110>)
 8007fca:	f000 fc45 	bl	8008858 <__assert_func>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	bfa4      	itt	ge
 8007fda:	4643      	movge	r3, r8
 8007fdc:	46a0      	movge	r8, r4
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fe4:	bfa6      	itte	ge
 8007fe6:	461c      	movge	r4, r3
 8007fe8:	2500      	movge	r5, #0
 8007fea:	2501      	movlt	r5, #1
 8007fec:	f7ff fd3a 	bl	8007a64 <_Balloc>
 8007ff0:	b920      	cbnz	r0, 8007ffc <__mdiff+0x5c>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__mdiff+0x10c>)
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ffa:	e7e5      	b.n	8007fc8 <__mdiff+0x28>
 8007ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008000:	6926      	ldr	r6, [r4, #16]
 8008002:	60c5      	str	r5, [r0, #12]
 8008004:	f104 0914 	add.w	r9, r4, #20
 8008008:	f108 0514 	add.w	r5, r8, #20
 800800c:	f100 0e14 	add.w	lr, r0, #20
 8008010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008018:	f108 0210 	add.w	r2, r8, #16
 800801c:	46f2      	mov	sl, lr
 800801e:	2100      	movs	r1, #0
 8008020:	f859 3b04 	ldr.w	r3, [r9], #4
 8008024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008028:	fa1f f883 	uxth.w	r8, r3
 800802c:	fa11 f18b 	uxtah	r1, r1, fp
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	eba1 0808 	sub.w	r8, r1, r8
 8008036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800803a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800803e:	fa1f f888 	uxth.w	r8, r8
 8008042:	1419      	asrs	r1, r3, #16
 8008044:	454e      	cmp	r6, r9
 8008046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800804a:	f84a 3b04 	str.w	r3, [sl], #4
 800804e:	d8e7      	bhi.n	8008020 <__mdiff+0x80>
 8008050:	1b33      	subs	r3, r6, r4
 8008052:	3b15      	subs	r3, #21
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	3304      	adds	r3, #4
 800805a:	3415      	adds	r4, #21
 800805c:	42a6      	cmp	r6, r4
 800805e:	bf38      	it	cc
 8008060:	2304      	movcc	r3, #4
 8008062:	441d      	add	r5, r3
 8008064:	4473      	add	r3, lr
 8008066:	469e      	mov	lr, r3
 8008068:	462e      	mov	r6, r5
 800806a:	4566      	cmp	r6, ip
 800806c:	d30e      	bcc.n	800808c <__mdiff+0xec>
 800806e:	f10c 0203 	add.w	r2, ip, #3
 8008072:	1b52      	subs	r2, r2, r5
 8008074:	f022 0203 	bic.w	r2, r2, #3
 8008078:	3d03      	subs	r5, #3
 800807a:	45ac      	cmp	ip, r5
 800807c:	bf38      	it	cc
 800807e:	2200      	movcc	r2, #0
 8008080:	441a      	add	r2, r3
 8008082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008086:	b17b      	cbz	r3, 80080a8 <__mdiff+0x108>
 8008088:	6107      	str	r7, [r0, #16]
 800808a:	e7a3      	b.n	8007fd4 <__mdiff+0x34>
 800808c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008090:	fa11 f288 	uxtah	r2, r1, r8
 8008094:	1414      	asrs	r4, r2, #16
 8008096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800809a:	b292      	uxth	r2, r2
 800809c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080a0:	f84e 2b04 	str.w	r2, [lr], #4
 80080a4:	1421      	asrs	r1, r4, #16
 80080a6:	e7e0      	b.n	800806a <__mdiff+0xca>
 80080a8:	3f01      	subs	r7, #1
 80080aa:	e7ea      	b.n	8008082 <__mdiff+0xe2>
 80080ac:	08008dbb 	.word	0x08008dbb
 80080b0:	08008e2c 	.word	0x08008e2c

080080b4 <__d2b>:
 80080b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080b8:	4689      	mov	r9, r1
 80080ba:	2101      	movs	r1, #1
 80080bc:	ec57 6b10 	vmov	r6, r7, d0
 80080c0:	4690      	mov	r8, r2
 80080c2:	f7ff fccf 	bl	8007a64 <_Balloc>
 80080c6:	4604      	mov	r4, r0
 80080c8:	b930      	cbnz	r0, 80080d8 <__d2b+0x24>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4b25      	ldr	r3, [pc, #148]	; (8008164 <__d2b+0xb0>)
 80080ce:	4826      	ldr	r0, [pc, #152]	; (8008168 <__d2b+0xb4>)
 80080d0:	f240 310a 	movw	r1, #778	; 0x30a
 80080d4:	f000 fbc0 	bl	8008858 <__assert_func>
 80080d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080e0:	bb35      	cbnz	r5, 8008130 <__d2b+0x7c>
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	d028      	beq.n	800813a <__d2b+0x86>
 80080e8:	4668      	mov	r0, sp
 80080ea:	9600      	str	r6, [sp, #0]
 80080ec:	f7ff fd82 	bl	8007bf4 <__lo0bits>
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	b300      	cbz	r0, 8008136 <__d2b+0x82>
 80080f4:	9a01      	ldr	r2, [sp, #4]
 80080f6:	f1c0 0320 	rsb	r3, r0, #32
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	430b      	orrs	r3, r1
 8008100:	40c2      	lsrs	r2, r0
 8008102:	6163      	str	r3, [r4, #20]
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	61a3      	str	r3, [r4, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bf14      	ite	ne
 800810e:	2202      	movne	r2, #2
 8008110:	2201      	moveq	r2, #1
 8008112:	6122      	str	r2, [r4, #16]
 8008114:	b1d5      	cbz	r5, 800814c <__d2b+0x98>
 8008116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800811a:	4405      	add	r5, r0
 800811c:	f8c9 5000 	str.w	r5, [r9]
 8008120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008124:	f8c8 0000 	str.w	r0, [r8]
 8008128:	4620      	mov	r0, r4
 800812a:	b003      	add	sp, #12
 800812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008134:	e7d5      	b.n	80080e2 <__d2b+0x2e>
 8008136:	6161      	str	r1, [r4, #20]
 8008138:	e7e5      	b.n	8008106 <__d2b+0x52>
 800813a:	a801      	add	r0, sp, #4
 800813c:	f7ff fd5a 	bl	8007bf4 <__lo0bits>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	2201      	movs	r2, #1
 8008146:	6122      	str	r2, [r4, #16]
 8008148:	3020      	adds	r0, #32
 800814a:	e7e3      	b.n	8008114 <__d2b+0x60>
 800814c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008154:	f8c9 0000 	str.w	r0, [r9]
 8008158:	6918      	ldr	r0, [r3, #16]
 800815a:	f7ff fd2b 	bl	8007bb4 <__hi0bits>
 800815e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008162:	e7df      	b.n	8008124 <__d2b+0x70>
 8008164:	08008dbb 	.word	0x08008dbb
 8008168:	08008e2c 	.word	0x08008e2c

0800816c <_calloc_r>:
 800816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816e:	fba1 2402 	umull	r2, r4, r1, r2
 8008172:	b94c      	cbnz	r4, 8008188 <_calloc_r+0x1c>
 8008174:	4611      	mov	r1, r2
 8008176:	9201      	str	r2, [sp, #4]
 8008178:	f000 f87a 	bl	8008270 <_malloc_r>
 800817c:	9a01      	ldr	r2, [sp, #4]
 800817e:	4605      	mov	r5, r0
 8008180:	b930      	cbnz	r0, 8008190 <_calloc_r+0x24>
 8008182:	4628      	mov	r0, r5
 8008184:	b003      	add	sp, #12
 8008186:	bd30      	pop	{r4, r5, pc}
 8008188:	220c      	movs	r2, #12
 800818a:	6002      	str	r2, [r0, #0]
 800818c:	2500      	movs	r5, #0
 800818e:	e7f8      	b.n	8008182 <_calloc_r+0x16>
 8008190:	4621      	mov	r1, r4
 8008192:	f7fe f8f5 	bl	8006380 <memset>
 8008196:	e7f4      	b.n	8008182 <_calloc_r+0x16>

08008198 <_free_r>:
 8008198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819a:	2900      	cmp	r1, #0
 800819c:	d044      	beq.n	8008228 <_free_r+0x90>
 800819e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a2:	9001      	str	r0, [sp, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f1a1 0404 	sub.w	r4, r1, #4
 80081aa:	bfb8      	it	lt
 80081ac:	18e4      	addlt	r4, r4, r3
 80081ae:	f000 fcdf 	bl	8008b70 <__malloc_lock>
 80081b2:	4a1e      	ldr	r2, [pc, #120]	; (800822c <_free_r+0x94>)
 80081b4:	9801      	ldr	r0, [sp, #4]
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	b933      	cbnz	r3, 80081c8 <_free_r+0x30>
 80081ba:	6063      	str	r3, [r4, #4]
 80081bc:	6014      	str	r4, [r2, #0]
 80081be:	b003      	add	sp, #12
 80081c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c4:	f000 bcda 	b.w	8008b7c <__malloc_unlock>
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d908      	bls.n	80081de <_free_r+0x46>
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	1961      	adds	r1, r4, r5
 80081d0:	428b      	cmp	r3, r1
 80081d2:	bf01      	itttt	eq
 80081d4:	6819      	ldreq	r1, [r3, #0]
 80081d6:	685b      	ldreq	r3, [r3, #4]
 80081d8:	1949      	addeq	r1, r1, r5
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	e7ed      	b.n	80081ba <_free_r+0x22>
 80081de:	461a      	mov	r2, r3
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b10b      	cbz	r3, 80081e8 <_free_r+0x50>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d9fa      	bls.n	80081de <_free_r+0x46>
 80081e8:	6811      	ldr	r1, [r2, #0]
 80081ea:	1855      	adds	r5, r2, r1
 80081ec:	42a5      	cmp	r5, r4
 80081ee:	d10b      	bne.n	8008208 <_free_r+0x70>
 80081f0:	6824      	ldr	r4, [r4, #0]
 80081f2:	4421      	add	r1, r4
 80081f4:	1854      	adds	r4, r2, r1
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	d1e0      	bne.n	80081be <_free_r+0x26>
 80081fc:	681c      	ldr	r4, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	4421      	add	r1, r4
 8008204:	6011      	str	r1, [r2, #0]
 8008206:	e7da      	b.n	80081be <_free_r+0x26>
 8008208:	d902      	bls.n	8008210 <_free_r+0x78>
 800820a:	230c      	movs	r3, #12
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	e7d6      	b.n	80081be <_free_r+0x26>
 8008210:	6825      	ldr	r5, [r4, #0]
 8008212:	1961      	adds	r1, r4, r5
 8008214:	428b      	cmp	r3, r1
 8008216:	bf04      	itt	eq
 8008218:	6819      	ldreq	r1, [r3, #0]
 800821a:	685b      	ldreq	r3, [r3, #4]
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	bf04      	itt	eq
 8008220:	1949      	addeq	r1, r1, r5
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	6054      	str	r4, [r2, #4]
 8008226:	e7ca      	b.n	80081be <_free_r+0x26>
 8008228:	b003      	add	sp, #12
 800822a:	bd30      	pop	{r4, r5, pc}
 800822c:	240002e4 	.word	0x240002e4

08008230 <sbrk_aligned>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4e0e      	ldr	r6, [pc, #56]	; (800826c <sbrk_aligned+0x3c>)
 8008234:	460c      	mov	r4, r1
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	4605      	mov	r5, r0
 800823a:	b911      	cbnz	r1, 8008242 <sbrk_aligned+0x12>
 800823c:	f000 f9e6 	bl	800860c <_sbrk_r>
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 f9e1 	bl	800860c <_sbrk_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d00a      	beq.n	8008264 <sbrk_aligned+0x34>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d007      	beq.n	8008268 <sbrk_aligned+0x38>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 f9d6 	bl	800860c <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d101      	bne.n	8008268 <sbrk_aligned+0x38>
 8008264:	f04f 34ff 	mov.w	r4, #4294967295
 8008268:	4620      	mov	r0, r4
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	240002e8 	.word	0x240002e8

08008270 <_malloc_r>:
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	1ccd      	adds	r5, r1, #3
 8008276:	f025 0503 	bic.w	r5, r5, #3
 800827a:	3508      	adds	r5, #8
 800827c:	2d0c      	cmp	r5, #12
 800827e:	bf38      	it	cc
 8008280:	250c      	movcc	r5, #12
 8008282:	2d00      	cmp	r5, #0
 8008284:	4607      	mov	r7, r0
 8008286:	db01      	blt.n	800828c <_malloc_r+0x1c>
 8008288:	42a9      	cmp	r1, r5
 800828a:	d905      	bls.n	8008298 <_malloc_r+0x28>
 800828c:	230c      	movs	r3, #12
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	2600      	movs	r6, #0
 8008292:	4630      	mov	r0, r6
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	4e2e      	ldr	r6, [pc, #184]	; (8008354 <_malloc_r+0xe4>)
 800829a:	f000 fc69 	bl	8008b70 <__malloc_lock>
 800829e:	6833      	ldr	r3, [r6, #0]
 80082a0:	461c      	mov	r4, r3
 80082a2:	bb34      	cbnz	r4, 80082f2 <_malloc_r+0x82>
 80082a4:	4629      	mov	r1, r5
 80082a6:	4638      	mov	r0, r7
 80082a8:	f7ff ffc2 	bl	8008230 <sbrk_aligned>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	4604      	mov	r4, r0
 80082b0:	d14d      	bne.n	800834e <_malloc_r+0xde>
 80082b2:	6834      	ldr	r4, [r6, #0]
 80082b4:	4626      	mov	r6, r4
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	d140      	bne.n	800833c <_malloc_r+0xcc>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	4631      	mov	r1, r6
 80082be:	4638      	mov	r0, r7
 80082c0:	eb04 0803 	add.w	r8, r4, r3
 80082c4:	f000 f9a2 	bl	800860c <_sbrk_r>
 80082c8:	4580      	cmp	r8, r0
 80082ca:	d13a      	bne.n	8008342 <_malloc_r+0xd2>
 80082cc:	6821      	ldr	r1, [r4, #0]
 80082ce:	3503      	adds	r5, #3
 80082d0:	1a6d      	subs	r5, r5, r1
 80082d2:	f025 0503 	bic.w	r5, r5, #3
 80082d6:	3508      	adds	r5, #8
 80082d8:	2d0c      	cmp	r5, #12
 80082da:	bf38      	it	cc
 80082dc:	250c      	movcc	r5, #12
 80082de:	4629      	mov	r1, r5
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff ffa5 	bl	8008230 <sbrk_aligned>
 80082e6:	3001      	adds	r0, #1
 80082e8:	d02b      	beq.n	8008342 <_malloc_r+0xd2>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	442b      	add	r3, r5
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	e00e      	b.n	8008310 <_malloc_r+0xa0>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	1b52      	subs	r2, r2, r5
 80082f6:	d41e      	bmi.n	8008336 <_malloc_r+0xc6>
 80082f8:	2a0b      	cmp	r2, #11
 80082fa:	d916      	bls.n	800832a <_malloc_r+0xba>
 80082fc:	1961      	adds	r1, r4, r5
 80082fe:	42a3      	cmp	r3, r4
 8008300:	6025      	str	r5, [r4, #0]
 8008302:	bf18      	it	ne
 8008304:	6059      	strne	r1, [r3, #4]
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	bf08      	it	eq
 800830a:	6031      	streq	r1, [r6, #0]
 800830c:	5162      	str	r2, [r4, r5]
 800830e:	604b      	str	r3, [r1, #4]
 8008310:	4638      	mov	r0, r7
 8008312:	f104 060b 	add.w	r6, r4, #11
 8008316:	f000 fc31 	bl	8008b7c <__malloc_unlock>
 800831a:	f026 0607 	bic.w	r6, r6, #7
 800831e:	1d23      	adds	r3, r4, #4
 8008320:	1af2      	subs	r2, r6, r3
 8008322:	d0b6      	beq.n	8008292 <_malloc_r+0x22>
 8008324:	1b9b      	subs	r3, r3, r6
 8008326:	50a3      	str	r3, [r4, r2]
 8008328:	e7b3      	b.n	8008292 <_malloc_r+0x22>
 800832a:	6862      	ldr	r2, [r4, #4]
 800832c:	42a3      	cmp	r3, r4
 800832e:	bf0c      	ite	eq
 8008330:	6032      	streq	r2, [r6, #0]
 8008332:	605a      	strne	r2, [r3, #4]
 8008334:	e7ec      	b.n	8008310 <_malloc_r+0xa0>
 8008336:	4623      	mov	r3, r4
 8008338:	6864      	ldr	r4, [r4, #4]
 800833a:	e7b2      	b.n	80082a2 <_malloc_r+0x32>
 800833c:	4634      	mov	r4, r6
 800833e:	6876      	ldr	r6, [r6, #4]
 8008340:	e7b9      	b.n	80082b6 <_malloc_r+0x46>
 8008342:	230c      	movs	r3, #12
 8008344:	603b      	str	r3, [r7, #0]
 8008346:	4638      	mov	r0, r7
 8008348:	f000 fc18 	bl	8008b7c <__malloc_unlock>
 800834c:	e7a1      	b.n	8008292 <_malloc_r+0x22>
 800834e:	6025      	str	r5, [r4, #0]
 8008350:	e7de      	b.n	8008310 <_malloc_r+0xa0>
 8008352:	bf00      	nop
 8008354:	240002e4 	.word	0x240002e4

08008358 <__sfputc_r>:
 8008358:	6893      	ldr	r3, [r2, #8]
 800835a:	3b01      	subs	r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	b410      	push	{r4}
 8008360:	6093      	str	r3, [r2, #8]
 8008362:	da08      	bge.n	8008376 <__sfputc_r+0x1e>
 8008364:	6994      	ldr	r4, [r2, #24]
 8008366:	42a3      	cmp	r3, r4
 8008368:	db01      	blt.n	800836e <__sfputc_r+0x16>
 800836a:	290a      	cmp	r1, #10
 800836c:	d103      	bne.n	8008376 <__sfputc_r+0x1e>
 800836e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008372:	f000 b99f 	b.w	80086b4 <__swbuf_r>
 8008376:	6813      	ldr	r3, [r2, #0]
 8008378:	1c58      	adds	r0, r3, #1
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	7019      	strb	r1, [r3, #0]
 800837e:	4608      	mov	r0, r1
 8008380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008384:	4770      	bx	lr

08008386 <__sfputs_r>:
 8008386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008388:	4606      	mov	r6, r0
 800838a:	460f      	mov	r7, r1
 800838c:	4614      	mov	r4, r2
 800838e:	18d5      	adds	r5, r2, r3
 8008390:	42ac      	cmp	r4, r5
 8008392:	d101      	bne.n	8008398 <__sfputs_r+0x12>
 8008394:	2000      	movs	r0, #0
 8008396:	e007      	b.n	80083a8 <__sfputs_r+0x22>
 8008398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839c:	463a      	mov	r2, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ffda 	bl	8008358 <__sfputc_r>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d1f3      	bne.n	8008390 <__sfputs_r+0xa>
 80083a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083ac <_vfiprintf_r>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	460d      	mov	r5, r1
 80083b2:	b09d      	sub	sp, #116	; 0x74
 80083b4:	4614      	mov	r4, r2
 80083b6:	4698      	mov	r8, r3
 80083b8:	4606      	mov	r6, r0
 80083ba:	b118      	cbz	r0, 80083c4 <_vfiprintf_r+0x18>
 80083bc:	6983      	ldr	r3, [r0, #24]
 80083be:	b90b      	cbnz	r3, 80083c4 <_vfiprintf_r+0x18>
 80083c0:	f7ff fa94 	bl	80078ec <__sinit>
 80083c4:	4b89      	ldr	r3, [pc, #548]	; (80085ec <_vfiprintf_r+0x240>)
 80083c6:	429d      	cmp	r5, r3
 80083c8:	d11b      	bne.n	8008402 <_vfiprintf_r+0x56>
 80083ca:	6875      	ldr	r5, [r6, #4]
 80083cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d405      	bmi.n	80083de <_vfiprintf_r+0x32>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	059a      	lsls	r2, r3, #22
 80083d6:	d402      	bmi.n	80083de <_vfiprintf_r+0x32>
 80083d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083da:	f7ff fb2a 	bl	8007a32 <__retarget_lock_acquire_recursive>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	071b      	lsls	r3, r3, #28
 80083e2:	d501      	bpl.n	80083e8 <_vfiprintf_r+0x3c>
 80083e4:	692b      	ldr	r3, [r5, #16]
 80083e6:	b9eb      	cbnz	r3, 8008424 <_vfiprintf_r+0x78>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4630      	mov	r0, r6
 80083ec:	f000 f9c6 	bl	800877c <__swsetup_r>
 80083f0:	b1c0      	cbz	r0, 8008424 <_vfiprintf_r+0x78>
 80083f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f4:	07dc      	lsls	r4, r3, #31
 80083f6:	d50e      	bpl.n	8008416 <_vfiprintf_r+0x6a>
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	b01d      	add	sp, #116	; 0x74
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	4b7b      	ldr	r3, [pc, #492]	; (80085f0 <_vfiprintf_r+0x244>)
 8008404:	429d      	cmp	r5, r3
 8008406:	d101      	bne.n	800840c <_vfiprintf_r+0x60>
 8008408:	68b5      	ldr	r5, [r6, #8]
 800840a:	e7df      	b.n	80083cc <_vfiprintf_r+0x20>
 800840c:	4b79      	ldr	r3, [pc, #484]	; (80085f4 <_vfiprintf_r+0x248>)
 800840e:	429d      	cmp	r5, r3
 8008410:	bf08      	it	eq
 8008412:	68f5      	ldreq	r5, [r6, #12]
 8008414:	e7da      	b.n	80083cc <_vfiprintf_r+0x20>
 8008416:	89ab      	ldrh	r3, [r5, #12]
 8008418:	0598      	lsls	r0, r3, #22
 800841a:	d4ed      	bmi.n	80083f8 <_vfiprintf_r+0x4c>
 800841c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800841e:	f7ff fb09 	bl	8007a34 <__retarget_lock_release_recursive>
 8008422:	e7e9      	b.n	80083f8 <_vfiprintf_r+0x4c>
 8008424:	2300      	movs	r3, #0
 8008426:	9309      	str	r3, [sp, #36]	; 0x24
 8008428:	2320      	movs	r3, #32
 800842a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800842e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008432:	2330      	movs	r3, #48	; 0x30
 8008434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085f8 <_vfiprintf_r+0x24c>
 8008438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800843c:	f04f 0901 	mov.w	r9, #1
 8008440:	4623      	mov	r3, r4
 8008442:	469a      	mov	sl, r3
 8008444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008448:	b10a      	cbz	r2, 800844e <_vfiprintf_r+0xa2>
 800844a:	2a25      	cmp	r2, #37	; 0x25
 800844c:	d1f9      	bne.n	8008442 <_vfiprintf_r+0x96>
 800844e:	ebba 0b04 	subs.w	fp, sl, r4
 8008452:	d00b      	beq.n	800846c <_vfiprintf_r+0xc0>
 8008454:	465b      	mov	r3, fp
 8008456:	4622      	mov	r2, r4
 8008458:	4629      	mov	r1, r5
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ff93 	bl	8008386 <__sfputs_r>
 8008460:	3001      	adds	r0, #1
 8008462:	f000 80aa 	beq.w	80085ba <_vfiprintf_r+0x20e>
 8008466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008468:	445a      	add	r2, fp
 800846a:	9209      	str	r2, [sp, #36]	; 0x24
 800846c:	f89a 3000 	ldrb.w	r3, [sl]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 80a2 	beq.w	80085ba <_vfiprintf_r+0x20e>
 8008476:	2300      	movs	r3, #0
 8008478:	f04f 32ff 	mov.w	r2, #4294967295
 800847c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008480:	f10a 0a01 	add.w	sl, sl, #1
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	9307      	str	r3, [sp, #28]
 8008488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800848c:	931a      	str	r3, [sp, #104]	; 0x68
 800848e:	4654      	mov	r4, sl
 8008490:	2205      	movs	r2, #5
 8008492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008496:	4858      	ldr	r0, [pc, #352]	; (80085f8 <_vfiprintf_r+0x24c>)
 8008498:	f7f7 ff2a 	bl	80002f0 <memchr>
 800849c:	9a04      	ldr	r2, [sp, #16]
 800849e:	b9d8      	cbnz	r0, 80084d8 <_vfiprintf_r+0x12c>
 80084a0:	06d1      	lsls	r1, r2, #27
 80084a2:	bf44      	itt	mi
 80084a4:	2320      	movmi	r3, #32
 80084a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084aa:	0713      	lsls	r3, r2, #28
 80084ac:	bf44      	itt	mi
 80084ae:	232b      	movmi	r3, #43	; 0x2b
 80084b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b4:	f89a 3000 	ldrb.w	r3, [sl]
 80084b8:	2b2a      	cmp	r3, #42	; 0x2a
 80084ba:	d015      	beq.n	80084e8 <_vfiprintf_r+0x13c>
 80084bc:	9a07      	ldr	r2, [sp, #28]
 80084be:	4654      	mov	r4, sl
 80084c0:	2000      	movs	r0, #0
 80084c2:	f04f 0c0a 	mov.w	ip, #10
 80084c6:	4621      	mov	r1, r4
 80084c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084cc:	3b30      	subs	r3, #48	; 0x30
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d94e      	bls.n	8008570 <_vfiprintf_r+0x1c4>
 80084d2:	b1b0      	cbz	r0, 8008502 <_vfiprintf_r+0x156>
 80084d4:	9207      	str	r2, [sp, #28]
 80084d6:	e014      	b.n	8008502 <_vfiprintf_r+0x156>
 80084d8:	eba0 0308 	sub.w	r3, r0, r8
 80084dc:	fa09 f303 	lsl.w	r3, r9, r3
 80084e0:	4313      	orrs	r3, r2
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	46a2      	mov	sl, r4
 80084e6:	e7d2      	b.n	800848e <_vfiprintf_r+0xe2>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	1d19      	adds	r1, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	9103      	str	r1, [sp, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bfbb      	ittet	lt
 80084f4:	425b      	neglt	r3, r3
 80084f6:	f042 0202 	orrlt.w	r2, r2, #2
 80084fa:	9307      	strge	r3, [sp, #28]
 80084fc:	9307      	strlt	r3, [sp, #28]
 80084fe:	bfb8      	it	lt
 8008500:	9204      	strlt	r2, [sp, #16]
 8008502:	7823      	ldrb	r3, [r4, #0]
 8008504:	2b2e      	cmp	r3, #46	; 0x2e
 8008506:	d10c      	bne.n	8008522 <_vfiprintf_r+0x176>
 8008508:	7863      	ldrb	r3, [r4, #1]
 800850a:	2b2a      	cmp	r3, #42	; 0x2a
 800850c:	d135      	bne.n	800857a <_vfiprintf_r+0x1ce>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	1d1a      	adds	r2, r3, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9203      	str	r2, [sp, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfb8      	it	lt
 800851a:	f04f 33ff 	movlt.w	r3, #4294967295
 800851e:	3402      	adds	r4, #2
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008608 <_vfiprintf_r+0x25c>
 8008526:	7821      	ldrb	r1, [r4, #0]
 8008528:	2203      	movs	r2, #3
 800852a:	4650      	mov	r0, sl
 800852c:	f7f7 fee0 	bl	80002f0 <memchr>
 8008530:	b140      	cbz	r0, 8008544 <_vfiprintf_r+0x198>
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	eba0 000a 	sub.w	r0, r0, sl
 8008538:	fa03 f000 	lsl.w	r0, r3, r0
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	4303      	orrs	r3, r0
 8008540:	3401      	adds	r4, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008548:	482c      	ldr	r0, [pc, #176]	; (80085fc <_vfiprintf_r+0x250>)
 800854a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800854e:	2206      	movs	r2, #6
 8008550:	f7f7 fece 	bl	80002f0 <memchr>
 8008554:	2800      	cmp	r0, #0
 8008556:	d03f      	beq.n	80085d8 <_vfiprintf_r+0x22c>
 8008558:	4b29      	ldr	r3, [pc, #164]	; (8008600 <_vfiprintf_r+0x254>)
 800855a:	bb1b      	cbnz	r3, 80085a4 <_vfiprintf_r+0x1f8>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	3307      	adds	r3, #7
 8008560:	f023 0307 	bic.w	r3, r3, #7
 8008564:	3308      	adds	r3, #8
 8008566:	9303      	str	r3, [sp, #12]
 8008568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856a:	443b      	add	r3, r7
 800856c:	9309      	str	r3, [sp, #36]	; 0x24
 800856e:	e767      	b.n	8008440 <_vfiprintf_r+0x94>
 8008570:	fb0c 3202 	mla	r2, ip, r2, r3
 8008574:	460c      	mov	r4, r1
 8008576:	2001      	movs	r0, #1
 8008578:	e7a5      	b.n	80084c6 <_vfiprintf_r+0x11a>
 800857a:	2300      	movs	r3, #0
 800857c:	3401      	adds	r4, #1
 800857e:	9305      	str	r3, [sp, #20]
 8008580:	4619      	mov	r1, r3
 8008582:	f04f 0c0a 	mov.w	ip, #10
 8008586:	4620      	mov	r0, r4
 8008588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858c:	3a30      	subs	r2, #48	; 0x30
 800858e:	2a09      	cmp	r2, #9
 8008590:	d903      	bls.n	800859a <_vfiprintf_r+0x1ee>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0c5      	beq.n	8008522 <_vfiprintf_r+0x176>
 8008596:	9105      	str	r1, [sp, #20]
 8008598:	e7c3      	b.n	8008522 <_vfiprintf_r+0x176>
 800859a:	fb0c 2101 	mla	r1, ip, r1, r2
 800859e:	4604      	mov	r4, r0
 80085a0:	2301      	movs	r3, #1
 80085a2:	e7f0      	b.n	8008586 <_vfiprintf_r+0x1da>
 80085a4:	ab03      	add	r3, sp, #12
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	462a      	mov	r2, r5
 80085aa:	4b16      	ldr	r3, [pc, #88]	; (8008604 <_vfiprintf_r+0x258>)
 80085ac:	a904      	add	r1, sp, #16
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7fd ff7e 	bl	80064b0 <_printf_float>
 80085b4:	4607      	mov	r7, r0
 80085b6:	1c78      	adds	r0, r7, #1
 80085b8:	d1d6      	bne.n	8008568 <_vfiprintf_r+0x1bc>
 80085ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085bc:	07d9      	lsls	r1, r3, #31
 80085be:	d405      	bmi.n	80085cc <_vfiprintf_r+0x220>
 80085c0:	89ab      	ldrh	r3, [r5, #12]
 80085c2:	059a      	lsls	r2, r3, #22
 80085c4:	d402      	bmi.n	80085cc <_vfiprintf_r+0x220>
 80085c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085c8:	f7ff fa34 	bl	8007a34 <__retarget_lock_release_recursive>
 80085cc:	89ab      	ldrh	r3, [r5, #12]
 80085ce:	065b      	lsls	r3, r3, #25
 80085d0:	f53f af12 	bmi.w	80083f8 <_vfiprintf_r+0x4c>
 80085d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d6:	e711      	b.n	80083fc <_vfiprintf_r+0x50>
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	462a      	mov	r2, r5
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <_vfiprintf_r+0x258>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7fe f9f0 	bl	80069c8 <_printf_i>
 80085e8:	e7e4      	b.n	80085b4 <_vfiprintf_r+0x208>
 80085ea:	bf00      	nop
 80085ec:	08008dec 	.word	0x08008dec
 80085f0:	08008e0c 	.word	0x08008e0c
 80085f4:	08008dcc 	.word	0x08008dcc
 80085f8:	08008f84 	.word	0x08008f84
 80085fc:	08008f8e 	.word	0x08008f8e
 8008600:	080064b1 	.word	0x080064b1
 8008604:	08008387 	.word	0x08008387
 8008608:	08008f8a 	.word	0x08008f8a

0800860c <_sbrk_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d06      	ldr	r5, [pc, #24]	; (8008628 <_sbrk_r+0x1c>)
 8008610:	2300      	movs	r3, #0
 8008612:	4604      	mov	r4, r0
 8008614:	4608      	mov	r0, r1
 8008616:	602b      	str	r3, [r5, #0]
 8008618:	f7f8 fbf2 	bl	8000e00 <_sbrk>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_sbrk_r+0x1a>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_sbrk_r+0x1a>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	240002ec 	.word	0x240002ec

0800862c <__sread>:
 800862c:	b510      	push	{r4, lr}
 800862e:	460c      	mov	r4, r1
 8008630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008634:	f000 faa8 	bl	8008b88 <_read_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	bfab      	itete	ge
 800863c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863e:	89a3      	ldrhlt	r3, [r4, #12]
 8008640:	181b      	addge	r3, r3, r0
 8008642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008646:	bfac      	ite	ge
 8008648:	6563      	strge	r3, [r4, #84]	; 0x54
 800864a:	81a3      	strhlt	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__swrite>:
 800864e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008652:	461f      	mov	r7, r3
 8008654:	898b      	ldrh	r3, [r1, #12]
 8008656:	05db      	lsls	r3, r3, #23
 8008658:	4605      	mov	r5, r0
 800865a:	460c      	mov	r4, r1
 800865c:	4616      	mov	r6, r2
 800865e:	d505      	bpl.n	800866c <__swrite+0x1e>
 8008660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008664:	2302      	movs	r3, #2
 8008666:	2200      	movs	r2, #0
 8008668:	f000 f9f8 	bl	8008a5c <_lseek_r>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	4632      	mov	r2, r6
 800867a:	463b      	mov	r3, r7
 800867c:	4628      	mov	r0, r5
 800867e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	f000 b869 	b.w	8008758 <_write_r>

08008686 <__sseek>:
 8008686:	b510      	push	{r4, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868e:	f000 f9e5 	bl	8008a5c <_lseek_r>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	bf15      	itete	ne
 8008698:	6560      	strne	r0, [r4, #84]	; 0x54
 800869a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a2:	81a3      	strheq	r3, [r4, #12]
 80086a4:	bf18      	it	ne
 80086a6:	81a3      	strhne	r3, [r4, #12]
 80086a8:	bd10      	pop	{r4, pc}

080086aa <__sclose>:
 80086aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ae:	f000 b8f1 	b.w	8008894 <_close_r>
	...

080086b4 <__swbuf_r>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	460e      	mov	r6, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	4605      	mov	r5, r0
 80086bc:	b118      	cbz	r0, 80086c6 <__swbuf_r+0x12>
 80086be:	6983      	ldr	r3, [r0, #24]
 80086c0:	b90b      	cbnz	r3, 80086c6 <__swbuf_r+0x12>
 80086c2:	f7ff f913 	bl	80078ec <__sinit>
 80086c6:	4b21      	ldr	r3, [pc, #132]	; (800874c <__swbuf_r+0x98>)
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d12b      	bne.n	8008724 <__swbuf_r+0x70>
 80086cc:	686c      	ldr	r4, [r5, #4]
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	60a3      	str	r3, [r4, #8]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	071a      	lsls	r2, r3, #28
 80086d6:	d52f      	bpl.n	8008738 <__swbuf_r+0x84>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b36b      	cbz	r3, 8008738 <__swbuf_r+0x84>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1ac0      	subs	r0, r0, r3
 80086e2:	6963      	ldr	r3, [r4, #20]
 80086e4:	b2f6      	uxtb	r6, r6
 80086e6:	4283      	cmp	r3, r0
 80086e8:	4637      	mov	r7, r6
 80086ea:	dc04      	bgt.n	80086f6 <__swbuf_r+0x42>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f966 	bl	80089c0 <_fflush_r>
 80086f4:	bb30      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	701e      	strb	r6, [r3, #0]
 8008704:	6963      	ldr	r3, [r4, #20]
 8008706:	3001      	adds	r0, #1
 8008708:	4283      	cmp	r3, r0
 800870a:	d004      	beq.n	8008716 <__swbuf_r+0x62>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d506      	bpl.n	8008720 <__swbuf_r+0x6c>
 8008712:	2e0a      	cmp	r6, #10
 8008714:	d104      	bne.n	8008720 <__swbuf_r+0x6c>
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f951 	bl	80089c0 <_fflush_r>
 800871e:	b988      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 8008720:	4638      	mov	r0, r7
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <__swbuf_r+0x9c>)
 8008726:	429c      	cmp	r4, r3
 8008728:	d101      	bne.n	800872e <__swbuf_r+0x7a>
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	e7cf      	b.n	80086ce <__swbuf_r+0x1a>
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <__swbuf_r+0xa0>)
 8008730:	429c      	cmp	r4, r3
 8008732:	bf08      	it	eq
 8008734:	68ec      	ldreq	r4, [r5, #12]
 8008736:	e7ca      	b.n	80086ce <__swbuf_r+0x1a>
 8008738:	4621      	mov	r1, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f81e 	bl	800877c <__swsetup_r>
 8008740:	2800      	cmp	r0, #0
 8008742:	d0cb      	beq.n	80086dc <__swbuf_r+0x28>
 8008744:	f04f 37ff 	mov.w	r7, #4294967295
 8008748:	e7ea      	b.n	8008720 <__swbuf_r+0x6c>
 800874a:	bf00      	nop
 800874c:	08008dec 	.word	0x08008dec
 8008750:	08008e0c 	.word	0x08008e0c
 8008754:	08008dcc 	.word	0x08008dcc

08008758 <_write_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_write_r+0x20>)
 800875c:	4604      	mov	r4, r0
 800875e:	4608      	mov	r0, r1
 8008760:	4611      	mov	r1, r2
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f7f8 faf9 	bl	8000d5e <_write>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_write_r+0x1e>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_write_r+0x1e>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	240002ec 	.word	0x240002ec

0800877c <__swsetup_r>:
 800877c:	4b32      	ldr	r3, [pc, #200]	; (8008848 <__swsetup_r+0xcc>)
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	681d      	ldr	r5, [r3, #0]
 8008782:	4606      	mov	r6, r0
 8008784:	460c      	mov	r4, r1
 8008786:	b125      	cbz	r5, 8008792 <__swsetup_r+0x16>
 8008788:	69ab      	ldr	r3, [r5, #24]
 800878a:	b913      	cbnz	r3, 8008792 <__swsetup_r+0x16>
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff f8ad 	bl	80078ec <__sinit>
 8008792:	4b2e      	ldr	r3, [pc, #184]	; (800884c <__swsetup_r+0xd0>)
 8008794:	429c      	cmp	r4, r3
 8008796:	d10f      	bne.n	80087b8 <__swsetup_r+0x3c>
 8008798:	686c      	ldr	r4, [r5, #4]
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a0:	0719      	lsls	r1, r3, #28
 80087a2:	d42c      	bmi.n	80087fe <__swsetup_r+0x82>
 80087a4:	06dd      	lsls	r5, r3, #27
 80087a6:	d411      	bmi.n	80087cc <__swsetup_r+0x50>
 80087a8:	2309      	movs	r3, #9
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295
 80087b6:	e03e      	b.n	8008836 <__swsetup_r+0xba>
 80087b8:	4b25      	ldr	r3, [pc, #148]	; (8008850 <__swsetup_r+0xd4>)
 80087ba:	429c      	cmp	r4, r3
 80087bc:	d101      	bne.n	80087c2 <__swsetup_r+0x46>
 80087be:	68ac      	ldr	r4, [r5, #8]
 80087c0:	e7eb      	b.n	800879a <__swsetup_r+0x1e>
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <__swsetup_r+0xd8>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	bf08      	it	eq
 80087c8:	68ec      	ldreq	r4, [r5, #12]
 80087ca:	e7e6      	b.n	800879a <__swsetup_r+0x1e>
 80087cc:	0758      	lsls	r0, r3, #29
 80087ce:	d512      	bpl.n	80087f6 <__swsetup_r+0x7a>
 80087d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087d2:	b141      	cbz	r1, 80087e6 <__swsetup_r+0x6a>
 80087d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <__swsetup_r+0x66>
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff fcdb 	bl	8008198 <_free_r>
 80087e2:	2300      	movs	r3, #0
 80087e4:	6363      	str	r3, [r4, #52]	; 0x34
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	2300      	movs	r3, #0
 80087f0:	6063      	str	r3, [r4, #4]
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f043 0308 	orr.w	r3, r3, #8
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	b94b      	cbnz	r3, 8008816 <__swsetup_r+0x9a>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800880c:	d003      	beq.n	8008816 <__swsetup_r+0x9a>
 800880e:	4621      	mov	r1, r4
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f95b 	bl	8008acc <__smakebuf_r>
 8008816:	89a0      	ldrh	r0, [r4, #12]
 8008818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800881c:	f010 0301 	ands.w	r3, r0, #1
 8008820:	d00a      	beq.n	8008838 <__swsetup_r+0xbc>
 8008822:	2300      	movs	r3, #0
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	6963      	ldr	r3, [r4, #20]
 8008828:	425b      	negs	r3, r3
 800882a:	61a3      	str	r3, [r4, #24]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	b943      	cbnz	r3, 8008842 <__swsetup_r+0xc6>
 8008830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008834:	d1ba      	bne.n	80087ac <__swsetup_r+0x30>
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	0781      	lsls	r1, r0, #30
 800883a:	bf58      	it	pl
 800883c:	6963      	ldrpl	r3, [r4, #20]
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	e7f4      	b.n	800882c <__swsetup_r+0xb0>
 8008842:	2000      	movs	r0, #0
 8008844:	e7f7      	b.n	8008836 <__swsetup_r+0xba>
 8008846:	bf00      	nop
 8008848:	24000010 	.word	0x24000010
 800884c:	08008dec 	.word	0x08008dec
 8008850:	08008e0c 	.word	0x08008e0c
 8008854:	08008dcc 	.word	0x08008dcc

08008858 <__assert_func>:
 8008858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800885a:	4614      	mov	r4, r2
 800885c:	461a      	mov	r2, r3
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <__assert_func+0x2c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4605      	mov	r5, r0
 8008864:	68d8      	ldr	r0, [r3, #12]
 8008866:	b14c      	cbz	r4, 800887c <__assert_func+0x24>
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <__assert_func+0x30>)
 800886a:	9100      	str	r1, [sp, #0]
 800886c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008870:	4906      	ldr	r1, [pc, #24]	; (800888c <__assert_func+0x34>)
 8008872:	462b      	mov	r3, r5
 8008874:	f000 f8e0 	bl	8008a38 <fiprintf>
 8008878:	f000 f9a5 	bl	8008bc6 <abort>
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <__assert_func+0x38>)
 800887e:	461c      	mov	r4, r3
 8008880:	e7f3      	b.n	800886a <__assert_func+0x12>
 8008882:	bf00      	nop
 8008884:	24000010 	.word	0x24000010
 8008888:	08008f95 	.word	0x08008f95
 800888c:	08008fa2 	.word	0x08008fa2
 8008890:	08008fd0 	.word	0x08008fd0

08008894 <_close_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d06      	ldr	r5, [pc, #24]	; (80088b0 <_close_r+0x1c>)
 8008898:	2300      	movs	r3, #0
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	f7f8 fa79 	bl	8000d96 <_close>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_close_r+0x1a>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_close_r+0x1a>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	240002ec 	.word	0x240002ec

080088b4 <__sflush_r>:
 80088b4:	898a      	ldrh	r2, [r1, #12]
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	4605      	mov	r5, r0
 80088bc:	0710      	lsls	r0, r2, #28
 80088be:	460c      	mov	r4, r1
 80088c0:	d458      	bmi.n	8008974 <__sflush_r+0xc0>
 80088c2:	684b      	ldr	r3, [r1, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc05      	bgt.n	80088d4 <__sflush_r+0x20>
 80088c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dc02      	bgt.n	80088d4 <__sflush_r+0x20>
 80088ce:	2000      	movs	r0, #0
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d0f9      	beq.n	80088ce <__sflush_r+0x1a>
 80088da:	2300      	movs	r3, #0
 80088dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088e0:	682f      	ldr	r7, [r5, #0]
 80088e2:	602b      	str	r3, [r5, #0]
 80088e4:	d032      	beq.n	800894c <__sflush_r+0x98>
 80088e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	075a      	lsls	r2, r3, #29
 80088ec:	d505      	bpl.n	80088fa <__sflush_r+0x46>
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	1ac0      	subs	r0, r0, r3
 80088f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f4:	b10b      	cbz	r3, 80088fa <__sflush_r+0x46>
 80088f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f8:	1ac0      	subs	r0, r0, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	4602      	mov	r2, r0
 80088fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008900:	6a21      	ldr	r1, [r4, #32]
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	d106      	bne.n	800891a <__sflush_r+0x66>
 800890c:	6829      	ldr	r1, [r5, #0]
 800890e:	291d      	cmp	r1, #29
 8008910:	d82c      	bhi.n	800896c <__sflush_r+0xb8>
 8008912:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <__sflush_r+0x108>)
 8008914:	40ca      	lsrs	r2, r1
 8008916:	07d6      	lsls	r6, r2, #31
 8008918:	d528      	bpl.n	800896c <__sflush_r+0xb8>
 800891a:	2200      	movs	r2, #0
 800891c:	6062      	str	r2, [r4, #4]
 800891e:	04d9      	lsls	r1, r3, #19
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	d504      	bpl.n	8008930 <__sflush_r+0x7c>
 8008926:	1c42      	adds	r2, r0, #1
 8008928:	d101      	bne.n	800892e <__sflush_r+0x7a>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	b903      	cbnz	r3, 8008930 <__sflush_r+0x7c>
 800892e:	6560      	str	r0, [r4, #84]	; 0x54
 8008930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008932:	602f      	str	r7, [r5, #0]
 8008934:	2900      	cmp	r1, #0
 8008936:	d0ca      	beq.n	80088ce <__sflush_r+0x1a>
 8008938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800893c:	4299      	cmp	r1, r3
 800893e:	d002      	beq.n	8008946 <__sflush_r+0x92>
 8008940:	4628      	mov	r0, r5
 8008942:	f7ff fc29 	bl	8008198 <_free_r>
 8008946:	2000      	movs	r0, #0
 8008948:	6360      	str	r0, [r4, #52]	; 0x34
 800894a:	e7c1      	b.n	80088d0 <__sflush_r+0x1c>
 800894c:	6a21      	ldr	r1, [r4, #32]
 800894e:	2301      	movs	r3, #1
 8008950:	4628      	mov	r0, r5
 8008952:	47b0      	blx	r6
 8008954:	1c41      	adds	r1, r0, #1
 8008956:	d1c7      	bne.n	80088e8 <__sflush_r+0x34>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c4      	beq.n	80088e8 <__sflush_r+0x34>
 800895e:	2b1d      	cmp	r3, #29
 8008960:	d001      	beq.n	8008966 <__sflush_r+0xb2>
 8008962:	2b16      	cmp	r3, #22
 8008964:	d101      	bne.n	800896a <__sflush_r+0xb6>
 8008966:	602f      	str	r7, [r5, #0]
 8008968:	e7b1      	b.n	80088ce <__sflush_r+0x1a>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	e7ad      	b.n	80088d0 <__sflush_r+0x1c>
 8008974:	690f      	ldr	r7, [r1, #16]
 8008976:	2f00      	cmp	r7, #0
 8008978:	d0a9      	beq.n	80088ce <__sflush_r+0x1a>
 800897a:	0793      	lsls	r3, r2, #30
 800897c:	680e      	ldr	r6, [r1, #0]
 800897e:	bf08      	it	eq
 8008980:	694b      	ldreq	r3, [r1, #20]
 8008982:	600f      	str	r7, [r1, #0]
 8008984:	bf18      	it	ne
 8008986:	2300      	movne	r3, #0
 8008988:	eba6 0807 	sub.w	r8, r6, r7
 800898c:	608b      	str	r3, [r1, #8]
 800898e:	f1b8 0f00 	cmp.w	r8, #0
 8008992:	dd9c      	ble.n	80088ce <__sflush_r+0x1a>
 8008994:	6a21      	ldr	r1, [r4, #32]
 8008996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008998:	4643      	mov	r3, r8
 800899a:	463a      	mov	r2, r7
 800899c:	4628      	mov	r0, r5
 800899e:	47b0      	blx	r6
 80089a0:	2800      	cmp	r0, #0
 80089a2:	dc06      	bgt.n	80089b2 <__sflush_r+0xfe>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e78e      	b.n	80088d0 <__sflush_r+0x1c>
 80089b2:	4407      	add	r7, r0
 80089b4:	eba8 0800 	sub.w	r8, r8, r0
 80089b8:	e7e9      	b.n	800898e <__sflush_r+0xda>
 80089ba:	bf00      	nop
 80089bc:	20400001 	.word	0x20400001

080089c0 <_fflush_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b913      	cbnz	r3, 80089d0 <_fflush_r+0x10>
 80089ca:	2500      	movs	r5, #0
 80089cc:	4628      	mov	r0, r5
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	b118      	cbz	r0, 80089da <_fflush_r+0x1a>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <_fflush_r+0x1a>
 80089d6:	f7fe ff89 	bl	80078ec <__sinit>
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <_fflush_r+0x6c>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d11b      	bne.n	8008a18 <_fflush_r+0x58>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ef      	beq.n	80089ca <_fflush_r+0xa>
 80089ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089ec:	07d0      	lsls	r0, r2, #31
 80089ee:	d404      	bmi.n	80089fa <_fflush_r+0x3a>
 80089f0:	0599      	lsls	r1, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_fflush_r+0x3a>
 80089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f6:	f7ff f81c 	bl	8007a32 <__retarget_lock_acquire_recursive>
 80089fa:	4628      	mov	r0, r5
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7ff ff59 	bl	80088b4 <__sflush_r>
 8008a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a04:	07da      	lsls	r2, r3, #31
 8008a06:	4605      	mov	r5, r0
 8008a08:	d4e0      	bmi.n	80089cc <_fflush_r+0xc>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	059b      	lsls	r3, r3, #22
 8008a0e:	d4dd      	bmi.n	80089cc <_fflush_r+0xc>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f7ff f80f 	bl	8007a34 <__retarget_lock_release_recursive>
 8008a16:	e7d9      	b.n	80089cc <_fflush_r+0xc>
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <_fflush_r+0x70>)
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	d101      	bne.n	8008a22 <_fflush_r+0x62>
 8008a1e:	68ac      	ldr	r4, [r5, #8]
 8008a20:	e7df      	b.n	80089e2 <_fflush_r+0x22>
 8008a22:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <_fflush_r+0x74>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	bf08      	it	eq
 8008a28:	68ec      	ldreq	r4, [r5, #12]
 8008a2a:	e7da      	b.n	80089e2 <_fflush_r+0x22>
 8008a2c:	08008dec 	.word	0x08008dec
 8008a30:	08008e0c 	.word	0x08008e0c
 8008a34:	08008dcc 	.word	0x08008dcc

08008a38 <fiprintf>:
 8008a38:	b40e      	push	{r1, r2, r3}
 8008a3a:	b503      	push	{r0, r1, lr}
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	4805      	ldr	r0, [pc, #20]	; (8008a58 <fiprintf+0x20>)
 8008a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	f7ff fcaf 	bl	80083ac <_vfiprintf_r>
 8008a4e:	b002      	add	sp, #8
 8008a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a54:	b003      	add	sp, #12
 8008a56:	4770      	bx	lr
 8008a58:	24000010 	.word	0x24000010

08008a5c <_lseek_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d07      	ldr	r5, [pc, #28]	; (8008a7c <_lseek_r+0x20>)
 8008a60:	4604      	mov	r4, r0
 8008a62:	4608      	mov	r0, r1
 8008a64:	4611      	mov	r1, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	602a      	str	r2, [r5, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f7f8 f9ba 	bl	8000de4 <_lseek>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_lseek_r+0x1e>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_lseek_r+0x1e>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	240002ec 	.word	0x240002ec

08008a80 <__swhatbuf_r>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	460e      	mov	r6, r1
 8008a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	b096      	sub	sp, #88	; 0x58
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	461d      	mov	r5, r3
 8008a90:	da08      	bge.n	8008aa4 <__swhatbuf_r+0x24>
 8008a92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	602a      	str	r2, [r5, #0]
 8008a9a:	061a      	lsls	r2, r3, #24
 8008a9c:	d410      	bmi.n	8008ac0 <__swhatbuf_r+0x40>
 8008a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa2:	e00e      	b.n	8008ac2 <__swhatbuf_r+0x42>
 8008aa4:	466a      	mov	r2, sp
 8008aa6:	f000 f895 	bl	8008bd4 <_fstat_r>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	dbf1      	blt.n	8008a92 <__swhatbuf_r+0x12>
 8008aae:	9a01      	ldr	r2, [sp, #4]
 8008ab0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ab4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ab8:	425a      	negs	r2, r3
 8008aba:	415a      	adcs	r2, r3
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	e7ee      	b.n	8008a9e <__swhatbuf_r+0x1e>
 8008ac0:	2340      	movs	r3, #64	; 0x40
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	b016      	add	sp, #88	; 0x58
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008acc <__smakebuf_r>:
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ad0:	079d      	lsls	r5, r3, #30
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	d507      	bpl.n	8008ae8 <__smakebuf_r+0x1c>
 8008ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	6163      	str	r3, [r4, #20]
 8008ae4:	b002      	add	sp, #8
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	ab01      	add	r3, sp, #4
 8008aea:	466a      	mov	r2, sp
 8008aec:	f7ff ffc8 	bl	8008a80 <__swhatbuf_r>
 8008af0:	9900      	ldr	r1, [sp, #0]
 8008af2:	4605      	mov	r5, r0
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7ff fbbb 	bl	8008270 <_malloc_r>
 8008afa:	b948      	cbnz	r0, 8008b10 <__smakebuf_r+0x44>
 8008afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b00:	059a      	lsls	r2, r3, #22
 8008b02:	d4ef      	bmi.n	8008ae4 <__smakebuf_r+0x18>
 8008b04:	f023 0303 	bic.w	r3, r3, #3
 8008b08:	f043 0302 	orr.w	r3, r3, #2
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	e7e3      	b.n	8008ad8 <__smakebuf_r+0xc>
 8008b10:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <__smakebuf_r+0x7c>)
 8008b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	6020      	str	r0, [r4, #0]
 8008b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	9b00      	ldr	r3, [sp, #0]
 8008b20:	6163      	str	r3, [r4, #20]
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	6120      	str	r0, [r4, #16]
 8008b26:	b15b      	cbz	r3, 8008b40 <__smakebuf_r+0x74>
 8008b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f000 f863 	bl	8008bf8 <_isatty_r>
 8008b32:	b128      	cbz	r0, 8008b40 <__smakebuf_r+0x74>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	89a0      	ldrh	r0, [r4, #12]
 8008b42:	4305      	orrs	r5, r0
 8008b44:	81a5      	strh	r5, [r4, #12]
 8008b46:	e7cd      	b.n	8008ae4 <__smakebuf_r+0x18>
 8008b48:	08007885 	.word	0x08007885

08008b4c <__ascii_mbtowc>:
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	b901      	cbnz	r1, 8008b52 <__ascii_mbtowc+0x6>
 8008b50:	a901      	add	r1, sp, #4
 8008b52:	b142      	cbz	r2, 8008b66 <__ascii_mbtowc+0x1a>
 8008b54:	b14b      	cbz	r3, 8008b6a <__ascii_mbtowc+0x1e>
 8008b56:	7813      	ldrb	r3, [r2, #0]
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	1e10      	subs	r0, r2, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2001      	movne	r0, #1
 8008b62:	b002      	add	sp, #8
 8008b64:	4770      	bx	lr
 8008b66:	4610      	mov	r0, r2
 8008b68:	e7fb      	b.n	8008b62 <__ascii_mbtowc+0x16>
 8008b6a:	f06f 0001 	mvn.w	r0, #1
 8008b6e:	e7f8      	b.n	8008b62 <__ascii_mbtowc+0x16>

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f7fe bf5e 	b.w	8007a32 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	240002e0 	.word	0x240002e0

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f7fe bf59 	b.w	8007a34 <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	240002e0 	.word	0x240002e0

08008b88 <_read_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_read_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 f8c4 	bl	8000d24 <_read>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_read_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_read_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	240002ec 	.word	0x240002ec

08008bac <__ascii_wctomb>:
 8008bac:	b149      	cbz	r1, 8008bc2 <__ascii_wctomb+0x16>
 8008bae:	2aff      	cmp	r2, #255	; 0xff
 8008bb0:	bf85      	ittet	hi
 8008bb2:	238a      	movhi	r3, #138	; 0x8a
 8008bb4:	6003      	strhi	r3, [r0, #0]
 8008bb6:	700a      	strbls	r2, [r1, #0]
 8008bb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bbc:	bf98      	it	ls
 8008bbe:	2001      	movls	r0, #1
 8008bc0:	4770      	bx	lr
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4770      	bx	lr

08008bc6 <abort>:
 8008bc6:	b508      	push	{r3, lr}
 8008bc8:	2006      	movs	r0, #6
 8008bca:	f000 f84d 	bl	8008c68 <raise>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	f7f8 f89e 	bl	8000d10 <_exit>

08008bd4 <_fstat_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_fstat_r+0x20>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	f7f8 f8e4 	bl	8000dae <_fstat>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d102      	bne.n	8008bf0 <_fstat_r+0x1c>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b103      	cbz	r3, 8008bf0 <_fstat_r+0x1c>
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	240002ec 	.word	0x240002ec

08008bf8 <_isatty_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d06      	ldr	r5, [pc, #24]	; (8008c14 <_isatty_r+0x1c>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f8 f8e3 	bl	8000dce <_isatty>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_isatty_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_isatty_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	240002ec 	.word	0x240002ec

08008c18 <_raise_r>:
 8008c18:	291f      	cmp	r1, #31
 8008c1a:	b538      	push	{r3, r4, r5, lr}
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	d904      	bls.n	8008c2c <_raise_r+0x14>
 8008c22:	2316      	movs	r3, #22
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c2e:	b112      	cbz	r2, 8008c36 <_raise_r+0x1e>
 8008c30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c34:	b94b      	cbnz	r3, 8008c4a <_raise_r+0x32>
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 f830 	bl	8008c9c <_getpid_r>
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4601      	mov	r1, r0
 8008c40:	4620      	mov	r0, r4
 8008c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c46:	f000 b817 	b.w	8008c78 <_kill_r>
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d00a      	beq.n	8008c64 <_raise_r+0x4c>
 8008c4e:	1c59      	adds	r1, r3, #1
 8008c50:	d103      	bne.n	8008c5a <_raise_r+0x42>
 8008c52:	2316      	movs	r3, #22
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	2001      	movs	r0, #1
 8008c58:	e7e7      	b.n	8008c2a <_raise_r+0x12>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c60:	4628      	mov	r0, r5
 8008c62:	4798      	blx	r3
 8008c64:	2000      	movs	r0, #0
 8008c66:	e7e0      	b.n	8008c2a <_raise_r+0x12>

08008c68 <raise>:
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <raise+0xc>)
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	f7ff bfd3 	b.w	8008c18 <_raise_r>
 8008c72:	bf00      	nop
 8008c74:	24000010 	.word	0x24000010

08008c78 <_kill_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d07      	ldr	r5, [pc, #28]	; (8008c98 <_kill_r+0x20>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f7f8 f833 	bl	8000cf0 <_kill>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d102      	bne.n	8008c94 <_kill_r+0x1c>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b103      	cbz	r3, 8008c94 <_kill_r+0x1c>
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop
 8008c98:	240002ec 	.word	0x240002ec

08008c9c <_getpid_r>:
 8008c9c:	f7f8 b820 	b.w	8000ce0 <_getpid>

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
